Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 3000 :genetic-operator-probabilities {:uniform-addition-and-deletion,1.0} :uniform-addition-and-deletion-rate 0.09
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x30b9728f clojush.problems.software.smallest$fn__7461@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@24b8a393]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:uniform-addition-and-deletion 1.0}
max-error = 1
max-generations = 3000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[29 29 -38 29] -38] [[-70 -70 46 -70] -70] [[-67 -67 -67 -66] -67] [[-72 88 88 88] -72] [[-26 -26 -26 -26] -26] [[76 -42 76 76] -42] [[-9 -9 -9 100] -9] [[81 15 15 15] 15] [[-54 -54 -54 6] -54] [[-49 -49 -49 36] -49] [(45 45 45 45) 45] [(83 83 83 83) 83] [(-82 -82 -82 -82) -82] [(84 84 84 84) 84] [(-68 -68 -68 -68) -68] [(59 87 40 33) 33] [(92 23 83 12) 12] [(42 31 41 7) 7] [(97 11 10 8) 8] [(99 72 88 3) 3] [(26 66 9 78) 9] [(97 77 96 74) 74] [(22 77 38 46) 22] [(100 94 8 26) 8] [(18 19 19 80) 18] [(12 84 40 40) 12] [(56 28 97 48) 28] [(11 42 81 44) 11] [(55 9 78 47) 9] [(76 91 16 6) 6] [(3 20 51 78) 3] [(91 68 81 77) 68] [(45 56 57 17) 17] [(30 53 63 94) 30] [(66 25 2 20) 2] [(61 55 29 31) 29] [(35 -85 90 -94) -94] [(-83 -93 95 73) -93] [(19 81 37 -2) -2] [(-19 -69 19 72) -69] [(-80 -7 3 5) -80] [(-15 -12 65 -81) -81] [(-45 85 62 -52) -52] [(3 -42 -6 -71) -71] [(-21 46 -56 -84) -84] [(34 24 -15 47) -15] [(100 23 -84 96) -84] [(8 -92 1 -62) -92] [(17 -32 -82 31) -82] [(-11 -54 25 -87) -87] [(-21 -83 81 -97) -97] [(92 3 42 85) 3] [(-4 -49 -3 63) -49] [(-15 -51 78 -26) -51] [(0 93 -32 28) -32] [(37 -70 -28 -71) -71] [(33 -39 -72 -85) -85] [(21 39 -11 -3) -11] [(15 54 -86 -85) -86] [(-96 34 97 44) -96] [(-69 -52 51 -15) -69] [(-41 -15 -56 49) -56] [(18 87 42 -72) -72] [(23 -40 -2 -73) -73] [(-5 4 -64 89) -64] [(-98 -12 4 87) -98] [(-68 91 45 15) -68] [(-36 -61 -21 62) -61] [(-71 -81 87 100) -81] [(23 -83 65 58) -83] [(91 -72 56 -9) -72] [(56 79 -18 92) -18] [(83 47 40 -81) -81] [(-77 35 72 -50) -77] [(-14 -70 -81 84) -81] [(-13 -83 84 98) -83] [(74 -3 62 -84) -84] [(93 84 -52 89) -52] [(-25 -45 -32 -96) -96] [(-91 92 64 96) -91] [(-11 94 39 48) -11] [(-22 -43 -24 -23) -43] [(-60 83 77 15) -60] [(-27 90 72 -14) -27] [(-47 56 99 -71) -71] [(-15 45 70 16) -15] [(1 -2 38 -4) -4] [(-92 -37 2 -70) -92] [(-14 31 48 -19) -19] [(-100 -98 -93 -24) -100] [(-76 79 -90 -36) -90] [(13 55 85 39) 13] [(93 38 -98 42) -98] [(-90 96 -7 -32) -90] [(-50 75 -16 88) -50])
uniform-addition-and-deletion-rate = 0.09
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[29 29 -38 29] -38]
Train Case:   6 | Input/Output: [[-70 -70 46 -70] -70]
Train Case:   7 | Input/Output: [[-67 -67 -67 -66] -67]
Train Case:   8 | Input/Output: [[-72 88 88 88] -72]
Train Case:   9 | Input/Output: [[-26 -26 -26 -26] -26]
Train Case:  10 | Input/Output: [[76 -42 76 76] -42]
Train Case:  11 | Input/Output: [[-9 -9 -9 100] -9]
Train Case:  12 | Input/Output: [[81 15 15 15] 15]
Train Case:  13 | Input/Output: [[-54 -54 -54 6] -54]
Train Case:  14 | Input/Output: [[-49 -49 -49 36] -49]
Train Case:  15 | Input/Output: [(45 45 45 45) 45]
Train Case:  16 | Input/Output: [(83 83 83 83) 83]
Train Case:  17 | Input/Output: [(-82 -82 -82 -82) -82]
Train Case:  18 | Input/Output: [(84 84 84 84) 84]
Train Case:  19 | Input/Output: [(-68 -68 -68 -68) -68]
Train Case:  20 | Input/Output: [(59 87 40 33) 33]
Train Case:  21 | Input/Output: [(92 23 83 12) 12]
Train Case:  22 | Input/Output: [(42 31 41 7) 7]
Train Case:  23 | Input/Output: [(97 11 10 8) 8]
Train Case:  24 | Input/Output: [(99 72 88 3) 3]
Train Case:  25 | Input/Output: [(26 66 9 78) 9]
Train Case:  26 | Input/Output: [(97 77 96 74) 74]
Train Case:  27 | Input/Output: [(22 77 38 46) 22]
Train Case:  28 | Input/Output: [(100 94 8 26) 8]
Train Case:  29 | Input/Output: [(18 19 19 80) 18]
Train Case:  30 | Input/Output: [(12 84 40 40) 12]
Train Case:  31 | Input/Output: [(56 28 97 48) 28]
Train Case:  32 | Input/Output: [(11 42 81 44) 11]
Train Case:  33 | Input/Output: [(55 9 78 47) 9]
Train Case:  34 | Input/Output: [(76 91 16 6) 6]
Train Case:  35 | Input/Output: [(3 20 51 78) 3]
Train Case:  36 | Input/Output: [(91 68 81 77) 68]
Train Case:  37 | Input/Output: [(45 56 57 17) 17]
Train Case:  38 | Input/Output: [(30 53 63 94) 30]
Train Case:  39 | Input/Output: [(66 25 2 20) 2]
Train Case:  40 | Input/Output: [(61 55 29 31) 29]
Train Case:  41 | Input/Output: [(35 -85 90 -94) -94]
Train Case:  42 | Input/Output: [(-83 -93 95 73) -93]
Train Case:  43 | Input/Output: [(19 81 37 -2) -2]
Train Case:  44 | Input/Output: [(-19 -69 19 72) -69]
Train Case:  45 | Input/Output: [(-80 -7 3 5) -80]
Train Case:  46 | Input/Output: [(-15 -12 65 -81) -81]
Train Case:  47 | Input/Output: [(-45 85 62 -52) -52]
Train Case:  48 | Input/Output: [(3 -42 -6 -71) -71]
Train Case:  49 | Input/Output: [(-21 46 -56 -84) -84]
Train Case:  50 | Input/Output: [(34 24 -15 47) -15]
Train Case:  51 | Input/Output: [(100 23 -84 96) -84]
Train Case:  52 | Input/Output: [(8 -92 1 -62) -92]
Train Case:  53 | Input/Output: [(17 -32 -82 31) -82]
Train Case:  54 | Input/Output: [(-11 -54 25 -87) -87]
Train Case:  55 | Input/Output: [(-21 -83 81 -97) -97]
Train Case:  56 | Input/Output: [(92 3 42 85) 3]
Train Case:  57 | Input/Output: [(-4 -49 -3 63) -49]
Train Case:  58 | Input/Output: [(-15 -51 78 -26) -51]
Train Case:  59 | Input/Output: [(0 93 -32 28) -32]
Train Case:  60 | Input/Output: [(37 -70 -28 -71) -71]
Train Case:  61 | Input/Output: [(33 -39 -72 -85) -85]
Train Case:  62 | Input/Output: [(21 39 -11 -3) -11]
Train Case:  63 | Input/Output: [(15 54 -86 -85) -86]
Train Case:  64 | Input/Output: [(-96 34 97 44) -96]
Train Case:  65 | Input/Output: [(-69 -52 51 -15) -69]
Train Case:  66 | Input/Output: [(-41 -15 -56 49) -56]
Train Case:  67 | Input/Output: [(18 87 42 -72) -72]
Train Case:  68 | Input/Output: [(23 -40 -2 -73) -73]
Train Case:  69 | Input/Output: [(-5 4 -64 89) -64]
Train Case:  70 | Input/Output: [(-98 -12 4 87) -98]
Train Case:  71 | Input/Output: [(-68 91 45 15) -68]
Train Case:  72 | Input/Output: [(-36 -61 -21 62) -61]
Train Case:  73 | Input/Output: [(-71 -81 87 100) -81]
Train Case:  74 | Input/Output: [(23 -83 65 58) -83]
Train Case:  75 | Input/Output: [(91 -72 56 -9) -72]
Train Case:  76 | Input/Output: [(56 79 -18 92) -18]
Train Case:  77 | Input/Output: [(83 47 40 -81) -81]
Train Case:  78 | Input/Output: [(-77 35 72 -50) -77]
Train Case:  79 | Input/Output: [(-14 -70 -81 84) -81]
Train Case:  80 | Input/Output: [(-13 -83 84 98) -83]
Train Case:  81 | Input/Output: [(74 -3 62 -84) -84]
Train Case:  82 | Input/Output: [(93 84 -52 89) -52]
Train Case:  83 | Input/Output: [(-25 -45 -32 -96) -96]
Train Case:  84 | Input/Output: [(-91 92 64 96) -91]
Train Case:  85 | Input/Output: [(-11 94 39 48) -11]
Train Case:  86 | Input/Output: [(-22 -43 -24 -23) -43]
Train Case:  87 | Input/Output: [(-60 83 77 15) -60]
Train Case:  88 | Input/Output: [(-27 90 72 -14) -27]
Train Case:  89 | Input/Output: [(-47 56 99 -71) -71]
Train Case:  90 | Input/Output: [(-15 45 70 16) -15]
Train Case:  91 | Input/Output: [(1 -2 38 -4) -4]
Train Case:  92 | Input/Output: [(-92 -37 2 -70) -92]
Train Case:  93 | Input/Output: [(-14 31 48 -19) -19]
Train Case:  94 | Input/Output: [(-100 -98 -93 -24) -100]
Train Case:  95 | Input/Output: [(-76 79 -90 -36) -90]
Train Case:  96 | Input/Output: [(13 55 85 39) 13]
Train Case:  97 | Input/Output: [(93 38 -98 42) -98]
Train Case:  98 | Input/Output: [(-90 96 -7 -32) -90]
Train Case:  99 | Input/Output: [(-50 75 -16 88) -50]
Test Case:   0 | Input/Output: [[-14 -47 -14 -14] -47]
Test Case:   1 | Input/Output: [[51 -92 51 51] -92]
Test Case:   2 | Input/Output: [[-21 -21 96 -21] -21]
Test Case:   3 | Input/Output: [[-37 30 30 30] -37]
Test Case:   4 | Input/Output: [[-8 94 94 94] -8]
Test Case:   5 | Input/Output: [[42 42 42 98] 42]
Test Case:   6 | Input/Output: [[-71 -71 -71 -71] -71]
Test Case:   7 | Input/Output: [[100 -40 100 100] -40]
Test Case:   8 | Input/Output: [[13 13 47 13] 13]
Test Case:   9 | Input/Output: [[83 83 83 -100] -100]
Test Case:  10 | Input/Output: [[12 52 52 52] 12]
Test Case:  11 | Input/Output: [[-67 -51 -67 -67] -67]
Test Case:  12 | Input/Output: [[-61 -22 -22 -22] -61]
Test Case:  13 | Input/Output: [[59 59 59 92] 59]
Test Case:  14 | Input/Output: [[96 12 12 12] 12]
Test Case:  15 | Input/Output: [[51 -48 51 51] -48]
Test Case:  16 | Input/Output: [[-68 -68 77 -68] -68]
Test Case:  17 | Input/Output: [[-44 22 22 22] -44]
Test Case:  18 | Input/Output: [[65 65 65 93] 65]
Test Case:  19 | Input/Output: [[-91 -91 99 -91] -91]
Test Case:  20 | Input/Output: [[21 -73 21 21] -73]
Test Case:  21 | Input/Output: [[-68 -68 93 -68] -68]
Test Case:  22 | Input/Output: [[-78 88 88 88] -78]
Test Case:  23 | Input/Output: [[64 4 64 64] 4]
Test Case:  24 | Input/Output: [[-78 -88 -78 -78] -88]
Test Case:  25 | Input/Output: [[51 -99 51 51] -99]
Test Case:  26 | Input/Output: [[-9 -9 -9 -75] -75]
Test Case:  27 | Input/Output: [[76 76 -20 76] -20]
Test Case:  28 | Input/Output: [[-10 -10 -10 40] -10]
Test Case:  29 | Input/Output: [[-57 7 7 7] -57]
Test Case:  30 | Input/Output: [[-76 -76 -76 -55] -76]
Test Case:  31 | Input/Output: [[23 -61 -61 -61] -61]
Test Case:  32 | Input/Output: [[-56 -44 -44 -44] -56]
Test Case:  33 | Input/Output: [[-23 -16 -16 -16] -23]
Test Case:  34 | Input/Output: [[-62 -62 -88 -62] -88]
Test Case:  35 | Input/Output: [[76 76 76 -71] -71]
Test Case:  36 | Input/Output: [[92 92 92 -6] -6]
Test Case:  37 | Input/Output: [[-66 -66 -51 -66] -66]
Test Case:  38 | Input/Output: [[68 51 51 51] 51]
Test Case:  39 | Input/Output: [[-2 -23 -23 -23] -23]
Test Case:  40 | Input/Output: [[7 32 7 7] 7]
Test Case:  41 | Input/Output: [[12 12 12 -47] -47]
Test Case:  42 | Input/Output: [[5 5 5 -94] -94]
Test Case:  43 | Input/Output: [[4 2 2 2] 2]
Test Case:  44 | Input/Output: [[-84 62 -84 -84] -84]
Test Case:  45 | Input/Output: [[27 -12 27 27] -12]
Test Case:  46 | Input/Output: [[35 -42 -42 -42] -42]
Test Case:  47 | Input/Output: [[-81 -36 -36 -36] -81]
Test Case:  48 | Input/Output: [[-65 -81 -65 -65] -81]
Test Case:  49 | Input/Output: [[-71 -71 -71 -91] -91]
Test Case:  50 | Input/Output: [[83 -68 83 83] -68]
Test Case:  51 | Input/Output: [[-19 -19 59 -19] -19]
Test Case:  52 | Input/Output: [[-86 -86 -86 -86] -86]
Test Case:  53 | Input/Output: [[96 -27 -27 -27] -27]
Test Case:  54 | Input/Output: [[-5 -5 -5 39] -5]
Test Case:  55 | Input/Output: [[-48 -87 -87 -87] -87]
Test Case:  56 | Input/Output: [[18 -45 -45 -45] -45]
Test Case:  57 | Input/Output: [[53 -41 -41 -41] -41]
Test Case:  58 | Input/Output: [[94 -23 -23 -23] -23]
Test Case:  59 | Input/Output: [[72 -66 72 72] -66]
Test Case:  60 | Input/Output: [[79 -27 -27 -27] -27]
Test Case:  61 | Input/Output: [[14 -31 14 14] -31]
Test Case:  62 | Input/Output: [[-89 -89 -89 -84] -89]
Test Case:  63 | Input/Output: [[-43 -43 -74 -43] -74]
Test Case:  64 | Input/Output: [[-10 61 -10 -10] -10]
Test Case:  65 | Input/Output: [[8 76 76 76] 8]
Test Case:  66 | Input/Output: [[-47 -47 -47 -54] -54]
Test Case:  67 | Input/Output: [[5 73 73 73] 5]
Test Case:  68 | Input/Output: [[-60 -60 -60 16] -60]
Test Case:  69 | Input/Output: [[21 39 21 21] 21]
Test Case:  70 | Input/Output: [[-39 -61 -61 -61] -61]
Test Case:  71 | Input/Output: [[-67 -65 -65 -65] -67]
Test Case:  72 | Input/Output: [[27 13 27 27] 13]
Test Case:  73 | Input/Output: [[-73 -73 -73 25] -73]
Test Case:  74 | Input/Output: [[-6 -61 -6 -6] -61]
Test Case:  75 | Input/Output: [[16 16 51 16] 16]
Test Case:  76 | Input/Output: [[67 19 19 19] 19]
Test Case:  77 | Input/Output: [[100 100 46 100] 46]
Test Case:  78 | Input/Output: [[-83 -8 -83 -83] -83]
Test Case:  79 | Input/Output: [[-8 42 -8 -8] -8]
Test Case:  80 | Input/Output: [[-36 -36 -10 -36] -36]
Test Case:  81 | Input/Output: [[56 22 22 22] 22]
Test Case:  82 | Input/Output: [[-60 -41 -41 -41] -60]
Test Case:  83 | Input/Output: [[-66 -66 -59 -66] -66]
Test Case:  84 | Input/Output: [[47 47 47 -36] -36]
Test Case:  85 | Input/Output: [[45 -50 45 45] -50]
Test Case:  86 | Input/Output: [[84 37 37 37] 37]
Test Case:  87 | Input/Output: [[-7 -7 -7 -26] -26]
Test Case:  88 | Input/Output: [[-99 -32 -99 -99] -99]
Test Case:  89 | Input/Output: [[-37 -28 -37 -37] -37]
Test Case:  90 | Input/Output: [[97 97 97 -32] -32]
Test Case:  91 | Input/Output: [[-48 -48 -48 12] -48]
Test Case:  92 | Input/Output: [[54 54 54 48] 48]
Test Case:  93 | Input/Output: [[36 36 36 -31] -31]
Test Case:  94 | Input/Output: [[0 -54 0 0] -54]
Test Case:  95 | Input/Output: [[-65 -65 98 -65] -65]
Test Case:  96 | Input/Output: [[-45 28 28 28] -45]
Test Case:  97 | Input/Output: [[16 16 16 43] 16]
Test Case:  98 | Input/Output: [[73 73 73 -57] -57]
Test Case:  99 | Input/Output: [[-15 -15 -15 -22] -22]
Test Case: 100 | Input/Output: [(-99 -99 -99 -99) -99]
Test Case: 101 | Input/Output: [(33 33 33 33) 33]
Test Case: 102 | Input/Output: [(10 10 10 10) 10]
Test Case: 103 | Input/Output: [(51 51 51 51) 51]
Test Case: 104 | Input/Output: [(-67 -67 -67 -67) -67]
Test Case: 105 | Input/Output: [(-33 -33 -33 -33) -33]
Test Case: 106 | Input/Output: [(-91 -91 -91 -91) -91]
Test Case: 107 | Input/Output: [(45 45 45 45) 45]
Test Case: 108 | Input/Output: [(34 34 34 34) 34]
Test Case: 109 | Input/Output: [(65 65 65 65) 65]
Test Case: 110 | Input/Output: [(-96 -96 -96 -96) -96]
Test Case: 111 | Input/Output: [(-3 -3 -3 -3) -3]
Test Case: 112 | Input/Output: [(36 36 36 36) 36]
Test Case: 113 | Input/Output: [(-23 -23 -23 -23) -23]
Test Case: 114 | Input/Output: [(-59 -59 -59 -59) -59]
Test Case: 115 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 116 | Input/Output: [(67 67 67 67) 67]
Test Case: 117 | Input/Output: [(23 23 23 23) 23]
Test Case: 118 | Input/Output: [(58 58 58 58) 58]
Test Case: 119 | Input/Output: [(29 29 29 29) 29]
Test Case: 120 | Input/Output: [(-28 -28 -28 -28) -28]
Test Case: 121 | Input/Output: [(51 51 51 51) 51]
Test Case: 122 | Input/Output: [(39 39 39 39) 39]
Test Case: 123 | Input/Output: [(1 1 1 1) 1]
Test Case: 124 | Input/Output: [(39 39 39 39) 39]
Test Case: 125 | Input/Output: [(-60 -60 -60 -60) -60]
Test Case: 126 | Input/Output: [(-47 -47 -47 -47) -47]
Test Case: 127 | Input/Output: [(80 80 80 80) 80]
Test Case: 128 | Input/Output: [(-14 -14 -14 -14) -14]
Test Case: 129 | Input/Output: [(87 87 87 87) 87]
Test Case: 130 | Input/Output: [(-48 -48 -48 -48) -48]
Test Case: 131 | Input/Output: [(36 36 36 36) 36]
Test Case: 132 | Input/Output: [(-9 -9 -9 -9) -9]
Test Case: 133 | Input/Output: [(-34 -34 -34 -34) -34]
Test Case: 134 | Input/Output: [(97 97 97 97) 97]
Test Case: 135 | Input/Output: [(17 17 17 17) 17]
Test Case: 136 | Input/Output: [(98 98 98 98) 98]
Test Case: 137 | Input/Output: [(92 92 92 92) 92]
Test Case: 138 | Input/Output: [(-34 -34 -34 -34) -34]
Test Case: 139 | Input/Output: [(5 5 5 5) 5]
Test Case: 140 | Input/Output: [(45 45 45 45) 45]
Test Case: 141 | Input/Output: [(85 85 85 85) 85]
Test Case: 142 | Input/Output: [(-5 -5 -5 -5) -5]
Test Case: 143 | Input/Output: [(-6 -6 -6 -6) -6]
Test Case: 144 | Input/Output: [(35 35 35 35) 35]
Test Case: 145 | Input/Output: [(-53 -53 -53 -53) -53]
Test Case: 146 | Input/Output: [(-31 -31 -31 -31) -31]
Test Case: 147 | Input/Output: [(6 6 6 6) 6]
Test Case: 148 | Input/Output: [(-64 -64 -64 -64) -64]
Test Case: 149 | Input/Output: [(86 86 86 86) 86]
Test Case: 150 | Input/Output: [(-73 -73 -73 -73) -73]
Test Case: 151 | Input/Output: [(-61 -61 -61 -61) -61]
Test Case: 152 | Input/Output: [(98 98 98 98) 98]
Test Case: 153 | Input/Output: [(-54 -54 -54 -54) -54]
Test Case: 154 | Input/Output: [(-73 -73 -73 -73) -73]
Test Case: 155 | Input/Output: [(-81 -81 -81 -81) -81]
Test Case: 156 | Input/Output: [(-35 -35 -35 -35) -35]
Test Case: 157 | Input/Output: [(89 89 89 89) 89]
Test Case: 158 | Input/Output: [(93 93 93 93) 93]
Test Case: 159 | Input/Output: [(-41 -41 -41 -41) -41]
Test Case: 160 | Input/Output: [(-53 -53 -53 -53) -53]
Test Case: 161 | Input/Output: [(46 46 46 46) 46]
Test Case: 162 | Input/Output: [(-60 -60 -60 -60) -60]
Test Case: 163 | Input/Output: [(0 0 0 0) 0]
Test Case: 164 | Input/Output: [(-20 -20 -20 -20) -20]
Test Case: 165 | Input/Output: [(30 30 30 30) 30]
Test Case: 166 | Input/Output: [(-78 -78 -78 -78) -78]
Test Case: 167 | Input/Output: [(95 95 95 95) 95]
Test Case: 168 | Input/Output: [(72 72 72 72) 72]
Test Case: 169 | Input/Output: [(79 79 79 79) 79]
Test Case: 170 | Input/Output: [(-23 -23 -23 -23) -23]
Test Case: 171 | Input/Output: [(-73 -73 -73 -73) -73]
Test Case: 172 | Input/Output: [(98 98 98 98) 98]
Test Case: 173 | Input/Output: [(24 24 24 24) 24]
Test Case: 174 | Input/Output: [(-45 -45 -45 -45) -45]
Test Case: 175 | Input/Output: [(-30 -30 -30 -30) -30]
Test Case: 176 | Input/Output: [(-98 -98 -98 -98) -98]
Test Case: 177 | Input/Output: [(19 19 19 19) 19]
Test Case: 178 | Input/Output: [(14 14 14 14) 14]
Test Case: 179 | Input/Output: [(-61 -61 -61 -61) -61]
Test Case: 180 | Input/Output: [(78 78 78 78) 78]
Test Case: 181 | Input/Output: [(-48 -48 -48 -48) -48]
Test Case: 182 | Input/Output: [(7 7 7 7) 7]
Test Case: 183 | Input/Output: [(12 12 12 12) 12]
Test Case: 184 | Input/Output: [(-66 -66 -66 -66) -66]
Test Case: 185 | Input/Output: [(-60 -60 -60 -60) -60]
Test Case: 186 | Input/Output: [(98 98 98 98) 98]
Test Case: 187 | Input/Output: [(-40 -40 -40 -40) -40]
Test Case: 188 | Input/Output: [(6 6 6 6) 6]
Test Case: 189 | Input/Output: [(-25 -25 -25 -25) -25]
Test Case: 190 | Input/Output: [(-54 -54 -54 -54) -54]
Test Case: 191 | Input/Output: [(-14 -14 -14 -14) -14]
Test Case: 192 | Input/Output: [(-87 -87 -87 -87) -87]
Test Case: 193 | Input/Output: [(-18 -18 -18 -18) -18]
Test Case: 194 | Input/Output: [(5 5 5 5) 5]
Test Case: 195 | Input/Output: [(74 74 74 74) 74]
Test Case: 196 | Input/Output: [(-78 -78 -78 -78) -78]
Test Case: 197 | Input/Output: [(40 40 40 40) 40]
Test Case: 198 | Input/Output: [(62 62 62 62) 62]
Test Case: 199 | Input/Output: [(80 80 80 80) 80]
Test Case: 200 | Input/Output: [(83 73 60 88) 60]
Test Case: 201 | Input/Output: [(44 44 9 11) 9]
Test Case: 202 | Input/Output: [(73 19 90 0) 0]
Test Case: 203 | Input/Output: [(8 53 17 45) 8]
Test Case: 204 | Input/Output: [(88 24 39 94) 24]
Test Case: 205 | Input/Output: [(87 20 13 50) 13]
Test Case: 206 | Input/Output: [(39 20 56 88) 20]
Test Case: 207 | Input/Output: [(62 40 8 92) 8]
Test Case: 208 | Input/Output: [(49 3 85 34) 3]
Test Case: 209 | Input/Output: [(13 90 18 22) 13]
Test Case: 210 | Input/Output: [(69 80 87 50) 50]
Test Case: 211 | Input/Output: [(11 71 16 13) 11]
Test Case: 212 | Input/Output: [(37 40 89 35) 35]
Test Case: 213 | Input/Output: [(46 1 28 80) 1]
Test Case: 214 | Input/Output: [(41 30 13 26) 13]
Test Case: 215 | Input/Output: [(9 25 88 5) 5]
Test Case: 216 | Input/Output: [(92 72 70 82) 70]
Test Case: 217 | Input/Output: [(93 44 66 95) 44]
Test Case: 218 | Input/Output: [(37 32 86 99) 32]
Test Case: 219 | Input/Output: [(43 71 25 59) 25]
Test Case: 220 | Input/Output: [(85 4 20 64) 4]
Test Case: 221 | Input/Output: [(35 87 78 23) 23]
Test Case: 222 | Input/Output: [(11 81 57 75) 11]
Test Case: 223 | Input/Output: [(60 53 22 75) 22]
Test Case: 224 | Input/Output: [(85 68 62 54) 54]
Test Case: 225 | Input/Output: [(76 38 11 61) 11]
Test Case: 226 | Input/Output: [(4 56 24 37) 4]
Test Case: 227 | Input/Output: [(74 67 98 62) 62]
Test Case: 228 | Input/Output: [(31 37 54 34) 31]
Test Case: 229 | Input/Output: [(39 73 0 21) 0]
Test Case: 230 | Input/Output: [(98 23 50 85) 23]
Test Case: 231 | Input/Output: [(67 69 60 74) 60]
Test Case: 232 | Input/Output: [(55 26 51 97) 26]
Test Case: 233 | Input/Output: [(18 62 58 74) 18]
Test Case: 234 | Input/Output: [(80 85 57 47) 47]
Test Case: 235 | Input/Output: [(98 84 61 53) 53]
Test Case: 236 | Input/Output: [(68 27 13 69) 13]
Test Case: 237 | Input/Output: [(40 45 29 79) 29]
Test Case: 238 | Input/Output: [(64 64 90 63) 63]
Test Case: 239 | Input/Output: [(63 68 21 69) 21]
Test Case: 240 | Input/Output: [(4 46 45 95) 4]
Test Case: 241 | Input/Output: [(74 84 57 57) 57]
Test Case: 242 | Input/Output: [(79 34 9 23) 9]
Test Case: 243 | Input/Output: [(64 30 68 32) 30]
Test Case: 244 | Input/Output: [(10 34 38 90) 10]
Test Case: 245 | Input/Output: [(24 68 78 45) 24]
Test Case: 246 | Input/Output: [(16 30 73 36) 16]
Test Case: 247 | Input/Output: [(49 80 97 56) 49]
Test Case: 248 | Input/Output: [(13 58 75 84) 13]
Test Case: 249 | Input/Output: [(49 94 55 12) 12]
Test Case: 250 | Input/Output: [(56 73 7 54) 7]
Test Case: 251 | Input/Output: [(67 76 50 13) 13]
Test Case: 252 | Input/Output: [(96 90 45 89) 45]
Test Case: 253 | Input/Output: [(22 51 55 65) 22]
Test Case: 254 | Input/Output: [(30 33 97 76) 30]
Test Case: 255 | Input/Output: [(78 52 49 50) 49]
Test Case: 256 | Input/Output: [(95 35 39 13) 13]
Test Case: 257 | Input/Output: [(2 52 99 66) 2]
Test Case: 258 | Input/Output: [(29 100 0 84) 0]
Test Case: 259 | Input/Output: [(77 13 61 82) 13]
Test Case: 260 | Input/Output: [(54 88 44 47) 44]
Test Case: 261 | Input/Output: [(37 19 97 49) 19]
Test Case: 262 | Input/Output: [(93 97 41 55) 41]
Test Case: 263 | Input/Output: [(9 42 66 57) 9]
Test Case: 264 | Input/Output: [(0 47 91 19) 0]
Test Case: 265 | Input/Output: [(59 36 87 1) 1]
Test Case: 266 | Input/Output: [(81 20 68 62) 20]
Test Case: 267 | Input/Output: [(69 81 57 81) 57]
Test Case: 268 | Input/Output: [(57 65 36 11) 11]
Test Case: 269 | Input/Output: [(41 93 32 54) 32]
Test Case: 270 | Input/Output: [(55 3 23 79) 3]
Test Case: 271 | Input/Output: [(76 61 40 75) 40]
Test Case: 272 | Input/Output: [(46 89 9 80) 9]
Test Case: 273 | Input/Output: [(16 8 66 18) 8]
Test Case: 274 | Input/Output: [(55 86 34 59) 34]
Test Case: 275 | Input/Output: [(26 99 58 46) 26]
Test Case: 276 | Input/Output: [(15 55 39 99) 15]
Test Case: 277 | Input/Output: [(52 34 34 65) 34]
Test Case: 278 | Input/Output: [(84 48 35 21) 21]
Test Case: 279 | Input/Output: [(83 19 55 38) 19]
Test Case: 280 | Input/Output: [(6 44 75 18) 6]
Test Case: 281 | Input/Output: [(62 23 85 5) 5]
Test Case: 282 | Input/Output: [(73 73 16 80) 16]
Test Case: 283 | Input/Output: [(44 0 97 100) 0]
Test Case: 284 | Input/Output: [(62 82 41 15) 15]
Test Case: 285 | Input/Output: [(54 83 44 52) 44]
Test Case: 286 | Input/Output: [(17 56 33 40) 17]
Test Case: 287 | Input/Output: [(80 74 91 23) 23]
Test Case: 288 | Input/Output: [(43 26 86 31) 26]
Test Case: 289 | Input/Output: [(11 47 32 42) 11]
Test Case: 290 | Input/Output: [(44 38 51 35) 35]
Test Case: 291 | Input/Output: [(78 85 85 9) 9]
Test Case: 292 | Input/Output: [(18 76 26 62) 18]
Test Case: 293 | Input/Output: [(6 31 61 75) 6]
Test Case: 294 | Input/Output: [(97 9 44 73) 9]
Test Case: 295 | Input/Output: [(42 67 19 23) 19]
Test Case: 296 | Input/Output: [(40 43 6 20) 6]
Test Case: 297 | Input/Output: [(50 83 57 25) 25]
Test Case: 298 | Input/Output: [(39 76 26 18) 18]
Test Case: 299 | Input/Output: [(70 91 98 22) 22]
Test Case: 300 | Input/Output: [(8 11 34 62) 8]
Test Case: 301 | Input/Output: [(54 36 1 45) 1]
Test Case: 302 | Input/Output: [(45 46 81 5) 5]
Test Case: 303 | Input/Output: [(4 56 70 23) 4]
Test Case: 304 | Input/Output: [(69 29 36 14) 14]
Test Case: 305 | Input/Output: [(0 3 48 70) 0]
Test Case: 306 | Input/Output: [(100 36 19 10) 10]
Test Case: 307 | Input/Output: [(34 91 87 40) 34]
Test Case: 308 | Input/Output: [(17 75 7 36) 7]
Test Case: 309 | Input/Output: [(40 36 68 10) 10]
Test Case: 310 | Input/Output: [(10 57 100 91) 10]
Test Case: 311 | Input/Output: [(30 38 63 23) 23]
Test Case: 312 | Input/Output: [(38 62 15 49) 15]
Test Case: 313 | Input/Output: [(65 71 33 71) 33]
Test Case: 314 | Input/Output: [(69 62 47 33) 33]
Test Case: 315 | Input/Output: [(3 8 82 55) 3]
Test Case: 316 | Input/Output: [(66 26 71 90) 26]
Test Case: 317 | Input/Output: [(51 62 25 40) 25]
Test Case: 318 | Input/Output: [(76 7 26 87) 7]
Test Case: 319 | Input/Output: [(5 2 66 2) 2]
Test Case: 320 | Input/Output: [(36 57 58 74) 36]
Test Case: 321 | Input/Output: [(30 6 38 7) 6]
Test Case: 322 | Input/Output: [(87 63 34 62) 34]
Test Case: 323 | Input/Output: [(94 12 51 18) 12]
Test Case: 324 | Input/Output: [(98 5 80 62) 5]
Test Case: 325 | Input/Output: [(73 66 41 64) 41]
Test Case: 326 | Input/Output: [(18 96 46 18) 18]
Test Case: 327 | Input/Output: [(65 84 42 83) 42]
Test Case: 328 | Input/Output: [(90 74 10 93) 10]
Test Case: 329 | Input/Output: [(41 55 82 58) 41]
Test Case: 330 | Input/Output: [(14 21 60 25) 14]
Test Case: 331 | Input/Output: [(98 25 16 5) 5]
Test Case: 332 | Input/Output: [(85 70 68 67) 67]
Test Case: 333 | Input/Output: [(5 89 27 98) 5]
Test Case: 334 | Input/Output: [(3 92 59 98) 3]
Test Case: 335 | Input/Output: [(11 7 86 24) 7]
Test Case: 336 | Input/Output: [(61 12 2 69) 2]
Test Case: 337 | Input/Output: [(11 95 42 17) 11]
Test Case: 338 | Input/Output: [(48 34 85 42) 34]
Test Case: 339 | Input/Output: [(74 55 16 71) 16]
Test Case: 340 | Input/Output: [(13 100 77 89) 13]
Test Case: 341 | Input/Output: [(22 2 59 9) 2]
Test Case: 342 | Input/Output: [(88 96 65 67) 65]
Test Case: 343 | Input/Output: [(32 46 75 83) 32]
Test Case: 344 | Input/Output: [(55 59 9 38) 9]
Test Case: 345 | Input/Output: [(71 6 73 90) 6]
Test Case: 346 | Input/Output: [(16 24 50 59) 16]
Test Case: 347 | Input/Output: [(86 67 74 56) 56]
Test Case: 348 | Input/Output: [(62 68 35 9) 9]
Test Case: 349 | Input/Output: [(45 54 17 67) 17]
Test Case: 350 | Input/Output: [(49 75 60 1) 1]
Test Case: 351 | Input/Output: [(70 92 10 11) 10]
Test Case: 352 | Input/Output: [(24 83 52 69) 24]
Test Case: 353 | Input/Output: [(42 35 57 35) 35]
Test Case: 354 | Input/Output: [(93 48 10 79) 10]
Test Case: 355 | Input/Output: [(54 98 96 97) 54]
Test Case: 356 | Input/Output: [(35 58 98 44) 35]
Test Case: 357 | Input/Output: [(23 38 16 21) 16]
Test Case: 358 | Input/Output: [(54 12 40 65) 12]
Test Case: 359 | Input/Output: [(85 57 29 15) 15]
Test Case: 360 | Input/Output: [(13 76 80 9) 9]
Test Case: 361 | Input/Output: [(63 13 6 39) 6]
Test Case: 362 | Input/Output: [(77 16 98 14) 14]
Test Case: 363 | Input/Output: [(91 34 50 87) 34]
Test Case: 364 | Input/Output: [(21 47 83 95) 21]
Test Case: 365 | Input/Output: [(51 94 29 32) 29]
Test Case: 366 | Input/Output: [(87 80 50 31) 31]
Test Case: 367 | Input/Output: [(55 98 48 31) 31]
Test Case: 368 | Input/Output: [(46 81 61 58) 46]
Test Case: 369 | Input/Output: [(51 38 43 29) 29]
Test Case: 370 | Input/Output: [(57 47 91 74) 47]
Test Case: 371 | Input/Output: [(64 54 47 16) 16]
Test Case: 372 | Input/Output: [(24 55 7 3) 3]
Test Case: 373 | Input/Output: [(8 93 45 15) 8]
Test Case: 374 | Input/Output: [(90 54 85 72) 54]
Test Case: 375 | Input/Output: [(20 36 61 83) 20]
Test Case: 376 | Input/Output: [(6 2 50 8) 2]
Test Case: 377 | Input/Output: [(33 66 39 6) 6]
Test Case: 378 | Input/Output: [(2 10 37 12) 2]
Test Case: 379 | Input/Output: [(28 94 40 54) 28]
Test Case: 380 | Input/Output: [(73 78 96 60) 60]
Test Case: 381 | Input/Output: [(10 16 7 8) 7]
Test Case: 382 | Input/Output: [(67 4 93 87) 4]
Test Case: 383 | Input/Output: [(89 52 100 55) 52]
Test Case: 384 | Input/Output: [(25 26 97 59) 25]
Test Case: 385 | Input/Output: [(69 37 57 11) 11]
Test Case: 386 | Input/Output: [(12 21 47 95) 12]
Test Case: 387 | Input/Output: [(42 71 38 58) 38]
Test Case: 388 | Input/Output: [(41 69 22 49) 22]
Test Case: 389 | Input/Output: [(41 80 0 27) 0]
Test Case: 390 | Input/Output: [(44 71 99 83) 44]
Test Case: 391 | Input/Output: [(54 28 55 71) 28]
Test Case: 392 | Input/Output: [(65 10 44 90) 10]
Test Case: 393 | Input/Output: [(71 87 0 21) 0]
Test Case: 394 | Input/Output: [(17 84 1 33) 1]
Test Case: 395 | Input/Output: [(41 23 32 32) 23]
Test Case: 396 | Input/Output: [(61 89 60 91) 60]
Test Case: 397 | Input/Output: [(89 28 44 92) 28]
Test Case: 398 | Input/Output: [(80 26 39 78) 26]
Test Case: 399 | Input/Output: [(71 95 74 47) 47]
Test Case: 400 | Input/Output: [(-72 -30 5 -87) -87]
Test Case: 401 | Input/Output: [(-1 -32 -33 -44) -44]
Test Case: 402 | Input/Output: [(49 99 62 -65) -65]
Test Case: 403 | Input/Output: [(49 49 -30 -80) -80]
Test Case: 404 | Input/Output: [(8 61 46 -34) -34]
Test Case: 405 | Input/Output: [(-5 99 22 -81) -81]
Test Case: 406 | Input/Output: [(92 42 -20 -67) -67]
Test Case: 407 | Input/Output: [(-61 -92 -57 43) -92]
Test Case: 408 | Input/Output: [(61 -11 32 -87) -87]
Test Case: 409 | Input/Output: [(-60 -45 27 62) -60]
Test Case: 410 | Input/Output: [(-40 -3 -85 -6) -85]
Test Case: 411 | Input/Output: [(-12 70 -97 66) -97]
Test Case: 412 | Input/Output: [(-99 2 -98 -9) -99]
Test Case: 413 | Input/Output: [(32 -40 -7 59) -40]
Test Case: 414 | Input/Output: [(63 43 -92 -32) -92]
Test Case: 415 | Input/Output: [(4 -47 64 65) -47]
Test Case: 416 | Input/Output: [(-96 59 63 -16) -96]
Test Case: 417 | Input/Output: [(89 28 59 32) 28]
Test Case: 418 | Input/Output: [(-30 -59 99 -84) -84]
Test Case: 419 | Input/Output: [(-47 48 -47 -73) -73]
Test Case: 420 | Input/Output: [(-71 -13 37 25) -71]
Test Case: 421 | Input/Output: [(-50 -46 -18 2) -50]
Test Case: 422 | Input/Output: [(44 -46 99 -42) -46]
Test Case: 423 | Input/Output: [(8 12 -80 -50) -80]
Test Case: 424 | Input/Output: [(-92 -86 -68 -29) -92]
Test Case: 425 | Input/Output: [(-51 14 17 67) -51]
Test Case: 426 | Input/Output: [(-49 -36 -76 -71) -76]
Test Case: 427 | Input/Output: [(-70 -73 -25 3) -73]
Test Case: 428 | Input/Output: [(-25 35 81 -13) -25]
Test Case: 429 | Input/Output: [(-5 -19 97 42) -19]
Test Case: 430 | Input/Output: [(7 72 -62 -3) -62]
Test Case: 431 | Input/Output: [(62 -87 -29 85) -87]
Test Case: 432 | Input/Output: [(30 86 48 21) 21]
Test Case: 433 | Input/Output: [(7 49 -55 -90) -90]
Test Case: 434 | Input/Output: [(14 -23 87 -60) -60]
Test Case: 435 | Input/Output: [(-30 -18 -65 25) -65]
Test Case: 436 | Input/Output: [(-54 -58 10 -89) -89]
Test Case: 437 | Input/Output: [(-89 2 -91 42) -91]
Test Case: 438 | Input/Output: [(-48 11 95 46) -48]
Test Case: 439 | Input/Output: [(-46 -62 -24 51) -62]
Test Case: 440 | Input/Output: [(10 -67 -100 -9) -100]
Test Case: 441 | Input/Output: [(100 -9 -7 8) -9]
Test Case: 442 | Input/Output: [(62 -27 87 -12) -27]
Test Case: 443 | Input/Output: [(78 -76 -38 -93) -93]
Test Case: 444 | Input/Output: [(66 76 55 97) 55]
Test Case: 445 | Input/Output: [(-88 79 -97 -71) -97]
Test Case: 446 | Input/Output: [(-14 -98 55 71) -98]
Test Case: 447 | Input/Output: [(58 33 69 -83) -83]
Test Case: 448 | Input/Output: [(75 -34 -11 -94) -94]
Test Case: 449 | Input/Output: [(-39 55 16 -3) -39]
Test Case: 450 | Input/Output: [(-77 86 -95 70) -95]
Test Case: 451 | Input/Output: [(49 10 5 -77) -77]
Test Case: 452 | Input/Output: [(13 26 34 97) 13]
Test Case: 453 | Input/Output: [(20 72 57 48) 20]
Test Case: 454 | Input/Output: [(-55 23 53 30) -55]
Test Case: 455 | Input/Output: [(21 -81 -73 -41) -81]
Test Case: 456 | Input/Output: [(-86 77 -10 -50) -86]
Test Case: 457 | Input/Output: [(-44 -52 -15 82) -52]
Test Case: 458 | Input/Output: [(4 -79 67 -36) -79]
Test Case: 459 | Input/Output: [(97 -39 -22 84) -39]
Test Case: 460 | Input/Output: [(-13 -26 85 43) -26]
Test Case: 461 | Input/Output: [(59 84 -66 16) -66]
Test Case: 462 | Input/Output: [(-50 -49 -2 60) -50]
Test Case: 463 | Input/Output: [(-23 25 -85 56) -85]
Test Case: 464 | Input/Output: [(-69 75 58 -81) -81]
Test Case: 465 | Input/Output: [(73 27 -2 31) -2]
Test Case: 466 | Input/Output: [(-100 38 1 6) -100]
Test Case: 467 | Input/Output: [(53 -92 4 -55) -92]
Test Case: 468 | Input/Output: [(48 89 79 -98) -98]
Test Case: 469 | Input/Output: [(-4 13 -32 -16) -32]
Test Case: 470 | Input/Output: [(7 -17 80 -16) -17]
Test Case: 471 | Input/Output: [(12 -97 0 12) -97]
Test Case: 472 | Input/Output: [(27 -14 21 -10) -14]
Test Case: 473 | Input/Output: [(59 22 45 -39) -39]
Test Case: 474 | Input/Output: [(-7 73 48 -79) -79]
Test Case: 475 | Input/Output: [(94 -47 -53 21) -53]
Test Case: 476 | Input/Output: [(-44 -65 -39 11) -65]
Test Case: 477 | Input/Output: [(76 -67 -90 -68) -90]
Test Case: 478 | Input/Output: [(-67 -6 -40 -28) -67]
Test Case: 479 | Input/Output: [(-88 7 -38 -21) -88]
Test Case: 480 | Input/Output: [(11 86 -29 -26) -29]
Test Case: 481 | Input/Output: [(58 51 -70 47) -70]
Test Case: 482 | Input/Output: [(-69 -25 6 -27) -69]
Test Case: 483 | Input/Output: [(29 54 47 25) 25]
Test Case: 484 | Input/Output: [(63 71 -62 -65) -65]
Test Case: 485 | Input/Output: [(-90 68 38 -68) -90]
Test Case: 486 | Input/Output: [(-29 87 -40 -93) -93]
Test Case: 487 | Input/Output: [(-84 92 -85 -27) -85]
Test Case: 488 | Input/Output: [(18 -42 83 12) -42]
Test Case: 489 | Input/Output: [(-82 92 72 -55) -82]
Test Case: 490 | Input/Output: [(62 -37 27 45) -37]
Test Case: 491 | Input/Output: [(-41 68 75 -74) -74]
Test Case: 492 | Input/Output: [(-86 -37 -57 81) -86]
Test Case: 493 | Input/Output: [(49 29 -99 97) -99]
Test Case: 494 | Input/Output: [(-3 -89 37 -61) -89]
Test Case: 495 | Input/Output: [(32 -15 15 -56) -56]
Test Case: 496 | Input/Output: [(24 -40 -28 89) -40]
Test Case: 497 | Input/Output: [(99 -3 -95 28) -95]
Test Case: 498 | Input/Output: [(90 -39 -36 -92) -92]
Test Case: 499 | Input/Output: [(-38 83 89 21) -38]
Test Case: 500 | Input/Output: [(-98 68 -64 27) -98]
Test Case: 501 | Input/Output: [(22 90 16 -69) -69]
Test Case: 502 | Input/Output: [(-5 41 -88 -65) -88]
Test Case: 503 | Input/Output: [(0 74 -45 28) -45]
Test Case: 504 | Input/Output: [(58 -82 88 -33) -82]
Test Case: 505 | Input/Output: [(-5 16 -69 77) -69]
Test Case: 506 | Input/Output: [(31 71 -57 14) -57]
Test Case: 507 | Input/Output: [(-50 -72 19 -26) -72]
Test Case: 508 | Input/Output: [(-26 -58 12 -63) -63]
Test Case: 509 | Input/Output: [(-30 9 41 39) -30]
Test Case: 510 | Input/Output: [(12 -64 -1 3) -64]
Test Case: 511 | Input/Output: [(73 17 35 86) 17]
Test Case: 512 | Input/Output: [(53 -6 15 -8) -8]
Test Case: 513 | Input/Output: [(68 71 0 45) 0]
Test Case: 514 | Input/Output: [(29 6 -27 -46) -46]
Test Case: 515 | Input/Output: [(100 79 -86 -34) -86]
Test Case: 516 | Input/Output: [(-8 39 -92 23) -92]
Test Case: 517 | Input/Output: [(61 -75 76 42) -75]
Test Case: 518 | Input/Output: [(-71 -96 89 -18) -96]
Test Case: 519 | Input/Output: [(95 -35 18 -46) -46]
Test Case: 520 | Input/Output: [(-33 45 30 62) -33]
Test Case: 521 | Input/Output: [(-31 -10 44 27) -31]
Test Case: 522 | Input/Output: [(91 -18 64 97) -18]
Test Case: 523 | Input/Output: [(-68 13 -100 -32) -100]
Test Case: 524 | Input/Output: [(-14 -51 -92 92) -92]
Test Case: 525 | Input/Output: [(80 84 84 47) 47]
Test Case: 526 | Input/Output: [(-46 -88 60 15) -88]
Test Case: 527 | Input/Output: [(-42 -36 70 -61) -61]
Test Case: 528 | Input/Output: [(77 -17 76 83) -17]
Test Case: 529 | Input/Output: [(-34 66 37 49) -34]
Test Case: 530 | Input/Output: [(-46 46 59 -8) -46]
Test Case: 531 | Input/Output: [(94 32 -6 -95) -95]
Test Case: 532 | Input/Output: [(20 0 23 36) 0]
Test Case: 533 | Input/Output: [(-93 -40 -14 62) -93]
Test Case: 534 | Input/Output: [(100 58 36 -52) -52]
Test Case: 535 | Input/Output: [(-93 -65 80 -62) -93]
Test Case: 536 | Input/Output: [(9 45 -59 83) -59]
Test Case: 537 | Input/Output: [(82 13 -85 -20) -85]
Test Case: 538 | Input/Output: [(-47 -11 -54 87) -54]
Test Case: 539 | Input/Output: [(-92 14 1 75) -92]
Test Case: 540 | Input/Output: [(-9 50 63 -78) -78]
Test Case: 541 | Input/Output: [(-51 3 -72 -80) -80]
Test Case: 542 | Input/Output: [(-91 58 42 -1) -91]
Test Case: 543 | Input/Output: [(-16 71 -15 -99) -99]
Test Case: 544 | Input/Output: [(-68 20 47 98) -68]
Test Case: 545 | Input/Output: [(14 -34 38 -40) -40]
Test Case: 546 | Input/Output: [(12 -46 -63 -38) -63]
Test Case: 547 | Input/Output: [(-96 -71 95 73) -96]
Test Case: 548 | Input/Output: [(-51 77 -63 93) -63]
Test Case: 549 | Input/Output: [(-76 22 -97 -28) -97]
Test Case: 550 | Input/Output: [(18 -13 -65 -89) -89]
Test Case: 551 | Input/Output: [(-80 0 25 36) -80]
Test Case: 552 | Input/Output: [(-43 -76 2 69) -76]
Test Case: 553 | Input/Output: [(-25 -15 1 -85) -85]
Test Case: 554 | Input/Output: [(5 72 56 77) 5]
Test Case: 555 | Input/Output: [(14 -75 41 -23) -75]
Test Case: 556 | Input/Output: [(36 20 28 66) 20]
Test Case: 557 | Input/Output: [(-71 30 -61 31) -71]
Test Case: 558 | Input/Output: [(23 -53 6 100) -53]
Test Case: 559 | Input/Output: [(45 -37 69 -74) -74]
Test Case: 560 | Input/Output: [(-23 64 -17 -79) -79]
Test Case: 561 | Input/Output: [(94 37 12 27) 12]
Test Case: 562 | Input/Output: [(-15 -47 37 82) -47]
Test Case: 563 | Input/Output: [(67 52 88 -83) -83]
Test Case: 564 | Input/Output: [(85 14 21 -59) -59]
Test Case: 565 | Input/Output: [(33 -82 74 16) -82]
Test Case: 566 | Input/Output: [(7 39 -30 95) -30]
Test Case: 567 | Input/Output: [(-43 -68 -29 34) -68]
Test Case: 568 | Input/Output: [(66 63 26 41) 26]
Test Case: 569 | Input/Output: [(-12 93 48 17) -12]
Test Case: 570 | Input/Output: [(-60 1 -37 -92) -92]
Test Case: 571 | Input/Output: [(-51 -82 -59 -97) -97]
Test Case: 572 | Input/Output: [(74 40 -33 -8) -33]
Test Case: 573 | Input/Output: [(-29 -99 -4 -83) -99]
Test Case: 574 | Input/Output: [(73 82 77 -40) -40]
Test Case: 575 | Input/Output: [(86 65 99 -66) -66]
Test Case: 576 | Input/Output: [(-20 -83 -18 -75) -83]
Test Case: 577 | Input/Output: [(85 69 -45 46) -45]
Test Case: 578 | Input/Output: [(-15 -6 26 -42) -42]
Test Case: 579 | Input/Output: [(-77 60 47 18) -77]
Test Case: 580 | Input/Output: [(-67 -59 -69 95) -69]
Test Case: 581 | Input/Output: [(29 82 56 8) 8]
Test Case: 582 | Input/Output: [(89 -3 -52 1) -52]
Test Case: 583 | Input/Output: [(-21 -63 30 41) -63]
Test Case: 584 | Input/Output: [(13 10 99 54) 10]
Test Case: 585 | Input/Output: [(-60 -48 55 68) -60]
Test Case: 586 | Input/Output: [(-2 -76 50 -39) -76]
Test Case: 587 | Input/Output: [(81 50 -30 67) -30]
Test Case: 588 | Input/Output: [(-60 -30 -68 41) -68]
Test Case: 589 | Input/Output: [(1 -56 49 -9) -56]
Test Case: 590 | Input/Output: [(54 -33 -20 -28) -33]
Test Case: 591 | Input/Output: [(8 -86 32 66) -86]
Test Case: 592 | Input/Output: [(21 -20 -14 18) -20]
Test Case: 593 | Input/Output: [(-34 -92 97 -20) -92]
Test Case: 594 | Input/Output: [(6 -95 -40 90) -95]
Test Case: 595 | Input/Output: [(100 -98 9 23) -98]
Test Case: 596 | Input/Output: [(83 -80 -76 14) -80]
Test Case: 597 | Input/Output: [(-75 -16 35 -48) -75]
Test Case: 598 | Input/Output: [(100 -16 4 39) -16]
Test Case: 599 | Input/Output: [(-87 -34 87 84) -87]
Test Case: 600 | Input/Output: [(66 -91 53 83) -91]
Test Case: 601 | Input/Output: [(43 55 -81 -89) -89]
Test Case: 602 | Input/Output: [(-41 61 -42 -65) -65]
Test Case: 603 | Input/Output: [(43 30 4 53) 4]
Test Case: 604 | Input/Output: [(-82 41 -33 100) -82]
Test Case: 605 | Input/Output: [(19 4 -91 -33) -91]
Test Case: 606 | Input/Output: [(29 -41 -24 -36) -41]
Test Case: 607 | Input/Output: [(-49 15 -53 16) -53]
Test Case: 608 | Input/Output: [(85 -37 -58 -1) -58]
Test Case: 609 | Input/Output: [(-83 8 -96 93) -96]
Test Case: 610 | Input/Output: [(46 3 87 77) 3]
Test Case: 611 | Input/Output: [(55 -72 89 38) -72]
Test Case: 612 | Input/Output: [(-91 25 -19 -78) -91]
Test Case: 613 | Input/Output: [(5 -22 3 47) -22]
Test Case: 614 | Input/Output: [(83 9 87 -40) -40]
Test Case: 615 | Input/Output: [(-51 41 58 -44) -51]
Test Case: 616 | Input/Output: [(41 86 -90 -50) -90]
Test Case: 617 | Input/Output: [(-31 -100 29 -36) -100]
Test Case: 618 | Input/Output: [(-98 65 -54 -90) -98]
Test Case: 619 | Input/Output: [(28 45 -91 69) -91]
Test Case: 620 | Input/Output: [(31 82 55 -83) -83]
Test Case: 621 | Input/Output: [(-81 87 -79 -71) -81]
Test Case: 622 | Input/Output: [(-85 -87 1 -46) -87]
Test Case: 623 | Input/Output: [(56 62 12 70) 12]
Test Case: 624 | Input/Output: [(10 -45 21 -37) -45]
Test Case: 625 | Input/Output: [(-33 98 -21 16) -33]
Test Case: 626 | Input/Output: [(-28 5 -72 75) -72]
Test Case: 627 | Input/Output: [(35 55 87 -1) -1]
Test Case: 628 | Input/Output: [(76 -6 67 -90) -90]
Test Case: 629 | Input/Output: [(-55 18 59 29) -55]
Test Case: 630 | Input/Output: [(-97 96 -61 70) -97]
Test Case: 631 | Input/Output: [(-34 18 60 35) -34]
Test Case: 632 | Input/Output: [(87 -10 30 -93) -93]
Test Case: 633 | Input/Output: [(1 -37 89 7) -37]
Test Case: 634 | Input/Output: [(37 -93 -50 -47) -93]
Test Case: 635 | Input/Output: [(27 78 89 88) 27]
Test Case: 636 | Input/Output: [(-57 -91 27 -65) -91]
Test Case: 637 | Input/Output: [(69 94 92 11) 11]
Test Case: 638 | Input/Output: [(10 4 -35 -82) -82]
Test Case: 639 | Input/Output: [(-62 -50 -12 -88) -88]
Test Case: 640 | Input/Output: [(4 20 -91 -30) -91]
Test Case: 641 | Input/Output: [(75 30 -8 -7) -8]
Test Case: 642 | Input/Output: [(37 -86 27 38) -86]
Test Case: 643 | Input/Output: [(41 -39 -27 -32) -39]
Test Case: 644 | Input/Output: [(-100 14 -73 29) -100]
Test Case: 645 | Input/Output: [(-42 -94 35 -66) -94]
Test Case: 646 | Input/Output: [(-55 38 35 -100) -100]
Test Case: 647 | Input/Output: [(6 -44 0 77) -44]
Test Case: 648 | Input/Output: [(97 2 -56 -99) -99]
Test Case: 649 | Input/Output: [(71 -90 11 91) -90]
Test Case: 650 | Input/Output: [(52 -80 81 69) -80]
Test Case: 651 | Input/Output: [(61 56 1 36) 1]
Test Case: 652 | Input/Output: [(-69 55 65 7) -69]
Test Case: 653 | Input/Output: [(100 82 -74 50) -74]
Test Case: 654 | Input/Output: [(94 90 -7 -10) -10]
Test Case: 655 | Input/Output: [(-75 -66 60 -59) -75]
Test Case: 656 | Input/Output: [(-49 71 99 -74) -74]
Test Case: 657 | Input/Output: [(-24 -21 72 -48) -48]
Test Case: 658 | Input/Output: [(-27 -22 76 -17) -27]
Test Case: 659 | Input/Output: [(57 99 96 -91) -91]
Test Case: 660 | Input/Output: [(71 -12 -67 -28) -67]
Test Case: 661 | Input/Output: [(-56 -78 -38 -73) -78]
Test Case: 662 | Input/Output: [(-23 94 -83 -13) -83]
Test Case: 663 | Input/Output: [(-37 -33 -73 -17) -73]
Test Case: 664 | Input/Output: [(1 69 31 -82) -82]
Test Case: 665 | Input/Output: [(77 61 -8 -32) -32]
Test Case: 666 | Input/Output: [(-77 -14 50 4) -77]
Test Case: 667 | Input/Output: [(70 -22 49 -96) -96]
Test Case: 668 | Input/Output: [(-84 -59 -75 25) -84]
Test Case: 669 | Input/Output: [(-64 33 98 52) -64]
Test Case: 670 | Input/Output: [(89 -16 58 -9) -16]
Test Case: 671 | Input/Output: [(6 -2 -33 -71) -71]
Test Case: 672 | Input/Output: [(-24 65 -38 -42) -42]
Test Case: 673 | Input/Output: [(-67 -59 80 17) -67]
Test Case: 674 | Input/Output: [(42 -57 -74 10) -74]
Test Case: 675 | Input/Output: [(23 -24 99 -92) -92]
Test Case: 676 | Input/Output: [(2 43 29 40) 2]
Test Case: 677 | Input/Output: [(-48 -65 -15 21) -65]
Test Case: 678 | Input/Output: [(79 9 44 -16) -16]
Test Case: 679 | Input/Output: [(-5 52 92 3) -5]
Test Case: 680 | Input/Output: [(-75 3 -94 -24) -94]
Test Case: 681 | Input/Output: [(8 90 62 -67) -67]
Test Case: 682 | Input/Output: [(41 77 30 25) 25]
Test Case: 683 | Input/Output: [(46 85 -91 64) -91]
Test Case: 684 | Input/Output: [(-53 58 -32 82) -53]
Test Case: 685 | Input/Output: [(83 -28 48 -32) -32]
Test Case: 686 | Input/Output: [(47 -39 69 -60) -60]
Test Case: 687 | Input/Output: [(55 7 19 -26) -26]
Test Case: 688 | Input/Output: [(-25 -28 -7 -34) -34]
Test Case: 689 | Input/Output: [(73 95 -70 -97) -97]
Test Case: 690 | Input/Output: [(-48 -42 61 44) -48]
Test Case: 691 | Input/Output: [(-33 -28 -32 61) -33]
Test Case: 692 | Input/Output: [(57 48 -47 80) -47]
Test Case: 693 | Input/Output: [(78 76 53 -35) -35]
Test Case: 694 | Input/Output: [(-15 -65 -39 -28) -65]
Test Case: 695 | Input/Output: [(55 98 -81 15) -81]
Test Case: 696 | Input/Output: [(-19 55 61 -98) -98]
Test Case: 697 | Input/Output: [(-5 -41 41 -12) -41]
Test Case: 698 | Input/Output: [(-58 67 -98 93) -98]
Test Case: 699 | Input/Output: [(-18 -27 -48 61) -48]
Test Case: 700 | Input/Output: [(52 35 96 -98) -98]
Test Case: 701 | Input/Output: [(-14 76 -7 -78) -78]
Test Case: 702 | Input/Output: [(-58 9 -1 -33) -58]
Test Case: 703 | Input/Output: [(8 -86 83 -31) -86]
Test Case: 704 | Input/Output: [(58 -45 76 11) -45]
Test Case: 705 | Input/Output: [(-100 78 8 57) -100]
Test Case: 706 | Input/Output: [(-17 -88 100 17) -88]
Test Case: 707 | Input/Output: [(-32 49 -48 -6) -48]
Test Case: 708 | Input/Output: [(-78 97 -52 32) -78]
Test Case: 709 | Input/Output: [(-35 -3 74 24) -35]
Test Case: 710 | Input/Output: [(59 -53 -83 0) -83]
Test Case: 711 | Input/Output: [(77 -48 -91 -63) -91]
Test Case: 712 | Input/Output: [(99 -35 -14 93) -35]
Test Case: 713 | Input/Output: [(-85 50 58 -79) -85]
Test Case: 714 | Input/Output: [(-99 26 -36 32) -99]
Test Case: 715 | Input/Output: [(96 26 69 49) 26]
Test Case: 716 | Input/Output: [(-81 70 -4 29) -81]
Test Case: 717 | Input/Output: [(79 100 17 -66) -66]
Test Case: 718 | Input/Output: [(-30 -16 -4 58) -30]
Test Case: 719 | Input/Output: [(58 -57 0 70) -57]
Test Case: 720 | Input/Output: [(-32 -93 47 -56) -93]
Test Case: 721 | Input/Output: [(26 84 45 10) 10]
Test Case: 722 | Input/Output: [(38 -71 40 -43) -71]
Test Case: 723 | Input/Output: [(29 28 45 50) 28]
Test Case: 724 | Input/Output: [(6 -35 10 -13) -35]
Test Case: 725 | Input/Output: [(0 -46 -98 62) -98]
Test Case: 726 | Input/Output: [(24 37 95 -63) -63]
Test Case: 727 | Input/Output: [(47 -72 -87 -88) -88]
Test Case: 728 | Input/Output: [(76 44 -1 41) -1]
Test Case: 729 | Input/Output: [(1 -43 7 -15) -43]
Test Case: 730 | Input/Output: [(23 54 13 85) 13]
Test Case: 731 | Input/Output: [(-7 39 -92 -18) -92]
Test Case: 732 | Input/Output: [(42 -24 -84 55) -84]
Test Case: 733 | Input/Output: [(-24 -35 -97 1) -97]
Test Case: 734 | Input/Output: [(-6 -21 33 1) -21]
Test Case: 735 | Input/Output: [(-10 -95 8 -11) -95]
Test Case: 736 | Input/Output: [(-21 -51 67 57) -51]
Test Case: 737 | Input/Output: [(-74 -26 -84 52) -84]
Test Case: 738 | Input/Output: [(-73 -49 -64 -93) -93]
Test Case: 739 | Input/Output: [(88 85 100 60) 60]
Test Case: 740 | Input/Output: [(85 -13 -57 -12) -57]
Test Case: 741 | Input/Output: [(-54 69 27 37) -54]
Test Case: 742 | Input/Output: [(-81 57 -85 -58) -85]
Test Case: 743 | Input/Output: [(99 60 46 77) 46]
Test Case: 744 | Input/Output: [(-47 -2 -92 -81) -92]
Test Case: 745 | Input/Output: [(-35 -92 -10 72) -92]
Test Case: 746 | Input/Output: [(19 99 5 -58) -58]
Test Case: 747 | Input/Output: [(96 -45 65 70) -45]
Test Case: 748 | Input/Output: [(-28 9 -15 -25) -28]
Test Case: 749 | Input/Output: [(-94 57 -8 77) -94]
Test Case: 750 | Input/Output: [(-39 99 -15 27) -39]
Test Case: 751 | Input/Output: [(-42 53 27 -4) -42]
Test Case: 752 | Input/Output: [(-41 90 48 -27) -41]
Test Case: 753 | Input/Output: [(2 -8 -14 24) -14]
Test Case: 754 | Input/Output: [(75 88 64 -26) -26]
Test Case: 755 | Input/Output: [(-18 -91 17 60) -91]
Test Case: 756 | Input/Output: [(-29 64 7 -32) -32]
Test Case: 757 | Input/Output: [(40 19 -29 -59) -59]
Test Case: 758 | Input/Output: [(28 -15 -5 -28) -28]
Test Case: 759 | Input/Output: [(64 95 -86 -93) -93]
Test Case: 760 | Input/Output: [(14 -44 -48 62) -48]
Test Case: 761 | Input/Output: [(-1 8 0 -30) -30]
Test Case: 762 | Input/Output: [(35 7 27 45) 7]
Test Case: 763 | Input/Output: [(87 75 -66 34) -66]
Test Case: 764 | Input/Output: [(13 -81 74 47) -81]
Test Case: 765 | Input/Output: [(86 10 72 -35) -35]
Test Case: 766 | Input/Output: [(16 -84 31 -57) -84]
Test Case: 767 | Input/Output: [(79 99 80 95) 79]
Test Case: 768 | Input/Output: [(43 -93 53 -25) -93]
Test Case: 769 | Input/Output: [(-62 -42 -15 -36) -62]
Test Case: 770 | Input/Output: [(41 -71 91 -51) -71]
Test Case: 771 | Input/Output: [(72 -42 -18 -29) -42]
Test Case: 772 | Input/Output: [(12 45 -63 8) -63]
Test Case: 773 | Input/Output: [(-78 -38 -68 74) -78]
Test Case: 774 | Input/Output: [(20 71 93 32) 20]
Test Case: 775 | Input/Output: [(83 99 -78 -44) -78]
Test Case: 776 | Input/Output: [(-69 93 -17 -61) -69]
Test Case: 777 | Input/Output: [(-37 9 -85 47) -85]
Test Case: 778 | Input/Output: [(-56 -69 80 -97) -97]
Test Case: 779 | Input/Output: [(-31 93 -22 -59) -59]
Test Case: 780 | Input/Output: [(-81 25 -50 -33) -81]
Test Case: 781 | Input/Output: [(-79 23 27 -33) -79]
Test Case: 782 | Input/Output: [(-97 36 -57 61) -97]
Test Case: 783 | Input/Output: [(61 -72 56 67) -72]
Test Case: 784 | Input/Output: [(90 -45 57 -23) -45]
Test Case: 785 | Input/Output: [(14 -23 68 -1) -23]
Test Case: 786 | Input/Output: [(-83 47 43 51) -83]
Test Case: 787 | Input/Output: [(16 9 83 7) 7]
Test Case: 788 | Input/Output: [(35 -94 -28 10) -94]
Test Case: 789 | Input/Output: [(-31 39 10 -23) -31]
Test Case: 790 | Input/Output: [(-50 -66 -8 -23) -66]
Test Case: 791 | Input/Output: [(1 51 -100 62) -100]
Test Case: 792 | Input/Output: [(61 -21 69 -13) -21]
Test Case: 793 | Input/Output: [(-3 -42 -66 74) -66]
Test Case: 794 | Input/Output: [(50 93 -62 -62) -62]
Test Case: 795 | Input/Output: [(-42 -12 73 -3) -42]
Test Case: 796 | Input/Output: [(-15 -35 24 -80) -80]
Test Case: 797 | Input/Output: [(-19 21 -25 -33) -33]
Test Case: 798 | Input/Output: [(-42 88 -43 97) -43]
Test Case: 799 | Input/Output: [(-33 -22 -44 -32) -44]
Test Case: 800 | Input/Output: [(63 -14 97 -99) -99]
Test Case: 801 | Input/Output: [(-42 -43 57 16) -43]
Test Case: 802 | Input/Output: [(100 -72 -3 -89) -89]
Test Case: 803 | Input/Output: [(52 -86 37 -19) -86]
Test Case: 804 | Input/Output: [(20 -95 66 -96) -96]
Test Case: 805 | Input/Output: [(94 -60 -78 -76) -78]
Test Case: 806 | Input/Output: [(-47 40 83 85) -47]
Test Case: 807 | Input/Output: [(75 -19 54 -22) -22]
Test Case: 808 | Input/Output: [(4 -61 96 73) -61]
Test Case: 809 | Input/Output: [(89 89 57 -41) -41]
Test Case: 810 | Input/Output: [(-89 -11 -82 73) -89]
Test Case: 811 | Input/Output: [(36 90 -13 -95) -95]
Test Case: 812 | Input/Output: [(58 -54 0 -92) -92]
Test Case: 813 | Input/Output: [(-31 -14 -91 -30) -91]
Test Case: 814 | Input/Output: [(-86 -87 -51 16) -87]
Test Case: 815 | Input/Output: [(-47 18 58 96) -47]
Test Case: 816 | Input/Output: [(-27 87 -43 -45) -45]
Test Case: 817 | Input/Output: [(-35 88 33 -14) -35]
Test Case: 818 | Input/Output: [(-10 99 -46 -47) -47]
Test Case: 819 | Input/Output: [(-95 -87 -11 -37) -95]
Test Case: 820 | Input/Output: [(-21 -30 10 28) -30]
Test Case: 821 | Input/Output: [(31 -91 -40 35) -91]
Test Case: 822 | Input/Output: [(-89 77 -26 -3) -89]
Test Case: 823 | Input/Output: [(-40 94 91 48) -40]
Test Case: 824 | Input/Output: [(18 71 55 -26) -26]
Test Case: 825 | Input/Output: [(-33 99 60 -99) -99]
Test Case: 826 | Input/Output: [(-11 88 -3 52) -11]
Test Case: 827 | Input/Output: [(-59 23 15 -12) -59]
Test Case: 828 | Input/Output: [(-53 7 30 81) -53]
Test Case: 829 | Input/Output: [(90 -33 -39 87) -39]
Test Case: 830 | Input/Output: [(79 74 -25 1) -25]
Test Case: 831 | Input/Output: [(8 32 -21 0) -21]
Test Case: 832 | Input/Output: [(91 -38 71 15) -38]
Test Case: 833 | Input/Output: [(32 -89 -73 -4) -89]
Test Case: 834 | Input/Output: [(68 89 20 -72) -72]
Test Case: 835 | Input/Output: [(8 -64 64 47) -64]
Test Case: 836 | Input/Output: [(-31 95 11 -84) -84]
Test Case: 837 | Input/Output: [(8 -67 44 -70) -70]
Test Case: 838 | Input/Output: [(42 -4 27 12) -4]
Test Case: 839 | Input/Output: [(93 26 74 82) 26]
Test Case: 840 | Input/Output: [(63 26 -57 69) -57]
Test Case: 841 | Input/Output: [(14 -41 86 74) -41]
Test Case: 842 | Input/Output: [(-27 44 69 -93) -93]
Test Case: 843 | Input/Output: [(34 -83 -71 21) -83]
Test Case: 844 | Input/Output: [(46 -64 -32 -93) -93]
Test Case: 845 | Input/Output: [(-60 46 20 -85) -85]
Test Case: 846 | Input/Output: [(-45 -99 -96 -14) -99]
Test Case: 847 | Input/Output: [(63 45 26 15) 15]
Test Case: 848 | Input/Output: [(60 -91 -95 65) -95]
Test Case: 849 | Input/Output: [(-71 -74 31 5) -74]
Test Case: 850 | Input/Output: [(-59 -21 -90 -94) -94]
Test Case: 851 | Input/Output: [(-44 -50 -38 -28) -50]
Test Case: 852 | Input/Output: [(92 29 9 65) 9]
Test Case: 853 | Input/Output: [(29 -76 43 78) -76]
Test Case: 854 | Input/Output: [(68 -62 -22 -70) -70]
Test Case: 855 | Input/Output: [(93 85 -34 -18) -34]
Test Case: 856 | Input/Output: [(-43 -95 62 -23) -95]
Test Case: 857 | Input/Output: [(-100 4 -46 -50) -100]
Test Case: 858 | Input/Output: [(-92 -77 37 57) -92]
Test Case: 859 | Input/Output: [(-89 52 58 -92) -92]
Test Case: 860 | Input/Output: [(-6 53 -6 -41) -41]
Test Case: 861 | Input/Output: [(47 -93 94 -81) -93]
Test Case: 862 | Input/Output: [(9 -48 -12 82) -48]
Test Case: 863 | Input/Output: [(-72 90 83 -87) -87]
Test Case: 864 | Input/Output: [(-24 -12 -98 -35) -98]
Test Case: 865 | Input/Output: [(19 -100 92 51) -100]
Test Case: 866 | Input/Output: [(-29 44 -84 35) -84]
Test Case: 867 | Input/Output: [(23 -32 86 1) -32]
Test Case: 868 | Input/Output: [(44 100 -53 86) -53]
Test Case: 869 | Input/Output: [(-95 -61 -60 16) -95]
Test Case: 870 | Input/Output: [(29 -37 62 -83) -83]
Test Case: 871 | Input/Output: [(-5 -40 78 96) -40]
Test Case: 872 | Input/Output: [(49 -1 14 -19) -19]
Test Case: 873 | Input/Output: [(17 99 -30 76) -30]
Test Case: 874 | Input/Output: [(-93 -68 -88 68) -93]
Test Case: 875 | Input/Output: [(-5 -6 87 98) -6]
Test Case: 876 | Input/Output: [(59 -61 -25 -39) -61]
Test Case: 877 | Input/Output: [(16 -95 25 12) -95]
Test Case: 878 | Input/Output: [(78 -90 -76 -36) -90]
Test Case: 879 | Input/Output: [(-82 -60 24 60) -82]
Test Case: 880 | Input/Output: [(-48 3 77 -55) -55]
Test Case: 881 | Input/Output: [(45 99 -57 -92) -92]
Test Case: 882 | Input/Output: [(68 -6 83 47) -6]
Test Case: 883 | Input/Output: [(-48 -92 29 72) -92]
Test Case: 884 | Input/Output: [(57 10 88 -82) -82]
Test Case: 885 | Input/Output: [(-74 94 -64 34) -74]
Test Case: 886 | Input/Output: [(-26 38 -32 -68) -68]
Test Case: 887 | Input/Output: [(-59 -94 19 -94) -94]
Test Case: 888 | Input/Output: [(-31 47 16 -8) -31]
Test Case: 889 | Input/Output: [(-99 -29 -47 -32) -99]
Test Case: 890 | Input/Output: [(71 88 25 -18) -18]
Test Case: 891 | Input/Output: [(51 90 54 -66) -66]
Test Case: 892 | Input/Output: [(-78 61 -49 -1) -78]
Test Case: 893 | Input/Output: [(-7 31 20 -41) -41]
Test Case: 894 | Input/Output: [(94 22 74 22) 22]
Test Case: 895 | Input/Output: [(21 1 -4 -41) -41]
Test Case: 896 | Input/Output: [(75 -66 -30 52) -66]
Test Case: 897 | Input/Output: [(43 43 -82 -2) -82]
Test Case: 898 | Input/Output: [(-84 28 9 52) -84]
Test Case: 899 | Input/Output: [(45 28 5 -74) -74]
Test Case: 900 | Input/Output: [(-71 -23 48 26) -71]
Test Case: 901 | Input/Output: [(-85 25 13 -49) -85]
Test Case: 902 | Input/Output: [(-3 50 -39 -55) -55]
Test Case: 903 | Input/Output: [(-60 -12 94 -20) -60]
Test Case: 904 | Input/Output: [(-51 -68 -49 -56) -68]
Test Case: 905 | Input/Output: [(-4 -71 -57 4) -71]
Test Case: 906 | Input/Output: [(33 -44 -51 35) -51]
Test Case: 907 | Input/Output: [(38 -87 18 -31) -87]
Test Case: 908 | Input/Output: [(-42 -91 87 -47) -91]
Test Case: 909 | Input/Output: [(-58 -6 -15 55) -58]
Test Case: 910 | Input/Output: [(-94 -48 -76 -90) -94]
Test Case: 911 | Input/Output: [(19 32 -50 75) -50]
Test Case: 912 | Input/Output: [(66 32 79 -10) -10]
Test Case: 913 | Input/Output: [(70 65 17 -17) -17]
Test Case: 914 | Input/Output: [(-23 51 -15 6) -23]
Test Case: 915 | Input/Output: [(6 68 -73 33) -73]
Test Case: 916 | Input/Output: [(27 -97 -43 79) -97]
Test Case: 917 | Input/Output: [(68 -14 -90 -41) -90]
Test Case: 918 | Input/Output: [(15 28 -99 -27) -99]
Test Case: 919 | Input/Output: [(-24 20 62 75) -24]
Test Case: 920 | Input/Output: [(21 -9 -62 83) -62]
Test Case: 921 | Input/Output: [(-80 -46 -20 0) -80]
Test Case: 922 | Input/Output: [(-62 -58 -44 17) -62]
Test Case: 923 | Input/Output: [(-75 13 -21 -91) -91]
Test Case: 924 | Input/Output: [(69 57 71 -19) -19]
Test Case: 925 | Input/Output: [(52 93 -69 -40) -69]
Test Case: 926 | Input/Output: [(-94 62 68 -54) -94]
Test Case: 927 | Input/Output: [(9 -51 63 -25) -51]
Test Case: 928 | Input/Output: [(71 -4 68 32) -4]
Test Case: 929 | Input/Output: [(52 50 -64 -65) -65]
Test Case: 930 | Input/Output: [(-9 -6 60 -36) -36]
Test Case: 931 | Input/Output: [(56 75 41 98) 41]
Test Case: 932 | Input/Output: [(13 -67 33 -48) -67]
Test Case: 933 | Input/Output: [(-75 -2 20 91) -75]
Test Case: 934 | Input/Output: [(-5 80 -93 5) -93]
Test Case: 935 | Input/Output: [(2 64 27 10) 2]
Test Case: 936 | Input/Output: [(73 11 4 -82) -82]
Test Case: 937 | Input/Output: [(17 85 83 50) 17]
Test Case: 938 | Input/Output: [(73 56 -78 5) -78]
Test Case: 939 | Input/Output: [(3 -51 -54 35) -54]
Test Case: 940 | Input/Output: [(-42 -23 77 -54) -54]
Test Case: 941 | Input/Output: [(73 -12 53 -78) -78]
Test Case: 942 | Input/Output: [(-28 -25 -99 83) -99]
Test Case: 943 | Input/Output: [(-100 -83 1 -47) -100]
Test Case: 944 | Input/Output: [(65 -7 -80 -12) -80]
Test Case: 945 | Input/Output: [(-84 -85 -91 66) -91]
Test Case: 946 | Input/Output: [(9 -17 71 -37) -37]
Test Case: 947 | Input/Output: [(-65 -30 94 -86) -86]
Test Case: 948 | Input/Output: [(45 -12 57 26) -12]
Test Case: 949 | Input/Output: [(-16 0 -1 20) -16]
Test Case: 950 | Input/Output: [(-76 -71 -99 -5) -99]
Test Case: 951 | Input/Output: [(62 27 62 -49) -49]
Test Case: 952 | Input/Output: [(99 85 -26 -74) -74]
Test Case: 953 | Input/Output: [(94 70 -40 62) -40]
Test Case: 954 | Input/Output: [(-52 34 99 34) -52]
Test Case: 955 | Input/Output: [(46 33 -88 -13) -88]
Test Case: 956 | Input/Output: [(-59 -33 -7 -100) -100]
Test Case: 957 | Input/Output: [(-80 -44 -4 -45) -80]
Test Case: 958 | Input/Output: [(-14 60 10 -65) -65]
Test Case: 959 | Input/Output: [(-96 58 10 59) -96]
Test Case: 960 | Input/Output: [(-88 -46 0 -34) -88]
Test Case: 961 | Input/Output: [(72 20 -20 -40) -40]
Test Case: 962 | Input/Output: [(44 63 53 26) 26]
Test Case: 963 | Input/Output: [(14 -76 87 40) -76]
Test Case: 964 | Input/Output: [(98 -6 83 -77) -77]
Test Case: 965 | Input/Output: [(7 -35 -80 79) -80]
Test Case: 966 | Input/Output: [(92 -63 80 -91) -91]
Test Case: 967 | Input/Output: [(-29 -9 15 -41) -41]
Test Case: 968 | Input/Output: [(-78 -73 99 -33) -78]
Test Case: 969 | Input/Output: [(-23 -71 -16 42) -71]
Test Case: 970 | Input/Output: [(28 -78 74 14) -78]
Test Case: 971 | Input/Output: [(-98 38 97 -95) -98]
Test Case: 972 | Input/Output: [(-43 53 -50 -19) -50]
Test Case: 973 | Input/Output: [(-4 79 18 26) -4]
Test Case: 974 | Input/Output: [(-57 3 45 38) -57]
Test Case: 975 | Input/Output: [(78 -50 62 -90) -90]
Test Case: 976 | Input/Output: [(50 40 32 43) 32]
Test Case: 977 | Input/Output: [(9 7 -43 -60) -60]
Test Case: 978 | Input/Output: [(-69 -40 5 -48) -69]
Test Case: 979 | Input/Output: [(-62 -27 67 24) -62]
Test Case: 980 | Input/Output: [(-83 -11 -94 44) -94]
Test Case: 981 | Input/Output: [(97 47 -66 -83) -83]
Test Case: 982 | Input/Output: [(61 -69 -34 45) -69]
Test Case: 983 | Input/Output: [(-15 -16 35 53) -16]
Test Case: 984 | Input/Output: [(-88 59 3 33) -88]
Test Case: 985 | Input/Output: [(52 -82 -87 78) -87]
Test Case: 986 | Input/Output: [(73 -20 3 65) -20]
Test Case: 987 | Input/Output: [(-31 -89 2 -14) -89]
Test Case: 988 | Input/Output: [(43 38 -28 -5) -28]
Test Case: 989 | Input/Output: [(30 99 -84 37) -84]
Test Case: 990 | Input/Output: [(-47 79 19 -86) -86]
Test Case: 991 | Input/Output: [(75 -84 99 85) -84]
Test Case: 992 | Input/Output: [(-19 -61 21 -22) -61]
Test Case: 993 | Input/Output: [(2 30 -72 26) -72]
Test Case: 994 | Input/Output: [(-28 -98 -54 -79) -98]
Test Case: 995 | Input/Output: [(67 -19 56 62) -19]
Test Case: 996 | Input/Output: [(-38 41 72 71) -38]
Test Case: 997 | Input/Output: [(-64 -74 -69 3) -74]
Test Case: 998 | Input/Output: [(43 -36 -97 5) -97]
Test Case: 999 | Input/Output: [(19 40 91 -55) -55]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x30b9728f clojush.problems.software.smallest$fn__7461@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@24b8a393]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:uniform-addition-and-deletion 1.0}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 3000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
random-screen = false
random-seed = 30 -117 91 80 19 -10 -116 -72 3 -70 -89 36 88 99 -37 98
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[29 29 -38 29] -38] [[-70 -70 46 -70] -70] [[-67 -67 -67 -66] -67] [[-72 88 88 88] -72] [[-26 -26 -26 -26] -26] [[76 -42 76 76] -42] [[-9 -9 -9 100] -9] [[81 15 15 15] 15] [[-54 -54 -54 6] -54] [[-49 -49 -49 36] -49] [(45 45 45 45) 45] [(83 83 83 83) 83] [(-82 -82 -82 -82) -82] [(84 84 84 84) 84] [(-68 -68 -68 -68) -68] [(59 87 40 33) 33] [(92 23 83 12) 12] [(42 31 41 7) 7] [(97 11 10 8) 8] [(99 72 88 3) 3] [(26 66 9 78) 9] [(97 77 96 74) 74] [(22 77 38 46) 22] [(100 94 8 26) 8] [(18 19 19 80) 18] [(12 84 40 40) 12] [(56 28 97 48) 28] [(11 42 81 44) 11] [(55 9 78 47) 9] [(76 91 16 6) 6] [(3 20 51 78) 3] [(91 68 81 77) 68] [(45 56 57 17) 17] [(30 53 63 94) 30] [(66 25 2 20) 2] [(61 55 29 31) 29] [(35 -85 90 -94) -94] [(-83 -93 95 73) -93] [(19 81 37 -2) -2] [(-19 -69 19 72) -69] [(-80 -7 3 5) -80] [(-15 -12 65 -81) -81] [(-45 85 62 -52) -52] [(3 -42 -6 -71) -71] [(-21 46 -56 -84) -84] [(34 24 -15 47) -15] [(100 23 -84 96) -84] [(8 -92 1 -62) -92] [(17 -32 -82 31) -82] [(-11 -54 25 -87) -87] [(-21 -83 81 -97) -97] [(92 3 42 85) 3] [(-4 -49 -3 63) -49] [(-15 -51 78 -26) -51] [(0 93 -32 28) -32] [(37 -70 -28 -71) -71] [(33 -39 -72 -85) -85] [(21 39 -11 -3) -11] [(15 54 -86 -85) -86] [(-96 34 97 44) -96] [(-69 -52 51 -15) -69] [(-41 -15 -56 49) -56] [(18 87 42 -72) -72] [(23 -40 -2 -73) -73] [(-5 4 -64 89) -64] [(-98 -12 4 87) -98] [(-68 91 45 15) -68] [(-36 -61 -21 62) -61] [(-71 -81 87 100) -81] [(23 -83 65 58) -83] [(91 -72 56 -9) -72] [(56 79 -18 92) -18] [(83 47 40 -81) -81] [(-77 35 72 -50) -77] [(-14 -70 -81 84) -81] [(-13 -83 84 98) -83] [(74 -3 62 -84) -84] [(93 84 -52 89) -52] [(-25 -45 -32 -96) -96] [(-91 92 64 96) -91] [(-11 94 39 48) -11] [(-22 -43 -24 -23) -43] [(-60 83 77 15) -60] [(-27 90 72 -14) -27] [(-47 56 99 -71) -71] [(-15 45 70 16) -15] [(1 -2 38 -4) -4] [(-92 -37 2 -70) -92] [(-14 31 48 -19) -19] [(-100 -98 -93 -24) -100] [(-76 79 -90 -36) -90] [(13 55 85 39) 13] [(93 38 -98 42) -98] [(-90 96 -7 -32) -90] [(-50 75 -16 88) -50])
uniform-addition-and-deletion-rate = 0.09
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 661
Test mean error for best: 0.66100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -38                 | Program output: 29                 
Correct output: -70                 | Program output: -70                
Correct output: -67                 | Program output: -67                
Correct output: -72                 | Program output: -72                
Correct output: -26                 | Program output: -26                
Correct output: -42                 | Program output: 76                 
Correct output: -9                  | Program output: -9                 
Correct output: 15                  | Program output: 81                 
Correct output: -54                 | Program output: -54                
Correct output: -49                 | Program output: -49                
Correct output: 45                  | Program output: 45                 
Correct output: 83                  | Program output: 83                 
Correct output: -82                 | Program output: -82                
Correct output: 84                  | Program output: 84                 
Correct output: -68                 | Program output: -68                
Correct output: 33                  | Program output: 59                 
Correct output: 12                  | Program output: 92                 
Correct output: 7                   | Program output: 42                 
Correct output: 8                   | Program output: 97                 
Correct output: 3                   | Program output: 99                 
Correct output: 9                   | Program output: 26                 
Correct output: 74                  | Program output: 97                 
Correct output: 22                  | Program output: 22                 
Correct output: 8                   | Program output: 100                
Correct output: 18                  | Program output: 18                 
Correct output: 12                  | Program output: 12                 
Correct output: 28                  | Program output: 56                 
Correct output: 11                  | Program output: 11                 
Correct output: 9                   | Program output: 55                 
Correct output: 6                   | Program output: 76                 
Correct output: 3                   | Program output: 3                  
Correct output: 68                  | Program output: 91                 
Correct output: 17                  | Program output: 45                 
Correct output: 30                  | Program output: 30                 
Correct output: 2                   | Program output: 66                 
Correct output: 29                  | Program output: 61                 
Correct output: -94                 | Program output: 35                 
Correct output: -93                 | Program output: -83                
Correct output: -2                  | Program output: 19                 
Correct output: -69                 | Program output: -19                
Correct output: -80                 | Program output: -80                
Correct output: -81                 | Program output: -15                
Correct output: -52                 | Program output: -45                
Correct output: -71                 | Program output: 3                  
Correct output: -84                 | Program output: -21                
Correct output: -15                 | Program output: 34                 
Correct output: -84                 | Program output: 100                
Correct output: -92                 | Program output: 8                  
Correct output: -82                 | Program output: 17                 
Correct output: -87                 | Program output: -11                
Correct output: -97                 | Program output: -21                
Correct output: 3                   | Program output: 92                 
Correct output: -49                 | Program output: -4                 
Correct output: -51                 | Program output: -15                
Correct output: -32                 | Program output: 0                  
Correct output: -71                 | Program output: 37                 
Correct output: -85                 | Program output: 33                 
Correct output: -11                 | Program output: 21                 
Correct output: -86                 | Program output: 15                 
Correct output: -96                 | Program output: -96                
Correct output: -69                 | Program output: -69                
Correct output: -56                 | Program output: -41                
Correct output: -72                 | Program output: 18                 
Correct output: -73                 | Program output: 23                 
Correct output: -64                 | Program output: -5                 
Correct output: -98                 | Program output: -98                
Correct output: -68                 | Program output: -68                
Correct output: -61                 | Program output: -36                
Correct output: -81                 | Program output: -71                
Correct output: -83                 | Program output: 23                 
Correct output: -72                 | Program output: 91                 
Correct output: -18                 | Program output: 56                 
Correct output: -81                 | Program output: 83                 
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: -14                
Correct output: -83                 | Program output: -13                
Correct output: -84                 | Program output: 74                 
Correct output: -52                 | Program output: 93                 
Correct output: -96                 | Program output: -25                
Correct output: -91                 | Program output: -91                
Correct output: -11                 | Program output: -11                
Correct output: -43                 | Program output: -22                
Correct output: -60                 | Program output: -60                
Correct output: -27                 | Program output: -27                
Correct output: -71                 | Program output: -47                
Correct output: -15                 | Program output: -15                
Correct output: -4                  | Program output: 1                  
Correct output: -92                 | Program output: -92                
Correct output: -19                 | Program output: -14                
Correct output: -100                | Program output: -100               
Correct output: -90                 | Program output: -76                
Correct output: 13                  | Program output: 13                 
Correct output: -98                 | Program output: 93                 
Correct output: -90                 | Program output: -90                
Correct output: -50                 | Program output: -50                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_div} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction in2} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_max} {:close 1, :instruction exec_yank} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_and} {:close 0, :instruction 75} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*range} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_pop} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_s} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction 57} {:close 0, :instruction exec_do*count} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*times})
Lexicase best program: (exec_dup_items integer_yankdup integer_inc boolean_invert_first_then_and exec_do*times () boolean_and integer_inc exec_dup () exec_do*while (boolean_and integer_div integer_mod) exec_y_when_autoconstructing () exec_y_when_autoconstructing (integer_rot boolean_empty in2 boolean_yankdup exec_yank integer_max) exec_yank exec_yank exec_dup_items integer_shove integer_eq exec_when (exec_do*count () boolean_and 75 integer_shove integer_dup) exec_if (integer_gt) (integer_swap) exec_yankdup integer_yankdup boolean_shove boolean_eq integer_yank print_integer boolean_yank exec_noop in1 boolean_xor integer_lte boolean_swap print_integer integer_eq exec_yank boolean_invert_first_then_and print_integer exec_do*range () integer_div boolean_yankdup boolean_shove integer_pop boolean_dup_items exec_s (integer_shove exec_dup_times (integer_inc integer_sub exec_k (boolean_rot exec_flush exec_yank exec_s (exec_s_when_autoconstructing (in2 in2 exec_when (exec_swap (boolean_pop integer_yankdup exec_y_when_autoconstructing (boolean_dup exec_eq boolean_shove 57 exec_do*count (in4 integer_shove exec_yankdup boolean_and exec_do*times ()))) ())) () ()) () ()) ())) () ())
Lexicase best errors: [1 0 0 1 0 0 0 1 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 114
Percent parens: 0.254
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_div} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction in2} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_max} {:close 1, :instruction exec_yank} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_and} {:close 0, :instruction 75} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*range} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_pop} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_s} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction 57} {:close 0, :instruction exec_do*count} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*times})
Zero cases best program: (exec_dup_items integer_yankdup integer_inc boolean_invert_first_then_and exec_do*times () boolean_and integer_inc exec_dup () exec_do*while (boolean_and integer_div integer_mod) exec_y_when_autoconstructing () exec_y_when_autoconstructing (integer_rot boolean_empty in2 boolean_yankdup exec_yank integer_max) exec_yank exec_yank exec_dup_items integer_shove integer_eq exec_when (exec_do*count () boolean_and 75 integer_shove integer_dup) exec_if (integer_gt) (integer_swap) exec_yankdup integer_yankdup boolean_shove boolean_eq integer_yank print_integer boolean_yank exec_noop in1 boolean_xor integer_lte boolean_swap print_integer integer_eq exec_yank boolean_invert_first_then_and print_integer exec_do*range () integer_div boolean_yankdup boolean_shove integer_pop boolean_dup_items exec_s (integer_shove exec_dup_times (integer_inc integer_sub exec_k (boolean_rot exec_flush exec_yank exec_s (exec_s_when_autoconstructing (in2 in2 exec_when (exec_swap (boolean_pop integer_yankdup exec_y_when_autoconstructing (boolean_dup exec_eq boolean_shove 57 exec_do*count (in4 integer_shove exec_yankdup boolean_and exec_do*times ()))) ())) () ()) () ()) ())) () ())
Zero cases best errors: [1 0 0 1 0 0 0 1 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 114
Percent parens: 0.254
--- Lexicase Population Statistics ---
Count of elite individuals by case: (6 3 3 3 3 4 3 1000 6 6)
Population mean number of elite cases: 1.04
Count of perfect (error zero) individuals by case: (6 3 3 3 3 4 3 0 6 6)
Population mean number of perfect (error zero) cases: 0.04
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_empty} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_do*range} {:close 1, :instruction integer_min} {:close 0, :instruction tagged_30} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_max} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_gt})
Best program: (integer_empty integer_sub exec_do*range () integer_min tagged_30 integer_eq exec_s_when_autoconstructing (integer_inc integer_yank integer_max) (in1 print_integer exec_pop (boolean_not integer_flush integer_flush exec_dup_times (boolean_dup_times boolean_invert_first_then_and exec_do*range (exec_stackdepth integer_gt)))) ())
Errors: [1 0 0 1 0 0 0 1 1 0]
Total: 4
Mean: 0.4
Genome size: 22
Size: 30
Percent parens: 0.267
--- Population Statistics ---
Average total errors in population: 9.963
Median total errors in population: 10
Error averages by case: (0.994 0.997 0.997 0.997 0.997 0.996 0.997 1.0 0.994 0.994)
Error minima by case: (0 0 0 0 0 0 0 1 0 0)
Average genome size in population (length): 49.831
Average program size in population (points): 68.414
Average percent parens in population: 0.276
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.999
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.999
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.277
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 452025
--- Timings ---
Current time: 1559594054508 milliseconds
Total Time:           2.8 seconds
Initialization:       0.1 seconds,  3.6%
Reproduction:         0.8 seconds, 29.0%
Fitness Testing:      1.9 seconds, 67.4%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 627
Test mean error for best: 0.62700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -38                 | Program output: 29                 
Correct output: -70                 | Program output: -70                
Correct output: -67                 | Program output: -66                
Correct output: -72                 | Program output: 88                 
Correct output: -26                 | Program output: -26                
Correct output: -42                 | Program output: 76                 
Correct output: -9                  | Program output: 100                
Correct output: 15                  | Program output: 15                 
Correct output: -54                 | Program output: 6                  
Correct output: -49                 | Program output: 36                 
Correct output: 45                  | Program output: 45                 
Correct output: 83                  | Program output: 83                 
Correct output: -82                 | Program output: -82                
Correct output: 84                  | Program output: 84                 
Correct output: -68                 | Program output: -68                
Correct output: 33                  | Program output: 33                 
Correct output: 12                  | Program output: 12                 
Correct output: 7                   | Program output: 7                  
Correct output: 8                   | Program output: 8                  
Correct output: 3                   | Program output: 3                  
Correct output: 9                   | Program output: 78                 
Correct output: 74                  | Program output: 74                 
Correct output: 22                  | Program output: 46                 
Correct output: 8                   | Program output: 26                 
Correct output: 18                  | Program output: 80                 
Correct output: 12                  | Program output: 40                 
Correct output: 28                  | Program output: 48                 
Correct output: 11                  | Program output: 44                 
Correct output: 9                   | Program output: 47                 
Correct output: 6                   | Program output: 6                  
Correct output: 3                   | Program output: 78                 
Correct output: 68                  | Program output: 77                 
Correct output: 17                  | Program output: 17                 
Correct output: 30                  | Program output: 94                 
Correct output: 2                   | Program output: 20                 
Correct output: 29                  | Program output: 31                 
Correct output: -94                 | Program output: -94                
Correct output: -93                 | Program output: 73                 
Correct output: -2                  | Program output: -2                 
Correct output: -69                 | Program output: 72                 
Correct output: -80                 | Program output: 5                  
Correct output: -81                 | Program output: -81                
Correct output: -52                 | Program output: -52                
Correct output: -71                 | Program output: -71                
Correct output: -84                 | Program output: -84                
Correct output: -15                 | Program output: 47                 
Correct output: -84                 | Program output: 96                 
Correct output: -92                 | Program output: -62                
Correct output: -82                 | Program output: 31                 
Correct output: -87                 | Program output: -87                
Correct output: -97                 | Program output: -97                
Correct output: 3                   | Program output: 85                 
Correct output: -49                 | Program output: 63                 
Correct output: -51                 | Program output: -26                
Correct output: -32                 | Program output: 28                 
Correct output: -71                 | Program output: -71                
Correct output: -85                 | Program output: -85                
Correct output: -11                 | Program output: -3                 
Correct output: -86                 | Program output: -85                
Correct output: -96                 | Program output: 44                 
Correct output: -69                 | Program output: -15                
Correct output: -56                 | Program output: 49                 
Correct output: -72                 | Program output: -72                
Correct output: -73                 | Program output: -73                
Correct output: -64                 | Program output: 89                 
Correct output: -98                 | Program output: 87                 
Correct output: -68                 | Program output: 15                 
Correct output: -61                 | Program output: 62                 
Correct output: -81                 | Program output: 100                
Correct output: -83                 | Program output: 58                 
Correct output: -72                 | Program output: -9                 
Correct output: -18                 | Program output: 92                 
Correct output: -81                 | Program output: -81                
Correct output: -77                 | Program output: -50                
Correct output: -81                 | Program output: 84                 
Correct output: -83                 | Program output: 98                 
Correct output: -84                 | Program output: -84                
Correct output: -52                 | Program output: 89                 
Correct output: -96                 | Program output: -96                
Correct output: -91                 | Program output: 96                 
Correct output: -11                 | Program output: 48                 
Correct output: -43                 | Program output: -23                
Correct output: -60                 | Program output: 15                 
Correct output: -27                 | Program output: -14                
Correct output: -71                 | Program output: -71                
Correct output: -15                 | Program output: 16                 
Correct output: -4                  | Program output: -4                 
Correct output: -92                 | Program output: -70                
Correct output: -19                 | Program output: -19                
Correct output: -100                | Program output: -24                
Correct output: -90                 | Program output: -36                
Correct output: 13                  | Program output: 39                 
Correct output: -98                 | Program output: 42                 
Correct output: -90                 | Program output: -32                
Correct output: -50                 | Program output: 88                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 0, :instruction tagged_629} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 2, :instruction integer_lt} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction tagged_343} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_eq} {:close 0, :instruction -88} {:close 0, :instruction boolean_yank} {:close 0, :instruction in4} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_exec} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_k} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_and} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_s} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_dup} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_rot} {:close 0, :instruction tag_integer_472} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction in1} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_y} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_s})
Lexicase best program: (exec_yankdup integer_sub exec_rot (integer_mult boolean_invert_second_then_and in4 integer_gt) (exec_s (tagged_629 print_integer integer_mod boolean_flush integer_dup exec_yankdup exec_rot (integer_rot) (exec_do*range (boolean_xor boolean_flush exec_flush boolean_invert_second_then_and exec_k_when_autoconstructing (boolean_and) (integer_lt)) integer_inc exec_dup (exec_empty integer_dec tagged_343 integer_pop exec_dup (integer_swap exec_eq integer_eq) -88 boolean_yank in4 exec_k (boolean_stackdepth print_exec (exec_pop (exec_k (exec_k_when_autoconstructing (integer_mod integer_dec boolean_frominteger boolean_shove integer_min) (integer_yankdup exec_swap (integer_mod integer_dup_items) (exec_k_when_autoconstructing (boolean_xor boolean_frominteger integer_flush boolean_and) (exec_if () (boolean_yank exec_s () (integer_inc boolean_frominteger print_boolean exec_rot (exec_dup () boolean_dup_times) () (exec_do*count (exec_shove () boolean_rot integer_eq exec_shove (exec_noop boolean_dup integer_pop integer_add integer_dec exec_rot () (tag_integer_472 exec_yankdup exec_y_when_autoconstructing (integer_mod in1 boolean_rot exec_y (exec_stackdepth exec_while (integer_gt exec_s () () ())))) ())))) ()))))) ()))) ())) ()) () ()) ())
Lexicase best errors: [0 0 1 1 1 1 1 1 1 0]
Lexicase best number of elite cases: 3
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 136
Percent parens: 0.353
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 0, :instruction tagged_629} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 2, :instruction integer_lt} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction tagged_343} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_eq} {:close 0, :instruction -88} {:close 0, :instruction boolean_yank} {:close 0, :instruction in4} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_exec} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_k} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_and} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_s} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_dup} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_rot} {:close 0, :instruction tag_integer_472} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction in1} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_y} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_s})
Zero cases best program: (exec_yankdup integer_sub exec_rot (integer_mult boolean_invert_second_then_and in4 integer_gt) (exec_s (tagged_629 print_integer integer_mod boolean_flush integer_dup exec_yankdup exec_rot (integer_rot) (exec_do*range (boolean_xor boolean_flush exec_flush boolean_invert_second_then_and exec_k_when_autoconstructing (boolean_and) (integer_lt)) integer_inc exec_dup (exec_empty integer_dec tagged_343 integer_pop exec_dup (integer_swap exec_eq integer_eq) -88 boolean_yank in4 exec_k (boolean_stackdepth print_exec (exec_pop (exec_k (exec_k_when_autoconstructing (integer_mod integer_dec boolean_frominteger boolean_shove integer_min) (integer_yankdup exec_swap (integer_mod integer_dup_items) (exec_k_when_autoconstructing (boolean_xor boolean_frominteger integer_flush boolean_and) (exec_if () (boolean_yank exec_s () (integer_inc boolean_frominteger print_boolean exec_rot (exec_dup () boolean_dup_times) () (exec_do*count (exec_shove () boolean_rot integer_eq exec_shove (exec_noop boolean_dup integer_pop integer_add integer_dec exec_rot () (tag_integer_472 exec_yankdup exec_y_when_autoconstructing (integer_mod in1 boolean_rot exec_y (exec_stackdepth exec_while (integer_gt exec_s () () ())))) ())))) ()))))) ()))) ())) ()) () ()) ())
Zero cases best errors: [0 0 1 1 1 1 1 1 1 0]
Zero cases best number of elite cases: 3
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 136
Percent parens: 0.353
--- Lexicase Population Statistics ---
Count of elite individuals by case: (128 131 88 91 1 354 362 2 90 126)
Population mean number of elite cases: 1.37
Count of perfect (error zero) individuals by case: (128 131 88 91 1 354 362 2 90 126)
Population mean number of perfect (error zero) cases: 1.37
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_s} {:close 0, :instruction tagged_629} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 2, :instruction integer_lt} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction tagged_343} {:close 0, :instruction integer_dec} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_min} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction -88} {:close 0, :instruction boolean_yank} {:close 0, :instruction in4} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_k} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_and} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_s} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_dup} {:close 0, :instruction tagged_841} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction tag_integer_472} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_s})
Best program: (exec_yankdup integer_sub exec_rot (integer_yankdup integer_mult boolean_invert_second_then_and in4 boolean_shove integer_swap integer_gt) (integer_eq exec_s (tagged_629 print_integer integer_mod boolean_flush exec_rot (integer_dup integer_dec integer_rot) (exec_do*range (exec_rot (boolean_xor boolean_flush exec_flush boolean_invert_second_then_and exec_k_when_autoconstructing (boolean_and) (integer_lt)) (boolean_dup integer_gte integer_inc exec_dup (exec_empty integer_dec tagged_343 integer_dec print_boolean integer_pop exec_when (boolean_yank integer_swap integer_min integer_eq) boolean_and -88 boolean_yank in4 exec_k (boolean_stackdepth exec_pop (integer_gte exec_k (exec_k_when_autoconstructing (integer_mod integer_dec boolean_shove integer_yankdup integer_dup_items) (exec_k_when_autoconstructing (exec_yankdup) (boolean_xor boolean_frominteger exec_flush boolean_and) exec_if () (boolean_yank exec_s () (integer_inc boolean_frominteger print_boolean exec_rot (exec_dup () tagged_841 exec_do*count (exec_when (exec_shove () integer_eq boolean_rot integer_eq exec_shove (exec_noop integer_pop exec_stackdepth integer_add boolean_yankdup integer_dec exec_s_when_autoconstructing (tag_integer_472 exec_yankdup integer_gt exec_y_when_autoconstructing (integer_mod exec_swap (in1 boolean_rot boolean_invert_first_then_and exec_y (exec_stackdepth exec_while (integer_gt exec_s () () ()))) ())) () ())))) () ()) ()))) ())) ())) ())) ()) () ()) ())
Errors: [0 0 1 1 1 1 1 1 1 0]
Total: 7
Mean: 0.7
Genome size: 102
Size: 153
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 8.627
Median total errors in population: 8
Error averages by case: (0.872 0.869 0.912 0.909 0.999 0.646 0.638 0.998 0.91 0.874)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 51.762
Average program size in population (points): 69.439
Average percent parens in population: 0.251
Minimum age in population: 1.0
Maximum age in population: 1.0
Average age in population: 1.0
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 8
Genome diversity (% unique genomes):	 0.972
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.972
Total error diversity:				 0.004
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.135
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 1008043
--- Timings ---
Current time: 1559594056538 milliseconds
Total Time:           4.8 seconds
Initialization:       0.1 seconds,  2.1%
Reproduction:         1.8 seconds, 37.4%
Fitness Testing:      2.6 seconds, 54.2%
Report:               0.3 seconds,  6.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 627
Test mean error for best: 0.62700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -38                 | Program output: 29                 
Correct output: -70                 | Program output: -70                
Correct output: -67                 | Program output: -66                
Correct output: -72                 | Program output: 88                 
Correct output: -26                 | Program output: -26                
Correct output: -42                 | Program output: 76                 
Correct output: -9                  | Program output: 100                
Correct output: 15                  | Program output: 15                 
Correct output: -54                 | Program output: 6                  
Correct output: -49                 | Program output: 36                 
Correct output: 45                  | Program output: 45                 
Correct output: 83                  | Program output: 83                 
Correct output: -82                 | Program output: -82                
Correct output: 84                  | Program output: 84                 
Correct output: -68                 | Program output: -68                
Correct output: 33                  | Program output: 33                 
Correct output: 12                  | Program output: 12                 
Correct output: 7                   | Program output: 7                  
Correct output: 8                   | Program output: 8                  
Correct output: 3                   | Program output: 3                  
Correct output: 9                   | Program output: 78                 
Correct output: 74                  | Program output: 74                 
Correct output: 22                  | Program output: 46                 
Correct output: 8                   | Program output: 26                 
Correct output: 18                  | Program output: 80                 
Correct output: 12                  | Program output: 40                 
Correct output: 28                  | Program output: 48                 
Correct output: 11                  | Program output: 44                 
Correct output: 9                   | Program output: 47                 
Correct output: 6                   | Program output: 6                  
Correct output: 3                   | Program output: 78                 
Correct output: 68                  | Program output: 77                 
Correct output: 17                  | Program output: 17                 
Correct output: 30                  | Program output: 94                 
Correct output: 2                   | Program output: 20                 
Correct output: 29                  | Program output: 31                 
Correct output: -94                 | Program output: -94                
Correct output: -93                 | Program output: 73                 
Correct output: -2                  | Program output: -2                 
Correct output: -69                 | Program output: 72                 
Correct output: -80                 | Program output: 5                  
Correct output: -81                 | Program output: -81                
Correct output: -52                 | Program output: -52                
Correct output: -71                 | Program output: -71                
Correct output: -84                 | Program output: -84                
Correct output: -15                 | Program output: 47                 
Correct output: -84                 | Program output: 96                 
Correct output: -92                 | Program output: -62                
Correct output: -82                 | Program output: 31                 
Correct output: -87                 | Program output: -87                
Correct output: -97                 | Program output: -97                
Correct output: 3                   | Program output: 85                 
Correct output: -49                 | Program output: 63                 
Correct output: -51                 | Program output: -26                
Correct output: -32                 | Program output: 28                 
Correct output: -71                 | Program output: -71                
Correct output: -85                 | Program output: -85                
Correct output: -11                 | Program output: -3                 
Correct output: -86                 | Program output: -85                
Correct output: -96                 | Program output: 44                 
Correct output: -69                 | Program output: -15                
Correct output: -56                 | Program output: 49                 
Correct output: -72                 | Program output: -72                
Correct output: -73                 | Program output: -73                
Correct output: -64                 | Program output: 89                 
Correct output: -98                 | Program output: 87                 
Correct output: -68                 | Program output: 15                 
Correct output: -61                 | Program output: 62                 
Correct output: -81                 | Program output: 100                
Correct output: -83                 | Program output: 58                 
Correct output: -72                 | Program output: -9                 
Correct output: -18                 | Program output: 92                 
Correct output: -81                 | Program output: -81                
Correct output: -77                 | Program output: -50                
Correct output: -81                 | Program output: 84                 
Correct output: -83                 | Program output: 98                 
Correct output: -84                 | Program output: -84                
Correct output: -52                 | Program output: 89                 
Correct output: -96                 | Program output: -96                
Correct output: -91                 | Program output: 96                 
Correct output: -11                 | Program output: 48                 
Correct output: -43                 | Program output: -23                
Correct output: -60                 | Program output: 15                 
Correct output: -27                 | Program output: -14                
Correct output: -71                 | Program output: -71                
Correct output: -15                 | Program output: 16                 
Correct output: -4                  | Program output: -4                 
Correct output: -92                 | Program output: -70                
Correct output: -19                 | Program output: -19                
Correct output: -100                | Program output: -24                
Correct output: -90                 | Program output: -36                
Correct output: 13                  | Program output: 39                 
Correct output: -98                 | Program output: 42                 
Correct output: -90                 | Program output: -32                
Correct output: -50                 | Program output: 88                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_rot} {:close 0, :instruction tag_integer_643} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_s} {:close 2, :instruction integer_add} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_rot} {:close 0, :instruction in2} {:close 0, :instruction integer_lte} {:close 0, :instruction tagged_556} {:close 1, :instruction exec_when} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_div} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 2, :instruction boolean_or} {:close 0, :instruction exec_dup} {:close 0, :instruction -98} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction -79} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction boolean_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction tagged_167} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_dup_items} {:close 2, :instruction boolean_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_do*range} {:close 0, :instruction in2} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_lt})
Lexicase best program: (integer_max in4 exec_do*range (integer_min boolean_empty boolean_invert_second_then_and print_integer integer_dup_items integer_lt integer_fromboolean exec_y (integer_dec integer_yankdup integer_mult exec_do*times (integer_dup_items) integer_rot) tag_integer_643 exec_stackdepth integer_gt) exec_dup (integer_inc boolean_swap integer_fromboolean exec_s (integer_add) () (exec_empty boolean_invert_first_then_and exec_rot (in2 integer_lte tagged_556 exec_when () exec_eq) (integer_div in2 exec_s () (boolean_or) () exec_dup (-98 integer_stackdepth) integer_min boolean_empty integer_dec exec_stackdepth boolean_invert_first_then_and boolean_eq integer_add) (boolean_dup_items boolean_yank) boolean_yank integer_dup_times -79 boolean_swap integer_inc) boolean_and boolean_yankdup integer_pop exec_flush boolean_dup_items integer_eq) boolean_flush exec_do*times () exec_dup_times (integer_shove boolean_swap boolean_dup_items) exec_s_when_autoconstructing (integer_eq integer_dup_times) (integer_fromboolean boolean_dup) () integer_gt exec_yankdup tagged_167 integer_div boolean_xor boolean_invert_first_then_and integer_flush exec_dup_items integer_empty exec_dup_items boolean_pop integer_lt exec_do*range (in2 integer_stackdepth integer_lt))
Lexicase best errors: [0 1 1 1 0 1 1 0 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 110
Percent parens: 0.200
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_rot} {:close 0, :instruction tag_integer_643} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_s} {:close 2, :instruction integer_add} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_rot} {:close 0, :instruction in2} {:close 0, :instruction integer_lte} {:close 0, :instruction tagged_556} {:close 1, :instruction exec_when} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_div} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 2, :instruction boolean_or} {:close 0, :instruction exec_dup} {:close 0, :instruction -98} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction -79} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction boolean_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction tagged_167} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_dup_items} {:close 2, :instruction boolean_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_do*range} {:close 0, :instruction in2} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_lt})
Zero cases best program: (integer_max in4 exec_do*range (integer_min boolean_empty boolean_invert_second_then_and print_integer integer_dup_items integer_lt integer_fromboolean exec_y (integer_dec integer_yankdup integer_mult exec_do*times (integer_dup_items) integer_rot) tag_integer_643 exec_stackdepth integer_gt) exec_dup (integer_inc boolean_swap integer_fromboolean exec_s (integer_add) () (exec_empty boolean_invert_first_then_and exec_rot (in2 integer_lte tagged_556 exec_when () exec_eq) (integer_div in2 exec_s () (boolean_or) () exec_dup (-98 integer_stackdepth) integer_min boolean_empty integer_dec exec_stackdepth boolean_invert_first_then_and boolean_eq integer_add) (boolean_dup_items boolean_yank) boolean_yank integer_dup_times -79 boolean_swap integer_inc) boolean_and boolean_yankdup integer_pop exec_flush boolean_dup_items integer_eq) boolean_flush exec_do*times () exec_dup_times (integer_shove boolean_swap boolean_dup_items) exec_s_when_autoconstructing (integer_eq integer_dup_times) (integer_fromboolean boolean_dup) () integer_gt exec_yankdup tagged_167 integer_div boolean_xor boolean_invert_first_then_and integer_flush exec_dup_items integer_empty exec_dup_items boolean_pop integer_lt exec_do*range (in2 integer_stackdepth integer_lt))
Zero cases best errors: [0 1 1 1 0 1 1 0 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 110
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (201 127 192 194 404 191 77 201 200 201)
Population mean number of elite cases: 1.99
Count of perfect (error zero) individuals by case: (201 127 192 194 404 191 77 201 200 201)
Population mean number of perfect (error zero) cases: 1.99
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_eq})
Best program: (exec_yankdup boolean_yank in4 print_integer integer_fromboolean integer_pop exec_s_when_autoconstructing (integer_stackdepth integer_pop exec_eq) () ())
Errors: [0 1 1 1 0 1 1 0 0 0]
Total: 5
Mean: 0.5
Genome size: 10
Size: 14
Percent parens: 0.286
--- Population Statistics ---
Average total errors in population: 8.012
Median total errors in population: 8
Error averages by case: (0.799 0.873 0.808 0.806 0.596 0.809 0.923 0.799 0.8 0.799)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 48.236
Average program size in population (points): 64.682
Average percent parens in population: 0.247
Minimum age in population: 2.0
Maximum age in population: 2.0
Average age in population: 2.0
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 8
Genome diversity (% unique genomes):	 0.98
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.98
Total error diversity:				 0.006
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.137
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1558066
--- Timings ---
Current time: 1559594058605 milliseconds
Total Time:           7.0 seconds
Initialization:       0.1 seconds,  1.4%
Reproduction:         3.0 seconds, 42.8%
Fitness Testing:      3.3 seconds, 47.3%
Report:               0.6 seconds,  8.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 627
Test mean error for best: 0.62700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -38                 | Program output: 29                 
Correct output: -70                 | Program output: -70                
Correct output: -67                 | Program output: -66                
Correct output: -72                 | Program output: 88                 
Correct output: -26                 | Program output: -26                
Correct output: -42                 | Program output: 76                 
Correct output: -9                  | Program output: 100                
Correct output: 15                  | Program output: 15                 
Correct output: -54                 | Program output: 6                  
Correct output: -49                 | Program output: 36                 
Correct output: 45                  | Program output: 45                 
Correct output: 83                  | Program output: 83                 
Correct output: -82                 | Program output: -82                
Correct output: 84                  | Program output: 84                 
Correct output: -68                 | Program output: -68                
Correct output: 33                  | Program output: 33                 
Correct output: 12                  | Program output: 12                 
Correct output: 7                   | Program output: 7                  
Correct output: 8                   | Program output: 8                  
Correct output: 3                   | Program output: 3                  
Correct output: 9                   | Program output: 78                 
Correct output: 74                  | Program output: 74                 
Correct output: 22                  | Program output: 46                 
Correct output: 8                   | Program output: 26                 
Correct output: 18                  | Program output: 80                 
Correct output: 12                  | Program output: 40                 
Correct output: 28                  | Program output: 48                 
Correct output: 11                  | Program output: 44                 
Correct output: 9                   | Program output: 47                 
Correct output: 6                   | Program output: 6                  
Correct output: 3                   | Program output: 78                 
Correct output: 68                  | Program output: 77                 
Correct output: 17                  | Program output: 17                 
Correct output: 30                  | Program output: 94                 
Correct output: 2                   | Program output: 20                 
Correct output: 29                  | Program output: 31                 
Correct output: -94                 | Program output: -94                
Correct output: -93                 | Program output: 73                 
Correct output: -2                  | Program output: -2                 
Correct output: -69                 | Program output: 72                 
Correct output: -80                 | Program output: 5                  
Correct output: -81                 | Program output: -81                
Correct output: -52                 | Program output: -52                
Correct output: -71                 | Program output: -71                
Correct output: -84                 | Program output: -84                
Correct output: -15                 | Program output: 47                 
Correct output: -84                 | Program output: 96                 
Correct output: -92                 | Program output: -62                
Correct output: -82                 | Program output: 31                 
Correct output: -87                 | Program output: -87                
Correct output: -97                 | Program output: -97                
Correct output: 3                   | Program output: 85                 
Correct output: -49                 | Program output: 63                 
Correct output: -51                 | Program output: -26                
Correct output: -32                 | Program output: 28                 
Correct output: -71                 | Program output: -71                
Correct output: -85                 | Program output: -85                
Correct output: -11                 | Program output: -3                 
Correct output: -86                 | Program output: -85                
Correct output: -96                 | Program output: 44                 
Correct output: -69                 | Program output: -15                
Correct output: -56                 | Program output: 49                 
Correct output: -72                 | Program output: -72                
Correct output: -73                 | Program output: -73                
Correct output: -64                 | Program output: 89                 
Correct output: -98                 | Program output: 87                 
Correct output: -68                 | Program output: 15                 
Correct output: -61                 | Program output: 62                 
Correct output: -81                 | Program output: 100                
Correct output: -83                 | Program output: 58                 
Correct output: -72                 | Program output: -9                 
Correct output: -18                 | Program output: 92                 
Correct output: -81                 | Program output: -81                
Correct output: -77                 | Program output: -50                
Correct output: -81                 | Program output: 84                 
Correct output: -83                 | Program output: 98                 
Correct output: -84                 | Program output: -84                
Correct output: -52                 | Program output: 89                 
Correct output: -96                 | Program output: -96                
Correct output: -91                 | Program output: 96                 
Correct output: -11                 | Program output: 48                 
Correct output: -43                 | Program output: -23                
Correct output: -60                 | Program output: 15                 
Correct output: -27                 | Program output: -14                
Correct output: -71                 | Program output: -71                
Correct output: -15                 | Program output: 16                 
Correct output: -4                  | Program output: -4                 
Correct output: -92                 | Program output: -70                
Correct output: -19                 | Program output: -19                
Correct output: -100                | Program output: -24                
Correct output: -90                 | Program output: -36                
Correct output: 13                  | Program output: 39                 
Correct output: -98                 | Program output: 42                 
Correct output: -90                 | Program output: -32                
Correct output: -50                 | Program output: 88                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_rot} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 1, :instruction tagged_951} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction integer_add} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_rot} {:close 0, :instruction in2} {:close 0, :instruction integer_lte} {:close 0, :instruction tagged_556} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 2, :instruction boolean_or} {:close 0, :instruction exec_dup} {:close 0, :instruction -98} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_add} {:close 2, :instruction exec_dup_items} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_do*while} {:close 0, :instruction -79} {:close 0, :instruction print_exec} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_do*times} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_dup_times} {:close 2, :instruction boolean_dup} {:close 0, :instruction 66} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_rot} {:close 2, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup})
Lexicase best program: (in4 boolean_invert_second_then_and exec_do*range (boolean_invert_second_then_and integer_rot print_integer integer_shove) integer_lt integer_fromboolean exec_y (integer_dec integer_gt) exec_do*while (integer_rot) integer_gt exec_dup (integer_inc integer_lt print_integer tagged_951) integer_fromboolean integer_add integer_sub exec_empty exec_do*count (exec_rot (in2 integer_lte tagged_556 exec_dup_items exec_stackdepth) (in2 exec_s () (boolean_or) () exec_dup (-98 integer_stackdepth) integer_min integer_dec exec_rot (exec_stackdepth boolean_invert_first_then_and boolean_eq integer_add) (exec_dup_items) () boolean_dup_items boolean_swap boolean_yank) (boolean_yank exec_do*while () -79 print_exec (integer_inc) boolean_yankdup boolean_rot exec_do*times () boolean_yankdup) exec_k_when_autoconstructing (exec_dup_times (integer_shove boolean_swap boolean_dup_items) exec_s_when_autoconstructing (integer_dup_times) (boolean_dup) () 66 integer_gt exec_yankdup integer_gt) (integer_div boolean_pop boolean_invert_first_then_and exec_k (integer_dup integer_yank integer_lte exec_dup_items integer_empty) (exec_dup_items integer_rot) boolean_pop)) exec_do*range (integer_stackdepth integer_rot exec_stackdepth integer_lt boolean_not exec_k_when_autoconstructing (boolean_dup) ()))
Lexicase best errors: [0 1 1 1 0 0 1 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 119
Percent parens: 0.252
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_rot} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 1, :instruction tagged_951} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction integer_add} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_rot} {:close 0, :instruction in2} {:close 0, :instruction integer_lte} {:close 0, :instruction tagged_556} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction in2} {:close 1, :instruction exec_s} {:close 2, :instruction boolean_or} {:close 0, :instruction exec_dup} {:close 0, :instruction -98} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_add} {:close 2, :instruction exec_dup_items} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_do*while} {:close 0, :instruction -79} {:close 0, :instruction print_exec} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_do*times} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_dup_times} {:close 2, :instruction boolean_dup} {:close 0, :instruction 66} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_rot} {:close 2, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup})
Zero cases best program: (in4 boolean_invert_second_then_and exec_do*range (boolean_invert_second_then_and integer_rot print_integer integer_shove) integer_lt integer_fromboolean exec_y (integer_dec integer_gt) exec_do*while (integer_rot) integer_gt exec_dup (integer_inc integer_lt print_integer tagged_951) integer_fromboolean integer_add integer_sub exec_empty exec_do*count (exec_rot (in2 integer_lte tagged_556 exec_dup_items exec_stackdepth) (in2 exec_s () (boolean_or) () exec_dup (-98 integer_stackdepth) integer_min integer_dec exec_rot (exec_stackdepth boolean_invert_first_then_and boolean_eq integer_add) (exec_dup_items) () boolean_dup_items boolean_swap boolean_yank) (boolean_yank exec_do*while () -79 print_exec (integer_inc) boolean_yankdup boolean_rot exec_do*times () boolean_yankdup) exec_k_when_autoconstructing (exec_dup_times (integer_shove boolean_swap boolean_dup_items) exec_s_when_autoconstructing (integer_dup_times) (boolean_dup) () 66 integer_gt exec_yankdup integer_gt) (integer_div boolean_pop boolean_invert_first_then_and exec_k (integer_dup integer_yank integer_lte exec_dup_items integer_empty) (exec_dup_items integer_rot) boolean_pop)) exec_do*range (integer_stackdepth integer_rot exec_stackdepth integer_lt boolean_not exec_k_when_autoconstructing (boolean_dup) ()))
Zero cases best errors: [0 1 1 1 0 0 1 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 119
Percent parens: 0.252
--- Lexicase Population Statistics ---
Count of elite individuals by case: (306 90 64 61 306 307 92 96 304 561)
Population mean number of elite cases: 2.19
Count of perfect (error zero) individuals by case: (306 90 64 61 306 307 92 96 304 561)
Population mean number of perfect (error zero) cases: 2.19
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction integer_gt})
Best program: (integer_dup_items integer_inc print_integer boolean_invert_first_then_and boolean_yankdup in4 print_integer integer_gt)
Errors: [0 1 1 1 0 0 1 1 0 0]
Total: 5
Mean: 0.5
Genome size: 8
Size: 9
Percent parens: 0.111
--- Population Statistics ---
Average total errors in population: 7.813
Median total errors in population: 9
Error averages by case: (0.694 0.91 0.936 0.939 0.694 0.693 0.908 0.904 0.696 0.439)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 47.348
Average program size in population (points): 64.683
Average percent parens in population: 0.257
Minimum age in population: 3.0
Maximum age in population: 3.0
Average age in population: 3.0
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 8
Genome diversity (% unique genomes):	 0.979
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.979
Total error diversity:				 0.005
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.128
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 2065500
--- Timings ---
Current time: 1559594060609 milliseconds
Total Time:           9.0 seconds
Initialization:       0.1 seconds,  1.1%
Reproduction:         4.2 seconds, 46.7%
Fitness Testing:      3.9 seconds, 43.6%
Report:               0.8 seconds,  8.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 543
Test mean error for best: 0.54300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -38                 | Program output: 29                 
Correct output: -70                 | Program output: -70                
Correct output: -67                 | Program output: -67                
Correct output: -72                 | Program output: -72                
Correct output: -26                 | Program output: -26                
Correct output: -42                 | Program output: -42                
Correct output: -9                  | Program output: -9                 
Correct output: 15                  | Program output: 81                 
Correct output: -54                 | Program output: -54                
Correct output: -49                 | Program output: -49                
Correct output: 45                  | Program output: 45                 
Correct output: 83                  | Program output: 83                 
Correct output: -82                 | Program output: -82                
Correct output: 84                  | Program output: 84                 
Correct output: -68                 | Program output: -68                
Correct output: 33                  | Program output: 59                 
Correct output: 12                  | Program output: 92                 
Correct output: 7                   | Program output: 42                 
Correct output: 8                   | Program output: 97                 
Correct output: 3                   | Program output: 99                 
Correct output: 9                   | Program output: 26                 
Correct output: 74                  | Program output: 97                 
Correct output: 22                  | Program output: 22                 
Correct output: 8                   | Program output: 100                
Correct output: 18                  | Program output: 18                 
Correct output: 12                  | Program output: 12                 
Correct output: 28                  | Program output: 56                 
Correct output: 11                  | Program output: 11                 
Correct output: 9                   | Program output: 55                 
Correct output: 6                   | Program output: 76                 
Correct output: 3                   | Program output: 3                  
Correct output: 68                  | Program output: 91                 
Correct output: 17                  | Program output: 45                 
Correct output: 30                  | Program output: 30                 
Correct output: 2                   | Program output: 66                 
Correct output: 29                  | Program output: 61                 
Correct output: -94                 | Program output: -85                
Correct output: -93                 | Program output: -93                
Correct output: -2                  | Program output: 19                 
Correct output: -69                 | Program output: -69                
Correct output: -80                 | Program output: -7                 
Correct output: -81                 | Program output: -12                
Correct output: -52                 | Program output: -45                
Correct output: -71                 | Program output: -42                
Correct output: -84                 | Program output: -21                
Correct output: -15                 | Program output: 34                 
Correct output: -84                 | Program output: 100                
Correct output: -92                 | Program output: -92                
Correct output: -82                 | Program output: -32                
Correct output: -87                 | Program output: -54                
Correct output: -97                 | Program output: -83                
Correct output: 3                   | Program output: 92                 
Correct output: -49                 | Program output: -49                
Correct output: -51                 | Program output: -51                
Correct output: -32                 | Program output: 0                  
Correct output: -71                 | Program output: -70                
Correct output: -85                 | Program output: -39                
Correct output: -11                 | Program output: 21                 
Correct output: -86                 | Program output: 15                 
Correct output: -96                 | Program output: -96                
Correct output: -69                 | Program output: -52                
Correct output: -56                 | Program output: -15                
Correct output: -72                 | Program output: 18                 
Correct output: -73                 | Program output: -40                
Correct output: -64                 | Program output: -5                 
Correct output: -98                 | Program output: -12                
Correct output: -68                 | Program output: -68                
Correct output: -61                 | Program output: -61                
Correct output: -81                 | Program output: -81                
Correct output: -83                 | Program output: -83                
Correct output: -72                 | Program output: -72                
Correct output: -18                 | Program output: 56                 
Correct output: -81                 | Program output: 83                 
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: -70                
Correct output: -83                 | Program output: -83                
Correct output: -84                 | Program output: -3                 
Correct output: -52                 | Program output: 93                 
Correct output: -96                 | Program output: -45                
Correct output: -91                 | Program output: -91                
Correct output: -11                 | Program output: -11                
Correct output: -43                 | Program output: -43                
Correct output: -60                 | Program output: -60                
Correct output: -27                 | Program output: -27                
Correct output: -71                 | Program output: -47                
Correct output: -15                 | Program output: -15                
Correct output: -4                  | Program output: -2                 
Correct output: -92                 | Program output: -37                
Correct output: -19                 | Program output: -14                
Correct output: -100                | Program output: -98                
Correct output: -90                 | Program output: -76                
Correct output: 13                  | Program output: 13                 
Correct output: -98                 | Program output: 93                 
Correct output: -90                 | Program output: -90                
Correct output: -50                 | Program output: -50                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_if} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in2} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_or})
Lexicase best program: (boolean_pop in1 in2 exec_do*times (print_integer) exec_yank exec_if (integer_dup) (boolean_frominteger boolean_rot) exec_eq integer_eq exec_rot (exec_k_when_autoconstructing (integer_dec exec_k_when_autoconstructing (exec_empty) (boolean_or integer_sub) exec_flush integer_sub integer_swap boolean_dup integer_rot) (boolean_and exec_when (exec_stackdepth) boolean_flush exec_k_when_autoconstructing (in2) (integer_flush boolean_flush boolean_stackdepth boolean_or))) () ())
Lexicase best errors: [0 0 1 1 1 0 1 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 48
Percent parens: 0.292
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_if} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in2} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_or})
Zero cases best program: (boolean_pop in1 in2 exec_do*times (print_integer) exec_yank exec_if (integer_dup) (boolean_frominteger boolean_rot) exec_eq integer_eq exec_rot (exec_k_when_autoconstructing (integer_dec exec_k_when_autoconstructing (exec_empty) (boolean_or integer_sub) exec_flush integer_sub integer_swap boolean_dup integer_rot) (boolean_and exec_when (exec_stackdepth) boolean_flush exec_k_when_autoconstructing (in2) (integer_flush boolean_flush boolean_stackdepth boolean_or))) () ())
Zero cases best errors: [0 0 1 1 1 0 1 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 48
Percent parens: 0.292
--- Lexicase Population Statistics ---
Count of elite individuals by case: (700 204 346 3 347 146 347 703 206 147)
Population mean number of elite cases: 3.15
Count of perfect (error zero) individuals by case: (700 204 346 3 347 146 347 703 206 147)
Population mean number of perfect (error zero) cases: 3.15
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_if} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in2} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_or})
Best program: (boolean_pop in1 in2 exec_do*times (print_integer) exec_yank exec_if (integer_dup) (boolean_frominteger boolean_rot) exec_eq integer_eq exec_rot (exec_k_when_autoconstructing (integer_dec exec_k_when_autoconstructing (exec_empty) (boolean_or integer_sub) exec_flush integer_sub integer_swap boolean_dup integer_rot) (boolean_and exec_when (exec_stackdepth) boolean_flush exec_k_when_autoconstructing (in2) (integer_flush boolean_flush boolean_stackdepth boolean_or))) () ())
Errors: [0 0 1 1 1 0 1 0 0 0]
Total: 4
Mean: 0.4
Genome size: 34
Size: 48
Percent parens: 0.292
--- Population Statistics ---
Average total errors in population: 6.851
Median total errors in population: 6
Error averages by case: (0.3 0.796 0.654 0.997 0.653 0.854 0.653 0.297 0.794 0.853)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 41.134
Average program size in population (points): 55.988
Average percent parens in population: 0.250
Minimum age in population: 4.0
Maximum age in population: 4.0
Average age in population: 4.0
Median age in population: 4.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 5
Genome diversity (% unique genomes):	 0.972
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.972
Total error diversity:				 0.007
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.115
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 2440156
--- Timings ---
Current time: 1559594062760 milliseconds
Total Time:          10.9 seconds
Initialization:       0.1 seconds,  0.9%
Reproduction:         5.5 seconds, 50.5%
Fitness Testing:      4.3 seconds, 39.7%
Report:               1.0 seconds,  8.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 543
Test mean error for best: 0.54300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -38                 | Program output: 29                 
Correct output: -70                 | Program output: -70                
Correct output: -67                 | Program output: -67                
Correct output: -72                 | Program output: -72                
Correct output: -26                 | Program output: -26                
Correct output: -42                 | Program output: -42                
Correct output: -9                  | Program output: -9                 
Correct output: 15                  | Program output: 81                 
Correct output: -54                 | Program output: -54                
Correct output: -49                 | Program output: -49                
Correct output: 45                  | Program output: 45                 
Correct output: 83                  | Program output: 83                 
Correct output: -82                 | Program output: -82                
Correct output: 84                  | Program output: 84                 
Correct output: -68                 | Program output: -68                
Correct output: 33                  | Program output: 59                 
Correct output: 12                  | Program output: 92                 
Correct output: 7                   | Program output: 42                 
Correct output: 8                   | Program output: 97                 
Correct output: 3                   | Program output: 99                 
Correct output: 9                   | Program output: 26                 
Correct output: 74                  | Program output: 97                 
Correct output: 22                  | Program output: 22                 
Correct output: 8                   | Program output: 100                
Correct output: 18                  | Program output: 18                 
Correct output: 12                  | Program output: 12                 
Correct output: 28                  | Program output: 56                 
Correct output: 11                  | Program output: 11                 
Correct output: 9                   | Program output: 55                 
Correct output: 6                   | Program output: 76                 
Correct output: 3                   | Program output: 3                  
Correct output: 68                  | Program output: 91                 
Correct output: 17                  | Program output: 45                 
Correct output: 30                  | Program output: 30                 
Correct output: 2                   | Program output: 66                 
Correct output: 29                  | Program output: 61                 
Correct output: -94                 | Program output: -85                
Correct output: -93                 | Program output: -93                
Correct output: -2                  | Program output: 19                 
Correct output: -69                 | Program output: -69                
Correct output: -80                 | Program output: -7                 
Correct output: -81                 | Program output: -12                
Correct output: -52                 | Program output: -45                
Correct output: -71                 | Program output: -42                
Correct output: -84                 | Program output: -21                
Correct output: -15                 | Program output: 34                 
Correct output: -84                 | Program output: 100                
Correct output: -92                 | Program output: -92                
Correct output: -82                 | Program output: -32                
Correct output: -87                 | Program output: -54                
Correct output: -97                 | Program output: -83                
Correct output: 3                   | Program output: 92                 
Correct output: -49                 | Program output: -49                
Correct output: -51                 | Program output: -51                
Correct output: -32                 | Program output: 0                  
Correct output: -71                 | Program output: -70                
Correct output: -85                 | Program output: -39                
Correct output: -11                 | Program output: 21                 
Correct output: -86                 | Program output: 15                 
Correct output: -96                 | Program output: -96                
Correct output: -69                 | Program output: -52                
Correct output: -56                 | Program output: -15                
Correct output: -72                 | Program output: 18                 
Correct output: -73                 | Program output: -40                
Correct output: -64                 | Program output: -5                 
Correct output: -98                 | Program output: -12                
Correct output: -68                 | Program output: -68                
Correct output: -61                 | Program output: -61                
Correct output: -81                 | Program output: -81                
Correct output: -83                 | Program output: -83                
Correct output: -72                 | Program output: -72                
Correct output: -18                 | Program output: 56                 
Correct output: -81                 | Program output: 83                 
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: -70                
Correct output: -83                 | Program output: -83                
Correct output: -84                 | Program output: -3                 
Correct output: -52                 | Program output: 93                 
Correct output: -96                 | Program output: -45                
Correct output: -91                 | Program output: -91                
Correct output: -11                 | Program output: -11                
Correct output: -43                 | Program output: -43                
Correct output: -60                 | Program output: -60                
Correct output: -27                 | Program output: -27                
Correct output: -71                 | Program output: -47                
Correct output: -15                 | Program output: -15                
Correct output: -4                  | Program output: -2                 
Correct output: -92                 | Program output: -37                
Correct output: -19                 | Program output: -14                
Correct output: -100                | Program output: -98                
Correct output: -90                 | Program output: -76                
Correct output: 13                  | Program output: 13                 
Correct output: -98                 | Program output: 93                 
Correct output: -90                 | Program output: -90                
Correct output: -50                 | Program output: -50                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_if} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in2} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_or})
Lexicase best program: (boolean_pop in1 in2 exec_do*times (print_integer) exec_yank exec_if (integer_lt boolean_frominteger boolean_rot) (exec_eq integer_eq) exec_rot (exec_k_when_autoconstructing (exec_k_when_autoconstructing (exec_empty) (boolean_or boolean_or integer_sub) exec_flush integer_sub integer_swap boolean_dup integer_rot) (boolean_and exec_stackdepth) integer_dup_times) (exec_k_when_autoconstructing (in2) (integer_flush boolean_flush integer_div boolean_stackdepth boolean_or)) ())
Lexicase best errors: [0 0 1 0 0 1 0 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 47
Percent parens: 0.277
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_if} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in2} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_or})
Zero cases best program: (boolean_pop in1 in2 exec_do*times (print_integer) exec_yank exec_if (integer_lt boolean_frominteger boolean_rot) (exec_eq integer_eq) exec_rot (exec_k_when_autoconstructing (exec_k_when_autoconstructing (exec_empty) (boolean_or boolean_or integer_sub) exec_flush integer_sub integer_swap boolean_dup integer_rot) (boolean_and exec_stackdepth) integer_dup_times) (exec_k_when_autoconstructing (in2) (integer_flush boolean_flush integer_div boolean_stackdepth boolean_or)) ())
Zero cases best errors: [0 0 1 0 0 1 0 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 47
Percent parens: 0.277
--- Lexicase Population Statistics ---
Count of elite individuals by case: (300 335 300 335 291 80 483 483 79 718)
Population mean number of elite cases: 3.40
Count of perfect (error zero) individuals by case: (300 335 300 335 291 80 483 483 79 718)
Population mean number of perfect (error zero) cases: 3.40
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_if} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_empty} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 1, :instruction in2} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_or})
Best program: (boolean_pop in1 in2 exec_do*times (print_integer) exec_yank integer_dup_times exec_if (integer_dup) (boolean_frominteger boolean_rot) exec_eq integer_eq exec_rot (integer_dec exec_k_when_autoconstructing (exec_shove (exec_empty) integer_sub) (exec_flush integer_sub integer_swap boolean_dup integer_rot) boolean_and exec_when (exec_stackdepth) boolean_flush exec_k_when_autoconstructing (exec_when (in2) integer_flush boolean_flush boolean_stackdepth boolean_or) ()) () ())
Errors: [0 0 1 0 0 1 0 0 1 0]
Total: 3
Mean: 0.3
Genome size: 35
Size: 49
Percent parens: 0.286
--- Population Statistics ---
Average total errors in population: 6.596
Median total errors in population: 8
Error averages by case: (0.7 0.665 0.7 0.665 0.709 0.92 0.517 0.517 0.921 0.282)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 41.025
Average program size in population (points): 57.911
Average percent parens in population: 0.279
Minimum age in population: 5.0
Maximum age in population: 5.0
Average age in population: 5.0
Median age in population: 5.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 3
Genome diversity (% unique genomes):	 0.985
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.985
Total error diversity:				 0.007
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.09
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 2992035
--- Timings ---
Current time: 1559594064826 milliseconds
Total Time:          13.0 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:         6.7 seconds, 51.6%
Fitness Testing:      4.8 seconds, 37.1%
Report:               1.4 seconds, 10.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 665
Test mean error for best: 0.66500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -38                 | Program output: -38                
Correct output: -70                 | Program output: 46                 
Correct output: -67                 | Program output: -67                
Correct output: -72                 | Program output: 88                 
Correct output: -26                 | Program output: -26                
Correct output: -42                 | Program output: 76                 
Correct output: -9                  | Program output: -9                 
Correct output: 15                  | Program output: 15                 
Correct output: -54                 | Program output: -54                
Correct output: -49                 | Program output: -49                
Correct output: 45                  | Program output: 45                 
Correct output: 83                  | Program output: 83                 
Correct output: -82                 | Program output: -82                
Correct output: 84                  | Program output: 84                 
Correct output: -68                 | Program output: -68                
Correct output: 33                  | Program output: 40                 
Correct output: 12                  | Program output: 83                 
Correct output: 7                   | Program output: 41                 
Correct output: 8                   | Program output: 10                 
Correct output: 3                   | Program output: 88                 
Correct output: 9                   | Program output: 9                  
Correct output: 74                  | Program output: 96                 
Correct output: 22                  | Program output: 38                 
Correct output: 8                   | Program output: 8                  
Correct output: 18                  | Program output: 19                 
Correct output: 12                  | Program output: 40                 
Correct output: 28                  | Program output: 97                 
Correct output: 11                  | Program output: 81                 
Correct output: 9                   | Program output: 78                 
Correct output: 6                   | Program output: 16                 
Correct output: 3                   | Program output: 51                 
Correct output: 68                  | Program output: 81                 
Correct output: 17                  | Program output: 57                 
Correct output: 30                  | Program output: 63                 
Correct output: 2                   | Program output: 2                  
Correct output: 29                  | Program output: 29                 
Correct output: -94                 | Program output: 90                 
Correct output: -93                 | Program output: 95                 
Correct output: -2                  | Program output: 37                 
Correct output: -69                 | Program output: 19                 
Correct output: -80                 | Program output: 3                  
Correct output: -81                 | Program output: 65                 
Correct output: -52                 | Program output: 62                 
Correct output: -71                 | Program output: -6                 
Correct output: -84                 | Program output: -56                
Correct output: -15                 | Program output: -15                
Correct output: -84                 | Program output: -84                
Correct output: -92                 | Program output: 1                  
Correct output: -82                 | Program output: -82                
Correct output: -87                 | Program output: 25                 
Correct output: -97                 | Program output: 81                 
Correct output: 3                   | Program output: 42                 
Correct output: -49                 | Program output: -3                 
Correct output: -51                 | Program output: 78                 
Correct output: -32                 | Program output: -32                
Correct output: -71                 | Program output: -28                
Correct output: -85                 | Program output: -72                
Correct output: -11                 | Program output: -11                
Correct output: -86                 | Program output: -86                
Correct output: -96                 | Program output: 97                 
Correct output: -69                 | Program output: 51                 
Correct output: -56                 | Program output: -56                
Correct output: -72                 | Program output: 42                 
Correct output: -73                 | Program output: -2                 
Correct output: -64                 | Program output: -64                
Correct output: -98                 | Program output: 4                  
Correct output: -68                 | Program output: 45                 
Correct output: -61                 | Program output: -21                
Correct output: -81                 | Program output: 87                 
Correct output: -83                 | Program output: 65                 
Correct output: -72                 | Program output: 56                 
Correct output: -18                 | Program output: -18                
Correct output: -81                 | Program output: 40                 
Correct output: -77                 | Program output: 72                 
Correct output: -81                 | Program output: -81                
Correct output: -83                 | Program output: 84                 
Correct output: -84                 | Program output: 62                 
Correct output: -52                 | Program output: -52                
Correct output: -96                 | Program output: -32                
Correct output: -91                 | Program output: 64                 
Correct output: -11                 | Program output: 39                 
Correct output: -43                 | Program output: -24                
Correct output: -60                 | Program output: 77                 
Correct output: -27                 | Program output: 72                 
Correct output: -71                 | Program output: 99                 
Correct output: -15                 | Program output: 70                 
Correct output: -4                  | Program output: 38                 
Correct output: -92                 | Program output: 2                  
Correct output: -19                 | Program output: 48                 
Correct output: -100                | Program output: -93                
Correct output: -90                 | Program output: -90                
Correct output: 13                  | Program output: 85                 
Correct output: -98                 | Program output: -98                
Correct output: -90                 | Program output: -7                 
Correct output: -50                 | Program output: -16                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_eq})
Lexicase best program: (boolean_yank in3 boolean_dup print_integer integer_pop exec_s_when_autoconstructing (integer_pop exec_dup_items) (exec_eq) ())
Lexicase best errors: [0 0 0 0 1 1 1 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 13
Percent parens: 0.308
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_eq})
Zero cases best program: (boolean_yank in3 boolean_dup print_integer integer_pop exec_s_when_autoconstructing (integer_pop exec_dup_items) (exec_eq) ())
Zero cases best errors: [0 0 0 0 1 1 1 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 13
Percent parens: 0.308
--- Lexicase Population Statistics ---
Count of elite individuals by case: (778 779 192 189 66 79 440 189 190 189)
Population mean number of elite cases: 3.09
Count of perfect (error zero) individuals by case: (778 779 192 189 66 79 440 189 190 189)
Population mean number of perfect (error zero) cases: 3.09
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_do*range} {:close 1, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_max} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_gt})
Best program: (integer_empty exec_noop integer_sub exec_do*range () integer_min exec_s_when_autoconstructing (integer_inc integer_dup_items integer_yank integer_max) (integer_eq in3 integer_dup_times) (print_integer exec_pop (exec_k_when_autoconstructing () (exec_noop integer_flush boolean_dup_times boolean_invert_first_then_and exec_do*range (print_integer integer_yankdup integer_lte integer_gt)))))
Errors: [0 0 0 0 1 1 1 0 0 0]
Total: 3
Mean: 0.3
Genome size: 25
Size: 34
Percent parens: 0.265
--- Population Statistics ---
Average total errors in population: 6.909
Median total errors in population: 7
Error averages by case: (0.222 0.221 0.808 0.811 0.934 0.921 0.56 0.811 0.81 0.811)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.657
Average program size in population (points): 52.32
Average percent parens in population: 0.281
Minimum age in population: 6.0
Maximum age in population: 6.0
Average age in population: 6.0
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.999
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.999
Total error diversity:				 0.006
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.099
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 3462461
--- Timings ---
Current time: 1559594066595 milliseconds
Total Time:          15.0 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         7.9 seconds, 52.6%
Fitness Testing:      5.2 seconds, 35.1%
Report:               1.7 seconds, 11.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 543
Test mean error for best: 0.54300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -38                 | Program output: 29                 
Correct output: -70                 | Program output: -70                
Correct output: -67                 | Program output: -67                
Correct output: -72                 | Program output: -72                
Correct output: -26                 | Program output: -26                
Correct output: -42                 | Program output: -42                
Correct output: -9                  | Program output: -9                 
Correct output: 15                  | Program output: 81                 
Correct output: -54                 | Program output: -54                
Correct output: -49                 | Program output: -49                
Correct output: 45                  | Program output: 45                 
Correct output: 83                  | Program output: 83                 
Correct output: -82                 | Program output: -82                
Correct output: 84                  | Program output: 84                 
Correct output: -68                 | Program output: -68                
Correct output: 33                  | Program output: 59                 
Correct output: 12                  | Program output: 92                 
Correct output: 7                   | Program output: 42                 
Correct output: 8                   | Program output: 97                 
Correct output: 3                   | Program output: 99                 
Correct output: 9                   | Program output: 26                 
Correct output: 74                  | Program output: 97                 
Correct output: 22                  | Program output: 22                 
Correct output: 8                   | Program output: 100                
Correct output: 18                  | Program output: 18                 
Correct output: 12                  | Program output: 12                 
Correct output: 28                  | Program output: 56                 
Correct output: 11                  | Program output: 11                 
Correct output: 9                   | Program output: 55                 
Correct output: 6                   | Program output: 76                 
Correct output: 3                   | Program output: 3                  
Correct output: 68                  | Program output: 91                 
Correct output: 17                  | Program output: 45                 
Correct output: 30                  | Program output: 30                 
Correct output: 2                   | Program output: 66                 
Correct output: 29                  | Program output: 61                 
Correct output: -94                 | Program output: -85                
Correct output: -93                 | Program output: -93                
Correct output: -2                  | Program output: 19                 
Correct output: -69                 | Program output: -69                
Correct output: -80                 | Program output: -7                 
Correct output: -81                 | Program output: -12                
Correct output: -52                 | Program output: -45                
Correct output: -71                 | Program output: -42                
Correct output: -84                 | Program output: -21                
Correct output: -15                 | Program output: 34                 
Correct output: -84                 | Program output: 100                
Correct output: -92                 | Program output: -92                
Correct output: -82                 | Program output: -32                
Correct output: -87                 | Program output: -54                
Correct output: -97                 | Program output: -83                
Correct output: 3                   | Program output: 92                 
Correct output: -49                 | Program output: -49                
Correct output: -51                 | Program output: -51                
Correct output: -32                 | Program output: 0                  
Correct output: -71                 | Program output: -70                
Correct output: -85                 | Program output: -39                
Correct output: -11                 | Program output: 21                 
Correct output: -86                 | Program output: 15                 
Correct output: -96                 | Program output: -96                
Correct output: -69                 | Program output: -52                
Correct output: -56                 | Program output: -15                
Correct output: -72                 | Program output: 18                 
Correct output: -73                 | Program output: -40                
Correct output: -64                 | Program output: -5                 
Correct output: -98                 | Program output: -12                
Correct output: -68                 | Program output: -68                
Correct output: -61                 | Program output: -61                
Correct output: -81                 | Program output: -81                
Correct output: -83                 | Program output: -83                
Correct output: -72                 | Program output: -72                
Correct output: -18                 | Program output: 56                 
Correct output: -81                 | Program output: 83                 
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: -70                
Correct output: -83                 | Program output: -83                
Correct output: -84                 | Program output: -3                 
Correct output: -52                 | Program output: 93                 
Correct output: -96                 | Program output: -45                
Correct output: -91                 | Program output: -91                
Correct output: -11                 | Program output: -11                
Correct output: -43                 | Program output: -43                
Correct output: -60                 | Program output: -60                
Correct output: -27                 | Program output: -27                
Correct output: -71                 | Program output: -47                
Correct output: -15                 | Program output: -15                
Correct output: -4                  | Program output: -2                 
Correct output: -92                 | Program output: -37                
Correct output: -19                 | Program output: -14                
Correct output: -100                | Program output: -98                
Correct output: -90                 | Program output: -76                
Correct output: 13                  | Program output: 13                 
Correct output: -98                 | Program output: 93                 
Correct output: -90                 | Program output: -90                
Correct output: -50                 | Program output: -50                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_flush})
Lexicase best program: (boolean_pop in1 in2 exec_do*times (print_integer) exec_yank integer_dup_items exec_if (boolean_frominteger integer_dup_times boolean_rot) (exec_eq exec_k_when_autoconstructing (integer_dec exec_empty) (integer_sub boolean_or integer_sub) integer_swap boolean_dup boolean_dup integer_rot) exec_noop boolean_and exec_stackdepth in4 integer_flush boolean_flush)
Lexicase best errors: [1 1 0 1 1 0 0 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 34
Percent parens: 0.176
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_flush})
Zero cases best program: (boolean_pop in1 in2 exec_do*times (print_integer) exec_yank integer_dup_items exec_if (boolean_frominteger integer_dup_times boolean_rot) (exec_eq exec_k_when_autoconstructing (integer_dec exec_empty) (integer_sub boolean_or integer_sub) integer_swap boolean_dup boolean_dup integer_rot) exec_noop boolean_and exec_stackdepth in4 integer_flush boolean_flush)
Zero cases best errors: [1 1 0 1 1 0 0 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 34
Percent parens: 0.176
--- Lexicase Population Statistics ---
Count of elite individuals by case: (112 102 168 504 112 528 92 94 168 112)
Population mean number of elite cases: 1.99
Count of perfect (error zero) individuals by case: (112 102 168 504 112 528 92 94 168 112)
Population mean number of perfect (error zero) cases: 1.99
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_flush} {:close 1, :instruction in2} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 1, :instruction in3})
Best program: (boolean_pop in1 in2 exec_do*times (print_integer) in2 integer_lte integer_swap boolean_dup boolean_rot integer_shove exec_eq integer_eq exec_rot (integer_dec exec_k_when_autoconstructing (exec_y_when_autoconstructing (boolean_dup_times exec_empty) boolean_or integer_sub) (integer_sub integer_swap boolean_dup boolean_yankdup integer_rot) boolean_and exec_when (boolean_flush in2) integer_flush exec_if () (boolean_flush in3)) () ())
Errors: [1 1 0 1 1 0 0 0 0 1]
Total: 5
Mean: 0.5
Genome size: 34
Size: 45
Percent parens: 0.244
--- Population Statistics ---
Average total errors in population: 8.008
Median total errors in population: 8
Error averages by case: (0.888 0.898 0.832 0.496 0.888 0.472 0.908 0.906 0.832 0.888)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.29
Average program size in population (points): 50.6
Average percent parens in population: 0.269
Minimum age in population: 7.0
Maximum age in population: 7.0
Average age in population: 7.0
Median age in population: 7.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 3
Genome diversity (% unique genomes):	 0.985
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.985
Total error diversity:				 0.006
Error (vector) diversity:			 0.018
Behavioral diversity:				 0.104
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 3802721
--- Timings ---
Current time: 1559594068616 milliseconds
Total Time:          16.7 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         9.1 seconds, 54.5%
Fitness Testing:      5.6 seconds, 33.4%
Report:               1.9 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 435
Test mean error for best: 0.43500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -38                 | Program output: -38                
Correct output: -70                 | Program output: -70                
Correct output: -67                 | Program output: -67                
Correct output: -72                 | Program output: -72                
Correct output: -26                 | Program output: -26                
Correct output: -42                 | Program output: -42                
Correct output: -9                  | Program output: -9                 
Correct output: 15                  | Program output: 15                 
Correct output: -54                 | Program output: -54                
Correct output: -49                 | Program output: -49                
Correct output: 45                  | Program output: 45                 
Correct output: 83                  | Program output: 83                 
Correct output: -82                 | Program output: -82                
Correct output: 84                  | Program output: 84                 
Correct output: -68                 | Program output: -68                
Correct output: 33                  | Program output: 40                 
Correct output: 12                  | Program output: 23                 
Correct output: 7                   | Program output: 31                 
Correct output: 8                   | Program output: 10                 
Correct output: 3                   | Program output: 72                 
Correct output: 9                   | Program output: 9                  
Correct output: 74                  | Program output: 77                 
Correct output: 22                  | Program output: 38                 
Correct output: 8                   | Program output: 8                  
Correct output: 18                  | Program output: 19                 
Correct output: 12                  | Program output: 12                 
Correct output: 28                  | Program output: 28                 
Correct output: 11                  | Program output: 81                 
Correct output: 9                   | Program output: 9                  
Correct output: 6                   | Program output: 16                 
Correct output: 3                   | Program output: 20                 
Correct output: 68                  | Program output: 68                 
Correct output: 17                  | Program output: 56                 
Correct output: 30                  | Program output: 53                 
Correct output: 2                   | Program output: 2                  
Correct output: 29                  | Program output: 29                 
Correct output: -94                 | Program output: -85                
Correct output: -93                 | Program output: -93                
Correct output: -2                  | Program output: 37                 
Correct output: -69                 | Program output: -69                
Correct output: -80                 | Program output: -7                 
Correct output: -81                 | Program output: -12                
Correct output: -52                 | Program output: -45                
Correct output: -71                 | Program output: -42                
Correct output: -84                 | Program output: -21                
Correct output: -15                 | Program output: -15                
Correct output: -84                 | Program output: -84                
Correct output: -92                 | Program output: 1                  
Correct output: -82                 | Program output: -32                
Correct output: -87                 | Program output: -54                
Correct output: -97                 | Program output: -83                
Correct output: 3                   | Program output: 3                  
Correct output: -49                 | Program output: -49                
Correct output: -51                 | Program output: -51                
Correct output: -32                 | Program output: 0                  
Correct output: -71                 | Program output: -70                
Correct output: -85                 | Program output: -39                
Correct output: -11                 | Program output: -11                
Correct output: -86                 | Program output: 15                 
Correct output: -96                 | Program output: -96                
Correct output: -69                 | Program output: -52                
Correct output: -56                 | Program output: -15                
Correct output: -72                 | Program output: 42                 
Correct output: -73                 | Program output: -40                
Correct output: -64                 | Program output: -5                 
Correct output: -98                 | Program output: -12                
Correct output: -68                 | Program output: -68                
Correct output: -61                 | Program output: -61                
Correct output: -81                 | Program output: -81                
Correct output: -83                 | Program output: -83                
Correct output: -72                 | Program output: -72                
Correct output: -18                 | Program output: -18                
Correct output: -81                 | Program output: 40                 
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: -70                
Correct output: -83                 | Program output: -83                
Correct output: -84                 | Program output: -3                 
Correct output: -52                 | Program output: -52                
Correct output: -96                 | Program output: -45                
Correct output: -91                 | Program output: -91                
Correct output: -11                 | Program output: -11                
Correct output: -43                 | Program output: -43                
Correct output: -60                 | Program output: -60                
Correct output: -27                 | Program output: -27                
Correct output: -71                 | Program output: -47                
Correct output: -15                 | Program output: -15                
Correct output: -4                  | Program output: -2                 
Correct output: -92                 | Program output: -37                
Correct output: -19                 | Program output: -14                
Correct output: -100                | Program output: -98                
Correct output: -90                 | Program output: -76                
Correct output: 13                  | Program output: 55                 
Correct output: -98                 | Program output: -98                
Correct output: -90                 | Program output: -90                
Correct output: -50                 | Program output: -50                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_rot} {:close 1, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_if} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_eq} {:close 1, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in2} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_or} {:close 1, :instruction in3})
Lexicase best program: (boolean_pop in3 in1 in2 integer_dup_items exec_s (boolean_rot) (print_integer) (exec_yank exec_if (integer_rot integer_dup) (integer_div boolean_xor boolean_rot) exec_eq integer_dec integer_lt exec_k_when_autoconstructing (exec_empty) (integer_eq in2) integer_min integer_rot) exec_when (exec_stackdepth) boolean_flush exec_k_when_autoconstructing (in2) (integer_flush boolean_flush boolean_stackdepth boolean_or) in3)
Lexicase best errors: [1 0 0 0 0 0 0 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 45
Percent parens: 0.244
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_rot} {:close 1, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_if} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_eq} {:close 1, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in2} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_or} {:close 1, :instruction in3})
Zero cases best program: (boolean_pop in3 in1 in2 integer_dup_items exec_s (boolean_rot) (print_integer) (exec_yank exec_if (integer_rot integer_dup) (integer_div boolean_xor boolean_rot) exec_eq integer_dec integer_lt exec_k_when_autoconstructing (exec_empty) (integer_eq in2) integer_min integer_rot) exec_when (exec_stackdepth) boolean_flush exec_k_when_autoconstructing (in2) (integer_flush boolean_flush boolean_stackdepth boolean_or) in3)
Zero cases best errors: [1 0 0 0 0 0 0 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 45
Percent parens: 0.244
--- Lexicase Population Statistics ---
Count of elite individuals by case: (212 416 263 29 538 60 263 416 211 263)
Population mean number of elite cases: 2.67
Count of perfect (error zero) individuals by case: (212 416 263 29 538 60 263 416 211 263)
Population mean number of perfect (error zero) cases: 2.67
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_rot} {:close 1, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_if} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_eq} {:close 1, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in2} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_or} {:close 1, :instruction in3})
Best program: (boolean_pop in3 in1 in2 integer_dup_items exec_s (boolean_rot) (print_integer) (exec_yank exec_if (integer_rot integer_dup) (integer_div boolean_xor boolean_rot) exec_eq integer_dec integer_lt exec_k_when_autoconstructing (exec_empty) (integer_eq in2) integer_min integer_rot) exec_when (exec_stackdepth) boolean_flush exec_k_when_autoconstructing (in2) (integer_flush boolean_flush boolean_stackdepth boolean_or) in3)
Errors: [1 0 0 0 0 0 0 0 1 0]
Total: 2
Mean: 0.2
Genome size: 34
Size: 45
Percent parens: 0.244
--- Population Statistics ---
Average total errors in population: 7.329
Median total errors in population: 8
Error averages by case: (0.788 0.584 0.737 0.971 0.462 0.94 0.737 0.584 0.789 0.737)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.531
Average program size in population (points): 49.337
Average percent parens in population: 0.259
Minimum age in population: 8.0
Maximum age in population: 8.0
Average age in population: 8.0
Median age in population: 8.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 5
Genome diversity (% unique genomes):	 0.987
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.987
Total error diversity:				 0.008
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.134
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 4323564
--- Timings ---
Current time: 1559594070520 milliseconds
Total Time:          18.7 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        10.2 seconds, 54.6%
Fitness Testing:      6.1 seconds, 32.4%
Report:               2.3 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 642
Test mean error for best: 0.64200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -38                 | Program output: 29                 
Correct output: -70                 | Program output: 46                 
Correct output: -67                 | Program output: -67                
Correct output: -72                 | Program output: 88                 
Correct output: -26                 | Program output: -26                
Correct output: -42                 | Program output: 76                 
Correct output: -9                  | Program output: -9                 
Correct output: 15                  | Program output: 15                 
Correct output: -54                 | Program output: -54                
Correct output: -49                 | Program output: -49                
Correct output: 45                  | Program output: 45                 
Correct output: 83                  | Program output: 83                 
Correct output: -82                 | Program output: -82                
Correct output: 84                  | Program output: 84                 
Correct output: -68                 | Program output: -68                
Correct output: 33                  | Program output: 33                 
Correct output: 12                  | Program output: 12                 
Correct output: 7                   | Program output: 7                  
Correct output: 8                   | Program output: 8                  
Correct output: 3                   | Program output: 3                  
Correct output: 9                   | Program output: 78                 
Correct output: 74                  | Program output: 74                 
Correct output: 22                  | Program output: 46                 
Correct output: 8                   | Program output: 26                 
Correct output: 18                  | Program output: 80                 
Correct output: 12                  | Program output: 40                 
Correct output: 28                  | Program output: 48                 
Correct output: 11                  | Program output: 81                 
Correct output: 9                   | Program output: 47                 
Correct output: 6                   | Program output: 6                  
Correct output: 3                   | Program output: 51                 
Correct output: 68                  | Program output: 77                 
Correct output: 17                  | Program output: 17                 
Correct output: 30                  | Program output: 94                 
Correct output: 2                   | Program output: 20                 
Correct output: 29                  | Program output: 31                 
Correct output: -94                 | Program output: -94                
Correct output: -93                 | Program output: 95                 
Correct output: -2                  | Program output: -2                 
Correct output: -69                 | Program output: 19                 
Correct output: -80                 | Program output: 3                  
Correct output: -81                 | Program output: 65                 
Correct output: -52                 | Program output: 62                 
Correct output: -71                 | Program output: -6                 
Correct output: -84                 | Program output: -56                
Correct output: -15                 | Program output: 47                 
Correct output: -84                 | Program output: 96                 
Correct output: -92                 | Program output: 1                  
Correct output: -82                 | Program output: 31                 
Correct output: -87                 | Program output: 25                 
Correct output: -97                 | Program output: 81                 
Correct output: 3                   | Program output: 85                 
Correct output: -49                 | Program output: -3                 
Correct output: -51                 | Program output: 78                 
Correct output: -32                 | Program output: -32                
Correct output: -71                 | Program output: -71                
Correct output: -85                 | Program output: -85                
Correct output: -11                 | Program output: -3                 
Correct output: -86                 | Program output:                    
Correct output: -96                 | Program output: 97                 
Correct output: -69                 | Program output: 51                 
Correct output: -56                 | Program output: -56                
Correct output: -72                 | Program output: -72                
Correct output: -73                 | Program output: -73                
Correct output: -64                 | Program output: -64                
Correct output: -98                 | Program output: 4                  
Correct output: -68                 | Program output: 45                 
Correct output: -61                 | Program output: -21                
Correct output: -81                 | Program output: 87                 
Correct output: -83                 | Program output: 58                 
Correct output: -72                 | Program output: -9                 
Correct output: -18                 | Program output: 92                 
Correct output: -81                 | Program output: -81                
Correct output: -77                 | Program output: 72                 
Correct output: -81                 | Program output: -81                
Correct output: -83                 | Program output: 84                 
Correct output: -84                 | Program output: -84                
Correct output: -52                 | Program output: 89                 
Correct output: -96                 | Program output: -32                
Correct output: -91                 | Program output: 64                 
Correct output: -11                 | Program output: 39                 
Correct output: -43                 | Program output: -24                
Correct output: -60                 | Program output: 77                 
Correct output: -27                 | Program output: 72                 
Correct output: -71                 | Program output: 99                 
Correct output: -15                 | Program output: 70                 
Correct output: -4                  | Program output: 38                 
Correct output: -92                 | Program output: 2                  
Correct output: -19                 | Program output: 48                 
Correct output: -100                | Program output: -93                
Correct output: -90                 | Program output: -90                
Correct output: 13                  | Program output: 85                 
Correct output: -98                 | Program output: 42                 
Correct output: -90                 | Program output: -7                 
Correct output: -50                 | Program output: -16                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_rot} {:close 1, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_if} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_empty} {:close 1, :instruction in2} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in2} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_or} {:close 1, :instruction in3})
Lexicase best program: (boolean_pop in3 in4 in1 in2 integer_dup_items exec_s (boolean_rot) (print_integer) (exec_yank exec_if (integer_rot integer_div boolean_xor boolean_rot) (exec_eq integer_dec integer_lt exec_k_when_autoconstructing (exec_empty) (in2) integer_rot) exec_when (exec_stackdepth) boolean_flush exec_k_when_autoconstructing (in2) (integer_flush boolean_stackdepth integer_dup_items boolean_or) in3))
Lexicase best errors: [0 0 0 1 0 0 0 0 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 43
Percent parens: 0.256
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_rot} {:close 1, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_if} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_empty} {:close 1, :instruction in2} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in2} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_or} {:close 1, :instruction in3})
Zero cases best program: (boolean_pop in3 in4 in1 in2 integer_dup_items exec_s (boolean_rot) (print_integer) (exec_yank exec_if (integer_rot integer_div boolean_xor boolean_rot) (exec_eq integer_dec integer_lt exec_k_when_autoconstructing (exec_empty) (in2) integer_rot) exec_when (exec_stackdepth) boolean_flush exec_k_when_autoconstructing (in2) (integer_flush boolean_stackdepth integer_dup_items boolean_or) in3))
Zero cases best errors: [0 0 0 1 0 0 0 0 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 43
Percent parens: 0.256
--- Lexicase Population Statistics ---
Count of elite individuals by case: (704 197 195 166 108 549 206 160 128 162)
Population mean number of elite cases: 2.58
Count of perfect (error zero) individuals by case: (704 197 195 166 108 549 206 160 128 162)
Population mean number of perfect (error zero) cases: 2.58
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_rot} {:close 1, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_if} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 1, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in2} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_or} {:close 1, :instruction in3})
Best program: (boolean_pop in3 in4 in1 in2 integer_dup_items exec_s (boolean_rot) (print_integer) (exec_yank exec_if (integer_rot integer_dup) (integer_div boolean_xor boolean_rot) exec_eq integer_dec integer_lt exec_k_when_autoconstructing (integer_eq in2) (integer_min integer_rot) exec_when (exec_stackdepth) boolean_flush exec_k_when_autoconstructing (in2) (integer_flush boolean_or) in3))
Errors: [0 0 0 1 0 0 0 0 1 1]
Total: 3
Mean: 0.3
Genome size: 32
Size: 43
Percent parens: 0.256
--- Population Statistics ---
Average total errors in population: 7.425
Median total errors in population: 7
Error averages by case: (0.296 0.803 0.805 0.834 0.892 0.451 0.794 0.84 0.872 0.838)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 34.641
Average program size in population (points): 46.465
Average percent parens in population: 0.249
Minimum age in population: 9.0
Maximum age in population: 9.0
Average age in population: 9.0
Median age in population: 9.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 4
Genome diversity (% unique genomes):	 0.993
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.993
Total error diversity:				 0.008
Error (vector) diversity:			 0.043
Behavioral diversity:				 0.311
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 4818063
--- Timings ---
Current time: 1559594072512 milliseconds
Total Time:          20.7 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        11.3 seconds, 54.8%
Fitness Testing:      6.6 seconds, 31.8%
Report:               2.7 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 543
Test mean error for best: 0.54300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -38                 | Program output: 29                 
Correct output: -70                 | Program output: -70                
Correct output: -67                 | Program output: -67                
Correct output: -72                 | Program output: 88                 
Correct output: -26                 | Program output: -26                
Correct output: -42                 | Program output: -42                
Correct output: -9                  | Program output: -9                 
Correct output: 15                  | Program output: 15                 
Correct output: -54                 | Program output: -54                
Correct output: -49                 | Program output: -49                
Correct output: 45                  | Program output: 45                 
Correct output: 83                  | Program output: 83                 
Correct output: -82                 | Program output: -82                
Correct output: 84                  | Program output: 84                 
Correct output: -68                 | Program output: -68                
Correct output: 33                  | Program output: 33                 
Correct output: 12                  | Program output: 12                 
Correct output: 7                   | Program output: 7                  
Correct output: 8                   | Program output: 8                  
Correct output: 3                   | Program output: 3                  
Correct output: 9                   | Program output: 78                 
Correct output: 74                  | Program output: 74                 
Correct output: 22                  | Program output: 46                 
Correct output: 8                   | Program output: 26                 
Correct output: 18                  | Program output: 80                 
Correct output: 12                  | Program output: 40                 
Correct output: 28                  | Program output: 48                 
Correct output: 11                  | Program output: 81                 
Correct output: 9                   | Program output: 47                 
Correct output: 6                   | Program output: 6                  
Correct output: 3                   | Program output: 3                  
Correct output: 68                  | Program output: 77                 
Correct output: 17                  | Program output: 17                 
Correct output: 30                  | Program output: 94                 
Correct output: 2                   | Program output: 2                  
Correct output: 29                  | Program output: 31                 
Correct output: -94                 | Program output: -85                
Correct output: -93                 | Program output: -93                
Correct output: -2                  | Program output: -2                 
Correct output: -69                 | Program output: -69                
Correct output: -80                 | Program output: -7                 
Correct output: -81                 | Program output: -12                
Correct output: -52                 | Program output: -52                
Correct output: -71                 | Program output: -42                
Correct output: -84                 | Program output: -84                
Correct output: -15                 | Program output: 34                 
Correct output: -84                 | Program output: 100                
Correct output: -92                 | Program output: 1N                 
Correct output: -82                 | Program output: -32                
Correct output: -87                 | Program output: -54                
Correct output: -97                 | Program output: -83                
Correct output: 3                   | Program output: 85                 
Correct output: -49                 | Program output: -49                
Correct output: -51                 | Program output: -51                
Correct output: -32                 | Program output: 28                 
Correct output: -71                 | Program output: -70                
Correct output: -85                 | Program output: -39                
Correct output: -11                 | Program output: 21                 
Correct output: -86                 | Program output: -86                
Correct output: -96                 | Program output: 44                 
Correct output: -69                 | Program output: -52                
Correct output: -56                 | Program output: -15                
Correct output: -72                 | Program output: -72                
Correct output: -73                 | Program output: -40                
Correct output: -64                 | Program output: 89                 
Correct output: -98                 | Program output: -12                
Correct output: -68                 | Program output: 15                 
Correct output: -61                 | Program output: -61                
Correct output: -81                 | Program output: -81                
Correct output: -83                 | Program output: -83                
Correct output: -72                 | Program output: -72                
Correct output: -18                 | Program output: 56                 
Correct output: -81                 | Program output: -81                
Correct output: -77                 | Program output: -50                
Correct output: -81                 | Program output: -70                
Correct output: -83                 | Program output: -83                
Correct output: -84                 | Program output: -3                 
Correct output: -52                 | Program output: 93                 
Correct output: -96                 | Program output: -45                
Correct output: -91                 | Program output: 96                 
Correct output: -11                 | Program output: 48                 
Correct output: -43                 | Program output: -43                
Correct output: -60                 | Program output: 15                 
Correct output: -27                 | Program output: -14                
Correct output: -71                 | Program output: -71                
Correct output: -15                 | Program output: 16                 
Correct output: -4                  | Program output: -2                 
Correct output: -92                 | Program output: -37                
Correct output: -19                 | Program output: -19                
Correct output: -100                | Program output: -98                
Correct output: -90                 | Program output: -36                
Correct output: 13                  | Program output: 39                 
Correct output: -98                 | Program output: 93                 
Correct output: -90                 | Program output: -32                
Correct output: -50                 | Program output: 88                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_rot} {:close 1, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_if} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_empty} {:close 1, :instruction in2} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 1, :instruction integer_yankdup} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_or} {:close 1, :instruction in3})
Lexicase best program: (boolean_pop in3 in4 in1 in2 integer_dup_items exec_s (boolean_rot) (print_integer) (exec_yank exec_if (integer_rot integer_shove) (integer_div boolean_xor boolean_rot) exec_eq integer_dec boolean_xor exec_k_when_autoconstructing (exec_empty) (in2) integer_rot) exec_when (integer_yankdup) exec_stackdepth boolean_flush exec_k_when_autoconstructing (integer_flush boolean_stackdepth integer_dup_items boolean_or) (in3))
Lexicase best errors: [0 1 0 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 44
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_rot} {:close 1, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_if} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_empty} {:close 1, :instruction in2} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 1, :instruction integer_yankdup} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_or} {:close 1, :instruction in3})
Zero cases best program: (boolean_pop in3 in4 in1 in2 integer_dup_items exec_s (boolean_rot) (print_integer) (exec_yank exec_if (integer_rot integer_shove) (integer_div boolean_xor boolean_rot) exec_eq integer_dec boolean_xor exec_k_when_autoconstructing (exec_empty) (in2) integer_rot) exec_when (integer_yankdup) exec_stackdepth boolean_flush exec_k_when_autoconstructing (integer_flush boolean_stackdepth integer_dup_items boolean_or) (in3))
Zero cases best errors: [0 1 0 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 44
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (172 120 142 569 569 296 40 190 187 175)
Population mean number of elite cases: 2.46
Count of perfect (error zero) individuals by case: (172 120 142 569 569 296 40 190 187 175)
Population mean number of perfect (error zero) cases: 2.46
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_rot} {:close 1, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_if} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_empty} {:close 1, :instruction in2} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 1, :instruction integer_yankdup} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_or} {:close 1, :instruction in3})
Best program: (boolean_pop in3 in4 in1 in2 integer_dup_items exec_s (boolean_rot) (print_integer) (exec_yank exec_if (integer_rot integer_shove) (integer_div boolean_xor boolean_rot) exec_eq integer_dec boolean_xor exec_k_when_autoconstructing (exec_empty) (in2) integer_rot) exec_when (integer_yankdup) exec_stackdepth boolean_flush exec_k_when_autoconstructing (integer_flush boolean_stackdepth integer_dup_items boolean_or) (in3))
Errors: [0 1 0 0 0 0 0 1 0 0]
Total: 2
Mean: 0.2
Genome size: 33
Size: 44
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 7.54
Median total errors in population: 7
Error averages by case: (0.828 0.88 0.858 0.431 0.431 0.704 0.96 0.81 0.813 0.825)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 33.008
Average program size in population (points): 43.939
Average percent parens in population: 0.248
Minimum age in population: 10.0
Maximum age in population: 10.0
Average age in population: 10.0
Median age in population: 10.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.999
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.999
Total error diversity:				 0.009
Error (vector) diversity:			 0.052
Behavioral diversity:				 0.345
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 5249946
--- Timings ---
Current time: 1559594074466 milliseconds
Total Time:          22.7 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        12.5 seconds, 54.9%
Fitness Testing:      7.1 seconds, 31.3%
Report:               3.0 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 220
Test mean error for best: 0.22000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99true            
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -38                 | Program output: -38                
Correct output: -70                 | Program output: -70                
Correct output: -67                 | Program output: -67                
Correct output: -72                 | Program output: -72                
Correct output: -26                 | Program output: -26                
Correct output: -42                 | Program output: 76                 
Correct output: -9                  | Program output: -9                 
Correct output: 15                  | Program output: 15                 
Correct output: -54                 | Program output: -54                
Correct output: -49                 | Program output: -49                
Correct output: 45                  | Program output: 45                 
Correct output: 83                  | Program output: 83                 
Correct output: -82                 | Program output: -82                
Correct output: 84                  | Program output: 84                 
Correct output: -68                 | Program output: -68                
Correct output: 33                  | Program output: 33                 
Correct output: 12                  | Program output: 12                 
Correct output: 7                   | Program output: 7                  
Correct output: 8                   | Program output: 8                  
Correct output: 3                   | Program output: 3                  
Correct output: 9                   | Program output: 9                  
Correct output: 74                  | Program output: 74                 
Correct output: 22                  | Program output: 22                 
Correct output: 8                   | Program output: 8                  
Correct output: 18                  | Program output: 18                 
Correct output: 12                  | Program output: 12                 
Correct output: 28                  | Program output: 48                 
Correct output: 11                  | Program output: 11                 
Correct output: 9                   | Program output: 47                 
Correct output: 6                   | Program output: 6                  
Correct output: 3                   | Program output: 3                  
Correct output: 68                  | Program output: 77                 
Correct output: 17                  | Program output: 17                 
Correct output: 30                  | Program output: 30                 
Correct output: 2                   | Program output: 2                  
Correct output: 29                  | Program output: 29                 
Correct output: -94                 | Program output: -94                
Correct output: -93                 | Program output: -83                
Correct output: -2                  | Program output: -2                 
Correct output: -69                 | Program output: -19                
Correct output: -80                 | Program output: -80                
Correct output: -81                 | Program output: -81                
Correct output: -52                 | Program output: -52                
Correct output: -71                 | Program output: -71                
Correct output: -84                 | Program output: -84                
Correct output: -15                 | Program output: -15                
Correct output: -84                 | Program output: -84                
Correct output: -92                 | Program output: -62                
Correct output: -82                 | Program output: -82                
Correct output: -87                 | Program output: -87                
Correct output: -97                 | Program output: -97                
Correct output: 3                   | Program output: 42                 
Correct output: -49                 | Program output: -4                 
Correct output: -51                 | Program output: -26                
Correct output: -32                 | Program output: -32true            
Correct output: -71                 | Program output: -71                
Correct output: -85                 | Program output: -85                
Correct output: -11                 | Program output: -11                
Correct output: -86                 | Program output: -86                
Correct output: -96                 | Program output: -96                
Correct output: -69                 | Program output: -69                
Correct output: -56                 | Program output: -56                
Correct output: -72                 | Program output: -72                
Correct output: -73                 | Program output: -73                
Correct output: -64                 | Program output: -64                
Correct output: -98                 | Program output: -98                
Correct output: -68                 | Program output: -68                
Correct output: -61                 | Program output: -36                
Correct output: -81                 | Program output: -71                
Correct output: -83                 | Program output: 23                 
Correct output: -72                 | Program output: -9                 
Correct output: -18                 | Program output: -18                
Correct output: -81                 | Program output: -81                
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: -81                
Correct output: -83                 | Program output: -13                
Correct output: -84                 | Program output: -84                
Correct output: -52                 | Program output: -52                
Correct output: -96                 | Program output: -96                
Correct output: -91                 | Program output: -91                
Correct output: -11                 | Program output: -11                
Correct output: -43                 | Program output: -24                
Correct output: -60                 | Program output: -60                
Correct output: -27                 | Program output: -27                
Correct output: -71                 | Program output: -71                
Correct output: -15                 | Program output: -15                
Correct output: -4                  | Program output: -4                 
Correct output: -92                 | Program output: -92                
Correct output: -19                 | Program output: -19                
Correct output: -100                | Program output: -100               
Correct output: -90                 | Program output: -90                
Correct output: 13                  | Program output: 13                 
Correct output: -98                 | Program output: -98                
Correct output: -90                 | Program output: -90                
Correct output: -50                 | Program output: -50                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_empty} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_if} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_eq} {:close 1, :instruction in2} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in2} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_or} {:close 1, :instruction in3})
Lexicase best program: (boolean_pop in3 in4 boolean_empty in1 in2 integer_dup_items integer_min boolean_rot integer_min print_integer boolean_frominteger exec_if (integer_dup) (integer_div boolean_xor print_boolean boolean_rot) exec_eq integer_lt integer_eq in2 integer_rot exec_when (integer_mult exec_stackdepth) boolean_flush integer_dup exec_k_when_autoconstructing (in2) (integer_flush boolean_or) in3)
Lexicase best errors: [1 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 39
Percent parens: 0.154
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_empty} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_if} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_eq} {:close 1, :instruction in2} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in2} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_or} {:close 1, :instruction in3})
Zero cases best program: (boolean_pop in3 in4 boolean_empty in1 in2 integer_dup_items integer_min boolean_rot integer_min print_integer boolean_frominteger exec_if (integer_dup) (integer_div boolean_xor print_boolean boolean_rot) exec_eq integer_lt integer_eq in2 integer_rot exec_when (integer_mult exec_stackdepth) boolean_flush integer_dup exec_k_when_autoconstructing (in2) (integer_flush boolean_or) in3)
Zero cases best errors: [1 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 39
Percent parens: 0.154
--- Lexicase Population Statistics ---
Count of elite individuals by case: (213 213 182 99 212 243 564 207 419 178)
Population mean number of elite cases: 2.53
Count of perfect (error zero) individuals by case: (213 213 182 99 212 243 564 207 419 178)
Population mean number of perfect (error zero) cases: 2.53
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_empty} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_if} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_eq} {:close 1, :instruction in2} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in2} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_or} {:close 1, :instruction in3})
Best program: (boolean_pop in3 in4 boolean_empty in1 in2 integer_dup_items integer_min boolean_rot integer_min print_integer boolean_frominteger exec_if (integer_dup) (integer_div boolean_xor print_boolean boolean_rot) exec_eq integer_lt integer_eq in2 integer_rot exec_when (integer_mult exec_stackdepth) boolean_flush integer_dup exec_k_when_autoconstructing (in2) (integer_flush boolean_or) in3)
Errors: [1 0 0 0 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 33
Size: 39
Percent parens: 0.154
--- Population Statistics ---
Average total errors in population: 7.47
Median total errors in population: 7
Error averages by case: (0.787 0.787 0.818 0.901 0.788 0.757 0.436 0.793 0.581 0.822)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 33.89
Average program size in population (points): 45.36
Average percent parens in population: 0.250
Minimum age in population: 11.0
Maximum age in population: 11.0
Average age in population: 11.0
Median age in population: 11.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.998
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.998
Total error diversity:				 0.01
Error (vector) diversity:			 0.049
Behavioral diversity:				 0.346
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 5661598
--- Timings ---
Current time: 1559594076261 milliseconds
Total Time:          24.6 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        13.6 seconds, 55.3%
Fitness Testing:      7.6 seconds, 30.8%
Report:               3.3 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 217
Test mean error for best: 0.21700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -38                 | Program output: -38                
Correct output: -70                 | Program output: -70                
Correct output: -67                 | Program output: -67                
Correct output: -72                 | Program output: -72                
Correct output: -26                 | Program output: -26                
Correct output: -42                 | Program output: 76                 
Correct output: -9                  | Program output: -9                 
Correct output: 15                  | Program output: 15                 
Correct output: -54                 | Program output: -54                
Correct output: -49                 | Program output: -49                
Correct output: 45                  | Program output: 45                 
Correct output: 83                  | Program output: 83                 
Correct output: -82                 | Program output: -82                
Correct output: 84                  | Program output: 84                 
Correct output: -68                 | Program output: -68                
Correct output: 33                  | Program output: 33                 
Correct output: 12                  | Program output: 12                 
Correct output: 7                   | Program output: 7                  
Correct output: 8                   | Program output: 8                  
Correct output: 3                   | Program output: 3                  
Correct output: 9                   | Program output: 9                  
Correct output: 74                  | Program output: 74                 
Correct output: 22                  | Program output: 22                 
Correct output: 8                   | Program output: 8                  
Correct output: 18                  | Program output: 18                 
Correct output: 12                  | Program output: 12                 
Correct output: 28                  | Program output: 48                 
Correct output: 11                  | Program output: 11                 
Correct output: 9                   | Program output: 47                 
Correct output: 6                   | Program output: 6                  
Correct output: 3                   | Program output: 3                  
Correct output: 68                  | Program output: 77                 
Correct output: 17                  | Program output: 17                 
Correct output: 30                  | Program output: 30                 
Correct output: 2                   | Program output: 2                  
Correct output: 29                  | Program output: 29                 
Correct output: -94                 | Program output: -94                
Correct output: -93                 | Program output: -83                
Correct output: -2                  | Program output: -2                 
Correct output: -69                 | Program output: -19                
Correct output: -80                 | Program output: -80                
Correct output: -81                 | Program output: -81                
Correct output: -52                 | Program output: -52                
Correct output: -71                 | Program output: -71                
Correct output: -84                 | Program output: -84                
Correct output: -15                 | Program output: -15                
Correct output: -84                 | Program output: -84                
Correct output: -92                 | Program output: -62                
Correct output: -82                 | Program output: -82                
Correct output: -87                 | Program output: -87                
Correct output: -97                 | Program output: -97                
Correct output: 3                   | Program output: 42                 
Correct output: -49                 | Program output: -4                 
Correct output: -51                 | Program output: -26                
Correct output: -32                 | Program output: -32                
Correct output: -71                 | Program output: -71                
Correct output: -85                 | Program output: -85                
Correct output: -11                 | Program output: -11                
Correct output: -86                 | Program output: -86                
Correct output: -96                 | Program output: -96                
Correct output: -69                 | Program output: -69                
Correct output: -56                 | Program output: -56                
Correct output: -72                 | Program output: -72                
Correct output: -73                 | Program output: -73                
Correct output: -64                 | Program output: -64                
Correct output: -98                 | Program output: -98                
Correct output: -68                 | Program output: -68                
Correct output: -61                 | Program output: -36                
Correct output: -81                 | Program output: -71                
Correct output: -83                 | Program output: 23                 
Correct output: -72                 | Program output: -9                 
Correct output: -18                 | Program output: -18                
Correct output: -81                 | Program output: -81                
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: -81                
Correct output: -83                 | Program output: -13                
Correct output: -84                 | Program output: -84                
Correct output: -52                 | Program output: -52                
Correct output: -96                 | Program output: -96                
Correct output: -91                 | Program output: -91                
Correct output: -11                 | Program output: -11                
Correct output: -43                 | Program output: -24                
Correct output: -60                 | Program output: -60                
Correct output: -27                 | Program output: -27                
Correct output: -71                 | Program output: -71                
Correct output: -15                 | Program output: -15                
Correct output: -4                  | Program output: -4                 
Correct output: -92                 | Program output: -92                
Correct output: -19                 | Program output: -19                
Correct output: -100                | Program output: -100               
Correct output: -90                 | Program output: -90                
Correct output: 13                  | Program output: 13                 
Correct output: -98                 | Program output: -98                
Correct output: -90                 | Program output: -90                
Correct output: -50                 | Program output: -50                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_empty} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_if} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_eq} {:close 1, :instruction in2} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_or} {:close 1, :instruction in3})
Lexicase best program: (boolean_pop in3 in4 boolean_empty in1 in2 boolean_yank integer_min boolean_rot integer_min print_integer integer_dup_items boolean_frominteger exec_if (exec_noop integer_dup) (integer_div boolean_xor print_boolean boolean_rot) exec_eq integer_lt integer_eq in2 integer_rot exec_when (integer_mult exec_stackdepth) integer_dup exec_k_when_autoconstructing (integer_lt integer_yank integer_flush boolean_or) (in3))
Lexicase best errors: [0 0 0 0 1 0 1 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 41
Percent parens: 0.146
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_empty} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_if} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_eq} {:close 1, :instruction in2} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_or} {:close 1, :instruction in3})
Zero cases best program: (boolean_pop in3 in4 boolean_empty in1 in2 boolean_yank integer_min boolean_rot integer_min print_integer integer_dup_items boolean_frominteger exec_if (exec_noop integer_dup) (integer_div boolean_xor print_boolean boolean_rot) exec_eq integer_lt integer_eq in2 integer_rot exec_when (integer_mult exec_stackdepth) integer_dup exec_k_when_autoconstructing (integer_lt integer_yank integer_flush boolean_or) (in3))
Zero cases best errors: [0 0 0 0 1 0 1 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 41
Percent parens: 0.146
--- Lexicase Population Statistics ---
Count of elite individuals by case: (382 248 334 405 174 383 172 351 403 325)
Population mean number of elite cases: 3.18
Count of perfect (error zero) individuals by case: (382 248 334 405 174 383 172 351 403 325)
Population mean number of perfect (error zero) cases: 3.18
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_empty} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_rot} {:close 1, :instruction exec_while} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_if} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction in2} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in2} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_or} {:close 1, :instruction in3})
Best program: (boolean_pop in3 in4 boolean_empty in1 in2 integer_dup_items integer_min boolean_rot exec_while () integer_min print_integer boolean_frominteger exec_if (integer_dup) (integer_div boolean_xor boolean_rot) exec_eq integer_lt print_integer integer_eq boolean_yankdup in2 integer_rot exec_when (integer_mult exec_stackdepth) boolean_flush integer_dup exec_k_when_autoconstructing (in2) (integer_flush boolean_or) in3)
Errors: [0 0 0 0 1 0 1 0 0 0]
Total: 2
Mean: 0.2
Genome size: 35
Size: 42
Percent parens: 0.167
--- Population Statistics ---
Average total errors in population: 6.823
Median total errors in population: 7
Error averages by case: (0.618 0.752 0.666 0.595 0.826 0.617 0.828 0.649 0.597 0.675)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 32.923
Average program size in population (points): 40.611
Average percent parens in population: 0.186
Minimum age in population: 12.0
Maximum age in population: 12.0
Average age in population: 12.0
Median age in population: 12.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.009
Error (vector) diversity:			 0.055
Behavioral diversity:				 0.323
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 6002554
--- Timings ---
Current time: 1559594077975 milliseconds
Total Time:          26.3 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        14.7 seconds, 56.0%
Fitness Testing:      7.9 seconds, 30.2%
Report:               3.5 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 0
Test mean error for best: 0.00000
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -38                 | Program output: -38                
Correct output: -70                 | Program output: -70                
Correct output: -67                 | Program output: -67                
Correct output: -72                 | Program output: -72                
Correct output: -26                 | Program output: -26                
Correct output: -42                 | Program output: -42                
Correct output: -9                  | Program output: -9                 
Correct output: 15                  | Program output: 15                 
Correct output: -54                 | Program output: -54                
Correct output: -49                 | Program output: -49                
Correct output: 45                  | Program output: 45                 
Correct output: 83                  | Program output: 83                 
Correct output: -82                 | Program output: -82                
Correct output: 84                  | Program output: 84                 
Correct output: -68                 | Program output: -68                
Correct output: 33                  | Program output: 33                 
Correct output: 12                  | Program output: 12                 
Correct output: 7                   | Program output: 7                  
Correct output: 8                   | Program output: 8                  
Correct output: 3                   | Program output: 3                  
Correct output: 9                   | Program output: 9                  
Correct output: 74                  | Program output: 74                 
Correct output: 22                  | Program output: 22                 
Correct output: 8                   | Program output: 8                  
Correct output: 18                  | Program output: 18                 
Correct output: 12                  | Program output: 12                 
Correct output: 28                  | Program output: 28                 
Correct output: 11                  | Program output: 11                 
Correct output: 9                   | Program output: 9                  
Correct output: 6                   | Program output: 6                  
Correct output: 3                   | Program output: 3                  
Correct output: 68                  | Program output: 68                 
Correct output: 17                  | Program output: 17                 
Correct output: 30                  | Program output: 30                 
Correct output: 2                   | Program output: 2                  
Correct output: 29                  | Program output: 29                 
Correct output: -94                 | Program output: -94                
Correct output: -93                 | Program output: -93                
Correct output: -2                  | Program output: -2                 
Correct output: -69                 | Program output: -69                
Correct output: -80                 | Program output: -80                
Correct output: -81                 | Program output: -81                
Correct output: -52                 | Program output: -52                
Correct output: -71                 | Program output: -71                
Correct output: -84                 | Program output: -84                
Correct output: -15                 | Program output: -15                
Correct output: -84                 | Program output: -84                
Correct output: -92                 | Program output: -92                
Correct output: -82                 | Program output: -82                
Correct output: -87                 | Program output: -87                
Correct output: -97                 | Program output: -97                
Correct output: 3                   | Program output: 3                  
Correct output: -49                 | Program output: -49                
Correct output: -51                 | Program output: -51                
Correct output: -32                 | Program output: -32                
Correct output: -71                 | Program output: -71                
Correct output: -85                 | Program output: -85                
Correct output: -11                 | Program output: -11                
Correct output: -86                 | Program output: -86                
Correct output: -96                 | Program output: -96                
Correct output: -69                 | Program output: -69                
Correct output: -56                 | Program output: -56                
Correct output: -72                 | Program output: -72                
Correct output: -73                 | Program output: -73                
Correct output: -64                 | Program output: -64                
Correct output: -98                 | Program output: -98                
Correct output: -68                 | Program output: -68                
Correct output: -61                 | Program output: -61                
Correct output: -81                 | Program output: -81                
Correct output: -83                 | Program output: -83                
Correct output: -72                 | Program output: -72                
Correct output: -18                 | Program output: -18                
Correct output: -81                 | Program output: -81                
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: -81                
Correct output: -83                 | Program output: -83                
Correct output: -84                 | Program output: -84                
Correct output: -52                 | Program output: -52                
Correct output: -96                 | Program output: -96                
Correct output: -91                 | Program output: -91                
Correct output: -11                 | Program output: -11                
Correct output: -43                 | Program output: -43                
Correct output: -60                 | Program output: -60                
Correct output: -27                 | Program output: -27                
Correct output: -71                 | Program output: -71                
Correct output: -15                 | Program output: -15                
Correct output: -4                  | Program output: -4                 
Correct output: -92                 | Program output: -92                
Correct output: -19                 | Program output: -19                
Correct output: -100                | Program output: -100               
Correct output: -90                 | Program output: -90                
Correct output: 13                  | Program output: 13                 
Correct output: -98                 | Program output: -98                
Correct output: -90                 | Program output: -90                
Correct output: -50                 | Program output: -50                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_if} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_div} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_eq} {:close 1, :instruction in2} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_or} {:close 1, :instruction in3})
Lexicase best program: (boolean_pop in3 in4 integer_min in1 in2 integer_min boolean_rot exec_dup (integer_min print_integer) boolean_frominteger exec_if (integer_dup) (integer_div print_boolean boolean_rot) exec_eq integer_lt integer_eq in2 integer_rot exec_when (integer_mult exec_stackdepth) boolean_flush integer_dup exec_k_when_autoconstructing (exec_shove (integer_flush exec_do*while (boolean_or) in3)) ())
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 42
Percent parens: 0.214
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_if} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_div} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_eq} {:close 1, :instruction in2} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_or} {:close 1, :instruction in3})
Zero cases best program: (boolean_pop in3 in4 integer_min in1 in2 integer_min boolean_rot exec_dup (integer_min print_integer) boolean_frominteger exec_if (integer_dup) (integer_div print_boolean boolean_rot) exec_eq integer_lt integer_eq in2 integer_rot exec_when (integer_mult exec_stackdepth) boolean_flush integer_dup exec_k_when_autoconstructing (exec_shove (integer_flush exec_do*while (boolean_or) in3)) ())
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 42
Percent parens: 0.214
--- Lexicase Population Statistics ---
Count of elite individuals by case: (405 407 425 421 632 631 345 426 419 387)
Population mean number of elite cases: 4.50
Count of perfect (error zero) individuals by case: (405 407 425 421 632 631 345 426 419 387)
Population mean number of perfect (error zero) cases: 4.50
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_if} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_div} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_eq} {:close 1, :instruction in2} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_or} {:close 1, :instruction in3})
Best program: (boolean_pop in3 in4 integer_min in1 in2 integer_min boolean_rot exec_dup (integer_min print_integer) boolean_frominteger exec_if (integer_dup) (integer_div print_boolean boolean_rot) exec_eq integer_lt integer_eq in2 integer_rot exec_when (integer_mult exec_stackdepth) boolean_flush integer_dup exec_k_when_autoconstructing (exec_shove (integer_flush exec_do*while (boolean_or) in3)) ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 33
Size: 42
Percent parens: 0.214
--- Population Statistics ---
Average total errors in population: 5.502
Median total errors in population: 4
Error averages by case: (0.595 0.593 0.575 0.579 0.368 0.369 0.655 0.574 0.581 0.613)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 32.273
Average program size in population (points): 39.461
Average percent parens in population: 0.180
Minimum age in population: 13.0
Maximum age in population: 13.0
Average age in population: 13.0
Median age in population: 13.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.011
Error (vector) diversity:			 0.067
Behavioral diversity:				 0.275
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 6320173
--- Timings ---
Current time: 1559594079684 milliseconds
Total Time:          28.0 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        15.9 seconds, 56.6%
Fitness Testing:      8.3 seconds, 29.5%
Report:               3.8 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 13
Successful program: (boolean_pop in3 in4 integer_min in1 in2 integer_min boolean_rot exec_dup (integer_min print_integer) boolean_frominteger exec_if (integer_dup) (integer_div print_boolean boolean_rot) exec_eq integer_lt integer_eq in2 integer_rot exec_when (integer_mult exec_stackdepth) boolean_flush integer_dup exec_k_when_autoconstructing (exec_shove (integer_flush exec_do*while (boolean_or) in3)) ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 42


Auto-simplifying with starting size: 42
step: 0
program: (boolean_pop in3 in4 integer_min in1 in2 integer_min boolean_rot exec_dup (integer_min print_integer) boolean_frominteger exec_if (integer_dup) (integer_div print_boolean boolean_rot) exec_eq integer_lt integer_eq in2 integer_rot exec_when (integer_mult exec_stackdepth) boolean_flush integer_dup exec_k_when_autoconstructing (exec_shove (integer_flush exec_do*while (boolean_or) in3)) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 42

step: 500
program: (boolean_pop in3 in4 integer_min in1 in2 integer_min boolean_rot exec_dup (integer_min print_integer) boolean_frominteger exec_if (integer_dup) (integer_div print_boolean boolean_rot) exec_eq integer_lt integer_eq in2 integer_rot exec_when (integer_mult exec_stackdepth) boolean_flush integer_dup exec_k_when_autoconstructing (exec_shove (integer_flush exec_do*while (boolean_or) in3)) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 42

step: 1000
program: (boolean_pop in3 in4 integer_min in1 in2 integer_min boolean_rot exec_dup (integer_min print_integer) boolean_frominteger exec_if (integer_dup) (integer_div print_boolean boolean_rot) exec_eq integer_lt integer_eq in2 integer_rot exec_when (integer_mult exec_stackdepth) boolean_flush integer_dup exec_k_when_autoconstructing (exec_shove (integer_flush exec_do*while (boolean_or) in3)) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 42

step: 1500
program: (boolean_pop in3 in4 integer_min in1 in2 integer_min boolean_rot exec_dup (integer_min print_integer) boolean_frominteger exec_if (integer_dup) (integer_div print_boolean boolean_rot) exec_eq integer_lt integer_eq in2 integer_rot exec_when (integer_mult exec_stackdepth) boolean_flush integer_dup exec_k_when_autoconstructing (exec_shove (integer_flush exec_do*while (boolean_or) in3)) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 42

step: 2000
program: (boolean_pop in3 in4 integer_min in1 in2 integer_min boolean_rot exec_dup (integer_min print_integer) boolean_frominteger exec_if (integer_dup) (integer_div print_boolean boolean_rot) exec_eq integer_lt integer_eq in2 integer_rot exec_when (integer_mult exec_stackdepth) boolean_flush integer_dup exec_k_when_autoconstructing (exec_shove (integer_flush exec_do*while (boolean_or) in3)) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 42

step: 2500
program: (boolean_pop in3 in4 integer_min in1 in2 integer_min boolean_rot exec_dup (integer_min print_integer) boolean_frominteger exec_if (integer_dup) (integer_div print_boolean boolean_rot) exec_eq integer_lt integer_eq in2 integer_rot exec_when (integer_mult exec_stackdepth) boolean_flush integer_dup exec_k_when_autoconstructing (exec_shove (integer_flush exec_do*while (boolean_or) in3)) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 42

step: 3000
program: (boolean_pop in3 in4 integer_min in1 in2 integer_min boolean_rot exec_dup (integer_min print_integer) boolean_frominteger exec_if (integer_dup) (integer_div print_boolean boolean_rot) exec_eq integer_lt integer_eq in2 integer_rot exec_when (integer_mult exec_stackdepth) boolean_flush integer_dup exec_k_when_autoconstructing (exec_shove (integer_flush exec_do*while (boolean_or) in3)) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 42

step: 3500
program: (boolean_pop in3 in4 integer_min in1 in2 integer_min boolean_rot exec_dup (integer_min print_integer) boolean_frominteger exec_if (integer_dup) (integer_div print_boolean boolean_rot) exec_eq integer_lt integer_eq in2 integer_rot exec_when (integer_mult exec_stackdepth) boolean_flush integer_dup exec_k_when_autoconstructing (exec_shove (integer_flush exec_do*while (boolean_or) in3)) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 42

step: 4000
program: (boolean_pop in3 in4 integer_min in1 in2 integer_min boolean_rot exec_dup (integer_min print_integer) boolean_frominteger exec_if (integer_dup) (integer_div print_boolean boolean_rot) exec_eq integer_lt integer_eq in2 integer_rot exec_when (integer_mult exec_stackdepth) boolean_flush integer_dup exec_k_when_autoconstructing (exec_shove (integer_flush exec_do*while (boolean_or) in3)) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 42

step: 4500
program: (boolean_pop in3 in4 integer_min in1 in2 integer_min boolean_rot exec_dup (integer_min print_integer) boolean_frominteger exec_if (integer_dup) (integer_div print_boolean boolean_rot) exec_eq integer_lt integer_eq in2 integer_rot exec_when (integer_mult exec_stackdepth) boolean_flush integer_dup exec_k_when_autoconstructing (exec_shove (integer_flush exec_do*while (boolean_or) in3)) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 42

step: 5000
program: (boolean_pop in3 in4 integer_min in1 in2 integer_min boolean_rot exec_dup (integer_min print_integer) boolean_frominteger exec_if (integer_dup) (integer_div print_boolean boolean_rot) exec_eq integer_lt integer_eq in2 integer_rot exec_when (integer_mult exec_stackdepth) boolean_flush integer_dup exec_k_when_autoconstructing (exec_shove (integer_flush exec_do*while (boolean_or) in3)) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 42

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 0
Test mean error for best: 0.00000
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -38                 | Program output: -38                
Correct output: -70                 | Program output: -70                
Correct output: -67                 | Program output: -67                
Correct output: -72                 | Program output: -72                
Correct output: -26                 | Program output: -26                
Correct output: -42                 | Program output: -42                
Correct output: -9                  | Program output: -9                 
Correct output: 15                  | Program output: 15                 
Correct output: -54                 | Program output: -54                
Correct output: -49                 | Program output: -49                
Correct output: 45                  | Program output: 45                 
Correct output: 83                  | Program output: 83                 
Correct output: -82                 | Program output: -82                
Correct output: 84                  | Program output: 84                 
Correct output: -68                 | Program output: -68                
Correct output: 33                  | Program output: 33                 
Correct output: 12                  | Program output: 12                 
Correct output: 7                   | Program output: 7                  
Correct output: 8                   | Program output: 8                  
Correct output: 3                   | Program output: 3                  
Correct output: 9                   | Program output: 9                  
Correct output: 74                  | Program output: 74                 
Correct output: 22                  | Program output: 22                 
Correct output: 8                   | Program output: 8                  
Correct output: 18                  | Program output: 18                 
Correct output: 12                  | Program output: 12                 
Correct output: 28                  | Program output: 28                 
Correct output: 11                  | Program output: 11                 
Correct output: 9                   | Program output: 9                  
Correct output: 6                   | Program output: 6                  
Correct output: 3                   | Program output: 3                  
Correct output: 68                  | Program output: 68                 
Correct output: 17                  | Program output: 17                 
Correct output: 30                  | Program output: 30                 
Correct output: 2                   | Program output: 2                  
Correct output: 29                  | Program output: 29                 
Correct output: -94                 | Program output: -94                
Correct output: -93                 | Program output: -93                
Correct output: -2                  | Program output: -2                 
Correct output: -69                 | Program output: -69                
Correct output: -80                 | Program output: -80                
Correct output: -81                 | Program output: -81                
Correct output: -52                 | Program output: -52                
Correct output: -71                 | Program output: -71                
Correct output: -84                 | Program output: -84                
Correct output: -15                 | Program output: -15                
Correct output: -84                 | Program output: -84                
Correct output: -92                 | Program output: -92                
Correct output: -82                 | Program output: -82                
Correct output: -87                 | Program output: -87                
Correct output: -97                 | Program output: -97                
Correct output: 3                   | Program output: 3                  
Correct output: -49                 | Program output: -49                
Correct output: -51                 | Program output: -51                
Correct output: -32                 | Program output: -32                
Correct output: -71                 | Program output: -71                
Correct output: -85                 | Program output: -85                
Correct output: -11                 | Program output: -11                
Correct output: -86                 | Program output: -86                
Correct output: -96                 | Program output: -96                
Correct output: -69                 | Program output: -69                
Correct output: -56                 | Program output: -56                
Correct output: -72                 | Program output: -72                
Correct output: -73                 | Program output: -73                
Correct output: -64                 | Program output: -64                
Correct output: -98                 | Program output: -98                
Correct output: -68                 | Program output: -68                
Correct output: -61                 | Program output: -61                
Correct output: -81                 | Program output: -81                
Correct output: -83                 | Program output: -83                
Correct output: -72                 | Program output: -72                
Correct output: -18                 | Program output: -18                
Correct output: -81                 | Program output: -81                
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: -81                
Correct output: -83                 | Program output: -83                
Correct output: -84                 | Program output: -84                
Correct output: -52                 | Program output: -52                
Correct output: -96                 | Program output: -96                
Correct output: -91                 | Program output: -91                
Correct output: -11                 | Program output: -11                
Correct output: -43                 | Program output: -43                
Correct output: -60                 | Program output: -60                
Correct output: -27                 | Program output: -27                
Correct output: -71                 | Program output: -71                
Correct output: -15                 | Program output: -15                
Correct output: -4                  | Program output: -4                 
Correct output: -92                 | Program output: -92                
Correct output: -19                 | Program output: -19                
Correct output: -100                | Program output: -100               
Correct output: -90                 | Program output: -90                
Correct output: 13                  | Program output: 13                 
Correct output: -98                 | Program output: -98                
Correct output: -90                 | Program output: -90                
Correct output: -50                 | Program output: -50                
;;******************************
