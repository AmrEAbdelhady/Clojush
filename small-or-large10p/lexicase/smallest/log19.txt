Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 3000 :genetic-operator-probabilities {:uniform-addition-and-deletion,1.0} :uniform-addition-and-deletion-rate 0.09
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:uniform-addition-and-deletion 1.0}
max-error = 1
max-generations = 3000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[21 21 54 21] 21] [[-23 62 62 62] -23] [[-96 -96 -96 -84] -96] [[76 76 84 76] 76] [[83 14 83 83] 14] [[87 87 -56 87] -56] [[53 28 28 28] 28] [[24 -20 24 24] -20] [[38 87 87 87] 38] [[31 9 9 9] 9] [(-80 -80 -80 -80) -80] [(22 22 22 22) 22] [(-35 -35 -35 -35) -35] [(-31 -31 -31 -31) -31] [(-8 -8 -8 -8) -8] [(10 98 53 55) 10] [(21 80 60 61) 21] [(94 96 60 31) 31] [(3 55 74 22) 3] [(6 2 71 9) 2] [(33 63 95 52) 33] [(100 36 90 4) 4] [(49 96 66 20) 20] [(59 65 67 56) 56] [(54 15 28 4) 4] [(41 35 88 32) 32] [(21 77 98 97) 21] [(7 8 24 88) 7] [(90 26 78 15) 15] [(48 4 82 68) 4] [(57 76 61 30) 30] [(31 74 94 50) 31] [(1 6 8 78) 1] [(88 70 45 94) 45] [(61 34 8 64) 8] [(56 22 -21 43) -21] [(55 5 12 -38) -38] [(-65 10 -16 -15) -65] [(-33 -87 43 11) -87] [(-58 54 96 74) -58] [(18 -80 18 86) -80] [(2 50 -77 5) -77] [(-31 29 26 -7) -31] [(-83 15 73 71) -83] [(-21 -50 2 -63) -63] [(82 -90 83 4) -90] [(-85 -82 12 0) -85] [(-92 82 -70 44) -92] [(25 64 74 -75) -75] [(5 49 97 -75) -75] [(-24 93 20 60) -24] [(9 -4 74 8) -4] [(-43 63 -53 69) -53] [(-20 22 -55 29) -55] [(-51 -48 -65 -17) -65] [(-33 96 -66 67) -66] [(86 -33 -49 53) -49] [(-30 -49 -46 -1) -49] [(62 38 66 -98) -98] [(55 0 50 55) 0] [(-26 -51 -62 11) -62] [(-69 -21 38 -62) -69] [(91 -43 90 -39) -43] [(16 -69 -95 40) -95] [(67 91 44 -34) -34] [(57 79 -22 37) -22] [(27 -30 -13 -87) -87] [(66 -5 75 -12) -12] [(70 20 -45 -64) -64] [(-7 81 25 -6) -7] [(-82 21 -50 31) -82] [(33 62 -91 -65) -91] [(-56 39 -25 62) -56] [(-93 -15 -26 -95) -95] [(94 -68 -80 -58) -80] [(-3 -77 45 11) -77] [(-92 48 23 -14) -92] [(-82 3 44 -23) -82] [(39 96 -55 -76) -76] [(-56 -28 41 97) -56] [(76 -20 63 -39) -39] [(-76 -75 -62 -61) -76] [(-55 -49 -28 2) -55] [(14 -97 98 61) -97] [(61 71 -53 -2) -53] [(-42 92 71 12) -42] [(70 99 84 49) 49] [(-56 -80 -50 -11) -80] [(47 79 79 -44) -44] [(-42 15 87 -97) -97] [(-43 -71 82 73) -71] [(-62 -34 -1 100) -62] [(72 35 1 62) 1] [(96 30 -33 92) -33] [(-47 77 -55 -53) -55])
uniform-addition-and-deletion-rate = 0.09
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[21 21 54 21] 21]
Train Case:   6 | Input/Output: [[-23 62 62 62] -23]
Train Case:   7 | Input/Output: [[-96 -96 -96 -84] -96]
Train Case:   8 | Input/Output: [[76 76 84 76] 76]
Train Case:   9 | Input/Output: [[83 14 83 83] 14]
Train Case:  10 | Input/Output: [[87 87 -56 87] -56]
Train Case:  11 | Input/Output: [[53 28 28 28] 28]
Train Case:  12 | Input/Output: [[24 -20 24 24] -20]
Train Case:  13 | Input/Output: [[38 87 87 87] 38]
Train Case:  14 | Input/Output: [[31 9 9 9] 9]
Train Case:  15 | Input/Output: [(-80 -80 -80 -80) -80]
Train Case:  16 | Input/Output: [(22 22 22 22) 22]
Train Case:  17 | Input/Output: [(-35 -35 -35 -35) -35]
Train Case:  18 | Input/Output: [(-31 -31 -31 -31) -31]
Train Case:  19 | Input/Output: [(-8 -8 -8 -8) -8]
Train Case:  20 | Input/Output: [(10 98 53 55) 10]
Train Case:  21 | Input/Output: [(21 80 60 61) 21]
Train Case:  22 | Input/Output: [(94 96 60 31) 31]
Train Case:  23 | Input/Output: [(3 55 74 22) 3]
Train Case:  24 | Input/Output: [(6 2 71 9) 2]
Train Case:  25 | Input/Output: [(33 63 95 52) 33]
Train Case:  26 | Input/Output: [(100 36 90 4) 4]
Train Case:  27 | Input/Output: [(49 96 66 20) 20]
Train Case:  28 | Input/Output: [(59 65 67 56) 56]
Train Case:  29 | Input/Output: [(54 15 28 4) 4]
Train Case:  30 | Input/Output: [(41 35 88 32) 32]
Train Case:  31 | Input/Output: [(21 77 98 97) 21]
Train Case:  32 | Input/Output: [(7 8 24 88) 7]
Train Case:  33 | Input/Output: [(90 26 78 15) 15]
Train Case:  34 | Input/Output: [(48 4 82 68) 4]
Train Case:  35 | Input/Output: [(57 76 61 30) 30]
Train Case:  36 | Input/Output: [(31 74 94 50) 31]
Train Case:  37 | Input/Output: [(1 6 8 78) 1]
Train Case:  38 | Input/Output: [(88 70 45 94) 45]
Train Case:  39 | Input/Output: [(61 34 8 64) 8]
Train Case:  40 | Input/Output: [(56 22 -21 43) -21]
Train Case:  41 | Input/Output: [(55 5 12 -38) -38]
Train Case:  42 | Input/Output: [(-65 10 -16 -15) -65]
Train Case:  43 | Input/Output: [(-33 -87 43 11) -87]
Train Case:  44 | Input/Output: [(-58 54 96 74) -58]
Train Case:  45 | Input/Output: [(18 -80 18 86) -80]
Train Case:  46 | Input/Output: [(2 50 -77 5) -77]
Train Case:  47 | Input/Output: [(-31 29 26 -7) -31]
Train Case:  48 | Input/Output: [(-83 15 73 71) -83]
Train Case:  49 | Input/Output: [(-21 -50 2 -63) -63]
Train Case:  50 | Input/Output: [(82 -90 83 4) -90]
Train Case:  51 | Input/Output: [(-85 -82 12 0) -85]
Train Case:  52 | Input/Output: [(-92 82 -70 44) -92]
Train Case:  53 | Input/Output: [(25 64 74 -75) -75]
Train Case:  54 | Input/Output: [(5 49 97 -75) -75]
Train Case:  55 | Input/Output: [(-24 93 20 60) -24]
Train Case:  56 | Input/Output: [(9 -4 74 8) -4]
Train Case:  57 | Input/Output: [(-43 63 -53 69) -53]
Train Case:  58 | Input/Output: [(-20 22 -55 29) -55]
Train Case:  59 | Input/Output: [(-51 -48 -65 -17) -65]
Train Case:  60 | Input/Output: [(-33 96 -66 67) -66]
Train Case:  61 | Input/Output: [(86 -33 -49 53) -49]
Train Case:  62 | Input/Output: [(-30 -49 -46 -1) -49]
Train Case:  63 | Input/Output: [(62 38 66 -98) -98]
Train Case:  64 | Input/Output: [(55 0 50 55) 0]
Train Case:  65 | Input/Output: [(-26 -51 -62 11) -62]
Train Case:  66 | Input/Output: [(-69 -21 38 -62) -69]
Train Case:  67 | Input/Output: [(91 -43 90 -39) -43]
Train Case:  68 | Input/Output: [(16 -69 -95 40) -95]
Train Case:  69 | Input/Output: [(67 91 44 -34) -34]
Train Case:  70 | Input/Output: [(57 79 -22 37) -22]
Train Case:  71 | Input/Output: [(27 -30 -13 -87) -87]
Train Case:  72 | Input/Output: [(66 -5 75 -12) -12]
Train Case:  73 | Input/Output: [(70 20 -45 -64) -64]
Train Case:  74 | Input/Output: [(-7 81 25 -6) -7]
Train Case:  75 | Input/Output: [(-82 21 -50 31) -82]
Train Case:  76 | Input/Output: [(33 62 -91 -65) -91]
Train Case:  77 | Input/Output: [(-56 39 -25 62) -56]
Train Case:  78 | Input/Output: [(-93 -15 -26 -95) -95]
Train Case:  79 | Input/Output: [(94 -68 -80 -58) -80]
Train Case:  80 | Input/Output: [(-3 -77 45 11) -77]
Train Case:  81 | Input/Output: [(-92 48 23 -14) -92]
Train Case:  82 | Input/Output: [(-82 3 44 -23) -82]
Train Case:  83 | Input/Output: [(39 96 -55 -76) -76]
Train Case:  84 | Input/Output: [(-56 -28 41 97) -56]
Train Case:  85 | Input/Output: [(76 -20 63 -39) -39]
Train Case:  86 | Input/Output: [(-76 -75 -62 -61) -76]
Train Case:  87 | Input/Output: [(-55 -49 -28 2) -55]
Train Case:  88 | Input/Output: [(14 -97 98 61) -97]
Train Case:  89 | Input/Output: [(61 71 -53 -2) -53]
Train Case:  90 | Input/Output: [(-42 92 71 12) -42]
Train Case:  91 | Input/Output: [(70 99 84 49) 49]
Train Case:  92 | Input/Output: [(-56 -80 -50 -11) -80]
Train Case:  93 | Input/Output: [(47 79 79 -44) -44]
Train Case:  94 | Input/Output: [(-42 15 87 -97) -97]
Train Case:  95 | Input/Output: [(-43 -71 82 73) -71]
Train Case:  96 | Input/Output: [(-62 -34 -1 100) -62]
Train Case:  97 | Input/Output: [(72 35 1 62) 1]
Train Case:  98 | Input/Output: [(96 30 -33 92) -33]
Train Case:  99 | Input/Output: [(-47 77 -55 -53) -55]
Test Case:   0 | Input/Output: [[-10 -10 -10 -18] -18]
Test Case:   1 | Input/Output: [[-63 -63 -63 55] -63]
Test Case:   2 | Input/Output: [[-91 -24 -24 -24] -91]
Test Case:   3 | Input/Output: [[62 -14 -14 -14] -14]
Test Case:   4 | Input/Output: [[-16 -73 -16 -16] -73]
Test Case:   5 | Input/Output: [[7 -45 -45 -45] -45]
Test Case:   6 | Input/Output: [[-96 -96 73 -96] -96]
Test Case:   7 | Input/Output: [[-92 39 -92 -92] -92]
Test Case:   8 | Input/Output: [[48 48 91 48] 48]
Test Case:   9 | Input/Output: [[-76 -76 85 -76] -76]
Test Case:  10 | Input/Output: [[-93 -93 -93 -41] -93]
Test Case:  11 | Input/Output: [[74 74 74 17] 17]
Test Case:  12 | Input/Output: [[20 82 82 82] 20]
Test Case:  13 | Input/Output: [[-38 71 71 71] -38]
Test Case:  14 | Input/Output: [[-35 34 -35 -35] -35]
Test Case:  15 | Input/Output: [[-59 -59 -59 -11] -59]
Test Case:  16 | Input/Output: [[-55 -55 -84 -55] -84]
Test Case:  17 | Input/Output: [[27 84 27 27] 27]
Test Case:  18 | Input/Output: [[-9 -9 73 -9] -9]
Test Case:  19 | Input/Output: [[48 50 48 48] 48]
Test Case:  20 | Input/Output: [[62 94 94 94] 62]
Test Case:  21 | Input/Output: [[-66 -66 -66 80] -66]
Test Case:  22 | Input/Output: [[64 64 64 -38] -38]
Test Case:  23 | Input/Output: [[25 2 2 2] 2]
Test Case:  24 | Input/Output: [[39 -10 -10 -10] -10]
Test Case:  25 | Input/Output: [[-73 -73 -73 92] -73]
Test Case:  26 | Input/Output: [[-55 -55 -55 28] -55]
Test Case:  27 | Input/Output: [[-1 -1 50 -1] -1]
Test Case:  28 | Input/Output: [[-96 -96 -59 -96] -96]
Test Case:  29 | Input/Output: [[-70 3 3 3] -70]
Test Case:  30 | Input/Output: [[54 54 -41 54] -41]
Test Case:  31 | Input/Output: [[-22 -22 -22 -25] -25]
Test Case:  32 | Input/Output: [[97 97 -5 97] -5]
Test Case:  33 | Input/Output: [[43 -72 43 43] -72]
Test Case:  34 | Input/Output: [[67 67 67 -3] -3]
Test Case:  35 | Input/Output: [[-3 -67 -67 -67] -67]
Test Case:  36 | Input/Output: [[-52 -52 -36 -52] -52]
Test Case:  37 | Input/Output: [[56 -2 56 56] -2]
Test Case:  38 | Input/Output: [[24 24 24 44] 24]
Test Case:  39 | Input/Output: [[31 -87 -87 -87] -87]
Test Case:  40 | Input/Output: [[30 30 -10 30] -10]
Test Case:  41 | Input/Output: [[-9 -2 -2 -2] -9]
Test Case:  42 | Input/Output: [[-38 -38 57 -38] -38]
Test Case:  43 | Input/Output: [[-8 83 -8 -8] -8]
Test Case:  44 | Input/Output: [[-30 -30 -30 -34] -34]
Test Case:  45 | Input/Output: [[-72 -72 30 -72] -72]
Test Case:  46 | Input/Output: [[59 59 -31 59] -31]
Test Case:  47 | Input/Output: [[4 4 -80 4] -80]
Test Case:  48 | Input/Output: [[-39 -39 -39 28] -39]
Test Case:  49 | Input/Output: [[43 76 43 43] 43]
Test Case:  50 | Input/Output: [[7 7 7 50] 7]
Test Case:  51 | Input/Output: [[-35 -35 -35 -58] -58]
Test Case:  52 | Input/Output: [[-33 -33 -9 -33] -33]
Test Case:  53 | Input/Output: [[18 -51 18 18] -51]
Test Case:  54 | Input/Output: [[71 -11 -11 -11] -11]
Test Case:  55 | Input/Output: [[-27 94 94 94] -27]
Test Case:  56 | Input/Output: [[32 32 -33 32] -33]
Test Case:  57 | Input/Output: [[-23 -23 -23 48] -23]
Test Case:  58 | Input/Output: [[-78 -78 -47 -78] -78]
Test Case:  59 | Input/Output: [[76 -45 76 76] -45]
Test Case:  60 | Input/Output: [[55 -24 55 55] -24]
Test Case:  61 | Input/Output: [[34 34 -61 34] -61]
Test Case:  62 | Input/Output: [[-62 -62 -62 83] -62]
Test Case:  63 | Input/Output: [[95 95 15 95] 15]
Test Case:  64 | Input/Output: [[45 45 45 77] 45]
Test Case:  65 | Input/Output: [[63 -9 63 63] -9]
Test Case:  66 | Input/Output: [[-79 91 -79 -79] -79]
Test Case:  67 | Input/Output: [[-4 -4 -50 -4] -50]
Test Case:  68 | Input/Output: [[-48 -48 -48 -18] -48]
Test Case:  69 | Input/Output: [[-48 -48 -92 -48] -92]
Test Case:  70 | Input/Output: [[86 0 0 0] 0]
Test Case:  71 | Input/Output: [[-87 -87 -87 91] -87]
Test Case:  72 | Input/Output: [[-46 -37 -46 -46] -46]
Test Case:  73 | Input/Output: [[-45 31 31 31] -45]
Test Case:  74 | Input/Output: [[-54 -54 45 -54] -54]
Test Case:  75 | Input/Output: [[-35 52 -35 -35] -35]
Test Case:  76 | Input/Output: [[-58 -58 51 -58] -58]
Test Case:  77 | Input/Output: [[-45 71 -45 -45] -45]
Test Case:  78 | Input/Output: [[-2 -98 -2 -2] -98]
Test Case:  79 | Input/Output: [[36 -85 -85 -85] -85]
Test Case:  80 | Input/Output: [[65 97 97 97] 65]
Test Case:  81 | Input/Output: [[90 90 -31 90] -31]
Test Case:  82 | Input/Output: [[-72 -72 -72 96] -72]
Test Case:  83 | Input/Output: [[-82 -82 -82 -39] -82]
Test Case:  84 | Input/Output: [[-44 -68 -44 -44] -68]
Test Case:  85 | Input/Output: [[2 -24 -24 -24] -24]
Test Case:  86 | Input/Output: [[-70 15 15 15] -70]
Test Case:  87 | Input/Output: [[-19 56 56 56] -19]
Test Case:  88 | Input/Output: [[40 -12 40 40] -12]
Test Case:  89 | Input/Output: [[100 -83 100 100] -83]
Test Case:  90 | Input/Output: [[-45 -45 -45 62] -45]
Test Case:  91 | Input/Output: [[-78 -54 -78 -78] -78]
Test Case:  92 | Input/Output: [[-92 89 -92 -92] -92]
Test Case:  93 | Input/Output: [[75 75 75 -30] -30]
Test Case:  94 | Input/Output: [[-36 -36 -36 79] -36]
Test Case:  95 | Input/Output: [[-9 -9 -71 -9] -71]
Test Case:  96 | Input/Output: [[-10 54 -10 -10] -10]
Test Case:  97 | Input/Output: [[-81 62 62 62] -81]
Test Case:  98 | Input/Output: [[-66 -15 -66 -66] -66]
Test Case:  99 | Input/Output: [[-76 -76 -16 -76] -76]
Test Case: 100 | Input/Output: [(27 27 27 27) 27]
Test Case: 101 | Input/Output: [(-78 -78 -78 -78) -78]
Test Case: 102 | Input/Output: [(23 23 23 23) 23]
Test Case: 103 | Input/Output: [(93 93 93 93) 93]
Test Case: 104 | Input/Output: [(-12 -12 -12 -12) -12]
Test Case: 105 | Input/Output: [(5 5 5 5) 5]
Test Case: 106 | Input/Output: [(100 100 100 100) 100]
Test Case: 107 | Input/Output: [(-80 -80 -80 -80) -80]
Test Case: 108 | Input/Output: [(16 16 16 16) 16]
Test Case: 109 | Input/Output: [(60 60 60 60) 60]
Test Case: 110 | Input/Output: [(55 55 55 55) 55]
Test Case: 111 | Input/Output: [(-51 -51 -51 -51) -51]
Test Case: 112 | Input/Output: [(56 56 56 56) 56]
Test Case: 113 | Input/Output: [(70 70 70 70) 70]
Test Case: 114 | Input/Output: [(87 87 87 87) 87]
Test Case: 115 | Input/Output: [(-40 -40 -40 -40) -40]
Test Case: 116 | Input/Output: [(-56 -56 -56 -56) -56]
Test Case: 117 | Input/Output: [(33 33 33 33) 33]
Test Case: 118 | Input/Output: [(-66 -66 -66 -66) -66]
Test Case: 119 | Input/Output: [(60 60 60 60) 60]
Test Case: 120 | Input/Output: [(-59 -59 -59 -59) -59]
Test Case: 121 | Input/Output: [(-14 -14 -14 -14) -14]
Test Case: 122 | Input/Output: [(-91 -91 -91 -91) -91]
Test Case: 123 | Input/Output: [(31 31 31 31) 31]
Test Case: 124 | Input/Output: [(56 56 56 56) 56]
Test Case: 125 | Input/Output: [(7 7 7 7) 7]
Test Case: 126 | Input/Output: [(67 67 67 67) 67]
Test Case: 127 | Input/Output: [(-7 -7 -7 -7) -7]
Test Case: 128 | Input/Output: [(23 23 23 23) 23]
Test Case: 129 | Input/Output: [(-87 -87 -87 -87) -87]
Test Case: 130 | Input/Output: [(-11 -11 -11 -11) -11]
Test Case: 131 | Input/Output: [(-18 -18 -18 -18) -18]
Test Case: 132 | Input/Output: [(16 16 16 16) 16]
Test Case: 133 | Input/Output: [(64 64 64 64) 64]
Test Case: 134 | Input/Output: [(10 10 10 10) 10]
Test Case: 135 | Input/Output: [(-13 -13 -13 -13) -13]
Test Case: 136 | Input/Output: [(-84 -84 -84 -84) -84]
Test Case: 137 | Input/Output: [(13 13 13 13) 13]
Test Case: 138 | Input/Output: [(-81 -81 -81 -81) -81]
Test Case: 139 | Input/Output: [(-18 -18 -18 -18) -18]
Test Case: 140 | Input/Output: [(34 34 34 34) 34]
Test Case: 141 | Input/Output: [(76 76 76 76) 76]
Test Case: 142 | Input/Output: [(95 95 95 95) 95]
Test Case: 143 | Input/Output: [(-25 -25 -25 -25) -25]
Test Case: 144 | Input/Output: [(71 71 71 71) 71]
Test Case: 145 | Input/Output: [(54 54 54 54) 54]
Test Case: 146 | Input/Output: [(-78 -78 -78 -78) -78]
Test Case: 147 | Input/Output: [(57 57 57 57) 57]
Test Case: 148 | Input/Output: [(0 0 0 0) 0]
Test Case: 149 | Input/Output: [(12 12 12 12) 12]
Test Case: 150 | Input/Output: [(82 82 82 82) 82]
Test Case: 151 | Input/Output: [(90 90 90 90) 90]
Test Case: 152 | Input/Output: [(-47 -47 -47 -47) -47]
Test Case: 153 | Input/Output: [(-66 -66 -66 -66) -66]
Test Case: 154 | Input/Output: [(42 42 42 42) 42]
Test Case: 155 | Input/Output: [(43 43 43 43) 43]
Test Case: 156 | Input/Output: [(-37 -37 -37 -37) -37]
Test Case: 157 | Input/Output: [(51 51 51 51) 51]
Test Case: 158 | Input/Output: [(-17 -17 -17 -17) -17]
Test Case: 159 | Input/Output: [(76 76 76 76) 76]
Test Case: 160 | Input/Output: [(86 86 86 86) 86]
Test Case: 161 | Input/Output: [(11 11 11 11) 11]
Test Case: 162 | Input/Output: [(-25 -25 -25 -25) -25]
Test Case: 163 | Input/Output: [(-99 -99 -99 -99) -99]
Test Case: 164 | Input/Output: [(-3 -3 -3 -3) -3]
Test Case: 165 | Input/Output: [(78 78 78 78) 78]
Test Case: 166 | Input/Output: [(99 99 99 99) 99]
Test Case: 167 | Input/Output: [(-8 -8 -8 -8) -8]
Test Case: 168 | Input/Output: [(80 80 80 80) 80]
Test Case: 169 | Input/Output: [(-11 -11 -11 -11) -11]
Test Case: 170 | Input/Output: [(52 52 52 52) 52]
Test Case: 171 | Input/Output: [(100 100 100 100) 100]
Test Case: 172 | Input/Output: [(-4 -4 -4 -4) -4]
Test Case: 173 | Input/Output: [(41 41 41 41) 41]
Test Case: 174 | Input/Output: [(15 15 15 15) 15]
Test Case: 175 | Input/Output: [(-65 -65 -65 -65) -65]
Test Case: 176 | Input/Output: [(43 43 43 43) 43]
Test Case: 177 | Input/Output: [(-62 -62 -62 -62) -62]
Test Case: 178 | Input/Output: [(25 25 25 25) 25]
Test Case: 179 | Input/Output: [(-38 -38 -38 -38) -38]
Test Case: 180 | Input/Output: [(-21 -21 -21 -21) -21]
Test Case: 181 | Input/Output: [(-80 -80 -80 -80) -80]
Test Case: 182 | Input/Output: [(-47 -47 -47 -47) -47]
Test Case: 183 | Input/Output: [(23 23 23 23) 23]
Test Case: 184 | Input/Output: [(-52 -52 -52 -52) -52]
Test Case: 185 | Input/Output: [(28 28 28 28) 28]
Test Case: 186 | Input/Output: [(15 15 15 15) 15]
Test Case: 187 | Input/Output: [(85 85 85 85) 85]
Test Case: 188 | Input/Output: [(7 7 7 7) 7]
Test Case: 189 | Input/Output: [(-60 -60 -60 -60) -60]
Test Case: 190 | Input/Output: [(77 77 77 77) 77]
Test Case: 191 | Input/Output: [(60 60 60 60) 60]
Test Case: 192 | Input/Output: [(83 83 83 83) 83]
Test Case: 193 | Input/Output: [(96 96 96 96) 96]
Test Case: 194 | Input/Output: [(35 35 35 35) 35]
Test Case: 195 | Input/Output: [(33 33 33 33) 33]
Test Case: 196 | Input/Output: [(-3 -3 -3 -3) -3]
Test Case: 197 | Input/Output: [(-53 -53 -53 -53) -53]
Test Case: 198 | Input/Output: [(-32 -32 -32 -32) -32]
Test Case: 199 | Input/Output: [(-8 -8 -8 -8) -8]
Test Case: 200 | Input/Output: [(51 23 90 81) 23]
Test Case: 201 | Input/Output: [(87 7 73 17) 7]
Test Case: 202 | Input/Output: [(0 68 56 99) 0]
Test Case: 203 | Input/Output: [(81 12 33 6) 6]
Test Case: 204 | Input/Output: [(69 92 99 12) 12]
Test Case: 205 | Input/Output: [(65 32 22 26) 22]
Test Case: 206 | Input/Output: [(93 36 33 41) 33]
Test Case: 207 | Input/Output: [(99 45 62 19) 19]
Test Case: 208 | Input/Output: [(39 60 9 43) 9]
Test Case: 209 | Input/Output: [(41 25 44 6) 6]
Test Case: 210 | Input/Output: [(37 30 22 98) 22]
Test Case: 211 | Input/Output: [(81 43 33 42) 33]
Test Case: 212 | Input/Output: [(80 8 61 43) 8]
Test Case: 213 | Input/Output: [(3 45 17 40) 3]
Test Case: 214 | Input/Output: [(57 65 54 22) 22]
Test Case: 215 | Input/Output: [(60 26 23 44) 23]
Test Case: 216 | Input/Output: [(1 9 37 18) 1]
Test Case: 217 | Input/Output: [(15 50 65 39) 15]
Test Case: 218 | Input/Output: [(37 72 19 17) 17]
Test Case: 219 | Input/Output: [(38 34 48 41) 34]
Test Case: 220 | Input/Output: [(51 100 69 62) 51]
Test Case: 221 | Input/Output: [(52 72 0 9) 0]
Test Case: 222 | Input/Output: [(96 93 15 35) 15]
Test Case: 223 | Input/Output: [(93 73 56 77) 56]
Test Case: 224 | Input/Output: [(1 15 24 10) 1]
Test Case: 225 | Input/Output: [(97 70 90 35) 35]
Test Case: 226 | Input/Output: [(28 1 98 79) 1]
Test Case: 227 | Input/Output: [(59 30 78 12) 12]
Test Case: 228 | Input/Output: [(11 75 34 45) 11]
Test Case: 229 | Input/Output: [(26 36 48 62) 26]
Test Case: 230 | Input/Output: [(76 64 13 57) 13]
Test Case: 231 | Input/Output: [(93 5 31 58) 5]
Test Case: 232 | Input/Output: [(17 97 3 55) 3]
Test Case: 233 | Input/Output: [(97 22 50 12) 12]
Test Case: 234 | Input/Output: [(69 84 46 37) 37]
Test Case: 235 | Input/Output: [(33 1 53 95) 1]
Test Case: 236 | Input/Output: [(14 89 98 0) 0]
Test Case: 237 | Input/Output: [(50 3 55 62) 3]
Test Case: 238 | Input/Output: [(59 92 60 73) 59]
Test Case: 239 | Input/Output: [(90 93 75 0) 0]
Test Case: 240 | Input/Output: [(0 73 50 96) 0]
Test Case: 241 | Input/Output: [(50 24 50 18) 18]
Test Case: 242 | Input/Output: [(70 64 65 63) 63]
Test Case: 243 | Input/Output: [(88 1 75 81) 1]
Test Case: 244 | Input/Output: [(79 80 40 63) 40]
Test Case: 245 | Input/Output: [(45 75 95 6) 6]
Test Case: 246 | Input/Output: [(43 58 55 29) 29]
Test Case: 247 | Input/Output: [(4 45 62 53) 4]
Test Case: 248 | Input/Output: [(43 40 32 34) 32]
Test Case: 249 | Input/Output: [(45 90 43 38) 38]
Test Case: 250 | Input/Output: [(49 11 86 25) 11]
Test Case: 251 | Input/Output: [(55 38 10 1) 1]
Test Case: 252 | Input/Output: [(21 39 63 1) 1]
Test Case: 253 | Input/Output: [(63 100 56 81) 56]
Test Case: 254 | Input/Output: [(46 61 3 43) 3]
Test Case: 255 | Input/Output: [(62 57 35 75) 35]
Test Case: 256 | Input/Output: [(88 41 38 3) 3]
Test Case: 257 | Input/Output: [(18 25 41 40) 18]
Test Case: 258 | Input/Output: [(92 17 68 64) 17]
Test Case: 259 | Input/Output: [(29 98 90 98) 29]
Test Case: 260 | Input/Output: [(28 30 19 95) 19]
Test Case: 261 | Input/Output: [(82 84 2 54) 2]
Test Case: 262 | Input/Output: [(95 12 17 24) 12]
Test Case: 263 | Input/Output: [(41 31 59 43) 31]
Test Case: 264 | Input/Output: [(8 99 3 23) 3]
Test Case: 265 | Input/Output: [(96 29 25 17) 17]
Test Case: 266 | Input/Output: [(43 22 68 8) 8]
Test Case: 267 | Input/Output: [(95 16 69 4) 4]
Test Case: 268 | Input/Output: [(24 63 54 33) 24]
Test Case: 269 | Input/Output: [(25 54 6 25) 6]
Test Case: 270 | Input/Output: [(47 15 48 12) 12]
Test Case: 271 | Input/Output: [(68 46 33 97) 33]
Test Case: 272 | Input/Output: [(43 53 37 60) 37]
Test Case: 273 | Input/Output: [(94 21 66 35) 21]
Test Case: 274 | Input/Output: [(40 57 13 19) 13]
Test Case: 275 | Input/Output: [(90 9 50 62) 9]
Test Case: 276 | Input/Output: [(15 74 32 6) 6]
Test Case: 277 | Input/Output: [(43 52 66 5) 5]
Test Case: 278 | Input/Output: [(42 74 8 21) 8]
Test Case: 279 | Input/Output: [(92 79 21 84) 21]
Test Case: 280 | Input/Output: [(75 22 57 55) 22]
Test Case: 281 | Input/Output: [(54 45 34 18) 18]
Test Case: 282 | Input/Output: [(52 57 55 28) 28]
Test Case: 283 | Input/Output: [(6 67 30 27) 6]
Test Case: 284 | Input/Output: [(38 60 36 100) 36]
Test Case: 285 | Input/Output: [(81 3 3 15) 3]
Test Case: 286 | Input/Output: [(61 52 0 71) 0]
Test Case: 287 | Input/Output: [(74 7 11 50) 7]
Test Case: 288 | Input/Output: [(92 66 86 53) 53]
Test Case: 289 | Input/Output: [(94 84 55 4) 4]
Test Case: 290 | Input/Output: [(64 79 8 31) 8]
Test Case: 291 | Input/Output: [(77 16 51 34) 16]
Test Case: 292 | Input/Output: [(69 43 76 49) 43]
Test Case: 293 | Input/Output: [(13 33 37 63) 13]
Test Case: 294 | Input/Output: [(20 30 47 43) 20]
Test Case: 295 | Input/Output: [(63 44 20 6) 6]
Test Case: 296 | Input/Output: [(71 46 13 64) 13]
Test Case: 297 | Input/Output: [(79 42 71 23) 23]
Test Case: 298 | Input/Output: [(66 24 47 30) 24]
Test Case: 299 | Input/Output: [(5 82 68 100) 5]
Test Case: 300 | Input/Output: [(11 21 18 66) 11]
Test Case: 301 | Input/Output: [(92 99 1 42) 1]
Test Case: 302 | Input/Output: [(55 8 83 48) 8]
Test Case: 303 | Input/Output: [(8 76 98 80) 8]
Test Case: 304 | Input/Output: [(100 84 26 82) 26]
Test Case: 305 | Input/Output: [(15 28 65 5) 5]
Test Case: 306 | Input/Output: [(17 26 34 23) 17]
Test Case: 307 | Input/Output: [(69 59 64 20) 20]
Test Case: 308 | Input/Output: [(10 97 54 66) 10]
Test Case: 309 | Input/Output: [(11 79 73 88) 11]
Test Case: 310 | Input/Output: [(59 87 50 65) 50]
Test Case: 311 | Input/Output: [(76 44 51 86) 44]
Test Case: 312 | Input/Output: [(80 66 11 3) 3]
Test Case: 313 | Input/Output: [(97 38 68 9) 9]
Test Case: 314 | Input/Output: [(70 17 50 72) 17]
Test Case: 315 | Input/Output: [(28 90 34 8) 8]
Test Case: 316 | Input/Output: [(34 16 76 71) 16]
Test Case: 317 | Input/Output: [(75 25 71 75) 25]
Test Case: 318 | Input/Output: [(71 70 37 80) 37]
Test Case: 319 | Input/Output: [(34 19 23 97) 19]
Test Case: 320 | Input/Output: [(65 96 56 68) 56]
Test Case: 321 | Input/Output: [(7 58 27 49) 7]
Test Case: 322 | Input/Output: [(47 15 93 74) 15]
Test Case: 323 | Input/Output: [(21 85 36 72) 21]
Test Case: 324 | Input/Output: [(91 94 34 8) 8]
Test Case: 325 | Input/Output: [(6 94 4 14) 4]
Test Case: 326 | Input/Output: [(21 18 79 97) 18]
Test Case: 327 | Input/Output: [(70 100 76 25) 25]
Test Case: 328 | Input/Output: [(97 60 25 78) 25]
Test Case: 329 | Input/Output: [(90 26 98 96) 26]
Test Case: 330 | Input/Output: [(29 32 83 85) 29]
Test Case: 331 | Input/Output: [(51 45 8 79) 8]
Test Case: 332 | Input/Output: [(56 46 79 61) 46]
Test Case: 333 | Input/Output: [(72 87 11 31) 11]
Test Case: 334 | Input/Output: [(44 11 8 88) 8]
Test Case: 335 | Input/Output: [(71 68 96 98) 68]
Test Case: 336 | Input/Output: [(67 9 94 52) 9]
Test Case: 337 | Input/Output: [(61 8 61 23) 8]
Test Case: 338 | Input/Output: [(25 79 33 92) 25]
Test Case: 339 | Input/Output: [(58 7 19 44) 7]
Test Case: 340 | Input/Output: [(59 86 62 17) 17]
Test Case: 341 | Input/Output: [(58 18 19 85) 18]
Test Case: 342 | Input/Output: [(0 9 31 44) 0]
Test Case: 343 | Input/Output: [(57 43 24 53) 24]
Test Case: 344 | Input/Output: [(63 43 5 12) 5]
Test Case: 345 | Input/Output: [(36 30 2 56) 2]
Test Case: 346 | Input/Output: [(57 20 39 91) 20]
Test Case: 347 | Input/Output: [(42 100 93 63) 42]
Test Case: 348 | Input/Output: [(80 42 40 81) 40]
Test Case: 349 | Input/Output: [(20 80 89 56) 20]
Test Case: 350 | Input/Output: [(30 45 82 84) 30]
Test Case: 351 | Input/Output: [(48 76 9 24) 9]
Test Case: 352 | Input/Output: [(7 71 9 46) 7]
Test Case: 353 | Input/Output: [(69 18 62 13) 13]
Test Case: 354 | Input/Output: [(0 36 83 68) 0]
Test Case: 355 | Input/Output: [(36 27 49 63) 27]
Test Case: 356 | Input/Output: [(82 24 11 85) 11]
Test Case: 357 | Input/Output: [(89 77 93 10) 10]
Test Case: 358 | Input/Output: [(43 44 98 71) 43]
Test Case: 359 | Input/Output: [(48 47 65 53) 47]
Test Case: 360 | Input/Output: [(47 89 4 8) 4]
Test Case: 361 | Input/Output: [(2 86 78 53) 2]
Test Case: 362 | Input/Output: [(96 25 73 81) 25]
Test Case: 363 | Input/Output: [(44 56 17 2) 2]
Test Case: 364 | Input/Output: [(10 71 62 34) 10]
Test Case: 365 | Input/Output: [(19 52 81 5) 5]
Test Case: 366 | Input/Output: [(34 77 17 40) 17]
Test Case: 367 | Input/Output: [(36 38 87 33) 33]
Test Case: 368 | Input/Output: [(98 13 20 83) 13]
Test Case: 369 | Input/Output: [(73 58 10 81) 10]
Test Case: 370 | Input/Output: [(59 71 95 39) 39]
Test Case: 371 | Input/Output: [(34 15 91 95) 15]
Test Case: 372 | Input/Output: [(42 20 64 16) 16]
Test Case: 373 | Input/Output: [(59 15 52 61) 15]
Test Case: 374 | Input/Output: [(28 13 4 89) 4]
Test Case: 375 | Input/Output: [(82 96 36 11) 11]
Test Case: 376 | Input/Output: [(11 56 20 32) 11]
Test Case: 377 | Input/Output: [(67 48 25 57) 25]
Test Case: 378 | Input/Output: [(75 3 6 46) 3]
Test Case: 379 | Input/Output: [(36 65 10 20) 10]
Test Case: 380 | Input/Output: [(31 83 19 85) 19]
Test Case: 381 | Input/Output: [(15 84 49 50) 15]
Test Case: 382 | Input/Output: [(18 81 47 57) 18]
Test Case: 383 | Input/Output: [(75 32 5 14) 5]
Test Case: 384 | Input/Output: [(18 18 38 27) 18]
Test Case: 385 | Input/Output: [(75 93 85 4) 4]
Test Case: 386 | Input/Output: [(88 100 74 7) 7]
Test Case: 387 | Input/Output: [(72 27 7 71) 7]
Test Case: 388 | Input/Output: [(67 12 66 51) 12]
Test Case: 389 | Input/Output: [(85 84 24 35) 24]
Test Case: 390 | Input/Output: [(35 56 22 8) 8]
Test Case: 391 | Input/Output: [(18 70 25 45) 18]
Test Case: 392 | Input/Output: [(64 82 83 97) 64]
Test Case: 393 | Input/Output: [(48 20 40 100) 20]
Test Case: 394 | Input/Output: [(31 69 40 19) 19]
Test Case: 395 | Input/Output: [(31 96 40 82) 31]
Test Case: 396 | Input/Output: [(13 90 36 57) 13]
Test Case: 397 | Input/Output: [(93 36 48 47) 36]
Test Case: 398 | Input/Output: [(22 95 26 26) 22]
Test Case: 399 | Input/Output: [(68 25 0 31) 0]
Test Case: 400 | Input/Output: [(38 23 -86 3) -86]
Test Case: 401 | Input/Output: [(-91 -56 -38 -40) -91]
Test Case: 402 | Input/Output: [(29 -56 -38 84) -56]
Test Case: 403 | Input/Output: [(-8 -29 -88 97) -88]
Test Case: 404 | Input/Output: [(-83 42 -9 56) -83]
Test Case: 405 | Input/Output: [(-43 81 37 43) -43]
Test Case: 406 | Input/Output: [(32 52 -18 72) -18]
Test Case: 407 | Input/Output: [(-64 -50 12 77) -64]
Test Case: 408 | Input/Output: [(11 -36 20 -29) -36]
Test Case: 409 | Input/Output: [(58 -94 -86 -81) -94]
Test Case: 410 | Input/Output: [(-39 -99 -64 37) -99]
Test Case: 411 | Input/Output: [(17 32 -37 97) -37]
Test Case: 412 | Input/Output: [(14 -47 68 -23) -47]
Test Case: 413 | Input/Output: [(-9 86 -98 -88) -98]
Test Case: 414 | Input/Output: [(-25 -49 -62 0) -62]
Test Case: 415 | Input/Output: [(-4 -28 -11 57) -28]
Test Case: 416 | Input/Output: [(62 -51 53 -11) -51]
Test Case: 417 | Input/Output: [(-28 -6 2 98) -28]
Test Case: 418 | Input/Output: [(27 56 41 -66) -66]
Test Case: 419 | Input/Output: [(51 -3 82 -41) -41]
Test Case: 420 | Input/Output: [(-92 54 -53 -69) -92]
Test Case: 421 | Input/Output: [(-63 35 11 -23) -63]
Test Case: 422 | Input/Output: [(-98 -71 74 35) -98]
Test Case: 423 | Input/Output: [(24 -67 -4 -55) -67]
Test Case: 424 | Input/Output: [(46 -69 19 75) -69]
Test Case: 425 | Input/Output: [(72 -77 82 89) -77]
Test Case: 426 | Input/Output: [(5 22 -53 45) -53]
Test Case: 427 | Input/Output: [(-51 -19 -96 65) -96]
Test Case: 428 | Input/Output: [(87 34 93 25) 25]
Test Case: 429 | Input/Output: [(89 -39 19 41) -39]
Test Case: 430 | Input/Output: [(35 86 58 -6) -6]
Test Case: 431 | Input/Output: [(-35 -100 -62 24) -100]
Test Case: 432 | Input/Output: [(98 -5 3 67) -5]
Test Case: 433 | Input/Output: [(-1 -15 -12 78) -15]
Test Case: 434 | Input/Output: [(-48 37 -71 92) -71]
Test Case: 435 | Input/Output: [(-50 -86 -18 60) -86]
Test Case: 436 | Input/Output: [(-86 68 -31 -47) -86]
Test Case: 437 | Input/Output: [(-91 -22 100 -3) -91]
Test Case: 438 | Input/Output: [(96 82 32 33) 32]
Test Case: 439 | Input/Output: [(27 -67 19 59) -67]
Test Case: 440 | Input/Output: [(38 -23 30 90) -23]
Test Case: 441 | Input/Output: [(-50 40 18 8) -50]
Test Case: 442 | Input/Output: [(-55 -80 3 -49) -80]
Test Case: 443 | Input/Output: [(32 -93 -59 -81) -93]
Test Case: 444 | Input/Output: [(-65 -6 24 63) -65]
Test Case: 445 | Input/Output: [(48 -26 48 -48) -48]
Test Case: 446 | Input/Output: [(-44 -25 -37 66) -44]
Test Case: 447 | Input/Output: [(-82 96 -22 -63) -82]
Test Case: 448 | Input/Output: [(-8 24 -60 -1) -60]
Test Case: 449 | Input/Output: [(46 54 -13 -76) -76]
Test Case: 450 | Input/Output: [(85 87 22 43) 22]
Test Case: 451 | Input/Output: [(27 43 -80 14) -80]
Test Case: 452 | Input/Output: [(66 50 -70 45) -70]
Test Case: 453 | Input/Output: [(34 18 47 -5) -5]
Test Case: 454 | Input/Output: [(18 18 7 88) 7]
Test Case: 455 | Input/Output: [(47 36 47 96) 36]
Test Case: 456 | Input/Output: [(78 -85 -33 10) -85]
Test Case: 457 | Input/Output: [(-79 100 -88 -17) -88]
Test Case: 458 | Input/Output: [(96 -43 28 21) -43]
Test Case: 459 | Input/Output: [(40 73 40 -66) -66]
Test Case: 460 | Input/Output: [(79 99 85 16) 16]
Test Case: 461 | Input/Output: [(85 41 -10 36) -10]
Test Case: 462 | Input/Output: [(-13 -47 63 13) -47]
Test Case: 463 | Input/Output: [(73 -82 73 -52) -82]
Test Case: 464 | Input/Output: [(61 -89 65 34) -89]
Test Case: 465 | Input/Output: [(56 -17 -97 -61) -97]
Test Case: 466 | Input/Output: [(93 -36 -37 -66) -66]
Test Case: 467 | Input/Output: [(-53 -86 4 -26) -86]
Test Case: 468 | Input/Output: [(-40 51 10 -7) -40]
Test Case: 469 | Input/Output: [(38 19 46 -18) -18]
Test Case: 470 | Input/Output: [(46 3 -61 62) -61]
Test Case: 471 | Input/Output: [(-70 -17 -57 58) -70]
Test Case: 472 | Input/Output: [(47 -19 14 87) -19]
Test Case: 473 | Input/Output: [(-27 25 35 -85) -85]
Test Case: 474 | Input/Output: [(26 -94 1 -27) -94]
Test Case: 475 | Input/Output: [(61 22 62 -11) -11]
Test Case: 476 | Input/Output: [(-85 91 40 -39) -85]
Test Case: 477 | Input/Output: [(-15 -19 46 -56) -56]
Test Case: 478 | Input/Output: [(79 68 18 -47) -47]
Test Case: 479 | Input/Output: [(-10 74 -2 59) -10]
Test Case: 480 | Input/Output: [(-86 -54 5 -2) -86]
Test Case: 481 | Input/Output: [(25 -16 -6 -19) -19]
Test Case: 482 | Input/Output: [(0 27 14 11) 0]
Test Case: 483 | Input/Output: [(-15 73 -64 68) -64]
Test Case: 484 | Input/Output: [(-48 -34 -66 -74) -74]
Test Case: 485 | Input/Output: [(-39 81 -16 24) -39]
Test Case: 486 | Input/Output: [(94 9 -4 -16) -16]
Test Case: 487 | Input/Output: [(98 99 45 -32) -32]
Test Case: 488 | Input/Output: [(85 -98 -10 91) -98]
Test Case: 489 | Input/Output: [(-20 19 44 16) -20]
Test Case: 490 | Input/Output: [(-10 1 -62 25) -62]
Test Case: 491 | Input/Output: [(95 59 94 24) 24]
Test Case: 492 | Input/Output: [(86 48 -8 -18) -18]
Test Case: 493 | Input/Output: [(52 54 53 78) 52]
Test Case: 494 | Input/Output: [(49 -100 19 -37) -100]
Test Case: 495 | Input/Output: [(97 -54 94 -42) -54]
Test Case: 496 | Input/Output: [(61 -90 19 -36) -90]
Test Case: 497 | Input/Output: [(-78 32 -45 -10) -78]
Test Case: 498 | Input/Output: [(28 -1 -77 62) -77]
Test Case: 499 | Input/Output: [(30 -26 -18 17) -26]
Test Case: 500 | Input/Output: [(-2 -72 52 17) -72]
Test Case: 501 | Input/Output: [(-51 -99 -97 64) -99]
Test Case: 502 | Input/Output: [(-23 27 -16 4) -23]
Test Case: 503 | Input/Output: [(-60 53 -95 -96) -96]
Test Case: 504 | Input/Output: [(-85 -62 -6 -91) -91]
Test Case: 505 | Input/Output: [(79 -6 -98 -18) -98]
Test Case: 506 | Input/Output: [(64 -54 60 -69) -69]
Test Case: 507 | Input/Output: [(-16 49 75 -9) -16]
Test Case: 508 | Input/Output: [(68 57 10 -61) -61]
Test Case: 509 | Input/Output: [(11 -65 87 76) -65]
Test Case: 510 | Input/Output: [(8 -47 -63 -27) -63]
Test Case: 511 | Input/Output: [(-61 -91 -51 26) -91]
Test Case: 512 | Input/Output: [(43 59 18 48) 18]
Test Case: 513 | Input/Output: [(-62 19 -59 -29) -62]
Test Case: 514 | Input/Output: [(-51 -31 30 -69) -69]
Test Case: 515 | Input/Output: [(-88 59 -65 -26) -88]
Test Case: 516 | Input/Output: [(-33 -6 24 -14) -33]
Test Case: 517 | Input/Output: [(16 -20 69 54) -20]
Test Case: 518 | Input/Output: [(80 98 -29 13) -29]
Test Case: 519 | Input/Output: [(71 -55 -21 28) -55]
Test Case: 520 | Input/Output: [(77 60 13 -94) -94]
Test Case: 521 | Input/Output: [(-80 -9 64 -44) -80]
Test Case: 522 | Input/Output: [(-83 85 100 -16) -83]
Test Case: 523 | Input/Output: [(7 90 -39 90) -39]
Test Case: 524 | Input/Output: [(-39 -97 49 -76) -97]
Test Case: 525 | Input/Output: [(-52 -56 -42 -25) -56]
Test Case: 526 | Input/Output: [(-45 93 -34 73) -45]
Test Case: 527 | Input/Output: [(52 -21 -32 -82) -82]
Test Case: 528 | Input/Output: [(-26 82 -24 64) -26]
Test Case: 529 | Input/Output: [(34 -16 -64 53) -64]
Test Case: 530 | Input/Output: [(94 -59 39 45) -59]
Test Case: 531 | Input/Output: [(40 -59 -7 -31) -59]
Test Case: 532 | Input/Output: [(63 91 -20 72) -20]
Test Case: 533 | Input/Output: [(-48 23 91 21) -48]
Test Case: 534 | Input/Output: [(4 -99 -26 -43) -99]
Test Case: 535 | Input/Output: [(-43 -95 24 13) -95]
Test Case: 536 | Input/Output: [(87 -81 -72 42) -81]
Test Case: 537 | Input/Output: [(-9 47 2 -48) -48]
Test Case: 538 | Input/Output: [(45 -31 19 -54) -54]
Test Case: 539 | Input/Output: [(55 36 -92 -79) -92]
Test Case: 540 | Input/Output: [(50 -81 -61 -52) -81]
Test Case: 541 | Input/Output: [(-77 48 -18 -67) -77]
Test Case: 542 | Input/Output: [(20 93 -8 13) -8]
Test Case: 543 | Input/Output: [(29 78 -19 -77) -77]
Test Case: 544 | Input/Output: [(-37 3 76 -89) -89]
Test Case: 545 | Input/Output: [(95 -62 66 68) -62]
Test Case: 546 | Input/Output: [(86 74 55 29) 29]
Test Case: 547 | Input/Output: [(14 12 35 86) 12]
Test Case: 548 | Input/Output: [(-3 23 63 -66) -66]
Test Case: 549 | Input/Output: [(75 63 66 35) 35]
Test Case: 550 | Input/Output: [(11 -56 76 -77) -77]
Test Case: 551 | Input/Output: [(39 15 -51 -56) -56]
Test Case: 552 | Input/Output: [(54 -5 -38 -14) -38]
Test Case: 553 | Input/Output: [(-3 34 -59 54) -59]
Test Case: 554 | Input/Output: [(-55 -83 -88 68) -88]
Test Case: 555 | Input/Output: [(72 -97 38 -12) -97]
Test Case: 556 | Input/Output: [(42 36 94 88) 36]
Test Case: 557 | Input/Output: [(-69 1 -47 7) -69]
Test Case: 558 | Input/Output: [(16 -27 -41 -36) -41]
Test Case: 559 | Input/Output: [(-73 66 27 86) -73]
Test Case: 560 | Input/Output: [(-50 9 -30 -14) -50]
Test Case: 561 | Input/Output: [(-82 25 26 62) -82]
Test Case: 562 | Input/Output: [(26 93 31 -84) -84]
Test Case: 563 | Input/Output: [(-1 78 61 -92) -92]
Test Case: 564 | Input/Output: [(-84 2 80 74) -84]
Test Case: 565 | Input/Output: [(51 32 47 -76) -76]
Test Case: 566 | Input/Output: [(97 -37 -54 -61) -61]
Test Case: 567 | Input/Output: [(1 -78 8 6) -78]
Test Case: 568 | Input/Output: [(-90 -67 -32 -11) -90]
Test Case: 569 | Input/Output: [(50 55 -5 -88) -88]
Test Case: 570 | Input/Output: [(-66 -53 -91 -19) -91]
Test Case: 571 | Input/Output: [(-87 35 -95 -92) -95]
Test Case: 572 | Input/Output: [(-91 79 97 -78) -91]
Test Case: 573 | Input/Output: [(67 -38 -81 -47) -81]
Test Case: 574 | Input/Output: [(-46 -25 -13 -94) -94]
Test Case: 575 | Input/Output: [(-3 88 -22 -17) -22]
Test Case: 576 | Input/Output: [(87 -30 -55 -45) -55]
Test Case: 577 | Input/Output: [(77 -32 -53 83) -53]
Test Case: 578 | Input/Output: [(23 10 -70 35) -70]
Test Case: 579 | Input/Output: [(95 90 21 -70) -70]
Test Case: 580 | Input/Output: [(-100 -50 -37 95) -100]
Test Case: 581 | Input/Output: [(-3 -40 -79 -15) -79]
Test Case: 582 | Input/Output: [(33 74 -26 -63) -63]
Test Case: 583 | Input/Output: [(13 -10 42 -20) -20]
Test Case: 584 | Input/Output: [(-94 33 -59 -29) -94]
Test Case: 585 | Input/Output: [(-77 93 94 -66) -77]
Test Case: 586 | Input/Output: [(42 82 15 -23) -23]
Test Case: 587 | Input/Output: [(-49 86 -60 -45) -60]
Test Case: 588 | Input/Output: [(-32 15 -92 -7) -92]
Test Case: 589 | Input/Output: [(-63 -21 -93 -63) -93]
Test Case: 590 | Input/Output: [(-61 -31 45 36) -61]
Test Case: 591 | Input/Output: [(82 10 -76 -51) -76]
Test Case: 592 | Input/Output: [(-62 -55 23 -87) -87]
Test Case: 593 | Input/Output: [(-25 -43 70 -83) -83]
Test Case: 594 | Input/Output: [(22 78 68 -37) -37]
Test Case: 595 | Input/Output: [(56 40 -62 93) -62]
Test Case: 596 | Input/Output: [(19 10 -58 -27) -58]
Test Case: 597 | Input/Output: [(77 65 11 -29) -29]
Test Case: 598 | Input/Output: [(51 98 34 41) 34]
Test Case: 599 | Input/Output: [(67 -72 34 -40) -72]
Test Case: 600 | Input/Output: [(-84 -9 -96 95) -96]
Test Case: 601 | Input/Output: [(89 -28 -32 82) -32]
Test Case: 602 | Input/Output: [(30 13 66 36) 13]
Test Case: 603 | Input/Output: [(14 -37 55 -75) -75]
Test Case: 604 | Input/Output: [(-49 15 21 22) -49]
Test Case: 605 | Input/Output: [(4 73 -27 45) -27]
Test Case: 606 | Input/Output: [(-32 34 13 13) -32]
Test Case: 607 | Input/Output: [(17 -20 55 -79) -79]
Test Case: 608 | Input/Output: [(-47 -58 -16 0) -58]
Test Case: 609 | Input/Output: [(-38 -76 -93 -25) -93]
Test Case: 610 | Input/Output: [(59 -83 99 -81) -83]
Test Case: 611 | Input/Output: [(-84 -5 94 15) -84]
Test Case: 612 | Input/Output: [(-27 -45 0 46) -45]
Test Case: 613 | Input/Output: [(27 -38 -49 -29) -49]
Test Case: 614 | Input/Output: [(69 -21 37 10) -21]
Test Case: 615 | Input/Output: [(68 -99 -98 73) -99]
Test Case: 616 | Input/Output: [(-98 -63 33 71) -98]
Test Case: 617 | Input/Output: [(52 -24 -71 64) -71]
Test Case: 618 | Input/Output: [(-13 52 -31 98) -31]
Test Case: 619 | Input/Output: [(-8 -94 -74 -12) -94]
Test Case: 620 | Input/Output: [(-37 100 55 49) -37]
Test Case: 621 | Input/Output: [(-5 86 99 26) -5]
Test Case: 622 | Input/Output: [(-89 -8 98 -86) -89]
Test Case: 623 | Input/Output: [(60 55 -61 -100) -100]
Test Case: 624 | Input/Output: [(25 37 -8 51) -8]
Test Case: 625 | Input/Output: [(-25 75 -20 77) -25]
Test Case: 626 | Input/Output: [(-75 65 -75 5) -75]
Test Case: 627 | Input/Output: [(19 -66 72 28) -66]
Test Case: 628 | Input/Output: [(79 87 35 64) 35]
Test Case: 629 | Input/Output: [(82 -43 58 -1) -43]
Test Case: 630 | Input/Output: [(-65 82 -56 -47) -65]
Test Case: 631 | Input/Output: [(6 -62 58 -77) -77]
Test Case: 632 | Input/Output: [(-1 -62 51 -87) -87]
Test Case: 633 | Input/Output: [(31 7 -98 19) -98]
Test Case: 634 | Input/Output: [(81 -70 39 -93) -93]
Test Case: 635 | Input/Output: [(88 -64 9 15) -64]
Test Case: 636 | Input/Output: [(4 10 -43 -6) -43]
Test Case: 637 | Input/Output: [(-41 -25 60 17) -41]
Test Case: 638 | Input/Output: [(-64 -40 11 -78) -78]
Test Case: 639 | Input/Output: [(-77 -29 -22 -40) -77]
Test Case: 640 | Input/Output: [(-22 91 26 -21) -22]
Test Case: 641 | Input/Output: [(89 35 -66 -23) -66]
Test Case: 642 | Input/Output: [(-67 -99 -97 -87) -99]
Test Case: 643 | Input/Output: [(-14 -56 1 7) -56]
Test Case: 644 | Input/Output: [(35 -97 39 -38) -97]
Test Case: 645 | Input/Output: [(-29 -100 36 84) -100]
Test Case: 646 | Input/Output: [(-23 35 27 52) -23]
Test Case: 647 | Input/Output: [(55 -93 -23 -55) -93]
Test Case: 648 | Input/Output: [(-21 -37 -75 71) -75]
Test Case: 649 | Input/Output: [(-8 14 47 84) -8]
Test Case: 650 | Input/Output: [(-29 -44 -64 -52) -64]
Test Case: 651 | Input/Output: [(-94 70 -18 -47) -94]
Test Case: 652 | Input/Output: [(11 -79 88 96) -79]
Test Case: 653 | Input/Output: [(-21 40 -67 29) -67]
Test Case: 654 | Input/Output: [(-26 -46 -17 -14) -46]
Test Case: 655 | Input/Output: [(37 -33 -28 13) -33]
Test Case: 656 | Input/Output: [(73 -85 47 3) -85]
Test Case: 657 | Input/Output: [(59 -66 65 35) -66]
Test Case: 658 | Input/Output: [(-98 16 39 30) -98]
Test Case: 659 | Input/Output: [(45 4 -73 6) -73]
Test Case: 660 | Input/Output: [(15 75 -8 -38) -38]
Test Case: 661 | Input/Output: [(47 51 -9 -78) -78]
Test Case: 662 | Input/Output: [(-20 -41 -5 -62) -62]
Test Case: 663 | Input/Output: [(-74 -73 37 46) -74]
Test Case: 664 | Input/Output: [(-15 -36 35 -24) -36]
Test Case: 665 | Input/Output: [(2 28 6 -9) -9]
Test Case: 666 | Input/Output: [(-61 1 73 38) -61]
Test Case: 667 | Input/Output: [(48 19 -40 68) -40]
Test Case: 668 | Input/Output: [(-45 -54 10 80) -54]
Test Case: 669 | Input/Output: [(-28 92 -96 73) -96]
Test Case: 670 | Input/Output: [(54 -45 -34 -41) -45]
Test Case: 671 | Input/Output: [(41 -16 33 5) -16]
Test Case: 672 | Input/Output: [(-64 57 26 28) -64]
Test Case: 673 | Input/Output: [(59 -90 56 -54) -90]
Test Case: 674 | Input/Output: [(19 18 -5 -45) -45]
Test Case: 675 | Input/Output: [(97 -59 35 -31) -59]
Test Case: 676 | Input/Output: [(-16 -51 -99 -10) -99]
Test Case: 677 | Input/Output: [(96 -62 -44 49) -62]
Test Case: 678 | Input/Output: [(-41 17 -51 39) -51]
Test Case: 679 | Input/Output: [(41 -26 -30 96) -30]
Test Case: 680 | Input/Output: [(74 100 24 -27) -27]
Test Case: 681 | Input/Output: [(-32 -85 -73 -95) -95]
Test Case: 682 | Input/Output: [(56 18 86 40) 18]
Test Case: 683 | Input/Output: [(14 49 60 -86) -86]
Test Case: 684 | Input/Output: [(-29 -94 52 86) -94]
Test Case: 685 | Input/Output: [(-89 -89 -62 -4) -89]
Test Case: 686 | Input/Output: [(23 -75 -63 27) -75]
Test Case: 687 | Input/Output: [(-74 -81 -59 -68) -81]
Test Case: 688 | Input/Output: [(-67 -100 -49 62) -100]
Test Case: 689 | Input/Output: [(-32 -76 -71 92) -76]
Test Case: 690 | Input/Output: [(49 18 79 4) 4]
Test Case: 691 | Input/Output: [(-57 28 89 -14) -57]
Test Case: 692 | Input/Output: [(-93 8 -79 -54) -93]
Test Case: 693 | Input/Output: [(37 86 -54 97) -54]
Test Case: 694 | Input/Output: [(-76 42 -41 95) -76]
Test Case: 695 | Input/Output: [(88 -29 -36 -34) -36]
Test Case: 696 | Input/Output: [(87 -85 17 -16) -85]
Test Case: 697 | Input/Output: [(-49 -70 78 1) -70]
Test Case: 698 | Input/Output: [(-5 -92 -3 82) -92]
Test Case: 699 | Input/Output: [(50 -30 -71 -30) -71]
Test Case: 700 | Input/Output: [(24 60 80 -10) -10]
Test Case: 701 | Input/Output: [(-12 -35 94 -97) -97]
Test Case: 702 | Input/Output: [(5 -54 -35 9) -54]
Test Case: 703 | Input/Output: [(95 0 -99 40) -99]
Test Case: 704 | Input/Output: [(-30 35 -77 29) -77]
Test Case: 705 | Input/Output: [(-31 -17 21 -95) -95]
Test Case: 706 | Input/Output: [(-47 78 -59 65) -59]
Test Case: 707 | Input/Output: [(53 60 77 65) 53]
Test Case: 708 | Input/Output: [(34 -37 88 -75) -75]
Test Case: 709 | Input/Output: [(46 -90 42 65) -90]
Test Case: 710 | Input/Output: [(90 -53 -62 -94) -94]
Test Case: 711 | Input/Output: [(-3 -85 -36 -48) -85]
Test Case: 712 | Input/Output: [(-96 -60 -66 90) -96]
Test Case: 713 | Input/Output: [(38 -58 -68 21) -68]
Test Case: 714 | Input/Output: [(-30 -71 -54 -35) -71]
Test Case: 715 | Input/Output: [(-58 92 99 45) -58]
Test Case: 716 | Input/Output: [(9 -60 64 83) -60]
Test Case: 717 | Input/Output: [(-47 30 74 -40) -47]
Test Case: 718 | Input/Output: [(99 16 16 -86) -86]
Test Case: 719 | Input/Output: [(56 -53 -49 -99) -99]
Test Case: 720 | Input/Output: [(96 82 -56 -100) -100]
Test Case: 721 | Input/Output: [(-63 -24 -46 -42) -63]
Test Case: 722 | Input/Output: [(-34 -9 91 33) -34]
Test Case: 723 | Input/Output: [(87 -28 -40 -65) -65]
Test Case: 724 | Input/Output: [(34 40 51 34) 34]
Test Case: 725 | Input/Output: [(80 27 18 -93) -93]
Test Case: 726 | Input/Output: [(-15 40 -55 27) -55]
Test Case: 727 | Input/Output: [(-8 73 -29 14) -29]
Test Case: 728 | Input/Output: [(-80 -11 -50 76) -80]
Test Case: 729 | Input/Output: [(-6 21 -90 93) -90]
Test Case: 730 | Input/Output: [(10 -47 -73 -63) -73]
Test Case: 731 | Input/Output: [(3 40 -97 20) -97]
Test Case: 732 | Input/Output: [(-88 -4 62 59) -88]
Test Case: 733 | Input/Output: [(-92 69 -57 -39) -92]
Test Case: 734 | Input/Output: [(-88 -47 24 -90) -90]
Test Case: 735 | Input/Output: [(65 46 -79 0) -79]
Test Case: 736 | Input/Output: [(30 -53 42 7) -53]
Test Case: 737 | Input/Output: [(71 -87 30 -8) -87]
Test Case: 738 | Input/Output: [(-56 -23 58 26) -56]
Test Case: 739 | Input/Output: [(-27 -18 13 16) -27]
Test Case: 740 | Input/Output: [(16 89 86 -95) -95]
Test Case: 741 | Input/Output: [(-26 -92 -25 -52) -92]
Test Case: 742 | Input/Output: [(-78 -88 87 -58) -88]
Test Case: 743 | Input/Output: [(88 -17 -36 5) -36]
Test Case: 744 | Input/Output: [(-53 70 -64 -5) -64]
Test Case: 745 | Input/Output: [(35 78 -78 17) -78]
Test Case: 746 | Input/Output: [(-88 -32 54 -43) -88]
Test Case: 747 | Input/Output: [(-63 14 -94 -91) -94]
Test Case: 748 | Input/Output: [(78 -21 97 51) -21]
Test Case: 749 | Input/Output: [(-54 17 -19 21) -54]
Test Case: 750 | Input/Output: [(-89 -31 58 42) -89]
Test Case: 751 | Input/Output: [(-99 55 -33 39) -99]
Test Case: 752 | Input/Output: [(47 -76 6 -23) -76]
Test Case: 753 | Input/Output: [(-73 -57 -35 -18) -73]
Test Case: 754 | Input/Output: [(9 -29 -63 39) -63]
Test Case: 755 | Input/Output: [(-55 63 99 -53) -55]
Test Case: 756 | Input/Output: [(94 -70 -49 -45) -70]
Test Case: 757 | Input/Output: [(-67 0 -7 -40) -67]
Test Case: 758 | Input/Output: [(-72 40 -40 -59) -72]
Test Case: 759 | Input/Output: [(84 -36 76 -28) -36]
Test Case: 760 | Input/Output: [(-81 84 21 56) -81]
Test Case: 761 | Input/Output: [(38 -2 73 -31) -31]
Test Case: 762 | Input/Output: [(9 10 -68 -71) -71]
Test Case: 763 | Input/Output: [(88 -40 -80 37) -80]
Test Case: 764 | Input/Output: [(-9 -54 -14 2) -54]
Test Case: 765 | Input/Output: [(-96 -17 -96 -2) -96]
Test Case: 766 | Input/Output: [(-40 25 -98 -82) -98]
Test Case: 767 | Input/Output: [(-56 88 -18 100) -56]
Test Case: 768 | Input/Output: [(41 10 -30 -12) -30]
Test Case: 769 | Input/Output: [(1 52 -90 -27) -90]
Test Case: 770 | Input/Output: [(55 27 -19 66) -19]
Test Case: 771 | Input/Output: [(-37 -26 42 73) -37]
Test Case: 772 | Input/Output: [(-30 65 -63 -100) -100]
Test Case: 773 | Input/Output: [(-31 -35 -94 -84) -94]
Test Case: 774 | Input/Output: [(-66 -19 43 -54) -66]
Test Case: 775 | Input/Output: [(-68 34 -1 -48) -68]
Test Case: 776 | Input/Output: [(-63 -7 -99 -72) -99]
Test Case: 777 | Input/Output: [(-99 64 65 6) -99]
Test Case: 778 | Input/Output: [(31 39 1 -21) -21]
Test Case: 779 | Input/Output: [(76 -1 29 63) -1]
Test Case: 780 | Input/Output: [(61 36 -40 65) -40]
Test Case: 781 | Input/Output: [(64 -49 -96 15) -96]
Test Case: 782 | Input/Output: [(-62 99 -9 0) -62]
Test Case: 783 | Input/Output: [(2 -15 71 35) -15]
Test Case: 784 | Input/Output: [(69 71 23 24) 23]
Test Case: 785 | Input/Output: [(-51 -81 -85 -48) -85]
Test Case: 786 | Input/Output: [(25 -12 65 -8) -12]
Test Case: 787 | Input/Output: [(96 58 -39 -79) -79]
Test Case: 788 | Input/Output: [(13 68 93 -8) -8]
Test Case: 789 | Input/Output: [(89 93 -57 -26) -57]
Test Case: 790 | Input/Output: [(42 -32 82 38) -32]
Test Case: 791 | Input/Output: [(-4 -26 -7 31) -26]
Test Case: 792 | Input/Output: [(20 -18 -69 69) -69]
Test Case: 793 | Input/Output: [(6 18 9 -71) -71]
Test Case: 794 | Input/Output: [(23 -67 100 9) -67]
Test Case: 795 | Input/Output: [(-98 68 17 47) -98]
Test Case: 796 | Input/Output: [(-74 45 76 -78) -78]
Test Case: 797 | Input/Output: [(94 -85 -40 12) -85]
Test Case: 798 | Input/Output: [(-78 -23 -9 43) -78]
Test Case: 799 | Input/Output: [(92 1 10 63) 1]
Test Case: 800 | Input/Output: [(100 -36 29 -86) -86]
Test Case: 801 | Input/Output: [(-9 -61 -76 97) -76]
Test Case: 802 | Input/Output: [(-42 41 -84 26) -84]
Test Case: 803 | Input/Output: [(-18 -76 -32 -28) -76]
Test Case: 804 | Input/Output: [(-50 -77 -80 -85) -85]
Test Case: 805 | Input/Output: [(-55 -86 63 -41) -86]
Test Case: 806 | Input/Output: [(68 73 -2 -97) -97]
Test Case: 807 | Input/Output: [(84 -8 83 89) -8]
Test Case: 808 | Input/Output: [(11 0 -22 20) -22]
Test Case: 809 | Input/Output: [(8 -21 6 -71) -71]
Test Case: 810 | Input/Output: [(-26 -78 -63 -49) -78]
Test Case: 811 | Input/Output: [(-80 79 21 58) -80]
Test Case: 812 | Input/Output: [(33 -56 -35 -64) -64]
Test Case: 813 | Input/Output: [(-79 91 -6 -82) -82]
Test Case: 814 | Input/Output: [(-70 -21 51 -52) -70]
Test Case: 815 | Input/Output: [(96 42 85 -47) -47]
Test Case: 816 | Input/Output: [(-7 -50 44 28) -50]
Test Case: 817 | Input/Output: [(-21 -55 -53 72) -55]
Test Case: 818 | Input/Output: [(5 -45 37 87) -45]
Test Case: 819 | Input/Output: [(44 11 -37 67) -37]
Test Case: 820 | Input/Output: [(-27 23 -28 -97) -97]
Test Case: 821 | Input/Output: [(-92 -56 27 52) -92]
Test Case: 822 | Input/Output: [(-66 81 39 -4) -66]
Test Case: 823 | Input/Output: [(-10 -43 1 64) -43]
Test Case: 824 | Input/Output: [(-65 -28 56 8) -65]
Test Case: 825 | Input/Output: [(-34 18 70 -6) -34]
Test Case: 826 | Input/Output: [(-52 -63 -58 38) -63]
Test Case: 827 | Input/Output: [(-3 8 21 58) -3]
Test Case: 828 | Input/Output: [(-77 -66 -39 -14) -77]
Test Case: 829 | Input/Output: [(15 -44 -11 -8) -44]
Test Case: 830 | Input/Output: [(71 -30 -92 43) -92]
Test Case: 831 | Input/Output: [(88 49 -84 -18) -84]
Test Case: 832 | Input/Output: [(-99 59 76 43) -99]
Test Case: 833 | Input/Output: [(-86 -40 95 -55) -86]
Test Case: 834 | Input/Output: [(-98 -95 12 -89) -98]
Test Case: 835 | Input/Output: [(-52 7 -73 58) -73]
Test Case: 836 | Input/Output: [(-99 -97 -58 -18) -99]
Test Case: 837 | Input/Output: [(-73 -61 46 95) -73]
Test Case: 838 | Input/Output: [(-64 -5 62 99) -64]
Test Case: 839 | Input/Output: [(-66 5 90 50) -66]
Test Case: 840 | Input/Output: [(93 -61 78 70) -61]
Test Case: 841 | Input/Output: [(54 63 -1 -67) -67]
Test Case: 842 | Input/Output: [(15 69 8 81) 8]
Test Case: 843 | Input/Output: [(-7 38 45 15) -7]
Test Case: 844 | Input/Output: [(99 63 3 -33) -33]
Test Case: 845 | Input/Output: [(64 10 5 -32) -32]
Test Case: 846 | Input/Output: [(-14 32 60 64) -14]
Test Case: 847 | Input/Output: [(66 -94 60 28) -94]
Test Case: 848 | Input/Output: [(-39 -41 -27 -67) -67]
Test Case: 849 | Input/Output: [(31 -87 1 -30) -87]
Test Case: 850 | Input/Output: [(-37 37 21 27) -37]
Test Case: 851 | Input/Output: [(38 -14 -51 -38) -51]
Test Case: 852 | Input/Output: [(-69 60 -99 54) -99]
Test Case: 853 | Input/Output: [(-10 40 68 17) -10]
Test Case: 854 | Input/Output: [(-31 -10 -12 -57) -57]
Test Case: 855 | Input/Output: [(18 22 55 -61) -61]
Test Case: 856 | Input/Output: [(-47 7 -99 78) -99]
Test Case: 857 | Input/Output: [(22 -62 52 47) -62]
Test Case: 858 | Input/Output: [(40 3 -2 53) -2]
Test Case: 859 | Input/Output: [(-74 79 5 -12) -74]
Test Case: 860 | Input/Output: [(-71 -80 -86 -26) -86]
Test Case: 861 | Input/Output: [(79 19 16 -27) -27]
Test Case: 862 | Input/Output: [(53 9 -45 -33) -45]
Test Case: 863 | Input/Output: [(-56 -75 -76 42) -76]
Test Case: 864 | Input/Output: [(-100 30 58 -78) -100]
Test Case: 865 | Input/Output: [(-78 89 -18 -21) -78]
Test Case: 866 | Input/Output: [(-78 -15 99 65) -78]
Test Case: 867 | Input/Output: [(77 95 26 93) 26]
Test Case: 868 | Input/Output: [(3 -1 40 -31) -31]
Test Case: 869 | Input/Output: [(7 3 84 -15) -15]
Test Case: 870 | Input/Output: [(-82 81 -49 0) -82]
Test Case: 871 | Input/Output: [(64 18 -96 -26) -96]
Test Case: 872 | Input/Output: [(-39 -98 76 86) -98]
Test Case: 873 | Input/Output: [(-66 97 89 8) -66]
Test Case: 874 | Input/Output: [(-26 79 67 -48) -48]
Test Case: 875 | Input/Output: [(70 -74 3 46) -74]
Test Case: 876 | Input/Output: [(48 18 67 66) 18]
Test Case: 877 | Input/Output: [(-50 32 62 66) -50]
Test Case: 878 | Input/Output: [(-47 -84 50 90) -84]
Test Case: 879 | Input/Output: [(-18 -72 37 46) -72]
Test Case: 880 | Input/Output: [(27 73 33 16) 16]
Test Case: 881 | Input/Output: [(-48 12 24 -35) -48]
Test Case: 882 | Input/Output: [(-46 -59 71 56) -59]
Test Case: 883 | Input/Output: [(-11 -69 10 -36) -69]
Test Case: 884 | Input/Output: [(-85 -77 -94 -5) -94]
Test Case: 885 | Input/Output: [(98 -99 -62 -72) -99]
Test Case: 886 | Input/Output: [(-37 -72 -54 -59) -72]
Test Case: 887 | Input/Output: [(-37 -36 -5 7) -37]
Test Case: 888 | Input/Output: [(31 75 90 55) 31]
Test Case: 889 | Input/Output: [(47 4 -67 10) -67]
Test Case: 890 | Input/Output: [(-25 60 -56 -17) -56]
Test Case: 891 | Input/Output: [(-61 29 -96 90) -96]
Test Case: 892 | Input/Output: [(-11 -75 78 96) -75]
Test Case: 893 | Input/Output: [(8 -49 83 -95) -95]
Test Case: 894 | Input/Output: [(41 5 -61 -92) -92]
Test Case: 895 | Input/Output: [(-93 -2 78 -71) -93]
Test Case: 896 | Input/Output: [(-100 -19 -10 66) -100]
Test Case: 897 | Input/Output: [(-62 51 -70 -79) -79]
Test Case: 898 | Input/Output: [(-34 95 33 -39) -39]
Test Case: 899 | Input/Output: [(35 44 -22 37) -22]
Test Case: 900 | Input/Output: [(79 -98 -76 -10) -98]
Test Case: 901 | Input/Output: [(65 -45 41 10) -45]
Test Case: 902 | Input/Output: [(-21 -21 45 -49) -49]
Test Case: 903 | Input/Output: [(30 56 -41 -98) -98]
Test Case: 904 | Input/Output: [(87 -76 25 -95) -95]
Test Case: 905 | Input/Output: [(78 -26 -34 57) -34]
Test Case: 906 | Input/Output: [(41 68 -89 -69) -89]
Test Case: 907 | Input/Output: [(78 84 -20 -52) -52]
Test Case: 908 | Input/Output: [(-80 40 -24 -87) -87]
Test Case: 909 | Input/Output: [(-22 -45 42 -69) -69]
Test Case: 910 | Input/Output: [(6 -99 0 74) -99]
Test Case: 911 | Input/Output: [(85 85 4 -58) -58]
Test Case: 912 | Input/Output: [(-51 -7 62 41) -51]
Test Case: 913 | Input/Output: [(3 62 94 -58) -58]
Test Case: 914 | Input/Output: [(69 2 67 -61) -61]
Test Case: 915 | Input/Output: [(88 -77 -48 65) -77]
Test Case: 916 | Input/Output: [(-46 24 48 73) -46]
Test Case: 917 | Input/Output: [(43 -36 74 53) -36]
Test Case: 918 | Input/Output: [(87 25 -39 80) -39]
Test Case: 919 | Input/Output: [(-12 84 -71 30) -71]
Test Case: 920 | Input/Output: [(79 24 13 1) 1]
Test Case: 921 | Input/Output: [(85 -40 -18 17) -40]
Test Case: 922 | Input/Output: [(4 50 22 -1) -1]
Test Case: 923 | Input/Output: [(11 32 -100 -8) -100]
Test Case: 924 | Input/Output: [(95 -58 38 80) -58]
Test Case: 925 | Input/Output: [(-78 -37 66 -61) -78]
Test Case: 926 | Input/Output: [(33 64 -97 15) -97]
Test Case: 927 | Input/Output: [(-44 48 66 57) -44]
Test Case: 928 | Input/Output: [(39 -16 64 -92) -92]
Test Case: 929 | Input/Output: [(-26 63 43 -18) -26]
Test Case: 930 | Input/Output: [(-52 41 -26 25) -52]
Test Case: 931 | Input/Output: [(-56 16 -81 90) -81]
Test Case: 932 | Input/Output: [(-86 -78 -72 -5) -86]
Test Case: 933 | Input/Output: [(-93 -90 -10 -17) -93]
Test Case: 934 | Input/Output: [(41 -74 31 -31) -74]
Test Case: 935 | Input/Output: [(-40 -70 15 -90) -90]
Test Case: 936 | Input/Output: [(-55 -70 -42 -97) -97]
Test Case: 937 | Input/Output: [(52 48 84 -15) -15]
Test Case: 938 | Input/Output: [(-86 13 -38 35) -86]
Test Case: 939 | Input/Output: [(42 -16 83 59) -16]
Test Case: 940 | Input/Output: [(-29 -21 -85 88) -85]
Test Case: 941 | Input/Output: [(82 -60 -69 -6) -69]
Test Case: 942 | Input/Output: [(50 -45 9 76) -45]
Test Case: 943 | Input/Output: [(27 19 -11 -49) -49]
Test Case: 944 | Input/Output: [(4 23 -13 93) -13]
Test Case: 945 | Input/Output: [(-85 -96 53 -97) -97]
Test Case: 946 | Input/Output: [(-6 100 -6 18) -6]
Test Case: 947 | Input/Output: [(-91 23 -68 24) -91]
Test Case: 948 | Input/Output: [(-70 64 -26 -63) -70]
Test Case: 949 | Input/Output: [(-89 -44 -78 18) -89]
Test Case: 950 | Input/Output: [(61 -14 -93 0) -93]
Test Case: 951 | Input/Output: [(21 88 66 -57) -57]
Test Case: 952 | Input/Output: [(-80 -90 31 8) -90]
Test Case: 953 | Input/Output: [(-20 1 -61 11) -61]
Test Case: 954 | Input/Output: [(-23 -36 3 -56) -56]
Test Case: 955 | Input/Output: [(48 -84 0 15) -84]
Test Case: 956 | Input/Output: [(6 -13 -29 -68) -68]
Test Case: 957 | Input/Output: [(50 -94 76 -90) -94]
Test Case: 958 | Input/Output: [(79 53 -87 42) -87]
Test Case: 959 | Input/Output: [(92 -87 -85 -58) -87]
Test Case: 960 | Input/Output: [(-92 95 70 -42) -92]
Test Case: 961 | Input/Output: [(-59 -4 78 -16) -59]
Test Case: 962 | Input/Output: [(0 -67 -78 -2) -78]
Test Case: 963 | Input/Output: [(35 -44 -6 7) -44]
Test Case: 964 | Input/Output: [(63 76 43 64) 43]
Test Case: 965 | Input/Output: [(-64 -19 -57 16) -64]
Test Case: 966 | Input/Output: [(78 77 -94 96) -94]
Test Case: 967 | Input/Output: [(45 -79 -97 -53) -97]
Test Case: 968 | Input/Output: [(91 0 92 54) 0]
Test Case: 969 | Input/Output: [(15 -49 85 -4) -49]
Test Case: 970 | Input/Output: [(16 -99 33 75) -99]
Test Case: 971 | Input/Output: [(43 -95 -38 68) -95]
Test Case: 972 | Input/Output: [(-29 55 27 -3) -29]
Test Case: 973 | Input/Output: [(26 -24 90 31) -24]
Test Case: 974 | Input/Output: [(-82 73 33 85) -82]
Test Case: 975 | Input/Output: [(79 85 -9 76) -9]
Test Case: 976 | Input/Output: [(22 6 -46 80) -46]
Test Case: 977 | Input/Output: [(26 21 67 -43) -43]
Test Case: 978 | Input/Output: [(95 -21 92 -76) -76]
Test Case: 979 | Input/Output: [(-49 56 -23 -10) -49]
Test Case: 980 | Input/Output: [(-86 -59 -17 -63) -86]
Test Case: 981 | Input/Output: [(-30 -20 11 40) -30]
Test Case: 982 | Input/Output: [(-66 -47 -19 -64) -66]
Test Case: 983 | Input/Output: [(-40 -93 20 -79) -93]
Test Case: 984 | Input/Output: [(73 46 -25 12) -25]
Test Case: 985 | Input/Output: [(-67 44 65 64) -67]
Test Case: 986 | Input/Output: [(-95 -79 -2 -13) -95]
Test Case: 987 | Input/Output: [(4 -68 -57 36) -68]
Test Case: 988 | Input/Output: [(-18 -7 0 38) -18]
Test Case: 989 | Input/Output: [(81 -64 6 36) -64]
Test Case: 990 | Input/Output: [(-15 0 -83 90) -83]
Test Case: 991 | Input/Output: [(-59 88 8 -3) -59]
Test Case: 992 | Input/Output: [(-28 47 45 94) -28]
Test Case: 993 | Input/Output: [(24 91 8 -36) -36]
Test Case: 994 | Input/Output: [(45 26 22 100) 22]
Test Case: 995 | Input/Output: [(-10 24 -49 71) -49]
Test Case: 996 | Input/Output: [(-6 45 65 82) -6]
Test Case: 997 | Input/Output: [(-16 -58 -13 66) -58]
Test Case: 998 | Input/Output: [(-98 -30 68 -97) -98]
Test Case: 999 | Input/Output: [(-2 27 27 -100) -100]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:uniform-addition-and-deletion 1.0}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 3000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
random-screen = false
random-seed = -116 68 74 -61 -5 -82 9 -87 94 -39 11 75 -90 62 57 -20
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[21 21 54 21] 21] [[-23 62 62 62] -23] [[-96 -96 -96 -84] -96] [[76 76 84 76] 76] [[83 14 83 83] 14] [[87 87 -56 87] -56] [[53 28 28 28] 28] [[24 -20 24 24] -20] [[38 87 87 87] 38] [[31 9 9 9] 9] [(-80 -80 -80 -80) -80] [(22 22 22 22) 22] [(-35 -35 -35 -35) -35] [(-31 -31 -31 -31) -31] [(-8 -8 -8 -8) -8] [(10 98 53 55) 10] [(21 80 60 61) 21] [(94 96 60 31) 31] [(3 55 74 22) 3] [(6 2 71 9) 2] [(33 63 95 52) 33] [(100 36 90 4) 4] [(49 96 66 20) 20] [(59 65 67 56) 56] [(54 15 28 4) 4] [(41 35 88 32) 32] [(21 77 98 97) 21] [(7 8 24 88) 7] [(90 26 78 15) 15] [(48 4 82 68) 4] [(57 76 61 30) 30] [(31 74 94 50) 31] [(1 6 8 78) 1] [(88 70 45 94) 45] [(61 34 8 64) 8] [(56 22 -21 43) -21] [(55 5 12 -38) -38] [(-65 10 -16 -15) -65] [(-33 -87 43 11) -87] [(-58 54 96 74) -58] [(18 -80 18 86) -80] [(2 50 -77 5) -77] [(-31 29 26 -7) -31] [(-83 15 73 71) -83] [(-21 -50 2 -63) -63] [(82 -90 83 4) -90] [(-85 -82 12 0) -85] [(-92 82 -70 44) -92] [(25 64 74 -75) -75] [(5 49 97 -75) -75] [(-24 93 20 60) -24] [(9 -4 74 8) -4] [(-43 63 -53 69) -53] [(-20 22 -55 29) -55] [(-51 -48 -65 -17) -65] [(-33 96 -66 67) -66] [(86 -33 -49 53) -49] [(-30 -49 -46 -1) -49] [(62 38 66 -98) -98] [(55 0 50 55) 0] [(-26 -51 -62 11) -62] [(-69 -21 38 -62) -69] [(91 -43 90 -39) -43] [(16 -69 -95 40) -95] [(67 91 44 -34) -34] [(57 79 -22 37) -22] [(27 -30 -13 -87) -87] [(66 -5 75 -12) -12] [(70 20 -45 -64) -64] [(-7 81 25 -6) -7] [(-82 21 -50 31) -82] [(33 62 -91 -65) -91] [(-56 39 -25 62) -56] [(-93 -15 -26 -95) -95] [(94 -68 -80 -58) -80] [(-3 -77 45 11) -77] [(-92 48 23 -14) -92] [(-82 3 44 -23) -82] [(39 96 -55 -76) -76] [(-56 -28 41 97) -56] [(76 -20 63 -39) -39] [(-76 -75 -62 -61) -76] [(-55 -49 -28 2) -55] [(14 -97 98 61) -97] [(61 71 -53 -2) -53] [(-42 92 71 12) -42] [(70 99 84 49) 49] [(-56 -80 -50 -11) -80] [(47 79 79 -44) -44] [(-42 15 87 -97) -97] [(-43 -71 82 73) -71] [(-62 -34 -1 100) -62] [(72 35 1 62) 1] [(96 30 -33 92) -33] [(-47 77 -55 -53) -55])
uniform-addition-and-deletion-rate = 0.09
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 667
Test mean error for best: 0.66700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 21                  | Program output: 21                 
Correct output: -23                 | Program output: 62                 
Correct output: -96                 | Program output: -84                
Correct output: 76                  | Program output: 76                 
Correct output: 14                  | Program output: 83                 
Correct output: -56                 | Program output: 87                 
Correct output: 28                  | Program output: 28                 
Correct output: -20                 | Program output: 24                 
Correct output: 38                  | Program output: 87                 
Correct output: 9                   | Program output: 9                  
Correct output: -80                 | Program output: -80                
Correct output: 22                  | Program output: 22                 
Correct output: -35                 | Program output: -35                
Correct output: -31                 | Program output: -31                
Correct output: -8                  | Program output: -8                 
Correct output: 10                  | Program output: 55                 
Correct output: 21                  | Program output: 61                 
Correct output: 31                  | Program output: 31                 
Correct output: 3                   | Program output: 22                 
Correct output: 2                   | Program output: 9                  
Correct output: 33                  | Program output: 52                 
Correct output: 4                   | Program output: 4                  
Correct output: 20                  | Program output: 20                 
Correct output: 56                  | Program output: 56                 
Correct output: 4                   | Program output: 4                  
Correct output: 32                  | Program output: 32                 
Correct output: 21                  | Program output: 97                 
Correct output: 7                   | Program output: 88                 
Correct output: 15                  | Program output: 15                 
Correct output: 4                   | Program output: 68                 
Correct output: 30                  | Program output: 30                 
Correct output: 31                  | Program output: 50                 
Correct output: 1                   | Program output: 78                 
Correct output: 45                  | Program output: 94                 
Correct output: 8                   | Program output: 64                 
Correct output: -21                 | Program output: 43                 
Correct output: -38                 | Program output: -38                
Correct output: -65                 | Program output: -15                
Correct output: -87                 | Program output: 11                 
Correct output: -58                 | Program output: 74                 
Correct output: -80                 | Program output: 86                 
Correct output: -77                 | Program output: 5                  
Correct output: -31                 | Program output: -7                 
Correct output: -83                 | Program output: 71                 
Correct output: -63                 | Program output: -63                
Correct output: -90                 | Program output: 4                  
Correct output: -85                 | Program output: 0                  
Correct output: -92                 | Program output: 44                 
Correct output: -75                 | Program output: -75                
Correct output: -75                 | Program output: -75                
Correct output: -24                 | Program output: 60                 
Correct output: -4                  | Program output: 8                  
Correct output: -53                 | Program output: 69                 
Correct output: -55                 | Program output: 29                 
Correct output: -65                 | Program output: -17                
Correct output: -66                 | Program output: 67                 
Correct output: -49                 | Program output: 53                 
Correct output: -49                 | Program output: -1                 
Correct output: -98                 | Program output: -98                
Correct output: 0                   | Program output: 55                 
Correct output: -62                 | Program output: 11                 
Correct output: -69                 | Program output: -62                
Correct output: -43                 | Program output: -39                
Correct output: -95                 | Program output: 40                 
Correct output: -34                 | Program output: -34                
Correct output: -22                 | Program output: 37                 
Correct output: -87                 | Program output: -87                
Correct output: -12                 | Program output: -12                
Correct output: -64                 | Program output: -64                
Correct output: -7                  | Program output: -6                 
Correct output: -82                 | Program output: 31                 
Correct output: -91                 | Program output: -65                
Correct output: -56                 | Program output: 62                 
Correct output: -95                 | Program output: -95                
Correct output: -80                 | Program output: -58                
Correct output: -77                 | Program output: 11                 
Correct output: -92                 | Program output: -14                
Correct output: -82                 | Program output: -23                
Correct output: -76                 | Program output: -76                
Correct output: -56                 | Program output: 97                 
Correct output: -39                 | Program output: -39                
Correct output: -76                 | Program output: -61                
Correct output: -55                 | Program output: 2                  
Correct output: -97                 | Program output: 61                 
Correct output: -53                 | Program output: -2                 
Correct output: -42                 | Program output: 12                 
Correct output: 49                  | Program output: 49                 
Correct output: -80                 | Program output: -11                
Correct output: -44                 | Program output: -44                
Correct output: -97                 | Program output: -97                
Correct output: -71                 | Program output: 73                 
Correct output: -62                 | Program output: 100                
Correct output: 1                   | Program output: 62                 
Correct output: -33                 | Program output: 92                 
Correct output: -55                 | Program output: -53                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_pop} {:close 0, :instruction in4} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction in4} {:close 1, :instruction boolean_empty} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction tagged_579} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction 35} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction print_newline} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_div} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction in2} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction tag_integer_18} {:close 0, :instruction print_exec} {:close 1, :instruction integer_lte} {:close 0, :instruction -36} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_mult} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_div} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_y} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_xor} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_not} {:close 0, :instruction -26} {:close 0, :instruction exec_while} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_while} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_max} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup_times})
Lexicase best program: (exec_pop (in4 integer_yank) integer_yank in4 boolean_empty print_integer boolean_xor integer_mult boolean_flush integer_stackdepth boolean_or integer_max boolean_flush tagged_579 integer_dup_items integer_stackdepth 35 exec_eq exec_do*while (boolean_xor) exec_if (integer_mod print_newline integer_gt) (integer_stackdepth exec_flush integer_div print_integer integer_gt exec_shove (boolean_dup boolean_and exec_y (exec_pop (boolean_flush in2 integer_lt integer_pop) print_boolean tag_integer_18 print_exec (integer_lte) -36 in1 exec_yank boolean_xor integer_sub integer_max boolean_and integer_mult print_boolean integer_dup_items integer_flush exec_eq in1 boolean_flush integer_div exec_stackdepth exec_eq)) in4 exec_y (exec_stackdepth boolean_xor print_newline boolean_not -26 exec_while (integer_sub integer_gt integer_add boolean_pop integer_dup_items exec_do*range (integer_mult exec_while (exec_do*while () boolean_dup_times integer_max) integer_dup boolean_invert_first_then_and exec_swap (integer_yankdup) (boolean_or boolean_dup_times))))))
Lexicase best errors: [0 0 0 1 0 1 1 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 101
Percent parens: 0.158
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_pop} {:close 0, :instruction in4} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction in4} {:close 1, :instruction boolean_empty} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction tagged_579} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction 35} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mod} {:close 0, :instruction print_newline} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_div} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction in2} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction tag_integer_18} {:close 0, :instruction print_exec} {:close 1, :instruction integer_lte} {:close 0, :instruction -36} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_mult} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_div} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction exec_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_y} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_xor} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_not} {:close 0, :instruction -26} {:close 0, :instruction exec_while} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_while} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_max} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup_times})
Zero cases best program: (exec_pop (in4 integer_yank) integer_yank in4 boolean_empty print_integer boolean_xor integer_mult boolean_flush integer_stackdepth boolean_or integer_max boolean_flush tagged_579 integer_dup_items integer_stackdepth 35 exec_eq exec_do*while (boolean_xor) exec_if (integer_mod print_newline integer_gt) (integer_stackdepth exec_flush integer_div print_integer integer_gt exec_shove (boolean_dup boolean_and exec_y (exec_pop (boolean_flush in2 integer_lt integer_pop) print_boolean tag_integer_18 print_exec (integer_lte) -36 in1 exec_yank boolean_xor integer_sub integer_max boolean_and integer_mult print_boolean integer_dup_items integer_flush exec_eq in1 boolean_flush integer_div exec_stackdepth exec_eq)) in4 exec_y (exec_stackdepth boolean_xor print_newline boolean_not -26 exec_while (integer_sub integer_gt integer_add boolean_pop integer_dup_items exec_do*range (integer_mult exec_while (exec_do*while () boolean_dup_times integer_max) integer_dup boolean_invert_first_then_and exec_swap (integer_yankdup) (boolean_or boolean_dup_times))))))
Zero cases best errors: [0 0 0 1 0 1 1 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 101
Percent parens: 0.158
--- Lexicase Population Statistics ---
Count of elite individuals by case: (5 18 7 3 5 5 11 11 6 2)
Population mean number of elite cases: 0.07
Count of perfect (error zero) individuals by case: (5 18 7 3 5 5 11 11 6 2)
Population mean number of perfect (error zero) cases: 0.07
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in4} {:close 0, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction integer_add} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_empty} {:close 0, :instruction tag_integer_500} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction 45} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 1, :instruction in2} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_rot} {:close 1, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_yank} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_or} {:close 1, :instruction integer_dup_items} {:close 0, :instruction tag_integer_160} {:close 0, :instruction in4} {:close 0, :instruction -91} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_mod} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_exec} {:close 1, :instruction print_integer} {:close 1, :instruction integer_div} {:close 1, :instruction exec_eq} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_rot} {:close 0, :instruction tag_boolean_748} {:close 0, :instruction exec_k} {:close 0, :instruction integer_flush} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 2, :instruction exec_shove} {:close 1, :instruction exec_shove} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction print_newline} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_stackdepth} {:close 2, :instruction exec_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush})
Best program: (in4 integer_lt print_integer integer_add integer_gte integer_empty tag_integer_500 integer_rot exec_y_when_autoconstructing () 45 boolean_swap integer_mod exec_y (exec_do*while (exec_do*range () exec_pop () exec_s_when_autoconstructing (exec_shove (in2) integer_eq exec_do*range (boolean_empty integer_gt) exec_flush integer_pop boolean_flush boolean_yank exec_rot () (integer_gte) (integer_rot) integer_dec exec_do*count (integer_yank) print_boolean exec_do*while () boolean_and integer_eq integer_gt) (exec_stackdepth boolean_dup_items integer_empty boolean_or) (integer_dup_items) tag_integer_160 in4 -91 integer_div exec_shove (print_boolean exec_if (exec_y (integer_yank boolean_invert_second_then_and boolean_empty integer_flush integer_shove boolean_yankdup integer_mod exec_k_when_autoconstructing () () exec_yankdup print_exec (print_integer) integer_div) exec_eq) (print_integer integer_flush boolean_and exec_rot () (tag_boolean_748 exec_k (integer_flush print_integer exec_do*while (exec_dup_times () in3 exec_yankdup) integer_flush integer_pop) (exec_yank boolean_dup integer_dup_times exec_swap (exec_shove ()) (exec_shove () in4 boolean_flush exec_noop print_newline) exec_s_when_autoconstructing (integer_stackdepth exec_empty) () (integer_gt integer_empty integer_rot) boolean_swap boolean_flush)) ())))))
Errors: [0 0 0 1 0 1 1 0 0 1]
Total: 4
Mean: 0.4
Genome size: 96
Size: 133
Percent parens: 0.278
--- Population Statistics ---
Average total errors in population: 9.927
Median total errors in population: 10
Error averages by case: (0.995 0.982 0.993 0.997 0.995 0.995 0.989 0.989 0.994 0.998)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.078
Average program size in population (points): 68.783
Average percent parens in population: 0.280
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.007
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.288
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 452721
--- Timings ---
Current time: 1559593811264 milliseconds
Total Time:           2.6 seconds
Initialization:       0.1 seconds,  3.9%
Reproduction:         0.8 seconds, 29.7%
Fitness Testing:      1.7 seconds, 66.4%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 639
Test mean error for best: 0.63900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 21                  | Program output: 21                 
Correct output: -23                 | Program output: 62                 
Correct output: -96                 | Program output: -96                
Correct output: 76                  | Program output: 76                 
Correct output: 14                  | Program output: 14                 
Correct output: -56                 | Program output: 87                 
Correct output: 28                  | Program output: 28                 
Correct output: -20                 | Program output: -20                
Correct output: 38                  | Program output: 87                 
Correct output: 9                   | Program output: 9                  
Correct output: -80                 | Program output: -80                
Correct output: 22                  | Program output: 22                 
Correct output: -35                 | Program output: -35                
Correct output: -31                 | Program output: -31                
Correct output: -8                  | Program output: -8                 
Correct output: 10                  | Program output: 98                 
Correct output: 21                  | Program output: 80                 
Correct output: 31                  | Program output: 96                 
Correct output: 3                   | Program output: 55                 
Correct output: 2                   | Program output: 2                  
Correct output: 33                  | Program output: 63                 
Correct output: 4                   | Program output: 36                 
Correct output: 20                  | Program output: 96                 
Correct output: 56                  | Program output: 65                 
Correct output: 4                   | Program output: 15                 
Correct output: 32                  | Program output: 35                 
Correct output: 21                  | Program output: 77                 
Correct output: 7                   | Program output: 8                  
Correct output: 15                  | Program output: 26                 
Correct output: 4                   | Program output: 4                  
Correct output: 30                  | Program output: 76                 
Correct output: 31                  | Program output: 74                 
Correct output: 1                   | Program output: 6                  
Correct output: 45                  | Program output: 70                 
Correct output: 8                   | Program output: 34                 
Correct output: -21                 | Program output: 22                 
Correct output: -38                 | Program output: 5                  
Correct output: -65                 | Program output: 10                 
Correct output: -87                 | Program output: -87                
Correct output: -58                 | Program output: 54                 
Correct output: -80                 | Program output: -80                
Correct output: -77                 | Program output: 50                 
Correct output: -31                 | Program output: 29                 
Correct output: -83                 | Program output: 15                 
Correct output: -63                 | Program output: -50                
Correct output: -90                 | Program output: -90                
Correct output: -85                 | Program output: -82                
Correct output: -92                 | Program output: 82                 
Correct output: -75                 | Program output: 64                 
Correct output: -75                 | Program output: 49                 
Correct output: -24                 | Program output: 93                 
Correct output: -4                  | Program output: -4                 
Correct output: -53                 | Program output: 63                 
Correct output: -55                 | Program output: 22                 
Correct output: -65                 | Program output: -48                
Correct output: -66                 | Program output: 96                 
Correct output: -49                 | Program output: -33                
Correct output: -49                 | Program output: -49                
Correct output: -98                 | Program output: 38                 
Correct output: 0                   | Program output: 0                  
Correct output: -62                 | Program output: -51                
Correct output: -69                 | Program output: -21                
Correct output: -43                 | Program output: -43                
Correct output: -95                 | Program output: -69                
Correct output: -34                 | Program output: 91                 
Correct output: -22                 | Program output: 79                 
Correct output: -87                 | Program output: -30                
Correct output: -12                 | Program output: -5                 
Correct output: -64                 | Program output: 20                 
Correct output: -7                  | Program output: 81                 
Correct output: -82                 | Program output: 21                 
Correct output: -91                 | Program output: 62                 
Correct output: -56                 | Program output: 39                 
Correct output: -95                 | Program output: -15                
Correct output: -80                 | Program output: -68                
Correct output: -77                 | Program output: -77                
Correct output: -92                 | Program output: 48                 
Correct output: -82                 | Program output: 3                  
Correct output: -76                 | Program output: 96                 
Correct output: -56                 | Program output: -28                
Correct output: -39                 | Program output: -20                
Correct output: -76                 | Program output: -75                
Correct output: -55                 | Program output: -49                
Correct output: -97                 | Program output: -97                
Correct output: -53                 | Program output: 71                 
Correct output: -42                 | Program output: 92                 
Correct output: 49                  | Program output: 99                 
Correct output: -80                 | Program output: -80                
Correct output: -44                 | Program output: 79                 
Correct output: -97                 | Program output: 15                 
Correct output: -71                 | Program output: -71                
Correct output: -62                 | Program output: -34                
Correct output: 1                   | Program output: 35                 
Correct output: -33                 | Program output: 30                 
Correct output: -55                 | Program output: 77                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_min} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_min} {:close 0, :instruction print_newline} {:close 1, :instruction exec_pop} {:close 0, :instruction in3} {:close 1, :instruction integer_dup_items} {:close 0, :instruction print_exec} {:close 0, :instruction exec_s} {:close 0, :instruction in2} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_div} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_dup_items} {:close 1, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s} {:close 1, :instruction exec_s} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_if} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dup_times} {:close 2, :instruction integer_yank} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_rot} {:close 0, :instruction tag_integer_258} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_newline} {:close 0, :instruction print_newline})
Lexicase best program: (boolean_dup integer_inc integer_div boolean_dup_times exec_when (integer_dup_times boolean_yank) integer_dup_times exec_pop () boolean_empty exec_do*range (boolean_rot boolean_xor) exec_rot (exec_k (integer_dup_items boolean_empty in2 print_integer exec_shove (exec_flush integer_min boolean_swap) integer_dup_times exec_flush integer_dec) (exec_rot (integer_yank integer_sub) (integer_eq boolean_and exec_while (integer_inc exec_eq) exec_rot (boolean_frominteger boolean_yankdup integer_min) (exec_do*count (exec_dup_items integer_eq) integer_dup integer_yankdup exec_flush boolean_yankdup integer_min) (print_newline exec_pop () in3 integer_dup_items) print_exec (exec_s (in2 exec_y_when_autoconstructing (integer_stackdepth integer_div) exec_k_when_autoconstructing (exec_k () (boolean_not exec_k_when_autoconstructing (integer_mod exec_dup_items) (integer_add) integer_shove boolean_shove integer_lte exec_s (exec_s () (exec_s_when_autoconstructing (exec_pop (boolean_dup exec_if () (boolean_or) integer_swap boolean_yankdup) print_boolean integer_dup_times integer_yank) () (integer_dup_times boolean_yank) exec_rot (tag_integer_258 integer_yank exec_do*range (integer_shove exec_dup_times (boolean_dup) integer_sub exec_dup_items boolean_eq exec_do*count (print_newline print_newline))) () ()) ()) () ())) ()) () ())) ())) () ())
Lexicase best errors: [0 0 1 1 1 1 0 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 141
Percent parens: 0.340
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_min} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_min} {:close 0, :instruction print_newline} {:close 1, :instruction exec_pop} {:close 0, :instruction in3} {:close 1, :instruction integer_dup_items} {:close 0, :instruction print_exec} {:close 0, :instruction exec_s} {:close 0, :instruction in2} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_div} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_dup_items} {:close 1, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s} {:close 1, :instruction exec_s} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_if} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dup_times} {:close 2, :instruction integer_yank} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_rot} {:close 0, :instruction tag_integer_258} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_newline} {:close 0, :instruction print_newline})
Zero cases best program: (boolean_dup integer_inc integer_div boolean_dup_times exec_when (integer_dup_times boolean_yank) integer_dup_times exec_pop () boolean_empty exec_do*range (boolean_rot boolean_xor) exec_rot (exec_k (integer_dup_items boolean_empty in2 print_integer exec_shove (exec_flush integer_min boolean_swap) integer_dup_times exec_flush integer_dec) (exec_rot (integer_yank integer_sub) (integer_eq boolean_and exec_while (integer_inc exec_eq) exec_rot (boolean_frominteger boolean_yankdup integer_min) (exec_do*count (exec_dup_items integer_eq) integer_dup integer_yankdup exec_flush boolean_yankdup integer_min) (print_newline exec_pop () in3 integer_dup_items) print_exec (exec_s (in2 exec_y_when_autoconstructing (integer_stackdepth integer_div) exec_k_when_autoconstructing (exec_k () (boolean_not exec_k_when_autoconstructing (integer_mod exec_dup_items) (integer_add) integer_shove boolean_shove integer_lte exec_s (exec_s () (exec_s_when_autoconstructing (exec_pop (boolean_dup exec_if () (boolean_or) integer_swap boolean_yankdup) print_boolean integer_dup_times integer_yank) () (integer_dup_times boolean_yank) exec_rot (tag_integer_258 integer_yank exec_do*range (integer_shove exec_dup_times (boolean_dup) integer_sub exec_dup_items boolean_eq exec_do*count (print_newline print_newline))) () ()) ()) () ())) ()) () ())) ())) () ())
Zero cases best errors: [0 0 1 1 1 1 0 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 141
Percent parens: 0.340
--- Lexicase Population Statistics ---
Count of elite individuals by case: (89 571 4 252 5 235 89 240 339 574)
Population mean number of elite cases: 2.40
Count of perfect (error zero) individuals by case: (89 571 4 252 5 235 89 240 339 574)
Population mean number of perfect (error zero) cases: 2.40
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 3, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup_times} {:close 2, :instruction boolean_pop} {:close 1, :instruction exec_empty} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_dup_times} {:close 1, :instruction in3} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_pop} {:close 2, :instruction exec_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_add} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_while} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_min} {:close 1, :instruction exec_pop})
Best program: (boolean_dup print_integer integer_stackdepth integer_dup_items boolean_flush integer_min integer_eq boolean_rot in2 print_integer integer_empty boolean_frominteger integer_fromboolean integer_lte in4 integer_dup integer_dup_times exec_noop exec_when (integer_lte boolean_yankdup) boolean_and boolean_eq boolean_yank boolean_swap boolean_swap integer_flush exec_pop (integer_swap boolean_invert_first_then_and exec_while (boolean_xor exec_stackdepth integer_dup_times boolean_pop)) exec_empty boolean_dup_items exec_dup_times (in3) integer_pop exec_pop (exec_yank) exec_k_when_autoconstructing (integer_add integer_mult) (integer_empty exec_while (integer_sub boolean_frominteger) integer_dup) exec_stackdepth boolean_or boolean_dup_items integer_min exec_pop ())
Errors: [0 0 1 1 1 1 0 1 0 0]
Total: 5
Mean: 0.5
Genome size: 55
Size: 65
Percent parens: 0.154
--- Population Statistics ---
Average total errors in population: 7.602
Median total errors in population: 6
Error averages by case: (0.911 0.429 0.996 0.748 0.995 0.765 0.911 0.76 0.661 0.426)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 65.894
Average program size in population (points): 91.711
Average percent parens in population: 0.267
Minimum age in population: 1.0
Maximum age in population: 1.0
Average age in population: 1.0
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 43
Genome diversity (% unique genomes):	 0.939
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 43
Syntactic diversity (% unique Push programs):	 0.939
Total error diversity:				 0.006
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.142
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 844479
--- Timings ---
Current time: 1559593813315 milliseconds
Total Time:           4.7 seconds
Initialization:       0.1 seconds,  2.1%
Reproduction:         1.9 seconds, 39.9%
Fitness Testing:      2.2 seconds, 48.0%
Report:               0.5 seconds, 10.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 644
Test mean error for best: 0.64400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 21                  | Program output: 21                 
Correct output: -23                 | Program output: 62                 
Correct output: -96                 | Program output: -96                
Correct output: 76                  | Program output: 76                 
Correct output: 14                  | Program output: 83                 
Correct output: -56                 | Program output: 87                 
Correct output: 28                  | Program output: 28                 
Correct output: -20                 | Program output: 24                 
Correct output: 38                  | Program output: 87                 
Correct output: 9                   | Program output: 9                  
Correct output: -80                 | Program output: -80                
Correct output: 22                  | Program output: 22                 
Correct output: -35                 | Program output: -35                
Correct output: -31                 | Program output: -31                
Correct output: -8                  | Program output: -8                 
Correct output: 10                  | Program output: 55                 
Correct output: 21                  | Program output: 61                 
Correct output: 31                  | Program output: 31                 
Correct output: 3                   | Program output: 22                 
Correct output: 2                   | Program output: 9                  
Correct output: 33                  | Program output: 52                 
Correct output: 4                   | Program output: 4                  
Correct output: 20                  | Program output: 20                 
Correct output: 56                  | Program output: 56                 
Correct output: 4                   | Program output: 4                  
Correct output: 32                  | Program output: 32                 
Correct output: 21                  | Program output: 97                 
Correct output: 7                   | Program output: 88                 
Correct output: 15                  | Program output: 15                 
Correct output: 4                   | Program output: 68                 
Correct output: 30                  | Program output: 30                 
Correct output: 31                  | Program output: 50                 
Correct output: 1                   | Program output: 78                 
Correct output: 45                  | Program output: 94                 
Correct output: 8                   | Program output: 64                 
Correct output: -21                 | Program output: 56                 
Correct output: -38                 | Program output: -38                
Correct output: -65                 | Program output: -65                
Correct output: -87                 | Program output: 11                 
Correct output: -58                 | Program output: 74                 
Correct output: -80                 | Program output: 86                 
Correct output: -77                 | Program output: 2                  
Correct output: -31                 | Program output: -7                 
Correct output: -83                 | Program output: 71                 
Correct output: -63                 | Program output: -63                
Correct output: -90                 | Program output: 4                  
Correct output: -85                 | Program output: 0                  
Correct output: -92                 | Program output: -92                
Correct output: -75                 | Program output: -75                
Correct output: -75                 | Program output: -75                
Correct output: -24                 | Program output: 60                 
Correct output: -4                  | Program output: 8                  
Correct output: -53                 | Program output: -43                
Correct output: -55                 | Program output: -20                
Correct output: -65                 | Program output: -51                
Correct output: -66                 | Program output: -33                
Correct output: -49                 | Program output: 86                 
Correct output: -49                 | Program output: -30                
Correct output: -98                 | Program output: -98                
Correct output: 0                   | Program output: 55                 
Correct output: -62                 | Program output: -26                
Correct output: -69                 | Program output: -62                
Correct output: -43                 | Program output: -39                
Correct output: -95                 | Program output: 16                 
Correct output: -34                 | Program output: -34                
Correct output: -22                 | Program output: 57                 
Correct output: -87                 | Program output: 27                 
Correct output: -12                 | Program output: -12                
Correct output: -64                 | Program output: 70                 
Correct output: -7                  | Program output: -6                 
Correct output: -82                 | Program output: -82                
Correct output: -91                 | Program output: 33                 
Correct output: -56                 | Program output: -56                
Correct output: -95                 | Program output: -93                
Correct output: -80                 | Program output: 94                 
Correct output: -77                 | Program output: 11                 
Correct output: -92                 | Program output: -14                
Correct output: -82                 | Program output: -23                
Correct output: -76                 | Program output: 39                 
Correct output: -56                 | Program output: 97                 
Correct output: -39                 | Program output: -39                
Correct output: -76                 | Program output: -76                
Correct output: -55                 | Program output: -55                
Correct output: -97                 | Program output: 61                 
Correct output: -53                 | Program output: 61                 
Correct output: -42                 | Program output: 12                 
Correct output: 49                  | Program output: 49                 
Correct output: -80                 | Program output: -56                
Correct output: -44                 | Program output: -44                
Correct output: -97                 | Program output: -97                
Correct output: -71                 | Program output: 73                 
Correct output: -62                 | Program output: -62                
Correct output: 1                   | Program output: 62                 
Correct output: -33                 | Program output: 96                 
Correct output: -55                 | Program output: -47                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_gte} {:close 0, :instruction integer_div} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in4} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_lt} {:close 1, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_shove} {:close 1, :instruction in4} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction tag_exec_204} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction print_newline} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 1, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction print_exec} {:close 0, :instruction in2} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_pop})
Lexicase best program: (integer_gte integer_div integer_fromboolean integer_mult in4 exec_eq integer_dec boolean_stackdepth integer_lt exec_pop () in1 in3 integer_dec integer_shove exec_do*while (print_integer boolean_rot exec_s (integer_lte in2 in1 integer_rot exec_shove (in4) integer_div integer_mod integer_mult boolean_dup boolean_pop integer_gt) (exec_y_when_autoconstructing () exec_y (boolean_dup_times) tag_exec_204 (exec_empty exec_if (print_integer integer_flush print_newline integer_gte boolean_and in1) (exec_empty integer_dup in3 exec_swap (print_exec (in2 exec_when (boolean_and exec_shove (print_integer integer_gt exec_pop ())))) ()))) ()))
Lexicase best errors: [0 0 1 1 0 0 0 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 72
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_gte} {:close 0, :instruction integer_div} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in4} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_lt} {:close 1, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_shove} {:close 1, :instruction in4} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction tag_exec_204} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction print_newline} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 1, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction print_exec} {:close 0, :instruction in2} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_pop})
Zero cases best program: (integer_gte integer_div integer_fromboolean integer_mult in4 exec_eq integer_dec boolean_stackdepth integer_lt exec_pop () in1 in3 integer_dec integer_shove exec_do*while (print_integer boolean_rot exec_s (integer_lte in2 in1 integer_rot exec_shove (in4) integer_div integer_mod integer_mult boolean_dup boolean_pop integer_gt) (exec_y_when_autoconstructing () exec_y (boolean_dup_times) tag_exec_204 (exec_empty exec_if (print_integer integer_flush print_newline integer_gte boolean_and in1) (exec_empty integer_dup in3 exec_swap (print_exec (in2 exec_when (boolean_and exec_shove (print_integer integer_gt exec_pop ())))) ()))) ()))
Zero cases best errors: [0 0 1 1 0 0 0 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 72
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (96 162 89 211 96 96 630 162 380 596)
Population mean number of elite cases: 2.52
Count of perfect (error zero) individuals by case: (96 162 89 211 96 96 630 162 380 596)
Population mean number of perfect (error zero) cases: 2.52
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_gte} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mult} {:close 0, :instruction in4} {:close 0, :instruction exec_when} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_dec} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_lt} {:close 1, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_s} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction integer_rot} {:close 0, :instruction tag_exec_696} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_flush} {:close 1, :instruction in4} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction tag_exec_204} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction print_newline} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_lte} {:close 1, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction print_exec} {:close 0, :instruction in2} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_gt})
Best program: (integer_gte integer_div integer_mult in4 exec_when (exec_eq integer_dec) exec_dup_items exec_stackdepth boolean_stackdepth integer_lt exec_pop () in1 in3 integer_shove exec_do*while (boolean_invert_first_then_and) print_integer boolean_rot exec_s (in2 in1 integer_rot tag_exec_696 (exec_shove (exec_flush in4) integer_max boolean_yankdup integer_div integer_mod integer_mult boolean_dup boolean_pop integer_gt) exec_y_when_autoconstructing () boolean_dup_times) (tag_exec_204 (exec_empty exec_y_when_autoconstructing (exec_if (print_integer integer_flush print_newline integer_gte boolean_and integer_lte in1) (exec_empty integer_dup in3 exec_swap (print_exec (in2 exec_when (boolean_and exec_shove (print_integer integer_gt integer_gt)))) ())))) ())
Errors: [0 0 1 1 0 0 0 1 0 0]
Total: 3
Mean: 0.3
Genome size: 60
Size: 79
Percent parens: 0.241
--- Population Statistics ---
Average total errors in population: 7.482
Median total errors in population: 7
Error averages by case: (0.904 0.838 0.911 0.789 0.904 0.904 0.37 0.838 0.62 0.404)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 64.541
Average program size in population (points): 91.546
Average percent parens in population: 0.274
Minimum age in population: 2.0
Maximum age in population: 2.0
Average age in population: 2.0
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 20
Genome diversity (% unique genomes):	 0.955
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 20
Syntactic diversity (% unique Push programs):	 0.955
Total error diversity:				 0.007
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.18
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1235612
--- Timings ---
Current time: 1559593815461 milliseconds
Total Time:           6.9 seconds
Initialization:       0.1 seconds,  1.5%
Reproduction:         3.2 seconds, 45.9%
Fitness Testing:      2.7 seconds, 39.9%
Report:               0.9 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 543
Test mean error for best: 0.54300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 21                  | Program output: 21                 
Correct output: -23                 | Program output: -23                
Correct output: -96                 | Program output: -96                
Correct output: 76                  | Program output: 76                 
Correct output: 14                  | Program output: 83                 
Correct output: -56                 | Program output: -56                
Correct output: 28                  | Program output: 53                 
Correct output: -20                 | Program output: 24                 
Correct output: 38                  | Program output: 38                 
Correct output: 9                   | Program output: 31                 
Correct output: -80                 | Program output: -80                
Correct output: 22                  | Program output: 22                 
Correct output: -35                 | Program output: -35                
Correct output: -31                 | Program output: -31                
Correct output: -8                  | Program output: -8                 
Correct output: 10                  | Program output: 10                 
Correct output: 21                  | Program output: 21                 
Correct output: 31                  | Program output: 94                 
Correct output: 3                   | Program output: 3                  
Correct output: 2                   | Program output: 6                  
Correct output: 33                  | Program output: 33                 
Correct output: 4                   | Program output: 100                
Correct output: 20                  | Program output: 49                 
Correct output: 56                  | Program output: 59                 
Correct output: 4                   | Program output: 54                 
Correct output: 32                  | Program output: 41                 
Correct output: 21                  | Program output: 21                 
Correct output: 7                   | Program output: 7                  
Correct output: 15                  | Program output: 90                 
Correct output: 4                   | Program output: 48                 
Correct output: 30                  | Program output: 57                 
Correct output: 31                  | Program output: 31                 
Correct output: 1                   | Program output: 1                  
Correct output: 45                  | Program output: 88                 
Correct output: 8                   | Program output: 61                 
Correct output: -21                 | Program output: -21                
Correct output: -38                 | Program output: 55                 
Correct output: -65                 | Program output: -16                
Correct output: -87                 | Program output: -33                
Correct output: -58                 | Program output: -58                
Correct output: -80                 | Program output: 18                 
Correct output: -77                 | Program output: -77                
Correct output: -31                 | Program output: -31                
Correct output: -83                 | Program output: -83                
Correct output: -63                 | Program output: -21                
Correct output: -90                 | Program output: 82                 
Correct output: -85                 | Program output: -85                
Correct output: -92                 | Program output: -70                
Correct output: -75                 | Program output: 25                 
Correct output: -75                 | Program output: 5                  
Correct output: -24                 | Program output: -24                
Correct output: -4                  | Program output: 9                  
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: -55                
Correct output: -65                 | Program output: -65                
Correct output: -66                 | Program output: -66                
Correct output: -49                 | Program output: -49                
Correct output: -49                 | Program output: -46                
Correct output: -98                 | Program output: 62                 
Correct output: 0                   | Program output: 55                 
Correct output: -62                 | Program output: -62                
Correct output: -69                 | Program output: -69                
Correct output: -43                 | Program output: 91                 
Correct output: -95                 | Program output: -95                
Correct output: -34                 | Program output: 67                 
Correct output: -22                 | Program output: -22                
Correct output: -87                 | Program output: -13                
Correct output: -12                 | Program output: 66                 
Correct output: -64                 | Program output: -45                
Correct output: -7                  | Program output: -7                 
Correct output: -82                 | Program output: -50                
Correct output: -91                 | Program output: -91                
Correct output: -56                 | Program output: -25                
Correct output: -95                 | Program output: -26                
Correct output: -80                 | Program output: -80                
Correct output: -77                 | Program output: -3                 
Correct output: -92                 | Program output: -92                
Correct output: -82                 | Program output: -82                
Correct output: -76                 | Program output: -55                
Correct output: -56                 | Program output: -56                
Correct output: -39                 | Program output: 76                 
Correct output: -76                 | Program output: -62                
Correct output: -55                 | Program output: -28                
Correct output: -97                 | Program output: 14                 
Correct output: -53                 | Program output: -53                
Correct output: -42                 | Program output: -42                
Correct output: 49                  | Program output: 70                 
Correct output: -80                 | Program output: -50                
Correct output: -44                 | Program output: 47                 
Correct output: -97                 | Program output: -42                
Correct output: -71                 | Program output: -43                
Correct output: -62                 | Program output: -1                 
Correct output: 1                   | Program output: 1                  
Correct output: -33                 | Program output: -33                
Correct output: -55                 | Program output: -55                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in4} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_dec} {:close 1, :instruction exec_dup_items} {:close 1, :instruction integer_lt} {:close 1, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 2, :instruction in3} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_do*count} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction tag_exec_696} {:close 1, :instruction in4} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_do*times} {:close 0, :instruction in4} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction tag_exec_204} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction print_newline} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 1, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction print_exec} {:close 0, :instruction in2} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_add} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_pop})
Lexicase best program: (integer_div integer_fromboolean integer_mult in4 exec_when (exec_do*while (exec_eq integer_dec) exec_dup_items) integer_lt exec_pop () in1 in3 in3 integer_dec integer_shove exec_do*while (print_integer boolean_rot exec_s (integer_lte exec_do*count () in2 in1 integer_rot boolean_empty tag_exec_696 (in4) integer_max boolean_yankdup exec_do*times () in4 integer_div integer_mod integer_mult boolean_dup boolean_pop integer_gt) (exec_y_when_autoconstructing () boolean_dup_times) (tag_exec_204 (exec_empty integer_div exec_y_when_autoconstructing (exec_flush exec_if (in2 print_integer integer_flush print_newline integer_gte boolean_and in1) (exec_empty integer_dup exec_when (in3 print_exec (in2 boolean_stackdepth exec_when (boolean_and exec_shove (integer_add integer_gt integer_gt exec_pop ()))))))))))
Lexicase best errors: [0 0 1 0 1 1 1 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 88
Percent parens: 0.239
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in4} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_dec} {:close 1, :instruction exec_dup_items} {:close 1, :instruction integer_lt} {:close 1, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 2, :instruction in3} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_do*count} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction tag_exec_696} {:close 1, :instruction in4} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_do*times} {:close 0, :instruction in4} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction tag_exec_204} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction print_newline} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 1, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction print_exec} {:close 0, :instruction in2} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_add} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_pop})
Zero cases best program: (integer_div integer_fromboolean integer_mult in4 exec_when (exec_do*while (exec_eq integer_dec) exec_dup_items) integer_lt exec_pop () in1 in3 in3 integer_dec integer_shove exec_do*while (print_integer boolean_rot exec_s (integer_lte exec_do*count () in2 in1 integer_rot boolean_empty tag_exec_696 (in4) integer_max boolean_yankdup exec_do*times () in4 integer_div integer_mod integer_mult boolean_dup boolean_pop integer_gt) (exec_y_when_autoconstructing () boolean_dup_times) (tag_exec_204 (exec_empty integer_div exec_y_when_autoconstructing (exec_flush exec_if (in2 print_integer integer_flush print_newline integer_gte boolean_and in1) (exec_empty integer_dup exec_when (in3 print_exec (in2 boolean_stackdepth exec_when (boolean_and exec_shove (integer_add integer_gt integer_gt exec_pop ()))))))))))
Zero cases best errors: [0 0 1 0 1 1 1 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 88
Percent parens: 0.239
--- Lexicase Population Statistics ---
Count of elite individuals by case: (88 91 308 86 307 86 308 82 88 91)
Population mean number of elite cases: 1.53
Count of perfect (error zero) individuals by case: (88 91 308 86 307 86 308 82 88 91)
Population mean number of perfect (error zero) cases: 1.53
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in4} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_dec} {:close 1, :instruction exec_dup_items} {:close 1, :instruction integer_lt} {:close 1, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 2, :instruction in3} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_do*count} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction tag_exec_696} {:close 1, :instruction in4} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_do*times} {:close 0, :instruction in4} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction tag_exec_204} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction print_newline} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 1, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction print_exec} {:close 0, :instruction in2} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_add} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_pop})
Best program: (integer_div integer_fromboolean integer_mult in4 exec_when (exec_do*while (exec_eq integer_dec) exec_dup_items) integer_lt exec_pop () in1 in3 in3 integer_dec integer_shove exec_do*while (print_integer boolean_rot exec_s (integer_lte exec_do*count () in2 in1 integer_rot boolean_empty tag_exec_696 (in4) integer_max boolean_yankdup exec_do*times () in4 integer_div integer_mod integer_mult boolean_dup boolean_pop integer_gt) (exec_y_when_autoconstructing () boolean_dup_times) (tag_exec_204 (exec_empty integer_div exec_y_when_autoconstructing (exec_flush exec_if (in2 print_integer integer_flush print_newline integer_gte boolean_and in1) (exec_empty integer_dup exec_when (in3 print_exec (in2 boolean_stackdepth exec_when (boolean_and exec_shove (integer_add integer_gt integer_gt exec_pop ()))))))))))
Errors: [0 0 1 0 1 1 1 0 1 0]
Total: 5
Mean: 0.5
Genome size: 67
Size: 88
Percent parens: 0.239
--- Population Statistics ---
Average total errors in population: 8.465
Median total errors in population: 8
Error averages by case: (0.912 0.909 0.692 0.914 0.693 0.914 0.692 0.918 0.912 0.909)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 58.118
Average program size in population (points): 78.973
Average percent parens in population: 0.251
Minimum age in population: 3.0
Maximum age in population: 3.0
Average age in population: 3.0
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 16
Genome diversity (% unique genomes):	 0.957
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.957
Total error diversity:				 0.006
Error (vector) diversity:			 0.022
Behavioral diversity:				 0.249
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 1757941
--- Timings ---
Current time: 1559593817643 milliseconds
Total Time:           9.0 seconds
Initialization:       0.1 seconds,  1.1%
Reproduction:         4.3 seconds, 47.9%
Fitness Testing:      3.4 seconds, 37.5%
Report:               1.2 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 329
Test mean error for best: 0.32900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 21                  | Program output: 21                 
Correct output: -23                 | Program output: -23                
Correct output: -96                 | Program output: -96                
Correct output: 76                  | Program output: 76                 
Correct output: 14                  | Program output: 83                 
Correct output: -56                 | Program output: -56                
Correct output: 28                  | Program output: 28                 
Correct output: -20                 | Program output: 24                 
Correct output: 38                  | Program output: 38                 
Correct output: 9                   | Program output: 9                  
Correct output: -80                 | Program output: -80                
Correct output: 22                  | Program output: 22                 
Correct output: -35                 | Program output: -35                
Correct output: -31                 | Program output: -31                
Correct output: -8                  | Program output: -8                 
Correct output: 10                  | Program output: 10                 
Correct output: 21                  | Program output: 21                 
Correct output: 31                  | Program output: 31                 
Correct output: 3                   | Program output: 3                  
Correct output: 2                   | Program output: 6                  
Correct output: 33                  | Program output: 33                 
Correct output: 4                   | Program output: 4                  
Correct output: 20                  | Program output: 20                 
Correct output: 56                  | Program output: 56                 
Correct output: 4                   | Program output: 4                  
Correct output: 32                  | Program output: 32                 
Correct output: 21                  | Program output: 21                 
Correct output: 7                   | Program output: 7                  
Correct output: 15                  | Program output: 15                 
Correct output: 4                   | Program output: 48                 
Correct output: 30                  | Program output: 30                 
Correct output: 31                  | Program output: 31                 
Correct output: 1                   | Program output: 1                  
Correct output: 45                  | Program output: 88                 
Correct output: 8                   | Program output: 61                 
Correct output: -21                 | Program output: -21                
Correct output: -38                 | Program output: -38                
Correct output: -65                 | Program output: -65                
Correct output: -87                 | Program output: -33                
Correct output: -58                 | Program output: -58                
Correct output: -80                 | Program output: 18                 
Correct output: -77                 | Program output: -77                
Correct output: -31                 | Program output: -31                
Correct output: -83                 | Program output: -83                
Correct output: -63                 | Program output: -21                
Correct output: -90                 | Program output: 4                  
Correct output: -85                 | Program output: -85                
Correct output: -92                 | Program output: -92                
Correct output: -75                 | Program output: -75                
Correct output: -75                 | Program output: -75                
Correct output: -24                 | Program output: -24                
Correct output: -4                  | Program output: 8                  
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: -55                
Correct output: -65                 | Program output: -65                
Correct output: -66                 | Program output: -66                
Correct output: -49                 | Program output: -49                
Correct output: -49                 | Program output: -46                
Correct output: -98                 | Program output: -98                
Correct output: 0                   | Program output: 55                 
Correct output: -62                 | Program output: -62                
Correct output: -69                 | Program output: -69                
Correct output: -43                 | Program output: -39                
Correct output: -95                 | Program output: -95                
Correct output: -34                 | Program output: -34                
Correct output: -22                 | Program output: -22                
Correct output: -87                 | Program output: -13                
Correct output: -12                 | Program output: -12                
Correct output: -64                 | Program output: -45                
Correct output: -7                  | Program output: -7                 
Correct output: -82                 | Program output: -82                
Correct output: -91                 | Program output: -91                
Correct output: -56                 | Program output: -56                
Correct output: -95                 | Program output: -93                
Correct output: -80                 | Program output: -80                
Correct output: -77                 | Program output: -3                 
Correct output: -92                 | Program output: -92                
Correct output: -82                 | Program output: -82                
Correct output: -76                 | Program output: -55                
Correct output: -56                 | Program output: -56                
Correct output: -39                 | Program output: -39                
Correct output: -76                 | Program output: -76                
Correct output: -55                 | Program output: -55                
Correct output: -97                 | Program output: 14                 
Correct output: -53                 | Program output: -53                
Correct output: -42                 | Program output: -42                
Correct output: 49                  | Program output: 49                 
Correct output: -80                 | Program output: -56                
Correct output: -44                 | Program output: -44                
Correct output: -97                 | Program output: -97                
Correct output: -71                 | Program output: -43                
Correct output: -62                 | Program output: -62                
Correct output: 1                   | Program output: 1                  
Correct output: -33                 | Program output: -33                
Correct output: -55                 | Program output: -55                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in4} {:close 0, :instruction exec_when} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_dec} {:close 1, :instruction exec_dup_items} {:close 1, :instruction integer_lt} {:close 1, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 2, :instruction in3} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_min} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_dup_times} {:close 1, :instruction exec_do*count} {:close 0, :instruction in2} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction tag_exec_696} {:close 1, :instruction in4} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_do*times} {:close 0, :instruction in4} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_dup_times} {:close 2, :instruction exec_y} {:close 0, :instruction tag_exec_204} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction print_newline} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 1, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction print_exec} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_when} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_add} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_pop})
Lexicase best program: (integer_div integer_fromboolean integer_mult in4 exec_when (exec_eq integer_dec) exec_dup_items integer_lt exec_pop () in1 boolean_eq in3 in3 integer_dec integer_shove integer_min exec_do*while (print_integer boolean_rot integer_lte exec_dup_times () exec_do*count () in2 integer_rot boolean_empty tag_exec_696 (in4) integer_max boolean_yankdup exec_do*times () in4 integer_div integer_mult exec_s_when_autoconstructing (boolean_dup boolean_pop integer_gt) (exec_y_when_autoconstructing () boolean_dup_times) (exec_y ()) tag_exec_204 (exec_empty integer_div exec_y_when_autoconstructing (exec_flush exec_if (in2 print_integer boolean_dup_times integer_flush integer_mult print_newline integer_gte boolean_and in1) (exec_empty integer_dup exec_when (in3 print_exec (integer_pop in2 boolean_stackdepth boolean_invert_first_then_and exec_when (exec_shove (integer_add integer_gt integer_gt exec_pop ())))))))))
Lexicase best errors: [0 1 0 1 1 0 0 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 93
Percent parens: 0.237
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in4} {:close 0, :instruction exec_when} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_dec} {:close 1, :instruction exec_dup_items} {:close 1, :instruction integer_lt} {:close 1, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 2, :instruction in3} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_min} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_dup_times} {:close 1, :instruction exec_do*count} {:close 0, :instruction in2} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction tag_exec_696} {:close 1, :instruction in4} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_do*times} {:close 0, :instruction in4} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_dup_times} {:close 2, :instruction exec_y} {:close 0, :instruction tag_exec_204} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction print_newline} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 1, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction print_exec} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_when} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_add} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_pop})
Zero cases best program: (integer_div integer_fromboolean integer_mult in4 exec_when (exec_eq integer_dec) exec_dup_items integer_lt exec_pop () in1 boolean_eq in3 in3 integer_dec integer_shove integer_min exec_do*while (print_integer boolean_rot integer_lte exec_dup_times () exec_do*count () in2 integer_rot boolean_empty tag_exec_696 (in4) integer_max boolean_yankdup exec_do*times () in4 integer_div integer_mult exec_s_when_autoconstructing (boolean_dup boolean_pop integer_gt) (exec_y_when_autoconstructing () boolean_dup_times) (exec_y ()) tag_exec_204 (exec_empty integer_div exec_y_when_autoconstructing (exec_flush exec_if (in2 print_integer boolean_dup_times integer_flush integer_mult print_newline integer_gte boolean_and in1) (exec_empty integer_dup exec_when (in3 print_exec (integer_pop in2 boolean_stackdepth boolean_invert_first_then_and exec_when (exec_shove (integer_add integer_gt integer_gt exec_pop ())))))))))
Zero cases best errors: [0 1 0 1 1 0 0 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 93
Percent parens: 0.237
--- Lexicase Population Statistics ---
Count of elite individuals by case: (207 37 191 85 108 180 239 161 89 193)
Population mean number of elite cases: 1.49
Count of perfect (error zero) individuals by case: (207 37 191 85 108 180 239 161 89 193)
Population mean number of perfect (error zero) cases: 1.49
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in4} {:close 0, :instruction exec_when} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_dec} {:close 1, :instruction exec_dup_items} {:close 1, :instruction integer_lt} {:close 1, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 2, :instruction in3} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_min} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_dup_times} {:close 1, :instruction exec_do*count} {:close 0, :instruction in2} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction tag_exec_696} {:close 1, :instruction in4} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_do*times} {:close 0, :instruction in4} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_dup_times} {:close 2, :instruction exec_y} {:close 0, :instruction tag_exec_204} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction print_newline} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 1, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction print_exec} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_when} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_add} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_pop})
Best program: (integer_div integer_fromboolean integer_mult in4 exec_when (exec_eq integer_dec) exec_dup_items integer_lt exec_pop () in1 boolean_eq in3 in3 integer_dec integer_shove integer_min exec_do*while (print_integer boolean_rot integer_lte exec_dup_times () exec_do*count () in2 integer_rot boolean_empty tag_exec_696 (in4) integer_max boolean_yankdup exec_do*times () in4 integer_div integer_mult exec_s_when_autoconstructing (boolean_dup boolean_pop integer_gt) (exec_y_when_autoconstructing () boolean_dup_times) (exec_y ()) tag_exec_204 (exec_empty integer_div exec_y_when_autoconstructing (exec_flush exec_if (in2 print_integer boolean_dup_times integer_flush integer_mult print_newline integer_gte boolean_and in1) (exec_empty integer_dup exec_when (in3 print_exec (integer_pop in2 boolean_stackdepth boolean_invert_first_then_and exec_when (exec_shove (integer_add integer_gt integer_gt exec_pop ())))))))))
Errors: [0 1 0 1 1 0 0 0 1 0]
Total: 4
Mean: 0.4
Genome size: 71
Size: 93
Percent parens: 0.237
--- Population Statistics ---
Average total errors in population: 8.51
Median total errors in population: 9
Error averages by case: (0.793 0.963 0.809 0.915 0.892 0.82 0.761 0.839 0.911 0.807)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 65.162
Average program size in population (points): 86.392
Average percent parens in population: 0.242
Minimum age in population: 4.0
Maximum age in population: 4.0
Average age in population: 4.0
Median age in population: 4.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.007
Error (vector) diversity:			 0.046
Behavioral diversity:				 0.377
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 2373988
--- Timings ---
Current time: 1559593820037 milliseconds
Total Time:          11.2 seconds
Initialization:       0.1 seconds,  0.9%
Reproduction:         5.5 seconds, 49.0%
Fitness Testing:      4.0 seconds, 35.9%
Report:               1.6 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 433
Test mean error for best: 0.43300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 21                  | Program output: 21                 
Correct output: -23                 | Program output: -23                
Correct output: -96                 | Program output: -96                
Correct output: 76                  | Program output: 76                 
Correct output: 14                  | Program output: 83                 
Correct output: -56                 | Program output: 87                 
Correct output: 28                  | Program output: 28                 
Correct output: -20                 | Program output: 24                 
Correct output: 38                  | Program output: 38                 
Correct output: 9                   | Program output: 9                  
Correct output: -80                 | Program output: -80                
Correct output: 22                  | Program output: 22                 
Correct output: -35                 | Program output: -35                
Correct output: -31                 | Program output: -31                
Correct output: -8                  | Program output: -8                 
Correct output: 10                  | Program output: 10                 
Correct output: 21                  | Program output: 21                 
Correct output: 31                  | Program output: 31                 
Correct output: 3                   | Program output: 3                  
Correct output: 2                   | Program output: 6                  
Correct output: 33                  | Program output: 33                 
Correct output: 4                   | Program output: 4                  
Correct output: 20                  | Program output: 20                 
Correct output: 56                  | Program output: 56                 
Correct output: 4                   | Program output: 4                  
Correct output: 32                  | Program output: 32                 
Correct output: 21                  | Program output: 21                 
Correct output: 7                   | Program output: 7                  
Correct output: 15                  | Program output: 15                 
Correct output: 4                   | Program output: 48                 
Correct output: 30                  | Program output: 30                 
Correct output: 31                  | Program output: 31                 
Correct output: 1                   | Program output: 1                  
Correct output: 45                  | Program output: 88                 
Correct output: 8                   | Program output: 61                 
Correct output: -21                 | Program output: 43                 
Correct output: -38                 | Program output: -38                
Correct output: -65                 | Program output: -65                
Correct output: -87                 | Program output: -33                
Correct output: -58                 | Program output: -58                
Correct output: -80                 | Program output: 18                 
Correct output: -77                 | Program output: 2                  
Correct output: -31                 | Program output: -31                
Correct output: -83                 | Program output: -83                
Correct output: -63                 | Program output: -63                
Correct output: -90                 | Program output: 4                  
Correct output: -85                 | Program output: -85                
Correct output: -92                 | Program output: -92                
Correct output: -75                 | Program output: -75                
Correct output: -75                 | Program output: -75                
Correct output: -24                 | Program output: -24                
Correct output: -4                  | Program output: 8                  
Correct output: -53                 | Program output: -43                
Correct output: -55                 | Program output: -20                
Correct output: -65                 | Program output: -51                
Correct output: -66                 | Program output: -33                
Correct output: -49                 | Program output: 53                 
Correct output: -49                 | Program output: -30                
Correct output: -98                 | Program output: -98                
Correct output: 0                   | Program output: 55                 
Correct output: -62                 | Program output: -26                
Correct output: -69                 | Program output: -69                
Correct output: -43                 | Program output: -39                
Correct output: -95                 | Program output: 16                 
Correct output: -34                 | Program output: -34                
Correct output: -22                 | Program output: 37                 
Correct output: -87                 | Program output: -87                
Correct output: -12                 | Program output: -12                
Correct output: -64                 | Program output: -64                
Correct output: -7                  | Program output: -7                 
Correct output: -82                 | Program output: -82                
Correct output: -91                 | Program output: -65                
Correct output: -56                 | Program output: -56                
Correct output: -95                 | Program output: -95                
Correct output: -80                 | Program output: -58                
Correct output: -77                 | Program output: -3                 
Correct output: -92                 | Program output: -92                
Correct output: -82                 | Program output: -82                
Correct output: -76                 | Program output: -76                
Correct output: -56                 | Program output: -56                
Correct output: -39                 | Program output: -39                
Correct output: -76                 | Program output: -76                
Correct output: -55                 | Program output: -55                
Correct output: -97                 | Program output: 14                 
Correct output: -53                 | Program output: -2                 
Correct output: -42                 | Program output: -42                
Correct output: 49                  | Program output: 49                 
Correct output: -80                 | Program output: -56                
Correct output: -44                 | Program output: -44                
Correct output: -97                 | Program output: -97                
Correct output: -71                 | Program output: -43                
Correct output: -62                 | Program output: -62                
Correct output: 1                   | Program output: 62                 
Correct output: -33                 | Program output: 92                 
Correct output: -55                 | Program output: -53                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in4} {:close 0, :instruction exec_when} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_dec} {:close 1, :instruction exec_dup_items} {:close 1, :instruction integer_lt} {:close 1, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_min} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_dup_times} {:close 1, :instruction exec_do*count} {:close 0, :instruction in2} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction tag_exec_696} {:close 1, :instruction in4} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_dup_times} {:close 2, :instruction exec_y} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction print_newline} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 1, :instruction in1} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction print_exec} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_lt} {:close 0, :instruction in2} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_when} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_pop})
Lexicase best program: (integer_div integer_fromboolean integer_mult in4 exec_when (exec_eq integer_dec) exec_dup_items integer_lt exec_pop () in1 exec_y_when_autoconstructing (boolean_eq in3 integer_yankdup integer_dec integer_shove integer_rot integer_min) exec_do*while (print_integer boolean_rot integer_lte exec_dup_times () exec_do*count () in2 integer_rot boolean_empty tag_exec_696 (in4) integer_max boolean_yankdup exec_do*times () integer_div integer_mult exec_s_when_autoconstructing (boolean_pop exec_y_when_autoconstructing () boolean_dup_times) (exec_y ()) (exec_empty integer_div exec_y_when_autoconstructing (boolean_yank exec_flush exec_if (in2 print_integer boolean_dup_times integer_flush integer_mult print_newline exec_yankdup integer_gte boolean_and in1) (exec_empty boolean_not) integer_dup exec_when (in3 print_exec (integer_pop integer_lt) in2 boolean_stackdepth boolean_invert_first_then_and exec_when (exec_shove (integer_gt exec_pop ())))))))
Lexicase best errors: [0 0 0 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 93
Percent parens: 0.237
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in4} {:close 0, :instruction exec_when} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_dec} {:close 1, :instruction exec_dup_items} {:close 1, :instruction integer_lt} {:close 1, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_min} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_dup_times} {:close 1, :instruction exec_do*count} {:close 0, :instruction in2} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction tag_exec_696} {:close 1, :instruction in4} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_dup_times} {:close 2, :instruction exec_y} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction print_newline} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 1, :instruction in1} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction print_exec} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_lt} {:close 0, :instruction in2} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_when} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_pop})
Zero cases best program: (integer_div integer_fromboolean integer_mult in4 exec_when (exec_eq integer_dec) exec_dup_items integer_lt exec_pop () in1 exec_y_when_autoconstructing (boolean_eq in3 integer_yankdup integer_dec integer_shove integer_rot integer_min) exec_do*while (print_integer boolean_rot integer_lte exec_dup_times () exec_do*count () in2 integer_rot boolean_empty tag_exec_696 (in4) integer_max boolean_yankdup exec_do*times () integer_div integer_mult exec_s_when_autoconstructing (boolean_pop exec_y_when_autoconstructing () boolean_dup_times) (exec_y ()) (exec_empty integer_div exec_y_when_autoconstructing (boolean_yank exec_flush exec_if (in2 print_integer boolean_dup_times integer_flush integer_mult print_newline exec_yankdup integer_gte boolean_and in1) (exec_empty boolean_not) integer_dup exec_when (in3 print_exec (integer_pop integer_lt) in2 boolean_stackdepth boolean_invert_first_then_and exec_when (exec_shove (integer_gt exec_pop ())))))))
Zero cases best errors: [0 0 0 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 93
Percent parens: 0.237
--- Lexicase Population Statistics ---
Count of elite individuals by case: (314 296 518 158 293 274 314 43 451 353)
Population mean number of elite cases: 3.01
Count of perfect (error zero) individuals by case: (314 296 518 158 293 274 314 43 451 353)
Population mean number of perfect (error zero) cases: 3.01
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction integer_mult} {:close 0, :instruction in4} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_dec} {:close 1, :instruction exec_dup_items} {:close 1, :instruction integer_lt} {:close 1, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 2, :instruction in3} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_min} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in2} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction tag_exec_696} {:close 1, :instruction in4} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_do*times} {:close 0, :instruction in4} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_dup_times} {:close 2, :instruction exec_y} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction print_newline} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 1, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction in3} {:close 0, :instruction print_exec} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_when} {:close 0, :instruction integer_add} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_pop})
Best program: (integer_div integer_mult in4 exec_eq integer_dec exec_dup_items integer_lt exec_pop () in1 boolean_eq in3 integer_dec integer_shove integer_min exec_do*while (print_integer integer_lte exec_dup_times () in2 integer_rot boolean_empty tag_exec_696 (in4) integer_max boolean_yankdup exec_do*times () in4 integer_div integer_mult exec_s_when_autoconstructing (boolean_dup boolean_pop boolean_yank integer_gt) (exec_y_when_autoconstructing () boolean_dup_times) (exec_y ()) exec_empty integer_div boolean_not) exec_y_when_autoconstructing (exec_flush exec_if (integer_flush integer_mult print_newline integer_gte boolean_and in1) (exec_empty boolean_invert_first_then_and integer_dup in3 print_exec (integer_pop in2 boolean_stackdepth boolean_invert_first_then_and exec_when (integer_add integer_gt integer_gt exec_pop ())))))
Errors: [0 0 0 0 0 0 0 1 0 0]
Total: 1
Mean: 0.1
Genome size: 63
Size: 80
Percent parens: 0.213
--- Population Statistics ---
Average total errors in population: 6.986
Median total errors in population: 8
Error averages by case: (0.686 0.704 0.482 0.842 0.707 0.726 0.686 0.957 0.549 0.647)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 66.224
Average program size in population (points): 86.995
Average percent parens in population: 0.238
Minimum age in population: 5.0
Maximum age in population: 5.0
Average age in population: 5.0
Median age in population: 5.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.01
Error (vector) diversity:			 0.081
Behavioral diversity:				 0.395
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 3017727
--- Timings ---
Current time: 1559593822457 milliseconds
Total Time:          13.6 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         6.7 seconds, 48.7%
Fitness Testing:      4.7 seconds, 34.7%
Report:               2.2 seconds, 15.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 216
Test mean error for best: 0.21600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 21                  | Program output: 21                 
Correct output: -23                 | Program output: -23                
Correct output: -96                 | Program output: -96                
Correct output: 76                  | Program output: 76                 
Correct output: 14                  | Program output: 83                 
Correct output: -56                 | Program output: -56                
Correct output: 28                  | Program output: 28                 
Correct output: -20                 | Program output: 24                 
Correct output: 38                  | Program output: 38                 
Correct output: 9                   | Program output: 9                  
Correct output: -80                 | Program output: -80                
Correct output: 22                  | Program output: 22                 
Correct output: -35                 | Program output: -35                
Correct output: -31                 | Program output: -31                
Correct output: -8                  | Program output: -8                 
Correct output: 10                  | Program output: 10                 
Correct output: 21                  | Program output: 21                 
Correct output: 31                  | Program output: 31                 
Correct output: 3                   | Program output: 3                  
Correct output: 2                   | Program output: 6                  
Correct output: 33                  | Program output: 33                 
Correct output: 4                   | Program output: 4                  
Correct output: 20                  | Program output: 20                 
Correct output: 56                  | Program output: 56                 
Correct output: 4                   | Program output: 4                  
Correct output: 32                  | Program output: 32                 
Correct output: 21                  | Program output: 21                 
Correct output: 7                   | Program output: 7                  
Correct output: 15                  | Program output: 15                 
Correct output: 4                   | Program output: 48                 
Correct output: 30                  | Program output: 30                 
Correct output: 31                  | Program output: 31                 
Correct output: 1                   | Program output: 1                  
Correct output: 45                  | Program output: 45                 
Correct output: 8                   | Program output: 8                  
Correct output: -21                 | Program output: -21                
Correct output: -38                 | Program output: -38                
Correct output: -65                 | Program output: -65                
Correct output: -87                 | Program output: -33                
Correct output: -58                 | Program output: -58                
Correct output: -80                 | Program output: 18                 
Correct output: -77                 | Program output: -77                
Correct output: -31                 | Program output: -31                
Correct output: -83                 | Program output: -83                
Correct output: -63                 | Program output: -63                
Correct output: -90                 | Program output: 4                  
Correct output: -85                 | Program output: -85                
Correct output: -92                 | Program output: -92                
Correct output: -75                 | Program output: -75                
Correct output: -75                 | Program output: -75                
Correct output: -24                 | Program output: -24                
Correct output: -4                  | Program output: 8                  
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: -55                
Correct output: -65                 | Program output: -65                
Correct output: -66                 | Program output: -66                
Correct output: -49                 | Program output: -49                
Correct output: -49                 | Program output: -46                
Correct output: -98                 | Program output: -98                
Correct output: 0                   | Program output: 50                 
Correct output: -62                 | Program output: -62                
Correct output: -69                 | Program output: -69                
Correct output: -43                 | Program output: -39                
Correct output: -95                 | Program output: -95                
Correct output: -34                 | Program output: -34                
Correct output: -22                 | Program output: -22                
Correct output: -87                 | Program output: -87                
Correct output: -12                 | Program output: -12                
Correct output: -64                 | Program output: -64                
Correct output: -7                  | Program output: -7                 
Correct output: -82                 | Program output: -82                
Correct output: -91                 | Program output: -91                
Correct output: -56                 | Program output: -56                
Correct output: -95                 | Program output: -95                
Correct output: -80                 | Program output: -80                
Correct output: -77                 | Program output: -3                 
Correct output: -92                 | Program output: -92                
Correct output: -82                 | Program output: -82                
Correct output: -76                 | Program output: -76                
Correct output: -56                 | Program output: -56                
Correct output: -39                 | Program output: -39                
Correct output: -76                 | Program output: -76                
Correct output: -55                 | Program output: -55                
Correct output: -97                 | Program output: 14                 
Correct output: -53                 | Program output: -53                
Correct output: -42                 | Program output: -42                
Correct output: 49                  | Program output: 49                 
Correct output: -80                 | Program output: -56                
Correct output: -44                 | Program output: -44                
Correct output: -97                 | Program output: -97                
Correct output: -71                 | Program output: -43                
Correct output: -62                 | Program output: -62                
Correct output: 1                   | Program output: 1                  
Correct output: -33                 | Program output: -33                
Correct output: -55                 | Program output: -55                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_dec} {:close 1, :instruction exec_dup_items} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 2, :instruction in3} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_min} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_dup_times} {:close 1, :instruction exec_do*count} {:close 0, :instruction in2} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction tag_exec_696} {:close 1, :instruction exec_if} {:close 1, :instruction in4} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_lt} {:close 0, :instruction in4} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_dup_times} {:close 2, :instruction exec_y} {:close 0, :instruction tag_exec_204} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_mult} {:close 0, :instruction print_newline} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_and} {:close 1, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction print_exec} {:close 0, :instruction integer_pop} {:close 0, :instruction tagged_395} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_add} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_pop})
Lexicase best program: (integer_div integer_fromboolean integer_mult exec_s_when_autoconstructing (in4 boolean_yankdup exec_eq integer_dec) (exec_dup_items) (integer_lt) exec_empty exec_pop () in1 integer_min boolean_eq in3 in3 integer_dec integer_shove integer_min exec_do*while (print_integer boolean_rot integer_lte exec_dup_times () exec_do*count () in2 integer_rot boolean_empty tag_exec_696 (exec_if () (in4) exec_empty boolean_yankdup exec_do*times () integer_lt in4 integer_div integer_mult boolean_dup boolean_pop integer_gt) exec_y_when_autoconstructing () boolean_dup_times) exec_y () tag_exec_204 (exec_empty integer_div exec_y_when_autoconstructing (exec_flush exec_do*times (exec_if (in2 print_integer boolean_dup_times integer_mult print_newline integer_min boolean_and in1) (exec_empty integer_dup exec_when (in3 print_exec (integer_pop tagged_395 boolean_invert_first_then_and exec_stackdepth exec_when (exec_shove (integer_mult) integer_add integer_gt integer_gt exec_pop ()))))))))
Lexicase best errors: [0 0 0 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 100
Percent parens: 0.240
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_dec} {:close 1, :instruction exec_dup_items} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 2, :instruction in3} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_min} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_dup_times} {:close 1, :instruction exec_do*count} {:close 0, :instruction in2} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction tag_exec_696} {:close 1, :instruction exec_if} {:close 1, :instruction in4} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_lt} {:close 0, :instruction in4} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_dup_times} {:close 2, :instruction exec_y} {:close 0, :instruction tag_exec_204} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_mult} {:close 0, :instruction print_newline} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_and} {:close 1, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction print_exec} {:close 0, :instruction integer_pop} {:close 0, :instruction tagged_395} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_add} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_pop})
Zero cases best program: (integer_div integer_fromboolean integer_mult exec_s_when_autoconstructing (in4 boolean_yankdup exec_eq integer_dec) (exec_dup_items) (integer_lt) exec_empty exec_pop () in1 integer_min boolean_eq in3 in3 integer_dec integer_shove integer_min exec_do*while (print_integer boolean_rot integer_lte exec_dup_times () exec_do*count () in2 integer_rot boolean_empty tag_exec_696 (exec_if () (in4) exec_empty boolean_yankdup exec_do*times () integer_lt in4 integer_div integer_mult boolean_dup boolean_pop integer_gt) exec_y_when_autoconstructing () boolean_dup_times) exec_y () tag_exec_204 (exec_empty integer_div exec_y_when_autoconstructing (exec_flush exec_do*times (exec_if (in2 print_integer boolean_dup_times integer_mult print_newline integer_min boolean_and in1) (exec_empty integer_dup exec_when (in3 print_exec (integer_pop tagged_395 boolean_invert_first_then_and exec_stackdepth exec_when (exec_shove (integer_mult) integer_add integer_gt integer_gt exec_pop ()))))))))
Zero cases best errors: [0 0 0 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 100
Percent parens: 0.240
--- Lexicase Population Statistics ---
Count of elite individuals by case: (261 48 268 495 394 408 267 149 393 237)
Population mean number of elite cases: 2.92
Count of perfect (error zero) individuals by case: (261 48 268 495 394 408 267 149 393 237)
Population mean number of perfect (error zero) cases: 2.92
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in4} {:close 0, :instruction exec_when} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_dec} {:close 1, :instruction exec_dup_items} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 2, :instruction in3} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_min} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_dup_times} {:close 1, :instruction exec_do*count} {:close 0, :instruction in2} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_empty} {:close 1, :instruction in4} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_while} {:close 1, :instruction exec_noop} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_dup_times} {:close 2, :instruction exec_y} {:close 0, :instruction tag_exec_204} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_div} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 1, :instruction exec_do*count} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction print_newline} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_and} {:close 1, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction print_exec} {:close 0, :instruction integer_pop} {:close 0, :instruction tagged_395} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_when} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_max} {:close 0, :instruction integer_add} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_gt})
Best program: (integer_div integer_fromboolean integer_mult in4 exec_when (exec_eq integer_dec) exec_dup_items integer_lt exec_empty exec_pop () in1 integer_min in3 in3 integer_shove integer_min exec_do*while (print_integer boolean_rot integer_lte exec_dup_times () exec_do*count () in2 integer_rot boolean_empty in4) boolean_dup integer_max boolean_yankdup exec_do*times () integer_div integer_mult exec_s_when_autoconstructing (boolean_pop exec_while () exec_noop) (integer_gt) (exec_y_when_autoconstructing () boolean_dup_times) exec_y () tag_exec_204 (exec_empty integer_div exec_dup_times () exec_y_when_autoconstructing (exec_do*times (boolean_stackdepth exec_if (in2 exec_do*count () print_integer boolean_dup_times integer_flush integer_mult print_newline integer_min boolean_and in1) (exec_empty integer_dup exec_when (exec_dup_items in3 print_exec (integer_pop tagged_395 boolean_stackdepth boolean_invert_first_then_and exec_stackdepth exec_when (integer_mult) integer_max) integer_add integer_gt integer_gt))))))
Errors: [0 0 0 0 0 0 0 1 0 0]
Total: 1
Mean: 0.1
Genome size: 76
Size: 99
Percent parens: 0.232
--- Population Statistics ---
Average total errors in population: 7.08
Median total errors in population: 7
Error averages by case: (0.739 0.952 0.732 0.505 0.606 0.592 0.733 0.851 0.607 0.763)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 65.931
Average program size in population (points): 87.269
Average percent parens in population: 0.244
Minimum age in population: 6.0
Maximum age in population: 6.0
Average age in population: 6.0
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.01
Error (vector) diversity:			 0.058
Behavioral diversity:				 0.314
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 3732180
--- Timings ---
Current time: 1559593824971 milliseconds
Total Time:          16.2 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         7.8 seconds, 48.5%
Fitness Testing:      5.5 seconds, 34.0%
Report:               2.7 seconds, 16.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 216
Test mean error for best: 0.21600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 21                  | Program output: 21                 
Correct output: -23                 | Program output: -23                
Correct output: -96                 | Program output: -96                
Correct output: 76                  | Program output: 76                 
Correct output: 14                  | Program output: 83                 
Correct output: -56                 | Program output: -56                
Correct output: 28                  | Program output: 28                 
Correct output: -20                 | Program output: 24                 
Correct output: 38                  | Program output: 38                 
Correct output: 9                   | Program output: 9                  
Correct output: -80                 | Program output: -80                
Correct output: 22                  | Program output: 22                 
Correct output: -35                 | Program output: -35                
Correct output: -31                 | Program output: -31                
Correct output: -8                  | Program output: -8                 
Correct output: 10                  | Program output: 10                 
Correct output: 21                  | Program output: 21                 
Correct output: 31                  | Program output: 31                 
Correct output: 3                   | Program output: 3                  
Correct output: 2                   | Program output: 6                  
Correct output: 33                  | Program output: 33                 
Correct output: 4                   | Program output: 4                  
Correct output: 20                  | Program output: 20                 
Correct output: 56                  | Program output: 56                 
Correct output: 4                   | Program output: 4                  
Correct output: 32                  | Program output: 32                 
Correct output: 21                  | Program output: 21                 
Correct output: 7                   | Program output: 7                  
Correct output: 15                  | Program output: 15                 
Correct output: 4                   | Program output: 48                 
Correct output: 30                  | Program output: 30                 
Correct output: 31                  | Program output: 31                 
Correct output: 1                   | Program output: 1                  
Correct output: 45                  | Program output: 45                 
Correct output: 8                   | Program output: 8                  
Correct output: -21                 | Program output: -21                
Correct output: -38                 | Program output: -38                
Correct output: -65                 | Program output: -65                
Correct output: -87                 | Program output: -33                
Correct output: -58                 | Program output: -58                
Correct output: -80                 | Program output: 18                 
Correct output: -77                 | Program output: -77                
Correct output: -31                 | Program output: -31                
Correct output: -83                 | Program output: -83                
Correct output: -63                 | Program output: -63                
Correct output: -90                 | Program output: 4                  
Correct output: -85                 | Program output: -85                
Correct output: -92                 | Program output: -92                
Correct output: -75                 | Program output: -75                
Correct output: -75                 | Program output: -75                
Correct output: -24                 | Program output: -24                
Correct output: -4                  | Program output: 8                  
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: -55                
Correct output: -65                 | Program output: -65                
Correct output: -66                 | Program output: -66                
Correct output: -49                 | Program output: -49                
Correct output: -49                 | Program output: -46                
Correct output: -98                 | Program output: -98                
Correct output: 0                   | Program output: 50                 
Correct output: -62                 | Program output: -62                
Correct output: -69                 | Program output: -69                
Correct output: -43                 | Program output: -39                
Correct output: -95                 | Program output: -95                
Correct output: -34                 | Program output: -34                
Correct output: -22                 | Program output: -22                
Correct output: -87                 | Program output: -87                
Correct output: -12                 | Program output: -12                
Correct output: -64                 | Program output: -64                
Correct output: -7                  | Program output: -7                 
Correct output: -82                 | Program output: -82                
Correct output: -91                 | Program output: -91                
Correct output: -56                 | Program output: -56                
Correct output: -95                 | Program output: -95                
Correct output: -80                 | Program output: -80                
Correct output: -77                 | Program output: -3                 
Correct output: -92                 | Program output: -92                
Correct output: -82                 | Program output: -82                
Correct output: -76                 | Program output: -76                
Correct output: -56                 | Program output: -56                
Correct output: -39                 | Program output: -39                
Correct output: -76                 | Program output: -76                
Correct output: -55                 | Program output: -55                
Correct output: -97                 | Program output: 14                 
Correct output: -53                 | Program output: -53                
Correct output: -42                 | Program output: -42                
Correct output: 49                  | Program output: 49                 
Correct output: -80                 | Program output: -56                
Correct output: -44                 | Program output: -44                
Correct output: -97                 | Program output: -97                
Correct output: -71                 | Program output: -43                
Correct output: -62                 | Program output: -62                
Correct output: 1                   | Program output: 1                  
Correct output: -33                 | Program output: -33                
Correct output: -55                 | Program output: -55                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in4} {:close 0, :instruction exec_when} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_dec} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 2, :instruction in3} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_dup_times} {:close 1, :instruction exec_do*count} {:close 0, :instruction in2} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_empty} {:close 1, :instruction in4} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_noop} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_dup_times} {:close 2, :instruction exec_y} {:close 0, :instruction tag_exec_204} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_div} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 1, :instruction exec_do*count} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction print_newline} {:close 0, :instruction integer_min} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 1, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction print_exec} {:close 0, :instruction integer_pop} {:close 0, :instruction tagged_395} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_when} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_add} {:close 1, :instruction integer_max} {:close 0, :instruction integer_add} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_gt})
Lexicase best program: (integer_div integer_fromboolean integer_mult in4 exec_when (exec_eq integer_dec) exec_dup_items exec_empty exec_pop () in1 integer_min in3 in3 integer_shove integer_min print_integer integer_lte exec_dup_times () exec_do*count () in2 integer_rot boolean_empty in4 boolean_dup integer_max boolean_yankdup exec_do*times () integer_div integer_mult exec_s_when_autoconstructing (boolean_pop exec_noop) (integer_gt) (exec_y_when_autoconstructing () boolean_dup_times) exec_y () tag_exec_204 (exec_empty integer_div exec_dup_times () exec_y_when_autoconstructing (exec_do*times (integer_gt boolean_stackdepth exec_if (in2 exec_do*count () print_integer integer_flush integer_mult print_newline integer_min integer_rot) (boolean_and in1) exec_empty integer_dup exec_when (exec_dup_items in3 print_exec (integer_pop tagged_395 boolean_stackdepth boolean_invert_first_then_and exec_stackdepth exec_when (integer_mult) integer_add integer_max) integer_add integer_gt integer_gt)))))
Lexicase best errors: [0 0 0 0 1 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 95
Percent parens: 0.221
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in4} {:close 0, :instruction exec_when} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_dec} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 2, :instruction in3} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_dup_times} {:close 1, :instruction exec_do*count} {:close 0, :instruction in2} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_empty} {:close 1, :instruction in4} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_noop} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_dup_times} {:close 2, :instruction exec_y} {:close 0, :instruction tag_exec_204} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_div} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 1, :instruction exec_do*count} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction print_newline} {:close 0, :instruction integer_min} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 1, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction print_exec} {:close 0, :instruction integer_pop} {:close 0, :instruction tagged_395} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_when} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_add} {:close 1, :instruction integer_max} {:close 0, :instruction integer_add} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_gt})
Zero cases best program: (integer_div integer_fromboolean integer_mult in4 exec_when (exec_eq integer_dec) exec_dup_items exec_empty exec_pop () in1 integer_min in3 in3 integer_shove integer_min print_integer integer_lte exec_dup_times () exec_do*count () in2 integer_rot boolean_empty in4 boolean_dup integer_max boolean_yankdup exec_do*times () integer_div integer_mult exec_s_when_autoconstructing (boolean_pop exec_noop) (integer_gt) (exec_y_when_autoconstructing () boolean_dup_times) exec_y () tag_exec_204 (exec_empty integer_div exec_dup_times () exec_y_when_autoconstructing (exec_do*times (integer_gt boolean_stackdepth exec_if (in2 exec_do*count () print_integer integer_flush integer_mult print_newline integer_min integer_rot) (boolean_and in1) exec_empty integer_dup exec_when (exec_dup_items in3 print_exec (integer_pop tagged_395 boolean_stackdepth boolean_invert_first_then_and exec_stackdepth exec_when (integer_mult) integer_add integer_max) integer_add integer_gt integer_gt)))))
Zero cases best errors: [0 0 0 0 1 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 95
Percent parens: 0.221
--- Lexicase Population Statistics ---
Count of elite individuals by case: (355 290 381 288 87 375 584 382 312 355)
Population mean number of elite cases: 3.41
Count of perfect (error zero) individuals by case: (355 290 381 288 87 375 584 382 312 355)
Population mean number of perfect (error zero) cases: 3.41
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_dec} {:close 1, :instruction exec_dup_items} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 2, :instruction in3} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_min} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_dup_times} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_do*while} {:close 0, :instruction in2} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction tag_exec_696} {:close 1, :instruction exec_if} {:close 1, :instruction in4} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_lt} {:close 0, :instruction in4} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_dup_times} {:close 2, :instruction exec_y} {:close 0, :instruction tag_exec_204} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_mult} {:close 0, :instruction print_newline} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_and} {:close 1, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction print_exec} {:close 0, :instruction integer_pop} {:close 0, :instruction tagged_395} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_pop})
Best program: (integer_div integer_fromboolean integer_mult exec_s_when_autoconstructing (in4 boolean_yankdup exec_eq integer_dec) (exec_dup_items) (integer_lt) exec_empty exec_pop () in1 integer_min boolean_eq in3 in3 integer_dec integer_shove integer_min exec_do*while (print_integer boolean_rot integer_lte exec_dup_times () exec_do*count () exec_do*while (in2 integer_rot boolean_empty integer_eq tag_exec_696 (exec_if () (in4) exec_empty boolean_yankdup exec_do*times () integer_lt in4 integer_div integer_mult boolean_dup boolean_pop integer_gt) exec_y_when_autoconstructing () boolean_dup_times) exec_y ()) tag_exec_204 (integer_div exec_y_when_autoconstructing (exec_flush exec_do*times (exec_if (in2 print_integer boolean_dup_times integer_mult print_newline integer_min boolean_and in1) (exec_empty integer_dup exec_when (in3 print_exec (integer_pop tagged_395 exec_stackdepth exec_when (exec_shove (integer_mult) integer_gt integer_gt exec_pop ()))))))))
Errors: [0 0 0 0 1 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 75
Size: 100
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 6.591
Median total errors in population: 7
Error averages by case: (0.645 0.71 0.619 0.712 0.913 0.625 0.416 0.618 0.688 0.645)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 74.074
Average program size in population (points): 96.583
Average percent parens in population: 0.232
Minimum age in population: 7.0
Maximum age in population: 7.0
Average age in population: 7.0
Median age in population: 7.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.01
Error (vector) diversity:			 0.065
Behavioral diversity:				 0.322
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 4553489
--- Timings ---
Current time: 1559593827582 milliseconds
Total Time:          18.8 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:         9.0 seconds, 47.9%
Fitness Testing:      6.4 seconds, 33.9%
Report:               3.3 seconds, 17.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 216
Test mean error for best: 0.21600
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 1
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 1
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 1
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 1
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 1
Test Case   60 | Error: 1
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 1
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 1
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 1
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 1
Test Case   89 | Error: 1
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 1
Test Case  201 | Error: 1
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 1
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 1
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 1
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 1
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 1
Test Case  236 | Error: 0
Test Case  237 | Error: 1
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 1
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 1
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 1
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 1
Test Case  263 | Error: 1
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 1
Test Case  274 | Error: 0
Test Case  275 | Error: 1
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 1
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 1
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 1
Test Case  292 | Error: 1
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 1
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 1
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 1
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 1
Test Case  315 | Error: 0
Test Case  316 | Error: 1
Test Case  317 | Error: 1
Test Case  318 | Error: 0
Test Case  319 | Error: 1
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 1
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 1
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 1
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 1
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 1
Test Case  336 | Error: 1
Test Case  337 | Error: 1
Test Case  338 | Error: 0
Test Case  339 | Error: 1
Test Case  340 | Error: 0
Test Case  341 | Error: 1
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 1
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 1
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 1
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 1
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 1
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 1
Test Case  372 | Error: 0
Test Case  373 | Error: 1
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 1
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 1
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 1
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 1
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 1
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 1
Test Case  409 | Error: 1
Test Case  410 | Error: 1
Test Case  411 | Error: 0
Test Case  412 | Error: 1
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 1
Test Case  416 | Error: 1
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 1
Test Case  424 | Error: 1
Test Case  425 | Error: 1
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 1
Test Case  430 | Error: 0
Test Case  431 | Error: 1
Test Case  432 | Error: 1
Test Case  433 | Error: 1
Test Case  434 | Error: 0
Test Case  435 | Error: 1
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 1
Test Case  440 | Error: 1
Test Case  441 | Error: 0
Test Case  442 | Error: 1
Test Case  443 | Error: 1
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 1
Test Case  456 | Error: 1
Test Case  457 | Error: 0
Test Case  458 | Error: 1
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 1
Test Case  463 | Error: 1
Test Case  464 | Error: 1
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 1
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 1
Test Case  473 | Error: 0
Test Case  474 | Error: 1
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 1
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 1
Test Case  495 | Error: 1
Test Case  496 | Error: 1
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 1
Test Case  500 | Error: 1
Test Case  501 | Error: 1
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 1
Test Case  510 | Error: 0
Test Case  511 | Error: 1
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 1
Test Case  518 | Error: 0
Test Case  519 | Error: 1
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 1
Test Case  525 | Error: 1
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 1
Test Case  531 | Error: 1
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 1
Test Case  535 | Error: 1
Test Case  536 | Error: 1
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 1
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 1
Test Case  546 | Error: 0
Test Case  547 | Error: 1
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 1
Test Case  556 | Error: 1
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 1
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 1
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 1
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 1
Test Case  609 | Error: 0
Test Case  610 | Error: 1
Test Case  611 | Error: 0
Test Case  612 | Error: 1
Test Case  613 | Error: 0
Test Case  614 | Error: 1
Test Case  615 | Error: 1
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 1
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 1
Test Case  628 | Error: 0
Test Case  629 | Error: 1
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 1
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 1
Test Case  643 | Error: 1
Test Case  644 | Error: 1
Test Case  645 | Error: 1
Test Case  646 | Error: 0
Test Case  647 | Error: 1
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 1
Test Case  653 | Error: 0
Test Case  654 | Error: 1
Test Case  655 | Error: 1
Test Case  656 | Error: 1
Test Case  657 | Error: 1
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 1
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 1
Test Case  669 | Error: 0
Test Case  670 | Error: 1
Test Case  671 | Error: 1
Test Case  672 | Error: 0
Test Case  673 | Error: 1
Test Case  674 | Error: 0
Test Case  675 | Error: 1
Test Case  676 | Error: 0
Test Case  677 | Error: 1
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 1
Test Case  683 | Error: 0
Test Case  684 | Error: 1
Test Case  685 | Error: 0
Test Case  686 | Error: 1
Test Case  687 | Error: 1
Test Case  688 | Error: 1
Test Case  689 | Error: 1
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 1
Test Case  697 | Error: 1
Test Case  698 | Error: 1
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 1
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 1
Test Case  710 | Error: 0
Test Case  711 | Error: 1
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 1
Test Case  715 | Error: 0
Test Case  716 | Error: 1
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 1
Test Case  737 | Error: 1
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 1
Test Case  742 | Error: 1
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 1
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 1
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 1
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 1
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 1
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 1
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 1
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 1
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 1
Test Case  791 | Error: 1
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 1
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 1
Test Case  798 | Error: 0
Test Case  799 | Error: 1
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 1
Test Case  804 | Error: 0
Test Case  805 | Error: 1
Test Case  806 | Error: 0
Test Case  807 | Error: 1
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 1
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 1
Test Case  817 | Error: 1
Test Case  818 | Error: 1
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 1
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 1
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 1
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 1
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 1
Test Case  848 | Error: 0
Test Case  849 | Error: 1
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 1
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 1
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 1
Test Case  876 | Error: 1
Test Case  877 | Error: 0
Test Case  878 | Error: 1
Test Case  879 | Error: 1
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 1
Test Case  883 | Error: 1
Test Case  884 | Error: 0
Test Case  885 | Error: 1
Test Case  886 | Error: 1
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 1
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 1
Test Case  901 | Error: 1
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 1
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 1
Test Case  916 | Error: 0
Test Case  917 | Error: 1
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 1
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 1
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 1
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 1
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 1
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 1
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 1
Test Case  956 | Error: 0
Test Case  957 | Error: 1
Test Case  958 | Error: 0
Test Case  959 | Error: 1
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 1
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 1
Test Case  969 | Error: 1
Test Case  970 | Error: 1
Test Case  971 | Error: 1
Test Case  972 | Error: 0
Test Case  973 | Error: 1
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 1
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 1
Test Case  988 | Error: 0
Test Case  989 | Error: 1
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 1
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 21                  | Program output: 21                 
Correct output: -23                 | Program output: -23                
Correct output: -96                 | Program output: -96                
Correct output: 76                  | Program output: 76                 
Correct output: 14                  | Program output: 83                 
Correct output: -56                 | Program output: -56                
Correct output: 28                  | Program output: 28                 
Correct output: -20                 | Program output: 24                 
Correct output: 38                  | Program output: 38                 
Correct output: 9                   | Program output: 9                  
Correct output: -80                 | Program output: -80                
Correct output: 22                  | Program output: 22                 
Correct output: -35                 | Program output: -35                
Correct output: -31                 | Program output: -31                
Correct output: -8                  | Program output: -8                 
Correct output: 10                  | Program output: 10                 
Correct output: 21                  | Program output: 21                 
Correct output: 31                  | Program output: 31                 
Correct output: 3                   | Program output: 3                  
Correct output: 2                   | Program output: 6                  
Correct output: 33                  | Program output: 33                 
Correct output: 4                   | Program output: 4                  
Correct output: 20                  | Program output: 20                 
Correct output: 56                  | Program output: 56                 
Correct output: 4                   | Program output: 4                  
Correct output: 32                  | Program output: 32                 
Correct output: 21                  | Program output: 21                 
Correct output: 7                   | Program output: 7                  
Correct output: 15                  | Program output: 15                 
Correct output: 4                   | Program output: 48                 
Correct output: 30                  | Program output: 30                 
Correct output: 31                  | Program output: 31                 
Correct output: 1                   | Program output: 1                  
Correct output: 45                  | Program output: 45                 
Correct output: 8                   | Program output: 8                  
Correct output: -21                 | Program output: -21                
Correct output: -38                 | Program output: -38                
Correct output: -65                 | Program output: -65                
Correct output: -87                 | Program output: -33                
Correct output: -58                 | Program output: -58                
Correct output: -80                 | Program output: 18                 
Correct output: -77                 | Program output: -77                
Correct output: -31                 | Program output: -31                
Correct output: -83                 | Program output: -83                
Correct output: -63                 | Program output: -63                
Correct output: -90                 | Program output: 4                  
Correct output: -85                 | Program output: -85                
Correct output: -92                 | Program output: -92                
Correct output: -75                 | Program output: -75                
Correct output: -75                 | Program output: -75                
Correct output: -24                 | Program output: -24                
Correct output: -4                  | Program output: 8                  
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: -55                
Correct output: -65                 | Program output: -65                
Correct output: -66                 | Program output: -66                
Correct output: -49                 | Program output: -49                
Correct output: -49                 | Program output: -46                
Correct output: -98                 | Program output: -98                
Correct output: 0                   | Program output: 50                 
Correct output: -62                 | Program output: -62                
Correct output: -69                 | Program output: -69                
Correct output: -43                 | Program output: -39                
Correct output: -95                 | Program output: -95                
Correct output: -34                 | Program output: -34                
Correct output: -22                 | Program output: -22                
Correct output: -87                 | Program output: -87                
Correct output: -12                 | Program output: -12                
Correct output: -64                 | Program output: -64                
Correct output: -7                  | Program output: -7                 
Correct output: -82                 | Program output: -82                
Correct output: -91                 | Program output: -91                
Correct output: -56                 | Program output: -56                
Correct output: -95                 | Program output: -95                
Correct output: -80                 | Program output: -80                
Correct output: -77                 | Program output: -3                 
Correct output: -92                 | Program output: -92                
Correct output: -82                 | Program output: -82                
Correct output: -76                 | Program output: -76                
Correct output: -56                 | Program output: -56                
Correct output: -39                 | Program output: -39                
Correct output: -76                 | Program output: -76                
Correct output: -55                 | Program output: -55                
Correct output: -97                 | Program output: 14                 
Correct output: -53                 | Program output: -53                
Correct output: -42                 | Program output: -42                
Correct output: 49                  | Program output: 49                 
Correct output: -80                 | Program output: -56                
Correct output: -44                 | Program output: -44                
Correct output: -97                 | Program output: -97                
Correct output: -71                 | Program output: -43                
Correct output: -62                 | Program output: -62                
Correct output: 1                   | Program output: 1                  
Correct output: -33                 | Program output: -33                
Correct output: -55                 | Program output: -55                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in4} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_lt} {:close 1, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 2, :instruction in3} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_min} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_dup_times} {:close 1, :instruction exec_do*count} {:close 0, :instruction in2} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction tag_exec_696} {:close 1, :instruction in4} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_do*times} {:close 0, :instruction in4} {:close 0, :instruction exec_k} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_noop} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_dup_times} {:close 2, :instruction exec_y} {:close 0, :instruction tag_exec_204} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_and} {:close 1, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction tagged_395} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction exec_shove} {:close 0, :instruction print_newline} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_add} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_pop})
Lexicase best program: (integer_div integer_fromboolean integer_mult in4 exec_eq integer_dec integer_lt exec_pop () in1 integer_min boolean_eq in3 in3 integer_dec exec_k_when_autoconstructing (boolean_dup_times exec_stackdepth integer_shove integer_min) (exec_do*while (print_integer boolean_rot integer_lte exec_dup_times () exec_do*count () in2 exec_y_when_autoconstructing (boolean_empty tag_exec_696 (in4) integer_mod boolean_yankdup exec_do*times () in4 exec_k (integer_div integer_mult boolean_pop exec_noop) (integer_gt) exec_y_when_autoconstructing () boolean_dup_times) exec_y ()) tag_exec_204 (exec_empty integer_div boolean_shove) exec_flush exec_if (in2 boolean_dup_times integer_flush integer_mult boolean_xor integer_stackdepth) (integer_min boolean_and in1) exec_empty integer_dup exec_when (in3 integer_stackdepth integer_pop exec_do*while (tagged_395 boolean_stackdepth boolean_invert_first_then_and exec_stackdepth boolean_or exec_when (exec_shove (print_newline integer_yankdup integer_mult) integer_add integer_gt exec_pop ())))))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 100
Percent parens: 0.220
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in4} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_lt} {:close 1, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 2, :instruction in3} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_min} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_dup_times} {:close 1, :instruction exec_do*count} {:close 0, :instruction in2} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction tag_exec_696} {:close 1, :instruction in4} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_do*times} {:close 0, :instruction in4} {:close 0, :instruction exec_k} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_noop} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_dup_times} {:close 2, :instruction exec_y} {:close 0, :instruction tag_exec_204} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_and} {:close 1, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction tagged_395} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction exec_shove} {:close 0, :instruction print_newline} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_add} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_pop})
Zero cases best program: (integer_div integer_fromboolean integer_mult in4 exec_eq integer_dec integer_lt exec_pop () in1 integer_min boolean_eq in3 in3 integer_dec exec_k_when_autoconstructing (boolean_dup_times exec_stackdepth integer_shove integer_min) (exec_do*while (print_integer boolean_rot integer_lte exec_dup_times () exec_do*count () in2 exec_y_when_autoconstructing (boolean_empty tag_exec_696 (in4) integer_mod boolean_yankdup exec_do*times () in4 exec_k (integer_div integer_mult boolean_pop exec_noop) (integer_gt) exec_y_when_autoconstructing () boolean_dup_times) exec_y ()) tag_exec_204 (exec_empty integer_div boolean_shove) exec_flush exec_if (in2 boolean_dup_times integer_flush integer_mult boolean_xor integer_stackdepth) (integer_min boolean_and in1) exec_empty integer_dup exec_when (in3 integer_stackdepth integer_pop exec_do*while (tagged_395 boolean_stackdepth boolean_invert_first_then_and exec_stackdepth boolean_or exec_when (exec_shove (print_newline integer_yankdup integer_mult) integer_add integer_gt exec_pop ())))))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 100
Percent parens: 0.220
--- Lexicase Population Statistics ---
Count of elite individuals by case: (422 288 445 294 441 581 291 431 294 438)
Population mean number of elite cases: 3.92
Count of perfect (error zero) individuals by case: (422 288 445 294 441 581 291 431 294 438)
Population mean number of perfect (error zero) cases: 3.92
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_gte} {:close 0, :instruction integer_div} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction in4} {:close 0, :instruction exec_when} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_dec} {:close 1, :instruction exec_dup_items} {:close 1, :instruction integer_lt} {:close 1, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 2, :instruction in3} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_min} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_dup_times} {:close 1, :instruction exec_do*count} {:close 0, :instruction in2} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction tag_exec_696} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_do*times} {:close 0, :instruction in4} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_noop} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_do*times} {:close 1, :instruction boolean_dup_times} {:close 2, :instruction exec_y} {:close 0, :instruction tag_exec_204} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_mult} {:close 0, :instruction print_newline} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_pop} {:close 0, :instruction tagged_395} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction tag_boolean_98} {:close 0, :instruction exec_when} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_add} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_fromboolean})
Best program: (integer_gte integer_div integer_fromboolean integer_mult in4 exec_when (exec_eq integer_dec) exec_dup_items integer_lt exec_pop () in1 integer_min in3 in3 integer_dec integer_shove integer_min exec_do*while (print_integer integer_lte exec_dup_times () exec_do*count () in2 integer_rot boolean_empty tag_exec_696 (boolean_yankdup exec_do*times () in4 integer_mult exec_y_when_autoconstructing (exec_s_when_autoconstructing (boolean_dup boolean_pop exec_noop) (integer_gt) (exec_do*times () boolean_dup_times) exec_y ()) tag_exec_204 (exec_empty integer_div exec_y_when_autoconstructing (exec_flush exec_do*times (in2 print_integer exec_s () (boolean_dup_times integer_mult print_newline integer_min boolean_and exec_yankdup) (exec_empty integer_dup exec_when (in3 integer_mod integer_pop tagged_395 boolean_invert_first_then_and tag_boolean_98) exec_when (exec_shove (exec_when (integer_add integer_gt integer_gt integer_fromboolean))))))))))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 71
Size: 95
Percent parens: 0.253
--- Population Statistics ---
Average total errors in population: 6.075
Median total errors in population: 7
Error averages by case: (0.578 0.712 0.555 0.706 0.559 0.419 0.709 0.569 0.706 0.562)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 77.854
Average program size in population (points): 100.007
Average percent parens in population: 0.221
Minimum age in population: 8.0
Maximum age in population: 8.0
Average age in population: 8.0
Median age in population: 8.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.011
Error (vector) diversity:			 0.06
Behavioral diversity:				 0.317
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 5425828
--- Timings ---
Current time: 1559593829981 milliseconds
Total Time:          21.4 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        10.1 seconds, 47.3%
Fitness Testing:      7.3 seconds, 34.0%
Report:               3.9 seconds, 18.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 8
Successful program: (integer_gte integer_div integer_fromboolean integer_mult in4 exec_when (exec_eq integer_dec) exec_dup_items integer_lt exec_pop () in1 integer_min in3 in3 integer_dec integer_shove integer_min exec_do*while (print_integer integer_lte exec_dup_times () exec_do*count () in2 integer_rot boolean_empty tag_exec_696 (boolean_yankdup exec_do*times () in4 integer_mult exec_y_when_autoconstructing (exec_s_when_autoconstructing (boolean_dup boolean_pop exec_noop) (integer_gt) (exec_do*times () boolean_dup_times) exec_y ()) tag_exec_204 (exec_empty integer_div exec_y_when_autoconstructing (exec_flush exec_do*times (in2 print_integer exec_s () (boolean_dup_times integer_mult print_newline integer_min boolean_and exec_yankdup) (exec_empty integer_dup exec_when (in3 integer_mod integer_pop tagged_395 boolean_invert_first_then_and tag_boolean_98) exec_when (exec_shove (exec_when (integer_add integer_gt integer_gt integer_fromboolean))))))))))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 95


Auto-simplifying with starting size: 95
step: 0
program: (integer_gte integer_div integer_fromboolean integer_mult in4 exec_when (exec_eq integer_dec) exec_dup_items integer_lt exec_pop () in1 integer_min in3 in3 integer_dec integer_shove integer_min exec_do*while (print_integer integer_lte exec_dup_times () exec_do*count () in2 integer_rot boolean_empty tag_exec_696 (boolean_yankdup exec_do*times () in4 integer_mult exec_y_when_autoconstructing (exec_s_when_autoconstructing (boolean_dup boolean_pop exec_noop) (integer_gt) (exec_do*times () boolean_dup_times) exec_y ()) tag_exec_204 (exec_empty integer_div exec_y_when_autoconstructing (exec_flush exec_do*times (in2 print_integer exec_s () (boolean_dup_times integer_mult print_newline integer_min boolean_and exec_yankdup) (exec_empty integer_dup exec_when (in3 integer_mod integer_pop tagged_395 boolean_invert_first_then_and tag_boolean_98) exec_when (exec_shove (exec_when (integer_add integer_gt integer_gt integer_fromboolean))))))))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 95

step: 500
program: (integer_gte integer_div integer_fromboolean integer_mult in4 exec_when (exec_eq integer_dec) exec_dup_items integer_lt exec_pop () in1 integer_min in3 in3 integer_dec integer_shove integer_min exec_do*while (print_integer integer_lte exec_dup_times () exec_do*count () in2 integer_rot boolean_empty tag_exec_696 (boolean_yankdup exec_do*times () in4 integer_mult exec_y_when_autoconstructing (exec_s_when_autoconstructing (boolean_dup boolean_pop exec_noop) (integer_gt) (exec_do*times () boolean_dup_times) exec_y ()) tag_exec_204 (exec_empty integer_div exec_y_when_autoconstructing (exec_flush exec_do*times (in2 print_integer exec_s () (boolean_dup_times integer_mult print_newline integer_min boolean_and exec_yankdup) (exec_empty integer_dup exec_when (in3 integer_mod integer_pop tagged_395 boolean_invert_first_then_and tag_boolean_98) exec_when (exec_shove (exec_when (integer_add integer_gt integer_gt integer_fromboolean))))))))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 95

step: 1000
program: (integer_gte integer_div integer_fromboolean integer_mult in4 exec_when (exec_eq integer_dec) exec_dup_items integer_lt exec_pop () in1 integer_min in3 in3 integer_dec integer_shove integer_min exec_do*while (print_integer integer_lte exec_dup_times () exec_do*count () in2 integer_rot boolean_empty tag_exec_696 (boolean_yankdup exec_do*times () in4 integer_mult exec_y_when_autoconstructing (exec_s_when_autoconstructing (boolean_dup boolean_pop exec_noop) (integer_gt) (exec_do*times () boolean_dup_times) exec_y ()) tag_exec_204 (exec_empty integer_div exec_y_when_autoconstructing (exec_flush exec_do*times (in2 print_integer exec_s () (boolean_dup_times integer_mult print_newline integer_min boolean_and exec_yankdup) (exec_empty integer_dup exec_when (in3 integer_mod integer_pop tagged_395 boolean_invert_first_then_and tag_boolean_98) exec_when (exec_shove (exec_when (integer_add integer_gt integer_gt integer_fromboolean))))))))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 95

step: 1500
program: (integer_gte integer_div integer_fromboolean integer_mult in4 exec_when (exec_eq integer_dec) exec_dup_items integer_lt exec_pop () in1 integer_min in3 in3 integer_dec integer_shove integer_min exec_do*while (print_integer integer_lte exec_dup_times () exec_do*count () in2 integer_rot boolean_empty tag_exec_696 (boolean_yankdup exec_do*times () in4 integer_mult exec_y_when_autoconstructing (exec_s_when_autoconstructing (boolean_dup boolean_pop exec_noop) (integer_gt) (exec_do*times () boolean_dup_times) exec_y ()) tag_exec_204 (exec_empty integer_div exec_y_when_autoconstructing (exec_flush exec_do*times (in2 print_integer exec_s () (boolean_dup_times integer_mult print_newline integer_min boolean_and exec_yankdup) (exec_empty integer_dup exec_when (in3 integer_mod integer_pop tagged_395 boolean_invert_first_then_and tag_boolean_98) exec_when (exec_shove (exec_when (integer_add integer_gt integer_gt integer_fromboolean))))))))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 95

step: 2000
program: (integer_gte integer_div integer_fromboolean integer_mult in4 exec_when (exec_eq integer_dec) exec_dup_items integer_lt exec_pop () in1 integer_min in3 in3 integer_dec integer_shove integer_min exec_do*while (print_integer integer_lte exec_dup_times () exec_do*count () in2 integer_rot boolean_empty tag_exec_696 (boolean_yankdup exec_do*times () in4 integer_mult exec_y_when_autoconstructing (exec_s_when_autoconstructing (boolean_dup boolean_pop exec_noop) (integer_gt) (exec_do*times () boolean_dup_times) exec_y ()) tag_exec_204 (exec_empty integer_div exec_y_when_autoconstructing (exec_flush exec_do*times (in2 print_integer exec_s () (boolean_dup_times integer_mult print_newline integer_min boolean_and exec_yankdup) (exec_empty integer_dup exec_when (in3 integer_mod integer_pop tagged_395 boolean_invert_first_then_and tag_boolean_98) exec_when (exec_shove (exec_when (integer_add integer_gt integer_gt integer_fromboolean))))))))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 95

step: 2500
program: (integer_gte integer_div integer_fromboolean integer_mult in4 exec_when (exec_eq integer_dec) exec_dup_items integer_lt exec_pop () in1 integer_min in3 in3 integer_dec integer_shove integer_min exec_do*while (print_integer integer_lte exec_dup_times () exec_do*count () in2 integer_rot boolean_empty tag_exec_696 (boolean_yankdup exec_do*times () in4 integer_mult exec_y_when_autoconstructing (exec_s_when_autoconstructing (boolean_dup boolean_pop exec_noop) (integer_gt) (exec_do*times () boolean_dup_times) exec_y ()) tag_exec_204 (exec_empty integer_div exec_y_when_autoconstructing (exec_flush exec_do*times (in2 print_integer exec_s () (boolean_dup_times integer_mult print_newline integer_min boolean_and exec_yankdup) (exec_empty integer_dup exec_when (in3 integer_mod integer_pop tagged_395 boolean_invert_first_then_and tag_boolean_98) exec_when (exec_shove (exec_when (integer_add integer_gt integer_gt integer_fromboolean))))))))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 95

step: 3000
program: (integer_gte integer_div integer_fromboolean integer_mult in4 exec_when (exec_eq integer_dec) exec_dup_items integer_lt exec_pop () in1 integer_min in3 in3 integer_dec integer_shove integer_min exec_do*while (print_integer integer_lte exec_dup_times () exec_do*count () in2 integer_rot boolean_empty tag_exec_696 (boolean_yankdup exec_do*times () in4 integer_mult exec_y_when_autoconstructing (exec_s_when_autoconstructing (boolean_dup boolean_pop exec_noop) (integer_gt) (exec_do*times () boolean_dup_times) exec_y ()) tag_exec_204 (exec_empty integer_div exec_y_when_autoconstructing (exec_flush exec_do*times (in2 print_integer exec_s () (boolean_dup_times integer_mult print_newline integer_min boolean_and exec_yankdup) (exec_empty integer_dup exec_when (in3 integer_mod integer_pop tagged_395 boolean_invert_first_then_and tag_boolean_98) exec_when (exec_shove (exec_when (integer_add integer_gt integer_gt integer_fromboolean))))))))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 95

step: 3500
program: (integer_gte integer_div integer_fromboolean integer_mult in4 exec_when (exec_eq integer_dec) exec_dup_items integer_lt exec_pop () in1 integer_min in3 in3 integer_dec integer_shove integer_min exec_do*while (print_integer integer_lte exec_dup_times () exec_do*count () in2 integer_rot boolean_empty tag_exec_696 (boolean_yankdup exec_do*times () in4 integer_mult exec_y_when_autoconstructing (exec_s_when_autoconstructing (boolean_dup boolean_pop exec_noop) (integer_gt) (exec_do*times () boolean_dup_times) exec_y ()) tag_exec_204 (exec_empty integer_div exec_y_when_autoconstructing (exec_flush exec_do*times (in2 print_integer exec_s () (boolean_dup_times integer_mult print_newline integer_min boolean_and exec_yankdup) (exec_empty integer_dup exec_when (in3 integer_mod integer_pop tagged_395 boolean_invert_first_then_and tag_boolean_98) exec_when (exec_shove (exec_when (integer_add integer_gt integer_gt integer_fromboolean))))))))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 95

step: 4000
program: (integer_gte integer_div integer_fromboolean integer_mult in4 exec_when (exec_eq integer_dec) exec_dup_items integer_lt exec_pop () in1 integer_min in3 in3 integer_dec integer_shove integer_min exec_do*while (print_integer integer_lte exec_dup_times () exec_do*count () in2 integer_rot boolean_empty tag_exec_696 (boolean_yankdup exec_do*times () in4 integer_mult exec_y_when_autoconstructing (exec_s_when_autoconstructing (boolean_dup boolean_pop exec_noop) (integer_gt) (exec_do*times () boolean_dup_times) exec_y ()) tag_exec_204 (exec_empty integer_div exec_y_when_autoconstructing (exec_flush exec_do*times (in2 print_integer exec_s () (boolean_dup_times integer_mult print_newline integer_min boolean_and exec_yankdup) (exec_empty integer_dup exec_when (in3 integer_mod integer_pop tagged_395 boolean_invert_first_then_and tag_boolean_98) exec_when (exec_shove (exec_when (integer_add integer_gt integer_gt integer_fromboolean))))))))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 95

step: 4500
program: (integer_gte integer_div integer_fromboolean integer_mult in4 exec_when (exec_eq integer_dec) exec_dup_items integer_lt exec_pop () in1 integer_min in3 in3 integer_dec integer_shove integer_min exec_do*while (print_integer integer_lte exec_dup_times () exec_do*count () in2 integer_rot boolean_empty tag_exec_696 (boolean_yankdup exec_do*times () in4 integer_mult exec_y_when_autoconstructing (exec_s_when_autoconstructing (boolean_dup boolean_pop exec_noop) (integer_gt) (exec_do*times () boolean_dup_times) exec_y ()) tag_exec_204 (exec_empty integer_div exec_y_when_autoconstructing (exec_flush exec_do*times (in2 print_integer exec_s () (boolean_dup_times integer_mult print_newline integer_min boolean_and exec_yankdup) (exec_empty integer_dup exec_when (in3 integer_mod integer_pop tagged_395 boolean_invert_first_then_and tag_boolean_98) exec_when (exec_shove (exec_when (integer_add integer_gt integer_gt integer_fromboolean))))))))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 95

step: 5000
program: (integer_gte integer_div integer_fromboolean integer_mult in4 exec_when (exec_eq integer_dec) exec_dup_items integer_lt exec_pop () in1 integer_min in3 in3 integer_dec integer_shove integer_min exec_do*while (print_integer integer_lte exec_dup_times () exec_do*count () in2 integer_rot boolean_empty tag_exec_696 (boolean_yankdup exec_do*times () in4 integer_mult exec_y_when_autoconstructing (exec_s_when_autoconstructing (boolean_dup boolean_pop exec_noop) (integer_gt) (exec_do*times () boolean_dup_times) exec_y ()) tag_exec_204 (exec_empty integer_div exec_y_when_autoconstructing (exec_flush exec_do*times (in2 print_integer exec_s () (boolean_dup_times integer_mult print_newline integer_min boolean_and exec_yankdup) (exec_empty integer_dup exec_when (in3 integer_mod integer_pop tagged_395 boolean_invert_first_then_and tag_boolean_98) exec_when (exec_shove (exec_when (integer_add integer_gt integer_gt integer_fromboolean))))))))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 95

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 216
Test mean error for best: 0.21600
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 1
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 1
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 1
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 1
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 1
Test Case   60 | Error: 1
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 1
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 1
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 1
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 1
Test Case   89 | Error: 1
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 1
Test Case  201 | Error: 1
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 1
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 1
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 1
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 1
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 1
Test Case  236 | Error: 0
Test Case  237 | Error: 1
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 1
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 1
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 1
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 1
Test Case  263 | Error: 1
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 1
Test Case  274 | Error: 0
Test Case  275 | Error: 1
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 1
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 1
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 1
Test Case  292 | Error: 1
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 1
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 1
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 1
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 1
Test Case  315 | Error: 0
Test Case  316 | Error: 1
Test Case  317 | Error: 1
Test Case  318 | Error: 0
Test Case  319 | Error: 1
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 1
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 1
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 1
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 1
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 1
Test Case  336 | Error: 1
Test Case  337 | Error: 1
Test Case  338 | Error: 0
Test Case  339 | Error: 1
Test Case  340 | Error: 0
Test Case  341 | Error: 1
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 1
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 1
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 1
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 1
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 1
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 1
Test Case  372 | Error: 0
Test Case  373 | Error: 1
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 1
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 1
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 1
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 1
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 1
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 1
Test Case  409 | Error: 1
Test Case  410 | Error: 1
Test Case  411 | Error: 0
Test Case  412 | Error: 1
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 1
Test Case  416 | Error: 1
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 1
Test Case  424 | Error: 1
Test Case  425 | Error: 1
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 1
Test Case  430 | Error: 0
Test Case  431 | Error: 1
Test Case  432 | Error: 1
Test Case  433 | Error: 1
Test Case  434 | Error: 0
Test Case  435 | Error: 1
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 1
Test Case  440 | Error: 1
Test Case  441 | Error: 0
Test Case  442 | Error: 1
Test Case  443 | Error: 1
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 1
Test Case  456 | Error: 1
Test Case  457 | Error: 0
Test Case  458 | Error: 1
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 1
Test Case  463 | Error: 1
Test Case  464 | Error: 1
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 1
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 1
Test Case  473 | Error: 0
Test Case  474 | Error: 1
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 1
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 1
Test Case  495 | Error: 1
Test Case  496 | Error: 1
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 1
Test Case  500 | Error: 1
Test Case  501 | Error: 1
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 1
Test Case  510 | Error: 0
Test Case  511 | Error: 1
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 1
Test Case  518 | Error: 0
Test Case  519 | Error: 1
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 1
Test Case  525 | Error: 1
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 1
Test Case  531 | Error: 1
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 1
Test Case  535 | Error: 1
Test Case  536 | Error: 1
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 1
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 1
Test Case  546 | Error: 0
Test Case  547 | Error: 1
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 1
Test Case  556 | Error: 1
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 1
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 1
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 1
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 1
Test Case  609 | Error: 0
Test Case  610 | Error: 1
Test Case  611 | Error: 0
Test Case  612 | Error: 1
Test Case  613 | Error: 0
Test Case  614 | Error: 1
Test Case  615 | Error: 1
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 1
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 1
Test Case  628 | Error: 0
Test Case  629 | Error: 1
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 1
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 1
Test Case  643 | Error: 1
Test Case  644 | Error: 1
Test Case  645 | Error: 1
Test Case  646 | Error: 0
Test Case  647 | Error: 1
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 1
Test Case  653 | Error: 0
Test Case  654 | Error: 1
Test Case  655 | Error: 1
Test Case  656 | Error: 1
Test Case  657 | Error: 1
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 1
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 1
Test Case  669 | Error: 0
Test Case  670 | Error: 1
Test Case  671 | Error: 1
Test Case  672 | Error: 0
Test Case  673 | Error: 1
Test Case  674 | Error: 0
Test Case  675 | Error: 1
Test Case  676 | Error: 0
Test Case  677 | Error: 1
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 1
Test Case  683 | Error: 0
Test Case  684 | Error: 1
Test Case  685 | Error: 0
Test Case  686 | Error: 1
Test Case  687 | Error: 1
Test Case  688 | Error: 1
Test Case  689 | Error: 1
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 1
Test Case  697 | Error: 1
Test Case  698 | Error: 1
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 1
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 1
Test Case  710 | Error: 0
Test Case  711 | Error: 1
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 1
Test Case  715 | Error: 0
Test Case  716 | Error: 1
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 1
Test Case  737 | Error: 1
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 1
Test Case  742 | Error: 1
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 1
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 1
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 1
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 1
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 1
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 1
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 1
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 1
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 1
Test Case  791 | Error: 1
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 1
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 1
Test Case  798 | Error: 0
Test Case  799 | Error: 1
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 1
Test Case  804 | Error: 0
Test Case  805 | Error: 1
Test Case  806 | Error: 0
Test Case  807 | Error: 1
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 1
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 1
Test Case  817 | Error: 1
Test Case  818 | Error: 1
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 1
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 1
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 1
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 1
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 1
Test Case  848 | Error: 0
Test Case  849 | Error: 1
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 1
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 1
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 1
Test Case  876 | Error: 1
Test Case  877 | Error: 0
Test Case  878 | Error: 1
Test Case  879 | Error: 1
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 1
Test Case  883 | Error: 1
Test Case  884 | Error: 0
Test Case  885 | Error: 1
Test Case  886 | Error: 1
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 1
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 1
Test Case  901 | Error: 1
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 1
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 1
Test Case  916 | Error: 0
Test Case  917 | Error: 1
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 1
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 1
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 1
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 1
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 1
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 1
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 1
Test Case  956 | Error: 0
Test Case  957 | Error: 1
Test Case  958 | Error: 0
Test Case  959 | Error: 1
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 1
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 1
Test Case  969 | Error: 1
Test Case  970 | Error: 1
Test Case  971 | Error: 1
Test Case  972 | Error: 0
Test Case  973 | Error: 1
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 1
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 1
Test Case  988 | Error: 0
Test Case  989 | Error: 1
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 1
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 21                  | Program output: 21                 
Correct output: -23                 | Program output: -23                
Correct output: -96                 | Program output: -96                
Correct output: 76                  | Program output: 76                 
Correct output: 14                  | Program output: 83                 
Correct output: -56                 | Program output: -56                
Correct output: 28                  | Program output: 28                 
Correct output: -20                 | Program output: 24                 
Correct output: 38                  | Program output: 38                 
Correct output: 9                   | Program output: 9                  
Correct output: -80                 | Program output: -80                
Correct output: 22                  | Program output: 22                 
Correct output: -35                 | Program output: -35                
Correct output: -31                 | Program output: -31                
Correct output: -8                  | Program output: -8                 
Correct output: 10                  | Program output: 10                 
Correct output: 21                  | Program output: 21                 
Correct output: 31                  | Program output: 31                 
Correct output: 3                   | Program output: 3                  
Correct output: 2                   | Program output: 6                  
Correct output: 33                  | Program output: 33                 
Correct output: 4                   | Program output: 4                  
Correct output: 20                  | Program output: 20                 
Correct output: 56                  | Program output: 56                 
Correct output: 4                   | Program output: 4                  
Correct output: 32                  | Program output: 32                 
Correct output: 21                  | Program output: 21                 
Correct output: 7                   | Program output: 7                  
Correct output: 15                  | Program output: 15                 
Correct output: 4                   | Program output: 48                 
Correct output: 30                  | Program output: 30                 
Correct output: 31                  | Program output: 31                 
Correct output: 1                   | Program output: 1                  
Correct output: 45                  | Program output: 45                 
Correct output: 8                   | Program output: 8                  
Correct output: -21                 | Program output: -21                
Correct output: -38                 | Program output: -38                
Correct output: -65                 | Program output: -65                
Correct output: -87                 | Program output: -33                
Correct output: -58                 | Program output: -58                
Correct output: -80                 | Program output: 18                 
Correct output: -77                 | Program output: -77                
Correct output: -31                 | Program output: -31                
Correct output: -83                 | Program output: -83                
Correct output: -63                 | Program output: -63                
Correct output: -90                 | Program output: 4                  
Correct output: -85                 | Program output: -85                
Correct output: -92                 | Program output: -92                
Correct output: -75                 | Program output: -75                
Correct output: -75                 | Program output: -75                
Correct output: -24                 | Program output: -24                
Correct output: -4                  | Program output: 8                  
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: -55                
Correct output: -65                 | Program output: -65                
Correct output: -66                 | Program output: -66                
Correct output: -49                 | Program output: -49                
Correct output: -49                 | Program output: -46                
Correct output: -98                 | Program output: -98                
Correct output: 0                   | Program output: 50                 
Correct output: -62                 | Program output: -62                
Correct output: -69                 | Program output: -69                
Correct output: -43                 | Program output: -39                
Correct output: -95                 | Program output: -95                
Correct output: -34                 | Program output: -34                
Correct output: -22                 | Program output: -22                
Correct output: -87                 | Program output: -87                
Correct output: -12                 | Program output: -12                
Correct output: -64                 | Program output: -64                
Correct output: -7                  | Program output: -7                 
Correct output: -82                 | Program output: -82                
Correct output: -91                 | Program output: -91                
Correct output: -56                 | Program output: -56                
Correct output: -95                 | Program output: -95                
Correct output: -80                 | Program output: -80                
Correct output: -77                 | Program output: -3                 
Correct output: -92                 | Program output: -92                
Correct output: -82                 | Program output: -82                
Correct output: -76                 | Program output: -76                
Correct output: -56                 | Program output: -56                
Correct output: -39                 | Program output: -39                
Correct output: -76                 | Program output: -76                
Correct output: -55                 | Program output: -55                
Correct output: -97                 | Program output: 14                 
Correct output: -53                 | Program output: -53                
Correct output: -42                 | Program output: -42                
Correct output: 49                  | Program output: 49                 
Correct output: -80                 | Program output: -56                
Correct output: -44                 | Program output: -44                
Correct output: -97                 | Program output: -97                
Correct output: -71                 | Program output: -43                
Correct output: -62                 | Program output: -62                
Correct output: 1                   | Program output: 1                  
Correct output: -33                 | Program output: -33                
Correct output: -55                 | Program output: -55                
;;******************************
