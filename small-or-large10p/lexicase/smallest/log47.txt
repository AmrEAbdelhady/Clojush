Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 3000 :genetic-operator-probabilities {:uniform-addition-and-deletion,1.0} :uniform-addition-and-deletion-rate 0.09
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:uniform-addition-and-deletion 1.0}
max-error = 1
max-generations = 3000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-45 -45 -79 -45] -79] [[74 74 -70 74] -70] [[90 -3 -3 -3] -3] [[-47 66 -47 -47] -47] [[45 -51 45 45] -51] [[57 -37 57 57] -37] [[77 77 77 -7] -7] [[-84 -84 -35 -84] -84] [[-68 -68 -68 -43] -68] [[-66 43 43 43] -66] [(64 64 64 64) 64] [(-52 -52 -52 -52) -52] [(75 75 75 75) 75] [(-47 -47 -47 -47) -47] [(39 39 39 39) 39] [(84 83 79 18) 18] [(23 79 93 13) 13] [(11 77 11 71) 11] [(3 76 36 95) 3] [(66 80 93 50) 50] [(10 38 63 100) 10] [(95 39 53 87) 39] [(79 55 4 71) 4] [(35 91 58 7) 7] [(5 55 89 60) 5] [(89 31 82 93) 31] [(80 58 40 52) 40] [(94 52 35 5) 5] [(35 12 67 97) 12] [(1 13 40 24) 1] [(4 67 39 67) 4] [(22 51 54 23) 22] [(85 5 57 40) 5] [(9 8 100 100) 8] [(91 59 34 39) 34] [(30 83 89 98) 30] [(63 -48 -86 73) -86] [(-79 99 -73 -94) -94] [(-68 -97 89 59) -97] [(-90 91 23 75) -90] [(-71 1 12 -46) -71] [(45 -3 -57 58) -57] [(-35 66 -43 -56) -56] [(-84 -80 56 30) -84] [(42 -99 -7 57) -99] [(91 29 -22 58) -22] [(48 71 -82 -82) -82] [(-89 35 41 -96) -96] [(94 -11 -4 -2) -11] [(-67 89 69 -87) -87] [(21 -92 56 76) -92] [(3 43 64 88) 3] [(-93 64 -20 55) -93] [(-97 75 58 -62) -97] [(58 85 43 -86) -86] [(-77 -49 38 5) -77] [(2 -6 -86 62) -86] [(-17 -84 97 -47) -84] [(-6 60 39 55) -6] [(13 -16 85 93) -16] [(-15 -86 52 73) -86] [(-94 -60 -49 -5) -94] [(93 -3 70 15) -3] [(-86 -30 32 34) -86] [(-17 -99 41 -36) -99] [(22 -34 -37 56) -37] [(22 75 -85 19) -85] [(87 -47 -80 94) -80] [(18 21 -83 -65) -83] [(44 -39 60 38) -39] [(-48 36 -12 88) -48] [(64 -9 -7 -72) -72] [(26 11 -11 1) -11] [(-44 55 45 -71) -71] [(26 -61 -28 -62) -62] [(10 -76 70 -53) -76] [(38 57 -15 62) -15] [(47 -84 -24 66) -84] [(-71 19 26 9) -71] [(-93 -52 61 31) -93] [(-51 61 -33 -31) -51] [(96 29 45 -21) -21] [(-46 16 -90 -40) -90] [(94 55 54 -21) -21] [(29 24 -5 12) -5] [(11 -13 36 62) -13] [(-65 -40 85 -56) -65] [(93 -51 -64 -41) -64] [(-37 -74 -36 36) -74] [(-60 66 56 45) -60] [(41 82 49 58) 41] [(99 28 -71 82) -71] [(7 -2 31 19) -2] [(43 -20 96 6) -20] [(87 -76 -95 -76) -95])
uniform-addition-and-deletion-rate = 0.09
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[-45 -45 -79 -45] -79]
Train Case:   6 | Input/Output: [[74 74 -70 74] -70]
Train Case:   7 | Input/Output: [[90 -3 -3 -3] -3]
Train Case:   8 | Input/Output: [[-47 66 -47 -47] -47]
Train Case:   9 | Input/Output: [[45 -51 45 45] -51]
Train Case:  10 | Input/Output: [[57 -37 57 57] -37]
Train Case:  11 | Input/Output: [[77 77 77 -7] -7]
Train Case:  12 | Input/Output: [[-84 -84 -35 -84] -84]
Train Case:  13 | Input/Output: [[-68 -68 -68 -43] -68]
Train Case:  14 | Input/Output: [[-66 43 43 43] -66]
Train Case:  15 | Input/Output: [(64 64 64 64) 64]
Train Case:  16 | Input/Output: [(-52 -52 -52 -52) -52]
Train Case:  17 | Input/Output: [(75 75 75 75) 75]
Train Case:  18 | Input/Output: [(-47 -47 -47 -47) -47]
Train Case:  19 | Input/Output: [(39 39 39 39) 39]
Train Case:  20 | Input/Output: [(84 83 79 18) 18]
Train Case:  21 | Input/Output: [(23 79 93 13) 13]
Train Case:  22 | Input/Output: [(11 77 11 71) 11]
Train Case:  23 | Input/Output: [(3 76 36 95) 3]
Train Case:  24 | Input/Output: [(66 80 93 50) 50]
Train Case:  25 | Input/Output: [(10 38 63 100) 10]
Train Case:  26 | Input/Output: [(95 39 53 87) 39]
Train Case:  27 | Input/Output: [(79 55 4 71) 4]
Train Case:  28 | Input/Output: [(35 91 58 7) 7]
Train Case:  29 | Input/Output: [(5 55 89 60) 5]
Train Case:  30 | Input/Output: [(89 31 82 93) 31]
Train Case:  31 | Input/Output: [(80 58 40 52) 40]
Train Case:  32 | Input/Output: [(94 52 35 5) 5]
Train Case:  33 | Input/Output: [(35 12 67 97) 12]
Train Case:  34 | Input/Output: [(1 13 40 24) 1]
Train Case:  35 | Input/Output: [(4 67 39 67) 4]
Train Case:  36 | Input/Output: [(22 51 54 23) 22]
Train Case:  37 | Input/Output: [(85 5 57 40) 5]
Train Case:  38 | Input/Output: [(9 8 100 100) 8]
Train Case:  39 | Input/Output: [(91 59 34 39) 34]
Train Case:  40 | Input/Output: [(30 83 89 98) 30]
Train Case:  41 | Input/Output: [(63 -48 -86 73) -86]
Train Case:  42 | Input/Output: [(-79 99 -73 -94) -94]
Train Case:  43 | Input/Output: [(-68 -97 89 59) -97]
Train Case:  44 | Input/Output: [(-90 91 23 75) -90]
Train Case:  45 | Input/Output: [(-71 1 12 -46) -71]
Train Case:  46 | Input/Output: [(45 -3 -57 58) -57]
Train Case:  47 | Input/Output: [(-35 66 -43 -56) -56]
Train Case:  48 | Input/Output: [(-84 -80 56 30) -84]
Train Case:  49 | Input/Output: [(42 -99 -7 57) -99]
Train Case:  50 | Input/Output: [(91 29 -22 58) -22]
Train Case:  51 | Input/Output: [(48 71 -82 -82) -82]
Train Case:  52 | Input/Output: [(-89 35 41 -96) -96]
Train Case:  53 | Input/Output: [(94 -11 -4 -2) -11]
Train Case:  54 | Input/Output: [(-67 89 69 -87) -87]
Train Case:  55 | Input/Output: [(21 -92 56 76) -92]
Train Case:  56 | Input/Output: [(3 43 64 88) 3]
Train Case:  57 | Input/Output: [(-93 64 -20 55) -93]
Train Case:  58 | Input/Output: [(-97 75 58 -62) -97]
Train Case:  59 | Input/Output: [(58 85 43 -86) -86]
Train Case:  60 | Input/Output: [(-77 -49 38 5) -77]
Train Case:  61 | Input/Output: [(2 -6 -86 62) -86]
Train Case:  62 | Input/Output: [(-17 -84 97 -47) -84]
Train Case:  63 | Input/Output: [(-6 60 39 55) -6]
Train Case:  64 | Input/Output: [(13 -16 85 93) -16]
Train Case:  65 | Input/Output: [(-15 -86 52 73) -86]
Train Case:  66 | Input/Output: [(-94 -60 -49 -5) -94]
Train Case:  67 | Input/Output: [(93 -3 70 15) -3]
Train Case:  68 | Input/Output: [(-86 -30 32 34) -86]
Train Case:  69 | Input/Output: [(-17 -99 41 -36) -99]
Train Case:  70 | Input/Output: [(22 -34 -37 56) -37]
Train Case:  71 | Input/Output: [(22 75 -85 19) -85]
Train Case:  72 | Input/Output: [(87 -47 -80 94) -80]
Train Case:  73 | Input/Output: [(18 21 -83 -65) -83]
Train Case:  74 | Input/Output: [(44 -39 60 38) -39]
Train Case:  75 | Input/Output: [(-48 36 -12 88) -48]
Train Case:  76 | Input/Output: [(64 -9 -7 -72) -72]
Train Case:  77 | Input/Output: [(26 11 -11 1) -11]
Train Case:  78 | Input/Output: [(-44 55 45 -71) -71]
Train Case:  79 | Input/Output: [(26 -61 -28 -62) -62]
Train Case:  80 | Input/Output: [(10 -76 70 -53) -76]
Train Case:  81 | Input/Output: [(38 57 -15 62) -15]
Train Case:  82 | Input/Output: [(47 -84 -24 66) -84]
Train Case:  83 | Input/Output: [(-71 19 26 9) -71]
Train Case:  84 | Input/Output: [(-93 -52 61 31) -93]
Train Case:  85 | Input/Output: [(-51 61 -33 -31) -51]
Train Case:  86 | Input/Output: [(96 29 45 -21) -21]
Train Case:  87 | Input/Output: [(-46 16 -90 -40) -90]
Train Case:  88 | Input/Output: [(94 55 54 -21) -21]
Train Case:  89 | Input/Output: [(29 24 -5 12) -5]
Train Case:  90 | Input/Output: [(11 -13 36 62) -13]
Train Case:  91 | Input/Output: [(-65 -40 85 -56) -65]
Train Case:  92 | Input/Output: [(93 -51 -64 -41) -64]
Train Case:  93 | Input/Output: [(-37 -74 -36 36) -74]
Train Case:  94 | Input/Output: [(-60 66 56 45) -60]
Train Case:  95 | Input/Output: [(41 82 49 58) 41]
Train Case:  96 | Input/Output: [(99 28 -71 82) -71]
Train Case:  97 | Input/Output: [(7 -2 31 19) -2]
Train Case:  98 | Input/Output: [(43 -20 96 6) -20]
Train Case:  99 | Input/Output: [(87 -76 -95 -76) -95]
Test Case:   0 | Input/Output: [[61 61 96 61] 61]
Test Case:   1 | Input/Output: [[95 -38 -38 -38] -38]
Test Case:   2 | Input/Output: [[-1 44 -1 -1] -1]
Test Case:   3 | Input/Output: [[-29 -29 -29 39] -29]
Test Case:   4 | Input/Output: [[-61 -84 -84 -84] -84]
Test Case:   5 | Input/Output: [[24 24 24 -49] -49]
Test Case:   6 | Input/Output: [[45 45 45 -81] -81]
Test Case:   7 | Input/Output: [[-96 -36 -36 -36] -96]
Test Case:   8 | Input/Output: [[-82 -82 -82 40] -82]
Test Case:   9 | Input/Output: [[-17 -38 -17 -17] -38]
Test Case:  10 | Input/Output: [[-99 -99 80 -99] -99]
Test Case:  11 | Input/Output: [[-7 61 61 61] -7]
Test Case:  12 | Input/Output: [[8 8 -4 8] -4]
Test Case:  13 | Input/Output: [[-40 -57 -40 -40] -57]
Test Case:  14 | Input/Output: [[89 89 89 -62] -62]
Test Case:  15 | Input/Output: [[-42 -4 -4 -4] -42]
Test Case:  16 | Input/Output: [[25 36 25 25] 25]
Test Case:  17 | Input/Output: [[-89 -13 -13 -13] -89]
Test Case:  18 | Input/Output: [[20 20 -86 20] -86]
Test Case:  19 | Input/Output: [[-29 21 -29 -29] -29]
Test Case:  20 | Input/Output: [[-72 -7 -72 -72] -72]
Test Case:  21 | Input/Output: [[49 -4 -4 -4] -4]
Test Case:  22 | Input/Output: [[73 73 -25 73] -25]
Test Case:  23 | Input/Output: [[55 55 93 55] 55]
Test Case:  24 | Input/Output: [[-99 -99 -99 -44] -99]
Test Case:  25 | Input/Output: [[-1 -1 -1 3] -1]
Test Case:  26 | Input/Output: [[-52 70 70 70] -52]
Test Case:  27 | Input/Output: [[-85 -92 -85 -85] -92]
Test Case:  28 | Input/Output: [[21 36 21 21] 21]
Test Case:  29 | Input/Output: [[-57 -57 52 -57] -57]
Test Case:  30 | Input/Output: [[-42 49 49 49] -42]
Test Case:  31 | Input/Output: [[-90 71 71 71] -90]
Test Case:  32 | Input/Output: [[-86 -86 88 -86] -86]
Test Case:  33 | Input/Output: [[-21 -21 -21 99] -21]
Test Case:  34 | Input/Output: [[70 71 71 71] 70]
Test Case:  35 | Input/Output: [[33 -73 33 33] -73]
Test Case:  36 | Input/Output: [[59 59 59 41] 41]
Test Case:  37 | Input/Output: [[-45 53 53 53] -45]
Test Case:  38 | Input/Output: [[1 -35 -35 -35] -35]
Test Case:  39 | Input/Output: [[-11 93 93 93] -11]
Test Case:  40 | Input/Output: [[88 -13 88 88] -13]
Test Case:  41 | Input/Output: [[-60 -60 -60 -63] -63]
Test Case:  42 | Input/Output: [[-20 -80 -20 -20] -80]
Test Case:  43 | Input/Output: [[57 57 8 57] 8]
Test Case:  44 | Input/Output: [[-54 35 -54 -54] -54]
Test Case:  45 | Input/Output: [[-34 -34 -39 -34] -39]
Test Case:  46 | Input/Output: [[38 38 38 -62] -62]
Test Case:  47 | Input/Output: [[-69 62 62 62] -69]
Test Case:  48 | Input/Output: [[-4 -4 -4 18] -4]
Test Case:  49 | Input/Output: [[85 85 86 85] 85]
Test Case:  50 | Input/Output: [[-73 -73 -73 22] -73]
Test Case:  51 | Input/Output: [[50 50 50 -64] -64]
Test Case:  52 | Input/Output: [[-77 71 -77 -77] -77]
Test Case:  53 | Input/Output: [[81 81 81 6] 6]
Test Case:  54 | Input/Output: [[99 -1 -1 -1] -1]
Test Case:  55 | Input/Output: [[17 -87 -87 -87] -87]
Test Case:  56 | Input/Output: [[-27 -27 -46 -27] -46]
Test Case:  57 | Input/Output: [[69 -50 69 69] -50]
Test Case:  58 | Input/Output: [[-41 -41 -41 -93] -93]
Test Case:  59 | Input/Output: [[-10 0 0 0] -10]
Test Case:  60 | Input/Output: [[43 -53 -53 -53] -53]
Test Case:  61 | Input/Output: [[-44 -44 77 -44] -44]
Test Case:  62 | Input/Output: [[91 91 91 89] 89]
Test Case:  63 | Input/Output: [[-33 -51 -33 -33] -51]
Test Case:  64 | Input/Output: [[80 -65 -65 -65] -65]
Test Case:  65 | Input/Output: [[100 16 100 100] 16]
Test Case:  66 | Input/Output: [[42 32 42 42] 32]
Test Case:  67 | Input/Output: [[8 -49 8 8] -49]
Test Case:  68 | Input/Output: [[-79 -79 -79 -83] -83]
Test Case:  69 | Input/Output: [[60 65 65 65] 60]
Test Case:  70 | Input/Output: [[88 3 88 88] 3]
Test Case:  71 | Input/Output: [[27 27 -77 27] -77]
Test Case:  72 | Input/Output: [[87 87 -95 87] -95]
Test Case:  73 | Input/Output: [[-69 -69 35 -69] -69]
Test Case:  74 | Input/Output: [[67 67 67 -44] -44]
Test Case:  75 | Input/Output: [[57 48 57 57] 48]
Test Case:  76 | Input/Output: [[-54 -54 -54 -21] -54]
Test Case:  77 | Input/Output: [[-59 -59 -59 -81] -81]
Test Case:  78 | Input/Output: [[-56 75 -56 -56] -56]
Test Case:  79 | Input/Output: [[-55 -55 76 -55] -55]
Test Case:  80 | Input/Output: [[99 -77 99 99] -77]
Test Case:  81 | Input/Output: [[-83 -83 76 -83] -83]
Test Case:  82 | Input/Output: [[-67 -67 66 -67] -67]
Test Case:  83 | Input/Output: [[37 37 37 12] 12]
Test Case:  84 | Input/Output: [[-41 -41 31 -41] -41]
Test Case:  85 | Input/Output: [[-33 82 82 82] -33]
Test Case:  86 | Input/Output: [[68 68 68 0] 0]
Test Case:  87 | Input/Output: [[-60 22 -60 -60] -60]
Test Case:  88 | Input/Output: [[30 -11 30 30] -11]
Test Case:  89 | Input/Output: [[-25 -25 -25 91] -25]
Test Case:  90 | Input/Output: [[-60 -60 -60 -12] -60]
Test Case:  91 | Input/Output: [[7 7 7 88] 7]
Test Case:  92 | Input/Output: [[58 50 50 50] 50]
Test Case:  93 | Input/Output: [[-40 15 -40 -40] -40]
Test Case:  94 | Input/Output: [[2 2 2 -80] -80]
Test Case:  95 | Input/Output: [[49 49 49 -12] -12]
Test Case:  96 | Input/Output: [[-45 -45 -45 1] -45]
Test Case:  97 | Input/Output: [[-51 -100 -100 -100] -100]
Test Case:  98 | Input/Output: [[-25 -88 -25 -25] -88]
Test Case:  99 | Input/Output: [[59 59 30 59] 30]
Test Case: 100 | Input/Output: [(97 97 97 97) 97]
Test Case: 101 | Input/Output: [(-52 -52 -52 -52) -52]
Test Case: 102 | Input/Output: [(66 66 66 66) 66]
Test Case: 103 | Input/Output: [(-49 -49 -49 -49) -49]
Test Case: 104 | Input/Output: [(-13 -13 -13 -13) -13]
Test Case: 105 | Input/Output: [(74 74 74 74) 74]
Test Case: 106 | Input/Output: [(26 26 26 26) 26]
Test Case: 107 | Input/Output: [(64 64 64 64) 64]
Test Case: 108 | Input/Output: [(-92 -92 -92 -92) -92]
Test Case: 109 | Input/Output: [(54 54 54 54) 54]
Test Case: 110 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 111 | Input/Output: [(-33 -33 -33 -33) -33]
Test Case: 112 | Input/Output: [(62 62 62 62) 62]
Test Case: 113 | Input/Output: [(-73 -73 -73 -73) -73]
Test Case: 114 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 115 | Input/Output: [(1 1 1 1) 1]
Test Case: 116 | Input/Output: [(-7 -7 -7 -7) -7]
Test Case: 117 | Input/Output: [(7 7 7 7) 7]
Test Case: 118 | Input/Output: [(-86 -86 -86 -86) -86]
Test Case: 119 | Input/Output: [(4 4 4 4) 4]
Test Case: 120 | Input/Output: [(15 15 15 15) 15]
Test Case: 121 | Input/Output: [(60 60 60 60) 60]
Test Case: 122 | Input/Output: [(-20 -20 -20 -20) -20]
Test Case: 123 | Input/Output: [(-95 -95 -95 -95) -95]
Test Case: 124 | Input/Output: [(-57 -57 -57 -57) -57]
Test Case: 125 | Input/Output: [(60 60 60 60) 60]
Test Case: 126 | Input/Output: [(-9 -9 -9 -9) -9]
Test Case: 127 | Input/Output: [(88 88 88 88) 88]
Test Case: 128 | Input/Output: [(-77 -77 -77 -77) -77]
Test Case: 129 | Input/Output: [(-26 -26 -26 -26) -26]
Test Case: 130 | Input/Output: [(19 19 19 19) 19]
Test Case: 131 | Input/Output: [(62 62 62 62) 62]
Test Case: 132 | Input/Output: [(-80 -80 -80 -80) -80]
Test Case: 133 | Input/Output: [(-22 -22 -22 -22) -22]
Test Case: 134 | Input/Output: [(2 2 2 2) 2]
Test Case: 135 | Input/Output: [(50 50 50 50) 50]
Test Case: 136 | Input/Output: [(-44 -44 -44 -44) -44]
Test Case: 137 | Input/Output: [(-13 -13 -13 -13) -13]
Test Case: 138 | Input/Output: [(-52 -52 -52 -52) -52]
Test Case: 139 | Input/Output: [(-77 -77 -77 -77) -77]
Test Case: 140 | Input/Output: [(26 26 26 26) 26]
Test Case: 141 | Input/Output: [(22 22 22 22) 22]
Test Case: 142 | Input/Output: [(-81 -81 -81 -81) -81]
Test Case: 143 | Input/Output: [(-30 -30 -30 -30) -30]
Test Case: 144 | Input/Output: [(50 50 50 50) 50]
Test Case: 145 | Input/Output: [(37 37 37 37) 37]
Test Case: 146 | Input/Output: [(-58 -58 -58 -58) -58]
Test Case: 147 | Input/Output: [(-28 -28 -28 -28) -28]
Test Case: 148 | Input/Output: [(-23 -23 -23 -23) -23]
Test Case: 149 | Input/Output: [(-13 -13 -13 -13) -13]
Test Case: 150 | Input/Output: [(-88 -88 -88 -88) -88]
Test Case: 151 | Input/Output: [(-95 -95 -95 -95) -95]
Test Case: 152 | Input/Output: [(68 68 68 68) 68]
Test Case: 153 | Input/Output: [(62 62 62 62) 62]
Test Case: 154 | Input/Output: [(-30 -30 -30 -30) -30]
Test Case: 155 | Input/Output: [(-16 -16 -16 -16) -16]
Test Case: 156 | Input/Output: [(91 91 91 91) 91]
Test Case: 157 | Input/Output: [(-21 -21 -21 -21) -21]
Test Case: 158 | Input/Output: [(-7 -7 -7 -7) -7]
Test Case: 159 | Input/Output: [(29 29 29 29) 29]
Test Case: 160 | Input/Output: [(-18 -18 -18 -18) -18]
Test Case: 161 | Input/Output: [(89 89 89 89) 89]
Test Case: 162 | Input/Output: [(-55 -55 -55 -55) -55]
Test Case: 163 | Input/Output: [(85 85 85 85) 85]
Test Case: 164 | Input/Output: [(-74 -74 -74 -74) -74]
Test Case: 165 | Input/Output: [(20 20 20 20) 20]
Test Case: 166 | Input/Output: [(18 18 18 18) 18]
Test Case: 167 | Input/Output: [(-81 -81 -81 -81) -81]
Test Case: 168 | Input/Output: [(24 24 24 24) 24]
Test Case: 169 | Input/Output: [(16 16 16 16) 16]
Test Case: 170 | Input/Output: [(56 56 56 56) 56]
Test Case: 171 | Input/Output: [(-79 -79 -79 -79) -79]
Test Case: 172 | Input/Output: [(43 43 43 43) 43]
Test Case: 173 | Input/Output: [(78 78 78 78) 78]
Test Case: 174 | Input/Output: [(-36 -36 -36 -36) -36]
Test Case: 175 | Input/Output: [(38 38 38 38) 38]
Test Case: 176 | Input/Output: [(-82 -82 -82 -82) -82]
Test Case: 177 | Input/Output: [(-3 -3 -3 -3) -3]
Test Case: 178 | Input/Output: [(68 68 68 68) 68]
Test Case: 179 | Input/Output: [(-1 -1 -1 -1) -1]
Test Case: 180 | Input/Output: [(-8 -8 -8 -8) -8]
Test Case: 181 | Input/Output: [(-57 -57 -57 -57) -57]
Test Case: 182 | Input/Output: [(37 37 37 37) 37]
Test Case: 183 | Input/Output: [(53 53 53 53) 53]
Test Case: 184 | Input/Output: [(61 61 61 61) 61]
Test Case: 185 | Input/Output: [(-64 -64 -64 -64) -64]
Test Case: 186 | Input/Output: [(96 96 96 96) 96]
Test Case: 187 | Input/Output: [(40 40 40 40) 40]
Test Case: 188 | Input/Output: [(-70 -70 -70 -70) -70]
Test Case: 189 | Input/Output: [(32 32 32 32) 32]
Test Case: 190 | Input/Output: [(26 26 26 26) 26]
Test Case: 191 | Input/Output: [(30 30 30 30) 30]
Test Case: 192 | Input/Output: [(-5 -5 -5 -5) -5]
Test Case: 193 | Input/Output: [(-56 -56 -56 -56) -56]
Test Case: 194 | Input/Output: [(85 85 85 85) 85]
Test Case: 195 | Input/Output: [(-97 -97 -97 -97) -97]
Test Case: 196 | Input/Output: [(75 75 75 75) 75]
Test Case: 197 | Input/Output: [(75 75 75 75) 75]
Test Case: 198 | Input/Output: [(55 55 55 55) 55]
Test Case: 199 | Input/Output: [(29 29 29 29) 29]
Test Case: 200 | Input/Output: [(37 100 33 80) 33]
Test Case: 201 | Input/Output: [(26 76 100 41) 26]
Test Case: 202 | Input/Output: [(38 10 29 30) 10]
Test Case: 203 | Input/Output: [(96 60 80 12) 12]
Test Case: 204 | Input/Output: [(79 33 50 30) 30]
Test Case: 205 | Input/Output: [(16 3 60 78) 3]
Test Case: 206 | Input/Output: [(42 74 18 96) 18]
Test Case: 207 | Input/Output: [(88 58 57 2) 2]
Test Case: 208 | Input/Output: [(95 35 11 20) 11]
Test Case: 209 | Input/Output: [(34 88 91 51) 34]
Test Case: 210 | Input/Output: [(88 70 87 98) 70]
Test Case: 211 | Input/Output: [(41 23 44 7) 7]
Test Case: 212 | Input/Output: [(43 80 61 94) 43]
Test Case: 213 | Input/Output: [(47 32 87 45) 32]
Test Case: 214 | Input/Output: [(68 74 96 1) 1]
Test Case: 215 | Input/Output: [(10 47 86 64) 10]
Test Case: 216 | Input/Output: [(85 7 42 37) 7]
Test Case: 217 | Input/Output: [(53 9 64 96) 9]
Test Case: 218 | Input/Output: [(18 25 29 12) 12]
Test Case: 219 | Input/Output: [(27 62 1 36) 1]
Test Case: 220 | Input/Output: [(30 2 4 90) 2]
Test Case: 221 | Input/Output: [(70 32 75 97) 32]
Test Case: 222 | Input/Output: [(25 38 76 90) 25]
Test Case: 223 | Input/Output: [(22 10 28 47) 10]
Test Case: 224 | Input/Output: [(84 1 62 55) 1]
Test Case: 225 | Input/Output: [(58 21 97 56) 21]
Test Case: 226 | Input/Output: [(86 22 64 52) 22]
Test Case: 227 | Input/Output: [(54 100 43 84) 43]
Test Case: 228 | Input/Output: [(86 95 55 59) 55]
Test Case: 229 | Input/Output: [(1 78 88 9) 1]
Test Case: 230 | Input/Output: [(15 86 24 63) 15]
Test Case: 231 | Input/Output: [(26 86 90 42) 26]
Test Case: 232 | Input/Output: [(16 63 80 7) 7]
Test Case: 233 | Input/Output: [(70 52 3 88) 3]
Test Case: 234 | Input/Output: [(64 84 97 24) 24]
Test Case: 235 | Input/Output: [(12 85 19 3) 3]
Test Case: 236 | Input/Output: [(63 73 45 21) 21]
Test Case: 237 | Input/Output: [(83 98 48 3) 3]
Test Case: 238 | Input/Output: [(95 70 93 41) 41]
Test Case: 239 | Input/Output: [(38 92 14 97) 14]
Test Case: 240 | Input/Output: [(77 13 56 65) 13]
Test Case: 241 | Input/Output: [(37 73 15 100) 15]
Test Case: 242 | Input/Output: [(73 18 54 95) 18]
Test Case: 243 | Input/Output: [(34 85 10 41) 10]
Test Case: 244 | Input/Output: [(45 72 100 98) 45]
Test Case: 245 | Input/Output: [(60 91 91 25) 25]
Test Case: 246 | Input/Output: [(17 84 89 59) 17]
Test Case: 247 | Input/Output: [(38 76 91 44) 38]
Test Case: 248 | Input/Output: [(29 88 32 71) 29]
Test Case: 249 | Input/Output: [(41 19 16 23) 16]
Test Case: 250 | Input/Output: [(71 17 35 87) 17]
Test Case: 251 | Input/Output: [(0 41 56 88) 0]
Test Case: 252 | Input/Output: [(31 42 87 11) 11]
Test Case: 253 | Input/Output: [(4 82 8 74) 4]
Test Case: 254 | Input/Output: [(74 1 91 53) 1]
Test Case: 255 | Input/Output: [(8 51 77 46) 8]
Test Case: 256 | Input/Output: [(81 28 66 30) 28]
Test Case: 257 | Input/Output: [(48 32 41 19) 19]
Test Case: 258 | Input/Output: [(7 16 85 61) 7]
Test Case: 259 | Input/Output: [(33 63 74 53) 33]
Test Case: 260 | Input/Output: [(84 16 99 90) 16]
Test Case: 261 | Input/Output: [(36 99 27 52) 27]
Test Case: 262 | Input/Output: [(46 10 59 30) 10]
Test Case: 263 | Input/Output: [(8 46 9 7) 7]
Test Case: 264 | Input/Output: [(21 23 43 39) 21]
Test Case: 265 | Input/Output: [(87 88 69 9) 9]
Test Case: 266 | Input/Output: [(11 52 12 5) 5]
Test Case: 267 | Input/Output: [(75 34 33 83) 33]
Test Case: 268 | Input/Output: [(75 14 41 14) 14]
Test Case: 269 | Input/Output: [(20 42 98 31) 20]
Test Case: 270 | Input/Output: [(0 19 76 19) 0]
Test Case: 271 | Input/Output: [(76 77 95 49) 49]
Test Case: 272 | Input/Output: [(61 76 6 66) 6]
Test Case: 273 | Input/Output: [(36 2 21 13) 2]
Test Case: 274 | Input/Output: [(78 57 27 99) 27]
Test Case: 275 | Input/Output: [(71 91 17 67) 17]
Test Case: 276 | Input/Output: [(45 71 32 20) 20]
Test Case: 277 | Input/Output: [(7 82 52 78) 7]
Test Case: 278 | Input/Output: [(87 58 77 1) 1]
Test Case: 279 | Input/Output: [(14 92 20 52) 14]
Test Case: 280 | Input/Output: [(58 57 56 6) 6]
Test Case: 281 | Input/Output: [(23 11 38 77) 11]
Test Case: 282 | Input/Output: [(5 5 79 90) 5]
Test Case: 283 | Input/Output: [(90 67 5 82) 5]
Test Case: 284 | Input/Output: [(38 83 3 64) 3]
Test Case: 285 | Input/Output: [(49 84 89 28) 28]
Test Case: 286 | Input/Output: [(98 38 26 54) 26]
Test Case: 287 | Input/Output: [(25 88 84 61) 25]
Test Case: 288 | Input/Output: [(85 84 37 49) 37]
Test Case: 289 | Input/Output: [(81 52 91 76) 52]
Test Case: 290 | Input/Output: [(53 13 73 76) 13]
Test Case: 291 | Input/Output: [(18 81 0 51) 0]
Test Case: 292 | Input/Output: [(99 66 93 10) 10]
Test Case: 293 | Input/Output: [(8 89 29 2) 2]
Test Case: 294 | Input/Output: [(6 21 14 52) 6]
Test Case: 295 | Input/Output: [(20 39 78 73) 20]
Test Case: 296 | Input/Output: [(8 14 29 21) 8]
Test Case: 297 | Input/Output: [(76 30 37 38) 30]
Test Case: 298 | Input/Output: [(5 24 64 97) 5]
Test Case: 299 | Input/Output: [(65 99 43 48) 43]
Test Case: 300 | Input/Output: [(14 57 7 13) 7]
Test Case: 301 | Input/Output: [(7 44 0 53) 0]
Test Case: 302 | Input/Output: [(76 81 57 38) 38]
Test Case: 303 | Input/Output: [(84 90 43 21) 21]
Test Case: 304 | Input/Output: [(92 91 38 74) 38]
Test Case: 305 | Input/Output: [(49 76 59 34) 34]
Test Case: 306 | Input/Output: [(72 78 64 64) 64]
Test Case: 307 | Input/Output: [(74 14 82 46) 14]
Test Case: 308 | Input/Output: [(37 32 44 10) 10]
Test Case: 309 | Input/Output: [(31 60 76 87) 31]
Test Case: 310 | Input/Output: [(95 73 23 62) 23]
Test Case: 311 | Input/Output: [(20 95 30 95) 20]
Test Case: 312 | Input/Output: [(57 63 94 88) 57]
Test Case: 313 | Input/Output: [(0 60 79 51) 0]
Test Case: 314 | Input/Output: [(85 27 44 36) 27]
Test Case: 315 | Input/Output: [(9 1 7 92) 1]
Test Case: 316 | Input/Output: [(48 93 77 57) 48]
Test Case: 317 | Input/Output: [(98 44 76 77) 44]
Test Case: 318 | Input/Output: [(86 6 69 2) 2]
Test Case: 319 | Input/Output: [(16 41 10 37) 10]
Test Case: 320 | Input/Output: [(36 16 8 66) 8]
Test Case: 321 | Input/Output: [(57 21 83 33) 21]
Test Case: 322 | Input/Output: [(27 21 30 62) 21]
Test Case: 323 | Input/Output: [(54 52 67 78) 52]
Test Case: 324 | Input/Output: [(18 41 57 62) 18]
Test Case: 325 | Input/Output: [(26 49 34 7) 7]
Test Case: 326 | Input/Output: [(20 72 65 35) 20]
Test Case: 327 | Input/Output: [(80 78 75 92) 75]
Test Case: 328 | Input/Output: [(0 48 90 10) 0]
Test Case: 329 | Input/Output: [(53 57 10 45) 10]
Test Case: 330 | Input/Output: [(77 76 19 84) 19]
Test Case: 331 | Input/Output: [(47 20 36 25) 20]
Test Case: 332 | Input/Output: [(4 53 26 11) 4]
Test Case: 333 | Input/Output: [(9 33 49 97) 9]
Test Case: 334 | Input/Output: [(51 100 5 81) 5]
Test Case: 335 | Input/Output: [(46 13 40 67) 13]
Test Case: 336 | Input/Output: [(33 41 22 86) 22]
Test Case: 337 | Input/Output: [(48 12 94 60) 12]
Test Case: 338 | Input/Output: [(68 73 92 15) 15]
Test Case: 339 | Input/Output: [(5 48 67 44) 5]
Test Case: 340 | Input/Output: [(30 10 85 52) 10]
Test Case: 341 | Input/Output: [(42 88 4 87) 4]
Test Case: 342 | Input/Output: [(31 39 19 35) 19]
Test Case: 343 | Input/Output: [(74 96 71 32) 32]
Test Case: 344 | Input/Output: [(43 66 56 50) 43]
Test Case: 345 | Input/Output: [(4 42 72 81) 4]
Test Case: 346 | Input/Output: [(93 34 52 88) 34]
Test Case: 347 | Input/Output: [(36 29 90 52) 29]
Test Case: 348 | Input/Output: [(74 18 54 77) 18]
Test Case: 349 | Input/Output: [(98 84 98 19) 19]
Test Case: 350 | Input/Output: [(71 31 86 98) 31]
Test Case: 351 | Input/Output: [(66 18 87 74) 18]
Test Case: 352 | Input/Output: [(51 81 83 65) 51]
Test Case: 353 | Input/Output: [(47 33 13 100) 13]
Test Case: 354 | Input/Output: [(38 66 6 21) 6]
Test Case: 355 | Input/Output: [(90 80 4 3) 3]
Test Case: 356 | Input/Output: [(99 98 57 95) 57]
Test Case: 357 | Input/Output: [(85 69 11 1) 1]
Test Case: 358 | Input/Output: [(86 21 99 92) 21]
Test Case: 359 | Input/Output: [(39 38 96 92) 38]
Test Case: 360 | Input/Output: [(5 5 29 34) 5]
Test Case: 361 | Input/Output: [(44 50 57 6) 6]
Test Case: 362 | Input/Output: [(64 63 37 37) 37]
Test Case: 363 | Input/Output: [(95 34 34 67) 34]
Test Case: 364 | Input/Output: [(91 23 44 50) 23]
Test Case: 365 | Input/Output: [(78 78 60 80) 60]
Test Case: 366 | Input/Output: [(32 28 6 25) 6]
Test Case: 367 | Input/Output: [(19 98 2 14) 2]
Test Case: 368 | Input/Output: [(28 2 71 77) 2]
Test Case: 369 | Input/Output: [(69 49 3 36) 3]
Test Case: 370 | Input/Output: [(46 9 73 40) 9]
Test Case: 371 | Input/Output: [(78 32 96 48) 32]
Test Case: 372 | Input/Output: [(82 6 20 89) 6]
Test Case: 373 | Input/Output: [(38 65 79 11) 11]
Test Case: 374 | Input/Output: [(74 91 62 23) 23]
Test Case: 375 | Input/Output: [(55 69 65 46) 46]
Test Case: 376 | Input/Output: [(30 35 68 93) 30]
Test Case: 377 | Input/Output: [(79 69 1 59) 1]
Test Case: 378 | Input/Output: [(86 46 62 94) 46]
Test Case: 379 | Input/Output: [(73 57 29 2) 2]
Test Case: 380 | Input/Output: [(57 77 64 42) 42]
Test Case: 381 | Input/Output: [(53 66 79 34) 34]
Test Case: 382 | Input/Output: [(50 17 16 7) 7]
Test Case: 383 | Input/Output: [(53 99 10 48) 10]
Test Case: 384 | Input/Output: [(100 97 18 73) 18]
Test Case: 385 | Input/Output: [(50 32 40 98) 32]
Test Case: 386 | Input/Output: [(59 68 74 73) 59]
Test Case: 387 | Input/Output: [(86 47 9 55) 9]
Test Case: 388 | Input/Output: [(87 69 55 11) 11]
Test Case: 389 | Input/Output: [(26 32 26 44) 26]
Test Case: 390 | Input/Output: [(22 46 20 35) 20]
Test Case: 391 | Input/Output: [(12 71 23 100) 12]
Test Case: 392 | Input/Output: [(38 43 95 27) 27]
Test Case: 393 | Input/Output: [(28 82 8 88) 8]
Test Case: 394 | Input/Output: [(2 78 50 53) 2]
Test Case: 395 | Input/Output: [(30 64 41 36) 30]
Test Case: 396 | Input/Output: [(75 31 3 47) 3]
Test Case: 397 | Input/Output: [(92 62 40 76) 40]
Test Case: 398 | Input/Output: [(15 98 45 82) 15]
Test Case: 399 | Input/Output: [(57 90 24 61) 24]
Test Case: 400 | Input/Output: [(22 87 33 -61) -61]
Test Case: 401 | Input/Output: [(-46 21 -89 -65) -89]
Test Case: 402 | Input/Output: [(20 -85 75 70) -85]
Test Case: 403 | Input/Output: [(-2 -98 68 81) -98]
Test Case: 404 | Input/Output: [(-84 88 40 76) -84]
Test Case: 405 | Input/Output: [(-75 -86 -58 45) -86]
Test Case: 406 | Input/Output: [(18 4 39 98) 4]
Test Case: 407 | Input/Output: [(-76 60 15 -90) -90]
Test Case: 408 | Input/Output: [(92 -15 -92 -52) -92]
Test Case: 409 | Input/Output: [(41 16 -38 18) -38]
Test Case: 410 | Input/Output: [(-71 -24 15 -11) -71]
Test Case: 411 | Input/Output: [(8 -34 -95 -21) -95]
Test Case: 412 | Input/Output: [(15 -12 4 17) -12]
Test Case: 413 | Input/Output: [(-79 -90 -7 -77) -90]
Test Case: 414 | Input/Output: [(14 58 98 -38) -38]
Test Case: 415 | Input/Output: [(-45 -61 -60 52) -61]
Test Case: 416 | Input/Output: [(69 99 -2 86) -2]
Test Case: 417 | Input/Output: [(-34 65 59 -31) -34]
Test Case: 418 | Input/Output: [(-17 32 50 54) -17]
Test Case: 419 | Input/Output: [(-79 -6 -55 -100) -100]
Test Case: 420 | Input/Output: [(-31 -8 14 -59) -59]
Test Case: 421 | Input/Output: [(-47 50 -41 -77) -77]
Test Case: 422 | Input/Output: [(-63 -63 19 -17) -63]
Test Case: 423 | Input/Output: [(-7 -76 -8 -63) -76]
Test Case: 424 | Input/Output: [(-22 99 73 50) -22]
Test Case: 425 | Input/Output: [(68 -72 -96 73) -96]
Test Case: 426 | Input/Output: [(-78 3 -69 -90) -90]
Test Case: 427 | Input/Output: [(55 87 -85 -78) -85]
Test Case: 428 | Input/Output: [(-64 -56 -12 57) -64]
Test Case: 429 | Input/Output: [(53 -2 97 -66) -66]
Test Case: 430 | Input/Output: [(34 28 -64 -59) -64]
Test Case: 431 | Input/Output: [(27 -96 -45 89) -96]
Test Case: 432 | Input/Output: [(-2 73 -6 -61) -61]
Test Case: 433 | Input/Output: [(-89 -9 56 54) -89]
Test Case: 434 | Input/Output: [(-42 21 14 -83) -83]
Test Case: 435 | Input/Output: [(-99 -28 42 40) -99]
Test Case: 436 | Input/Output: [(24 -95 82 -11) -95]
Test Case: 437 | Input/Output: [(30 -71 97 98) -71]
Test Case: 438 | Input/Output: [(74 -16 -79 -16) -79]
Test Case: 439 | Input/Output: [(-35 -3 54 -32) -35]
Test Case: 440 | Input/Output: [(34 53 82 -8) -8]
Test Case: 441 | Input/Output: [(-76 24 3 6) -76]
Test Case: 442 | Input/Output: [(34 -73 -54 50) -73]
Test Case: 443 | Input/Output: [(55 -89 -29 -40) -89]
Test Case: 444 | Input/Output: [(76 76 95 -67) -67]
Test Case: 445 | Input/Output: [(-49 -2 63 29) -49]
Test Case: 446 | Input/Output: [(-7 64 14 -10) -10]
Test Case: 447 | Input/Output: [(51 -18 -26 -51) -51]
Test Case: 448 | Input/Output: [(-91 79 -64 43) -91]
Test Case: 449 | Input/Output: [(-37 -61 -19 72) -61]
Test Case: 450 | Input/Output: [(-19 -100 -80 -50) -100]
Test Case: 451 | Input/Output: [(51 -20 93 -15) -20]
Test Case: 452 | Input/Output: [(-24 9 77 55) -24]
Test Case: 453 | Input/Output: [(-7 84 63 9) -7]
Test Case: 454 | Input/Output: [(37 -10 25 -23) -23]
Test Case: 455 | Input/Output: [(95 21 -67 80) -67]
Test Case: 456 | Input/Output: [(42 34 97 -6) -6]
Test Case: 457 | Input/Output: [(-66 20 -91 29) -91]
Test Case: 458 | Input/Output: [(-7 46 -65 -92) -92]
Test Case: 459 | Input/Output: [(59 53 74 -21) -21]
Test Case: 460 | Input/Output: [(-93 70 87 -99) -99]
Test Case: 461 | Input/Output: [(-59 -3 42 64) -59]
Test Case: 462 | Input/Output: [(98 -72 60 -69) -72]
Test Case: 463 | Input/Output: [(95 91 -95 -32) -95]
Test Case: 464 | Input/Output: [(-8 -33 -75 29) -75]
Test Case: 465 | Input/Output: [(-8 -16 18 -51) -51]
Test Case: 466 | Input/Output: [(-13 -41 20 30) -41]
Test Case: 467 | Input/Output: [(43 -95 -34 -74) -95]
Test Case: 468 | Input/Output: [(-47 -99 94 24) -99]
Test Case: 469 | Input/Output: [(-33 -83 89 -37) -83]
Test Case: 470 | Input/Output: [(63 56 -25 -35) -35]
Test Case: 471 | Input/Output: [(-8 96 -90 97) -90]
Test Case: 472 | Input/Output: [(28 -86 -82 15) -86]
Test Case: 473 | Input/Output: [(-16 6 -75 16) -75]
Test Case: 474 | Input/Output: [(-67 -50 -12 -49) -67]
Test Case: 475 | Input/Output: [(-58 52 -89 57) -89]
Test Case: 476 | Input/Output: [(2 -21 31 73) -21]
Test Case: 477 | Input/Output: [(-62 -78 -16 -31) -78]
Test Case: 478 | Input/Output: [(63 -33 -95 63) -95]
Test Case: 479 | Input/Output: [(37 55 -18 67) -18]
Test Case: 480 | Input/Output: [(33 -19 -66 -7) -66]
Test Case: 481 | Input/Output: [(-12 70 -89 -27) -89]
Test Case: 482 | Input/Output: [(-16 -29 -62 11) -62]
Test Case: 483 | Input/Output: [(98 -100 -57 -28) -100]
Test Case: 484 | Input/Output: [(72 75 -17 35) -17]
Test Case: 485 | Input/Output: [(57 -47 41 9) -47]
Test Case: 486 | Input/Output: [(-28 21 -50 -92) -92]
Test Case: 487 | Input/Output: [(-76 -29 54 -1) -76]
Test Case: 488 | Input/Output: [(-64 -24 59 30) -64]
Test Case: 489 | Input/Output: [(33 26 -66 -84) -84]
Test Case: 490 | Input/Output: [(-10 32 -1 85) -10]
Test Case: 491 | Input/Output: [(91 73 -75 50) -75]
Test Case: 492 | Input/Output: [(75 -21 1 -25) -25]
Test Case: 493 | Input/Output: [(78 97 5 -24) -24]
Test Case: 494 | Input/Output: [(34 -100 34 37) -100]
Test Case: 495 | Input/Output: [(-61 -5 -7 29) -61]
Test Case: 496 | Input/Output: [(6 62 34 81) 6]
Test Case: 497 | Input/Output: [(2 -5 -34 35) -34]
Test Case: 498 | Input/Output: [(-7 -23 -32 -71) -71]
Test Case: 499 | Input/Output: [(-62 95 -99 33) -99]
Test Case: 500 | Input/Output: [(-2 11 51 9) -2]
Test Case: 501 | Input/Output: [(59 -37 -13 86) -37]
Test Case: 502 | Input/Output: [(52 58 85 -90) -90]
Test Case: 503 | Input/Output: [(-3 63 72 -51) -51]
Test Case: 504 | Input/Output: [(-3 71 -5 54) -5]
Test Case: 505 | Input/Output: [(98 -38 -50 78) -50]
Test Case: 506 | Input/Output: [(-75 76 59 -79) -79]
Test Case: 507 | Input/Output: [(61 23 25 67) 23]
Test Case: 508 | Input/Output: [(-100 21 34 -24) -100]
Test Case: 509 | Input/Output: [(8 -13 3 -40) -40]
Test Case: 510 | Input/Output: [(7 18 -46 -63) -63]
Test Case: 511 | Input/Output: [(-20 -60 26 -40) -60]
Test Case: 512 | Input/Output: [(49 33 96 48) 33]
Test Case: 513 | Input/Output: [(83 -50 -87 79) -87]
Test Case: 514 | Input/Output: [(47 51 98 35) 35]
Test Case: 515 | Input/Output: [(63 38 -97 -58) -97]
Test Case: 516 | Input/Output: [(58 -3 -65 -64) -65]
Test Case: 517 | Input/Output: [(89 11 -22 10) -22]
Test Case: 518 | Input/Output: [(-30 1 30 -25) -30]
Test Case: 519 | Input/Output: [(73 40 53 86) 40]
Test Case: 520 | Input/Output: [(-20 -76 -90 -83) -90]
Test Case: 521 | Input/Output: [(41 46 -74 -92) -92]
Test Case: 522 | Input/Output: [(-69 -79 -95 -66) -95]
Test Case: 523 | Input/Output: [(15 25 50 -81) -81]
Test Case: 524 | Input/Output: [(85 -71 -39 43) -71]
Test Case: 525 | Input/Output: [(81 -32 -25 -27) -32]
Test Case: 526 | Input/Output: [(12 -71 86 61) -71]
Test Case: 527 | Input/Output: [(70 67 38 -52) -52]
Test Case: 528 | Input/Output: [(19 -28 84 -65) -65]
Test Case: 529 | Input/Output: [(45 -21 71 -78) -78]
Test Case: 530 | Input/Output: [(-21 31 46 83) -21]
Test Case: 531 | Input/Output: [(39 -84 -93 -26) -93]
Test Case: 532 | Input/Output: [(-9 -98 -39 67) -98]
Test Case: 533 | Input/Output: [(50 15 -26 77) -26]
Test Case: 534 | Input/Output: [(-27 0 -98 -74) -98]
Test Case: 535 | Input/Output: [(33 6 -96 -27) -96]
Test Case: 536 | Input/Output: [(-29 64 67 -4) -29]
Test Case: 537 | Input/Output: [(-44 61 -28 6) -44]
Test Case: 538 | Input/Output: [(4 -86 81 68) -86]
Test Case: 539 | Input/Output: [(6 9 36 57) 6]
Test Case: 540 | Input/Output: [(53 85 3 -31) -31]
Test Case: 541 | Input/Output: [(21 -97 45 42) -97]
Test Case: 542 | Input/Output: [(38 93 -94 -74) -94]
Test Case: 543 | Input/Output: [(-76 -25 40 -99) -99]
Test Case: 544 | Input/Output: [(13 15 9 53) 9]
Test Case: 545 | Input/Output: [(45 -30 38 -17) -30]
Test Case: 546 | Input/Output: [(45 64 97 15) 15]
Test Case: 547 | Input/Output: [(-33 -63 43 -26) -63]
Test Case: 548 | Input/Output: [(-65 -98 -69 -5) -98]
Test Case: 549 | Input/Output: [(-55 87 -52 70) -55]
Test Case: 550 | Input/Output: [(-79 -77 -77 -69) -79]
Test Case: 551 | Input/Output: [(28 59 -54 99) -54]
Test Case: 552 | Input/Output: [(18 -71 23 14) -71]
Test Case: 553 | Input/Output: [(89 -55 -97 49) -97]
Test Case: 554 | Input/Output: [(-7 -14 75 -69) -69]
Test Case: 555 | Input/Output: [(77 -87 -64 49) -87]
Test Case: 556 | Input/Output: [(91 -87 -32 -87) -87]
Test Case: 557 | Input/Output: [(-26 18 -7 -96) -96]
Test Case: 558 | Input/Output: [(8 24 -39 -96) -96]
Test Case: 559 | Input/Output: [(-67 10 58 -46) -67]
Test Case: 560 | Input/Output: [(33 71 97 69) 33]
Test Case: 561 | Input/Output: [(-35 -18 5 63) -35]
Test Case: 562 | Input/Output: [(-87 31 30 -56) -87]
Test Case: 563 | Input/Output: [(51 84 -26 54) -26]
Test Case: 564 | Input/Output: [(95 -12 57 92) -12]
Test Case: 565 | Input/Output: [(80 -59 -77 -18) -77]
Test Case: 566 | Input/Output: [(-80 54 76 -31) -80]
Test Case: 567 | Input/Output: [(1 21 -55 19) -55]
Test Case: 568 | Input/Output: [(20 -63 -87 -6) -87]
Test Case: 569 | Input/Output: [(-30 -49 5 98) -49]
Test Case: 570 | Input/Output: [(-93 18 -63 40) -93]
Test Case: 571 | Input/Output: [(-62 38 -3 41) -62]
Test Case: 572 | Input/Output: [(-84 -51 46 42) -84]
Test Case: 573 | Input/Output: [(44 -18 -50 97) -50]
Test Case: 574 | Input/Output: [(-28 -51 2 -45) -51]
Test Case: 575 | Input/Output: [(25 65 70 74) 25]
Test Case: 576 | Input/Output: [(-5 99 -45 -21) -45]
Test Case: 577 | Input/Output: [(-77 -13 -6 75) -77]
Test Case: 578 | Input/Output: [(31 -55 92 94) -55]
Test Case: 579 | Input/Output: [(-58 -84 12 91) -84]
Test Case: 580 | Input/Output: [(-47 -7 15 9) -47]
Test Case: 581 | Input/Output: [(82 33 86 3) 3]
Test Case: 582 | Input/Output: [(26 9 -69 -94) -94]
Test Case: 583 | Input/Output: [(-34 45 87 -13) -34]
Test Case: 584 | Input/Output: [(-63 -81 -66 44) -81]
Test Case: 585 | Input/Output: [(-98 -33 5 -10) -98]
Test Case: 586 | Input/Output: [(-67 -66 -49 25) -67]
Test Case: 587 | Input/Output: [(-71 -59 99 59) -71]
Test Case: 588 | Input/Output: [(85 -54 81 96) -54]
Test Case: 589 | Input/Output: [(99 43 -44 9) -44]
Test Case: 590 | Input/Output: [(-57 0 -93 -67) -93]
Test Case: 591 | Input/Output: [(100 -27 -21 20) -27]
Test Case: 592 | Input/Output: [(59 71 -16 -80) -80]
Test Case: 593 | Input/Output: [(30 8 59 -63) -63]
Test Case: 594 | Input/Output: [(35 49 -53 -38) -53]
Test Case: 595 | Input/Output: [(9 45 -90 73) -90]
Test Case: 596 | Input/Output: [(75 -72 -46 -98) -98]
Test Case: 597 | Input/Output: [(-22 47 28 60) -22]
Test Case: 598 | Input/Output: [(1 -49 -28 -37) -49]
Test Case: 599 | Input/Output: [(32 46 -79 -95) -95]
Test Case: 600 | Input/Output: [(-25 -25 45 -65) -65]
Test Case: 601 | Input/Output: [(15 -31 -82 -15) -82]
Test Case: 602 | Input/Output: [(-85 99 53 -83) -85]
Test Case: 603 | Input/Output: [(-57 -1 -67 -8) -67]
Test Case: 604 | Input/Output: [(50 20 91 48) 20]
Test Case: 605 | Input/Output: [(-18 6 28 28) -18]
Test Case: 606 | Input/Output: [(-20 -27 36 -34) -34]
Test Case: 607 | Input/Output: [(97 60 78 25) 25]
Test Case: 608 | Input/Output: [(-21 79 -98 -66) -98]
Test Case: 609 | Input/Output: [(20 69 -63 75) -63]
Test Case: 610 | Input/Output: [(89 -27 -15 87) -27]
Test Case: 611 | Input/Output: [(-87 64 -10 -73) -87]
Test Case: 612 | Input/Output: [(24 98 -29 -52) -52]
Test Case: 613 | Input/Output: [(66 2 25 6) 2]
Test Case: 614 | Input/Output: [(-85 -97 -28 5) -97]
Test Case: 615 | Input/Output: [(97 99 45 -80) -80]
Test Case: 616 | Input/Output: [(42 73 29 -51) -51]
Test Case: 617 | Input/Output: [(-57 65 -67 86) -67]
Test Case: 618 | Input/Output: [(-7 20 73 -55) -55]
Test Case: 619 | Input/Output: [(24 48 31 -76) -76]
Test Case: 620 | Input/Output: [(33 48 73 92) 33]
Test Case: 621 | Input/Output: [(78 -44 20 -22) -44]
Test Case: 622 | Input/Output: [(64 -96 -52 -35) -96]
Test Case: 623 | Input/Output: [(-40 98 -75 35) -75]
Test Case: 624 | Input/Output: [(55 90 -15 12) -15]
Test Case: 625 | Input/Output: [(-56 37 94 61) -56]
Test Case: 626 | Input/Output: [(23 -74 28 71) -74]
Test Case: 627 | Input/Output: [(69 -59 -99 -52) -99]
Test Case: 628 | Input/Output: [(-21 70 78 35) -21]
Test Case: 629 | Input/Output: [(51 86 9 -32) -32]
Test Case: 630 | Input/Output: [(-28 -36 -18 -78) -78]
Test Case: 631 | Input/Output: [(-13 -3 26 66) -13]
Test Case: 632 | Input/Output: [(-77 86 11 -20) -77]
Test Case: 633 | Input/Output: [(70 -59 -99 -70) -99]
Test Case: 634 | Input/Output: [(-10 -67 -89 -17) -89]
Test Case: 635 | Input/Output: [(-75 80 -75 71) -75]
Test Case: 636 | Input/Output: [(-43 62 -48 58) -48]
Test Case: 637 | Input/Output: [(53 43 -73 -53) -73]
Test Case: 638 | Input/Output: [(90 60 77 83) 60]
Test Case: 639 | Input/Output: [(-24 27 60 -34) -34]
Test Case: 640 | Input/Output: [(50 40 31 -56) -56]
Test Case: 641 | Input/Output: [(-25 -22 -80 -85) -85]
Test Case: 642 | Input/Output: [(4 44 53 -94) -94]
Test Case: 643 | Input/Output: [(-27 42 33 19) -27]
Test Case: 644 | Input/Output: [(32 -73 -78 -93) -93]
Test Case: 645 | Input/Output: [(40 4 -36 -48) -48]
Test Case: 646 | Input/Output: [(56 35 -1 -67) -67]
Test Case: 647 | Input/Output: [(94 13 60 60) 13]
Test Case: 648 | Input/Output: [(94 -3 81 -24) -24]
Test Case: 649 | Input/Output: [(45 49 60 -69) -69]
Test Case: 650 | Input/Output: [(7 73 97 96) 7]
Test Case: 651 | Input/Output: [(14 -9 -79 -84) -84]
Test Case: 652 | Input/Output: [(76 -39 -1 -67) -67]
Test Case: 653 | Input/Output: [(27 -60 -10 -12) -60]
Test Case: 654 | Input/Output: [(-28 -61 -24 -5) -61]
Test Case: 655 | Input/Output: [(90 -8 15 -21) -21]
Test Case: 656 | Input/Output: [(3 99 60 82) 3]
Test Case: 657 | Input/Output: [(72 90 26 -5) -5]
Test Case: 658 | Input/Output: [(31 19 61 -61) -61]
Test Case: 659 | Input/Output: [(53 -4 70 -44) -44]
Test Case: 660 | Input/Output: [(27 -52 -32 -71) -71]
Test Case: 661 | Input/Output: [(24 95 82 19) 19]
Test Case: 662 | Input/Output: [(-58 12 -17 -90) -90]
Test Case: 663 | Input/Output: [(-20 92 32 -36) -36]
Test Case: 664 | Input/Output: [(13 78 -16 23) -16]
Test Case: 665 | Input/Output: [(93 64 78 46) 46]
Test Case: 666 | Input/Output: [(4 23 98 -40) -40]
Test Case: 667 | Input/Output: [(81 -53 -88 -12) -88]
Test Case: 668 | Input/Output: [(8 -19 12 -7) -19]
Test Case: 669 | Input/Output: [(98 -3 39 -76) -76]
Test Case: 670 | Input/Output: [(-85 -34 -53 -21) -85]
Test Case: 671 | Input/Output: [(-18 -18 -96 64) -96]
Test Case: 672 | Input/Output: [(-61 49 -49 -11) -61]
Test Case: 673 | Input/Output: [(43 99 -42 -16) -42]
Test Case: 674 | Input/Output: [(15 91 46 -83) -83]
Test Case: 675 | Input/Output: [(21 -23 22 -8) -23]
Test Case: 676 | Input/Output: [(-41 -76 89 -62) -76]
Test Case: 677 | Input/Output: [(-46 10 -73 2) -73]
Test Case: 678 | Input/Output: [(91 -5 -48 -51) -51]
Test Case: 679 | Input/Output: [(75 100 31 -12) -12]
Test Case: 680 | Input/Output: [(0 15 13 -21) -21]
Test Case: 681 | Input/Output: [(-74 13 -25 -46) -74]
Test Case: 682 | Input/Output: [(-42 -38 -94 21) -94]
Test Case: 683 | Input/Output: [(14 32 -73 -47) -73]
Test Case: 684 | Input/Output: [(-42 61 67 40) -42]
Test Case: 685 | Input/Output: [(-51 -36 68 42) -51]
Test Case: 686 | Input/Output: [(35 -46 -14 -2) -46]
Test Case: 687 | Input/Output: [(-71 93 -60 28) -71]
Test Case: 688 | Input/Output: [(-15 -99 95 -46) -99]
Test Case: 689 | Input/Output: [(-45 99 32 1) -45]
Test Case: 690 | Input/Output: [(-75 26 -12 71) -75]
Test Case: 691 | Input/Output: [(11 -58 54 -68) -68]
Test Case: 692 | Input/Output: [(84 96 27 60) 27]
Test Case: 693 | Input/Output: [(-73 -33 44 38) -73]
Test Case: 694 | Input/Output: [(21 7 6 26) 6]
Test Case: 695 | Input/Output: [(52 16 27 37) 16]
Test Case: 696 | Input/Output: [(100 -61 55 16) -61]
Test Case: 697 | Input/Output: [(93 90 -42 -97) -97]
Test Case: 698 | Input/Output: [(58 -88 10 -51) -88]
Test Case: 699 | Input/Output: [(-97 -48 -49 24) -97]
Test Case: 700 | Input/Output: [(-2 -32 76 90) -32]
Test Case: 701 | Input/Output: [(88 -25 83 -33) -33]
Test Case: 702 | Input/Output: [(98 54 -59 28) -59]
Test Case: 703 | Input/Output: [(-82 -75 -43 -69) -82]
Test Case: 704 | Input/Output: [(-33 -42 98 -34) -42]
Test Case: 705 | Input/Output: [(19 80 66 21) 19]
Test Case: 706 | Input/Output: [(-86 -48 4 32) -86]
Test Case: 707 | Input/Output: [(88 50 -79 97) -79]
Test Case: 708 | Input/Output: [(61 -91 79 98) -91]
Test Case: 709 | Input/Output: [(-94 -65 94 -89) -94]
Test Case: 710 | Input/Output: [(55 22 -95 -44) -95]
Test Case: 711 | Input/Output: [(-76 78 68 5) -76]
Test Case: 712 | Input/Output: [(26 12 -24 -19) -24]
Test Case: 713 | Input/Output: [(29 44 31 47) 29]
Test Case: 714 | Input/Output: [(78 3 -32 23) -32]
Test Case: 715 | Input/Output: [(-95 -63 -22 22) -95]
Test Case: 716 | Input/Output: [(-83 41 31 16) -83]
Test Case: 717 | Input/Output: [(70 4 -52 -34) -52]
Test Case: 718 | Input/Output: [(28 -98 -52 84) -98]
Test Case: 719 | Input/Output: [(-43 64 31 38) -43]
Test Case: 720 | Input/Output: [(-15 -74 28 -20) -74]
Test Case: 721 | Input/Output: [(-22 -27 73 3) -27]
Test Case: 722 | Input/Output: [(-85 -73 -60 -43) -85]
Test Case: 723 | Input/Output: [(68 77 93 45) 45]
Test Case: 724 | Input/Output: [(54 -43 -63 2) -63]
Test Case: 725 | Input/Output: [(-1 32 72 -83) -83]
Test Case: 726 | Input/Output: [(-12 90 -56 -41) -56]
Test Case: 727 | Input/Output: [(34 -8 75 67) -8]
Test Case: 728 | Input/Output: [(-10 -5 18 -57) -57]
Test Case: 729 | Input/Output: [(-3 54 -16 30) -16]
Test Case: 730 | Input/Output: [(-88 93 49 73) -88]
Test Case: 731 | Input/Output: [(98 99 -45 96) -45]
Test Case: 732 | Input/Output: [(2 1 42 54) 1]
Test Case: 733 | Input/Output: [(-94 -60 29 10) -94]
Test Case: 734 | Input/Output: [(38 -27 -100 44) -100]
Test Case: 735 | Input/Output: [(33 -24 -49 34) -49]
Test Case: 736 | Input/Output: [(29 -31 -76 63) -76]
Test Case: 737 | Input/Output: [(-39 -68 7 -59) -68]
Test Case: 738 | Input/Output: [(61 -17 6 -42) -42]
Test Case: 739 | Input/Output: [(-60 -99 -69 25) -99]
Test Case: 740 | Input/Output: [(-96 97 -82 -25) -96]
Test Case: 741 | Input/Output: [(-37 60 -9 -97) -97]
Test Case: 742 | Input/Output: [(50 30 -66 71) -66]
Test Case: 743 | Input/Output: [(-59 79 37 -10) -59]
Test Case: 744 | Input/Output: [(35 -23 -90 54) -90]
Test Case: 745 | Input/Output: [(41 72 -35 68) -35]
Test Case: 746 | Input/Output: [(83 -26 -23 34) -26]
Test Case: 747 | Input/Output: [(18 32 -39 33) -39]
Test Case: 748 | Input/Output: [(-26 -6 -60 9) -60]
Test Case: 749 | Input/Output: [(-70 56 55 -87) -87]
Test Case: 750 | Input/Output: [(8 54 -76 12) -76]
Test Case: 751 | Input/Output: [(4 -73 -93 98) -93]
Test Case: 752 | Input/Output: [(64 -93 -99 21) -99]
Test Case: 753 | Input/Output: [(77 -60 15 44) -60]
Test Case: 754 | Input/Output: [(-78 -7 6 12) -78]
Test Case: 755 | Input/Output: [(87 -39 -4 -1) -39]
Test Case: 756 | Input/Output: [(20 92 61 17) 17]
Test Case: 757 | Input/Output: [(-33 6 -6 39) -33]
Test Case: 758 | Input/Output: [(17 -82 -68 -69) -82]
Test Case: 759 | Input/Output: [(-41 72 -91 -83) -91]
Test Case: 760 | Input/Output: [(-99 49 4 -62) -99]
Test Case: 761 | Input/Output: [(-58 -14 -32 48) -58]
Test Case: 762 | Input/Output: [(-16 -11 14 -17) -17]
Test Case: 763 | Input/Output: [(-45 22 10 -95) -95]
Test Case: 764 | Input/Output: [(0 -77 -14 -46) -77]
Test Case: 765 | Input/Output: [(-17 93 -35 95) -35]
Test Case: 766 | Input/Output: [(-85 63 30 -37) -85]
Test Case: 767 | Input/Output: [(72 22 86 -88) -88]
Test Case: 768 | Input/Output: [(-84 -29 9 45) -84]
Test Case: 769 | Input/Output: [(23 -1 22 63) -1]
Test Case: 770 | Input/Output: [(-66 -47 9 27) -66]
Test Case: 771 | Input/Output: [(-29 -61 50 75) -61]
Test Case: 772 | Input/Output: [(-72 78 -80 15) -80]
Test Case: 773 | Input/Output: [(82 44 -54 83) -54]
Test Case: 774 | Input/Output: [(8 -59 -2 -64) -64]
Test Case: 775 | Input/Output: [(49 70 82 13) 13]
Test Case: 776 | Input/Output: [(-79 -41 34 -82) -82]
Test Case: 777 | Input/Output: [(-73 62 -19 29) -73]
Test Case: 778 | Input/Output: [(-49 -60 32 99) -60]
Test Case: 779 | Input/Output: [(35 43 29 -44) -44]
Test Case: 780 | Input/Output: [(-75 79 -65 5) -75]
Test Case: 781 | Input/Output: [(-88 33 -97 -6) -97]
Test Case: 782 | Input/Output: [(24 -3 -36 -48) -48]
Test Case: 783 | Input/Output: [(-14 -46 -98 84) -98]
Test Case: 784 | Input/Output: [(-62 36 44 77) -62]
Test Case: 785 | Input/Output: [(-37 -4 81 -49) -49]
Test Case: 786 | Input/Output: [(18 -31 97 -2) -31]
Test Case: 787 | Input/Output: [(81 -29 14 85) -29]
Test Case: 788 | Input/Output: [(31 45 76 45) 31]
Test Case: 789 | Input/Output: [(2 -39 37 -3) -39]
Test Case: 790 | Input/Output: [(-17 -12 -54 14) -54]
Test Case: 791 | Input/Output: [(60 31 -31 -15) -31]
Test Case: 792 | Input/Output: [(-27 72 -84 -18) -84]
Test Case: 793 | Input/Output: [(-86 -17 21 48) -86]
Test Case: 794 | Input/Output: [(-8 50 2 -70) -70]
Test Case: 795 | Input/Output: [(63 44 -13 56) -13]
Test Case: 796 | Input/Output: [(53 26 72 -88) -88]
Test Case: 797 | Input/Output: [(16 -55 70 73) -55]
Test Case: 798 | Input/Output: [(-28 33 9 -91) -91]
Test Case: 799 | Input/Output: [(19 -29 -98 -50) -98]
Test Case: 800 | Input/Output: [(38 51 -41 59) -41]
Test Case: 801 | Input/Output: [(8 -41 95 -46) -46]
Test Case: 802 | Input/Output: [(-48 -4 -59 49) -59]
Test Case: 803 | Input/Output: [(-18 -7 89 -99) -99]
Test Case: 804 | Input/Output: [(57 -100 -59 -23) -100]
Test Case: 805 | Input/Output: [(75 86 -55 -53) -55]
Test Case: 806 | Input/Output: [(31 -55 -15 -67) -67]
Test Case: 807 | Input/Output: [(-16 -40 21 45) -40]
Test Case: 808 | Input/Output: [(-95 95 46 74) -95]
Test Case: 809 | Input/Output: [(31 25 61 -67) -67]
Test Case: 810 | Input/Output: [(-88 -32 -53 -10) -88]
Test Case: 811 | Input/Output: [(29 -37 -88 -32) -88]
Test Case: 812 | Input/Output: [(-76 54 -94 -11) -94]
Test Case: 813 | Input/Output: [(-20 -33 -27 50) -33]
Test Case: 814 | Input/Output: [(-45 60 -12 59) -45]
Test Case: 815 | Input/Output: [(33 -68 5 -76) -76]
Test Case: 816 | Input/Output: [(49 -80 79 -25) -80]
Test Case: 817 | Input/Output: [(-33 23 80 -60) -60]
Test Case: 818 | Input/Output: [(81 100 -37 20) -37]
Test Case: 819 | Input/Output: [(94 1 -48 -82) -82]
Test Case: 820 | Input/Output: [(91 -44 64 -93) -93]
Test Case: 821 | Input/Output: [(-37 -84 -7 -84) -84]
Test Case: 822 | Input/Output: [(53 68 17 71) 17]
Test Case: 823 | Input/Output: [(-56 -73 89 -23) -73]
Test Case: 824 | Input/Output: [(70 -8 -51 46) -51]
Test Case: 825 | Input/Output: [(66 -16 99 -16) -16]
Test Case: 826 | Input/Output: [(80 75 -44 77) -44]
Test Case: 827 | Input/Output: [(100 37 20 1) 1]
Test Case: 828 | Input/Output: [(99 81 -62 -37) -62]
Test Case: 829 | Input/Output: [(27 55 5 74) 5]
Test Case: 830 | Input/Output: [(-29 53 19 -21) -29]
Test Case: 831 | Input/Output: [(8 71 -43 1) -43]
Test Case: 832 | Input/Output: [(36 15 56 65) 15]
Test Case: 833 | Input/Output: [(-18 -99 40 -32) -99]
Test Case: 834 | Input/Output: [(11 -57 6 -29) -57]
Test Case: 835 | Input/Output: [(91 -36 12 -62) -62]
Test Case: 836 | Input/Output: [(53 -66 -79 -32) -79]
Test Case: 837 | Input/Output: [(-51 80 55 12) -51]
Test Case: 838 | Input/Output: [(-63 -51 39 81) -63]
Test Case: 839 | Input/Output: [(50 61 -65 -94) -94]
Test Case: 840 | Input/Output: [(-55 -54 -89 -38) -89]
Test Case: 841 | Input/Output: [(23 41 97 -41) -41]
Test Case: 842 | Input/Output: [(-87 93 75 -69) -87]
Test Case: 843 | Input/Output: [(15 -82 -46 -14) -82]
Test Case: 844 | Input/Output: [(42 -87 -22 61) -87]
Test Case: 845 | Input/Output: [(-33 70 -15 -30) -33]
Test Case: 846 | Input/Output: [(85 10 52 32) 10]
Test Case: 847 | Input/Output: [(-46 93 -49 73) -49]
Test Case: 848 | Input/Output: [(-28 51 -5 -71) -71]
Test Case: 849 | Input/Output: [(-37 -94 -52 96) -94]
Test Case: 850 | Input/Output: [(-77 53 43 65) -77]
Test Case: 851 | Input/Output: [(-49 -95 -61 -2) -95]
Test Case: 852 | Input/Output: [(-74 15 4 37) -74]
Test Case: 853 | Input/Output: [(-42 43 -35 20) -42]
Test Case: 854 | Input/Output: [(70 93 -81 -85) -85]
Test Case: 855 | Input/Output: [(-61 12 -99 54) -99]
Test Case: 856 | Input/Output: [(-93 67 48 73) -93]
Test Case: 857 | Input/Output: [(31 34 -62 -32) -62]
Test Case: 858 | Input/Output: [(18 52 46 -66) -66]
Test Case: 859 | Input/Output: [(-18 -95 79 9) -95]
Test Case: 860 | Input/Output: [(-81 -79 31 15) -81]
Test Case: 861 | Input/Output: [(-88 25 73 -90) -90]
Test Case: 862 | Input/Output: [(53 -60 -43 24) -60]
Test Case: 863 | Input/Output: [(96 -30 -14 -59) -59]
Test Case: 864 | Input/Output: [(69 -92 -63 85) -92]
Test Case: 865 | Input/Output: [(55 0 19 -92) -92]
Test Case: 866 | Input/Output: [(46 -17 37 -67) -67]
Test Case: 867 | Input/Output: [(6 45 -47 -88) -88]
Test Case: 868 | Input/Output: [(-79 38 65 -16) -79]
Test Case: 869 | Input/Output: [(73 79 -91 72) -91]
Test Case: 870 | Input/Output: [(-67 -57 12 78) -67]
Test Case: 871 | Input/Output: [(78 -15 -58 -85) -85]
Test Case: 872 | Input/Output: [(98 25 42 -38) -38]
Test Case: 873 | Input/Output: [(12 -60 17 8) -60]
Test Case: 874 | Input/Output: [(-64 90 20 20) -64]
Test Case: 875 | Input/Output: [(21 -63 93 -52) -63]
Test Case: 876 | Input/Output: [(-6 -66 -67 -44) -67]
Test Case: 877 | Input/Output: [(24 -19 51 -95) -95]
Test Case: 878 | Input/Output: [(-49 66 3 46) -49]
Test Case: 879 | Input/Output: [(-81 -89 10 89) -89]
Test Case: 880 | Input/Output: [(-10 61 -29 0) -29]
Test Case: 881 | Input/Output: [(-48 48 -50 98) -50]
Test Case: 882 | Input/Output: [(-69 -59 -49 85) -69]
Test Case: 883 | Input/Output: [(-80 14 -88 -93) -93]
Test Case: 884 | Input/Output: [(-39 89 -93 -100) -100]
Test Case: 885 | Input/Output: [(7 0 -75 -6) -75]
Test Case: 886 | Input/Output: [(38 -70 30 43) -70]
Test Case: 887 | Input/Output: [(10 -79 75 4) -79]
Test Case: 888 | Input/Output: [(8 23 97 92) 8]
Test Case: 889 | Input/Output: [(11 95 -49 82) -49]
Test Case: 890 | Input/Output: [(48 -81 94 -88) -88]
Test Case: 891 | Input/Output: [(-94 17 55 20) -94]
Test Case: 892 | Input/Output: [(-2 80 -52 -44) -52]
Test Case: 893 | Input/Output: [(1 6 15 60) 1]
Test Case: 894 | Input/Output: [(-48 66 -46 72) -48]
Test Case: 895 | Input/Output: [(-56 -94 15 60) -94]
Test Case: 896 | Input/Output: [(-1 -46 77 -18) -46]
Test Case: 897 | Input/Output: [(-29 -44 -62 -10) -62]
Test Case: 898 | Input/Output: [(11 -35 -73 -20) -73]
Test Case: 899 | Input/Output: [(-92 -25 -8 -38) -92]
Test Case: 900 | Input/Output: [(-2 87 -23 14) -23]
Test Case: 901 | Input/Output: [(20 10 -15 -82) -82]
Test Case: 902 | Input/Output: [(-62 45 34 -100) -100]
Test Case: 903 | Input/Output: [(99 -83 62 -16) -83]
Test Case: 904 | Input/Output: [(7 -6 64 -77) -77]
Test Case: 905 | Input/Output: [(59 71 -62 41) -62]
Test Case: 906 | Input/Output: [(-83 46 -83 -78) -83]
Test Case: 907 | Input/Output: [(-54 92 70 37) -54]
Test Case: 908 | Input/Output: [(-97 15 -31 -9) -97]
Test Case: 909 | Input/Output: [(82 31 -88 -96) -96]
Test Case: 910 | Input/Output: [(63 -11 44 -75) -75]
Test Case: 911 | Input/Output: [(1 86 -48 18) -48]
Test Case: 912 | Input/Output: [(-97 30 12 -75) -97]
Test Case: 913 | Input/Output: [(3 28 82 77) 3]
Test Case: 914 | Input/Output: [(-55 62 86 -71) -71]
Test Case: 915 | Input/Output: [(-59 -75 80 68) -75]
Test Case: 916 | Input/Output: [(69 -91 -9 42) -91]
Test Case: 917 | Input/Output: [(53 47 -63 -25) -63]
Test Case: 918 | Input/Output: [(-33 -90 22 46) -90]
Test Case: 919 | Input/Output: [(47 88 -31 28) -31]
Test Case: 920 | Input/Output: [(99 -17 52 -68) -68]
Test Case: 921 | Input/Output: [(-22 47 23 -68) -68]
Test Case: 922 | Input/Output: [(9 17 39 24) 9]
Test Case: 923 | Input/Output: [(54 -79 -63 -52) -79]
Test Case: 924 | Input/Output: [(21 33 65 65) 21]
Test Case: 925 | Input/Output: [(-35 79 66 70) -35]
Test Case: 926 | Input/Output: [(18 27 47 96) 18]
Test Case: 927 | Input/Output: [(3 -66 44 -17) -66]
Test Case: 928 | Input/Output: [(-5 55 54 91) -5]
Test Case: 929 | Input/Output: [(-75 -88 -78 76) -88]
Test Case: 930 | Input/Output: [(-13 -21 4 -3) -21]
Test Case: 931 | Input/Output: [(61 58 63 -81) -81]
Test Case: 932 | Input/Output: [(56 -45 52 74) -45]
Test Case: 933 | Input/Output: [(0 41 100 -38) -38]
Test Case: 934 | Input/Output: [(50 -89 -4 -63) -89]
Test Case: 935 | Input/Output: [(-56 -10 -64 44) -64]
Test Case: 936 | Input/Output: [(40 29 -74 -25) -74]
Test Case: 937 | Input/Output: [(-69 -7 -53 97) -69]
Test Case: 938 | Input/Output: [(69 16 5 -68) -68]
Test Case: 939 | Input/Output: [(-90 -88 -52 9) -90]
Test Case: 940 | Input/Output: [(-61 80 -1 14) -61]
Test Case: 941 | Input/Output: [(-23 -25 61 -22) -25]
Test Case: 942 | Input/Output: [(8 47 -18 -98) -98]
Test Case: 943 | Input/Output: [(57 -26 -83 -74) -83]
Test Case: 944 | Input/Output: [(88 -6 -21 40) -21]
Test Case: 945 | Input/Output: [(-69 -23 74 -31) -69]
Test Case: 946 | Input/Output: [(3 63 -87 18) -87]
Test Case: 947 | Input/Output: [(-12 21 -5 12) -12]
Test Case: 948 | Input/Output: [(-61 41 -89 -75) -89]
Test Case: 949 | Input/Output: [(24 89 67 64) 24]
Test Case: 950 | Input/Output: [(-93 98 -100 -96) -100]
Test Case: 951 | Input/Output: [(-59 -84 -34 65) -84]
Test Case: 952 | Input/Output: [(-10 74 87 85) -10]
Test Case: 953 | Input/Output: [(61 11 -23 63) -23]
Test Case: 954 | Input/Output: [(69 57 73 74) 57]
Test Case: 955 | Input/Output: [(92 61 17 -6) -6]
Test Case: 956 | Input/Output: [(-98 -51 -29 -100) -100]
Test Case: 957 | Input/Output: [(-22 -54 30 16) -54]
Test Case: 958 | Input/Output: [(9 93 -67 -89) -89]
Test Case: 959 | Input/Output: [(-73 -67 67 93) -73]
Test Case: 960 | Input/Output: [(2 65 -93 58) -93]
Test Case: 961 | Input/Output: [(-69 94 88 63) -69]
Test Case: 962 | Input/Output: [(93 73 63 33) 33]
Test Case: 963 | Input/Output: [(-9 45 -6 -64) -64]
Test Case: 964 | Input/Output: [(-74 13 -52 -59) -74]
Test Case: 965 | Input/Output: [(-69 34 -46 23) -69]
Test Case: 966 | Input/Output: [(28 -30 -17 8) -30]
Test Case: 967 | Input/Output: [(-43 -59 -63 -40) -63]
Test Case: 968 | Input/Output: [(1 -62 61 -49) -62]
Test Case: 969 | Input/Output: [(16 18 -44 -53) -53]
Test Case: 970 | Input/Output: [(98 85 -9 -29) -29]
Test Case: 971 | Input/Output: [(-33 -19 -12 62) -33]
Test Case: 972 | Input/Output: [(-46 85 12 49) -46]
Test Case: 973 | Input/Output: [(-76 -77 -4 -50) -77]
Test Case: 974 | Input/Output: [(4 -56 32 72) -56]
Test Case: 975 | Input/Output: [(76 28 -76 88) -76]
Test Case: 976 | Input/Output: [(-12 -1 93 -99) -99]
Test Case: 977 | Input/Output: [(45 68 -5 36) -5]
Test Case: 978 | Input/Output: [(61 16 67 43) 16]
Test Case: 979 | Input/Output: [(-58 82 -67 44) -67]
Test Case: 980 | Input/Output: [(17 -61 29 40) -61]
Test Case: 981 | Input/Output: [(-5 -11 -27 -11) -27]
Test Case: 982 | Input/Output: [(-95 -10 39 -5) -95]
Test Case: 983 | Input/Output: [(-80 95 33 -37) -80]
Test Case: 984 | Input/Output: [(-96 57 -53 -51) -96]
Test Case: 985 | Input/Output: [(15 5 -70 84) -70]
Test Case: 986 | Input/Output: [(-92 -81 91 44) -92]
Test Case: 987 | Input/Output: [(-12 -59 -4 -7) -59]
Test Case: 988 | Input/Output: [(74 13 -67 88) -67]
Test Case: 989 | Input/Output: [(-9 88 -100 -6) -100]
Test Case: 990 | Input/Output: [(27 -18 -82 -65) -82]
Test Case: 991 | Input/Output: [(73 -66 43 31) -66]
Test Case: 992 | Input/Output: [(-88 86 -92 -48) -92]
Test Case: 993 | Input/Output: [(-53 -97 -9 -88) -97]
Test Case: 994 | Input/Output: [(-95 39 -16 11) -95]
Test Case: 995 | Input/Output: [(94 69 -7 -79) -79]
Test Case: 996 | Input/Output: [(-73 53 35 -36) -73]
Test Case: 997 | Input/Output: [(-92 27 63 -37) -92]
Test Case: 998 | Input/Output: [(-72 -47 79 10) -72]
Test Case: 999 | Input/Output: [(15 -44 -28 50) -44]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:uniform-addition-and-deletion 1.0}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 3000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
random-screen = false
random-seed = -23 113 -102 96 -50 47 58 50 -15 76 25 60 -35 14 18 -92
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-45 -45 -79 -45] -79] [[74 74 -70 74] -70] [[90 -3 -3 -3] -3] [[-47 66 -47 -47] -47] [[45 -51 45 45] -51] [[57 -37 57 57] -37] [[77 77 77 -7] -7] [[-84 -84 -35 -84] -84] [[-68 -68 -68 -43] -68] [[-66 43 43 43] -66] [(64 64 64 64) 64] [(-52 -52 -52 -52) -52] [(75 75 75 75) 75] [(-47 -47 -47 -47) -47] [(39 39 39 39) 39] [(84 83 79 18) 18] [(23 79 93 13) 13] [(11 77 11 71) 11] [(3 76 36 95) 3] [(66 80 93 50) 50] [(10 38 63 100) 10] [(95 39 53 87) 39] [(79 55 4 71) 4] [(35 91 58 7) 7] [(5 55 89 60) 5] [(89 31 82 93) 31] [(80 58 40 52) 40] [(94 52 35 5) 5] [(35 12 67 97) 12] [(1 13 40 24) 1] [(4 67 39 67) 4] [(22 51 54 23) 22] [(85 5 57 40) 5] [(9 8 100 100) 8] [(91 59 34 39) 34] [(30 83 89 98) 30] [(63 -48 -86 73) -86] [(-79 99 -73 -94) -94] [(-68 -97 89 59) -97] [(-90 91 23 75) -90] [(-71 1 12 -46) -71] [(45 -3 -57 58) -57] [(-35 66 -43 -56) -56] [(-84 -80 56 30) -84] [(42 -99 -7 57) -99] [(91 29 -22 58) -22] [(48 71 -82 -82) -82] [(-89 35 41 -96) -96] [(94 -11 -4 -2) -11] [(-67 89 69 -87) -87] [(21 -92 56 76) -92] [(3 43 64 88) 3] [(-93 64 -20 55) -93] [(-97 75 58 -62) -97] [(58 85 43 -86) -86] [(-77 -49 38 5) -77] [(2 -6 -86 62) -86] [(-17 -84 97 -47) -84] [(-6 60 39 55) -6] [(13 -16 85 93) -16] [(-15 -86 52 73) -86] [(-94 -60 -49 -5) -94] [(93 -3 70 15) -3] [(-86 -30 32 34) -86] [(-17 -99 41 -36) -99] [(22 -34 -37 56) -37] [(22 75 -85 19) -85] [(87 -47 -80 94) -80] [(18 21 -83 -65) -83] [(44 -39 60 38) -39] [(-48 36 -12 88) -48] [(64 -9 -7 -72) -72] [(26 11 -11 1) -11] [(-44 55 45 -71) -71] [(26 -61 -28 -62) -62] [(10 -76 70 -53) -76] [(38 57 -15 62) -15] [(47 -84 -24 66) -84] [(-71 19 26 9) -71] [(-93 -52 61 31) -93] [(-51 61 -33 -31) -51] [(96 29 45 -21) -21] [(-46 16 -90 -40) -90] [(94 55 54 -21) -21] [(29 24 -5 12) -5] [(11 -13 36 62) -13] [(-65 -40 85 -56) -65] [(93 -51 -64 -41) -64] [(-37 -74 -36 36) -74] [(-60 66 56 45) -60] [(41 82 49 58) 41] [(99 28 -71 82) -71] [(7 -2 31 19) -2] [(43 -20 96 6) -20] [(87 -76 -95 -76) -95])
uniform-addition-and-deletion-rate = 0.09
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 653
Test mean error for best: 0.65300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -79                 | Program output: -45                
Correct output: -70                 | Program output: 74                 
Correct output: -3                  | Program output: 90                 
Correct output: -47                 | Program output: -47                
Correct output: -51                 | Program output: 45                 
Correct output: -37                 | Program output: 57                 
Correct output: -7                  | Program output: 77                 
Correct output: -84                 | Program output: -84                
Correct output: -68                 | Program output: -68                
Correct output: -66                 | Program output: -66                
Correct output: 64                  | Program output: 64                 
Correct output: -52                 | Program output: -52                
Correct output: 75                  | Program output: 75                 
Correct output: -47                 | Program output: -47                
Correct output: 39                  | Program output: 39                 
Correct output: 18                  | Program output: 84                 
Correct output: 13                  | Program output: 23                 
Correct output: 11                  | Program output: 11                 
Correct output: 3                   | Program output: 3                  
Correct output: 50                  | Program output: 66                 
Correct output: 10                  | Program output: 10                 
Correct output: 39                  | Program output: 95                 
Correct output: 4                   | Program output: 79                 
Correct output: 7                   | Program output: 35                 
Correct output: 5                   | Program output: 5                  
Correct output: 31                  | Program output: 89                 
Correct output: 40                  | Program output: 80                 
Correct output: 5                   | Program output: 94                 
Correct output: 12                  | Program output: 35                 
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 4                  
Correct output: 22                  | Program output: 22                 
Correct output: 5                   | Program output: 85                 
Correct output: 8                   | Program output: 9                  
Correct output: 34                  | Program output: 91                 
Correct output: 30                  | Program output: 30                 
Correct output: -86                 | Program output: 63                 
Correct output: -94                 | Program output: -79                
Correct output: -97                 | Program output: -68                
Correct output: -90                 | Program output: -90                
Correct output: -71                 | Program output: -71                
Correct output: -57                 | Program output: 45                 
Correct output: -56                 | Program output: -35                
Correct output: -84                 | Program output: -84                
Correct output: -99                 | Program output: 42                 
Correct output: -22                 | Program output: 91                 
Correct output: -82                 | Program output: 48                 
Correct output: -96                 | Program output: -89                
Correct output: -11                 | Program output: 94                 
Correct output: -87                 | Program output: -67                
Correct output: -92                 | Program output: 21                 
Correct output: 3                   | Program output: 3                  
Correct output: -93                 | Program output: -93                
Correct output: -97                 | Program output: -97                
Correct output: -86                 | Program output: 58                 
Correct output: -77                 | Program output: -77                
Correct output: -86                 | Program output: 2                  
Correct output: -84                 | Program output: -17                
Correct output: -6                  | Program output: -6                 
Correct output: -16                 | Program output: 13                 
Correct output: -86                 | Program output: -15                
Correct output: -94                 | Program output: -94                
Correct output: -3                  | Program output: 93                 
Correct output: -86                 | Program output: -86                
Correct output: -99                 | Program output: -17                
Correct output: -37                 | Program output: 22                 
Correct output: -85                 | Program output: 22                 
Correct output: -80                 | Program output: 87                 
Correct output: -83                 | Program output: 18                 
Correct output: -39                 | Program output: 44                 
Correct output: -48                 | Program output: -48                
Correct output: -72                 | Program output: 64                 
Correct output: -11                 | Program output: 26                 
Correct output: -71                 | Program output: -44                
Correct output: -62                 | Program output: 26                 
Correct output: -76                 | Program output: 10                 
Correct output: -15                 | Program output: 38                 
Correct output: -84                 | Program output: 47                 
Correct output: -71                 | Program output: -71                
Correct output: -93                 | Program output: -93                
Correct output: -51                 | Program output: -51                
Correct output: -21                 | Program output: 96                 
Correct output: -90                 | Program output: -46                
Correct output: -21                 | Program output: 94                 
Correct output: -5                  | Program output: 29                 
Correct output: -13                 | Program output: 11                 
Correct output: -65                 | Program output: -65                
Correct output: -64                 | Program output: 93                 
Correct output: -74                 | Program output: -37                
Correct output: -60                 | Program output: -60                
Correct output: 41                  | Program output: 41                 
Correct output: -71                 | Program output: 99                 
Correct output: -2                  | Program output: 7                  
Correct output: -20                 | Program output: 43                 
Correct output: -95                 | Program output: 87                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_mod} {:close 0, :instruction tag_boolean_889} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_add} {:close 1, :instruction in1} {:close 1, :instruction exec_noop} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*while} {:close 1, :instruction tagged_804} {:close 0, :instruction integer_add} {:close 2, :instruction integer_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in2} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_min} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup_times} {:close 2, :instruction print_integer} {:close 0, :instruction integer_shove})
Lexicase best program: (integer_mod tag_boolean_889 integer_sub boolean_eq exec_yank boolean_rot boolean_invert_first_then_and boolean_or integer_add in1 exec_noop print_boolean print_integer integer_dec boolean_yank integer_gte boolean_swap exec_do*while (tagged_804) integer_add integer_swap exec_do*while (integer_pop integer_mod) exec_shove (integer_lte) boolean_swap integer_yankdup integer_add boolean_shove integer_yank exec_dup_times (integer_min exec_do*times (exec_dup (boolean_not boolean_not boolean_rot boolean_shove integer_lte exec_noop integer_mult integer_mod in4 boolean_dup_items in2 exec_dup_items boolean_pop boolean_dup boolean_and integer_sub boolean_yank) integer_mult boolean_stackdepth integer_dup_times integer_gt) boolean_stackdepth) integer_add boolean_rot exec_do*range (integer_dup_times exec_eq integer_lte) integer_min integer_sub boolean_dup_items integer_stackdepth integer_shove exec_swap (exec_dup_times (print_integer)) (integer_shove))
Lexicase best errors: [1 0 0 0 0 1 0 0 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 83
Percent parens: 0.133
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_mod} {:close 0, :instruction tag_boolean_889} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_add} {:close 1, :instruction in1} {:close 1, :instruction exec_noop} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*while} {:close 1, :instruction tagged_804} {:close 0, :instruction integer_add} {:close 2, :instruction integer_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in2} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_min} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup_times} {:close 2, :instruction print_integer} {:close 0, :instruction integer_shove})
Zero cases best program: (integer_mod tag_boolean_889 integer_sub boolean_eq exec_yank boolean_rot boolean_invert_first_then_and boolean_or integer_add in1 exec_noop print_boolean print_integer integer_dec boolean_yank integer_gte boolean_swap exec_do*while (tagged_804) integer_add integer_swap exec_do*while (integer_pop integer_mod) exec_shove (integer_lte) boolean_swap integer_yankdup integer_add boolean_shove integer_yank exec_dup_times (integer_min exec_do*times (exec_dup (boolean_not boolean_not boolean_rot boolean_shove integer_lte exec_noop integer_mult integer_mod in4 boolean_dup_items in2 exec_dup_items boolean_pop boolean_dup boolean_and integer_sub boolean_yank) integer_mult boolean_stackdepth integer_dup_times integer_gt) boolean_stackdepth) integer_add boolean_rot exec_do*range (integer_dup_times exec_eq integer_lte) integer_min integer_sub boolean_dup_items integer_stackdepth integer_shove exec_swap (exec_dup_times (print_integer)) (integer_shove))
Zero cases best errors: [1 0 0 0 0 1 0 0 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 83
Percent parens: 0.133
--- Lexicase Population Statistics ---
Count of elite individuals by case: (6 4 13 1 1 7 1 1 6 4)
Population mean number of elite cases: 0.04
Count of perfect (error zero) individuals by case: (6 4 13 1 1 7 1 1 6 4)
Population mean number of perfect (error zero) cases: 0.04
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_mod} {:close 0, :instruction tag_boolean_889} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_add} {:close 1, :instruction in1} {:close 1, :instruction exec_noop} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*while} {:close 1, :instruction tagged_804} {:close 0, :instruction integer_add} {:close 2, :instruction integer_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in2} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_min} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup_times} {:close 2, :instruction print_integer} {:close 0, :instruction integer_shove})
Best program: (integer_mod tag_boolean_889 integer_sub boolean_eq exec_yank boolean_rot boolean_invert_first_then_and boolean_or integer_add in1 exec_noop print_boolean print_integer integer_dec boolean_yank integer_gte boolean_swap exec_do*while (tagged_804) integer_add integer_swap exec_do*while (integer_pop integer_mod) exec_shove (integer_lte) boolean_swap integer_yankdup integer_add boolean_shove integer_yank exec_dup_times (integer_min exec_do*times (exec_dup (boolean_not boolean_not boolean_rot boolean_shove integer_lte exec_noop integer_mult integer_mod in4 boolean_dup_items in2 exec_dup_items boolean_pop boolean_dup boolean_and integer_sub boolean_yank) integer_mult boolean_stackdepth integer_dup_times integer_gt) boolean_stackdepth) integer_add boolean_rot exec_do*range (integer_dup_times exec_eq integer_lte) integer_min integer_sub boolean_dup_items integer_stackdepth integer_shove exec_swap (exec_dup_times (print_integer)) (integer_shove))
Errors: [1 0 0 0 0 1 0 0 1 1]
Total: 4
Mean: 0.4
Genome size: 72
Size: 83
Percent parens: 0.133
--- Population Statistics ---
Average total errors in population: 9.956
Median total errors in population: 10
Error averages by case: (0.994 0.996 0.987 0.999 0.999 0.993 0.999 0.999 0.994 0.996)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 51.047
Average program size in population (points): 70.662
Average percent parens in population: 0.285
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.265
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 526937
--- Timings ---
Current time: 1559593942171 milliseconds
Total Time:           2.8 seconds
Initialization:       0.1 seconds,  4.5%
Reproduction:         0.9 seconds, 33.8%
Fitness Testing:      1.7 seconds, 61.7%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 661
Test mean error for best: 0.66100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -79                 | Program output: -79                
Correct output: -70                 | Program output: 74                 
Correct output: -3                  | Program output: -3                 
Correct output: -47                 | Program output: -47                
Correct output: -51                 | Program output: -51                
Correct output: -37                 | Program output: -37                
Correct output: -7                  | Program output: 77                 
Correct output: -84                 | Program output: -35                
Correct output: -68                 | Program output: -68                
Correct output: -66                 | Program output: 43                 
Correct output: 64                  | Program output: 64                 
Correct output: -52                 | Program output: -52                
Correct output: 75                  | Program output: 75                 
Correct output: -47                 | Program output: -47                
Correct output: 39                  | Program output: 39                 
Correct output: 18                  | Program output: 83                 
Correct output: 13                  | Program output: 79                 
Correct output: 11                  | Program output: 77                 
Correct output: 3                   | Program output:                    
Correct output: 50                  | Program output: 80                 
Correct output: 10                  | Program output: 38                 
Correct output: 39                  | Program output: 39                 
Correct output: 4                   | Program output: 55                 
Correct output: 7                   | Program output: 91                 
Correct output: 5                   | Program output:                    
Correct output: 31                  | Program output: 31                 
Correct output: 40                  | Program output: 58                 
Correct output: 5                   | Program output: 52                 
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 40                 
Correct output: 4                   | Program output: 39                 
Correct output: 22                  | Program output: 51                 
Correct output: 5                   | Program output: 5                  
Correct output: 8                   | Program output: 8                  
Correct output: 34                  | Program output: 59                 
Correct output: 30                  | Program output: 83                 
Correct output: -86                 | Program output: -48                
Correct output: -94                 | Program output: -73                
Correct output: -97                 | Program output: 89                 
Correct output: -90                 | Program output: 23                 
Correct output: -71                 | Program output: 12                 
Correct output: -57                 | Program output: -3                 
Correct output: -56                 | Program output: -43                
Correct output: -84                 | Program output: 56                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: 29                 
Correct output: -82                 | Program output: 71                 
Correct output: -96                 | Program output: 41                 
Correct output: -11                 | Program output: -11                
Correct output: -87                 | Program output: 69                 
Correct output: -92                 | Program output: -92                
Correct output: 3                   | Program output:                    
Correct output: -93                 | Program output: -20                
Correct output: -97                 | Program output: 58                 
Correct output: -86                 | Program output: 85                 
Correct output: -77                 | Program output: 38                 
Correct output: -86                 | Program output: -6                 
Correct output: -84                 | Program output: 97                 
Correct output: -6                  | Program output: 39                 
Correct output: -16                 | Program output: -16                
Correct output: -86                 | Program output: 52                 
Correct output: -94                 | Program output: -49                
Correct output: -3                  | Program output: -3                 
Correct output: -86                 | Program output: 32                 
Correct output: -99                 | Program output: 41                 
Correct output: -37                 | Program output: -34                
Correct output: -85                 | Program output: 75                 
Correct output: -80                 | Program output: -47                
Correct output: -83                 | Program output: 21                 
Correct output: -39                 | Program output: -39                
Correct output: -48                 | Program output: -12                
Correct output: -72                 | Program output: -9                 
Correct output: -11                 | Program output: 11                 
Correct output: -71                 | Program output: 45                 
Correct output: -62                 | Program output: -61                
Correct output: -76                 | Program output: -76                
Correct output: -15                 | Program output: 57                 
Correct output: -84                 | Program output: -84                
Correct output: -71                 | Program output: 26                 
Correct output: -93                 | Program output: 61                 
Correct output: -51                 | Program output: -33                
Correct output: -21                 | Program output: 29                 
Correct output: -90                 | Program output: -90                
Correct output: -21                 | Program output: 55                 
Correct output: -5                  | Program output: 24                 
Correct output: -13                 | Program output: -13                
Correct output: -65                 | Program output: 85                 
Correct output: -64                 | Program output: -51                
Correct output: -74                 | Program output: -36                
Correct output: -60                 | Program output: 56                 
Correct output: 41                  | Program output: 82                 
Correct output: -71                 | Program output: 28                 
Correct output: -2                  | Program output: -2                 
Correct output: -20                 | Program output: -20                
Correct output: -95                 | Program output: -76                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction in3} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_min} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_gte} {:close 2, :instruction integer_lte} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_rot} {:close 0, :instruction tagged_588} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction tagged_450} {:close 0, :instruction integer_flush} {:close 1, :instruction in1} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_pop} {:close 1, :instruction boolean_or} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_dec} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction in2} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dec} {:close 2, :instruction integer_inc} {:close 1, :instruction exec_when} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup})
Lexicase best program: (integer_mult exec_k (exec_yank integer_dup) (in3 exec_dup_items integer_sub boolean_not boolean_or integer_min) integer_pop integer_gt exec_yank exec_while (exec_k_when_autoconstructing (integer_lte integer_sub integer_gte integer_lte) () integer_dup_items integer_lt boolean_rot tagged_588 boolean_flush boolean_eq boolean_xor) integer_mult integer_flush integer_yank exec_yank boolean_dup_items tagged_450 integer_flush in1 boolean_dup exec_yankdup exec_while (integer_shove integer_mult integer_yankdup boolean_and boolean_invert_first_then_and in3 print_integer exec_do*times (integer_yankdup exec_pop () exec_dup_items exec_shove (integer_lte in1 exec_do*range (boolean_invert_second_then_and integer_pop) boolean_or) exec_stackdepth) boolean_dup_times) integer_dec in1 exec_dup (in2 exec_noop integer_lte integer_dec integer_inc) exec_when () integer_max print_integer boolean_yankdup)
Lexicase best errors: [0 0 0 0 1 1 0 1 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 82
Percent parens: 0.159
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction in3} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_min} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_gte} {:close 2, :instruction integer_lte} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_rot} {:close 0, :instruction tagged_588} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction tagged_450} {:close 0, :instruction integer_flush} {:close 1, :instruction in1} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_pop} {:close 1, :instruction boolean_or} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_dec} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction in2} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dec} {:close 2, :instruction integer_inc} {:close 1, :instruction exec_when} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup})
Zero cases best program: (integer_mult exec_k (exec_yank integer_dup) (in3 exec_dup_items integer_sub boolean_not boolean_or integer_min) integer_pop integer_gt exec_yank exec_while (exec_k_when_autoconstructing (integer_lte integer_sub integer_gte integer_lte) () integer_dup_items integer_lt boolean_rot tagged_588 boolean_flush boolean_eq boolean_xor) integer_mult integer_flush integer_yank exec_yank boolean_dup_items tagged_450 integer_flush in1 boolean_dup exec_yankdup exec_while (integer_shove integer_mult integer_yankdup boolean_and boolean_invert_first_then_and in3 print_integer exec_do*times (integer_yankdup exec_pop () exec_dup_items exec_shove (integer_lte in1 exec_do*range (boolean_invert_second_then_and integer_pop) boolean_or) exec_stackdepth) boolean_dup_times) integer_dec in1 exec_dup (in2 exec_noop integer_lte integer_dec integer_inc) exec_when () integer_max print_integer boolean_yankdup)
Zero cases best errors: [0 0 0 0 1 1 0 1 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 82
Percent parens: 0.159
--- Lexicase Population Statistics ---
Count of elite individuals by case: (64 148 150 150 324 2 151 2 79 313)
Population mean number of elite cases: 1.38
Count of perfect (error zero) individuals by case: (64 148 150 150 324 2 151 2 79 313)
Population mean number of perfect (error zero) cases: 1.38
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction in3} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_min} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_gte} {:close 2, :instruction integer_lte} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_rot} {:close 0, :instruction tagged_588} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction tagged_450} {:close 0, :instruction integer_flush} {:close 1, :instruction in1} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_pop} {:close 1, :instruction boolean_or} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_dec} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction in2} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dec} {:close 2, :instruction integer_inc} {:close 1, :instruction exec_when} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup})
Best program: (integer_mult exec_k (exec_yank integer_dup) (in3 exec_dup_items integer_sub boolean_not boolean_or integer_min) integer_pop integer_gt exec_yank exec_while (exec_k_when_autoconstructing (integer_lte integer_sub integer_gte integer_lte) () integer_dup_items integer_lt boolean_rot tagged_588 boolean_flush boolean_eq boolean_xor) integer_mult integer_flush integer_yank exec_yank boolean_dup_items tagged_450 integer_flush in1 boolean_dup exec_yankdup exec_while (integer_shove integer_mult integer_yankdup boolean_and boolean_invert_first_then_and in3 print_integer exec_do*times (integer_yankdup exec_pop () exec_dup_items exec_shove (integer_lte in1 exec_do*range (boolean_invert_second_then_and integer_pop) boolean_or) exec_stackdepth) boolean_dup_times) integer_dec in1 exec_dup (in2 exec_noop integer_lte integer_dec integer_inc) exec_when () integer_max print_integer boolean_yankdup)
Errors: [0 0 0 0 1 1 0 1 1 1]
Total: 5
Mean: 0.5
Genome size: 69
Size: 82
Percent parens: 0.159
--- Population Statistics ---
Average total errors in population: 8.617
Median total errors in population: 8
Error averages by case: (0.936 0.852 0.85 0.85 0.676 0.998 0.849 0.998 0.921 0.687)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 63.847
Average program size in population (points): 79.508
Average percent parens in population: 0.205
Minimum age in population: 1.0
Maximum age in population: 1.0
Average age in population: 1.0
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.006
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.205
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 1313661
--- Timings ---
Current time: 1559593944498 milliseconds
Total Time:           5.9 seconds
Initialization:       0.1 seconds,  2.1%
Reproduction:         2.0 seconds, 34.1%
Fitness Testing:      2.5 seconds, 43.0%
Report:               1.2 seconds, 20.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 783
Test mean error for best: 0.78300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 00                 
Correct output: -44                 | Program output: -7-7               
Correct output: -99                 | Program output: -994               
Correct output: -22                 | Program output: -22-22             
Correct output: 99                  | Program output: 99                 
Correct output: -79                 | Program output: -79-45             
Correct output: -70                 | Program output: -70                
Correct output: -3                  | Program output: -3                 
Correct output: -47                 | Program output: -4766              
Correct output: -51                 | Program output: 45                 
Correct output: -37                 | Program output: 57                 
Correct output: -7                  | Program output: 77                 
Correct output: -84                 | Program output: -35-35             
Correct output: -68                 | Program output: -68-68             
Correct output: -66                 | Program output: 4343               
Correct output: 64                  | Program output: 64                 
Correct output: -52                 | Program output: -52-52             
Correct output: 75                  | Program output: 75                 
Correct output: -47                 | Program output: -47-47             
Correct output: 39                  | Program output: 39                 
Correct output: 18                  | Program output: 79                 
Correct output: 13                  | Program output: 93                 
Correct output: 11                  | Program output: 11                 
Correct output: 3                   | Program output: 3676               
Correct output: 50                  | Program output: 93                 
Correct output: 10                  | Program output: 63                 
Correct output: 39                  | Program output: 53                 
Correct output: 4                   | Program output: 4                  
Correct output: 7                   | Program output: 58                 
Correct output: 5                   | Program output: 89                 
Correct output: 31                  | Program output: 82                 
Correct output: 40                  | Program output: 40                 
Correct output: 5                   | Program output: 35                 
Correct output: 12                  | Program output: 67                 
Correct output: 1                   | Program output:                    
Correct output: 4                   | Program output: 39                 
Correct output: 22                  | Program output: 54                 
Correct output: 5                   | Program output: 57                 
Correct output: 8                   | Program output: 100                
Correct output: 34                  | Program output: 34                 
Correct output: 30                  | Program output: 89                 
Correct output: -86                 | Program output: -86                
Correct output: -94                 | Program output: -7399              
Correct output: -97                 | Program output: 8989               
Correct output: -90                 | Program output: 2391               
Correct output: -71                 | Program output: 1212               
Correct output: -57                 | Program output: -57                
Correct output: -56                 | Program output: -4366              
Correct output: -84                 | Program output: 5656               
Correct output: -99                 | Program output: -7                 
Correct output: -22                 | Program output: -22                
Correct output: -82                 | Program output: -82                
Correct output: -96                 | Program output: 4141               
Correct output: -11                 | Program output: -4                 
Correct output: -87                 | Program output: 6989               
Correct output: -92                 | Program output: 56                 
Correct output: 3                   | Program output: 6464               
Correct output: -93                 | Program output: -2064              
Correct output: -97                 | Program output: 5875               
Correct output: -86                 | Program output: 43                 
Correct output: -77                 | Program output: 3838               
Correct output: -86                 | Program output: -86                
Correct output: -84                 | Program output: 9797               
Correct output: -6                  | Program output: 3960               
Correct output: -16                 | Program output: 85                 
Correct output: -86                 | Program output: 5252               
Correct output: -94                 | Program output: -49-49             
Correct output: -3                  | Program output: 70                 
Correct output: -86                 | Program output: 3232               
Correct output: -99                 | Program output: 4141               
Correct output: -37                 | Program output: -37                
Correct output: -85                 | Program output: -85                
Correct output: -80                 | Program output: -80                
Correct output: -83                 | Program output: -83                
Correct output: -39                 | Program output: 60                 
Correct output: -48                 | Program output: -1236              
Correct output: -72                 | Program output: -7                 
Correct output: -11                 | Program output: -11                
Correct output: -71                 | Program output: 4555               
Correct output: -62                 | Program output: -28                
Correct output: -76                 | Program output: 70                 
Correct output: -15                 | Program output: -15                
Correct output: -84                 | Program output: -24                
Correct output: -71                 | Program output: 2626               
Correct output: -93                 | Program output: 6161               
Correct output: -51                 | Program output: -3361              
Correct output: -21                 | Program output: 45                 
Correct output: -90                 | Program output: -9016              
Correct output: -21                 | Program output: 54                 
Correct output: -5                  | Program output: -5                 
Correct output: -13                 | Program output: 36                 
Correct output: -65                 | Program output: 8585               
Correct output: -64                 | Program output: -64                
Correct output: -74                 | Program output: -36-36             
Correct output: -60                 | Program output: 5666               
Correct output: 41                  | Program output: 49                 
Correct output: -71                 | Program output: -71                
Correct output: -2                  | Program output: 31                 
Correct output: -20                 | Program output: 96                 
Correct output: -95                 | Program output: -95                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_shove} {:close 0, :instruction in3} {:close 2, :instruction exec_do*range} {:close 1, :instruction exec_do*count} {:close 1, :instruction exec_k} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_pop} {:close 0, :instruction tagged_252} {:close 0, :instruction print_newline} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 1, :instruction integer_max} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_stackdepth})
Lexicase best program: (integer_shove in3 print_integer exec_stackdepth exec_noop exec_rot (integer_flush boolean_dup_times integer_shove) (in3 exec_do*range ()) (exec_do*count () exec_k () (integer_sub integer_add exec_do*range (boolean_dup_items integer_dup_times boolean_swap boolean_xor) boolean_pop tagged_252 print_newline integer_inc exec_do*times (boolean_and integer_sub in2 print_integer print_integer integer_max) integer_gt integer_pop integer_pop exec_y_when_autoconstructing (boolean_stackdepth))))
Lexicase best errors: [1 0 1 1 1 1 1 0 0 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 47
Percent parens: 0.234
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_shove} {:close 0, :instruction in3} {:close 2, :instruction exec_do*range} {:close 1, :instruction exec_do*count} {:close 1, :instruction exec_k} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_pop} {:close 0, :instruction tagged_252} {:close 0, :instruction print_newline} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 1, :instruction integer_max} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_stackdepth})
Zero cases best program: (integer_shove in3 print_integer exec_stackdepth exec_noop exec_rot (integer_flush boolean_dup_times integer_shove) (in3 exec_do*range ()) (exec_do*count () exec_k () (integer_sub integer_add exec_do*range (boolean_dup_items integer_dup_times boolean_swap boolean_xor) boolean_pop tagged_252 print_newline integer_inc exec_do*times (boolean_and integer_sub in2 print_integer print_integer integer_max) integer_gt integer_pop integer_pop exec_y_when_autoconstructing (boolean_stackdepth))))
Zero cases best errors: [1 0 1 1 1 1 1 0 0 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 47
Percent parens: 0.234
--- Lexicase Population Statistics ---
Count of elite individuals by case: (58 132 127 86 131 128 99 45 131 44)
Population mean number of elite cases: 0.98
Count of perfect (error zero) individuals by case: (58 132 127 86 131 128 99 45 131 44)
Population mean number of perfect (error zero) cases: 0.98
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction in3} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_min} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_gte} {:close 2, :instruction integer_lte} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_rot} {:close 0, :instruction tagged_588} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction tagged_450} {:close 0, :instruction integer_flush} {:close 1, :instruction in1} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_pop} {:close 1, :instruction boolean_or} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction in2} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dec} {:close 2, :instruction integer_inc} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction in3} {:close 1, :instruction exec_when} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup})
Best program: (integer_mult exec_do*times (exec_k (exec_yank integer_dup) (in3 exec_dup_items integer_sub boolean_not boolean_or integer_min) integer_pop integer_gt exec_do*while (exec_while (exec_k_when_autoconstructing (integer_lte integer_sub integer_gte integer_lte) () integer_dup_items integer_lt boolean_rot tagged_588 boolean_flush boolean_eq boolean_xor) integer_mult integer_flush integer_yank exec_do*while (boolean_dup_items tagged_450 integer_flush in1) boolean_dup exec_yankdup) exec_while (integer_shove integer_mult integer_yankdup boolean_and boolean_invert_first_then_and in3 print_integer exec_do*times (integer_yankdup exec_pop () exec_dup_items exec_shove (integer_lte in1 boolean_invert_second_then_and integer_pop) boolean_or) exec_stackdepth) boolean_dup_times) integer_dec exec_dup (in2 exec_noop integer_lte integer_dec integer_inc) exec_s_when_autoconstructing () (in3) (exec_when () integer_max print_integer boolean_yankdup))
Errors: [1 0 1 1 1 1 1 0 0 0]
Total: 6
Mean: 0.6
Genome size: 70
Size: 88
Percent parens: 0.205
--- Population Statistics ---
Average total errors in population: 9.019
Median total errors in population: 10
Error averages by case: (0.942 0.868 0.873 0.914 0.869 0.872 0.901 0.955 0.869 0.956)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 61.849
Average program size in population (points): 77.063
Average percent parens in population: 0.206
Minimum age in population: 2.0
Maximum age in population: 2.0
Average age in population: 2.0
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.005
Error (vector) diversity:			 0.019
Behavioral diversity:				 0.334
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 2046028
--- Timings ---
Current time: 1559593946974 milliseconds
Total Time:           8.3 seconds
Initialization:       0.1 seconds,  1.5%
Reproduction:         3.3 seconds, 39.7%
Fitness Testing:      3.2 seconds, 38.7%
Report:               1.7 seconds, 20.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 654
Test mean error for best: 0.65400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -79                 | Program output: -45                
Correct output: -70                 | Program output: 74                 
Correct output: -3                  | Program output: 90                 
Correct output: -47                 | Program output: -47                
Correct output: -51                 | Program output: 45                 
Correct output: -37                 | Program output: 57                 
Correct output: -7                  | Program output: 77                 
Correct output: -84                 | Program output: -84                
Correct output: -68                 | Program output: -68                
Correct output: -66                 | Program output: -66                
Correct output: 64                  | Program output: 64                 
Correct output: -52                 | Program output: -52                
Correct output: 75                  | Program output: 75                 
Correct output: -47                 | Program output: -47                
Correct output: 39                  | Program output: 39                 
Correct output: 18                  | Program output: 84                 
Correct output: 13                  | Program output: 23                 
Correct output: 11                  | Program output: 11                 
Correct output: 3                   | Program output: 3                  
Correct output: 50                  | Program output: 66                 
Correct output: 10                  | Program output: 10                 
Correct output: 39                  | Program output: 95                 
Correct output: 4                   | Program output: 79                 
Correct output: 7                   | Program output: 35                 
Correct output: 5                   | Program output: 5                  
Correct output: 31                  | Program output: 89                 
Correct output: 40                  | Program output: 80                 
Correct output: 5                   | Program output: 94                 
Correct output: 12                  | Program output: 35                 
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 4                  
Correct output: 22                  | Program output: 22                 
Correct output: 5                   | Program output: 85                 
Correct output: 8                   | Program output: 9                  
Correct output: 34                  | Program output: 91                 
Correct output: 30                  | Program output: 30                 
Correct output: -86                 | Program output: 63                 
Correct output: -94                 | Program output: -79                
Correct output: -97                 | Program output: -68                
Correct output: -90                 | Program output: -90                
Correct output: -71                 | Program output: -71                
Correct output: -57                 | Program output: 45                 
Correct output: -56                 | Program output: -35                
Correct output: -84                 | Program output: -84                
Correct output: -99                 | Program output: 42                 
Correct output: -22                 | Program output: 91                 
Correct output: -82                 | Program output: 48                 
Correct output: -96                 | Program output: -89                
Correct output: -11                 | Program output: 94                 
Correct output: -87                 | Program output: -67                
Correct output: -92                 | Program output: 21                 
Correct output: 3                   | Program output: 3                  
Correct output: -93                 | Program output: -93                
Correct output: -97                 | Program output: -97                
Correct output: -86                 | Program output: 58                 
Correct output: -77                 | Program output: -77                
Correct output: -86                 | Program output: 2                  
Correct output: -84                 | Program output: -17                
Correct output: -6                  | Program output: -6                 
Correct output: -16                 | Program output: 13                 
Correct output: -86                 | Program output: -15                
Correct output: -94                 | Program output: -94                
Correct output: -3                  | Program output: 93                 
Correct output: -86                 | Program output: -86                
Correct output: -99                 | Program output: -17                
Correct output: -37                 | Program output: 22                 
Correct output: -85                 | Program output: 22                 
Correct output: -80                 | Program output: 87                 
Correct output: -83                 | Program output: 18                 
Correct output: -39                 | Program output: 44                 
Correct output: -48                 | Program output: -48                
Correct output: -72                 | Program output: 64                 
Correct output: -11                 | Program output: 26                 
Correct output: -71                 | Program output: -44                
Correct output: -62                 | Program output: 26                 
Correct output: -76                 | Program output: 10                 
Correct output: -15                 | Program output: 38                 
Correct output: -84                 | Program output: 47                 
Correct output: -71                 | Program output: -71                
Correct output: -93                 | Program output: -93                
Correct output: -51                 | Program output: -51                
Correct output: -21                 | Program output: 96                 
Correct output: -90                 | Program output: -46                
Correct output: -21                 | Program output: 94                 
Correct output: -5                  | Program output: 29                 
Correct output: -13                 | Program output: 11                 
Correct output: -65                 | Program output: -65                
Correct output: -64                 | Program output: 93                 
Correct output: -74                 | Program output: -37                
Correct output: -60                 | Program output: -60                
Correct output: 41                  | Program output: 41                 
Correct output: -71                 | Program output: 99                 
Correct output: -2                  | Program output: 7                  
Correct output: -20                 | Program output: 43                 
Correct output: -95                 | Program output: 87                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_sub} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_add} {:close 1, :instruction in1} {:close 1, :instruction exec_noop} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 1, :instruction tagged_804} {:close 2, :instruction integer_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in2} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_yankdup} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_min} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup_times} {:close 2, :instruction print_integer})
Lexicase best program: (integer_sub exec_dup_items exec_yank boolean_rot boolean_or integer_add in1 exec_noop print_boolean print_integer boolean_yank integer_dec boolean_yank integer_gte exec_do*while (tagged_804) integer_swap exec_do*while (boolean_empty exec_do*times (integer_mod) integer_lte) boolean_swap boolean_rot integer_yankdup integer_add boolean_shove exec_dup_times (integer_min integer_eq) exec_dup (boolean_not boolean_not exec_yank integer_lte exec_swap (integer_mult integer_mod boolean_dup_items in2 exec_dup_items boolean_pop integer_div boolean_dup boolean_and exec_yankdup) (boolean_yank) integer_mult boolean_empty integer_dup_times integer_gt) boolean_stackdepth integer_add boolean_rot exec_do*range (integer_dup_times integer_lte) integer_min integer_sub boolean_dup_items integer_stackdepth exec_empty integer_shove exec_swap (exec_dup_times (print_integer)) ())
Lexicase best errors: [1 0 0 1 0 0 0 1 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 78
Percent parens: 0.154
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_sub} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_add} {:close 1, :instruction in1} {:close 1, :instruction exec_noop} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 1, :instruction tagged_804} {:close 2, :instruction integer_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in2} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_yankdup} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_min} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup_times} {:close 2, :instruction print_integer})
Zero cases best program: (integer_sub exec_dup_items exec_yank boolean_rot boolean_or integer_add in1 exec_noop print_boolean print_integer boolean_yank integer_dec boolean_yank integer_gte exec_do*while (tagged_804) integer_swap exec_do*while (boolean_empty exec_do*times (integer_mod) integer_lte) boolean_swap boolean_rot integer_yankdup integer_add boolean_shove exec_dup_times (integer_min integer_eq) exec_dup (boolean_not boolean_not exec_yank integer_lte exec_swap (integer_mult integer_mod boolean_dup_items in2 exec_dup_items boolean_pop integer_div boolean_dup boolean_and exec_yankdup) (boolean_yank) integer_mult boolean_empty integer_dup_times integer_gt) boolean_stackdepth integer_add boolean_rot exec_do*range (integer_dup_times integer_lte) integer_min integer_sub boolean_dup_items integer_stackdepth exec_empty integer_shove exec_swap (exec_dup_times (print_integer)) ())
Zero cases best errors: [1 0 0 1 0 0 0 1 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 78
Percent parens: 0.154
--- Lexicase Population Statistics ---
Count of elite individuals by case: (79 166 425 79 420 489 162 78 1 165)
Population mean number of elite cases: 2.06
Count of perfect (error zero) individuals by case: (79 166 425 79 420 489 162 78 1 165)
Population mean number of perfect (error zero) cases: 2.06
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_mod} {:close 0, :instruction tag_boolean_889} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_max} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction in1} {:close 1, :instruction exec_noop} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 1, :instruction tagged_804} {:close 0, :instruction integer_add} {:close 2, :instruction integer_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_if} {:close 0, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_k} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in2} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_yank} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_boolean_516} {:close 1, :instruction in3} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_times})
Best program: (boolean_frominteger integer_mod tag_boolean_889 print_boolean integer_max integer_sub integer_add boolean_eq exec_yank boolean_rot boolean_invert_first_then_and in1 exec_noop print_boolean print_integer integer_dec integer_gte exec_do*while (tagged_804) integer_add integer_swap exec_do*while (exec_if (integer_pop print_boolean integer_gt integer_mod) (exec_k (exec_shove (exec_do*range (integer_lte) boolean_swap integer_yankdup integer_add integer_yank exec_dup_times (integer_min exec_do*times (exec_dup (boolean_not boolean_rot boolean_shove integer_lte exec_noop integer_mult integer_mod boolean_dup_items in2 exec_dup_items boolean_pop boolean_and integer_sub boolean_invert_second_then_and boolean_yank) integer_lte) integer_mult exec_do*times (boolean_stackdepth integer_gt) boolean_stackdepth) integer_add boolean_rot boolean_yank exec_do*range (integer_dup_times integer_dup_times exec_eq integer_lte) integer_min integer_shove integer_sub tag_boolean_516 in3) integer_inc boolean_dup_items integer_stackdepth exec_swap (exec_dup_times (boolean_flush) in4 integer_dup_times) ()) ())))
Errors: [1 0 0 1 0 0 0 1 1 0]
Total: 4
Mean: 0.4
Genome size: 81
Size: 98
Percent parens: 0.173
--- Population Statistics ---
Average total errors in population: 7.936
Median total errors in population: 8
Error averages by case: (0.921 0.834 0.575 0.921 0.58 0.511 0.838 0.922 0.999 0.835)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 62.621
Average program size in population (points): 76.444
Average percent parens in population: 0.185
Minimum age in population: 3.0
Maximum age in population: 3.0
Average age in population: 3.0
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.007
Error (vector) diversity:			 0.029
Behavioral diversity:				 0.284
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 2810325
--- Timings ---
Current time: 1559593949824 milliseconds
Total Time:          10.6 seconds
Initialization:       0.1 seconds,  1.2%
Reproduction:         4.5 seconds, 42.0%
Fitness Testing:      3.9 seconds, 36.4%
Report:               2.2 seconds, 20.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 557
Test mean error for best: 0.55700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -79                 | Program output: -45                
Correct output: -70                 | Program output: 74                 
Correct output: -3                  | Program output: -3                 
Correct output: -47                 | Program output: -47                
Correct output: -51                 | Program output: -51                
Correct output: -37                 | Program output: -37                
Correct output: -7                  | Program output: 77                 
Correct output: -84                 | Program output: -84                
Correct output: -68                 | Program output: -68                
Correct output: -66                 | Program output: -66                
Correct output: 64                  | Program output: 64                 
Correct output: -52                 | Program output: -52                
Correct output: 75                  | Program output: 75                 
Correct output: -47                 | Program output: -47                
Correct output: 39                  | Program output: 39                 
Correct output: 18                  | Program output: 84                 
Correct output: 13                  | Program output: 23                 
Correct output: 11                  | Program output: 11                 
Correct output: 3                   | Program output: 3                  
Correct output: 50                  | Program output: 66                 
Correct output: 10                  | Program output: 10                 
Correct output: 39                  | Program output: 95                 
Correct output: 4                   | Program output: 79                 
Correct output: 7                   | Program output: 35                 
Correct output: 5                   | Program output: 5                  
Correct output: 31                  | Program output: 89                 
Correct output: 40                  | Program output: 80                 
Correct output: 5                   | Program output: 94                 
Correct output: 12                  | Program output: 35                 
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 4                  
Correct output: 22                  | Program output: 22                 
Correct output: 5                   | Program output: 85                 
Correct output: 8                   | Program output: 9                  
Correct output: 34                  | Program output: 91                 
Correct output: 30                  | Program output: 30                 
Correct output: -86                 | Program output: -48                
Correct output: -94                 | Program output: -79                
Correct output: -97                 | Program output: -97                
Correct output: -90                 | Program output: -90                
Correct output: -71                 | Program output: -71                
Correct output: -57                 | Program output: -3                 
Correct output: -56                 | Program output: -35                
Correct output: -84                 | Program output: -80                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: 91                 
Correct output: -82                 | Program output: 48                 
Correct output: -96                 | Program output: -89                
Correct output: -11                 | Program output: -11                
Correct output: -87                 | Program output: -67                
Correct output: -92                 | Program output: -92                
Correct output: 3                   | Program output: 3                  
Correct output: -93                 | Program output: -93                
Correct output: -97                 | Program output: -97                
Correct output: -86                 | Program output: 58                 
Correct output: -77                 | Program output: -49                
Correct output: -86                 | Program output: -6                 
Correct output: -84                 | Program output: -84                
Correct output: -6                  | Program output: -6                 
Correct output: -16                 | Program output: -16                
Correct output: -86                 | Program output: -86                
Correct output: -94                 | Program output: -60                
Correct output: -3                  | Program output: -3                 
Correct output: -86                 | Program output: -30                
Correct output: -99                 | Program output: -99                
Correct output: -37                 | Program output: -34                
Correct output: -85                 | Program output: 22                 
Correct output: -80                 | Program output: -47                
Correct output: -83                 | Program output: 18                 
Correct output: -39                 | Program output: -39                
Correct output: -48                 | Program output: -48                
Correct output: -72                 | Program output: -9                 
Correct output: -11                 | Program output: 26                 
Correct output: -71                 | Program output: -44                
Correct output: -62                 | Program output: -61                
Correct output: -76                 | Program output: -76                
Correct output: -15                 | Program output: 38                 
Correct output: -84                 | Program output: -84                
Correct output: -71                 | Program output: -71                
Correct output: -93                 | Program output: -52                
Correct output: -51                 | Program output: -51                
Correct output: -21                 | Program output: 96                 
Correct output: -90                 | Program output: -46                
Correct output: -21                 | Program output: 94                 
Correct output: -5                  | Program output: 29                 
Correct output: -13                 | Program output: -13                
Correct output: -65                 | Program output: -40                
Correct output: -64                 | Program output: -51                
Correct output: -74                 | Program output: -74                
Correct output: -60                 | Program output: -60                
Correct output: 41                  | Program output: 41                 
Correct output: -71                 | Program output: 99                 
Correct output: -2                  | Program output: -2                 
Correct output: -20                 | Program output: -20                
Correct output: -95                 | Program output: -76                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction in3} {:close 0, :instruction exec_when} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_sub} {:close 1, :instruction integer_min} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_while} {:close 0, :instruction integer_sub} {:close 2, :instruction boolean_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction print_newline} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction tagged_450} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_empty} {:close 1, :instruction in1} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction in2} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dec} {:close 2, :instruction integer_inc} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction -75} {:close 0, :instruction integer_rot})
Lexicase best program: (integer_mult exec_k (exec_yank integer_dup) (in3 exec_when (exec_stackdepth integer_sub) integer_min) integer_pop integer_gt exec_yank exec_while (exec_k_when_autoconstructing (integer_lte exec_while () integer_sub boolean_shove) () exec_yankdup integer_min print_newline integer_dup_items boolean_eq integer_mult integer_flush exec_do*count (exec_yank boolean_dup_items integer_flush tagged_450 integer_flush exec_empty) in1) boolean_or exec_yankdup exec_while (integer_shove integer_mult integer_yankdup boolean_invert_first_then_and print_integer exec_do*times (integer_yankdup boolean_swap exec_pop () exec_dup_items exec_y_when_autoconstructing () in1 integer_min integer_pop) exec_stackdepth) in1 exec_dup (in2 exec_noop integer_dup_times) integer_lte integer_dec integer_inc integer_max print_integer boolean_yankdup -75 integer_rot)
Lexicase best errors: [0 0 0 1 1 1 0 0 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 78
Percent parens: 0.179
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction in3} {:close 0, :instruction exec_when} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_sub} {:close 1, :instruction integer_min} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_while} {:close 0, :instruction integer_sub} {:close 2, :instruction boolean_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction print_newline} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction tagged_450} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_empty} {:close 1, :instruction in1} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction in2} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dec} {:close 2, :instruction integer_inc} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction -75} {:close 0, :instruction integer_rot})
Zero cases best program: (integer_mult exec_k (exec_yank integer_dup) (in3 exec_when (exec_stackdepth integer_sub) integer_min) integer_pop integer_gt exec_yank exec_while (exec_k_when_autoconstructing (integer_lte exec_while () integer_sub boolean_shove) () exec_yankdup integer_min print_newline integer_dup_items boolean_eq integer_mult integer_flush exec_do*count (exec_yank boolean_dup_items integer_flush tagged_450 integer_flush exec_empty) in1) boolean_or exec_yankdup exec_while (integer_shove integer_mult integer_yankdup boolean_invert_first_then_and print_integer exec_do*times (integer_yankdup boolean_swap exec_pop () exec_dup_items exec_y_when_autoconstructing () in1 integer_min integer_pop) exec_stackdepth) in1 exec_dup (in2 exec_noop integer_dup_times) integer_lte integer_dec integer_inc integer_max print_integer boolean_yankdup -75 integer_rot)
Zero cases best errors: [0 0 0 1 1 1 0 0 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 78
Percent parens: 0.179
--- Lexicase Population Statistics ---
Count of elite individuals by case: (265 401 320 40 2 2 64 262 84 2)
Population mean number of elite cases: 1.44
Count of perfect (error zero) individuals by case: (265 401 320 40 2 2 64 262 84 2)
Population mean number of perfect (error zero) cases: 1.44
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction in3} {:close 0, :instruction exec_when} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_sub} {:close 1, :instruction integer_min} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_while} {:close 0, :instruction integer_sub} {:close 2, :instruction boolean_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction print_newline} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction tagged_450} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_empty} {:close 1, :instruction in1} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction in2} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dec} {:close 2, :instruction integer_inc} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction -75} {:close 0, :instruction integer_rot})
Best program: (integer_mult exec_k (exec_yank integer_dup) (in3 exec_when (exec_stackdepth integer_sub) integer_min) integer_pop integer_gt exec_yank exec_while (exec_k_when_autoconstructing (integer_lte exec_while () integer_sub boolean_shove) () exec_yankdup integer_min print_newline integer_dup_items boolean_eq integer_mult integer_flush exec_do*count (exec_yank boolean_dup_items integer_flush tagged_450 integer_flush exec_empty) in1) boolean_or exec_yankdup exec_while (integer_shove integer_mult integer_yankdup boolean_invert_first_then_and print_integer exec_do*times (integer_yankdup boolean_swap exec_pop () exec_dup_items exec_y_when_autoconstructing () in1 integer_min integer_pop) exec_stackdepth) in1 exec_dup (in2 exec_noop integer_dup_times) integer_lte integer_dec integer_inc integer_max print_integer boolean_yankdup -75 integer_rot)
Errors: [0 0 0 1 1 1 0 0 1 1]
Total: 5
Mean: 0.5
Genome size: 64
Size: 78
Percent parens: 0.179
--- Population Statistics ---
Average total errors in population: 8.558
Median total errors in population: 10
Error averages by case: (0.735 0.599 0.68 0.96 0.998 0.998 0.936 0.738 0.916 0.998)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 67.696
Average program size in population (points): 81.494
Average percent parens in population: 0.168
Minimum age in population: 4.0
Maximum age in population: 4.0
Average age in population: 4.0
Median age in population: 4.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.006
Error (vector) diversity:			 0.019
Behavioral diversity:				 0.358
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 3499344
--- Timings ---
Current time: 1559593952010 milliseconds
Total Time:          13.5 seconds
Initialization:       0.1 seconds,  0.9%
Reproduction:         5.7 seconds, 42.1%
Fitness Testing:      4.5 seconds, 33.4%
Report:               3.2 seconds, 23.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 558
Test mean error for best: 0.55800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output:                    
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -79                 | Program output: -45                
Correct output: -70                 | Program output: 74                 
Correct output: -3                  | Program output: -3                 
Correct output: -47                 | Program output: -47                
Correct output: -51                 | Program output: -51                
Correct output: -37                 | Program output: -37                
Correct output: -7                  | Program output: 77                 
Correct output: -84                 | Program output: -84                
Correct output: -68                 | Program output: -68                
Correct output: -66                 | Program output: -66                
Correct output: 64                  | Program output: 64                 
Correct output: -52                 | Program output: -52                
Correct output: 75                  | Program output: 75                 
Correct output: -47                 | Program output: -47                
Correct output: 39                  | Program output: 39                 
Correct output: 18                  | Program output: 84                 
Correct output: 13                  | Program output: 23                 
Correct output: 11                  | Program output: 11                 
Correct output: 3                   | Program output: 3                  
Correct output: 50                  | Program output: 66                 
Correct output: 10                  | Program output: 10                 
Correct output: 39                  | Program output: 95                 
Correct output: 4                   | Program output: 79                 
Correct output: 7                   | Program output: 35                 
Correct output: 5                   | Program output: 5                  
Correct output: 31                  | Program output: 89                 
Correct output: 40                  | Program output: 80                 
Correct output: 5                   | Program output: 94                 
Correct output: 12                  | Program output: 35                 
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 4                  
Correct output: 22                  | Program output: 22                 
Correct output: 5                   | Program output: 85                 
Correct output: 8                   | Program output: 9                  
Correct output: 34                  | Program output: 91                 
Correct output: 30                  | Program output: 30                 
Correct output: -86                 | Program output: -48                
Correct output: -94                 | Program output: -79                
Correct output: -97                 | Program output: -97                
Correct output: -90                 | Program output: -90                
Correct output: -71                 | Program output: -71                
Correct output: -57                 | Program output: -3                 
Correct output: -56                 | Program output: -35                
Correct output: -84                 | Program output: -80                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: 91                 
Correct output: -82                 | Program output: 48                 
Correct output: -96                 | Program output: -89                
Correct output: -11                 | Program output: -11                
Correct output: -87                 | Program output: -67                
Correct output: -92                 | Program output: -92                
Correct output: 3                   | Program output: 3                  
Correct output: -93                 | Program output: -93                
Correct output: -97                 | Program output: -97                
Correct output: -86                 | Program output: 58                 
Correct output: -77                 | Program output: -49                
Correct output: -86                 | Program output: -6                 
Correct output: -84                 | Program output: -84                
Correct output: -6                  | Program output: -6                 
Correct output: -16                 | Program output: -16                
Correct output: -86                 | Program output: -86                
Correct output: -94                 | Program output: -60                
Correct output: -3                  | Program output: -3                 
Correct output: -86                 | Program output: -30                
Correct output: -99                 | Program output: -99                
Correct output: -37                 | Program output: -34                
Correct output: -85                 | Program output: 22                 
Correct output: -80                 | Program output: -47                
Correct output: -83                 | Program output: 18                 
Correct output: -39                 | Program output: -39                
Correct output: -48                 | Program output: -48                
Correct output: -72                 | Program output: -9                 
Correct output: -11                 | Program output: 26                 
Correct output: -71                 | Program output: -44                
Correct output: -62                 | Program output: -61                
Correct output: -76                 | Program output: -76                
Correct output: -15                 | Program output: 38                 
Correct output: -84                 | Program output: -84                
Correct output: -71                 | Program output: -71                
Correct output: -93                 | Program output: -52                
Correct output: -51                 | Program output: -51                
Correct output: -21                 | Program output: 96                 
Correct output: -90                 | Program output: -46                
Correct output: -21                 | Program output: 94                 
Correct output: -5                  | Program output: 29                 
Correct output: -13                 | Program output: -13                
Correct output: -65                 | Program output: -40                
Correct output: -64                 | Program output: -51                
Correct output: -74                 | Program output: -74                
Correct output: -60                 | Program output: -60                
Correct output: 41                  | Program output: 41                 
Correct output: -71                 | Program output: 99                 
Correct output: -2                  | Program output: -2                 
Correct output: -20                 | Program output: -20                
Correct output: -95                 | Program output: -76                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction in3} {:close 0, :instruction exec_when} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_sub} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_while} {:close 0, :instruction integer_sub} {:close 2, :instruction boolean_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_not} {:close 0, :instruction print_newline} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_flush} {:close 0, :instruction tagged_450} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_empty} {:close 1, :instruction in1} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_min} {:close 1, :instruction integer_pop} {:close 0, :instruction -85} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction in2} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dec} {:close 2, :instruction integer_inc} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction -75} {:close 0, :instruction integer_rot})
Lexicase best program: (exec_k (exec_yank integer_dup) (in3 exec_when (exec_yankdup exec_stackdepth integer_sub) integer_min) boolean_xor integer_pop integer_gt exec_yank exec_while (exec_k_when_autoconstructing (exec_while () integer_sub boolean_shove) () exec_yankdup integer_min boolean_not print_newline integer_dup_items boolean_eq integer_mult integer_flush exec_do*count (exec_yank boolean_dup_items print_boolean integer_flush tagged_450 integer_flush exec_empty) in1) boolean_or exec_yankdup exec_while (integer_shove integer_mult integer_yankdup boolean_invert_first_then_and print_integer exec_do*times (integer_yankdup boolean_swap exec_pop () exec_dup_items exec_y_when_autoconstructing () integer_min integer_pop) -85 exec_stackdepth) in1 exec_dup (in2 exec_noop integer_dup_times) integer_lte integer_dec integer_inc integer_max print_integer boolean_yankdup -75 integer_rot)
Lexicase best errors: [1 1 0 0 0 0 0 1 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 80
Percent parens: 0.175
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction in3} {:close 0, :instruction exec_when} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_sub} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_while} {:close 0, :instruction integer_sub} {:close 2, :instruction boolean_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_not} {:close 0, :instruction print_newline} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_flush} {:close 0, :instruction tagged_450} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_empty} {:close 1, :instruction in1} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_min} {:close 1, :instruction integer_pop} {:close 0, :instruction -85} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction in2} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dec} {:close 2, :instruction integer_inc} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction -75} {:close 0, :instruction integer_rot})
Zero cases best program: (exec_k (exec_yank integer_dup) (in3 exec_when (exec_yankdup exec_stackdepth integer_sub) integer_min) boolean_xor integer_pop integer_gt exec_yank exec_while (exec_k_when_autoconstructing (exec_while () integer_sub boolean_shove) () exec_yankdup integer_min boolean_not print_newline integer_dup_items boolean_eq integer_mult integer_flush exec_do*count (exec_yank boolean_dup_items print_boolean integer_flush tagged_450 integer_flush exec_empty) in1) boolean_or exec_yankdup exec_while (integer_shove integer_mult integer_yankdup boolean_invert_first_then_and print_integer exec_do*times (integer_yankdup boolean_swap exec_pop () exec_dup_items exec_y_when_autoconstructing () integer_min integer_pop) -85 exec_stackdepth) in1 exec_dup (in2 exec_noop integer_dup_times) integer_lte integer_dec integer_inc integer_max print_integer boolean_yankdup -75 integer_rot)
Zero cases best errors: [1 1 0 0 0 0 0 1 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 80
Percent parens: 0.175
--- Lexicase Population Statistics ---
Count of elite individuals by case: (195 60 132 352 64 74 68 200 198 95)
Population mean number of elite cases: 1.44
Count of perfect (error zero) individuals by case: (195 60 132 352 64 74 68 200 198 95)
Population mean number of perfect (error zero) cases: 1.44
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction in3} {:close 0, :instruction exec_when} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_sub} {:close 1, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_while} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_min} {:close 0, :instruction print_newline} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction tagged_450} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_empty} {:close 1, :instruction in1} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_stackdepth} {:close 2, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dec} {:close 2, :instruction integer_inc} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction -75} {:close 0, :instruction integer_rot})
Best program: (integer_mult exec_yankdup exec_k (exec_yank integer_dup) (in3 exec_when (exec_stackdepth integer_sub) integer_min) integer_shove integer_pop integer_gt exec_yank exec_while (exec_k_when_autoconstructing (integer_lte exec_while () integer_sub integer_min print_newline integer_dup_items boolean_eq integer_mult integer_flush exec_do*while (boolean_dup_items integer_flush tagged_450 integer_flush integer_yankdup exec_empty) in1) (boolean_or exec_yankdup) exec_while (integer_shove integer_mult integer_yankdup print_integer exec_do*times (integer_yankdup boolean_swap exec_pop () exec_dup_items exec_y_when_autoconstructing () in1 integer_min integer_pop) exec_stackdepth) boolean_eq) in1 exec_dup (in2 integer_dup_times exec_noop integer_dup_times) integer_lte integer_dec integer_inc boolean_shove integer_max print_integer boolean_yankdup -75 integer_rot)
Errors: [1 1 0 0 0 0 0 1 1 0]
Total: 4
Mean: 0.4
Genome size: 66
Size: 80
Percent parens: 0.175
--- Population Statistics ---
Average total errors in population: 8.562
Median total errors in population: 10
Error averages by case: (0.805 0.94 0.868 0.648 0.936 0.926 0.932 0.8 0.802 0.905)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 67.275
Average program size in population (points): 83.536
Average percent parens in population: 0.188
Minimum age in population: 5.0
Maximum age in population: 5.0
Average age in population: 5.0
Median age in population: 5.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.007
Error (vector) diversity:			 0.038
Behavioral diversity:				 0.321
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 4059278
--- Timings ---
Current time: 1559593954113 milliseconds
Total Time:          15.5 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:         6.8 seconds, 44.1%
Fitness Testing:      5.0 seconds, 32.3%
Report:               3.6 seconds, 22.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 557
Test mean error for best: 0.55700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -79                 | Program output: -45                
Correct output: -70                 | Program output: 74                 
Correct output: -3                  | Program output: -3                 
Correct output: -47                 | Program output: -47                
Correct output: -51                 | Program output: -51                
Correct output: -37                 | Program output: -37                
Correct output: -7                  | Program output: 77                 
Correct output: -84                 | Program output: -84                
Correct output: -68                 | Program output: -68                
Correct output: -66                 | Program output: -66                
Correct output: 64                  | Program output: 64                 
Correct output: -52                 | Program output: -52                
Correct output: 75                  | Program output: 75                 
Correct output: -47                 | Program output: -47                
Correct output: 39                  | Program output: 39                 
Correct output: 18                  | Program output: 84                 
Correct output: 13                  | Program output: 23                 
Correct output: 11                  | Program output: 11                 
Correct output: 3                   | Program output: 3                  
Correct output: 50                  | Program output: 66                 
Correct output: 10                  | Program output: 10                 
Correct output: 39                  | Program output: 95                 
Correct output: 4                   | Program output: 79                 
Correct output: 7                   | Program output: 35                 
Correct output: 5                   | Program output: 5                  
Correct output: 31                  | Program output: 89                 
Correct output: 40                  | Program output: 80                 
Correct output: 5                   | Program output: 94                 
Correct output: 12                  | Program output: 35                 
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 4                  
Correct output: 22                  | Program output: 22                 
Correct output: 5                   | Program output: 85                 
Correct output: 8                   | Program output: 9                  
Correct output: 34                  | Program output: 91                 
Correct output: 30                  | Program output: 30                 
Correct output: -86                 | Program output: -48                
Correct output: -94                 | Program output: -79                
Correct output: -97                 | Program output: -97                
Correct output: -90                 | Program output: -90                
Correct output: -71                 | Program output: -71                
Correct output: -57                 | Program output: -3                 
Correct output: -56                 | Program output: -35                
Correct output: -84                 | Program output: -80                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: 91                 
Correct output: -82                 | Program output: 48                 
Correct output: -96                 | Program output: -89                
Correct output: -11                 | Program output: -11                
Correct output: -87                 | Program output: -67                
Correct output: -92                 | Program output: -92                
Correct output: 3                   | Program output: 3                  
Correct output: -93                 | Program output: -93                
Correct output: -97                 | Program output: -97                
Correct output: -86                 | Program output: 58                 
Correct output: -77                 | Program output: -49                
Correct output: -86                 | Program output: -6                 
Correct output: -84                 | Program output: -84                
Correct output: -6                  | Program output: -6                 
Correct output: -16                 | Program output: -16                
Correct output: -86                 | Program output: -86                
Correct output: -94                 | Program output: -60                
Correct output: -3                  | Program output: -3                 
Correct output: -86                 | Program output: -30                
Correct output: -99                 | Program output: -99                
Correct output: -37                 | Program output: -34                
Correct output: -85                 | Program output: 22                 
Correct output: -80                 | Program output: -47                
Correct output: -83                 | Program output: 18                 
Correct output: -39                 | Program output: -39                
Correct output: -48                 | Program output: -48                
Correct output: -72                 | Program output: -9                 
Correct output: -11                 | Program output: 26                 
Correct output: -71                 | Program output: -44                
Correct output: -62                 | Program output: -61                
Correct output: -76                 | Program output: -76                
Correct output: -15                 | Program output: 38                 
Correct output: -84                 | Program output: -84                
Correct output: -71                 | Program output: -71                
Correct output: -93                 | Program output: -52                
Correct output: -51                 | Program output: -51                
Correct output: -21                 | Program output: 96                 
Correct output: -90                 | Program output: -46                
Correct output: -21                 | Program output: 94                 
Correct output: -5                  | Program output: 29                 
Correct output: -13                 | Program output: -13                
Correct output: -65                 | Program output: -40                
Correct output: -64                 | Program output: -51                
Correct output: -74                 | Program output: -74                
Correct output: -60                 | Program output: -60                
Correct output: 41                  | Program output: 41                 
Correct output: -71                 | Program output: 99                 
Correct output: -2                  | Program output: -2                 
Correct output: -20                 | Program output: -20                
Correct output: -95                 | Program output: -76                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction in3} {:close 0, :instruction exec_when} {:close 1, :instruction integer_sub} {:close 1, :instruction integer_div} {:close 1, :instruction integer_min} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_while} {:close 0, :instruction integer_sub} {:close 2, :instruction boolean_shove} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction tagged_450} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_empty} {:close 1, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dec} {:close 2, :instruction integer_inc} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction -75} {:close 0, :instruction integer_rot})
Lexicase best program: (integer_stackdepth integer_mult integer_dup_times exec_k (exec_yank integer_dup) (in3 exec_when (integer_sub) integer_div) integer_min integer_pop integer_gt exec_yank exec_while (exec_k_when_autoconstructing (in4 integer_lte exec_while () integer_sub boolean_shove) () integer_lt exec_yankdup integer_min print_newline boolean_shove integer_mult integer_flush exec_do*count (boolean_dup_items integer_flush tagged_450 integer_flush exec_empty) in1) boolean_or exec_yankdup exec_yankdup integer_mult boolean_empty integer_yankdup boolean_invert_first_then_and print_integer integer_div exec_do*times (integer_yankdup boolean_swap exec_pop () exec_dup_items exec_y_when_autoconstructing () in1 integer_min integer_flush integer_pop) integer_div boolean_pop in1 exec_dup (exec_k_when_autoconstructing (in2 exec_noop integer_dup_times) (integer_lte integer_dec integer_inc)) integer_max print_integer boolean_yankdup -75 integer_rot)
Lexicase best errors: [0 0 0 0 0 1 1 1 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 85
Percent parens: 0.176
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction in3} {:close 0, :instruction exec_when} {:close 1, :instruction integer_sub} {:close 1, :instruction integer_div} {:close 1, :instruction integer_min} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_while} {:close 0, :instruction integer_sub} {:close 2, :instruction boolean_shove} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction tagged_450} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_empty} {:close 1, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dec} {:close 2, :instruction integer_inc} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction -75} {:close 0, :instruction integer_rot})
Zero cases best program: (integer_stackdepth integer_mult integer_dup_times exec_k (exec_yank integer_dup) (in3 exec_when (integer_sub) integer_div) integer_min integer_pop integer_gt exec_yank exec_while (exec_k_when_autoconstructing (in4 integer_lte exec_while () integer_sub boolean_shove) () integer_lt exec_yankdup integer_min print_newline boolean_shove integer_mult integer_flush exec_do*count (boolean_dup_items integer_flush tagged_450 integer_flush exec_empty) in1) boolean_or exec_yankdup exec_yankdup integer_mult boolean_empty integer_yankdup boolean_invert_first_then_and print_integer integer_div exec_do*times (integer_yankdup boolean_swap exec_pop () exec_dup_items exec_y_when_autoconstructing () in1 integer_min integer_flush integer_pop) integer_div boolean_pop in1 exec_dup (exec_k_when_autoconstructing (in2 exec_noop integer_dup_times) (integer_lte integer_dec integer_inc)) integer_max print_integer boolean_yankdup -75 integer_rot)
Zero cases best errors: [0 0 0 0 0 1 1 1 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 85
Percent parens: 0.176
--- Lexicase Population Statistics ---
Count of elite individuals by case: (68 102 118 69 61 15 174 173 111 183)
Population mean number of elite cases: 1.07
Count of perfect (error zero) individuals by case: (68 102 118 69 61 15 174 173 111 183)
Population mean number of perfect (error zero) cases: 1.07
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_when} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction in3} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_sub} {:close 1, :instruction integer_min} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_while} {:close 0, :instruction integer_sub} {:close 2, :instruction boolean_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_min} {:close 0, :instruction print_newline} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_exec} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction tagged_450} {:close 1, :instruction exec_empty} {:close 1, :instruction in1} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 1, :instruction integer_pop} {:close 1, :instruction integer_div} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction in2} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dec} {:close 2, :instruction integer_inc} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction -75} {:close 0, :instruction integer_rot})
Best program: (exec_when (boolean_yank) exec_yank integer_dup in3 exec_when (integer_dup_items exec_stackdepth integer_sub) integer_min integer_pop integer_gt exec_yank exec_while (exec_k_when_autoconstructing (integer_lte exec_while () integer_sub boolean_shove) () exec_yankdup boolean_flush boolean_eq integer_min print_newline integer_dup_items integer_swap boolean_eq integer_mult integer_flush exec_do*count (print_exec (exec_yank boolean_dup_items integer_flush tagged_450 exec_empty) in1) exec_yankdup) exec_while (integer_shove integer_mult integer_yankdup boolean_invert_first_then_and print_integer exec_do*times (integer_eq integer_yankdup exec_pop () exec_dup_items exec_y_when_autoconstructing () exec_shove (integer_flush in1 integer_min integer_pop) integer_div) exec_stackdepth) in1 exec_dup (in2 exec_noop integer_dup_times) integer_lte integer_dec integer_inc integer_max print_integer boolean_yankdup boolean_flush -75 integer_rot)
Errors: [0 0 0 0 0 1 1 1 0 1]
Total: 4
Mean: 0.4
Genome size: 71
Size: 86
Percent parens: 0.174
--- Population Statistics ---
Average total errors in population: 8.926
Median total errors in population: 10
Error averages by case: (0.932 0.898 0.882 0.931 0.939 0.985 0.826 0.827 0.889 0.817)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 67.665
Average program size in population (points): 84.892
Average percent parens in population: 0.197
Minimum age in population: 6.0
Maximum age in population: 6.0
Average age in population: 6.0
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.007
Error (vector) diversity:			 0.028
Behavioral diversity:				 0.313
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 4594979
--- Timings ---
Current time: 1559593956218 milliseconds
Total Time:          17.6 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         8.0 seconds, 45.6%
Fitness Testing:      5.5 seconds, 31.1%
Report:               4.0 seconds, 22.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 663
Test mean error for best: 0.66300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -79                 | Program output: -79                
Correct output: -70                 | Program output: -70                
Correct output: -3                  | Program output: -3                 
Correct output: -47                 | Program output: -47                
Correct output: -51                 | Program output: 45                 
Correct output: -37                 | Program output: 57                 
Correct output: -7                  | Program output: 77                 
Correct output: -84                 | Program output: -35                
Correct output: -68                 | Program output: -68                
Correct output: -66                 | Program output: 43                 
Correct output: 64                  | Program output: 64                 
Correct output: -52                 | Program output: -52                
Correct output: 75                  | Program output: 75                 
Correct output: -47                 | Program output: -47                
Correct output: 39                  | Program output: 39                 
Correct output: 18                  | Program output: 79                 
Correct output: 13                  | Program output: 93                 
Correct output: 11                  | Program output: 11                 
Correct output: 3                   | Program output: 36                 
Correct output: 50                  | Program output: 93                 
Correct output: 10                  | Program output: 63                 
Correct output: 39                  | Program output: 53                 
Correct output: 4                   | Program output: 4                  
Correct output: 7                   | Program output: 58                 
Correct output: 5                   | Program output: 89                 
Correct output: 31                  | Program output: 82                 
Correct output: 40                  | Program output: 40                 
Correct output: 5                   | Program output: 35                 
Correct output: 12                  | Program output: 67                 
Correct output: 1                   | Program output: 40                 
Correct output: 4                   | Program output: 39                 
Correct output: 22                  | Program output: 54                 
Correct output: 5                   | Program output: 57                 
Correct output: 8                   | Program output: 100                
Correct output: 34                  | Program output: 34                 
Correct output: 30                  | Program output: 89                 
Correct output: -86                 | Program output: -86                
Correct output: -94                 | Program output: -73                
Correct output: -97                 | Program output: 89                 
Correct output: -90                 | Program output: 23                 
Correct output: -71                 | Program output:                    
Correct output: -57                 | Program output: -57                
Correct output: -56                 | Program output: -43                
Correct output: -84                 | Program output: 56                 
Correct output: -99                 | Program output: -7                 
Correct output: -22                 | Program output: -22                
Correct output: -82                 | Program output: -82                
Correct output: -96                 | Program output: 41                 
Correct output: -11                 | Program output: -4                 
Correct output: -87                 | Program output: 69                 
Correct output: -92                 | Program output: 56                 
Correct output: 3                   | Program output: 64                 
Correct output: -93                 | Program output: -20                
Correct output: -97                 | Program output: 58                 
Correct output: -86                 | Program output: 43                 
Correct output: -77                 | Program output: 38                 
Correct output: -86                 | Program output: -86                
Correct output: -84                 | Program output: 97                 
Correct output: -6                  | Program output: 39                 
Correct output: -16                 | Program output: 85                 
Correct output: -86                 | Program output: 52                 
Correct output: -94                 | Program output: -49                
Correct output: -3                  | Program output: 70                 
Correct output: -86                 | Program output: 32                 
Correct output: -99                 | Program output: 41                 
Correct output: -37                 | Program output: -37                
Correct output: -85                 | Program output: -85                
Correct output: -80                 | Program output: -80                
Correct output: -83                 | Program output: -83                
Correct output: -39                 | Program output: 60                 
Correct output: -48                 | Program output: -12                
Correct output: -72                 | Program output: -7                 
Correct output: -11                 | Program output: -11                
Correct output: -71                 | Program output: 45                 
Correct output: -62                 | Program output: -28                
Correct output: -76                 | Program output: 70                 
Correct output: -15                 | Program output: -15                
Correct output: -84                 | Program output: -24                
Correct output: -71                 | Program output: 26                 
Correct output: -93                 | Program output: 61                 
Correct output: -51                 | Program output: -33                
Correct output: -21                 | Program output: 45                 
Correct output: -90                 | Program output: -90                
Correct output: -21                 | Program output: 54                 
Correct output: -5                  | Program output: -5                 
Correct output: -13                 | Program output: 36                 
Correct output: -65                 | Program output: 85                 
Correct output: -64                 | Program output: -64                
Correct output: -74                 | Program output: -36                
Correct output: -60                 | Program output: 56                 
Correct output: 41                  | Program output: 49                 
Correct output: -71                 | Program output: -71                
Correct output: -2                  | Program output: 31                 
Correct output: -20                 | Program output: 96                 
Correct output: -95                 | Program output: -95                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_sub} {:close 2, :instruction boolean_shove} {:close 0, :instruction integer_add} {:close 0, :instruction exec_y} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_gte} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yank} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction tagged_450} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction in1} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_pop} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_or} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction in2} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dec} {:close 2, :instruction integer_inc} {:close 0, :instruction integer_max} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_yankdup})
Lexicase best program: (integer_mult boolean_xor exec_yank in3 boolean_or integer_gt exec_stackdepth integer_min integer_min integer_gt exec_yank exec_while (exec_k_when_autoconstructing (integer_lte integer_gt integer_sub boolean_shove) () integer_add exec_y (exec_yankdup exec_do*times () integer_gte print_newline boolean_stackdepth integer_dup_items integer_lt boolean_shove boolean_invert_first_then_and integer_mult exec_yank in4 boolean_dup_items tagged_450 integer_flush boolean_invert_first_then_and in1) boolean_dup boolean_or exec_yankdup) boolean_eq exec_do*while (integer_shove integer_mult exec_yank boolean_pop boolean_and boolean_invert_first_then_and in3 print_integer exec_do*times (integer_yankdup exec_pop () exec_shove () exec_dup_items exec_y_when_autoconstructing () in1 in4) integer_min integer_lte boolean_or) exec_stackdepth integer_dup_times in1 exec_dup (in2 exec_noop integer_lte integer_dec integer_inc) integer_max integer_pop boolean_dup boolean_yankdup)
Lexicase best errors: [0 0 1 0 1 0 1 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 85
Percent parens: 0.141
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_sub} {:close 2, :instruction boolean_shove} {:close 0, :instruction integer_add} {:close 0, :instruction exec_y} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_gte} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yank} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction tagged_450} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction in1} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_pop} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_or} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction in2} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dec} {:close 2, :instruction integer_inc} {:close 0, :instruction integer_max} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_yankdup})
Zero cases best program: (integer_mult boolean_xor exec_yank in3 boolean_or integer_gt exec_stackdepth integer_min integer_min integer_gt exec_yank exec_while (exec_k_when_autoconstructing (integer_lte integer_gt integer_sub boolean_shove) () integer_add exec_y (exec_yankdup exec_do*times () integer_gte print_newline boolean_stackdepth integer_dup_items integer_lt boolean_shove boolean_invert_first_then_and integer_mult exec_yank in4 boolean_dup_items tagged_450 integer_flush boolean_invert_first_then_and in1) boolean_dup boolean_or exec_yankdup) boolean_eq exec_do*while (integer_shove integer_mult exec_yank boolean_pop boolean_and boolean_invert_first_then_and in3 print_integer exec_do*times (integer_yankdup exec_pop () exec_shove () exec_dup_items exec_y_when_autoconstructing () in1 in4) integer_min integer_lte boolean_or) exec_stackdepth integer_dup_times in1 exec_dup (in2 exec_noop integer_lte integer_dec integer_inc) integer_max integer_pop boolean_dup boolean_yankdup)
Zero cases best errors: [0 0 1 0 1 0 1 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 85
Percent parens: 0.141
--- Lexicase Population Statistics ---
Count of elite individuals by case: (249 130 123 6 99 130 21 301 125 5)
Population mean number of elite cases: 1.19
Count of perfect (error zero) individuals by case: (249 130 123 6 99 130 21 301 125 5)
Population mean number of perfect (error zero) cases: 1.19
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_min} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_sub} {:close 2, :instruction boolean_shove} {:close 0, :instruction exec_y} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yank} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction tagged_450} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction in1} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_while} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in3} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_pop} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_or} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dec} {:close 2, :instruction integer_inc} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_yankdup})
Best program: (integer_mult integer_div exec_yank in3 boolean_or exec_stackdepth integer_min integer_gt exec_yank exec_while (exec_k_when_autoconstructing (integer_lte integer_sub boolean_shove) () exec_y (exec_yankdup integer_min integer_gte boolean_stackdepth integer_dup_items integer_lt boolean_shove boolean_invert_first_then_and print_boolean integer_mult exec_yank in4 boolean_dup_items tagged_450 exec_empty) boolean_invert_first_then_and in1) exec_do*count (integer_dup_items boolean_dup boolean_or exec_yankdup) boolean_eq exec_while (integer_shove boolean_or) integer_mult exec_yank boolean_pop boolean_and boolean_invert_first_then_and in3 print_boolean print_integer exec_do*times (integer_yankdup exec_pop () exec_shove () exec_dup_items exec_y_when_autoconstructing () in1 in4) integer_min integer_lte boolean_or in1 exec_dup (in2 integer_lte integer_dec integer_inc) integer_max print_integer integer_yankdup boolean_dup boolean_yankdup)
Errors: [0 0 1 0 1 0 1 0 1 0]
Total: 4
Mean: 0.4
Genome size: 71
Size: 83
Percent parens: 0.145
--- Population Statistics ---
Average total errors in population: 8.811
Median total errors in population: 10
Error averages by case: (0.751 0.87 0.877 0.994 0.901 0.87 0.979 0.699 0.875 0.995)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 68.853
Average program size in population (points): 86.563
Average percent parens in population: 0.199
Minimum age in population: 7.0
Maximum age in population: 7.0
Average age in population: 7.0
Median age in population: 7.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.007
Error (vector) diversity:			 0.036
Behavioral diversity:				 0.303
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 5122419
--- Timings ---
Current time: 1559593958449 milliseconds
Total Time:          19.7 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         9.2 seconds, 46.7%
Fitness Testing:      6.0 seconds, 30.4%
Report:               4.4 seconds, 22.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 652
Test mean error for best: 0.65200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -79                 | Program output: -79                
Correct output: -70                 | Program output: -70                
Correct output: -3                  | Program output: -3                 
Correct output: -47                 | Program output: -47                
Correct output: -51                 | Program output: 45                 
Correct output: -37                 | Program output: 57                 
Correct output: -7                  | Program output: 77                 
Correct output: -84                 | Program output: -35                
Correct output: -68                 | Program output: -68                
Correct output: -66                 | Program output: 43                 
Correct output: 64                  | Program output: 64                 
Correct output: -52                 | Program output: -52                
Correct output: 75                  | Program output: 75                 
Correct output: -47                 | Program output: -47                
Correct output: 39                  | Program output: 39                 
Correct output: 18                  | Program output: 79                 
Correct output: 13                  | Program output: 93                 
Correct output: 11                  | Program output: 11                 
Correct output: 3                   | Program output: 36                 
Correct output: 50                  | Program output: 93                 
Correct output: 10                  | Program output: 63                 
Correct output: 39                  | Program output: 53                 
Correct output: 4                   | Program output: 4                  
Correct output: 7                   | Program output: 58                 
Correct output: 5                   | Program output: 89                 
Correct output: 31                  | Program output: 82                 
Correct output: 40                  | Program output: 40                 
Correct output: 5                   | Program output: 35                 
Correct output: 12                  | Program output: 67                 
Correct output: 1                   | Program output: 40                 
Correct output: 4                   | Program output: 39                 
Correct output: 22                  | Program output: 54                 
Correct output: 5                   | Program output: 57                 
Correct output: 8                   | Program output: 100                
Correct output: 34                  | Program output: 34                 
Correct output: 30                  | Program output: 89                 
Correct output: -86                 | Program output: -86                
Correct output: -94                 | Program output: -73                
Correct output: -97                 | Program output: 89                 
Correct output: -90                 | Program output: 23                 
Correct output: -71                 | Program output: 12                 
Correct output: -57                 | Program output: -57                
Correct output: -56                 | Program output: -43                
Correct output: -84                 | Program output: 56                 
Correct output: -99                 | Program output: -7                 
Correct output: -22                 | Program output: -22                
Correct output: -82                 | Program output: -82                
Correct output: -96                 | Program output: 41                 
Correct output: -11                 | Program output: -4                 
Correct output: -87                 | Program output: 69                 
Correct output: -92                 | Program output: 56                 
Correct output: 3                   | Program output: 64                 
Correct output: -93                 | Program output: -20                
Correct output: -97                 | Program output: 58                 
Correct output: -86                 | Program output: 43                 
Correct output: -77                 | Program output: 38                 
Correct output: -86                 | Program output: -86                
Correct output: -84                 | Program output: 97                 
Correct output: -6                  | Program output: 39                 
Correct output: -16                 | Program output: 85                 
Correct output: -86                 | Program output: 52                 
Correct output: -94                 | Program output: -49                
Correct output: -3                  | Program output: 70                 
Correct output: -86                 | Program output: 32                 
Correct output: -99                 | Program output: 41                 
Correct output: -37                 | Program output: -37                
Correct output: -85                 | Program output: -85                
Correct output: -80                 | Program output: -80                
Correct output: -83                 | Program output: -83                
Correct output: -39                 | Program output: 60                 
Correct output: -48                 | Program output: -12                
Correct output: -72                 | Program output: -7                 
Correct output: -11                 | Program output: -11                
Correct output: -71                 | Program output: 45                 
Correct output: -62                 | Program output: -28                
Correct output: -76                 | Program output: 70                 
Correct output: -15                 | Program output: -15                
Correct output: -84                 | Program output: -24                
Correct output: -71                 | Program output: 26                 
Correct output: -93                 | Program output: 61                 
Correct output: -51                 | Program output: -33                
Correct output: -21                 | Program output: 45                 
Correct output: -90                 | Program output: -90                
Correct output: -21                 | Program output: 54                 
Correct output: -5                  | Program output: -5                 
Correct output: -13                 | Program output: 36                 
Correct output: -65                 | Program output: 85                 
Correct output: -64                 | Program output: -64                
Correct output: -74                 | Program output: -36                
Correct output: -60                 | Program output: 56                 
Correct output: 41                  | Program output: 49                 
Correct output: -71                 | Program output: -71                
Correct output: -2                  | Program output: 31                 
Correct output: -20                 | Program output: 96                 
Correct output: -95                 | Program output: -95                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_sub} {:close 2, :instruction boolean_shove} {:close 0, :instruction integer_add} {:close 0, :instruction exec_y} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_do*times} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction tagged_450} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction in1} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_pop} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction integer_lte} {:close 1, :instruction -49} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction in2} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 2, :instruction integer_inc} {:close 0, :instruction tag_integer_719} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_dup})
Lexicase best program: (integer_mult exec_yank in3 boolean_or integer_gt exec_stackdepth integer_min integer_swap integer_min integer_gt exec_yank exec_while (exec_k_when_autoconstructing (integer_lte integer_sub boolean_shove) () integer_add exec_y (exec_yankdup exec_do*times () print_newline boolean_stackdepth integer_dup_items integer_lt boolean_shove boolean_invert_first_then_and integer_mult in4 integer_dup_items boolean_dup_items tagged_450 boolean_empty) integer_flush boolean_invert_first_then_and in1) boolean_or exec_yankdup boolean_eq exec_do*while (integer_shove integer_mult boolean_pop boolean_and boolean_invert_first_then_and exec_dup_items in3 print_integer exec_do*times (integer_yankdup exec_pop () exec_shove () exec_dup_items exec_y_when_autoconstructing () in1 in4) integer_min integer_lte -49) exec_stackdepth integer_dup_times in1 exec_dup (in2 exec_noop integer_dec integer_inc) tag_integer_719 integer_pop boolean_dup)
Lexicase best errors: [0 0 1 0 0 0 0 1 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 81
Percent parens: 0.148
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_sub} {:close 2, :instruction boolean_shove} {:close 0, :instruction integer_add} {:close 0, :instruction exec_y} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_do*times} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction tagged_450} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction in1} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_pop} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction integer_lte} {:close 1, :instruction -49} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction in2} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 2, :instruction integer_inc} {:close 0, :instruction tag_integer_719} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_dup})
Zero cases best program: (integer_mult exec_yank in3 boolean_or integer_gt exec_stackdepth integer_min integer_swap integer_min integer_gt exec_yank exec_while (exec_k_when_autoconstructing (integer_lte integer_sub boolean_shove) () integer_add exec_y (exec_yankdup exec_do*times () print_newline boolean_stackdepth integer_dup_items integer_lt boolean_shove boolean_invert_first_then_and integer_mult in4 integer_dup_items boolean_dup_items tagged_450 boolean_empty) integer_flush boolean_invert_first_then_and in1) boolean_or exec_yankdup boolean_eq exec_do*while (integer_shove integer_mult boolean_pop boolean_and boolean_invert_first_then_and exec_dup_items in3 print_integer exec_do*times (integer_yankdup exec_pop () exec_shove () exec_dup_items exec_y_when_autoconstructing () in1 in4) integer_min integer_lte -49) exec_stackdepth integer_dup_times in1 exec_dup (in2 exec_noop integer_dec integer_inc) tag_integer_719 integer_pop boolean_dup)
Zero cases best errors: [0 0 1 0 0 0 0 1 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 81
Percent parens: 0.148
--- Lexicase Population Statistics ---
Count of elite individuals by case: (229 96 73 225 88 96 86 76 87 83)
Population mean number of elite cases: 1.14
Count of perfect (error zero) individuals by case: (229 96 73 225 88 96 86 76 87 83)
Population mean number of perfect (error zero) cases: 1.14
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_sub} {:close 2, :instruction boolean_shove} {:close 0, :instruction integer_add} {:close 0, :instruction exec_y} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yank} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_and} {:close 0, :instruction tagged_450} {:close 0, :instruction integer_flush} {:close 1, :instruction in1} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_pop} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction in2} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_yankdup})
Best program: (boolean_stackdepth integer_mult boolean_xor exec_yank in3 boolean_or integer_gt exec_stackdepth integer_min integer_min integer_gt exec_yank exec_while (exec_k_when_autoconstructing (integer_lte integer_gt integer_sub boolean_shove) () integer_add exec_y (exec_yankdup integer_gte print_newline boolean_stackdepth integer_dup_items integer_lt boolean_shove boolean_invert_first_then_and integer_mult exec_yank in4 boolean_dup_items boolean_and) tagged_450 integer_flush in1) boolean_dup boolean_or exec_yankdup boolean_eq exec_do*while (integer_shove exec_yank boolean_and boolean_invert_first_then_and in3 print_integer integer_yankdup exec_pop () exec_shove () exec_dup_items exec_y_when_autoconstructing () in1 in4) integer_min integer_lte exec_stackdepth integer_dup_times in1 exec_dup (in2 exec_noop integer_lte integer_dec integer_max boolean_dup boolean_yankdup))
Errors: [0 0 1 0 0 0 0 1 0 1]
Total: 3
Mean: 0.3
Genome size: 67
Size: 77
Percent parens: 0.130
--- Population Statistics ---
Average total errors in population: 8.861
Median total errors in population: 10
Error averages by case: (0.771 0.904 0.927 0.775 0.912 0.904 0.914 0.924 0.913 0.917)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 67.893
Average program size in population (points): 82.518
Average percent parens in population: 0.177
Minimum age in population: 8.0
Maximum age in population: 8.0
Average age in population: 8.0
Median age in population: 8.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.008
Error (vector) diversity:			 0.023
Behavioral diversity:				 0.352
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 5638601
--- Timings ---
Current time: 1559593960583 milliseconds
Total Time:          21.9 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:        10.4 seconds, 47.3%
Fitness Testing:      6.5 seconds, 29.6%
Report:               4.9 seconds, 22.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 652
Test mean error for best: 0.65200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -79                 | Program output: -79                
Correct output: -70                 | Program output: -70                
Correct output: -3                  | Program output: -3                 
Correct output: -47                 | Program output: -47                
Correct output: -51                 | Program output: 45                 
Correct output: -37                 | Program output: 57                 
Correct output: -7                  | Program output: 77                 
Correct output: -84                 | Program output: -35                
Correct output: -68                 | Program output: -68                
Correct output: -66                 | Program output: 43                 
Correct output: 64                  | Program output: 64                 
Correct output: -52                 | Program output: -52                
Correct output: 75                  | Program output: 75                 
Correct output: -47                 | Program output: -47                
Correct output: 39                  | Program output: 39                 
Correct output: 18                  | Program output: 79                 
Correct output: 13                  | Program output: 93                 
Correct output: 11                  | Program output: 11                 
Correct output: 3                   | Program output: 36                 
Correct output: 50                  | Program output: 93                 
Correct output: 10                  | Program output: 63                 
Correct output: 39                  | Program output: 53                 
Correct output: 4                   | Program output: 4                  
Correct output: 7                   | Program output: 58                 
Correct output: 5                   | Program output: 89                 
Correct output: 31                  | Program output: 82                 
Correct output: 40                  | Program output: 40                 
Correct output: 5                   | Program output: 35                 
Correct output: 12                  | Program output: 67                 
Correct output: 1                   | Program output: 40                 
Correct output: 4                   | Program output: 39                 
Correct output: 22                  | Program output: 54                 
Correct output: 5                   | Program output: 57                 
Correct output: 8                   | Program output: 100                
Correct output: 34                  | Program output: 34                 
Correct output: 30                  | Program output: 89                 
Correct output: -86                 | Program output: -86                
Correct output: -94                 | Program output: -73                
Correct output: -97                 | Program output: 89                 
Correct output: -90                 | Program output:                    
Correct output: -71                 | Program output: 12                 
Correct output: -57                 | Program output: -57                
Correct output: -56                 | Program output: -43                
Correct output: -84                 | Program output: 56                 
Correct output: -99                 | Program output: -7                 
Correct output: -22                 | Program output: -22                
Correct output: -82                 | Program output: -82                
Correct output: -96                 | Program output: 41                 
Correct output: -11                 | Program output: -4                 
Correct output: -87                 | Program output: 69                 
Correct output: -92                 | Program output: 56                 
Correct output: 3                   | Program output: 64                 
Correct output: -93                 | Program output: -20                
Correct output: -97                 | Program output: 58                 
Correct output: -86                 | Program output: 43                 
Correct output: -77                 | Program output: 38                 
Correct output: -86                 | Program output: -86                
Correct output: -84                 | Program output: 97                 
Correct output: -6                  | Program output: 39                 
Correct output: -16                 | Program output: 85                 
Correct output: -86                 | Program output: 52                 
Correct output: -94                 | Program output: -49                
Correct output: -3                  | Program output: 70                 
Correct output: -86                 | Program output: 32                 
Correct output: -99                 | Program output: 41                 
Correct output: -37                 | Program output: -37                
Correct output: -85                 | Program output: -85                
Correct output: -80                 | Program output: -80                
Correct output: -83                 | Program output: -83                
Correct output: -39                 | Program output: 60                 
Correct output: -48                 | Program output: -12                
Correct output: -72                 | Program output: -7                 
Correct output: -11                 | Program output: -11                
Correct output: -71                 | Program output: 45                 
Correct output: -62                 | Program output: -28                
Correct output: -76                 | Program output: 70                 
Correct output: -15                 | Program output: -15                
Correct output: -84                 | Program output: -24                
Correct output: -71                 | Program output: 26                 
Correct output: -93                 | Program output: 61                 
Correct output: -51                 | Program output: -33                
Correct output: -21                 | Program output: 45                 
Correct output: -90                 | Program output: -90                
Correct output: -21                 | Program output: 54                 
Correct output: -5                  | Program output: -5                 
Correct output: -13                 | Program output: 36                 
Correct output: -65                 | Program output: 85                 
Correct output: -64                 | Program output: -64                
Correct output: -74                 | Program output: -36                
Correct output: -60                 | Program output: 56                 
Correct output: 41                  | Program output: 49                 
Correct output: -71                 | Program output: -71                
Correct output: -2                  | Program output: 31                 
Correct output: -20                 | Program output: 96                 
Correct output: -95                 | Program output: -95                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 2, :instruction boolean_shove} {:close 0, :instruction exec_y} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yank} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction tagged_450} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction in1} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in3} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_pop} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_or} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dec} {:close 2, :instruction integer_inc} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_yankdup})
Lexicase best program: (integer_mult integer_div exec_yank in3 boolean_or exec_stackdepth boolean_yank integer_min boolean_shove integer_gt exec_yank boolean_flush exec_while (exec_k_when_autoconstructing (boolean_shove) () exec_y (exec_yankdup integer_add integer_min integer_gte boolean_stackdepth integer_lt boolean_shove boolean_dup_items boolean_invert_first_then_and print_boolean integer_mult exec_yank in4 boolean_dup_items tagged_450 exec_empty) boolean_invert_first_then_and in1) exec_do*count (integer_dup_items boolean_dup boolean_or exec_yankdup) boolean_eq integer_fromboolean integer_shove boolean_or integer_mult exec_yank boolean_pop boolean_invert_first_then_and in3 print_boolean print_integer exec_do*times (integer_yankdup exec_pop () exec_shove () exec_dup_items in3 exec_y_when_autoconstructing () in1 in4) integer_min integer_lte boolean_or in1 exec_dup (exec_flush integer_dec integer_inc) print_integer boolean_dup boolean_yankdup)
Lexicase best errors: [1 0 1 0 1 1 1 0 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 81
Percent parens: 0.136
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 2, :instruction boolean_shove} {:close 0, :instruction exec_y} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yank} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction tagged_450} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction in1} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in3} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_pop} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_or} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dec} {:close 2, :instruction integer_inc} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_yankdup})
Zero cases best program: (integer_mult integer_div exec_yank in3 boolean_or exec_stackdepth boolean_yank integer_min boolean_shove integer_gt exec_yank boolean_flush exec_while (exec_k_when_autoconstructing (boolean_shove) () exec_y (exec_yankdup integer_add integer_min integer_gte boolean_stackdepth integer_lt boolean_shove boolean_dup_items boolean_invert_first_then_and print_boolean integer_mult exec_yank in4 boolean_dup_items tagged_450 exec_empty) boolean_invert_first_then_and in1) exec_do*count (integer_dup_items boolean_dup boolean_or exec_yankdup) boolean_eq integer_fromboolean integer_shove boolean_or integer_mult exec_yank boolean_pop boolean_invert_first_then_and in3 print_boolean print_integer exec_do*times (integer_yankdup exec_pop () exec_shove () exec_dup_items in3 exec_y_when_autoconstructing () in1 in4) integer_min integer_lte boolean_or in1 exec_dup (exec_flush integer_dec integer_inc) print_integer boolean_dup boolean_yankdup)
Zero cases best errors: [1 0 1 0 1 1 1 0 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 81
Percent parens: 0.136
--- Lexicase Population Statistics ---
Count of elite individuals by case: (95 172 1 178 72 1 18 196 292 98)
Population mean number of elite cases: 1.12
Count of perfect (error zero) individuals by case: (95 172 1 178 72 1 18 196 292 98)
Population mean number of perfect (error zero) cases: 1.12
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 2, :instruction boolean_shove} {:close 0, :instruction integer_add} {:close 0, :instruction exec_y} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gte} {:close 0, :instruction print_newline} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yank} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction tagged_450} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in1} {:close 0, :instruction integer_dec} {:close 1, :instruction in4} {:close 1, :instruction boolean_or} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction in2} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_eq} {:close 2, :instruction integer_inc} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_yankdup})
Best program: (integer_mult boolean_xor exec_yank in3 boolean_or integer_min integer_min integer_gt exec_yank exec_while (exec_k_when_autoconstructing (integer_lte boolean_shove) () integer_add exec_y (exec_yankdup exec_do*times () exec_stackdepth) integer_empty integer_gte print_newline exec_stackdepth) boolean_stackdepth integer_dup_items integer_lt boolean_shove boolean_invert_first_then_and integer_mult exec_yank in4 boolean_dup_items tagged_450 boolean_invert_first_then_and boolean_dup boolean_swap boolean_or exec_yankdup boolean_eq exec_do*while (integer_mult exec_yank boolean_pop integer_dec boolean_and boolean_invert_first_then_and in3 print_integer exec_do*times (integer_yankdup exec_shove () exec_dup_items in1 integer_dec in4) boolean_or) exec_stackdepth integer_dup_times in1 exec_dup (in2 exec_noop integer_lte integer_dec boolean_eq integer_inc) integer_max boolean_dup boolean_yankdup)
Errors: [1 0 1 0 1 1 1 0 0 1]
Total: 6
Mean: 0.6
Genome size: 68
Size: 78
Percent parens: 0.128
--- Population Statistics ---
Average total errors in population: 8.877
Median total errors in population: 10
Error averages by case: (0.905 0.828 0.999 0.822 0.928 0.999 0.982 0.804 0.708 0.902)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 70.527
Average program size in population (points): 85.259
Average percent parens in population: 0.172
Minimum age in population: 9.0
Maximum age in population: 9.0
Average age in population: 9.0
Median age in population: 9.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.005
Error (vector) diversity:			 0.023
Behavioral diversity:				 0.37
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 6375371
--- Timings ---
Current time: 1559593963010 milliseconds
Total Time:          24.3 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        11.5 seconds, 47.5%
Fitness Testing:      7.2 seconds, 29.6%
Report:               5.4 seconds, 22.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 656
Test mean error for best: 0.65600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -79                 | Program output: -45                
Correct output: -70                 | Program output: 74                 
Correct output: -3                  | Program output: 90                 
Correct output: -47                 | Program output: -47                
Correct output: -51                 | Program output: 45                 
Correct output: -37                 | Program output: 57                 
Correct output: -7                  | Program output: 77                 
Correct output: -84                 | Program output: -84                
Correct output: -68                 | Program output: -68                
Correct output: -66                 | Program output: -66                
Correct output: 64                  | Program output: 64                 
Correct output: -52                 | Program output: -52                
Correct output: 75                  | Program output: 75                 
Correct output: -47                 | Program output: -47                
Correct output: 39                  | Program output: 39                 
Correct output: 18                  | Program output: 84                 
Correct output: 13                  | Program output: 23                 
Correct output: 11                  | Program output: 11                 
Correct output: 3                   | Program output: 3                  
Correct output: 50                  | Program output: 66                 
Correct output: 10                  | Program output: 10                 
Correct output: 39                  | Program output: 95                 
Correct output: 4                   | Program output: 79                 
Correct output: 7                   | Program output: 35                 
Correct output: 5                   | Program output: 5                  
Correct output: 31                  | Program output: 89                 
Correct output: 40                  | Program output: 80                 
Correct output: 5                   | Program output: 94                 
Correct output: 12                  | Program output: 35                 
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 4                  
Correct output: 22                  | Program output: 22                 
Correct output: 5                   | Program output: 85                 
Correct output: 8                   | Program output: 9                  
Correct output: 34                  | Program output: 91                 
Correct output: 30                  | Program output: 30                 
Correct output: -86                 | Program output: 63                 
Correct output: -94                 | Program output: -79                
Correct output: -97                 | Program output: -68                
Correct output: -90                 | Program output: -90                
Correct output: -71                 | Program output: -71                
Correct output: -57                 | Program output: 45                 
Correct output: -56                 | Program output: -35                
Correct output: -84                 | Program output: -84                
Correct output: -99                 | Program output: 42                 
Correct output: -22                 | Program output: 91                 
Correct output: -82                 | Program output: 48                 
Correct output: -96                 | Program output: -89                
Correct output: -11                 | Program output: 94                 
Correct output: -87                 | Program output: -67                
Correct output: -92                 | Program output: 2121               
Correct output: 3                   | Program output: 3                  
Correct output: -93                 | Program output: -93                
Correct output: -97                 | Program output: -97                
Correct output: -86                 | Program output: 58                 
Correct output: -77                 | Program output: -77                
Correct output: -86                 | Program output: 2                  
Correct output: -84                 | Program output: -17                
Correct output: -6                  | Program output: -6                 
Correct output: -16                 | Program output: 1313               
Correct output: -86                 | Program output: -15                
Correct output: -94                 | Program output: -94                
Correct output: -3                  | Program output: 93                 
Correct output: -86                 | Program output: -86                
Correct output: -99                 | Program output: -17                
Correct output: -37                 | Program output: 22                 
Correct output: -85                 | Program output: 22                 
Correct output: -80                 | Program output: 87                 
Correct output: -83                 | Program output: 18                 
Correct output: -39                 | Program output: 44                 
Correct output: -48                 | Program output: -48                
Correct output: -72                 | Program output: 64                 
Correct output: -11                 | Program output: 26                 
Correct output: -71                 | Program output: -44                
Correct output: -62                 | Program output: 26                 
Correct output: -76                 | Program output: 10                 
Correct output: -15                 | Program output: 38                 
Correct output: -84                 | Program output: 47                 
Correct output: -71                 | Program output: -71                
Correct output: -93                 | Program output: -93                
Correct output: -51                 | Program output: -51                
Correct output: -21                 | Program output: 96                 
Correct output: -90                 | Program output: -46                
Correct output: -21                 | Program output: 94                 
Correct output: -5                  | Program output: 29                 
Correct output: -13                 | Program output: 11                 
Correct output: -65                 | Program output: -65                
Correct output: -64                 | Program output: 93                 
Correct output: -74                 | Program output: -37                
Correct output: -60                 | Program output: -60                
Correct output: 41                  | Program output: 41                 
Correct output: -71                 | Program output: 99                 
Correct output: -2                  | Program output: 7                  
Correct output: -20                 | Program output: 43                 
Correct output: -95                 | Program output: 87                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_swap} {:close 1, :instruction integer_dup} {:close 0, :instruction in3} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_div} {:close 1, :instruction exec_while} {:close 0, :instruction integer_sub} {:close 2, :instruction boolean_shove} {:close 0, :instruction print_newline} {:close 0, :instruction integer_mult} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_flush} {:close 0, :instruction tagged_450} {:close 1, :instruction exec_empty} {:close 1, :instruction exec_dup_items} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup_items} {:close 2, :instruction boolean_yank} {:close 0, :instruction in1} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_empty} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction in2} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_dec} {:close 2, :instruction integer_inc} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction -75})
Lexicase best program: (integer_mult integer_mult exec_k (boolean_yank print_boolean exec_do*range (boolean_swap) integer_dup) (in3 exec_when (boolean_invert_second_then_and exec_do*count () exec_stackdepth boolean_yankdup) boolean_eq integer_gt exec_while (exec_k_when_autoconstructing (boolean_frominteger integer_div exec_while () integer_sub boolean_shove) () print_newline integer_mult print_exec (boolean_dup_items boolean_empty) exec_do*count (integer_flush tagged_450 exec_empty) exec_dup_items) exec_yankdup) exec_k_when_autoconstructing (integer_mult boolean_invert_first_then_and boolean_flush exec_swap (exec_do*times (integer_yankdup integer_swap boolean_swap exec_pop () boolean_rot exec_dup_items boolean_yank)) (in1 integer_pop) exec_stackdepth) (boolean_dup_times exec_dup_times (exec_empty in1 exec_dup (in2 exec_noop integer_dup_times) integer_lte integer_yankdup) integer_dec integer_inc) integer_max print_integer boolean_yankdup -75)
Lexicase best errors: [0 1 0 0 1 0 1 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 86
Percent parens: 0.233
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_swap} {:close 1, :instruction integer_dup} {:close 0, :instruction in3} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_div} {:close 1, :instruction exec_while} {:close 0, :instruction integer_sub} {:close 2, :instruction boolean_shove} {:close 0, :instruction print_newline} {:close 0, :instruction integer_mult} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_flush} {:close 0, :instruction tagged_450} {:close 1, :instruction exec_empty} {:close 1, :instruction exec_dup_items} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup_items} {:close 2, :instruction boolean_yank} {:close 0, :instruction in1} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_empty} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction in2} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_dec} {:close 2, :instruction integer_inc} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction -75})
Zero cases best program: (integer_mult integer_mult exec_k (boolean_yank print_boolean exec_do*range (boolean_swap) integer_dup) (in3 exec_when (boolean_invert_second_then_and exec_do*count () exec_stackdepth boolean_yankdup) boolean_eq integer_gt exec_while (exec_k_when_autoconstructing (boolean_frominteger integer_div exec_while () integer_sub boolean_shove) () print_newline integer_mult print_exec (boolean_dup_items boolean_empty) exec_do*count (integer_flush tagged_450 exec_empty) exec_dup_items) exec_yankdup) exec_k_when_autoconstructing (integer_mult boolean_invert_first_then_and boolean_flush exec_swap (exec_do*times (integer_yankdup integer_swap boolean_swap exec_pop () boolean_rot exec_dup_items boolean_yank)) (in1 integer_pop) exec_stackdepth) (boolean_dup_times exec_dup_times (exec_empty in1 exec_dup (in2 exec_noop integer_dup_times) integer_lte integer_yankdup) integer_dec integer_inc) integer_max print_integer boolean_yankdup -75)
Zero cases best errors: [0 1 0 0 1 0 1 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 86
Percent parens: 0.233
--- Lexicase Population Statistics ---
Count of elite individuals by case: (120 1 290 83 187 82 4 179 73 118)
Population mean number of elite cases: 1.14
Count of perfect (error zero) individuals by case: (120 1 290 83 187 82 4 179 73 118)
Population mean number of perfect (error zero) cases: 1.14
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction in3} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_when} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_min} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_while} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_yank} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction integer_min} {:close 0, :instruction print_newline} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_yank} {:close 1, :instruction print_integer} {:close 0, :instruction 70} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_empty} {:close 1, :instruction in1} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_do*count} {:close 1, :instruction exec_pop} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_do*count} {:close 2, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 2, :instruction integer_inc} {:close 0, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_yankdup})
Best program: (integer_mult exec_yankdup exec_k (exec_yank integer_dup) (in3 boolean_invert_second_then_and) exec_when (exec_stackdepth integer_min) integer_stackdepth integer_pop integer_gt exec_yank exec_k_when_autoconstructing (exec_while () integer_sub exec_yank) (boolean_yankdup) exec_while (integer_min print_newline integer_dup_items boolean_stackdepth exec_yank) print_integer 70 integer_mult integer_flush boolean_dup_items exec_do*range (boolean_swap integer_flush integer_yankdup boolean_dup_times exec_empty) in1 exec_yankdup integer_dup_times integer_shove integer_yankdup print_integer integer_yankdup integer_yankdup boolean_swap exec_do*count () exec_pop () exec_y_when_autoconstructing () in1 integer_min integer_dup_items boolean_shove integer_pop exec_do*count () boolean_eq in1 exec_dup (exec_noop integer_dec integer_inc) integer_dup print_integer boolean_invert_second_then_and exec_do*times (boolean_yankdup))
Errors: [0 1 0 0 1 0 1 1 1 0]
Total: 5
Mean: 0.5
Genome size: 65
Size: 80
Percent parens: 0.188
--- Population Statistics ---
Average total errors in population: 8.863
Median total errors in population: 10
Error averages by case: (0.88 0.999 0.71 0.917 0.813 0.918 0.996 0.821 0.927 0.882)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 70.842
Average program size in population (points): 85.89
Average percent parens in population: 0.174
Minimum age in population: 10.0
Maximum age in population: 10.0
Average age in population: 10.0
Median age in population: 10.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.006
Error (vector) diversity:			 0.031
Behavioral diversity:				 0.353
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 7023845
--- Timings ---
Current time: 1559593965317 milliseconds
Total Time:          26.6 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        12.7 seconds, 47.6%
Fitness Testing:      7.8 seconds, 29.3%
Report:               6.0 seconds, 22.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 568
Test mean error for best: 0.56800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -79                 | Program output: -79                
Correct output: -70                 | Program output: -70                
Correct output: -3                  | Program output: -3                 
Correct output: -47                 | Program output: -47                
Correct output: -51                 | Program output: 45                 
Correct output: -37                 | Program output: -37                
Correct output: -7                  | Program output: 77                 
Correct output: -84                 | Program output: -35                
Correct output: -68                 | Program output: -68                
Correct output: -66                 | Program output: 43                 
Correct output: 64                  | Program output: 64                 
Correct output: -52                 | Program output: -52                
Correct output: 75                  | Program output: 75                 
Correct output: -47                 | Program output: -47                
Correct output: 39                  | Program output: 39                 
Correct output: 18                  | Program output: 83                 
Correct output: 13                  | Program output: 79                 
Correct output: 11                  | Program output: 11                 
Correct output: 3                   | Program output: 36                 
Correct output: 50                  | Program output: 80                 
Correct output: 10                  | Program output: 38                 
Correct output: 39                  | Program output: 39                 
Correct output: 4                   | Program output: 4                  
Correct output: 7                   | Program output: 91                 
Correct output: 5                   | Program output: 55                 
Correct output: 31                  | Program output: 31                 
Correct output: 40                  | Program output: 40                 
Correct output: 5                   | Program output: 35                 
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 40                 
Correct output: 4                   | Program output: 39                 
Correct output: 22                  | Program output: 51                 
Correct output: 5                   | Program output:                    
Correct output: 8                   | Program output: 8                  
Correct output: 34                  | Program output: 34                 
Correct output: 30                  | Program output: 83                 
Correct output: -86                 | Program output: -86                
Correct output: -94                 | Program output: -73                
Correct output: -97                 | Program output: -97                
Correct output: -90                 | Program output: 23                 
Correct output: -71                 | Program output: 12                 
Correct output: -57                 | Program output: -57                
Correct output: -56                 | Program output: -43                
Correct output: -84                 | Program output: -80                
Correct output: -99                 | Program output: -7                 
Correct output: -22                 | Program output: -22                
Correct output: -82                 | Program output: -82                
Correct output: -96                 | Program output: 41                 
Correct output: -11                 | Program output: -4                 
Correct output: -87                 | Program output: 89                 
Correct output: -92                 | Program output: -92                
Correct output: 3                   | Program output: 43                 
Correct output: -93                 | Program output: -20                
Correct output: -97                 | Program output: 75                 
Correct output: -86                 | Program output: 43                 
Correct output: -77                 | Program output: 38                 
Correct output: -86                 | Program output: -86                
Correct output: -84                 | Program output: -84                
Correct output: -6                  | Program output: 39                 
Correct output: -16                 | Program output: -16                
Correct output: -86                 | Program output: -86                
Correct output: -94                 | Program output: -49                
Correct output: -3                  | Program output: -3                 
Correct output: -86                 | Program output: 32                 
Correct output: -99                 | Program output: 41                 
Correct output: -37                 | Program output: -37                
Correct output: -85                 | Program output: -85                
Correct output: -80                 | Program output: -80                
Correct output: -83                 | Program output: -83                
Correct output: -39                 | Program output: -39                
Correct output: -48                 | Program output: -12                
Correct output: -72                 | Program output: -7                 
Correct output: -11                 | Program output: -11                
Correct output: -71                 | Program output: 45                 
Correct output: -62                 | Program output: -28                
Correct output: -76                 | Program output: -76                
Correct output: -15                 | Program output: -15                
Correct output: -84                 | Program output: -24                
Correct output: -71                 | Program output: 26                 
Correct output: -93                 | Program output: -52                
Correct output: -51                 | Program output: -33                
Correct output: -21                 | Program output: 45                 
Correct output: -90                 | Program output: -90                
Correct output: -21                 | Program output: 55                 
Correct output: -5                  | Program output: -5                 
Correct output: -13                 | Program output: 36                 
Correct output: -65                 | Program output: -40                
Correct output: -64                 | Program output: -64                
Correct output: -74                 | Program output: -36                
Correct output: -60                 | Program output: 66                 
Correct output: 41                  | Program output: 82                 
Correct output: -71                 | Program output: -71                
Correct output: -2                  | Program output: 31                 
Correct output: -20                 | Program output: -20                
Correct output: -95                 | Program output: -95                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_min} {:close 0, :instruction integer_sub} {:close 2, :instruction boolean_shove} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_y} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_max} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_yank} {:close 0, :instruction in4} {:close 0, :instruction tagged_450} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction in1} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_or} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in3} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_or} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in1} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_or} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dec} {:close 2, :instruction integer_inc} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_yankdup})
Lexicase best program: (boolean_invert_second_then_and integer_mult integer_div exec_yank in3 integer_yankdup exec_stackdepth integer_gt integer_sub exec_yank exec_while (exec_k_when_autoconstructing (integer_lte integer_gt integer_min integer_sub boolean_shove) () integer_empty exec_y (exec_yankdup integer_min integer_max in2 print_integer exec_flush integer_dup_items print_boolean exec_yank in4 tagged_450 exec_empty) boolean_invert_first_then_and exec_s_when_autoconstructing () (in1) (integer_dup_items exec_yankdup) boolean_eq integer_shove boolean_or) integer_dec integer_mult integer_sub boolean_yankdup exec_yank boolean_pop boolean_invert_first_then_and in3 print_boolean print_integer exec_do*times (integer_lt integer_yankdup boolean_or) exec_shove () integer_add integer_dup_items exec_dup_items in1 in4 integer_min integer_lte boolean_or in1 exec_dup (integer_lte integer_dec integer_inc) print_integer exec_noop boolean_dup boolean_yankdup)
Lexicase best errors: [1 0 1 0 0 0 1 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 82
Percent parens: 0.134
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_min} {:close 0, :instruction integer_sub} {:close 2, :instruction boolean_shove} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_y} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_max} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_yank} {:close 0, :instruction in4} {:close 0, :instruction tagged_450} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction in1} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_or} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in3} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_or} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in1} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_or} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dec} {:close 2, :instruction integer_inc} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_yankdup})
Zero cases best program: (boolean_invert_second_then_and integer_mult integer_div exec_yank in3 integer_yankdup exec_stackdepth integer_gt integer_sub exec_yank exec_while (exec_k_when_autoconstructing (integer_lte integer_gt integer_min integer_sub boolean_shove) () integer_empty exec_y (exec_yankdup integer_min integer_max in2 print_integer exec_flush integer_dup_items print_boolean exec_yank in4 tagged_450 exec_empty) boolean_invert_first_then_and exec_s_when_autoconstructing () (in1) (integer_dup_items exec_yankdup) boolean_eq integer_shove boolean_or) integer_dec integer_mult integer_sub boolean_yankdup exec_yank boolean_pop boolean_invert_first_then_and in3 print_boolean print_integer exec_do*times (integer_lt integer_yankdup boolean_or) exec_shove () integer_add integer_dup_items exec_dup_items in1 in4 integer_min integer_lte boolean_or in1 exec_dup (integer_lte integer_dec integer_inc) print_integer exec_noop boolean_dup boolean_yankdup)
Zero cases best errors: [1 0 1 0 0 0 1 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 82
Percent parens: 0.134
--- Lexicase Population Statistics ---
Count of elite individuals by case: (146 95 14 61 126 148 58 134 134 130)
Population mean number of elite cases: 1.05
Count of perfect (error zero) individuals by case: (146 95 14 61 126 148 58 134 134 130)
Population mean number of perfect (error zero) cases: 1.05
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 2, :instruction boolean_shove} {:close 0, :instruction exec_y} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction in4} {:close 0, :instruction tagged_450} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction in1} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in3} {:close 1, :instruction exec_do*while} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_add} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in1} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_or} {:close 1, :instruction exec_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_dec} {:close 2, :instruction integer_inc} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_swap} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_s})
Best program: (boolean_invert_second_then_and boolean_or integer_mult exec_y_when_autoconstructing (integer_div exec_yank in3 boolean_or integer_dec exec_stackdepth integer_gt integer_sub) exec_yank exec_while (exec_k_when_autoconstructing (integer_min integer_sub in2 boolean_shove) () exec_y (exec_yankdup integer_min in2 integer_gte print_integer boolean_stackdepth exec_flush integer_dup_items print_boolean exec_yank boolean_swap in4 tagged_450 boolean_invert_first_then_and in1) exec_do*count (integer_dup_items integer_fromboolean) exec_yankdup) boolean_eq integer_shove integer_mult integer_sub exec_yank boolean_pop boolean_invert_first_then_and in3 exec_do*while () print_boolean print_integer exec_do*times (exec_pop () exec_flush boolean_or) integer_add exec_shove () boolean_xor integer_add integer_dup_items exec_dup (exec_dup_items in1 in4) integer_min exec_do*while (integer_lte boolean_or) exec_shove () in1 exec_dup (integer_lte integer_yank) integer_dec integer_inc print_integer boolean_swap integer_yankdup boolean_dup boolean_yankdup exec_s () () ())
Errors: [1 0 1 0 0 0 1 0 0 1]
Total: 4
Mean: 0.4
Genome size: 80
Size: 98
Percent parens: 0.184
--- Population Statistics ---
Average total errors in population: 8.954
Median total errors in population: 10
Error averages by case: (0.854 0.905 0.986 0.939 0.874 0.852 0.942 0.866 0.866 0.87)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 71.526
Average program size in population (points): 86.857
Average percent parens in population: 0.175
Minimum age in population: 11.0
Maximum age in population: 11.0
Average age in population: 11.0
Median age in population: 11.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.007
Error (vector) diversity:			 0.032
Behavioral diversity:				 0.392
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 7629034
--- Timings ---
Current time: 1559593967456 milliseconds
Total Time:          28.9 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        13.8 seconds, 47.8%
Fitness Testing:      8.4 seconds, 29.0%
Report:               6.6 seconds, 22.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 662
Test mean error for best: 0.66200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -79                 | Program output: -45                
Correct output: -70                 | Program output: 74                 
Correct output: -3                  | Program output: 90                 
Correct output: -47                 | Program output: -47                
Correct output: -51                 | Program output: -51                
Correct output: -37                 | Program output: -37                
Correct output: -7                  | Program output: 77                 
Correct output: -84                 | Program output: -84                
Correct output: -68                 | Program output: -68                
Correct output: -66                 | Program output: 43                 
Correct output: 64                  | Program output: 64                 
Correct output: -52                 | Program output: -52                
Correct output: 75                  | Program output: 75                 
Correct output: -47                 | Program output: -47                
Correct output: 39                  | Program output: 39                 
Correct output: 18                  | Program output: 83                 
Correct output: 13                  | Program output: 79                 
Correct output: 11                  | Program output: 11                 
Correct output: 3                   | Program output: 76                 
Correct output: 50                  | Program output: 80                 
Correct output: 10                  | Program output: 38                 
Correct output: 39                  | Program output: 39                 
Correct output: 4                   | Program output: 79                 
Correct output: 7                   | Program output: 91                 
Correct output: 5                   | Program output: 55                 
Correct output: 31                  | Program output: 31                 
Correct output: 40                  | Program output: 58                 
Correct output: 5                   | Program output: 52                 
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 13                 
Correct output: 4                   | Program output: 67                 
Correct output: 22                  | Program output: 51                 
Correct output: 5                   | Program output: 5                  
Correct output: 8                   | Program output: 8                  
Correct output: 34                  | Program output: 59                 
Correct output: 30                  | Program output: 83                 
Correct output: -86                 | Program output: 63                 
Correct output: -94                 | Program output: -79                
Correct output: -97                 | Program output: -97                
Correct output: -90                 | Program output: 91                 
Correct output: -71                 | Program output: -71                
Correct output: -57                 | Program output: 45                 
Correct output: -56                 | Program output: -35                
Correct output: -84                 | Program output: -80                
Correct output: -99                 | Program output: 42                 
Correct output: -22                 | Program output: 91                 
Correct output: -82                 | Program output: 48                 
Correct output: -96                 | Program output: 35                 
Correct output: -11                 | Program output: 94                 
Correct output: -87                 | Program output: 89                 
Correct output: -92                 | Program output: -92                
Correct output: 3                   | Program output: 43                 
Correct output: -93                 | Program output: -93                
Correct output: -97                 | Program output: 75                 
Correct output: -86                 | Program output: 85                 
Correct output: -77                 | Program output: -49                
Correct output: -86                 | Program output: 2                  
Correct output: -84                 | Program output: -84                
Correct output: -6                  | Program output: 60                 
Correct output: -16                 | Program output: -16                
Correct output: -86                 | Program output: -86                
Correct output: -94                 | Program output: -94                
Correct output: -3                  | Program output: -3                 
Correct output: -86                 | Program output: -30                
Correct output: -99                 | Program output: -99                
Correct output: -37                 | Program output: 22                 
Correct output: -85                 | Program output: 22                 
Correct output: -80                 | Program output: 87                 
Correct output: -83                 | Program output: 18                 
Correct output: -39                 | Program output: -39                
Correct output: -48                 | Program output: -48                
Correct output: -72                 | Program output: 64                 
Correct output: -11                 | Program output: 26                 
Correct output: -71                 | Program output: 55                 
Correct output: -62                 | Program output: 26                 
Correct output: -76                 | Program output: -76                
Correct output: -15                 | Program output: 38                 
Correct output: -84                 | Program output: 47                 
Correct output: -71                 | Program output: 19                 
Correct output: -93                 | Program output: -52                
Correct output: -51                 | Program output: -51                
Correct output: -21                 | Program output: 29                 
Correct output: -90                 | Program output: -46                
Correct output: -21                 | Program output: 55                 
Correct output: -5                  | Program output: 29                 
Correct output: -13                 | Program output: -13                
Correct output: -65                 | Program output: -40                
Correct output: -64                 | Program output: 93                 
Correct output: -74                 | Program output: -37                
Correct output: -60                 | Program output: 66                 
Correct output: 41                  | Program output: 82                 
Correct output: -71                 | Program output: 99                 
Correct output: -2                  | Program output: -2                 
Correct output: -20                 | Program output: -20                
Correct output: -95                 | Program output: 87                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_169} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_min} {:close 0, :instruction integer_sub} {:close 2, :instruction boolean_shove} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction integer_max} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_yank} {:close 0, :instruction in4} {:close 0, :instruction tagged_450} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction in2} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_sub} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in1} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_or} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dec} {:close 2, :instruction integer_inc} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_yankdup})
Lexicase best program: (boolean_invert_second_then_and integer_mult integer_div integer_yankdup integer_gt integer_sub exec_yank exec_while (exec_k_when_autoconstructing (tagged_169 integer_gt integer_min integer_sub boolean_shove) () integer_empty exec_y (boolean_empty exec_yankdup boolean_and) integer_min integer_max integer_pop in2 print_integer boolean_stackdepth exec_flush integer_dup_items exec_do*times (boolean_invert_first_then_and print_boolean exec_yank in4 tagged_450 exec_empty) boolean_invert_first_then_and exec_do*count (exec_yankdup) boolean_eq integer_shove boolean_or) integer_sub boolean_yankdup in2 exec_yank boolean_pop boolean_invert_first_then_and integer_sub print_boolean exec_do*times (integer_yankdup exec_shove () integer_add integer_dup_items exec_dup_items in1 in4) integer_min integer_lte boolean_or in1 exec_noop integer_stackdepth integer_lte integer_div integer_dec integer_inc print_integer exec_noop boolean_dup boolean_yankdup)
Lexicase best errors: [1 0 1 0 1 0 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 79
Percent parens: 0.114
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_169} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_min} {:close 0, :instruction integer_sub} {:close 2, :instruction boolean_shove} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction integer_max} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_yank} {:close 0, :instruction in4} {:close 0, :instruction tagged_450} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction in2} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_sub} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in1} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_or} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dec} {:close 2, :instruction integer_inc} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_yankdup})
Zero cases best program: (boolean_invert_second_then_and integer_mult integer_div integer_yankdup integer_gt integer_sub exec_yank exec_while (exec_k_when_autoconstructing (tagged_169 integer_gt integer_min integer_sub boolean_shove) () integer_empty exec_y (boolean_empty exec_yankdup boolean_and) integer_min integer_max integer_pop in2 print_integer boolean_stackdepth exec_flush integer_dup_items exec_do*times (boolean_invert_first_then_and print_boolean exec_yank in4 tagged_450 exec_empty) boolean_invert_first_then_and exec_do*count (exec_yankdup) boolean_eq integer_shove boolean_or) integer_sub boolean_yankdup in2 exec_yank boolean_pop boolean_invert_first_then_and integer_sub print_boolean exec_do*times (integer_yankdup exec_shove () integer_add integer_dup_items exec_dup_items in1 in4) integer_min integer_lte boolean_or in1 exec_noop integer_stackdepth integer_lte integer_div integer_dec integer_inc print_integer exec_noop boolean_dup boolean_yankdup)
Zero cases best errors: [1 0 1 0 1 0 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 79
Percent parens: 0.114
--- Lexicase Population Statistics ---
Count of elite individuals by case: (291 226 273 212 312 428 23 18 410 55)
Population mean number of elite cases: 2.25
Count of perfect (error zero) individuals by case: (291 226 273 212 312 428 23 18 410 55)
Population mean number of perfect (error zero) cases: 2.25
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 2, :instruction integer_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_min} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_y} {:close 0, :instruction integer_min} {:close 0, :instruction integer_max} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_yank} {:close 0, :instruction in4} {:close 0, :instruction tagged_450} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 1, :instruction in1} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_or} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_add} {:close 2, :instruction exec_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in1} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_or} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dec} {:close 2, :instruction integer_inc} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_yankdup})
Best program: (boolean_invert_second_then_and integer_stackdepth integer_mult integer_div exec_yank in3 integer_yankdup exec_stackdepth integer_gt integer_sub exec_yank exec_while (exec_k_when_autoconstructing (integer_lte integer_gt integer_min integer_sub integer_empty exec_y (integer_min integer_max in2 print_integer integer_dup_times exec_flush integer_dup_items print_boolean exec_yank in4 tagged_450 exec_empty) exec_dup (boolean_invert_first_then_and exec_s_when_autoconstructing () (boolean_empty in1) (integer_dup_items exec_yankdup) boolean_eq integer_shove boolean_or) boolean_invert_first_then_and integer_mult integer_sub boolean_yankdup) (exec_yank boolean_pop boolean_invert_first_then_and print_boolean print_integer exec_do*times (integer_lt integer_yankdup boolean_or) exec_shove () integer_add exec_stackdepth)) integer_dup_items exec_dup_items in1 in4 integer_min integer_dup integer_lte boolean_or in1 exec_dup (integer_lte integer_dec integer_inc) print_integer exec_noop boolean_dup boolean_yankdup)
Errors: [0 0 0 0 0 0 1 1 0 1]
Total: 3
Mean: 0.3
Genome size: 74
Size: 86
Percent parens: 0.140
--- Population Statistics ---
Average total errors in population: 7.752
Median total errors in population: 8
Error averages by case: (0.709 0.774 0.727 0.788 0.688 0.572 0.977 0.982 0.59 0.945)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 73.085
Average program size in population (points): 87.644
Average percent parens in population: 0.164
Minimum age in population: 12.0
Maximum age in population: 12.0
Average age in population: 12.0
Median age in population: 12.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.008
Error (vector) diversity:			 0.047
Behavioral diversity:				 0.322
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 8230668
--- Timings ---
Current time: 1559593969572 milliseconds
Total Time:          31.0 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        15.0 seconds, 48.3%
Fitness Testing:      9.0 seconds, 28.9%
Report:               7.0 seconds, 22.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 544
Test mean error for best: 0.54400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -79                 | Program output: -79                
Correct output: -70                 | Program output: -70                
Correct output: -3                  | Program output: -3                 
Correct output: -47                 | Program output: -47                
Correct output: -51                 | Program output: -51                
Correct output: -37                 | Program output: -37                
Correct output: -7                  | Program output: 77                 
Correct output: -84                 | Program output: -35                
Correct output: -68                 | Program output: -68                
Correct output: -66                 | Program output: 43                 
Correct output: 64                  | Program output: 64                 
Correct output: -52                 | Program output: -52                
Correct output: 75                  | Program output: 75                 
Correct output: -47                 | Program output: -47                
Correct output: 39                  | Program output: 39                 
Correct output: 18                  | Program output: 83                 
Correct output: 13                  | Program output: 79                 
Correct output: 11                  | Program output: 11                 
Correct output: 3                   | Program output: 76                 
Correct output: 50                  | Program output: 80                 
Correct output: 10                  | Program output: 38                 
Correct output: 39                  | Program output: 39                 
Correct output: 4                   | Program output: 4                  
Correct output: 7                   | Program output: 91                 
Correct output: 5                   | Program output: 55                 
Correct output: 31                  | Program output: 31                 
Correct output: 40                  | Program output: 58                 
Correct output: 5                   | Program output: 35                 
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 13                 
Correct output: 4                   | Program output: 67                 
Correct output: 22                  | Program output: 51                 
Correct output: 5                   | Program output: 5                  
Correct output: 8                   | Program output: 8                  
Correct output: 34                  | Program output: 34                 
Correct output: 30                  | Program output: 83                 
Correct output: -86                 | Program output: -86                
Correct output: -94                 | Program output: -73                
Correct output: -97                 | Program output: -97                
Correct output: -90                 | Program output: 23                 
Correct output: -71                 | Program output: 12                 
Correct output: -57                 | Program output: -57                
Correct output: -56                 | Program output: -43                
Correct output: -84                 | Program output: -80                
Correct output: -99                 | Program output: -7                 
Correct output: -22                 | Program output: -22                
Correct output: -82                 | Program output: -82                
Correct output: -96                 | Program output: 35                 
Correct output: -11                 | Program output: -4                 
Correct output: -87                 | Program output: 89                 
Correct output: -92                 | Program output: -92                
Correct output: 3                   | Program output: 43                 
Correct output: -93                 | Program output: -20                
Correct output: -97                 | Program output: 75                 
Correct output: -86                 | Program output: 85                 
Correct output: -77                 | Program output: -49                
Correct output: -86                 | Program output: -86                
Correct output: -84                 | Program output: -84                
Correct output: -6                  | Program output: 60                 
Correct output: -16                 | Program output: -16                
Correct output: -86                 | Program output: -86                
Correct output: -94                 | Program output: -49                
Correct output: -3                  | Program output: -3                 
Correct output: -86                 | Program output: 32                 
Correct output: -99                 | Program output: -99                
Correct output: -37                 | Program output: -37                
Correct output: -85                 | Program output: -85                
Correct output: -80                 | Program output: -80                
Correct output: -83                 | Program output: -83                
Correct output: -39                 | Program output: -39                
Correct output: -48                 | Program output: -12                
Correct output: -72                 | Program output: -7                 
Correct output: -11                 | Program output: -11                
Correct output: -71                 | Program output: 55                 
Correct output: -62                 | Program output: -28                
Correct output: -76                 | Program output: -76                
Correct output: -15                 | Program output: -15                
Correct output: -84                 | Program output: -24                
Correct output: -71                 | Program output: 26                 
Correct output: -93                 | Program output: -52                
Correct output: -51                 | Program output: -33                
Correct output: -21                 | Program output: 29                 
Correct output: -90                 | Program output: -90                
Correct output: -21                 | Program output: 55                 
Correct output: -5                  | Program output: -5                 
Correct output: -13                 | Program output: -13                
Correct output: -65                 | Program output: -40                
Correct output: -64                 | Program output: -64                
Correct output: -74                 | Program output: -36                
Correct output: -60                 | Program output: 66                 
Correct output: 41                  | Program output: 82                 
Correct output: -71                 | Program output: -71                
Correct output: -2                  | Program output: 31                 
Correct output: -20                 | Program output: -20                
Correct output: -95                 | Program output: -95                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_min} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_sub} {:close 2, :instruction boolean_shove} {:close 0, :instruction exec_y} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction in1} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_or} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_or} {:close 0, :instruction in1} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dec} {:close 2, :instruction integer_inc} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup})
Lexicase best program: (exec_yank in3 integer_yankdup exec_stackdepth integer_gt integer_sub integer_dec exec_yank exec_while (exec_k_when_autoconstructing (boolean_xor integer_lte integer_min integer_lte integer_sub boolean_shove) () exec_y (exec_when (integer_max in2 exec_if (print_integer exec_empty exec_flush integer_dup_items print_boolean boolean_dup exec_yank exec_yankdup) (in4 exec_empty) boolean_invert_first_then_and in1) exec_do*count (integer_dup_items exec_yankdup) boolean_eq integer_shove boolean_or) integer_mult integer_sub boolean_rot integer_div boolean_yankdup) boolean_pop boolean_invert_first_then_and in3 boolean_or print_boolean print_integer exec_do*times (integer_yankdup boolean_or) exec_shove () integer_add integer_dup_items in1 integer_min integer_add boolean_or in1 integer_lte integer_dec integer_inc print_integer exec_noop boolean_yankdup)
Lexicase best errors: [0 0 0 0 0 0 0 0 1 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 78
Percent parens: 0.141
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_min} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_sub} {:close 2, :instruction boolean_shove} {:close 0, :instruction exec_y} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction in1} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_or} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_or} {:close 0, :instruction in1} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dec} {:close 2, :instruction integer_inc} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup})
Zero cases best program: (exec_yank in3 integer_yankdup exec_stackdepth integer_gt integer_sub integer_dec exec_yank exec_while (exec_k_when_autoconstructing (boolean_xor integer_lte integer_min integer_lte integer_sub boolean_shove) () exec_y (exec_when (integer_max in2 exec_if (print_integer exec_empty exec_flush integer_dup_items print_boolean boolean_dup exec_yank exec_yankdup) (in4 exec_empty) boolean_invert_first_then_and in1) exec_do*count (integer_dup_items exec_yankdup) boolean_eq integer_shove boolean_or) integer_mult integer_sub boolean_rot integer_div boolean_yankdup) boolean_pop boolean_invert_first_then_and in3 boolean_or print_boolean print_integer exec_do*times (integer_yankdup boolean_or) exec_shove () integer_add integer_dup_items in1 integer_min integer_add boolean_or in1 integer_lte integer_dec integer_inc print_integer exec_noop boolean_yankdup)
Zero cases best errors: [0 0 0 0 0 0 0 0 1 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 78
Percent parens: 0.141
--- Lexicase Population Statistics ---
Count of elite individuals by case: (24 314 182 329 184 182 151 367 68 181)
Population mean number of elite cases: 1.98
Count of perfect (error zero) individuals by case: (24 314 182 329 184 182 151 367 68 181)
Population mean number of perfect (error zero) cases: 1.98
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_min} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_sub} {:close 2, :instruction boolean_shove} {:close 0, :instruction exec_y} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 2, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction in4} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction in1} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_or} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_or} {:close 0, :instruction in1} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dec} {:close 2, :instruction integer_inc} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_yankdup})
Best program: (boolean_invert_second_then_and integer_div exec_yank in3 exec_stackdepth integer_gt integer_sub integer_dec exec_yank exec_while (exec_k_when_autoconstructing (integer_lte integer_min integer_lte integer_sub boolean_shove) () exec_y (exec_when (in2 exec_if (integer_dup_times) () print_integer exec_empty exec_flush boolean_stackdepth) print_boolean exec_yank boolean_xor in4 exec_empty) boolean_invert_first_then_and in1) exec_do*count (exec_yankdup) boolean_eq integer_shove boolean_or integer_mult integer_sub integer_div boolean_pop integer_dup boolean_invert_first_then_and in3 boolean_or print_boolean print_integer exec_do*times (integer_yankdup boolean_or) exec_shove () integer_add exec_do*while (integer_dup_items exec_dup_items in1 integer_min integer_add boolean_or) in1 integer_lte integer_dec integer_inc print_integer boolean_dup boolean_yankdup)
Errors: [0 0 0 0 0 0 0 0 1 0]
Total: 1
Mean: 0.1
Genome size: 66
Size: 78
Percent parens: 0.154
--- Population Statistics ---
Average total errors in population: 8.018
Median total errors in population: 10
Error averages by case: (0.976 0.686 0.818 0.671 0.816 0.818 0.849 0.633 0.932 0.819)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 71.69
Average program size in population (points): 86.967
Average percent parens in population: 0.175
Minimum age in population: 13.0
Maximum age in population: 13.0
Average age in population: 13.0
Median age in population: 13.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.01
Error (vector) diversity:			 0.029
Behavioral diversity:				 0.369
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 8814577
--- Timings ---
Current time: 1559593971733 milliseconds
Total Time:          33.1 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        16.1 seconds, 48.7%
Fitness Testing:      9.5 seconds, 28.7%
Report:               7.4 seconds, 22.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 542
Test mean error for best: 0.54200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -79                 | Program output: -79                
Correct output: -70                 | Program output: -70                
Correct output: -3                  | Program output: -3                 
Correct output: -47                 | Program output: -47                
Correct output: -51                 | Program output: -51                
Correct output: -37                 | Program output: -37                
Correct output: -7                  | Program output: 77                 
Correct output: -84                 | Program output: -35                
Correct output: -68                 | Program output: -68                
Correct output: -66                 | Program output: 43                 
Correct output: 64                  | Program output: 64                 
Correct output: -52                 | Program output: -52                
Correct output: 75                  | Program output: 75                 
Correct output: -47                 | Program output: -47                
Correct output: 39                  | Program output: 39                 
Correct output: 18                  | Program output: 83                 
Correct output: 13                  | Program output: 79                 
Correct output: 11                  | Program output: 11                 
Correct output: 3                   | Program output: 76                 
Correct output: 50                  | Program output: 80                 
Correct output: 10                  | Program output: 38                 
Correct output: 39                  | Program output: 39                 
Correct output: 4                   | Program output: 4                  
Correct output: 7                   | Program output: 91                 
Correct output: 5                   | Program output: 55                 
Correct output: 31                  | Program output: 31                 
Correct output: 40                  | Program output: 58                 
Correct output: 5                   | Program output: 52                 
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 13                 
Correct output: 4                   | Program output: 67                 
Correct output: 22                  | Program output: 51                 
Correct output: 5                   | Program output: 5                  
Correct output: 8                   | Program output: 8                  
Correct output: 34                  | Program output: 34                 
Correct output: 30                  | Program output: 83                 
Correct output: -86                 | Program output: -86                
Correct output: -94                 | Program output: -73                
Correct output: -97                 | Program output: -97                
Correct output: -90                 | Program output: 23                 
Correct output: -71                 | Program output: 12                 
Correct output: -57                 | Program output: -57                
Correct output: -56                 | Program output: -43                
Correct output: -84                 | Program output: -80                
Correct output: -99                 | Program output: -7                 
Correct output: -22                 | Program output: -22                
Correct output: -82                 | Program output: -82                
Correct output: -96                 | Program output: 35                 
Correct output: -11                 | Program output: -4                 
Correct output: -87                 | Program output: 89                 
Correct output: -92                 | Program output: -92                
Correct output: 3                   | Program output: 43                 
Correct output: -93                 | Program output: -20                
Correct output: -97                 | Program output: 75                 
Correct output: -86                 | Program output: 85                 
Correct output: -77                 | Program output: -49                
Correct output: -86                 | Program output: -86                
Correct output: -84                 | Program output: -84                
Correct output: -6                  | Program output: 60                 
Correct output: -16                 | Program output: -16                
Correct output: -86                 | Program output: -86                
Correct output: -94                 | Program output: -49                
Correct output: -3                  | Program output: -3                 
Correct output: -86                 | Program output: 32                 
Correct output: -99                 | Program output: -99                
Correct output: -37                 | Program output: -37                
Correct output: -85                 | Program output: -85                
Correct output: -80                 | Program output: -80                
Correct output: -83                 | Program output: -83                
Correct output: -39                 | Program output: -39                
Correct output: -48                 | Program output: -12                
Correct output: -72                 | Program output: -7                 
Correct output: -11                 | Program output: -11                
Correct output: -71                 | Program output: 55                 
Correct output: -62                 | Program output: -28                
Correct output: -76                 | Program output: -76                
Correct output: -15                 | Program output: -15                
Correct output: -84                 | Program output: -24                
Correct output: -71                 | Program output: 26                 
Correct output: -93                 | Program output: -52                
Correct output: -51                 | Program output: -33                
Correct output: -21                 | Program output: 29                 
Correct output: -90                 | Program output: -90                
Correct output: -21                 | Program output: 55                 
Correct output: -5                  | Program output: -5                 
Correct output: -13                 | Program output: -13                
Correct output: -65                 | Program output: -40                
Correct output: -64                 | Program output: -64                
Correct output: -74                 | Program output: -36                
Correct output: -60                 | Program output: 66                 
Correct output: 41                  | Program output: 82                 
Correct output: -71                 | Program output: -71                
Correct output: -2                  | Program output: 31                 
Correct output: -20                 | Program output: -20                
Correct output: -95                 | Program output: -95                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_min} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_sub} {:close 2, :instruction boolean_shove} {:close 0, :instruction exec_y} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 2, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction in4} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction in1} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_or} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_or} {:close 0, :instruction in1} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dec} {:close 2, :instruction integer_inc} {:close 0, :instruction print_integer} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_yankdup})
Lexicase best program: (integer_mod boolean_invert_second_then_and integer_div boolean_dup_times exec_yank in3 exec_stackdepth integer_gt integer_sub exec_yank exec_while (exec_k_when_autoconstructing (integer_lte integer_min integer_lte integer_sub boolean_shove) () exec_y (exec_when (in2 exec_if (integer_dup_times) () print_integer exec_empty exec_flush boolean_stackdepth) print_boolean exec_yank boolean_xor in4 exec_empty) boolean_invert_first_then_and in1) exec_yankdup boolean_eq integer_shove boolean_or integer_mult integer_flush integer_sub integer_div exec_do*count (boolean_pop integer_dup boolean_invert_first_then_and in3 print_integer exec_do*times (integer_yankdup boolean_or) exec_shove () integer_add exec_do*while (integer_dup_items exec_dup_items in1 integer_min integer_add boolean_or) in1 integer_lte integer_dec integer_inc) print_integer integer_fromboolean boolean_dup boolean_yankdup)
Lexicase best errors: [1 0 1 0 1 0 0 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 79
Percent parens: 0.152
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_min} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_sub} {:close 2, :instruction boolean_shove} {:close 0, :instruction exec_y} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 2, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction in4} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction in1} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_or} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_or} {:close 0, :instruction in1} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dec} {:close 2, :instruction integer_inc} {:close 0, :instruction print_integer} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_yankdup})
Zero cases best program: (integer_mod boolean_invert_second_then_and integer_div boolean_dup_times exec_yank in3 exec_stackdepth integer_gt integer_sub exec_yank exec_while (exec_k_when_autoconstructing (integer_lte integer_min integer_lte integer_sub boolean_shove) () exec_y (exec_when (in2 exec_if (integer_dup_times) () print_integer exec_empty exec_flush boolean_stackdepth) print_boolean exec_yank boolean_xor in4 exec_empty) boolean_invert_first_then_and in1) exec_yankdup boolean_eq integer_shove boolean_or integer_mult integer_flush integer_sub integer_div exec_do*count (boolean_pop integer_dup boolean_invert_first_then_and in3 print_integer exec_do*times (integer_yankdup boolean_or) exec_shove () integer_add exec_do*while (integer_dup_items exec_dup_items in1 integer_min integer_add boolean_or) in1 integer_lte integer_dec integer_inc) print_integer integer_fromboolean boolean_dup boolean_yankdup)
Zero cases best errors: [1 0 1 0 1 0 0 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 79
Percent parens: 0.152
--- Lexicase Population Statistics ---
Count of elite individuals by case: (18 451 18 270 64 452 104 100 394 14)
Population mean number of elite cases: 1.88
Count of perfect (error zero) individuals by case: (18 451 18 270 64 452 104 100 394 14)
Population mean number of perfect (error zero) cases: 1.88
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_min} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_sub} {:close 2, :instruction boolean_shove} {:close 0, :instruction exec_y} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_xor} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction in1} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in3} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_or} {:close 0, :instruction in1} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dec} {:close 2, :instruction integer_inc} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup})
Best program: (exec_yank in3 integer_yankdup exec_stackdepth integer_gt integer_sub integer_dec integer_dup exec_yank exec_while (exec_k_when_autoconstructing (boolean_xor integer_lte integer_min integer_lte integer_sub boolean_shove) () exec_y (exec_when (integer_max boolean_xor in2 print_integer exec_empty exec_flush integer_dup_items print_boolean boolean_dup exec_yank exec_yankdup) exec_empty) boolean_invert_first_then_and in1) exec_do*count (integer_dup_items exec_yankdup) boolean_yankdup boolean_eq integer_shove boolean_or integer_mult integer_sub boolean_rot integer_div boolean_yankdup boolean_pop boolean_invert_first_then_and in3 integer_mod boolean_or print_boolean print_integer exec_do*times (integer_yankdup exec_shove () integer_add integer_dup_items in1 integer_min exec_pop () integer_add boolean_or) in1 integer_lte integer_dec integer_inc print_integer exec_noop boolean_yankdup)
Errors: [1 0 1 0 0 0 0 0 1 1]
Total: 4
Mean: 0.4
Genome size: 69
Size: 79
Percent parens: 0.127
--- Population Statistics ---
Average total errors in population: 8.115
Median total errors in population: 8
Error averages by case: (0.982 0.549 0.982 0.73 0.936 0.548 0.896 0.9 0.606 0.986)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 65.614
Average program size in population (points): 79.878
Average percent parens in population: 0.178
Minimum age in population: 14.0
Maximum age in population: 14.0
Average age in population: 14.0
Median age in population: 14.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.007
Error (vector) diversity:			 0.027
Behavioral diversity:				 0.299
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 9260228
--- Timings ---
Current time: 1559593973738 milliseconds
Total Time:          35.2 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        17.3 seconds, 49.2%
Fitness Testing:     10.0 seconds, 28.3%
Report:               7.8 seconds, 22.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 555
Test mean error for best: 0.55500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -79                 | Program output: -79                
Correct output: -70                 | Program output: -70                
Correct output: -3                  | Program output: -3                 
Correct output: -47                 | Program output: -47                
Correct output: -51                 | Program output:                    
Correct output: -37                 | Program output:                    
Correct output: -7                  | Program output: -7                 
Correct output: -84                 | Program output: -35                
Correct output: -68                 | Program output: -68                
Correct output: -66                 | Program output: 43                 
Correct output: 64                  | Program output: 64                 
Correct output: -52                 | Program output: -52                
Correct output: 75                  | Program output: 75                 
Correct output: -47                 | Program output: -47                
Correct output: 39                  | Program output: 39                 
Correct output: 18                  | Program output: 18                 
Correct output: 13                  | Program output: 13                 
Correct output: 11                  | Program output: 11                 
Correct output: 3                   | Program output: 95                 
Correct output: 50                  | Program output: 50                 
Correct output: 10                  | Program output: 100                
Correct output: 39                  | Program output: 87                 
Correct output: 4                   | Program output: 4                  
Correct output: 7                   | Program output: 7                  
Correct output: 5                   | Program output: 60                 
Correct output: 31                  | Program output: 93                 
Correct output: 40                  | Program output: 52                 
Correct output: 5                   | Program output: 5                  
Correct output: 12                  | Program output: 97                 
Correct output: 1                   | Program output: 24                 
Correct output: 4                   | Program output: 67                 
Correct output: 22                  | Program output: 23                 
Correct output: 5                   | Program output: 40                 
Correct output: 8                   | Program output: 100                
Correct output: 34                  | Program output: 39                 
Correct output: 30                  | Program output: 98                 
Correct output: -86                 | Program output: -86                
Correct output: -94                 | Program output: -73                
Correct output: -97                 | Program output:                    
Correct output: -90                 | Program output: 23                 
Correct output: -71                 | Program output: 12                 
Correct output: -57                 | Program output: -57                
Correct output: -56                 | Program output: -43                
Correct output: -84                 | Program output:                    
Correct output: -99                 | Program output: -7                 
Correct output: -22                 | Program output: -22                
Correct output: -82                 | Program output: -82                
Correct output: -96                 | Program output: -96                
Correct output: -11                 | Program output: -4                 
Correct output: -87                 | Program output: -87                
Correct output: -92                 | Program output:                    
Correct output: 3                   | Program output: 88                 
Correct output: -93                 | Program output: -20                
Correct output: -97                 | Program output: -62                
Correct output: -86                 | Program output: -86                
Correct output: -77                 | Program output:                    
Correct output: -86                 | Program output: -86                
Correct output: -84                 | Program output:                    
Correct output: -6                  | Program output: 55                 
Correct output: -16                 | Program output:                    
Correct output: -86                 | Program output:                    
Correct output: -94                 | Program output: -49                
Correct output: -3                  | Program output:                    
Correct output: -86                 | Program output:                    
Correct output: -99                 | Program output:                    
Correct output: -37                 | Program output: -37                
Correct output: -85                 | Program output: -85                
Correct output: -80                 | Program output: -80                
Correct output: -83                 | Program output: -83                
Correct output: -39                 | Program output:                    
Correct output: -48                 | Program output: -12                
Correct output: -72                 | Program output: -7                 
Correct output: -11                 | Program output: -11                
Correct output: -71                 | Program output: -71                
Correct output: -62                 | Program output: -28                
Correct output: -76                 | Program output:                    
Correct output: -15                 | Program output: -15                
Correct output: -84                 | Program output: -24                
Correct output: -71                 | Program output: 26                 
Correct output: -93                 | Program output:                    
Correct output: -51                 | Program output: -33                
Correct output: -21                 | Program output: -21                
Correct output: -90                 | Program output: -90                
Correct output: -21                 | Program output: -21                
Correct output: -5                  | Program output: -5                 
Correct output: -13                 | Program output:                    
Correct output: -65                 | Program output:                    
Correct output: -64                 | Program output: -64                
Correct output: -74                 | Program output: -36                
Correct output: -60                 | Program output: 45                 
Correct output: 41                  | Program output: 58                 
Correct output: -71                 | Program output: -71                
Correct output: -2                  | Program output:                    
Correct output: -20                 | Program output:                    
Correct output: -95                 | Program output: -95                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_sub} {:close 2, :instruction boolean_shove} {:close 0, :instruction exec_y} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 2, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction in4} {:close 1, :instruction exec_empty} {:close 1, :instruction boolean_empty} {:close 1, :instruction in1} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in3} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_or} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_dec} {:close 2, :instruction integer_inc} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_yankdup})
Lexicase best program: (boolean_invert_second_then_and integer_div exec_yank in3 exec_stackdepth integer_gt integer_sub exec_k (exec_yank exec_while (exec_k_when_autoconstructing (integer_lte in4 integer_min integer_lte integer_sub boolean_shove) () exec_y (exec_when (in2 exec_if (integer_dup_times) () print_integer exec_empty exec_flush boolean_stackdepth) print_boolean exec_yank boolean_xor in4 exec_empty) boolean_empty) in1) (exec_do*count (exec_yankdup) boolean_eq boolean_or) integer_mult integer_sub integer_div integer_dup boolean_invert_first_then_and in3 print_boolean print_integer exec_do*times (integer_yankdup boolean_or) exec_shove () integer_add exec_do*while (boolean_empty) integer_dup_items exec_dup_items in1 integer_min in2 integer_add boolean_or integer_dec integer_inc print_integer boolean_dup boolean_yankdup)
Lexicase best errors: [1 0 1 0 0 0 1 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 78
Percent parens: 0.179
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_sub} {:close 2, :instruction boolean_shove} {:close 0, :instruction exec_y} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 2, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction in4} {:close 1, :instruction exec_empty} {:close 1, :instruction boolean_empty} {:close 1, :instruction in1} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in3} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_or} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_dec} {:close 2, :instruction integer_inc} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_yankdup})
Zero cases best program: (boolean_invert_second_then_and integer_div exec_yank in3 exec_stackdepth integer_gt integer_sub exec_k (exec_yank exec_while (exec_k_when_autoconstructing (integer_lte in4 integer_min integer_lte integer_sub boolean_shove) () exec_y (exec_when (in2 exec_if (integer_dup_times) () print_integer exec_empty exec_flush boolean_stackdepth) print_boolean exec_yank boolean_xor in4 exec_empty) boolean_empty) in1) (exec_do*count (exec_yankdup) boolean_eq boolean_or) integer_mult integer_sub integer_div integer_dup boolean_invert_first_then_and in3 print_boolean print_integer exec_do*times (integer_yankdup boolean_or) exec_shove () integer_add exec_do*while (boolean_empty) integer_dup_items exec_dup_items in1 integer_min in2 integer_add boolean_or integer_dec integer_inc print_integer boolean_dup boolean_yankdup)
Zero cases best errors: [1 0 1 0 0 0 1 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 78
Percent parens: 0.179
--- Lexicase Population Statistics ---
Count of elite individuals by case: (18 206 26 206 206 64 32 65 126 206)
Population mean number of elite cases: 1.15
Count of perfect (error zero) individuals by case: (18 206 26 206 206 64 32 65 126 206)
Population mean number of perfect (error zero) cases: 1.15
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction in3} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_sub} {:close 2, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 2, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction in4} {:close 1, :instruction exec_empty} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction in1} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_or} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_empty} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_add} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dec} {:close 2, :instruction integer_inc} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_yankdup})
Best program: (boolean_invert_second_then_and integer_div in3 exec_stackdepth integer_gt integer_sub exec_k (exec_yank exec_while (exec_k_when_autoconstructing (integer_lte in4 integer_min integer_lte integer_sub boolean_shove) () exec_if (exec_when (in2 integer_dup_times)) (print_integer exec_empty exec_flush boolean_stackdepth) print_boolean exec_yank boolean_xor in4 exec_empty) boolean_empty) (boolean_invert_first_then_and in1) integer_lte exec_do*count (exec_yankdup) integer_min boolean_eq boolean_frominteger boolean_or integer_mult integer_div boolean_invert_first_then_and in3 boolean_or print_integer exec_do*times (integer_yankdup boolean_or) exec_shove () integer_add exec_do*while (integer_dup_items exec_dup_items exec_empty in1 integer_min integer_add integer_lte integer_dec integer_inc) boolean_dup boolean_yankdup)
Errors: [1 0 1 0 0 0 1 0 1 0]
Total: 4
Mean: 0.4
Genome size: 62
Size: 75
Percent parens: 0.173
--- Population Statistics ---
Average total errors in population: 8.845
Median total errors in population: 10
Error averages by case: (0.982 0.794 0.974 0.794 0.794 0.936 0.968 0.935 0.874 0.794)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 65.833
Average program size in population (points): 79.443
Average percent parens in population: 0.170
Minimum age in population: 15.0
Maximum age in population: 15.0
Average age in population: 15.0
Median age in population: 15.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.006
Error (vector) diversity:			 0.024
Behavioral diversity:				 0.349
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 9755355
--- Timings ---
Current time: 1559593975767 milliseconds
Total Time:          37.2 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        18.5 seconds, 49.6%
Fitness Testing:     10.4 seconds, 28.0%
Report:               8.2 seconds, 22.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 415
Test mean error for best: 0.41500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -79                 | Program output: -79                
Correct output: -70                 | Program output: -70                
Correct output: -3                  | Program output: -3                 
Correct output: -47                 | Program output: -47                
Correct output: -51                 | Program output: -51                
Correct output: -37                 | Program output: -37                
Correct output: -7                  | Program output: -7                 
Correct output: -84                 | Program output: -35                
Correct output: -68                 | Program output: -68                
Correct output: -66                 | Program output: 43                 
Correct output: 64                  | Program output: 64                 
Correct output: -52                 | Program output: -52                
Correct output: 75                  | Program output: 75                 
Correct output: -47                 | Program output: -47                
Correct output: 39                  | Program output: 39                 
Correct output: 18                  | Program output: 18                 
Correct output: 13                  | Program output: 13                 
Correct output: 11                  | Program output: 11                 
Correct output: 3                   | Program output: 76                 
Correct output: 50                  | Program output: 50                 
Correct output: 10                  | Program output: 38                 
Correct output: 39                  | Program output: 39                 
Correct output: 4                   | Program output: 4                  
Correct output: 7                   | Program output: 7                  
Correct output: 5                   | Program output: 55                 
Correct output: 31                  | Program output: 31                 
Correct output: 40                  | Program output: 52                 
Correct output: 5                   | Program output: 5                  
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 13                 
Correct output: 4                   | Program output: 67                 
Correct output: 22                  | Program output: 23                 
Correct output: 5                   | Program output: 5                  
Correct output: 8                   | Program output: 8                  
Correct output: 34                  | Program output: 39                 
Correct output: 30                  | Program output: 83                 
Correct output: -86                 | Program output: -86                
Correct output: -94                 | Program output: -73                
Correct output: -97                 | Program output: -97                
Correct output: -90                 | Program output: 23                 
Correct output: -71                 | Program output: 12                 
Correct output: -57                 | Program output: -57                
Correct output: -56                 | Program output: -43                
Correct output: -84                 | Program output: -80                
Correct output: -99                 | Program output: -7                 
Correct output: -22                 | Program output: -22                
Correct output: -82                 | Program output: -82                
Correct output: -96                 | Program output: -96                
Correct output: -11                 | Program output: -4                 
Correct output: -87                 | Program output: -87                
Correct output: -92                 | Program output: -92                
Correct output: 3                   | Program output: 43                 
Correct output: -93                 | Program output: -20                
Correct output: -97                 | Program output: -62                
Correct output: -86                 | Program output: -86                
Correct output: -77                 | Program output: -49                
Correct output: -86                 | Program output: -86                
Correct output: -84                 | Program output: -84                
Correct output: -6                  | Program output: 55                 
Correct output: -16                 | Program output: -16                
Correct output: -86                 | Program output: -86                
Correct output: -94                 | Program output: -49                
Correct output: -3                  | Program output: -3                 
Correct output: -86                 | Program output: -30                
Correct output: -99                 | Program output: -99                
Correct output: -37                 | Program output: -37                
Correct output: -85                 | Program output: -85                
Correct output: -80                 | Program output: -80                
Correct output: -83                 | Program output: -83                
Correct output: -39                 | Program output: -39                
Correct output: -48                 | Program output: -12                
Correct output: -72                 | Program output: -7                 
Correct output: -11                 | Program output: -11                
Correct output: -71                 | Program output: -71                
Correct output: -62                 | Program output: -28                
Correct output: -76                 | Program output: -76                
Correct output: -15                 | Program output: -15                
Correct output: -84                 | Program output: -24                
Correct output: -71                 | Program output: 26                 
Correct output: -93                 | Program output: -52                
Correct output: -51                 | Program output: -33                
Correct output: -21                 | Program output: -21                
Correct output: -90                 | Program output: -90                
Correct output: -21                 | Program output: -21                
Correct output: -5                  | Program output: -5                 
Correct output: -13                 | Program output: -13                
Correct output: -65                 | Program output: -56                
Correct output: -64                 | Program output: -64                
Correct output: -74                 | Program output: -36                
Correct output: -60                 | Program output: 45                 
Correct output: 41                  | Program output: 58                 
Correct output: -71                 | Program output: -71                
Correct output: -2                  | Program output: -2                 
Correct output: -20                 | Program output: -20                
Correct output: -95                 | Program output: -95                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_min} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_sub} {:close 2, :instruction boolean_shove} {:close 0, :instruction exec_y} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 2, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_empty} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction in1} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 2, :instruction integer_inc} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_yankdup})
Lexicase best program: (boolean_invert_second_then_and integer_rot integer_div exec_yank boolean_eq in3 boolean_not exec_stackdepth integer_gt integer_sub exec_k (exec_yank exec_while (exec_k_when_autoconstructing (integer_lte integer_min integer_mult integer_lte integer_sub boolean_shove) () exec_y (exec_when (in2 exec_if (integer_dup_times) () print_integer exec_empty exec_flush boolean_stackdepth) print_boolean exec_yank boolean_xor in4 boolean_invert_second_then_and exec_empty) boolean_empty) boolean_invert_first_then_and in1) (exec_do*count (exec_yankdup) boolean_eq boolean_or) integer_mult integer_sub integer_div integer_dup boolean_invert_first_then_and in3 boolean_or print_boolean print_integer exec_do*times (exec_shove () integer_add exec_do*while (integer_dup_items exec_dup_items exec_empty integer_min boolean_or) boolean_xor) integer_dec exec_swap (integer_inc) () integer_yank integer_yank print_integer boolean_dup boolean_yankdup)
Lexicase best errors: [0 0 0 1 0 0 1 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 85
Percent parens: 0.188
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_min} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_sub} {:close 2, :instruction boolean_shove} {:close 0, :instruction exec_y} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 2, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_empty} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction in1} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 2, :instruction integer_inc} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_yankdup})
Zero cases best program: (boolean_invert_second_then_and integer_rot integer_div exec_yank boolean_eq in3 boolean_not exec_stackdepth integer_gt integer_sub exec_k (exec_yank exec_while (exec_k_when_autoconstructing (integer_lte integer_min integer_mult integer_lte integer_sub boolean_shove) () exec_y (exec_when (in2 exec_if (integer_dup_times) () print_integer exec_empty exec_flush boolean_stackdepth) print_boolean exec_yank boolean_xor in4 boolean_invert_second_then_and exec_empty) boolean_empty) boolean_invert_first_then_and in1) (exec_do*count (exec_yankdup) boolean_eq boolean_or) integer_mult integer_sub integer_div integer_dup boolean_invert_first_then_and in3 boolean_or print_boolean print_integer exec_do*times (exec_shove () integer_add exec_do*while (integer_dup_items exec_dup_items exec_empty integer_min boolean_or) boolean_xor) integer_dec exec_swap (integer_inc) () integer_yank integer_yank print_integer boolean_dup boolean_yankdup)
Zero cases best errors: [0 0 0 1 0 0 1 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 85
Percent parens: 0.188
--- Lexicase Population Statistics ---
Count of elite individuals by case: (265 468 385 71 156 178 112 179 147 92)
Population mean number of elite cases: 2.05
Count of perfect (error zero) individuals by case: (265 468 385 71 156 178 112 179 147 92)
Population mean number of perfect (error zero) cases: 2.05
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_sub} {:close 2, :instruction boolean_shove} {:close 0, :instruction in4} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction in1} {:close 0, :instruction exec_do*count} {:close 0, :instruction in4} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_noop} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction 76} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_do*count} {:close 1, :instruction boolean_or} {:close 1, :instruction exec_shove} {:close 0, :instruction in1} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_noop})
Best program: (exec_yank in3 exec_stackdepth boolean_shove integer_gt integer_sub integer_dec exec_yank boolean_dup_items exec_while (exec_k_when_autoconstructing (boolean_xor boolean_flush integer_min boolean_empty integer_sub boolean_shove) () in4 integer_lt exec_y (boolean_and exec_when (integer_max in2 exec_if (integer_min print_integer exec_empty exec_flush integer_dup_items integer_fromboolean boolean_dup exec_yank exec_yankdup) (in4 exec_empty) boolean_invert_first_then_and in1) exec_do*count (in4 exec_yankdup) boolean_eq integer_shove exec_noop) boolean_or) integer_mult integer_sub exec_noop boolean_rot integer_div boolean_yankdup exec_stackdepth 76 in3 print_integer exec_do*times (integer_yankdup exec_do*count () boolean_or) exec_shove () in1 integer_rot integer_min boolean_or in1 print_integer integer_yankdup exec_noop)
Errors: [0 0 0 1 0 0 1 0 0 1]
Total: 3
Mean: 0.3
Genome size: 68
Size: 80
Percent parens: 0.150
--- Population Statistics ---
Average total errors in population: 7.947
Median total errors in population: 9
Error averages by case: (0.735 0.532 0.615 0.929 0.844 0.822 0.888 0.821 0.853 0.908)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 66.393
Average program size in population (points): 81.562
Average percent parens in population: 0.185
Minimum age in population: 16.0
Maximum age in population: 16.0
Average age in population: 16.0
Median age in population: 16.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.008
Error (vector) diversity:			 0.051
Behavioral diversity:				 0.388
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 10286869
--- Timings ---
Current time: 1559593978036 milliseconds
Total Time:          39.3 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        19.6 seconds, 50.0%
Fitness Testing:     10.9 seconds, 27.9%
Report:               8.6 seconds, 21.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Smallest problem report - generation 17
Test total error for best: 324
Test mean error for best: 0.32400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -79                 | Program output: -79                
Correct output: -70                 | Program output: -70                
Correct output: -3                  | Program output: -3                 
Correct output: -47                 | Program output: -47                
Correct output: -51                 | Program output: -51                
Correct output: -37                 | Program output: -37                
Correct output: -7                  | Program output: 77                 
Correct output: -84                 | Program output: -84                
Correct output: -68                 | Program output: -68                
Correct output: -66                 | Program output: 43                 
Correct output: 64                  | Program output: 64                 
Correct output: -52                 | Program output: -52                
Correct output: 75                  | Program output: 75                 
Correct output: -47                 | Program output: -47                
Correct output: 39                  | Program output: 39                 
Correct output: 18                  | Program output: 79                 
Correct output: 13                  | Program output: 13                 
Correct output: 11                  | Program output: 11                 
Correct output: 3                   | Program output: 36                 
Correct output: 50                  | Program output: 50                 
Correct output: 10                  | Program output: 38                 
Correct output: 39                  | Program output: 39                 
Correct output: 4                   | Program output: 4                  
Correct output: 7                   | Program output: 58                 
Correct output: 5                   | Program output: 55                 
Correct output: 31                  | Program output: 31                 
Correct output: 40                  | Program output: 40                 
Correct output: 5                   | Program output: 35                 
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 13                 
Correct output: 4                   | Program output: 39                 
Correct output: 22                  | Program output: 23                 
Correct output: 5                   | Program output: 5                  
Correct output: 8                   | Program output: 8                  
Correct output: 34                  | Program output: 34                 
Correct output: 30                  | Program output: 83                 
Correct output: -86                 | Program output: -86                
Correct output: -94                 | Program output: -73                
Correct output: -97                 | Program output: -97                
Correct output: -90                 | Program output: 23                 
Correct output: -71                 | Program output: -46                
Correct output: -57                 | Program output: -57                
Correct output: -56                 | Program output: -43                
Correct output: -84                 | Program output: -80                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: -82                 | Program output: -82                
Correct output: -96                 | Program output: -96                
Correct output: -11                 | Program output: -11                
Correct output: -87                 | Program output: 69                 
Correct output: -92                 | Program output: -92                
Correct output: 3                   | Program output: 43                 
Correct output: -93                 | Program output: -20                
Correct output: -97                 | Program output: 58                 
Correct output: -86                 | Program output: 43                 
Correct output: -77                 | Program output: -49                
Correct output: -86                 | Program output: -86                
Correct output: -84                 | Program output: -84                
Correct output: -6                  | Program output: 39                 
Correct output: -16                 | Program output: -16                
Correct output: -86                 | Program output: -86                
Correct output: -94                 | Program output: -60                
Correct output: -3                  | Program output: -3                 
Correct output: -86                 | Program output: -30                
Correct output: -99                 | Program output: -99                
Correct output: -37                 | Program output: -37                
Correct output: -85                 | Program output: -85                
Correct output: -80                 | Program output: -80                
Correct output: -83                 | Program output: -83                
Correct output: -39                 | Program output: -39                
Correct output: -48                 | Program output: -12                
Correct output: -72                 | Program output: -72                
Correct output: -11                 | Program output: -11                
Correct output: -71                 | Program output: 45                 
Correct output: -62                 | Program output: -62                
Correct output: -76                 | Program output: -76                
Correct output: -15                 | Program output: -15                
Correct output: -84                 | Program output: -84                
Correct output: -71                 | Program output: 9                  
Correct output: -93                 | Program output: -52                
Correct output: -51                 | Program output: -33                
Correct output: -21                 | Program output: -21                
Correct output: -90                 | Program output: -90                
Correct output: -21                 | Program output: 54                 
Correct output: -5                  | Program output: -5                 
Correct output: -13                 | Program output: -13                
Correct output: -65                 | Program output: -56                
Correct output: -64                 | Program output: -64                
Correct output: -74                 | Program output: -74                
Correct output: -60                 | Program output: 56                 
Correct output: 41                  | Program output: 49                 
Correct output: -71                 | Program output: -71                
Correct output: -2                  | Program output: -2                 
Correct output: -20                 | Program output: -20                
Correct output: -95                 | Program output: -95                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_while} {:close 1, :instruction in3} {:close 0, :instruction boolean_xor} {:close 1, :instruction in1} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_sub} {:close 2, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction -30} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_do*times} {:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_or} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_min} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_or} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lte} {:close 2, :instruction integer_inc} {:close 0, :instruction integer_inc} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup})
Lexicase best program: (exec_yank in1 in3 integer_yankdup exec_stackdepth integer_gt integer_sub integer_dec exec_yank exec_while (in3) boolean_xor in1 integer_gt integer_lte integer_sub boolean_shove exec_when (integer_max exec_if (integer_dup_times print_integer exec_empty exec_flush -30 print_boolean exec_flush) (boolean_dup exec_yank exec_s (in4) (exec_yankdup) (in4 exec_empty) boolean_invert_first_then_and in2 in1) print_boolean exec_do*count (boolean_dup_items exec_yankdup exec_yankdup) boolean_eq integer_shove exec_stackdepth integer_dec boolean_or) integer_mult integer_gte boolean_rot integer_div boolean_yankdup boolean_pop exec_do*times () in3 exec_y_when_autoconstructing (boolean_or print_boolean print_integer exec_do*times (integer_yankdup boolean_or) integer_dup) integer_add exec_empty integer_dup_items in1 integer_fromboolean integer_min exec_y_when_autoconstructing () boolean_or in1 boolean_shove integer_lte integer_inc integer_inc print_integer exec_noop boolean_yankdup)
Lexicase best errors: [0 0 1 0 1 0 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 92
Percent parens: 0.141
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_while} {:close 1, :instruction in3} {:close 0, :instruction boolean_xor} {:close 1, :instruction in1} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_sub} {:close 2, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction -30} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s} {:close 1, :instruction in4} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_do*times} {:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_or} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_min} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_or} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lte} {:close 2, :instruction integer_inc} {:close 0, :instruction integer_inc} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup})
Zero cases best program: (exec_yank in1 in3 integer_yankdup exec_stackdepth integer_gt integer_sub integer_dec exec_yank exec_while (in3) boolean_xor in1 integer_gt integer_lte integer_sub boolean_shove exec_when (integer_max exec_if (integer_dup_times print_integer exec_empty exec_flush -30 print_boolean exec_flush) (boolean_dup exec_yank exec_s (in4) (exec_yankdup) (in4 exec_empty) boolean_invert_first_then_and in2 in1) print_boolean exec_do*count (boolean_dup_items exec_yankdup exec_yankdup) boolean_eq integer_shove exec_stackdepth integer_dec boolean_or) integer_mult integer_gte boolean_rot integer_div boolean_yankdup boolean_pop exec_do*times () in3 exec_y_when_autoconstructing (boolean_or print_boolean print_integer exec_do*times (integer_yankdup boolean_or) integer_dup) integer_add exec_empty integer_dup_items in1 integer_fromboolean integer_min exec_y_when_autoconstructing () boolean_or in1 boolean_shove integer_lte integer_inc integer_inc print_integer exec_noop boolean_yankdup)
Zero cases best errors: [0 0 1 0 1 0 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 92
Percent parens: 0.141
--- Lexicase Population Statistics ---
Count of elite individuals by case: (485 321 224 69 50 186 497 286 187 93)
Population mean number of elite cases: 2.40
Count of perfect (error zero) individuals by case: (485 321 224 69 50 186 497 286 187 93)
Population mean number of perfect (error zero) cases: 2.40
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 1, :instruction boolean_shove} {:close 0, :instruction in2} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_sub} {:close 2, :instruction boolean_shove} {:close 0, :instruction in4} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_if} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mod} {:close 1, :instruction in1} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_shove} {:close 0, :instruction in1} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction in1} {:close 2, :instruction integer_inc} {:close 1, :instruction exec_s} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*times})
Best program: (exec_yank in3 integer_yankdup boolean_shove in2 integer_gt integer_sub integer_dec exec_yank exec_while (boolean_stackdepth exec_k_when_autoconstructing (boolean_xor boolean_flush exec_yank integer_min integer_lte integer_sub boolean_shove) () in4 integer_lt boolean_and exec_if (exec_when (integer_max in2 exec_if (integer_min print_integer exec_flush integer_dup_items boolean_dup exec_yank exec_yankdup) (in4 exec_empty) boolean_invert_first_then_and integer_mod in1) exec_yankdup) (boolean_eq integer_shove exec_noop) boolean_yankdup integer_mult integer_sub boolean_rot integer_div boolean_yankdup) exec_stackdepth in3 print_integer integer_yankdup boolean_swap exec_shove () in1 integer_rot integer_min boolean_dup boolean_or in1 integer_inc exec_s () (integer_yankdup) (exec_noop exec_do*times ()))
Errors: [0 0 0 1 0 0 0 0 0 1]
Total: 2
Mean: 0.2
Genome size: 66
Size: 80
Percent parens: 0.175
--- Population Statistics ---
Average total errors in population: 7.602
Median total errors in population: 8
Error averages by case: (0.515 0.679 0.776 0.931 0.95 0.814 0.503 0.714 0.813 0.907)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 68.44
Average program size in population (points): 82.786
Average percent parens in population: 0.174
Minimum age in population: 17.0
Maximum age in population: 17.0
Average age in population: 17.0
Median age in population: 17.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.009
Error (vector) diversity:			 0.052
Behavioral diversity:				 0.404
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 10815138
--- Timings ---
Current time: 1559593980210 milliseconds
Total Time:          41.5 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        20.8 seconds, 50.0%
Fitness Testing:     11.4 seconds, 27.5%
Report:               9.2 seconds, 22.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Smallest problem report - generation 18
Test total error for best: 324
Test mean error for best: 0.32400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -79                 | Program output: -79                
Correct output: -70                 | Program output: -70                
Correct output: -3                  | Program output: -3                 
Correct output: -47                 | Program output: -47                
Correct output: -51                 | Program output: -51                
Correct output: -37                 | Program output: -37                
Correct output: -7                  | Program output: 77                 
Correct output: -84                 | Program output: -84                
Correct output: -68                 | Program output: -68                
Correct output: -66                 | Program output: 43                 
Correct output: 64                  | Program output: 64                 
Correct output: -52                 | Program output: -52                
Correct output: 75                  | Program output: 75                 
Correct output: -47                 | Program output: -47                
Correct output: 39                  | Program output: 39                 
Correct output: 18                  | Program output: 79                 
Correct output: 13                  | Program output: 13                 
Correct output: 11                  | Program output: 11                 
Correct output: 3                   | Program output: 36                 
Correct output: 50                  | Program output: 50                 
Correct output: 10                  | Program output: 38                 
Correct output: 39                  | Program output: 39                 
Correct output: 4                   | Program output: 4                  
Correct output: 7                   | Program output: 58                 
Correct output: 5                   | Program output: 55                 
Correct output: 31                  | Program output: 31                 
Correct output: 40                  | Program output: 40                 
Correct output: 5                   | Program output: 35                 
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 13                 
Correct output: 4                   | Program output: 39                 
Correct output: 22                  | Program output: 23                 
Correct output: 5                   | Program output: 5                  
Correct output: 8                   | Program output: 8                  
Correct output: 34                  | Program output: 34                 
Correct output: 30                  | Program output: 83                 
Correct output: -86                 | Program output: -86                
Correct output: -94                 | Program output: -73                
Correct output: -97                 | Program output: -97                
Correct output: -90                 | Program output: 23                 
Correct output: -71                 | Program output: -46                
Correct output: -57                 | Program output: -57                
Correct output: -56                 | Program output: -43                
Correct output: -84                 | Program output: -80                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: -82                 | Program output: -82                
Correct output: -96                 | Program output: -96                
Correct output: -11                 | Program output: -11                
Correct output: -87                 | Program output: 69                 
Correct output: -92                 | Program output: -92                
Correct output: 3                   | Program output: 43                 
Correct output: -93                 | Program output: -20                
Correct output: -97                 | Program output: 58                 
Correct output: -86                 | Program output: 43                 
Correct output: -77                 | Program output: -49                
Correct output: -86                 | Program output: -86                
Correct output: -84                 | Program output: -84                
Correct output: -6                  | Program output: 39                 
Correct output: -16                 | Program output: -16                
Correct output: -86                 | Program output: -86                
Correct output: -94                 | Program output: -60                
Correct output: -3                  | Program output: -3                 
Correct output: -86                 | Program output: -30                
Correct output: -99                 | Program output: -99                
Correct output: -37                 | Program output: -37                
Correct output: -85                 | Program output: -85                
Correct output: -80                 | Program output: -80                
Correct output: -83                 | Program output: -83                
Correct output: -39                 | Program output: -39                
Correct output: -48                 | Program output: -12                
Correct output: -72                 | Program output: -72                
Correct output: -11                 | Program output: -11                
Correct output: -71                 | Program output: 45                 
Correct output: -62                 | Program output: -62                
Correct output: -76                 | Program output: -76                
Correct output: -15                 | Program output: -15                
Correct output: -84                 | Program output: -84                
Correct output: -71                 | Program output: 9                  
Correct output: -93                 | Program output: -52                
Correct output: -51                 | Program output: -33                
Correct output: -21                 | Program output: -21                
Correct output: -90                 | Program output: -90                
Correct output: -21                 | Program output: 54                 
Correct output: -5                  | Program output: -5                 
Correct output: -13                 | Program output: -13                
Correct output: -65                 | Program output: -56                
Correct output: -64                 | Program output: -64                
Correct output: -74                 | Program output: -74                
Correct output: -60                 | Program output: 56                 
Correct output: 41                  | Program output: 49                 
Correct output: -71                 | Program output: -71                
Correct output: -2                  | Program output: -2                 
Correct output: -20                 | Program output: -20                
Correct output: -95                 | Program output: -95                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 1, :instruction boolean_shove} {:close 0, :instruction in2} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_sub} {:close 2, :instruction boolean_shove} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_if} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mod} {:close 1, :instruction in1} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction in4} {:close 1, :instruction exec_shove} {:close 0, :instruction in1} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction in1} {:close 2, :instruction integer_inc} {:close 1, :instruction exec_s} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*times})
Lexicase best program: (exec_yank in3 integer_yankdup boolean_shove in2 integer_gt integer_sub integer_dec exec_yank exec_while (boolean_stackdepth exec_k_when_autoconstructing (boolean_xor boolean_flush exec_yank integer_lte integer_sub boolean_shove) () in4 boolean_and exec_if (exec_when (in2 exec_if (integer_min print_integer exec_flush integer_dup_items exec_yank exec_yankdup) (in4 exec_empty) boolean_invert_first_then_and integer_mod in1) exec_yankdup) (boolean_eq integer_shove exec_noop) integer_mult integer_sub boolean_rot integer_div boolean_yankdup) exec_stackdepth in3 print_integer integer_yankdup boolean_swap in4 exec_shove () in1 integer_rot integer_min boolean_dup boolean_or in1 integer_inc exec_s () (integer_yankdup) (exec_noop exec_do*times ()))
Lexicase best errors: [0 0 0 0 0 1 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 76
Percent parens: 0.184
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 1, :instruction boolean_shove} {:close 0, :instruction in2} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_sub} {:close 2, :instruction boolean_shove} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_if} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mod} {:close 1, :instruction in1} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction in4} {:close 1, :instruction exec_shove} {:close 0, :instruction in1} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction in1} {:close 2, :instruction integer_inc} {:close 1, :instruction exec_s} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*times})
Zero cases best program: (exec_yank in3 integer_yankdup boolean_shove in2 integer_gt integer_sub integer_dec exec_yank exec_while (boolean_stackdepth exec_k_when_autoconstructing (boolean_xor boolean_flush exec_yank integer_lte integer_sub boolean_shove) () in4 boolean_and exec_if (exec_when (in2 exec_if (integer_min print_integer exec_flush integer_dup_items exec_yank exec_yankdup) (in4 exec_empty) boolean_invert_first_then_and integer_mod in1) exec_yankdup) (boolean_eq integer_shove exec_noop) integer_mult integer_sub boolean_rot integer_div boolean_yankdup) exec_stackdepth in3 print_integer integer_yankdup boolean_swap in4 exec_shove () in1 integer_rot integer_min boolean_dup boolean_or in1 integer_inc exec_s () (integer_yankdup) (exec_noop exec_do*times ()))
Zero cases best errors: [0 0 0 0 0 1 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 76
Percent parens: 0.184
--- Lexicase Population Statistics ---
Count of elite individuals by case: (407 415 158 219 199 165 129 358 415 221)
Population mean number of elite cases: 2.69
Count of perfect (error zero) individuals by case: (407 415 158 219 199 165 129 358 415 221)
Population mean number of perfect (error zero) cases: 2.69
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_yankdup} {:close 1, :instruction boolean_shove} {:close 0, :instruction in2} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_sub} {:close 2, :instruction boolean_shove} {:close 0, :instruction in4} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_if} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction exec_if} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mod} {:close 1, :instruction in1} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_shove} {:close 0, :instruction in1} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction in1} {:close 2, :instruction integer_inc} {:close 1, :instruction exec_s} {:close 0, :instruction exec_when} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*times})
Best program: (exec_yank in3 integer_eq integer_yankdup boolean_shove in2 integer_gt integer_sub integer_dec exec_yank exec_while (boolean_stackdepth exec_k_when_autoconstructing (boolean_or boolean_xor exec_yank integer_min integer_lte integer_sub boolean_shove) () in4 integer_lt boolean_and integer_eq exec_if (exec_when (integer_max in2 in4 exec_if (integer_min print_integer exec_flush integer_dup_items boolean_dup exec_yank exec_yankdup) (exec_empty) boolean_invert_first_then_and integer_mod in1) exec_yankdup) (boolean_eq integer_shove exec_noop) boolean_yankdup integer_mult integer_sub boolean_rot integer_div boolean_yankdup) exec_stackdepth in3 print_integer integer_yankdup exec_shove () in1 integer_rot integer_min boolean_dup boolean_or in1 integer_inc exec_s () (exec_when (integer_yankdup) exec_noop exec_do*times ()) ())
Errors: [0 0 0 0 0 1 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 68
Size: 83
Percent parens: 0.181
--- Population Statistics ---
Average total errors in population: 7.314
Median total errors in population: 8
Error averages by case: (0.593 0.585 0.842 0.781 0.801 0.835 0.871 0.642 0.585 0.779)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 71.067
Average program size in population (points): 86.02
Average percent parens in population: 0.174
Minimum age in population: 18.0
Maximum age in population: 18.0
Average age in population: 18.0
Median age in population: 18.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.01
Error (vector) diversity:			 0.042
Behavioral diversity:				 0.406
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 11245911
--- Timings ---
Current time: 1559593982312 milliseconds
Total Time:          43.6 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        21.9 seconds, 50.3%
Fitness Testing:     11.9 seconds, 27.2%
Report:               9.7 seconds, 22.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Smallest problem report - generation 19
Test total error for best: 578
Test mean error for best: 0.57800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output:                    
Correct output: -79                 | Program output: -45                
Correct output: -70                 | Program output: 74                 
Correct output: -3                  | Program output: -3                 
Correct output: -47                 | Program output: -47                
Correct output: -51                 | Program output:                    
Correct output: -37                 | Program output:                    
Correct output: -7                  | Program output:                    
Correct output: -84                 | Program output: -84                
Correct output: -68                 | Program output: -68                
Correct output: -66                 | Program output: -66                
Correct output: 64                  | Program output:                    
Correct output: -52                 | Program output: -52                
Correct output: 75                  | Program output:                    
Correct output: -47                 | Program output: -47                
Correct output: 39                  | Program output:                    
Correct output: 18                  | Program output:                    
Correct output: 13                  | Program output: 23                 
Correct output: 11                  | Program output: 11                 
Correct output: 3                   | Program output: 3                  
Correct output: 50                  | Program output:                    
Correct output: 10                  | Program output: 10                 
Correct output: 39                  | Program output:                    
Correct output: 4                   | Program output: 55                 
Correct output: 7                   | Program output:                    
Correct output: 5                   | Program output: 5                  
Correct output: 31                  | Program output:                    
Correct output: 40                  | Program output:                    
Correct output: 5                   | Program output:                    
Correct output: 12                  | Program output:                    
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 4                  
Correct output: 22                  | Program output: 22                 
Correct output: 5                   | Program output:                    
Correct output: 8                   | Program output: 8                  
Correct output: 34                  | Program output:                    
Correct output: 30                  | Program output:                    
Correct output: -86                 | Program output: -48                
Correct output: -94                 | Program output: -79                
Correct output: -97                 | Program output: -97                
Correct output: -90                 | Program output: -90                
Correct output: -71                 | Program output:                    
Correct output: -57                 | Program output: -3                 
Correct output: -56                 | Program output: -35                
Correct output: -84                 | Program output: -84                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: 29                 
Correct output: -82                 | Program output: 48                 
Correct output: -96                 | Program output: -89                
Correct output: -11                 | Program output: -11                
Correct output: -87                 | Program output: -67                
Correct output: -92                 | Program output: -92                
Correct output: 3                   | Program output: 3                  
Correct output: -93                 | Program output: -93                
Correct output: -97                 | Program output: -97                
Correct output: -86                 | Program output:                    
Correct output: -77                 | Program output: -77                
Correct output: -86                 | Program output: -6                 
Correct output: -84                 | Program output: -84                
Correct output: -6                  | Program output: -6                 
Correct output: -16                 | Program output: -16                
Correct output: -86                 | Program output: -86                
Correct output: -94                 | Program output: -94                
Correct output: -3                  | Program output:                    
Correct output: -86                 | Program output: -86                
Correct output: -99                 | Program output: -99                
Correct output: -37                 | Program output: -34                
Correct output: -85                 | Program output: 22                 
Correct output: -80                 | Program output: -47                
Correct output: -83                 | Program output: 18                 
Correct output: -39                 | Program output:                    
Correct output: -48                 | Program output: -48                
Correct output: -72                 | Program output: -9                 
Correct output: -11                 | Program output: 11                 
Correct output: -71                 | Program output: -44                
Correct output: -62                 | Program output: -61                
Correct output: -76                 | Program output: -76                
Correct output: -15                 | Program output: 38                 
Correct output: -84                 | Program output: -84                
Correct output: -71                 | Program output: -71                
Correct output: -93                 | Program output: -93                
Correct output: -51                 | Program output: -51                
Correct output: -21                 | Program output:                    
Correct output: -90                 | Program output: -46                
Correct output: -21                 | Program output:                    
Correct output: -5                  | Program output: 24                 
Correct output: -13                 | Program output: -13                
Correct output: -65                 | Program output: -65                
Correct output: -64                 | Program output: -51                
Correct output: -74                 | Program output: -74                
Correct output: -60                 | Program output: -60                
Correct output: 41                  | Program output:                    
Correct output: -71                 | Program output: 28                 
Correct output: -2                  | Program output: -2                 
Correct output: -20                 | Program output:                    
Correct output: -95                 | Program output: -76                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_sub} {:close 2, :instruction boolean_shove} {:close 0, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_and} {:close 0, :instruction in1} {:close 0, :instruction exec_if} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 1, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mod} {:close 1, :instruction in1} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_shove} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_or} {:close 1, :instruction exec_do*times} {:close 0, :instruction in1} {:close 1, :instruction exec_s} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_noop})
Lexicase best program: (exec_yank in3 integer_yankdup boolean_stackdepth integer_gt integer_sub integer_dec exec_yank boolean_stackdepth exec_k_when_autoconstructing (boolean_flush exec_yank integer_min integer_dec integer_sub boolean_shove) () in4 exec_yankdup integer_lt boolean_and in1 exec_if (exec_when (boolean_rot integer_max exec_if () (in2 exec_if (integer_min print_integer integer_dup_items boolean_dup integer_sub exec_yank exec_yankdup) (in4 boolean_invert_first_then_and integer_mod in1) exec_yankdup) boolean_eq integer_shove boolean_and integer_mult exec_noop) boolean_yankdup integer_mult integer_sub boolean_rot integer_div exec_stackdepth in3 integer_yankdup boolean_swap exec_rot (exec_shove () in2 in1 integer_min boolean_dup) (boolean_or) (exec_do*times () in1 exec_s () (integer_yankdup) (exec_noop))) ())
Lexicase best errors: [0 1 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 84
Percent parens: 0.214
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_sub} {:close 2, :instruction boolean_shove} {:close 0, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_and} {:close 0, :instruction in1} {:close 0, :instruction exec_if} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 1, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mod} {:close 1, :instruction in1} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_shove} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_or} {:close 1, :instruction exec_do*times} {:close 0, :instruction in1} {:close 1, :instruction exec_s} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_noop})
Zero cases best program: (exec_yank in3 integer_yankdup boolean_stackdepth integer_gt integer_sub integer_dec exec_yank boolean_stackdepth exec_k_when_autoconstructing (boolean_flush exec_yank integer_min integer_dec integer_sub boolean_shove) () in4 exec_yankdup integer_lt boolean_and in1 exec_if (exec_when (boolean_rot integer_max exec_if () (in2 exec_if (integer_min print_integer integer_dup_items boolean_dup integer_sub exec_yank exec_yankdup) (in4 boolean_invert_first_then_and integer_mod in1) exec_yankdup) boolean_eq integer_shove boolean_and integer_mult exec_noop) boolean_yankdup integer_mult integer_sub boolean_rot integer_div exec_stackdepth in3 integer_yankdup boolean_swap exec_rot (exec_shove () in2 in1 integer_min boolean_dup) (boolean_or) (exec_do*times () in1 exec_s () (integer_yankdup) (exec_noop))) ())
Zero cases best errors: [0 1 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 84
Percent parens: 0.214
--- Lexicase Population Statistics ---
Count of elite individuals by case: (388 118 484 463 72 432 506 385 68 450)
Population mean number of elite cases: 3.37
Count of perfect (error zero) individuals by case: (388 118 484 463 72 432 506 385 68 450)
Population mean number of perfect (error zero) cases: 3.37
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 1, :instruction boolean_shove} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_sub} {:close 2, :instruction boolean_shove} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_and} {:close 0, :instruction in1} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_mod} {:close 1, :instruction in1} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction -44} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_shove} {:close 0, :instruction in2} {:close 0, :instruction exec_dup} {:close 0, :instruction in1} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_or} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 1, :instruction exec_s} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*times})
Best program: (exec_yank in3 boolean_shove boolean_stackdepth in2 integer_gt integer_sub integer_dec exec_yank boolean_stackdepth boolean_flush exec_when (exec_yank integer_min integer_dec integer_sub boolean_shove) in4 integer_dup integer_lt boolean_and in1 boolean_pop exec_when (in2 exec_if (integer_min print_integer exec_flush integer_dup_items boolean_dup integer_sub exec_yank exec_yankdup) (in4 integer_mod in1) exec_yankdup) boolean_eq integer_shove boolean_and exec_noop boolean_yankdup integer_mult integer_sub boolean_rot integer_div exec_stackdepth -44 in3 integer_yankdup boolean_swap exec_rot (exec_shove () in2 exec_dup (in1 integer_rot) integer_min boolean_dup) (boolean_or) (exec_do*times () boolean_dup_items in1 exec_s () (integer_yankdup integer_yankdup) (exec_noop exec_do*times ())))
Errors: [0 1 0 0 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 69
Size: 84
Percent parens: 0.179
--- Population Statistics ---
Average total errors in population: 6.634
Median total errors in population: 7
Error averages by case: (0.612 0.882 0.516 0.537 0.928 0.568 0.494 0.615 0.932 0.55)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 67.152
Average program size in population (points): 82.157
Average percent parens in population: 0.182
Minimum age in population: 19.0
Maximum age in population: 19.0
Average age in population: 19.0
Median age in population: 19.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.01
Error (vector) diversity:			 0.058
Behavioral diversity:				 0.306
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 11655581
--- Timings ---
Current time: 1559593984393 milliseconds
Total Time:          45.7 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        23.1 seconds, 50.5%
Fitness Testing:     12.2 seconds, 26.8%
Report:              10.2 seconds, 22.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Smallest problem report - generation 20
Test total error for best: 420
Test mean error for best: 0.42000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -79                 | Program output: -45                
Correct output: -70                 | Program output: 74                 
Correct output: -3                  | Program output: -3                 
Correct output: -47                 | Program output: -47                
Correct output: -51                 | Program output: 45                 
Correct output: -37                 | Program output: 57                 
Correct output: -7                  | Program output: -7                 
Correct output: -84                 | Program output: -84                
Correct output: -68                 | Program output: -68                
Correct output: -66                 | Program output: -66                
Correct output: 64                  | Program output: 64                 
Correct output: -52                 | Program output: -52                
Correct output: 75                  | Program output: 75                 
Correct output: -47                 | Program output: -47                
Correct output: 39                  | Program output: 39                 
Correct output: 18                  | Program output: 18                 
Correct output: 13                  | Program output: 13                 
Correct output: 11                  | Program output: 11                 
Correct output: 3                   | Program output: 3                  
Correct output: 50                  | Program output: 50                 
Correct output: 10                  | Program output: 10                 
Correct output: 39                  | Program output: 87                 
Correct output: 4                   | Program output: 71                 
Correct output: 7                   | Program output: 7                  
Correct output: 5                   | Program output: 5                  
Correct output: 31                  | Program output: 89                 
Correct output: 40                  | Program output: 52                 
Correct output: 5                   | Program output: 5                  
Correct output: 12                  | Program output: 35                 
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 4                  
Correct output: 22                  | Program output: 22                 
Correct output: 5                   | Program output: 40                 
Correct output: 8                   | Program output: 9                  
Correct output: 34                  | Program output: 39                 
Correct output: 30                  | Program output: 30                 
Correct output: -86                 | Program output: 63                 
Correct output: -94                 | Program output: -94                
Correct output: -97                 | Program output: -68                
Correct output: -90                 | Program output: -90                
Correct output: -71                 | Program output: -71                
Correct output: -57                 | Program output: 45                 
Correct output: -56                 | Program output: -56                
Correct output: -84                 | Program output: -84                
Correct output: -99                 | Program output: 42                 
Correct output: -22                 | Program output: 58                 
Correct output: -82                 | Program output: -82                
Correct output: -96                 | Program output: -96                
Correct output: -11                 | Program output: -2                 
Correct output: -87                 | Program output: -87                
Correct output: -92                 | Program output: 21                 
Correct output: 3                   | Program output: 3                  
Correct output: -93                 | Program output: -93                
Correct output: -97                 | Program output: -97                
Correct output: -86                 | Program output: -86                
Correct output: -77                 | Program output: -77                
Correct output: -86                 | Program output: 2                  
Correct output: -84                 | Program output: -47                
Correct output: -6                  | Program output: -6                 
Correct output: -16                 | Program output: 13                 
Correct output: -86                 | Program output: -15                
Correct output: -94                 | Program output: -94                
Correct output: -3                  | Program output: 15                 
Correct output: -86                 | Program output: -86                
Correct output: -99                 | Program output: -36                
Correct output: -37                 | Program output: 22                 
Correct output: -85                 | Program output: 19                 
Correct output: -80                 | Program output: 87                 
Correct output: -83                 | Program output: -65                
Correct output: -39                 | Program output: 38                 
Correct output: -48                 | Program output: -48                
Correct output: -72                 | Program output: -72                
Correct output: -11                 | Program output: 1                  
Correct output: -71                 | Program output: -71                
Correct output: -62                 | Program output: -62                
Correct output: -76                 | Program output: -53                
Correct output: -15                 | Program output: 38                 
Correct output: -84                 | Program output: 47                 
Correct output: -71                 | Program output: -71                
Correct output: -93                 | Program output: -93                
Correct output: -51                 | Program output: -51                
Correct output: -21                 | Program output: -21                
Correct output: -90                 | Program output: -46                
Correct output: -21                 | Program output: -21                
Correct output: -5                  | Program output: 12                 
Correct output: -13                 | Program output: 11                 
Correct output: -65                 | Program output: -65                
Correct output: -64                 | Program output: -41                
Correct output: -74                 | Program output: -37                
Correct output: -60                 | Program output: -60                
Correct output: 41                  | Program output: 41                 
Correct output: -71                 | Program output: 82                 
Correct output: -2                  | Program output: 7                  
Correct output: -20                 | Program output: 6                  
Correct output: -95                 | Program output: -76                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 1, :instruction boolean_shove} {:close 0, :instruction in2} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_lte} {:close 0, :instruction print_integer} {:close 0, :instruction tag_boolean_182} {:close 2, :instruction boolean_shove} {:close 0, :instruction in4} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_if} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_max} {:close 1, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_shove} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction tag_integer_764} {:close 1, :instruction boolean_dup} {:close 0, :instruction in1} {:close 2, :instruction integer_inc} {:close 1, :instruction exec_s} {:close 0, :instruction exec_do*times})
Lexicase best program: (exec_yank in3 integer_yankdup boolean_shove in2 integer_gt integer_sub integer_div exec_yank boolean_stackdepth exec_noop exec_k_when_autoconstructing (boolean_xor boolean_flush exec_yank integer_min integer_lte print_integer tag_boolean_182 boolean_shove) () in4 integer_lt boolean_and exec_if (exec_when (exec_do*while (integer_max in1) integer_min print_integer exec_flush integer_dup_items boolean_dup exec_yank integer_pop exec_yankdup) in4 exec_empty) (boolean_invert_first_then_and exec_yankdup) exec_noop boolean_eq exec_noop boolean_yankdup integer_mult integer_sub boolean_or boolean_rot integer_div boolean_yankdup exec_stackdepth in3 print_integer integer_yankdup exec_shove () boolean_stackdepth in1 integer_min tag_integer_764 boolean_dup in1 integer_inc exec_s () (exec_do*times ()) ())
Lexicase best errors: [0 1 0 0 0 0 1 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 76
Percent parens: 0.158
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 1, :instruction boolean_shove} {:close 0, :instruction in2} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_lte} {:close 0, :instruction print_integer} {:close 0, :instruction tag_boolean_182} {:close 2, :instruction boolean_shove} {:close 0, :instruction in4} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_if} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_max} {:close 1, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_shove} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction tag_integer_764} {:close 1, :instruction boolean_dup} {:close 0, :instruction in1} {:close 2, :instruction integer_inc} {:close 1, :instruction exec_s} {:close 0, :instruction exec_do*times})
Zero cases best program: (exec_yank in3 integer_yankdup boolean_shove in2 integer_gt integer_sub integer_div exec_yank boolean_stackdepth exec_noop exec_k_when_autoconstructing (boolean_xor boolean_flush exec_yank integer_min integer_lte print_integer tag_boolean_182 boolean_shove) () in4 integer_lt boolean_and exec_if (exec_when (exec_do*while (integer_max in1) integer_min print_integer exec_flush integer_dup_items boolean_dup exec_yank integer_pop exec_yankdup) in4 exec_empty) (boolean_invert_first_then_and exec_yankdup) exec_noop boolean_eq exec_noop boolean_yankdup integer_mult integer_sub boolean_or boolean_rot integer_div boolean_yankdup exec_stackdepth in3 print_integer integer_yankdup exec_shove () boolean_stackdepth in1 integer_min tag_integer_764 boolean_dup in1 integer_inc exec_s () (exec_do*times ()) ())
Zero cases best errors: [0 1 0 0 0 0 1 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 76
Percent parens: 0.158
--- Lexicase Population Statistics ---
Count of elite individuals by case: (241 38 276 621 171 175 35 225 545 245)
Population mean number of elite cases: 2.57
Count of perfect (error zero) individuals by case: (241 38 276 621 171 175 35 225 545 245)
Population mean number of perfect (error zero) cases: 2.57
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 1, :instruction boolean_shove} {:close 0, :instruction in2} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 2, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_shove} {:close 0, :instruction in4} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_if} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 1, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_rot} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in4} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction in1} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_shove} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 2, :instruction integer_inc} {:close 1, :instruction exec_s} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_do*times})
Best program: (exec_yank in3 integer_yankdup boolean_shove in2 integer_gt integer_sub integer_dec integer_div boolean_not exec_yank boolean_stackdepth exec_k_when_autoconstructing (boolean_xor boolean_flush exec_yank integer_min boolean_dup) () print_integer boolean_shove in4 integer_lt boolean_and exec_if (exec_when (integer_max in1) integer_min print_integer exec_flush integer_dup_items boolean_dup exec_yank integer_pop boolean_rot) (exec_yankdup) boolean_yankdup in4 exec_empty boolean_invert_first_then_and in1 exec_yankdup exec_noop boolean_eq integer_shove boolean_yankdup integer_mult boolean_rot integer_div boolean_yankdup exec_stackdepth in3 print_integer integer_yankdup exec_shove () in1 integer_min boolean_dup exec_y_when_autoconstructing (in1 integer_inc) exec_s () (integer_yankdup) (exec_do*times ()))
Errors: [0 1 0 0 0 0 1 0 0 0]
Total: 2
Mean: 0.2
Genome size: 64
Size: 76
Percent parens: 0.158
--- Population Statistics ---
Average total errors in population: 7.428
Median total errors in population: 8
Error averages by case: (0.759 0.962 0.724 0.379 0.829 0.825 0.965 0.775 0.455 0.755)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 66.441
Average program size in population (points): 82.71
Average percent parens in population: 0.195
Minimum age in population: 20.0
Maximum age in population: 20.0
Average age in population: 20.0
Median age in population: 20.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.008
Error (vector) diversity:			 0.055
Behavioral diversity:				 0.308
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 12192653
--- Timings ---
Current time: 1559593986480 milliseconds
Total Time:          47.9 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        24.3 seconds, 50.7%
Fitness Testing:     12.7 seconds, 26.6%
Report:              10.8 seconds, 22.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Smallest problem report - generation 21
Test total error for best: 393
Test mean error for best: 0.39300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -79                 | Program output: -79                
Correct output: -70                 | Program output: -70                
Correct output: -3                  | Program output: -3                 
Correct output: -47                 | Program output: -47                
Correct output: -51                 | Program output: 45                 
Correct output: -37                 | Program output: 57                 
Correct output: -7                  | Program output: 77                 
Correct output: -84                 | Program output: -84                
Correct output: -68                 | Program output: -68                
Correct output: -66                 | Program output: -66                
Correct output: 64                  | Program output: 64                 
Correct output: -52                 | Program output: -52                
Correct output: 75                  | Program output: 75                 
Correct output: -47                 | Program output: -47                
Correct output: 39                  | Program output: 39                 
Correct output: 18                  | Program output: 79                 
Correct output: 13                  | Program output: 13                 
Correct output: 11                  | Program output: 11                 
Correct output: 3                   | Program output: 3                  
Correct output: 50                  | Program output: 50                 
Correct output: 10                  | Program output: 10                 
Correct output: 39                  | Program output: 53                 
Correct output: 4                   | Program output: 4                  
Correct output: 7                   | Program output: 7                  
Correct output: 5                   | Program output: 5                  
Correct output: 31                  | Program output: 82                 
Correct output: 40                  | Program output: 40                 
Correct output: 5                   | Program output: 35                 
Correct output: 12                  | Program output: 35                 
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 4                  
Correct output: 22                  | Program output: 22                 
Correct output: 5                   | Program output: 57                 
Correct output: 8                   | Program output: 9                  
Correct output: 34                  | Program output: 34                 
Correct output: 30                  | Program output: 30                 
Correct output: -86                 | Program output: -86                
Correct output: -94                 | Program output: -94                
Correct output: -97                 | Program output: -68                
Correct output: -90                 | Program output: -90                
Correct output: -71                 | Program output: -71                
Correct output: -57                 | Program output: -57                
Correct output: -56                 | Program output: -56                
Correct output: -84                 | Program output: -84                
Correct output: -99                 | Program output: -7                 
Correct output: -22                 | Program output: -22                
Correct output: -82                 | Program output: -82                
Correct output: -96                 | Program output: -96                
Correct output: -11                 | Program output: -4                 
Correct output: -87                 | Program output: -87                
Correct output: -92                 | Program output: 21                 
Correct output: 3                   | Program output: 3                  
Correct output: -93                 | Program output: -93                
Correct output: -97                 | Program output: -97                
Correct output: -86                 | Program output: -86                
Correct output: -77                 | Program output: -77                
Correct output: -86                 | Program output: -86                
Correct output: -84                 | Program output: -47                
Correct output: -6                  | Program output: -6                 
Correct output: -16                 | Program output: 13                 
Correct output: -86                 | Program output: -15                
Correct output: -94                 | Program output: -94                
Correct output: -3                  | Program output: 70                 
Correct output: -86                 | Program output: -86                
Correct output: -99                 | Program output: -36                
Correct output: -37                 | Program output: -37                
Correct output: -85                 | Program output: 19                 
Correct output: -80                 | Program output: -80                
Correct output: -83                 | Program output: -65                
Correct output: -39                 | Program output: 38                 
Correct output: -48                 | Program output: -48                
Correct output: -72                 | Program output: -7                 
Correct output: -11                 | Program output: -11                
Correct output: -71                 | Program output: -71                
Correct output: -62                 | Program output: -28                
Correct output: -76                 | Program output: -53                
Correct output: -15                 | Program output: 38                 
Correct output: -84                 | Program output: -24                
Correct output: -71                 | Program output: -71                
Correct output: -93                 | Program output: -93                
Correct output: -51                 | Program output: -51                
Correct output: -21                 | Program output: 45                 
Correct output: -90                 | Program output: -46                
Correct output: -21                 | Program output: 54                 
Correct output: -5                  | Program output: -5                 
Correct output: -13                 | Program output: 11                 
Correct output: -65                 | Program output: -65                
Correct output: -64                 | Program output: -64                
Correct output: -74                 | Program output: -37                
Correct output: -60                 | Program output: -60                
Correct output: 41                  | Program output: 41                 
Correct output: -71                 | Program output: -71                
Correct output: -2                  | Program output: 7                  
Correct output: -20                 | Program output: 6                  
Correct output: -95                 | Program output: -95                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_gte} {:close 0, :instruction in2} {:close 0, :instruction integer_max} {:close 0, :instruction in1} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_lte} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_shove} {:close 0, :instruction in4} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_if} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 1, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_while} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction in1} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_shove} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_dup} {:close 0, :instruction in1} {:close 2, :instruction integer_inc} {:close 1, :instruction exec_s} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_do*times})
Lexicase best program: (exec_yank in3 integer_yankdup boolean_shove integer_gte in2 integer_max in1 integer_gt integer_sub integer_dec exec_yank integer_mod boolean_stackdepth exec_empty exec_k_when_autoconstructing (boolean_xor exec_yank integer_min integer_lte print_integer boolean_shove) () in4 integer_lt boolean_and exec_if (exec_when (integer_max in1) integer_min print_integer exec_flush boolean_invert_second_then_and boolean_dup exec_while (exec_yank integer_pop in4 boolean_invert_first_then_and in1) exec_yankdup) (exec_noop boolean_eq integer_shove exec_noop) exec_noop boolean_yankdup integer_mult integer_sub boolean_or boolean_rot exec_stackdepth boolean_dup_times in3 print_integer integer_yankdup exec_shove () in1 integer_min boolean_dup in1 integer_inc exec_s () (integer_yankdup) (exec_do*times ()))
Lexicase best errors: [1 0 0 0 1 1 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 77
Percent parens: 0.156
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_gte} {:close 0, :instruction in2} {:close 0, :instruction integer_max} {:close 0, :instruction in1} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_lte} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_shove} {:close 0, :instruction in4} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_if} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 1, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_while} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction in1} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_shove} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_dup} {:close 0, :instruction in1} {:close 2, :instruction integer_inc} {:close 1, :instruction exec_s} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_do*times})
Zero cases best program: (exec_yank in3 integer_yankdup boolean_shove integer_gte in2 integer_max in1 integer_gt integer_sub integer_dec exec_yank integer_mod boolean_stackdepth exec_empty exec_k_when_autoconstructing (boolean_xor exec_yank integer_min integer_lte print_integer boolean_shove) () in4 integer_lt boolean_and exec_if (exec_when (integer_max in1) integer_min print_integer exec_flush boolean_invert_second_then_and boolean_dup exec_while (exec_yank integer_pop in4 boolean_invert_first_then_and in1) exec_yankdup) (exec_noop boolean_eq integer_shove exec_noop) exec_noop boolean_yankdup integer_mult integer_sub boolean_or boolean_rot exec_stackdepth boolean_dup_times in3 print_integer integer_yankdup exec_shove () in1 integer_min boolean_dup in1 integer_inc exec_s () (integer_yankdup) (exec_do*times ()))
Zero cases best errors: [1 0 0 0 1 1 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 77
Percent parens: 0.156
--- Lexicase Population Statistics ---
Count of elite individuals by case: (45 236 315 234 45 44 393 377 230 302)
Population mean number of elite cases: 2.22
Count of perfect (error zero) individuals by case: (45 236 315 234 45 44 393 377 230 302)
Population mean number of perfect (error zero) cases: 2.22
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 0, :instruction in2} {:close 0, :instruction integer_max} {:close 0, :instruction in1} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_min} {:close 2, :instruction boolean_shove} {:close 0, :instruction in4} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 1, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_while} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction in1} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_shove} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_dup} {:close 0, :instruction in1} {:close 2, :instruction integer_inc} {:close 1, :instruction exec_s} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_do*times})
Best program: (exec_yank in3 exec_empty in2 integer_max in1 integer_gt integer_sub exec_yank exec_k_when_autoconstructing (integer_add boolean_xor exec_yank integer_min integer_lte integer_min) (boolean_shove) in4 integer_lt exec_if (exec_when (integer_max in1) integer_min print_integer exec_dup (exec_flush boolean_invert_second_then_and boolean_empty) boolean_dup exec_while (integer_pop exec_yankdup) in4 boolean_invert_first_then_and in1) (exec_yankdup) exec_noop boolean_eq exec_shove () integer_shove exec_noop exec_noop boolean_yankdup integer_mult integer_sub boolean_or integer_shove boolean_yankdup exec_dup_items exec_stackdepth in3 print_integer integer_yankdup exec_shove () in1 integer_min boolean_dup in1 integer_inc exec_s () (integer_yankdup) (exec_do*times ()))
Errors: [1 0 0 0 1 1 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 63
Size: 77
Percent parens: 0.182
--- Population Statistics ---
Average total errors in population: 7.779
Median total errors in population: 8
Error averages by case: (0.955 0.764 0.685 0.766 0.955 0.956 0.607 0.623 0.77 0.698)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 65.325
Average program size in population (points): 80.986
Average percent parens in population: 0.190
Minimum age in population: 21.0
Maximum age in population: 21.0
Average age in population: 21.0
Median age in population: 21.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.008
Error (vector) diversity:			 0.055
Behavioral diversity:				 0.42
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 12719923
--- Timings ---
Current time: 1559593988661 milliseconds
Total Time:          50.0 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        25.4 seconds, 50.9%
Fitness Testing:     13.2 seconds, 26.5%
Report:              11.2 seconds, 22.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Smallest problem report - generation 22
Test total error for best: 321
Test mean error for best: 0.32100
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 1
Test Case    6 | Error: 1
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 1
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 1
Test Case   14 | Error: 1
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 1
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 1
Test Case   36 | Error: 1
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 1
Test Case   41 | Error: 1
Test Case   42 | Error: 1
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 1
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 1
Test Case   52 | Error: 0
Test Case   53 | Error: 1
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 1
Test Case   58 | Error: 1
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 1
Test Case   63 | Error: 1
Test Case   64 | Error: 0
Test Case   65 | Error: 1
Test Case   66 | Error: 1
Test Case   67 | Error: 1
Test Case   68 | Error: 1
Test Case   69 | Error: 0
Test Case   70 | Error: 1
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 1
Test Case   75 | Error: 1
Test Case   76 | Error: 0
Test Case   77 | Error: 1
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 1
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 1
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 1
Test Case   87 | Error: 0
Test Case   88 | Error: 1
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 1
Test Case   95 | Error: 1
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 1
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 1
Test Case  203 | Error: 1
Test Case  204 | Error: 1
Test Case  205 | Error: 1
Test Case  206 | Error: 0
Test Case  207 | Error: 1
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 1
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 1
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 1
Test Case  217 | Error: 1
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 1
Test Case  221 | Error: 1
Test Case  222 | Error: 0
Test Case  223 | Error: 1
Test Case  224 | Error: 1
Test Case  225 | Error: 1
Test Case  226 | Error: 1
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 1
Test Case  237 | Error: 1
Test Case  238 | Error: 1
Test Case  239 | Error: 0
Test Case  240 | Error: 1
Test Case  241 | Error: 0
Test Case  242 | Error: 1
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 1
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 1
Test Case  255 | Error: 0
Test Case  256 | Error: 1
Test Case  257 | Error: 1
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 1
Test Case  261 | Error: 0
Test Case  262 | Error: 1
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 1
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 1
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 1
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 1
Test Case  277 | Error: 0
Test Case  278 | Error: 1
Test Case  279 | Error: 0
Test Case  280 | Error: 1
Test Case  281 | Error: 1
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 1
Test Case  290 | Error: 1
Test Case  291 | Error: 0
Test Case  292 | Error: 1
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 1
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 1
Test Case  303 | Error: 1
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 1
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 1
Test Case  315 | Error: 1
Test Case  316 | Error: 0
Test Case  317 | Error: 1
Test Case  318 | Error: 1
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 1
Test Case  322 | Error: 1
Test Case  323 | Error: 1
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 1
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 1
Test Case  336 | Error: 0
Test Case  337 | Error: 1
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 1
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 1
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 1
Test Case  347 | Error: 1
Test Case  348 | Error: 1
Test Case  349 | Error: 1
Test Case  350 | Error: 1
Test Case  351 | Error: 1
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 1
Test Case  356 | Error: 0
Test Case  357 | Error: 1
Test Case  358 | Error: 1
Test Case  359 | Error: 1
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 1
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 1
Test Case  369 | Error: 0
Test Case  370 | Error: 1
Test Case  371 | Error: 1
Test Case  372 | Error: 1
Test Case  373 | Error: 0
Test Case  374 | Error: 1
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 1
Test Case  379 | Error: 1
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 1
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 1
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 1
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 1
Test Case  403 | Error: 1
Test Case  404 | Error: 0
Test Case  405 | Error: 1
Test Case  406 | Error: 1
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 1
Test Case  413 | Error: 1
Test Case  414 | Error: 0
Test Case  415 | Error: 1
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 1
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 1
Test Case  432 | Error: 1
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 1
Test Case  437 | Error: 1
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 1
Test Case  443 | Error: 1
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 1
Test Case  448 | Error: 0
Test Case  449 | Error: 1
Test Case  450 | Error: 1
Test Case  451 | Error: 1
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 1
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 1
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 1
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 1
Test Case  467 | Error: 1
Test Case  468 | Error: 1
Test Case  469 | Error: 1
Test Case  470 | Error: 1
Test Case  471 | Error: 0
Test Case  472 | Error: 1
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 1
Test Case  477 | Error: 1
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 1
Test Case  484 | Error: 0
Test Case  485 | Error: 1
Test Case  486 | Error: 1
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 1
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 1
Test Case  493 | Error: 1
Test Case  494 | Error: 1
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 1
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 1
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 1
Test Case  508 | Error: 0
Test Case  509 | Error: 1
Test Case  510 | Error: 1
Test Case  511 | Error: 1
Test Case  512 | Error: 1
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 1
Test Case  520 | Error: 0
Test Case  521 | Error: 1
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 1
Test Case  525 | Error: 1
Test Case  526 | Error: 1
Test Case  527 | Error: 1
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 1
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 1
Test Case  539 | Error: 0
Test Case  540 | Error: 1
Test Case  541 | Error: 1
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 1
Test Case  546 | Error: 0
Test Case  547 | Error: 1
Test Case  548 | Error: 1
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 1
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 1
Test Case  556 | Error: 1
Test Case  557 | Error: 0
Test Case  558 | Error: 1
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 1
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 1
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 1
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 1
Test Case  579 | Error: 1
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 1
Test Case  583 | Error: 0
Test Case  584 | Error: 1
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 1
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 1
Test Case  592 | Error: 1
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 1
Test Case  597 | Error: 0
Test Case  598 | Error: 1
Test Case  599 | Error: 1
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 1
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 1
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 1
Test Case  611 | Error: 0
Test Case  612 | Error: 1
Test Case  613 | Error: 1
Test Case  614 | Error: 1
Test Case  615 | Error: 1
Test Case  616 | Error: 1
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 1
Test Case  622 | Error: 1
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 1
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 1
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 1
Test Case  639 | Error: 0
Test Case  640 | Error: 1
Test Case  641 | Error: 1
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 1
Test Case  645 | Error: 1
Test Case  646 | Error: 1
Test Case  647 | Error: 1
Test Case  648 | Error: 1
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 1
Test Case  652 | Error: 1
Test Case  653 | Error: 1
Test Case  654 | Error: 1
Test Case  655 | Error: 1
Test Case  656 | Error: 0
Test Case  657 | Error: 1
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 1
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 1
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 1
Test Case  669 | Error: 1
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 1
Test Case  676 | Error: 1
Test Case  677 | Error: 0
Test Case  678 | Error: 1
Test Case  679 | Error: 1
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 1
Test Case  687 | Error: 0
Test Case  688 | Error: 1
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 1
Test Case  696 | Error: 1
Test Case  697 | Error: 1
Test Case  698 | Error: 1
Test Case  699 | Error: 0
Test Case  700 | Error: 1
Test Case  701 | Error: 1
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 1
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 1
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 1
Test Case  719 | Error: 0
Test Case  720 | Error: 1
Test Case  721 | Error: 1
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 1
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 1
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 1
Test Case  738 | Error: 1
Test Case  739 | Error: 1
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 1
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 1
Test Case  754 | Error: 0
Test Case  755 | Error: 1
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 1
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 1
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 1
Test Case  770 | Error: 0
Test Case  771 | Error: 1
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 1
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 1
Test Case  779 | Error: 1
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 1
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 1
Test Case  787 | Error: 1
Test Case  788 | Error: 0
Test Case  789 | Error: 1
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 1
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 1
Test Case  805 | Error: 0
Test Case  806 | Error: 1
Test Case  807 | Error: 1
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 1
Test Case  814 | Error: 0
Test Case  815 | Error: 1
Test Case  816 | Error: 1
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 1
Test Case  820 | Error: 1
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 1
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 1
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 1
Test Case  833 | Error: 1
Test Case  834 | Error: 1
Test Case  835 | Error: 1
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 1
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 1
Test Case  844 | Error: 1
Test Case  845 | Error: 0
Test Case  846 | Error: 1
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 1
Test Case  850 | Error: 0
Test Case  851 | Error: 1
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 1
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 1
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 1
Test Case  863 | Error: 1
Test Case  864 | Error: 1
Test Case  865 | Error: 1
Test Case  866 | Error: 1
Test Case  867 | Error: 1
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 1
Test Case  872 | Error: 1
Test Case  873 | Error: 1
Test Case  874 | Error: 0
Test Case  875 | Error: 1
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 1
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 1
Test Case  884 | Error: 1
Test Case  885 | Error: 0
Test Case  886 | Error: 1
Test Case  887 | Error: 1
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 1
Test Case  896 | Error: 1
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 1
Test Case  902 | Error: 0
Test Case  903 | Error: 1
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 1
Test Case  910 | Error: 1
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 1
Test Case  916 | Error: 1
Test Case  917 | Error: 0
Test Case  918 | Error: 1
Test Case  919 | Error: 0
Test Case  920 | Error: 1
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 1
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 1
Test Case  928 | Error: 0
Test Case  929 | Error: 1
Test Case  930 | Error: 1
Test Case  931 | Error: 0
Test Case  932 | Error: 1
Test Case  933 | Error: 0
Test Case  934 | Error: 1
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 1
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 1
Test Case  942 | Error: 1
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 1
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 1
Test Case  955 | Error: 1
Test Case  956 | Error: 0
Test Case  957 | Error: 1
Test Case  958 | Error: 1
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 1
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 1
Test Case  967 | Error: 0
Test Case  968 | Error: 1
Test Case  969 | Error: 1
Test Case  970 | Error: 1
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 1
Test Case  974 | Error: 1
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 1
Test Case  979 | Error: 0
Test Case  980 | Error: 1
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 1
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 1
Test Case  992 | Error: 0
Test Case  993 | Error: 1
Test Case  994 | Error: 0
Test Case  995 | Error: 1
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 1
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -79                 | Program output: -79                
Correct output: -70                 | Program output: -70                
Correct output: -3                  | Program output: -3                 
Correct output: -47                 | Program output: -47                
Correct output: -51                 | Program output: 45                 
Correct output: -37                 | Program output: 57                 
Correct output: -7                  | Program output: 77                 
Correct output: -84                 | Program output: -84                
Correct output: -68                 | Program output: -68                
Correct output: -66                 | Program output: -66                
Correct output: 64                  | Program output: 64                 
Correct output: -52                 | Program output: -52                
Correct output: 75                  | Program output: 75                 
Correct output: -47                 | Program output: -47                
Correct output: 39                  | Program output: 39                 
Correct output: 18                  | Program output: 79                 
Correct output: 13                  | Program output: 13                 
Correct output: 11                  | Program output: 11                 
Correct output: 3                   | Program output: 3                  
Correct output: 50                  | Program output: 50                 
Correct output: 10                  | Program output: 10                 
Correct output: 39                  | Program output: 53                 
Correct output: 4                   | Program output: 4                  
Correct output: 7                   | Program output: 7                  
Correct output: 5                   | Program output: 5                  
Correct output: 31                  | Program output: 82                 
Correct output: 40                  | Program output: 40                 
Correct output: 5                   | Program output: 35                 
Correct output: 12                  | Program output: 35                 
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 4                  
Correct output: 22                  | Program output: 22                 
Correct output: 5                   | Program output: 57                 
Correct output: 8                   | Program output: 9                  
Correct output: 34                  | Program output: 34                 
Correct output: 30                  | Program output: 30                 
Correct output: -86                 | Program output: -86                
Correct output: -94                 | Program output: -94                
Correct output: -97                 | Program output: -68                
Correct output: -90                 | Program output: -90                
Correct output: -71                 | Program output: -71                
Correct output: -57                 | Program output: -57                
Correct output: -56                 | Program output: -43                
Correct output: -84                 | Program output: -84                
Correct output: -99                 | Program output: -7                 
Correct output: -22                 | Program output: -22                
Correct output: -82                 | Program output: -82                
Correct output: -96                 | Program output: -96                
Correct output: -11                 | Program output: -4                 
Correct output: -87                 | Program output: -87                
Correct output: -92                 | Program output: 21                 
Correct output: 3                   | Program output: 3                  
Correct output: -93                 | Program output: -93                
Correct output: -97                 | Program output: -97                
Correct output: -86                 | Program output: 43                 
Correct output: -77                 | Program output: -77                
Correct output: -86                 | Program output: -86                
Correct output: -84                 | Program output: -47                
Correct output: -6                  | Program output: -6                 
Correct output: -16                 | Program output: 13                 
Correct output: -86                 | Program output: -15                
Correct output: -94                 | Program output: -94                
Correct output: -3                  | Program output: 70                 
Correct output: -86                 | Program output: -86                
Correct output: -99                 | Program output: -36                
Correct output: -37                 | Program output: -37                
Correct output: -85                 | Program output: -85                
Correct output: -80                 | Program output: -80                
Correct output: -83                 | Program output: -83                
Correct output: -39                 | Program output: 38                 
Correct output: -48                 | Program output: -48                
Correct output: -72                 | Program output: -7                 
Correct output: -11                 | Program output: -11                
Correct output: -71                 | Program output: -71                
Correct output: -62                 | Program output: -28                
Correct output: -76                 | Program output: -53                
Correct output: -15                 | Program output: -15                
Correct output: -84                 | Program output: -24                
Correct output: -71                 | Program output: -71                
Correct output: -93                 | Program output: -93                
Correct output: -51                 | Program output: -51                
Correct output: -21                 | Program output: 45                 
Correct output: -90                 | Program output: -90                
Correct output: -21                 | Program output: 54                 
Correct output: -5                  | Program output: -5                 
Correct output: -13                 | Program output: 11                 
Correct output: -65                 | Program output: -65                
Correct output: -64                 | Program output: -64                
Correct output: -74                 | Program output: -37                
Correct output: -60                 | Program output: -60                
Correct output: 41                  | Program output: 41                 
Correct output: -71                 | Program output: -71                
Correct output: -2                  | Program output: 7                  
Correct output: -20                 | Program output: 6                  
Correct output: -95                 | Program output: -95                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 1, :instruction boolean_shove} {:close 0, :instruction in2} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dec} {:close 2, :instruction boolean_shove} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_and} {:close 0, :instruction in1} {:close 0, :instruction exec_if} {:close 0, :instruction in4} {:close 0, :instruction exec_when} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_swap} {:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in3} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_shove} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_dup} {:close 1, :instruction exec_do*times} {:close 0, :instruction in1} {:close 1, :instruction exec_s} {:close 0, :instruction print_boolean})
Lexicase best program: (in3 integer_yankdup boolean_shove in2 integer_gt integer_sub exec_yankdup integer_stackdepth exec_yank exec_k_when_autoconstructing (in3 boolean_flush exec_yank integer_min integer_dec boolean_shove) () in4 integer_rot integer_gte integer_lt boolean_and in1 exec_if (in4 exec_when (exec_if (exec_empty) (integer_dup_times in3 integer_min print_integer exec_flush integer_dup_items exec_y (boolean_dup boolean_stackdepth integer_sub exec_yankdup) in4 boolean_invert_first_then_and integer_mod exec_swap (in1) (boolean_eq boolean_and integer_flush exec_noop) boolean_yankdup in3) integer_mult exec_shove (integer_sub boolean_empty) exec_yank in3 integer_yankdup exec_rot (exec_shove () exec_yankdup) (in2 in1 integer_gt integer_min boolean_dup) (exec_do*times () in1 exec_s () (print_boolean) ()))) ())
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 88
Percent parens: 0.227
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 1, :instruction boolean_shove} {:close 0, :instruction in2} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dec} {:close 2, :instruction boolean_shove} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_and} {:close 0, :instruction in1} {:close 0, :instruction exec_if} {:close 0, :instruction in4} {:close 0, :instruction exec_when} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_swap} {:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in3} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_shove} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_dup} {:close 1, :instruction exec_do*times} {:close 0, :instruction in1} {:close 1, :instruction exec_s} {:close 0, :instruction print_boolean})
Zero cases best program: (in3 integer_yankdup boolean_shove in2 integer_gt integer_sub exec_yankdup integer_stackdepth exec_yank exec_k_when_autoconstructing (in3 boolean_flush exec_yank integer_min integer_dec boolean_shove) () in4 integer_rot integer_gte integer_lt boolean_and in1 exec_if (in4 exec_when (exec_if (exec_empty) (integer_dup_times in3 integer_min print_integer exec_flush integer_dup_items exec_y (boolean_dup boolean_stackdepth integer_sub exec_yankdup) in4 boolean_invert_first_then_and integer_mod exec_swap (in1) (boolean_eq boolean_and integer_flush exec_noop) boolean_yankdup in3) integer_mult exec_shove (integer_sub boolean_empty) exec_yank in3 integer_yankdup exec_rot (exec_shove () exec_yankdup) (in2 in1 integer_gt integer_min boolean_dup) (exec_do*times () in1 exec_s () (print_boolean) ()))) ())
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 88
Percent parens: 0.227
--- Lexicase Population Statistics ---
Count of elite individuals by case: (310 458 354 356 300 241 466 322 502 190)
Population mean number of elite cases: 3.50
Count of perfect (error zero) individuals by case: (310 458 354 356 300 241 466 322 502 190)
Population mean number of perfect (error zero) cases: 3.50
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_max} {:close 0, :instruction in1} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_lte} {:close 2, :instruction boolean_shove} {:close 0, :instruction in4} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_if} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 1, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_while} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction in1} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_dup} {:close 0, :instruction in1} {:close 2, :instruction integer_inc} {:close 1, :instruction exec_s} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_when})
Best program: (exec_yank in3 boolean_shove integer_gte integer_max in1 integer_gt integer_sub exec_yank integer_mod boolean_stackdepth exec_empty exec_k_when_autoconstructing (boolean_xor exec_yank integer_min boolean_eq integer_lte boolean_shove) () in4 integer_lt boolean_and exec_if (exec_when (integer_max in1) integer_min print_integer boolean_yank exec_flush boolean_invert_second_then_and boolean_dup exec_while (exec_yank integer_pop in4 boolean_invert_first_then_and in1) exec_yankdup) (exec_noop boolean_eq integer_shove exec_noop integer_mult integer_sub boolean_or exec_stackdepth integer_inc) boolean_dup_times in3 print_integer exec_shove () in1 integer_min boolean_dup in1 integer_inc exec_s () (integer_yankdup) (exec_do*times (exec_when ())))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 61
Size: 74
Percent parens: 0.176
--- Population Statistics ---
Average total errors in population: 6.501
Median total errors in population: 7
Error averages by case: (0.69 0.542 0.646 0.644 0.7 0.759 0.534 0.678 0.498 0.81)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 67.688
Average program size in population (points): 85.161
Average percent parens in population: 0.202
Minimum age in population: 22.0
Maximum age in population: 22.0
Average age in population: 22.0
Median age in population: 22.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.011
Error (vector) diversity:			 0.099
Behavioral diversity:				 0.44
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 13218512
--- Timings ---
Current time: 1559593990947 milliseconds
Total Time:          52.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        26.6 seconds, 51.0%
Fitness Testing:     13.7 seconds, 26.3%
Report:              11.7 seconds, 22.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 22
Successful program: (exec_yank in3 boolean_shove integer_gte integer_max in1 integer_gt integer_sub exec_yank integer_mod boolean_stackdepth exec_empty exec_k_when_autoconstructing (boolean_xor exec_yank integer_min boolean_eq integer_lte boolean_shove) () in4 integer_lt boolean_and exec_if (exec_when (integer_max in1) integer_min print_integer boolean_yank exec_flush boolean_invert_second_then_and boolean_dup exec_while (exec_yank integer_pop in4 boolean_invert_first_then_and in1) exec_yankdup) (exec_noop boolean_eq integer_shove exec_noop integer_mult integer_sub boolean_or exec_stackdepth integer_inc) boolean_dup_times in3 print_integer exec_shove () in1 integer_min boolean_dup in1 integer_inc exec_s () (integer_yankdup) (exec_do*times (exec_when ())))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 74


Auto-simplifying with starting size: 74
step: 0
program: (exec_yank in3 boolean_shove integer_gte integer_max in1 integer_gt integer_sub exec_yank integer_mod boolean_stackdepth exec_empty exec_k_when_autoconstructing (boolean_xor exec_yank integer_min boolean_eq integer_lte boolean_shove) () in4 integer_lt boolean_and exec_if (exec_when (integer_max in1) integer_min print_integer boolean_yank exec_flush boolean_invert_second_then_and boolean_dup exec_while (exec_yank integer_pop in4 boolean_invert_first_then_and in1) exec_yankdup) (exec_noop boolean_eq integer_shove exec_noop integer_mult integer_sub boolean_or exec_stackdepth integer_inc) boolean_dup_times in3 print_integer exec_shove () in1 integer_min boolean_dup in1 integer_inc exec_s () (integer_yankdup) (exec_do*times (exec_when ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 74

step: 500
program: (exec_yank in3 boolean_shove integer_gte integer_max in1 integer_gt integer_sub exec_yank integer_mod boolean_stackdepth exec_empty exec_k_when_autoconstructing (boolean_xor exec_yank integer_min boolean_eq integer_lte boolean_shove) () in4 integer_lt boolean_and exec_if (exec_when (integer_max in1) integer_min print_integer boolean_yank exec_flush boolean_invert_second_then_and boolean_dup exec_while (exec_yank integer_pop in4 boolean_invert_first_then_and in1) exec_yankdup) (exec_noop boolean_eq integer_shove exec_noop integer_mult integer_sub boolean_or exec_stackdepth integer_inc) boolean_dup_times in3 print_integer exec_shove () in1 integer_min boolean_dup in1 integer_inc exec_s () (integer_yankdup) (exec_do*times (exec_when ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 74

step: 1000
program: (exec_yank in3 boolean_shove integer_gte integer_max in1 integer_gt integer_sub exec_yank integer_mod boolean_stackdepth exec_empty exec_k_when_autoconstructing (boolean_xor exec_yank integer_min boolean_eq integer_lte boolean_shove) () in4 integer_lt boolean_and exec_if (exec_when (integer_max in1) integer_min print_integer boolean_yank exec_flush boolean_invert_second_then_and boolean_dup exec_while (exec_yank integer_pop in4 boolean_invert_first_then_and in1) exec_yankdup) (exec_noop boolean_eq integer_shove exec_noop integer_mult integer_sub boolean_or exec_stackdepth integer_inc) boolean_dup_times in3 print_integer exec_shove () in1 integer_min boolean_dup in1 integer_inc exec_s () (integer_yankdup) (exec_do*times (exec_when ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 74

step: 1500
program: (exec_yank in3 boolean_shove integer_gte integer_max in1 integer_gt integer_sub exec_yank integer_mod boolean_stackdepth exec_empty exec_k_when_autoconstructing (boolean_xor exec_yank integer_min boolean_eq integer_lte boolean_shove) () in4 integer_lt boolean_and exec_if (exec_when (integer_max in1) integer_min print_integer boolean_yank exec_flush boolean_invert_second_then_and boolean_dup exec_while (exec_yank integer_pop in4 boolean_invert_first_then_and in1) exec_yankdup) (exec_noop boolean_eq integer_shove exec_noop integer_mult integer_sub boolean_or exec_stackdepth integer_inc) boolean_dup_times in3 print_integer exec_shove () in1 integer_min boolean_dup in1 integer_inc exec_s () (integer_yankdup) (exec_do*times (exec_when ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 74

step: 2000
program: (exec_yank in3 boolean_shove integer_gte integer_max in1 integer_gt integer_sub exec_yank integer_mod boolean_stackdepth exec_empty exec_k_when_autoconstructing (boolean_xor exec_yank integer_min boolean_eq integer_lte boolean_shove) () in4 integer_lt boolean_and exec_if (exec_when (integer_max in1) integer_min print_integer boolean_yank exec_flush boolean_invert_second_then_and boolean_dup exec_while (exec_yank integer_pop in4 boolean_invert_first_then_and in1) exec_yankdup) (exec_noop boolean_eq integer_shove exec_noop integer_mult integer_sub boolean_or exec_stackdepth integer_inc) boolean_dup_times in3 print_integer exec_shove () in1 integer_min boolean_dup in1 integer_inc exec_s () (integer_yankdup) (exec_do*times (exec_when ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 74

step: 2500
program: (exec_yank in3 boolean_shove integer_gte integer_max in1 integer_gt integer_sub exec_yank integer_mod boolean_stackdepth exec_empty exec_k_when_autoconstructing (boolean_xor exec_yank integer_min boolean_eq integer_lte boolean_shove) () in4 integer_lt boolean_and exec_if (exec_when (integer_max in1) integer_min print_integer boolean_yank exec_flush boolean_invert_second_then_and boolean_dup exec_while (exec_yank integer_pop in4 boolean_invert_first_then_and in1) exec_yankdup) (exec_noop boolean_eq integer_shove exec_noop integer_mult integer_sub boolean_or exec_stackdepth integer_inc) boolean_dup_times in3 print_integer exec_shove () in1 integer_min boolean_dup in1 integer_inc exec_s () (integer_yankdup) (exec_do*times (exec_when ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 74

step: 3000
program: (exec_yank in3 boolean_shove integer_gte integer_max in1 integer_gt integer_sub exec_yank integer_mod boolean_stackdepth exec_empty exec_k_when_autoconstructing (boolean_xor exec_yank integer_min boolean_eq integer_lte boolean_shove) () in4 integer_lt boolean_and exec_if (exec_when (integer_max in1) integer_min print_integer boolean_yank exec_flush boolean_invert_second_then_and boolean_dup exec_while (exec_yank integer_pop in4 boolean_invert_first_then_and in1) exec_yankdup) (exec_noop boolean_eq integer_shove exec_noop integer_mult integer_sub boolean_or exec_stackdepth integer_inc) boolean_dup_times in3 print_integer exec_shove () in1 integer_min boolean_dup in1 integer_inc exec_s () (integer_yankdup) (exec_do*times (exec_when ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 74

step: 3500
program: (exec_yank in3 boolean_shove integer_gte integer_max in1 integer_gt integer_sub exec_yank integer_mod boolean_stackdepth exec_empty exec_k_when_autoconstructing (boolean_xor exec_yank integer_min boolean_eq integer_lte boolean_shove) () in4 integer_lt boolean_and exec_if (exec_when (integer_max in1) integer_min print_integer boolean_yank exec_flush boolean_invert_second_then_and boolean_dup exec_while (exec_yank integer_pop in4 boolean_invert_first_then_and in1) exec_yankdup) (exec_noop boolean_eq integer_shove exec_noop integer_mult integer_sub boolean_or exec_stackdepth integer_inc) boolean_dup_times in3 print_integer exec_shove () in1 integer_min boolean_dup in1 integer_inc exec_s () (integer_yankdup) (exec_do*times (exec_when ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 74

step: 4000
program: (exec_yank in3 boolean_shove integer_gte integer_max in1 integer_gt integer_sub exec_yank integer_mod boolean_stackdepth exec_empty exec_k_when_autoconstructing (boolean_xor exec_yank integer_min boolean_eq integer_lte boolean_shove) () in4 integer_lt boolean_and exec_if (exec_when (integer_max in1) integer_min print_integer boolean_yank exec_flush boolean_invert_second_then_and boolean_dup exec_while (exec_yank integer_pop in4 boolean_invert_first_then_and in1) exec_yankdup) (exec_noop boolean_eq integer_shove exec_noop integer_mult integer_sub boolean_or exec_stackdepth integer_inc) boolean_dup_times in3 print_integer exec_shove () in1 integer_min boolean_dup in1 integer_inc exec_s () (integer_yankdup) (exec_do*times (exec_when ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 74

step: 4500
program: (exec_yank in3 boolean_shove integer_gte integer_max in1 integer_gt integer_sub exec_yank integer_mod boolean_stackdepth exec_empty exec_k_when_autoconstructing (boolean_xor exec_yank integer_min boolean_eq integer_lte boolean_shove) () in4 integer_lt boolean_and exec_if (exec_when (integer_max in1) integer_min print_integer boolean_yank exec_flush boolean_invert_second_then_and boolean_dup exec_while (exec_yank integer_pop in4 boolean_invert_first_then_and in1) exec_yankdup) (exec_noop boolean_eq integer_shove exec_noop integer_mult integer_sub boolean_or exec_stackdepth integer_inc) boolean_dup_times in3 print_integer exec_shove () in1 integer_min boolean_dup in1 integer_inc exec_s () (integer_yankdup) (exec_do*times (exec_when ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 74

step: 5000
program: (exec_yank in3 boolean_shove integer_gte integer_max in1 integer_gt integer_sub exec_yank integer_mod boolean_stackdepth exec_empty exec_k_when_autoconstructing (boolean_xor exec_yank integer_min boolean_eq integer_lte boolean_shove) () in4 integer_lt boolean_and exec_if (exec_when (integer_max in1) integer_min print_integer boolean_yank exec_flush boolean_invert_second_then_and boolean_dup exec_while (exec_yank integer_pop in4 boolean_invert_first_then_and in1) exec_yankdup) (exec_noop boolean_eq integer_shove exec_noop integer_mult integer_sub boolean_or exec_stackdepth integer_inc) boolean_dup_times in3 print_integer exec_shove () in1 integer_min boolean_dup in1 integer_inc exec_s () (integer_yankdup) (exec_do*times (exec_when ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 74

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 22
Test total error for best: 321
Test mean error for best: 0.32100
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 1
Test Case    6 | Error: 1
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 1
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 1
Test Case   14 | Error: 1
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 1
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 1
Test Case   36 | Error: 1
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 1
Test Case   41 | Error: 1
Test Case   42 | Error: 1
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 1
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 1
Test Case   52 | Error: 0
Test Case   53 | Error: 1
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 1
Test Case   58 | Error: 1
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 1
Test Case   63 | Error: 1
Test Case   64 | Error: 0
Test Case   65 | Error: 1
Test Case   66 | Error: 1
Test Case   67 | Error: 1
Test Case   68 | Error: 1
Test Case   69 | Error: 0
Test Case   70 | Error: 1
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 1
Test Case   75 | Error: 1
Test Case   76 | Error: 0
Test Case   77 | Error: 1
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 1
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 1
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 1
Test Case   87 | Error: 0
Test Case   88 | Error: 1
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 1
Test Case   95 | Error: 1
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 1
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 1
Test Case  203 | Error: 1
Test Case  204 | Error: 1
Test Case  205 | Error: 1
Test Case  206 | Error: 0
Test Case  207 | Error: 1
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 1
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 1
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 1
Test Case  217 | Error: 1
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 1
Test Case  221 | Error: 1
Test Case  222 | Error: 0
Test Case  223 | Error: 1
Test Case  224 | Error: 1
Test Case  225 | Error: 1
Test Case  226 | Error: 1
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 1
Test Case  237 | Error: 1
Test Case  238 | Error: 1
Test Case  239 | Error: 0
Test Case  240 | Error: 1
Test Case  241 | Error: 0
Test Case  242 | Error: 1
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 1
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 1
Test Case  255 | Error: 0
Test Case  256 | Error: 1
Test Case  257 | Error: 1
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 1
Test Case  261 | Error: 0
Test Case  262 | Error: 1
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 1
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 1
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 1
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 1
Test Case  277 | Error: 0
Test Case  278 | Error: 1
Test Case  279 | Error: 0
Test Case  280 | Error: 1
Test Case  281 | Error: 1
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 1
Test Case  290 | Error: 1
Test Case  291 | Error: 0
Test Case  292 | Error: 1
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 1
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 1
Test Case  303 | Error: 1
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 1
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 1
Test Case  315 | Error: 1
Test Case  316 | Error: 0
Test Case  317 | Error: 1
Test Case  318 | Error: 1
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 1
Test Case  322 | Error: 1
Test Case  323 | Error: 1
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 1
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 1
Test Case  336 | Error: 0
Test Case  337 | Error: 1
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 1
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 1
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 1
Test Case  347 | Error: 1
Test Case  348 | Error: 1
Test Case  349 | Error: 1
Test Case  350 | Error: 1
Test Case  351 | Error: 1
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 1
Test Case  356 | Error: 0
Test Case  357 | Error: 1
Test Case  358 | Error: 1
Test Case  359 | Error: 1
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 1
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 1
Test Case  369 | Error: 0
Test Case  370 | Error: 1
Test Case  371 | Error: 1
Test Case  372 | Error: 1
Test Case  373 | Error: 0
Test Case  374 | Error: 1
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 1
Test Case  379 | Error: 1
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 1
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 1
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 1
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 1
Test Case  403 | Error: 1
Test Case  404 | Error: 0
Test Case  405 | Error: 1
Test Case  406 | Error: 1
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 1
Test Case  413 | Error: 1
Test Case  414 | Error: 0
Test Case  415 | Error: 1
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 1
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 1
Test Case  432 | Error: 1
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 1
Test Case  437 | Error: 1
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 1
Test Case  443 | Error: 1
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 1
Test Case  448 | Error: 0
Test Case  449 | Error: 1
Test Case  450 | Error: 1
Test Case  451 | Error: 1
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 1
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 1
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 1
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 1
Test Case  467 | Error: 1
Test Case  468 | Error: 1
Test Case  469 | Error: 1
Test Case  470 | Error: 1
Test Case  471 | Error: 0
Test Case  472 | Error: 1
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 1
Test Case  477 | Error: 1
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 1
Test Case  484 | Error: 0
Test Case  485 | Error: 1
Test Case  486 | Error: 1
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 1
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 1
Test Case  493 | Error: 1
Test Case  494 | Error: 1
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 1
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 1
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 1
Test Case  508 | Error: 0
Test Case  509 | Error: 1
Test Case  510 | Error: 1
Test Case  511 | Error: 1
Test Case  512 | Error: 1
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 1
Test Case  520 | Error: 0
Test Case  521 | Error: 1
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 1
Test Case  525 | Error: 1
Test Case  526 | Error: 1
Test Case  527 | Error: 1
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 1
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 1
Test Case  539 | Error: 0
Test Case  540 | Error: 1
Test Case  541 | Error: 1
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 1
Test Case  546 | Error: 0
Test Case  547 | Error: 1
Test Case  548 | Error: 1
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 1
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 1
Test Case  556 | Error: 1
Test Case  557 | Error: 0
Test Case  558 | Error: 1
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 1
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 1
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 1
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 1
Test Case  579 | Error: 1
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 1
Test Case  583 | Error: 0
Test Case  584 | Error: 1
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 1
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 1
Test Case  592 | Error: 1
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 1
Test Case  597 | Error: 0
Test Case  598 | Error: 1
Test Case  599 | Error: 1
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 1
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 1
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 1
Test Case  611 | Error: 0
Test Case  612 | Error: 1
Test Case  613 | Error: 1
Test Case  614 | Error: 1
Test Case  615 | Error: 1
Test Case  616 | Error: 1
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 1
Test Case  622 | Error: 1
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 1
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 1
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 1
Test Case  639 | Error: 0
Test Case  640 | Error: 1
Test Case  641 | Error: 1
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 1
Test Case  645 | Error: 1
Test Case  646 | Error: 1
Test Case  647 | Error: 1
Test Case  648 | Error: 1
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 1
Test Case  652 | Error: 1
Test Case  653 | Error: 1
Test Case  654 | Error: 1
Test Case  655 | Error: 1
Test Case  656 | Error: 0
Test Case  657 | Error: 1
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 1
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 1
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 1
Test Case  669 | Error: 1
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 1
Test Case  676 | Error: 1
Test Case  677 | Error: 0
Test Case  678 | Error: 1
Test Case  679 | Error: 1
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 1
Test Case  687 | Error: 0
Test Case  688 | Error: 1
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 1
Test Case  696 | Error: 1
Test Case  697 | Error: 1
Test Case  698 | Error: 1
Test Case  699 | Error: 0
Test Case  700 | Error: 1
Test Case  701 | Error: 1
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 1
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 1
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 1
Test Case  719 | Error: 0
Test Case  720 | Error: 1
Test Case  721 | Error: 1
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 1
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 1
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 1
Test Case  738 | Error: 1
Test Case  739 | Error: 1
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 1
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 1
Test Case  754 | Error: 0
Test Case  755 | Error: 1
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 1
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 1
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 1
Test Case  770 | Error: 0
Test Case  771 | Error: 1
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 1
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 1
Test Case  779 | Error: 1
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 1
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 1
Test Case  787 | Error: 1
Test Case  788 | Error: 0
Test Case  789 | Error: 1
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 1
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 1
Test Case  805 | Error: 0
Test Case  806 | Error: 1
Test Case  807 | Error: 1
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 1
Test Case  814 | Error: 0
Test Case  815 | Error: 1
Test Case  816 | Error: 1
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 1
Test Case  820 | Error: 1
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 1
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 1
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 1
Test Case  833 | Error: 1
Test Case  834 | Error: 1
Test Case  835 | Error: 1
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 1
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 1
Test Case  844 | Error: 1
Test Case  845 | Error: 0
Test Case  846 | Error: 1
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 1
Test Case  850 | Error: 0
Test Case  851 | Error: 1
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 1
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 1
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 1
Test Case  863 | Error: 1
Test Case  864 | Error: 1
Test Case  865 | Error: 1
Test Case  866 | Error: 1
Test Case  867 | Error: 1
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 1
Test Case  872 | Error: 1
Test Case  873 | Error: 1
Test Case  874 | Error: 0
Test Case  875 | Error: 1
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 1
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 1
Test Case  884 | Error: 1
Test Case  885 | Error: 0
Test Case  886 | Error: 1
Test Case  887 | Error: 1
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 1
Test Case  896 | Error: 1
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 1
Test Case  902 | Error: 0
Test Case  903 | Error: 1
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 1
Test Case  910 | Error: 1
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 1
Test Case  916 | Error: 1
Test Case  917 | Error: 0
Test Case  918 | Error: 1
Test Case  919 | Error: 0
Test Case  920 | Error: 1
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 1
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 1
Test Case  928 | Error: 0
Test Case  929 | Error: 1
Test Case  930 | Error: 1
Test Case  931 | Error: 0
Test Case  932 | Error: 1
Test Case  933 | Error: 0
Test Case  934 | Error: 1
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 1
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 1
Test Case  942 | Error: 1
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 1
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 1
Test Case  955 | Error: 1
Test Case  956 | Error: 0
Test Case  957 | Error: 1
Test Case  958 | Error: 1
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 1
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 1
Test Case  967 | Error: 0
Test Case  968 | Error: 1
Test Case  969 | Error: 1
Test Case  970 | Error: 1
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 1
Test Case  974 | Error: 1
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 1
Test Case  979 | Error: 0
Test Case  980 | Error: 1
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 1
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 1
Test Case  992 | Error: 0
Test Case  993 | Error: 1
Test Case  994 | Error: 0
Test Case  995 | Error: 1
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 1
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -79                 | Program output: -79                
Correct output: -70                 | Program output: -70                
Correct output: -3                  | Program output: -3                 
Correct output: -47                 | Program output: -47                
Correct output: -51                 | Program output: 45                 
Correct output: -37                 | Program output: 57                 
Correct output: -7                  | Program output: 77                 
Correct output: -84                 | Program output: -84                
Correct output: -68                 | Program output: -68                
Correct output: -66                 | Program output: -66                
Correct output: 64                  | Program output: 64                 
Correct output: -52                 | Program output: -52                
Correct output: 75                  | Program output: 75                 
Correct output: -47                 | Program output: -47                
Correct output: 39                  | Program output: 39                 
Correct output: 18                  | Program output: 79                 
Correct output: 13                  | Program output: 13                 
Correct output: 11                  | Program output: 11                 
Correct output: 3                   | Program output: 3                  
Correct output: 50                  | Program output: 50                 
Correct output: 10                  | Program output: 10                 
Correct output: 39                  | Program output: 53                 
Correct output: 4                   | Program output: 4                  
Correct output: 7                   | Program output: 7                  
Correct output: 5                   | Program output: 5                  
Correct output: 31                  | Program output: 82                 
Correct output: 40                  | Program output: 40                 
Correct output: 5                   | Program output: 35                 
Correct output: 12                  | Program output: 35                 
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 4                  
Correct output: 22                  | Program output: 22                 
Correct output: 5                   | Program output: 57                 
Correct output: 8                   | Program output: 9                  
Correct output: 34                  | Program output: 34                 
Correct output: 30                  | Program output: 30                 
Correct output: -86                 | Program output: -86                
Correct output: -94                 | Program output: -94                
Correct output: -97                 | Program output: -68                
Correct output: -90                 | Program output: -90                
Correct output: -71                 | Program output: -71                
Correct output: -57                 | Program output: -57                
Correct output: -56                 | Program output: -43                
Correct output: -84                 | Program output: -84                
Correct output: -99                 | Program output: -7                 
Correct output: -22                 | Program output: -22                
Correct output: -82                 | Program output: -82                
Correct output: -96                 | Program output: -96                
Correct output: -11                 | Program output: -4                 
Correct output: -87                 | Program output: -87                
Correct output: -92                 | Program output: 21                 
Correct output: 3                   | Program output: 3                  
Correct output: -93                 | Program output: -93                
Correct output: -97                 | Program output: -97                
Correct output: -86                 | Program output: 43                 
Correct output: -77                 | Program output: -77                
Correct output: -86                 | Program output: -86                
Correct output: -84                 | Program output: -47                
Correct output: -6                  | Program output: -6                 
Correct output: -16                 | Program output: 13                 
Correct output: -86                 | Program output: -15                
Correct output: -94                 | Program output: -94                
Correct output: -3                  | Program output: 70                 
Correct output: -86                 | Program output: -86                
Correct output: -99                 | Program output: -36                
Correct output: -37                 | Program output: -37                
Correct output: -85                 | Program output: -85                
Correct output: -80                 | Program output: -80                
Correct output: -83                 | Program output: -83                
Correct output: -39                 | Program output: 38                 
Correct output: -48                 | Program output: -48                
Correct output: -72                 | Program output: -7                 
Correct output: -11                 | Program output: -11                
Correct output: -71                 | Program output: -71                
Correct output: -62                 | Program output: -28                
Correct output: -76                 | Program output: -53                
Correct output: -15                 | Program output: -15                
Correct output: -84                 | Program output: -24                
Correct output: -71                 | Program output: -71                
Correct output: -93                 | Program output: -93                
Correct output: -51                 | Program output: -51                
Correct output: -21                 | Program output: 45                 
Correct output: -90                 | Program output: -90                
Correct output: -21                 | Program output: 54                 
Correct output: -5                  | Program output: -5                 
Correct output: -13                 | Program output: 11                 
Correct output: -65                 | Program output: -65                
Correct output: -64                 | Program output: -64                
Correct output: -74                 | Program output: -37                
Correct output: -60                 | Program output: -60                
Correct output: 41                  | Program output: 41                 
Correct output: -71                 | Program output: -71                
Correct output: -2                  | Program output: 7                  
Correct output: -20                 | Program output: 6                  
Correct output: -95                 | Program output: -95                
;;******************************
