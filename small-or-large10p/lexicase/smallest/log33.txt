Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 3000 :genetic-operator-probabilities {:uniform-addition-and-deletion,1.0} :uniform-addition-and-deletion-rate 0.09
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:uniform-addition-and-deletion 1.0}
max-error = 1
max-generations = 3000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-68 -68 12 -68] -68] [[-12 -11 -12 -12] -12] [[-5 -5 -5 -100] -100] [[-26 -26 -84 -26] -84] [[-53 -66 -53 -53] -66] [[56 56 -43 56] -43] [[-92 -92 -55 -92] -92] [[7 7 7 77] 7] [[-11 -11 -80 -11] -80] [[-51 -51 -74 -51] -74] [(-47 -47 -47 -47) -47] [(-13 -13 -13 -13) -13] [(20 20 20 20) 20] [(-26 -26 -26 -26) -26] [(76 76 76 76) 76] [(59 26 5 36) 5] [(16 52 36 48) 16] [(30 68 14 12) 12] [(59 17 100 21) 17] [(37 82 13 100) 13] [(72 91 71 96) 71] [(81 8 69 45) 8] [(2 13 1 36) 1] [(71 68 90 80) 68] [(33 58 98 1) 1] [(59 74 38 71) 38] [(89 20 69 18) 18] [(32 25 21 30) 21] [(71 49 50 41) 41] [(12 21 100 58) 12] [(65 39 68 3) 3] [(33 47 19 29) 19] [(33 57 53 19) 19] [(49 46 18 7) 7] [(60 59 34 52) 34] [(-58 -78 -80 80) -80] [(63 -14 46 58) -14] [(-20 -84 47 94) -84] [(-75 -58 -63 88) -75] [(1 -68 -46 -70) -70] [(33 -69 -59 -75) -75] [(48 32 -60 -11) -60] [(-70 87 -98 0) -98] [(-72 -66 48 -94) -94] [(50 59 -16 59) -16] [(-55 83 -10 83) -55] [(13 68 54 -55) -55] [(55 -76 22 11) -76] [(16 44 -4 43) -4] [(-5 -90 -53 21) -90] [(-12 -39 -33 -34) -39] [(-79 65 -52 77) -79] [(-42 -13 -29 -72) -72] [(-85 -58 90 98) -85] [(-80 -80 97 -91) -91] [(-20 -58 -33 50) -58] [(54 34 43 83) 34] [(38 90 -6 37) -6] [(84 -70 -70 -74) -74] [(-28 12 -47 -30) -47] [(68 -85 62 -84) -85] [(-68 91 53 91) -68] [(-91 67 6 -4) -91] [(-25 97 -78 85) -78] [(9 -95 72 -37) -95] [(-84 4 -91 45) -91] [(60 10 59 -25) -25] [(-23 -92 94 6) -92] [(60 -63 68 5) -63] [(-10 -89 70 4) -89] [(100 70 -44 -29) -44] [(51 68 -66 -48) -66] [(-51 98 -67 24) -67] [(-21 61 -69 -84) -84] [(-68 84 24 -40) -68] [(40 41 30 -26) -26] [(53 -92 45 -19) -92] [(32 -20 -40 11) -40] [(-91 -75 92 -22) -91] [(22 -56 -84 -56) -84] [(-37 -54 44 85) -54] [(91 73 -14 -36) -36] [(-17 0 -20 38) -20] [(90 87 -54 92) -54] [(-6 80 -54 75) -54] [(-71 -98 25 -65) -98] [(-93 50 -53 -95) -95] [(-39 -65 70 -27) -65] [(-68 4 4 -55) -68] [(-36 95 19 35) -36] [(26 19 82 -14) -14] [(79 -65 -98 60) -98] [(-22 87 -64 40) -64] [(-76 -15 77 27) -76] [(58 68 29 23) 23])
uniform-addition-and-deletion-rate = 0.09
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[-68 -68 12 -68] -68]
Train Case:   6 | Input/Output: [[-12 -11 -12 -12] -12]
Train Case:   7 | Input/Output: [[-5 -5 -5 -100] -100]
Train Case:   8 | Input/Output: [[-26 -26 -84 -26] -84]
Train Case:   9 | Input/Output: [[-53 -66 -53 -53] -66]
Train Case:  10 | Input/Output: [[56 56 -43 56] -43]
Train Case:  11 | Input/Output: [[-92 -92 -55 -92] -92]
Train Case:  12 | Input/Output: [[7 7 7 77] 7]
Train Case:  13 | Input/Output: [[-11 -11 -80 -11] -80]
Train Case:  14 | Input/Output: [[-51 -51 -74 -51] -74]
Train Case:  15 | Input/Output: [(-47 -47 -47 -47) -47]
Train Case:  16 | Input/Output: [(-13 -13 -13 -13) -13]
Train Case:  17 | Input/Output: [(20 20 20 20) 20]
Train Case:  18 | Input/Output: [(-26 -26 -26 -26) -26]
Train Case:  19 | Input/Output: [(76 76 76 76) 76]
Train Case:  20 | Input/Output: [(59 26 5 36) 5]
Train Case:  21 | Input/Output: [(16 52 36 48) 16]
Train Case:  22 | Input/Output: [(30 68 14 12) 12]
Train Case:  23 | Input/Output: [(59 17 100 21) 17]
Train Case:  24 | Input/Output: [(37 82 13 100) 13]
Train Case:  25 | Input/Output: [(72 91 71 96) 71]
Train Case:  26 | Input/Output: [(81 8 69 45) 8]
Train Case:  27 | Input/Output: [(2 13 1 36) 1]
Train Case:  28 | Input/Output: [(71 68 90 80) 68]
Train Case:  29 | Input/Output: [(33 58 98 1) 1]
Train Case:  30 | Input/Output: [(59 74 38 71) 38]
Train Case:  31 | Input/Output: [(89 20 69 18) 18]
Train Case:  32 | Input/Output: [(32 25 21 30) 21]
Train Case:  33 | Input/Output: [(71 49 50 41) 41]
Train Case:  34 | Input/Output: [(12 21 100 58) 12]
Train Case:  35 | Input/Output: [(65 39 68 3) 3]
Train Case:  36 | Input/Output: [(33 47 19 29) 19]
Train Case:  37 | Input/Output: [(33 57 53 19) 19]
Train Case:  38 | Input/Output: [(49 46 18 7) 7]
Train Case:  39 | Input/Output: [(60 59 34 52) 34]
Train Case:  40 | Input/Output: [(-58 -78 -80 80) -80]
Train Case:  41 | Input/Output: [(63 -14 46 58) -14]
Train Case:  42 | Input/Output: [(-20 -84 47 94) -84]
Train Case:  43 | Input/Output: [(-75 -58 -63 88) -75]
Train Case:  44 | Input/Output: [(1 -68 -46 -70) -70]
Train Case:  45 | Input/Output: [(33 -69 -59 -75) -75]
Train Case:  46 | Input/Output: [(48 32 -60 -11) -60]
Train Case:  47 | Input/Output: [(-70 87 -98 0) -98]
Train Case:  48 | Input/Output: [(-72 -66 48 -94) -94]
Train Case:  49 | Input/Output: [(50 59 -16 59) -16]
Train Case:  50 | Input/Output: [(-55 83 -10 83) -55]
Train Case:  51 | Input/Output: [(13 68 54 -55) -55]
Train Case:  52 | Input/Output: [(55 -76 22 11) -76]
Train Case:  53 | Input/Output: [(16 44 -4 43) -4]
Train Case:  54 | Input/Output: [(-5 -90 -53 21) -90]
Train Case:  55 | Input/Output: [(-12 -39 -33 -34) -39]
Train Case:  56 | Input/Output: [(-79 65 -52 77) -79]
Train Case:  57 | Input/Output: [(-42 -13 -29 -72) -72]
Train Case:  58 | Input/Output: [(-85 -58 90 98) -85]
Train Case:  59 | Input/Output: [(-80 -80 97 -91) -91]
Train Case:  60 | Input/Output: [(-20 -58 -33 50) -58]
Train Case:  61 | Input/Output: [(54 34 43 83) 34]
Train Case:  62 | Input/Output: [(38 90 -6 37) -6]
Train Case:  63 | Input/Output: [(84 -70 -70 -74) -74]
Train Case:  64 | Input/Output: [(-28 12 -47 -30) -47]
Train Case:  65 | Input/Output: [(68 -85 62 -84) -85]
Train Case:  66 | Input/Output: [(-68 91 53 91) -68]
Train Case:  67 | Input/Output: [(-91 67 6 -4) -91]
Train Case:  68 | Input/Output: [(-25 97 -78 85) -78]
Train Case:  69 | Input/Output: [(9 -95 72 -37) -95]
Train Case:  70 | Input/Output: [(-84 4 -91 45) -91]
Train Case:  71 | Input/Output: [(60 10 59 -25) -25]
Train Case:  72 | Input/Output: [(-23 -92 94 6) -92]
Train Case:  73 | Input/Output: [(60 -63 68 5) -63]
Train Case:  74 | Input/Output: [(-10 -89 70 4) -89]
Train Case:  75 | Input/Output: [(100 70 -44 -29) -44]
Train Case:  76 | Input/Output: [(51 68 -66 -48) -66]
Train Case:  77 | Input/Output: [(-51 98 -67 24) -67]
Train Case:  78 | Input/Output: [(-21 61 -69 -84) -84]
Train Case:  79 | Input/Output: [(-68 84 24 -40) -68]
Train Case:  80 | Input/Output: [(40 41 30 -26) -26]
Train Case:  81 | Input/Output: [(53 -92 45 -19) -92]
Train Case:  82 | Input/Output: [(32 -20 -40 11) -40]
Train Case:  83 | Input/Output: [(-91 -75 92 -22) -91]
Train Case:  84 | Input/Output: [(22 -56 -84 -56) -84]
Train Case:  85 | Input/Output: [(-37 -54 44 85) -54]
Train Case:  86 | Input/Output: [(91 73 -14 -36) -36]
Train Case:  87 | Input/Output: [(-17 0 -20 38) -20]
Train Case:  88 | Input/Output: [(90 87 -54 92) -54]
Train Case:  89 | Input/Output: [(-6 80 -54 75) -54]
Train Case:  90 | Input/Output: [(-71 -98 25 -65) -98]
Train Case:  91 | Input/Output: [(-93 50 -53 -95) -95]
Train Case:  92 | Input/Output: [(-39 -65 70 -27) -65]
Train Case:  93 | Input/Output: [(-68 4 4 -55) -68]
Train Case:  94 | Input/Output: [(-36 95 19 35) -36]
Train Case:  95 | Input/Output: [(26 19 82 -14) -14]
Train Case:  96 | Input/Output: [(79 -65 -98 60) -98]
Train Case:  97 | Input/Output: [(-22 87 -64 40) -64]
Train Case:  98 | Input/Output: [(-76 -15 77 27) -76]
Train Case:  99 | Input/Output: [(58 68 29 23) 23]
Test Case:   0 | Input/Output: [[-81 -81 19 -81] -81]
Test Case:   1 | Input/Output: [[-66 -28 -66 -66] -66]
Test Case:   2 | Input/Output: [[4 -79 -79 -79] -79]
Test Case:   3 | Input/Output: [[-98 -98 -98 19] -98]
Test Case:   4 | Input/Output: [[85 85 85 19] 19]
Test Case:   5 | Input/Output: [[-95 -88 -95 -95] -95]
Test Case:   6 | Input/Output: [[-26 -26 -26 78] -26]
Test Case:   7 | Input/Output: [[27 58 27 27] 27]
Test Case:   8 | Input/Output: [[-86 -86 -64 -86] -86]
Test Case:   9 | Input/Output: [[18 0 0 0] 0]
Test Case:  10 | Input/Output: [[35 35 35 -25] -25]
Test Case:  11 | Input/Output: [[-31 -43 -43 -43] -43]
Test Case:  12 | Input/Output: [[86 23 23 23] 23]
Test Case:  13 | Input/Output: [[-33 -33 35 -33] -33]
Test Case:  14 | Input/Output: [[34 -91 -91 -91] -91]
Test Case:  15 | Input/Output: [[41 73 41 41] 41]
Test Case:  16 | Input/Output: [[-65 -65 -65 8] -65]
Test Case:  17 | Input/Output: [[-35 -92 -35 -35] -92]
Test Case:  18 | Input/Output: [[66 -7 66 66] -7]
Test Case:  19 | Input/Output: [[23 23 65 23] 23]
Test Case:  20 | Input/Output: [[38 38 38 -30] -30]
Test Case:  21 | Input/Output: [[91 91 91 36] 36]
Test Case:  22 | Input/Output: [[-99 -99 -99 -10] -99]
Test Case:  23 | Input/Output: [[-92 -92 -92 -57] -92]
Test Case:  24 | Input/Output: [[-43 -90 -90 -90] -90]
Test Case:  25 | Input/Output: [[-23 -27 -23 -23] -27]
Test Case:  26 | Input/Output: [[36 36 62 36] 36]
Test Case:  27 | Input/Output: [[-58 -58 -1 -58] -58]
Test Case:  28 | Input/Output: [[-44 -44 -44 -17] -44]
Test Case:  29 | Input/Output: [[6 6 86 6] 6]
Test Case:  30 | Input/Output: [[-79 -17 -79 -79] -79]
Test Case:  31 | Input/Output: [[-77 -21 -21 -21] -77]
Test Case:  32 | Input/Output: [[-77 -77 19 -77] -77]
Test Case:  33 | Input/Output: [[46 93 46 46] 46]
Test Case:  34 | Input/Output: [[54 55 55 55] 54]
Test Case:  35 | Input/Output: [[65 65 -67 65] -67]
Test Case:  36 | Input/Output: [[-57 -57 -57 10] -57]
Test Case:  37 | Input/Output: [[-25 -25 -25 -45] -45]
Test Case:  38 | Input/Output: [[-23 -100 -100 -100] -100]
Test Case:  39 | Input/Output: [[-42 -42 -42 46] -42]
Test Case:  40 | Input/Output: [[97 -55 -55 -55] -55]
Test Case:  41 | Input/Output: [[-66 -66 -66 -68] -68]
Test Case:  42 | Input/Output: [[33 33 33 96] 33]
Test Case:  43 | Input/Output: [[-84 30 -84 -84] -84]
Test Case:  44 | Input/Output: [[-2 -2 -2 68] -2]
Test Case:  45 | Input/Output: [[32 54 32 32] 32]
Test Case:  46 | Input/Output: [[-69 54 -69 -69] -69]
Test Case:  47 | Input/Output: [[17 71 71 71] 17]
Test Case:  48 | Input/Output: [[-98 -98 91 -98] -98]
Test Case:  49 | Input/Output: [[-90 -90 -30 -90] -90]
Test Case:  50 | Input/Output: [[-13 52 -13 -13] -13]
Test Case:  51 | Input/Output: [[-20 -20 -20 -55] -55]
Test Case:  52 | Input/Output: [[-67 -67 85 -67] -67]
Test Case:  53 | Input/Output: [[-55 -55 -55 -39] -55]
Test Case:  54 | Input/Output: [[70 70 70 -59] -59]
Test Case:  55 | Input/Output: [[27 27 27 -82] -82]
Test Case:  56 | Input/Output: [[-36 3 3 3] -36]
Test Case:  57 | Input/Output: [[88 52 88 88] 52]
Test Case:  58 | Input/Output: [[-65 -51 -65 -65] -65]
Test Case:  59 | Input/Output: [[91 -56 -56 -56] -56]
Test Case:  60 | Input/Output: [[-50 -50 -23 -50] -50]
Test Case:  61 | Input/Output: [[-95 -95 95 -95] -95]
Test Case:  62 | Input/Output: [[-42 92 92 92] -42]
Test Case:  63 | Input/Output: [[63 -37 -37 -37] -37]
Test Case:  64 | Input/Output: [[15 15 -61 15] -61]
Test Case:  65 | Input/Output: [[21 21 -7 21] -7]
Test Case:  66 | Input/Output: [[34 34 34 74] 34]
Test Case:  67 | Input/Output: [[23 23 -76 23] -76]
Test Case:  68 | Input/Output: [[-75 30 30 30] -75]
Test Case:  69 | Input/Output: [[92 87 92 92] 87]
Test Case:  70 | Input/Output: [[71 87 71 71] 71]
Test Case:  71 | Input/Output: [[97 80 97 97] 80]
Test Case:  72 | Input/Output: [[-53 40 -53 -53] -53]
Test Case:  73 | Input/Output: [[18 18 93 18] 18]
Test Case:  74 | Input/Output: [[30 -17 30 30] -17]
Test Case:  75 | Input/Output: [[24 24 24 -7] -7]
Test Case:  76 | Input/Output: [[64 64 -55 64] -55]
Test Case:  77 | Input/Output: [[-25 -47 -47 -47] -47]
Test Case:  78 | Input/Output: [[80 80 80 51] 51]
Test Case:  79 | Input/Output: [[-60 -60 -36 -60] -60]
Test Case:  80 | Input/Output: [[10 10 94 10] 10]
Test Case:  81 | Input/Output: [[-30 -96 -96 -96] -96]
Test Case:  82 | Input/Output: [[-61 -61 55 -61] -61]
Test Case:  83 | Input/Output: [[-5 -5 -87 -5] -87]
Test Case:  84 | Input/Output: [[80 80 -69 80] -69]
Test Case:  85 | Input/Output: [[57 57 57 -49] -49]
Test Case:  86 | Input/Output: [[5 5 -70 5] -70]
Test Case:  87 | Input/Output: [[-72 40 -72 -72] -72]
Test Case:  88 | Input/Output: [[-88 -88 73 -88] -88]
Test Case:  89 | Input/Output: [[6 6 -38 6] -38]
Test Case:  90 | Input/Output: [[93 93 93 -89] -89]
Test Case:  91 | Input/Output: [[68 -92 68 68] -92]
Test Case:  92 | Input/Output: [[33 -39 33 33] -39]
Test Case:  93 | Input/Output: [[26 78 26 26] 26]
Test Case:  94 | Input/Output: [[-21 93 -21 -21] -21]
Test Case:  95 | Input/Output: [[83 83 60 83] 60]
Test Case:  96 | Input/Output: [[7 100 7 7] 7]
Test Case:  97 | Input/Output: [[-43 -43 -71 -43] -71]
Test Case:  98 | Input/Output: [[-77 -77 -77 -81] -81]
Test Case:  99 | Input/Output: [[-23 -94 -23 -23] -94]
Test Case: 100 | Input/Output: [(-4 -4 -4 -4) -4]
Test Case: 101 | Input/Output: [(60 60 60 60) 60]
Test Case: 102 | Input/Output: [(-43 -43 -43 -43) -43]
Test Case: 103 | Input/Output: [(-85 -85 -85 -85) -85]
Test Case: 104 | Input/Output: [(36 36 36 36) 36]
Test Case: 105 | Input/Output: [(-32 -32 -32 -32) -32]
Test Case: 106 | Input/Output: [(0 0 0 0) 0]
Test Case: 107 | Input/Output: [(53 53 53 53) 53]
Test Case: 108 | Input/Output: [(-96 -96 -96 -96) -96]
Test Case: 109 | Input/Output: [(-78 -78 -78 -78) -78]
Test Case: 110 | Input/Output: [(-69 -69 -69 -69) -69]
Test Case: 111 | Input/Output: [(-67 -67 -67 -67) -67]
Test Case: 112 | Input/Output: [(41 41 41 41) 41]
Test Case: 113 | Input/Output: [(-57 -57 -57 -57) -57]
Test Case: 114 | Input/Output: [(78 78 78 78) 78]
Test Case: 115 | Input/Output: [(20 20 20 20) 20]
Test Case: 116 | Input/Output: [(41 41 41 41) 41]
Test Case: 117 | Input/Output: [(91 91 91 91) 91]
Test Case: 118 | Input/Output: [(-50 -50 -50 -50) -50]
Test Case: 119 | Input/Output: [(3 3 3 3) 3]
Test Case: 120 | Input/Output: [(-97 -97 -97 -97) -97]
Test Case: 121 | Input/Output: [(72 72 72 72) 72]
Test Case: 122 | Input/Output: [(-43 -43 -43 -43) -43]
Test Case: 123 | Input/Output: [(86 86 86 86) 86]
Test Case: 124 | Input/Output: [(48 48 48 48) 48]
Test Case: 125 | Input/Output: [(32 32 32 32) 32]
Test Case: 126 | Input/Output: [(-11 -11 -11 -11) -11]
Test Case: 127 | Input/Output: [(12 12 12 12) 12]
Test Case: 128 | Input/Output: [(-33 -33 -33 -33) -33]
Test Case: 129 | Input/Output: [(18 18 18 18) 18]
Test Case: 130 | Input/Output: [(100 100 100 100) 100]
Test Case: 131 | Input/Output: [(68 68 68 68) 68]
Test Case: 132 | Input/Output: [(-59 -59 -59 -59) -59]
Test Case: 133 | Input/Output: [(-45 -45 -45 -45) -45]
Test Case: 134 | Input/Output: [(93 93 93 93) 93]
Test Case: 135 | Input/Output: [(-21 -21 -21 -21) -21]
Test Case: 136 | Input/Output: [(-35 -35 -35 -35) -35]
Test Case: 137 | Input/Output: [(50 50 50 50) 50]
Test Case: 138 | Input/Output: [(10 10 10 10) 10]
Test Case: 139 | Input/Output: [(42 42 42 42) 42]
Test Case: 140 | Input/Output: [(-53 -53 -53 -53) -53]
Test Case: 141 | Input/Output: [(20 20 20 20) 20]
Test Case: 142 | Input/Output: [(-87 -87 -87 -87) -87]
Test Case: 143 | Input/Output: [(-2 -2 -2 -2) -2]
Test Case: 144 | Input/Output: [(72 72 72 72) 72]
Test Case: 145 | Input/Output: [(-10 -10 -10 -10) -10]
Test Case: 146 | Input/Output: [(73 73 73 73) 73]
Test Case: 147 | Input/Output: [(97 97 97 97) 97]
Test Case: 148 | Input/Output: [(18 18 18 18) 18]
Test Case: 149 | Input/Output: [(-65 -65 -65 -65) -65]
Test Case: 150 | Input/Output: [(-32 -32 -32 -32) -32]
Test Case: 151 | Input/Output: [(65 65 65 65) 65]
Test Case: 152 | Input/Output: [(-69 -69 -69 -69) -69]
Test Case: 153 | Input/Output: [(65 65 65 65) 65]
Test Case: 154 | Input/Output: [(25 25 25 25) 25]
Test Case: 155 | Input/Output: [(99 99 99 99) 99]
Test Case: 156 | Input/Output: [(50 50 50 50) 50]
Test Case: 157 | Input/Output: [(2 2 2 2) 2]
Test Case: 158 | Input/Output: [(55 55 55 55) 55]
Test Case: 159 | Input/Output: [(100 100 100 100) 100]
Test Case: 160 | Input/Output: [(84 84 84 84) 84]
Test Case: 161 | Input/Output: [(53 53 53 53) 53]
Test Case: 162 | Input/Output: [(68 68 68 68) 68]
Test Case: 163 | Input/Output: [(-26 -26 -26 -26) -26]
Test Case: 164 | Input/Output: [(-3 -3 -3 -3) -3]
Test Case: 165 | Input/Output: [(-74 -74 -74 -74) -74]
Test Case: 166 | Input/Output: [(18 18 18 18) 18]
Test Case: 167 | Input/Output: [(32 32 32 32) 32]
Test Case: 168 | Input/Output: [(16 16 16 16) 16]
Test Case: 169 | Input/Output: [(78 78 78 78) 78]
Test Case: 170 | Input/Output: [(24 24 24 24) 24]
Test Case: 171 | Input/Output: [(100 100 100 100) 100]
Test Case: 172 | Input/Output: [(38 38 38 38) 38]
Test Case: 173 | Input/Output: [(-80 -80 -80 -80) -80]
Test Case: 174 | Input/Output: [(63 63 63 63) 63]
Test Case: 175 | Input/Output: [(5 5 5 5) 5]
Test Case: 176 | Input/Output: [(42 42 42 42) 42]
Test Case: 177 | Input/Output: [(-52 -52 -52 -52) -52]
Test Case: 178 | Input/Output: [(56 56 56 56) 56]
Test Case: 179 | Input/Output: [(81 81 81 81) 81]
Test Case: 180 | Input/Output: [(-13 -13 -13 -13) -13]
Test Case: 181 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 182 | Input/Output: [(-14 -14 -14 -14) -14]
Test Case: 183 | Input/Output: [(52 52 52 52) 52]
Test Case: 184 | Input/Output: [(-8 -8 -8 -8) -8]
Test Case: 185 | Input/Output: [(-30 -30 -30 -30) -30]
Test Case: 186 | Input/Output: [(-57 -57 -57 -57) -57]
Test Case: 187 | Input/Output: [(-37 -37 -37 -37) -37]
Test Case: 188 | Input/Output: [(23 23 23 23) 23]
Test Case: 189 | Input/Output: [(5 5 5 5) 5]
Test Case: 190 | Input/Output: [(-16 -16 -16 -16) -16]
Test Case: 191 | Input/Output: [(75 75 75 75) 75]
Test Case: 192 | Input/Output: [(-95 -95 -95 -95) -95]
Test Case: 193 | Input/Output: [(80 80 80 80) 80]
Test Case: 194 | Input/Output: [(6 6 6 6) 6]
Test Case: 195 | Input/Output: [(5 5 5 5) 5]
Test Case: 196 | Input/Output: [(49 49 49 49) 49]
Test Case: 197 | Input/Output: [(-97 -97 -97 -97) -97]
Test Case: 198 | Input/Output: [(52 52 52 52) 52]
Test Case: 199 | Input/Output: [(37 37 37 37) 37]
Test Case: 200 | Input/Output: [(51 12 10 30) 10]
Test Case: 201 | Input/Output: [(30 98 77 81) 30]
Test Case: 202 | Input/Output: [(9 79 100 94) 9]
Test Case: 203 | Input/Output: [(9 4 21 85) 4]
Test Case: 204 | Input/Output: [(59 51 94 61) 51]
Test Case: 205 | Input/Output: [(92 89 20 27) 20]
Test Case: 206 | Input/Output: [(88 64 64 67) 64]
Test Case: 207 | Input/Output: [(28 54 3 43) 3]
Test Case: 208 | Input/Output: [(43 98 94 35) 35]
Test Case: 209 | Input/Output: [(65 78 72 0) 0]
Test Case: 210 | Input/Output: [(86 6 95 81) 6]
Test Case: 211 | Input/Output: [(7 32 83 36) 7]
Test Case: 212 | Input/Output: [(75 52 68 72) 52]
Test Case: 213 | Input/Output: [(47 52 56 72) 47]
Test Case: 214 | Input/Output: [(8 8 53 21) 8]
Test Case: 215 | Input/Output: [(46 53 74 46) 46]
Test Case: 216 | Input/Output: [(34 91 51 86) 34]
Test Case: 217 | Input/Output: [(19 55 98 58) 19]
Test Case: 218 | Input/Output: [(69 64 51 41) 41]
Test Case: 219 | Input/Output: [(83 30 99 82) 30]
Test Case: 220 | Input/Output: [(51 19 55 70) 19]
Test Case: 221 | Input/Output: [(24 42 91 31) 24]
Test Case: 222 | Input/Output: [(94 74 15 63) 15]
Test Case: 223 | Input/Output: [(23 28 80 72) 23]
Test Case: 224 | Input/Output: [(55 40 25 15) 15]
Test Case: 225 | Input/Output: [(89 87 96 67) 67]
Test Case: 226 | Input/Output: [(54 28 10 27) 10]
Test Case: 227 | Input/Output: [(1 8 46 63) 1]
Test Case: 228 | Input/Output: [(29 72 8 26) 8]
Test Case: 229 | Input/Output: [(99 31 55 11) 11]
Test Case: 230 | Input/Output: [(29 89 29 13) 13]
Test Case: 231 | Input/Output: [(77 28 56 72) 28]
Test Case: 232 | Input/Output: [(43 4 67 91) 4]
Test Case: 233 | Input/Output: [(79 41 71 93) 41]
Test Case: 234 | Input/Output: [(23 85 83 3) 3]
Test Case: 235 | Input/Output: [(96 50 41 100) 41]
Test Case: 236 | Input/Output: [(76 19 37 56) 19]
Test Case: 237 | Input/Output: [(90 62 90 100) 62]
Test Case: 238 | Input/Output: [(19 11 81 20) 11]
Test Case: 239 | Input/Output: [(81 93 67 74) 67]
Test Case: 240 | Input/Output: [(75 90 30 47) 30]
Test Case: 241 | Input/Output: [(14 26 27 94) 14]
Test Case: 242 | Input/Output: [(7 5 6 29) 5]
Test Case: 243 | Input/Output: [(99 94 50 80) 50]
Test Case: 244 | Input/Output: [(62 3 81 97) 3]
Test Case: 245 | Input/Output: [(18 63 38 46) 18]
Test Case: 246 | Input/Output: [(6 30 57 86) 6]
Test Case: 247 | Input/Output: [(46 12 70 11) 11]
Test Case: 248 | Input/Output: [(50 20 90 96) 20]
Test Case: 249 | Input/Output: [(72 53 43 68) 43]
Test Case: 250 | Input/Output: [(58 96 99 98) 58]
Test Case: 251 | Input/Output: [(89 7 71 55) 7]
Test Case: 252 | Input/Output: [(52 59 15 37) 15]
Test Case: 253 | Input/Output: [(99 43 64 35) 35]
Test Case: 254 | Input/Output: [(14 4 94 27) 4]
Test Case: 255 | Input/Output: [(58 53 45 8) 8]
Test Case: 256 | Input/Output: [(68 42 56 27) 27]
Test Case: 257 | Input/Output: [(98 16 10 64) 10]
Test Case: 258 | Input/Output: [(82 20 96 67) 20]
Test Case: 259 | Input/Output: [(93 27 53 56) 27]
Test Case: 260 | Input/Output: [(75 93 67 100) 67]
Test Case: 261 | Input/Output: [(90 44 29 59) 29]
Test Case: 262 | Input/Output: [(89 7 46 6) 6]
Test Case: 263 | Input/Output: [(39 10 95 15) 10]
Test Case: 264 | Input/Output: [(0 27 68 62) 0]
Test Case: 265 | Input/Output: [(42 6 1 40) 1]
Test Case: 266 | Input/Output: [(48 88 87 48) 48]
Test Case: 267 | Input/Output: [(84 99 4 8) 4]
Test Case: 268 | Input/Output: [(58 26 7 37) 7]
Test Case: 269 | Input/Output: [(36 74 96 50) 36]
Test Case: 270 | Input/Output: [(64 42 80 94) 42]
Test Case: 271 | Input/Output: [(94 46 12 82) 12]
Test Case: 272 | Input/Output: [(33 44 26 100) 26]
Test Case: 273 | Input/Output: [(30 47 12 73) 12]
Test Case: 274 | Input/Output: [(72 39 92 25) 25]
Test Case: 275 | Input/Output: [(7 8 80 63) 7]
Test Case: 276 | Input/Output: [(4 80 10 61) 4]
Test Case: 277 | Input/Output: [(6 22 40 98) 6]
Test Case: 278 | Input/Output: [(61 15 67 64) 15]
Test Case: 279 | Input/Output: [(25 45 48 60) 25]
Test Case: 280 | Input/Output: [(74 44 82 41) 41]
Test Case: 281 | Input/Output: [(41 5 63 22) 5]
Test Case: 282 | Input/Output: [(81 18 21 93) 18]
Test Case: 283 | Input/Output: [(69 91 87 72) 69]
Test Case: 284 | Input/Output: [(10 46 8 86) 8]
Test Case: 285 | Input/Output: [(73 18 47 73) 18]
Test Case: 286 | Input/Output: [(69 23 36 62) 23]
Test Case: 287 | Input/Output: [(78 53 96 53) 53]
Test Case: 288 | Input/Output: [(81 43 60 30) 30]
Test Case: 289 | Input/Output: [(34 15 99 46) 15]
Test Case: 290 | Input/Output: [(15 65 65 78) 15]
Test Case: 291 | Input/Output: [(82 24 73 58) 24]
Test Case: 292 | Input/Output: [(56 87 79 59) 56]
Test Case: 293 | Input/Output: [(62 32 42 27) 27]
Test Case: 294 | Input/Output: [(100 36 14 47) 14]
Test Case: 295 | Input/Output: [(92 65 29 36) 29]
Test Case: 296 | Input/Output: [(89 4 72 38) 4]
Test Case: 297 | Input/Output: [(49 45 62 67) 45]
Test Case: 298 | Input/Output: [(42 36 28 38) 28]
Test Case: 299 | Input/Output: [(90 40 86 83) 40]
Test Case: 300 | Input/Output: [(45 66 1 4) 1]
Test Case: 301 | Input/Output: [(65 91 36 93) 36]
Test Case: 302 | Input/Output: [(28 5 98 6) 5]
Test Case: 303 | Input/Output: [(6 70 56 14) 6]
Test Case: 304 | Input/Output: [(14 90 66 5) 5]
Test Case: 305 | Input/Output: [(8 48 63 57) 8]
Test Case: 306 | Input/Output: [(51 33 14 40) 14]
Test Case: 307 | Input/Output: [(49 20 4 72) 4]
Test Case: 308 | Input/Output: [(81 23 1 22) 1]
Test Case: 309 | Input/Output: [(24 22 14 97) 14]
Test Case: 310 | Input/Output: [(92 42 25 6) 6]
Test Case: 311 | Input/Output: [(11 23 73 55) 11]
Test Case: 312 | Input/Output: [(86 19 83 31) 19]
Test Case: 313 | Input/Output: [(1 8 13 70) 1]
Test Case: 314 | Input/Output: [(45 89 16 97) 16]
Test Case: 315 | Input/Output: [(57 95 32 83) 32]
Test Case: 316 | Input/Output: [(7 90 90 38) 7]
Test Case: 317 | Input/Output: [(53 7 55 34) 7]
Test Case: 318 | Input/Output: [(39 46 15 2) 2]
Test Case: 319 | Input/Output: [(30 52 15 35) 15]
Test Case: 320 | Input/Output: [(62 43 30 86) 30]
Test Case: 321 | Input/Output: [(3 62 36 20) 3]
Test Case: 322 | Input/Output: [(76 29 68 49) 29]
Test Case: 323 | Input/Output: [(7 99 26 14) 7]
Test Case: 324 | Input/Output: [(66 74 94 30) 30]
Test Case: 325 | Input/Output: [(60 55 11 72) 11]
Test Case: 326 | Input/Output: [(61 84 9 69) 9]
Test Case: 327 | Input/Output: [(15 26 60 61) 15]
Test Case: 328 | Input/Output: [(48 81 58 10) 10]
Test Case: 329 | Input/Output: [(60 42 61 87) 42]
Test Case: 330 | Input/Output: [(60 98 99 45) 45]
Test Case: 331 | Input/Output: [(13 20 41 75) 13]
Test Case: 332 | Input/Output: [(72 46 3 21) 3]
Test Case: 333 | Input/Output: [(57 41 8 35) 8]
Test Case: 334 | Input/Output: [(35 51 8 71) 8]
Test Case: 335 | Input/Output: [(92 72 87 4) 4]
Test Case: 336 | Input/Output: [(89 97 35 12) 12]
Test Case: 337 | Input/Output: [(50 13 6 89) 6]
Test Case: 338 | Input/Output: [(49 58 2 71) 2]
Test Case: 339 | Input/Output: [(95 39 53 78) 39]
Test Case: 340 | Input/Output: [(37 35 83 27) 27]
Test Case: 341 | Input/Output: [(22 2 29 7) 2]
Test Case: 342 | Input/Output: [(91 19 19 87) 19]
Test Case: 343 | Input/Output: [(16 86 100 94) 16]
Test Case: 344 | Input/Output: [(39 90 29 73) 29]
Test Case: 345 | Input/Output: [(77 47 51 44) 44]
Test Case: 346 | Input/Output: [(26 27 91 26) 26]
Test Case: 347 | Input/Output: [(39 69 22 9) 9]
Test Case: 348 | Input/Output: [(87 65 5 40) 5]
Test Case: 349 | Input/Output: [(90 99 65 93) 65]
Test Case: 350 | Input/Output: [(50 39 83 71) 39]
Test Case: 351 | Input/Output: [(38 66 43 72) 38]
Test Case: 352 | Input/Output: [(15 15 94 2) 2]
Test Case: 353 | Input/Output: [(53 21 5 29) 5]
Test Case: 354 | Input/Output: [(3 62 31 52) 3]
Test Case: 355 | Input/Output: [(7 21 12 62) 7]
Test Case: 356 | Input/Output: [(42 12 56 4) 4]
Test Case: 357 | Input/Output: [(96 21 22 81) 21]
Test Case: 358 | Input/Output: [(43 34 85 96) 34]
Test Case: 359 | Input/Output: [(40 18 18 74) 18]
Test Case: 360 | Input/Output: [(37 11 44 41) 11]
Test Case: 361 | Input/Output: [(61 72 27 12) 12]
Test Case: 362 | Input/Output: [(27 21 81 52) 21]
Test Case: 363 | Input/Output: [(34 9 70 31) 9]
Test Case: 364 | Input/Output: [(62 7 40 50) 7]
Test Case: 365 | Input/Output: [(80 64 2 9) 2]
Test Case: 366 | Input/Output: [(97 65 19 9) 9]
Test Case: 367 | Input/Output: [(96 2 39 60) 2]
Test Case: 368 | Input/Output: [(99 58 77 99) 58]
Test Case: 369 | Input/Output: [(3 1 89 26) 1]
Test Case: 370 | Input/Output: [(15 49 43 61) 15]
Test Case: 371 | Input/Output: [(8 36 21 90) 8]
Test Case: 372 | Input/Output: [(97 12 67 64) 12]
Test Case: 373 | Input/Output: [(74 86 17 56) 17]
Test Case: 374 | Input/Output: [(57 1 74 79) 1]
Test Case: 375 | Input/Output: [(65 38 10 54) 10]
Test Case: 376 | Input/Output: [(57 93 42 98) 42]
Test Case: 377 | Input/Output: [(99 44 30 24) 24]
Test Case: 378 | Input/Output: [(22 57 70 90) 22]
Test Case: 379 | Input/Output: [(0 69 99 7) 0]
Test Case: 380 | Input/Output: [(86 96 80 23) 23]
Test Case: 381 | Input/Output: [(62 81 55 63) 55]
Test Case: 382 | Input/Output: [(83 59 22 4) 4]
Test Case: 383 | Input/Output: [(100 38 6 42) 6]
Test Case: 384 | Input/Output: [(45 43 63 33) 33]
Test Case: 385 | Input/Output: [(31 0 43 17) 0]
Test Case: 386 | Input/Output: [(71 28 55 100) 28]
Test Case: 387 | Input/Output: [(22 78 63 17) 17]
Test Case: 388 | Input/Output: [(33 89 13 65) 13]
Test Case: 389 | Input/Output: [(77 57 77 26) 26]
Test Case: 390 | Input/Output: [(19 16 53 86) 16]
Test Case: 391 | Input/Output: [(31 32 49 63) 31]
Test Case: 392 | Input/Output: [(78 62 33 42) 33]
Test Case: 393 | Input/Output: [(93 79 97 51) 51]
Test Case: 394 | Input/Output: [(86 3 1 21) 1]
Test Case: 395 | Input/Output: [(12 80 6 58) 6]
Test Case: 396 | Input/Output: [(53 87 50 94) 50]
Test Case: 397 | Input/Output: [(60 13 30 5) 5]
Test Case: 398 | Input/Output: [(95 71 15 94) 15]
Test Case: 399 | Input/Output: [(35 15 99 71) 15]
Test Case: 400 | Input/Output: [(48 -36 -93 2) -93]
Test Case: 401 | Input/Output: [(89 79 -72 -54) -72]
Test Case: 402 | Input/Output: [(6 48 32 -30) -30]
Test Case: 403 | Input/Output: [(7 85 98 -77) -77]
Test Case: 404 | Input/Output: [(-76 -62 29 -8) -76]
Test Case: 405 | Input/Output: [(-28 87 -13 -7) -28]
Test Case: 406 | Input/Output: [(79 -39 -3 16) -39]
Test Case: 407 | Input/Output: [(-1 -37 -97 -76) -97]
Test Case: 408 | Input/Output: [(-41 54 88 -48) -48]
Test Case: 409 | Input/Output: [(38 -75 44 -77) -77]
Test Case: 410 | Input/Output: [(-8 -48 68 58) -48]
Test Case: 411 | Input/Output: [(-38 85 -11 29) -38]
Test Case: 412 | Input/Output: [(15 15 -34 -49) -49]
Test Case: 413 | Input/Output: [(98 -45 59 -71) -71]
Test Case: 414 | Input/Output: [(17 82 90 78) 17]
Test Case: 415 | Input/Output: [(-78 -29 -32 -80) -80]
Test Case: 416 | Input/Output: [(85 65 -41 -25) -41]
Test Case: 417 | Input/Output: [(-92 83 -7 54) -92]
Test Case: 418 | Input/Output: [(65 -82 22 93) -82]
Test Case: 419 | Input/Output: [(83 -56 -93 -8) -93]
Test Case: 420 | Input/Output: [(-58 -62 -44 -66) -66]
Test Case: 421 | Input/Output: [(-47 -53 46 70) -53]
Test Case: 422 | Input/Output: [(-46 -93 -8 -38) -93]
Test Case: 423 | Input/Output: [(99 -64 -21 -66) -66]
Test Case: 424 | Input/Output: [(24 42 -31 11) -31]
Test Case: 425 | Input/Output: [(-33 -71 -34 53) -71]
Test Case: 426 | Input/Output: [(93 -16 25 -63) -63]
Test Case: 427 | Input/Output: [(-26 -80 56 -44) -80]
Test Case: 428 | Input/Output: [(-20 -60 36 49) -60]
Test Case: 429 | Input/Output: [(71 -52 -36 -66) -66]
Test Case: 430 | Input/Output: [(14 86 51 98) 14]
Test Case: 431 | Input/Output: [(40 -73 19 -57) -73]
Test Case: 432 | Input/Output: [(88 57 -47 74) -47]
Test Case: 433 | Input/Output: [(-71 8 71 94) -71]
Test Case: 434 | Input/Output: [(-4 -23 38 72) -23]
Test Case: 435 | Input/Output: [(21 -17 -79 -61) -79]
Test Case: 436 | Input/Output: [(98 33 15 -71) -71]
Test Case: 437 | Input/Output: [(98 -7 23 -90) -90]
Test Case: 438 | Input/Output: [(-36 -87 69 80) -87]
Test Case: 439 | Input/Output: [(27 -15 -68 48) -68]
Test Case: 440 | Input/Output: [(-47 81 27 71) -47]
Test Case: 441 | Input/Output: [(72 59 -73 82) -73]
Test Case: 442 | Input/Output: [(-29 25 77 -58) -58]
Test Case: 443 | Input/Output: [(-65 13 -75 99) -75]
Test Case: 444 | Input/Output: [(76 -14 70 -79) -79]
Test Case: 445 | Input/Output: [(77 75 41 2) 2]
Test Case: 446 | Input/Output: [(-56 26 12 68) -56]
Test Case: 447 | Input/Output: [(-95 -45 49 57) -95]
Test Case: 448 | Input/Output: [(-75 -27 97 -60) -75]
Test Case: 449 | Input/Output: [(5 -34 37 4) -34]
Test Case: 450 | Input/Output: [(55 24 38 -23) -23]
Test Case: 451 | Input/Output: [(52 -100 29 66) -100]
Test Case: 452 | Input/Output: [(93 19 90 94) 19]
Test Case: 453 | Input/Output: [(72 -1 -86 96) -86]
Test Case: 454 | Input/Output: [(25 -12 -57 10) -57]
Test Case: 455 | Input/Output: [(97 -8 -79 -25) -79]
Test Case: 456 | Input/Output: [(-34 -97 4 -60) -97]
Test Case: 457 | Input/Output: [(55 65 -65 -48) -65]
Test Case: 458 | Input/Output: [(-77 -64 87 73) -77]
Test Case: 459 | Input/Output: [(-39 16 11 19) -39]
Test Case: 460 | Input/Output: [(35 -72 80 41) -72]
Test Case: 461 | Input/Output: [(-89 98 -31 -52) -89]
Test Case: 462 | Input/Output: [(100 -37 59 -51) -51]
Test Case: 463 | Input/Output: [(-43 -84 48 38) -84]
Test Case: 464 | Input/Output: [(98 80 36 66) 36]
Test Case: 465 | Input/Output: [(-79 11 -7 6) -79]
Test Case: 466 | Input/Output: [(15 80 -47 -97) -97]
Test Case: 467 | Input/Output: [(32 -81 30 85) -81]
Test Case: 468 | Input/Output: [(76 72 56 -48) -48]
Test Case: 469 | Input/Output: [(2 43 48 -78) -78]
Test Case: 470 | Input/Output: [(61 -29 63 88) -29]
Test Case: 471 | Input/Output: [(11 1 10 40) 1]
Test Case: 472 | Input/Output: [(14 -60 -48 -20) -60]
Test Case: 473 | Input/Output: [(95 -27 -43 92) -43]
Test Case: 474 | Input/Output: [(79 -65 94 -24) -65]
Test Case: 475 | Input/Output: [(95 23 2 -41) -41]
Test Case: 476 | Input/Output: [(37 58 80 -75) -75]
Test Case: 477 | Input/Output: [(-12 10 81 -71) -71]
Test Case: 478 | Input/Output: [(90 5 -10 79) -10]
Test Case: 479 | Input/Output: [(100 70 17 70) 17]
Test Case: 480 | Input/Output: [(16 98 8 -83) -83]
Test Case: 481 | Input/Output: [(82 -93 99 99) -93]
Test Case: 482 | Input/Output: [(-40 -1 40 -11) -40]
Test Case: 483 | Input/Output: [(-87 75 -57 -6) -87]
Test Case: 484 | Input/Output: [(-97 -77 86 81) -97]
Test Case: 485 | Input/Output: [(-99 55 36 61) -99]
Test Case: 486 | Input/Output: [(60 -73 -47 -81) -81]
Test Case: 487 | Input/Output: [(30 19 32 27) 19]
Test Case: 488 | Input/Output: [(-55 7 44 -37) -55]
Test Case: 489 | Input/Output: [(88 99 -37 79) -37]
Test Case: 490 | Input/Output: [(29 -26 3 5) -26]
Test Case: 491 | Input/Output: [(-92 96 48 9) -92]
Test Case: 492 | Input/Output: [(62 -2 37 -92) -92]
Test Case: 493 | Input/Output: [(-80 -63 100 67) -80]
Test Case: 494 | Input/Output: [(-22 51 54 66) -22]
Test Case: 495 | Input/Output: [(-58 59 29 -85) -85]
Test Case: 496 | Input/Output: [(-38 95 -47 81) -47]
Test Case: 497 | Input/Output: [(21 -40 -21 77) -40]
Test Case: 498 | Input/Output: [(-23 43 0 -93) -93]
Test Case: 499 | Input/Output: [(36 -31 65 50) -31]
Test Case: 500 | Input/Output: [(43 77 -90 -76) -90]
Test Case: 501 | Input/Output: [(-59 76 62 -11) -59]
Test Case: 502 | Input/Output: [(87 80 -46 82) -46]
Test Case: 503 | Input/Output: [(-12 87 -4 -96) -96]
Test Case: 504 | Input/Output: [(82 30 10 7) 7]
Test Case: 505 | Input/Output: [(7 -98 -58 -22) -98]
Test Case: 506 | Input/Output: [(-57 1 -55 15) -57]
Test Case: 507 | Input/Output: [(50 -71 -96 71) -96]
Test Case: 508 | Input/Output: [(92 -1 62 -44) -44]
Test Case: 509 | Input/Output: [(-89 53 41 4) -89]
Test Case: 510 | Input/Output: [(52 24 -95 -15) -95]
Test Case: 511 | Input/Output: [(-27 56 -19 83) -27]
Test Case: 512 | Input/Output: [(-1 -8 38 54) -8]
Test Case: 513 | Input/Output: [(-76 -79 -39 -5) -79]
Test Case: 514 | Input/Output: [(27 56 -56 -73) -73]
Test Case: 515 | Input/Output: [(9 -49 17 -33) -49]
Test Case: 516 | Input/Output: [(37 27 1 15) 1]
Test Case: 517 | Input/Output: [(-79 -99 -69 -16) -99]
Test Case: 518 | Input/Output: [(5 91 36 91) 5]
Test Case: 519 | Input/Output: [(10 23 39 20) 10]
Test Case: 520 | Input/Output: [(-94 57 98 -85) -94]
Test Case: 521 | Input/Output: [(84 -22 -72 26) -72]
Test Case: 522 | Input/Output: [(82 50 24 51) 24]
Test Case: 523 | Input/Output: [(-31 87 -39 -20) -39]
Test Case: 524 | Input/Output: [(-37 66 46 -28) -37]
Test Case: 525 | Input/Output: [(9 -54 97 -6) -54]
Test Case: 526 | Input/Output: [(-11 -24 17 88) -24]
Test Case: 527 | Input/Output: [(25 -64 -78 22) -78]
Test Case: 528 | Input/Output: [(-100 16 -21 -94) -100]
Test Case: 529 | Input/Output: [(-67 -2 94 37) -67]
Test Case: 530 | Input/Output: [(48 4 100 30) 4]
Test Case: 531 | Input/Output: [(66 27 8 84) 8]
Test Case: 532 | Input/Output: [(2 -76 -8 -34) -76]
Test Case: 533 | Input/Output: [(53 -21 -17 -19) -21]
Test Case: 534 | Input/Output: [(27 60 -41 85) -41]
Test Case: 535 | Input/Output: [(61 65 25 -62) -62]
Test Case: 536 | Input/Output: [(27 -28 -17 -31) -31]
Test Case: 537 | Input/Output: [(-38 -35 62 -3) -38]
Test Case: 538 | Input/Output: [(-38 -4 -39 98) -39]
Test Case: 539 | Input/Output: [(-31 -55 -4 -62) -62]
Test Case: 540 | Input/Output: [(85 28 56 1) 1]
Test Case: 541 | Input/Output: [(-85 8 -21 -55) -85]
Test Case: 542 | Input/Output: [(-4 -45 -12 -37) -45]
Test Case: 543 | Input/Output: [(-32 -67 45 4) -67]
Test Case: 544 | Input/Output: [(-79 -50 -1 -64) -79]
Test Case: 545 | Input/Output: [(-54 55 77 -93) -93]
Test Case: 546 | Input/Output: [(30 -87 52 79) -87]
Test Case: 547 | Input/Output: [(-52 42 -10 56) -52]
Test Case: 548 | Input/Output: [(3 -53 -30 -85) -85]
Test Case: 549 | Input/Output: [(98 -29 40 -31) -31]
Test Case: 550 | Input/Output: [(92 -37 -81 67) -81]
Test Case: 551 | Input/Output: [(92 15 -56 -25) -56]
Test Case: 552 | Input/Output: [(-95 -61 -96 25) -96]
Test Case: 553 | Input/Output: [(45 50 -18 40) -18]
Test Case: 554 | Input/Output: [(-78 -56 42 67) -78]
Test Case: 555 | Input/Output: [(26 11 100 -14) -14]
Test Case: 556 | Input/Output: [(-31 -24 -34 -83) -83]
Test Case: 557 | Input/Output: [(-68 35 36 -63) -68]
Test Case: 558 | Input/Output: [(-61 -91 84 27) -91]
Test Case: 559 | Input/Output: [(-23 -83 46 -8) -83]
Test Case: 560 | Input/Output: [(-72 -72 62 -57) -72]
Test Case: 561 | Input/Output: [(23 -62 -6 -16) -62]
Test Case: 562 | Input/Output: [(51 -97 59 48) -97]
Test Case: 563 | Input/Output: [(97 17 -10 49) -10]
Test Case: 564 | Input/Output: [(-26 96 73 44) -26]
Test Case: 565 | Input/Output: [(55 -87 85 -15) -87]
Test Case: 566 | Input/Output: [(-35 49 -81 2) -81]
Test Case: 567 | Input/Output: [(44 7 -68 -98) -98]
Test Case: 568 | Input/Output: [(98 5 -57 8) -57]
Test Case: 569 | Input/Output: [(-14 9 82 -36) -36]
Test Case: 570 | Input/Output: [(-11 -12 -38 61) -38]
Test Case: 571 | Input/Output: [(95 21 53 76) 21]
Test Case: 572 | Input/Output: [(-50 100 82 -13) -50]
Test Case: 573 | Input/Output: [(-59 -82 -86 33) -86]
Test Case: 574 | Input/Output: [(33 78 64 -90) -90]
Test Case: 575 | Input/Output: [(22 -100 14 -70) -100]
Test Case: 576 | Input/Output: [(7 -39 -93 -41) -93]
Test Case: 577 | Input/Output: [(-5 -41 -8 -6) -41]
Test Case: 578 | Input/Output: [(18 30 -2 30) -2]
Test Case: 579 | Input/Output: [(-9 74 96 28) -9]
Test Case: 580 | Input/Output: [(-35 54 -41 -82) -82]
Test Case: 581 | Input/Output: [(24 -91 -20 -50) -91]
Test Case: 582 | Input/Output: [(-71 -1 -65 -80) -80]
Test Case: 583 | Input/Output: [(14 -31 -22 56) -31]
Test Case: 584 | Input/Output: [(-24 81 53 -19) -24]
Test Case: 585 | Input/Output: [(85 -78 -98 -94) -98]
Test Case: 586 | Input/Output: [(89 61 -18 33) -18]
Test Case: 587 | Input/Output: [(-73 -46 -69 57) -73]
Test Case: 588 | Input/Output: [(-44 -64 -26 -7) -64]
Test Case: 589 | Input/Output: [(-72 -42 -86 60) -86]
Test Case: 590 | Input/Output: [(-81 -27 10 -20) -81]
Test Case: 591 | Input/Output: [(34 49 16 -9) -9]
Test Case: 592 | Input/Output: [(38 -99 -21 91) -99]
Test Case: 593 | Input/Output: [(-13 -64 99 3) -64]
Test Case: 594 | Input/Output: [(84 -85 -35 42) -85]
Test Case: 595 | Input/Output: [(1 30 -35 87) -35]
Test Case: 596 | Input/Output: [(75 85 -85 -48) -85]
Test Case: 597 | Input/Output: [(-97 58 -84 71) -97]
Test Case: 598 | Input/Output: [(-42 -66 -21 28) -66]
Test Case: 599 | Input/Output: [(-73 34 -35 -66) -73]
Test Case: 600 | Input/Output: [(-44 -70 7 -27) -70]
Test Case: 601 | Input/Output: [(-82 -83 50 20) -83]
Test Case: 602 | Input/Output: [(-34 -1 21 84) -34]
Test Case: 603 | Input/Output: [(10 57 3 16) 3]
Test Case: 604 | Input/Output: [(5 46 -14 -67) -67]
Test Case: 605 | Input/Output: [(-39 26 87 48) -39]
Test Case: 606 | Input/Output: [(50 -51 -34 -38) -51]
Test Case: 607 | Input/Output: [(-13 23 92 5) -13]
Test Case: 608 | Input/Output: [(-50 18 -65 -80) -80]
Test Case: 609 | Input/Output: [(-18 38 23 -98) -98]
Test Case: 610 | Input/Output: [(34 24 -30 -24) -30]
Test Case: 611 | Input/Output: [(-89 -49 -35 -12) -89]
Test Case: 612 | Input/Output: [(-60 -100 19 24) -100]
Test Case: 613 | Input/Output: [(45 95 65 -95) -95]
Test Case: 614 | Input/Output: [(-1 -95 -16 -64) -95]
Test Case: 615 | Input/Output: [(1 54 57 43) 1]
Test Case: 616 | Input/Output: [(25 -33 -53 89) -53]
Test Case: 617 | Input/Output: [(-78 -4 -85 -63) -85]
Test Case: 618 | Input/Output: [(-24 -1 -86 57) -86]
Test Case: 619 | Input/Output: [(6 18 -60 35) -60]
Test Case: 620 | Input/Output: [(50 26 64 -19) -19]
Test Case: 621 | Input/Output: [(92 3 -20 63) -20]
Test Case: 622 | Input/Output: [(-19 -33 73 95) -33]
Test Case: 623 | Input/Output: [(-9 -95 -31 39) -95]
Test Case: 624 | Input/Output: [(80 62 -79 60) -79]
Test Case: 625 | Input/Output: [(-18 -5 -60 59) -60]
Test Case: 626 | Input/Output: [(-3 13 -31 23) -31]
Test Case: 627 | Input/Output: [(-71 -45 -85 70) -85]
Test Case: 628 | Input/Output: [(-48 64 -96 31) -96]
Test Case: 629 | Input/Output: [(-57 88 10 -69) -69]
Test Case: 630 | Input/Output: [(-26 -86 -68 -29) -86]
Test Case: 631 | Input/Output: [(85 -19 -73 53) -73]
Test Case: 632 | Input/Output: [(-79 -15 48 59) -79]
Test Case: 633 | Input/Output: [(12 55 45 -91) -91]
Test Case: 634 | Input/Output: [(80 -25 75 -53) -53]
Test Case: 635 | Input/Output: [(-7 -93 78 16) -93]
Test Case: 636 | Input/Output: [(-85 -95 14 52) -95]
Test Case: 637 | Input/Output: [(15 -47 -48 57) -48]
Test Case: 638 | Input/Output: [(40 7 18 -48) -48]
Test Case: 639 | Input/Output: [(-1 53 67 46) -1]
Test Case: 640 | Input/Output: [(17 21 39 -96) -96]
Test Case: 641 | Input/Output: [(2 37 -99 -88) -99]
Test Case: 642 | Input/Output: [(-98 -86 -7 44) -98]
Test Case: 643 | Input/Output: [(8 84 93 -50) -50]
Test Case: 644 | Input/Output: [(-1 68 -93 1) -93]
Test Case: 645 | Input/Output: [(40 29 -54 -34) -54]
Test Case: 646 | Input/Output: [(-71 17 -46 28) -71]
Test Case: 647 | Input/Output: [(-97 -66 46 7) -97]
Test Case: 648 | Input/Output: [(-32 -4 90 35) -32]
Test Case: 649 | Input/Output: [(27 -58 74 -22) -58]
Test Case: 650 | Input/Output: [(-96 82 90 -61) -96]
Test Case: 651 | Input/Output: [(-32 45 -30 -55) -55]
Test Case: 652 | Input/Output: [(-21 46 -77 37) -77]
Test Case: 653 | Input/Output: [(63 51 85 61) 51]
Test Case: 654 | Input/Output: [(39 -94 5 -72) -94]
Test Case: 655 | Input/Output: [(5 66 13 88) 5]
Test Case: 656 | Input/Output: [(-7 -100 45 3) -100]
Test Case: 657 | Input/Output: [(-66 42 38 7) -66]
Test Case: 658 | Input/Output: [(2 82 22 -29) -29]
Test Case: 659 | Input/Output: [(43 -37 -93 5) -93]
Test Case: 660 | Input/Output: [(85 -64 42 31) -64]
Test Case: 661 | Input/Output: [(34 40 -2 35) -2]
Test Case: 662 | Input/Output: [(39 -83 83 85) -83]
Test Case: 663 | Input/Output: [(42 60 -35 31) -35]
Test Case: 664 | Input/Output: [(9 -8 -89 2) -89]
Test Case: 665 | Input/Output: [(21 -10 -73 90) -73]
Test Case: 666 | Input/Output: [(-26 39 84 70) -26]
Test Case: 667 | Input/Output: [(63 -95 -37 100) -95]
Test Case: 668 | Input/Output: [(-52 -65 85 -38) -65]
Test Case: 669 | Input/Output: [(26 56 77 4) 4]
Test Case: 670 | Input/Output: [(-63 -73 -5 -46) -73]
Test Case: 671 | Input/Output: [(-38 -19 -93 93) -93]
Test Case: 672 | Input/Output: [(59 -38 19 -69) -69]
Test Case: 673 | Input/Output: [(7 74 16 27) 7]
Test Case: 674 | Input/Output: [(-97 37 -66 44) -97]
Test Case: 675 | Input/Output: [(-47 -14 -94 -29) -94]
Test Case: 676 | Input/Output: [(68 -14 68 -3) -14]
Test Case: 677 | Input/Output: [(-8 21 -59 55) -59]
Test Case: 678 | Input/Output: [(35 -53 69 67) -53]
Test Case: 679 | Input/Output: [(31 89 -98 96) -98]
Test Case: 680 | Input/Output: [(16 92 -10 18) -10]
Test Case: 681 | Input/Output: [(-73 -12 59 -6) -73]
Test Case: 682 | Input/Output: [(93 -7 -87 -9) -87]
Test Case: 683 | Input/Output: [(-70 78 -62 40) -70]
Test Case: 684 | Input/Output: [(49 -92 -24 -53) -92]
Test Case: 685 | Input/Output: [(49 52 76 23) 23]
Test Case: 686 | Input/Output: [(76 71 26 16) 16]
Test Case: 687 | Input/Output: [(99 -47 -55 60) -55]
Test Case: 688 | Input/Output: [(-34 43 -54 -45) -54]
Test Case: 689 | Input/Output: [(52 34 -56 -63) -63]
Test Case: 690 | Input/Output: [(61 -13 -71 -79) -79]
Test Case: 691 | Input/Output: [(-33 63 95 -16) -33]
Test Case: 692 | Input/Output: [(-27 -44 -96 65) -96]
Test Case: 693 | Input/Output: [(16 46 -20 41) -20]
Test Case: 694 | Input/Output: [(17 -55 -81 100) -81]
Test Case: 695 | Input/Output: [(-89 -54 12 75) -89]
Test Case: 696 | Input/Output: [(39 -92 -3 -3) -92]
Test Case: 697 | Input/Output: [(77 58 -41 -86) -86]
Test Case: 698 | Input/Output: [(73 -57 -46 -1) -57]
Test Case: 699 | Input/Output: [(-68 58 18 -58) -68]
Test Case: 700 | Input/Output: [(30 0 95 74) 0]
Test Case: 701 | Input/Output: [(-20 92 -5 -29) -29]
Test Case: 702 | Input/Output: [(32 -16 11 -95) -95]
Test Case: 703 | Input/Output: [(-56 -99 82 -21) -99]
Test Case: 704 | Input/Output: [(-27 -18 36 55) -27]
Test Case: 705 | Input/Output: [(-32 -70 43 65) -70]
Test Case: 706 | Input/Output: [(32 87 45 51) 32]
Test Case: 707 | Input/Output: [(-56 -74 58 78) -74]
Test Case: 708 | Input/Output: [(89 71 -92 72) -92]
Test Case: 709 | Input/Output: [(-76 63 -47 -17) -76]
Test Case: 710 | Input/Output: [(23 -22 91 -39) -39]
Test Case: 711 | Input/Output: [(-12 36 -14 88) -14]
Test Case: 712 | Input/Output: [(-86 -97 91 -12) -97]
Test Case: 713 | Input/Output: [(-91 26 -48 1) -91]
Test Case: 714 | Input/Output: [(-85 -55 -99 16) -99]
Test Case: 715 | Input/Output: [(79 66 -18 78) -18]
Test Case: 716 | Input/Output: [(30 -3 60 -48) -48]
Test Case: 717 | Input/Output: [(-32 2 -41 86) -41]
Test Case: 718 | Input/Output: [(49 84 -46 71) -46]
Test Case: 719 | Input/Output: [(40 -84 -42 -100) -100]
Test Case: 720 | Input/Output: [(-39 -74 98 64) -74]
Test Case: 721 | Input/Output: [(82 66 -34 -59) -59]
Test Case: 722 | Input/Output: [(63 18 -13 -100) -100]
Test Case: 723 | Input/Output: [(81 -86 -27 -27) -86]
Test Case: 724 | Input/Output: [(47 -70 60 11) -70]
Test Case: 725 | Input/Output: [(-57 -99 73 -50) -99]
Test Case: 726 | Input/Output: [(48 0 70 50) 0]
Test Case: 727 | Input/Output: [(52 100 73 53) 52]
Test Case: 728 | Input/Output: [(-6 58 -22 -49) -49]
Test Case: 729 | Input/Output: [(96 -84 -23 -51) -84]
Test Case: 730 | Input/Output: [(64 -55 74 100) -55]
Test Case: 731 | Input/Output: [(-7 49 -3 -34) -34]
Test Case: 732 | Input/Output: [(-46 -63 -62 -24) -63]
Test Case: 733 | Input/Output: [(53 -24 31 -30) -30]
Test Case: 734 | Input/Output: [(-28 -52 35 64) -52]
Test Case: 735 | Input/Output: [(32 -45 -66 61) -66]
Test Case: 736 | Input/Output: [(-77 63 -5 1) -77]
Test Case: 737 | Input/Output: [(19 37 -21 59) -21]
Test Case: 738 | Input/Output: [(-62 -10 -19 60) -62]
Test Case: 739 | Input/Output: [(25 37 16 -24) -24]
Test Case: 740 | Input/Output: [(2 9 -100 -4) -100]
Test Case: 741 | Input/Output: [(30 -69 33 5) -69]
Test Case: 742 | Input/Output: [(-13 78 28 59) -13]
Test Case: 743 | Input/Output: [(79 49 -89 -46) -89]
Test Case: 744 | Input/Output: [(-90 49 -60 100) -90]
Test Case: 745 | Input/Output: [(-64 -67 -93 88) -93]
Test Case: 746 | Input/Output: [(89 -89 -73 -94) -94]
Test Case: 747 | Input/Output: [(67 45 -93 -78) -93]
Test Case: 748 | Input/Output: [(-55 -38 21 87) -55]
Test Case: 749 | Input/Output: [(0 -66 -35 -13) -66]
Test Case: 750 | Input/Output: [(5 69 -7 -37) -37]
Test Case: 751 | Input/Output: [(32 -62 35 93) -62]
Test Case: 752 | Input/Output: [(87 -12 1 39) -12]
Test Case: 753 | Input/Output: [(3 -8 21 59) -8]
Test Case: 754 | Input/Output: [(34 68 -28 -13) -28]
Test Case: 755 | Input/Output: [(-32 -70 -81 5) -81]
Test Case: 756 | Input/Output: [(15 24 85 -67) -67]
Test Case: 757 | Input/Output: [(-19 -26 77 -56) -56]
Test Case: 758 | Input/Output: [(-86 -26 50 -21) -86]
Test Case: 759 | Input/Output: [(-36 -34 63 -69) -69]
Test Case: 760 | Input/Output: [(-65 -60 97 56) -65]
Test Case: 761 | Input/Output: [(-12 83 81 -59) -59]
Test Case: 762 | Input/Output: [(90 75 -20 98) -20]
Test Case: 763 | Input/Output: [(-5 -60 93 69) -60]
Test Case: 764 | Input/Output: [(-37 -1 46 97) -37]
Test Case: 765 | Input/Output: [(-91 92 -50 3) -91]
Test Case: 766 | Input/Output: [(54 -58 -79 -80) -80]
Test Case: 767 | Input/Output: [(57 42 23 -41) -41]
Test Case: 768 | Input/Output: [(-57 66 17 50) -57]
Test Case: 769 | Input/Output: [(18 -54 -11 -30) -54]
Test Case: 770 | Input/Output: [(45 -78 10 -27) -78]
Test Case: 771 | Input/Output: [(81 54 11 -97) -97]
Test Case: 772 | Input/Output: [(-20 -83 24 -38) -83]
Test Case: 773 | Input/Output: [(-6 -18 78 87) -18]
Test Case: 774 | Input/Output: [(62 -69 -29 12) -69]
Test Case: 775 | Input/Output: [(91 62 23 -70) -70]
Test Case: 776 | Input/Output: [(59 -5 -36 -50) -50]
Test Case: 777 | Input/Output: [(-33 34 80 -55) -55]
Test Case: 778 | Input/Output: [(57 92 4 50) 4]
Test Case: 779 | Input/Output: [(-85 -42 -71 32) -85]
Test Case: 780 | Input/Output: [(75 -98 -18 -28) -98]
Test Case: 781 | Input/Output: [(97 0 39 99) 0]
Test Case: 782 | Input/Output: [(23 89 -87 -69) -87]
Test Case: 783 | Input/Output: [(-32 -86 -64 -62) -86]
Test Case: 784 | Input/Output: [(8 -86 -11 -70) -86]
Test Case: 785 | Input/Output: [(86 17 51 74) 17]
Test Case: 786 | Input/Output: [(-27 -31 63 0) -31]
Test Case: 787 | Input/Output: [(-59 77 30 -18) -59]
Test Case: 788 | Input/Output: [(-11 5 -78 -8) -78]
Test Case: 789 | Input/Output: [(-32 -31 57 -96) -96]
Test Case: 790 | Input/Output: [(34 -70 -57 10) -70]
Test Case: 791 | Input/Output: [(-97 49 -63 -16) -97]
Test Case: 792 | Input/Output: [(92 10 -37 -3) -37]
Test Case: 793 | Input/Output: [(48 31 35 -87) -87]
Test Case: 794 | Input/Output: [(-74 -66 -93 -32) -93]
Test Case: 795 | Input/Output: [(-11 14 74 -4) -11]
Test Case: 796 | Input/Output: [(94 71 16 100) 16]
Test Case: 797 | Input/Output: [(-34 0 59 3) -34]
Test Case: 798 | Input/Output: [(-77 -92 12 -97) -97]
Test Case: 799 | Input/Output: [(1 -96 -99 -30) -99]
Test Case: 800 | Input/Output: [(-100 68 -30 -61) -100]
Test Case: 801 | Input/Output: [(-49 23 -96 61) -96]
Test Case: 802 | Input/Output: [(25 34 -58 16) -58]
Test Case: 803 | Input/Output: [(33 30 -33 60) -33]
Test Case: 804 | Input/Output: [(80 -53 99 43) -53]
Test Case: 805 | Input/Output: [(-95 3 35 24) -95]
Test Case: 806 | Input/Output: [(71 -74 13 48) -74]
Test Case: 807 | Input/Output: [(7 41 -30 -78) -78]
Test Case: 808 | Input/Output: [(11 -53 -79 2) -79]
Test Case: 809 | Input/Output: [(78 83 0 86) 0]
Test Case: 810 | Input/Output: [(42 9 -85 74) -85]
Test Case: 811 | Input/Output: [(-48 -79 -67 -49) -79]
Test Case: 812 | Input/Output: [(16 -70 73 -32) -70]
Test Case: 813 | Input/Output: [(21 43 58 -50) -50]
Test Case: 814 | Input/Output: [(9 55 83 -83) -83]
Test Case: 815 | Input/Output: [(22 -4 24 -55) -55]
Test Case: 816 | Input/Output: [(-31 -14 72 70) -31]
Test Case: 817 | Input/Output: [(-55 -76 -8 67) -76]
Test Case: 818 | Input/Output: [(-20 -71 59 63) -71]
Test Case: 819 | Input/Output: [(44 11 -37 52) -37]
Test Case: 820 | Input/Output: [(-42 53 -2 -47) -47]
Test Case: 821 | Input/Output: [(-35 71 -70 58) -70]
Test Case: 822 | Input/Output: [(34 77 97 25) 25]
Test Case: 823 | Input/Output: [(-100 -21 -11 -48) -100]
Test Case: 824 | Input/Output: [(12 89 38 81) 12]
Test Case: 825 | Input/Output: [(53 17 89 63) 17]
Test Case: 826 | Input/Output: [(-1 49 -58 -52) -58]
Test Case: 827 | Input/Output: [(7 100 79 64) 7]
Test Case: 828 | Input/Output: [(-100 -100 86 63) -100]
Test Case: 829 | Input/Output: [(31 95 -64 72) -64]
Test Case: 830 | Input/Output: [(-86 76 61 38) -86]
Test Case: 831 | Input/Output: [(97 77 -80 56) -80]
Test Case: 832 | Input/Output: [(83 -29 -20 -39) -39]
Test Case: 833 | Input/Output: [(-54 99 -68 -13) -68]
Test Case: 834 | Input/Output: [(-48 54 12 -97) -97]
Test Case: 835 | Input/Output: [(36 63 48 -58) -58]
Test Case: 836 | Input/Output: [(-89 33 59 48) -89]
Test Case: 837 | Input/Output: [(-21 2 -75 -5) -75]
Test Case: 838 | Input/Output: [(26 86 -26 -32) -32]
Test Case: 839 | Input/Output: [(27 -88 90 -21) -88]
Test Case: 840 | Input/Output: [(-96 10 -49 71) -96]
Test Case: 841 | Input/Output: [(95 55 31 11) 11]
Test Case: 842 | Input/Output: [(-100 -35 -68 -63) -100]
Test Case: 843 | Input/Output: [(28 53 -13 -61) -61]
Test Case: 844 | Input/Output: [(-65 -36 -37 -72) -72]
Test Case: 845 | Input/Output: [(34 -23 56 -83) -83]
Test Case: 846 | Input/Output: [(26 -71 64 85) -71]
Test Case: 847 | Input/Output: [(30 27 73 1) 1]
Test Case: 848 | Input/Output: [(49 32 54 -74) -74]
Test Case: 849 | Input/Output: [(-95 -45 -93 -11) -95]
Test Case: 850 | Input/Output: [(95 21 50 72) 21]
Test Case: 851 | Input/Output: [(-81 42 -40 19) -81]
Test Case: 852 | Input/Output: [(-41 54 -9 -87) -87]
Test Case: 853 | Input/Output: [(-50 14 -73 57) -73]
Test Case: 854 | Input/Output: [(70 -74 -30 -84) -84]
Test Case: 855 | Input/Output: [(73 92 80 33) 33]
Test Case: 856 | Input/Output: [(-13 -13 96 2) -13]
Test Case: 857 | Input/Output: [(-7 -3 -55 63) -55]
Test Case: 858 | Input/Output: [(16 -88 -46 10) -88]
Test Case: 859 | Input/Output: [(0 75 -4 19) -4]
Test Case: 860 | Input/Output: [(-29 76 24 -74) -74]
Test Case: 861 | Input/Output: [(-82 74 -31 -38) -82]
Test Case: 862 | Input/Output: [(50 10 80 50) 10]
Test Case: 863 | Input/Output: [(-94 -77 -36 -78) -94]
Test Case: 864 | Input/Output: [(83 74 -40 -57) -57]
Test Case: 865 | Input/Output: [(56 -18 63 3) -18]
Test Case: 866 | Input/Output: [(10 45 93 19) 10]
Test Case: 867 | Input/Output: [(-85 73 10 -43) -85]
Test Case: 868 | Input/Output: [(7 97 -36 91) -36]
Test Case: 869 | Input/Output: [(-100 -5 8 -59) -100]
Test Case: 870 | Input/Output: [(-68 86 53 -63) -68]
Test Case: 871 | Input/Output: [(-73 -67 -26 27) -73]
Test Case: 872 | Input/Output: [(26 92 18 27) 18]
Test Case: 873 | Input/Output: [(-3 -90 -12 -41) -90]
Test Case: 874 | Input/Output: [(-31 41 93 63) -31]
Test Case: 875 | Input/Output: [(-40 59 73 -33) -40]
Test Case: 876 | Input/Output: [(-11 -19 -81 -59) -81]
Test Case: 877 | Input/Output: [(15 -20 -10 -99) -99]
Test Case: 878 | Input/Output: [(41 -29 -31 -42) -42]
Test Case: 879 | Input/Output: [(8 -20 14 59) -20]
Test Case: 880 | Input/Output: [(3 -34 68 -38) -38]
Test Case: 881 | Input/Output: [(2 15 35 -29) -29]
Test Case: 882 | Input/Output: [(93 -47 24 21) -47]
Test Case: 883 | Input/Output: [(16 -93 -75 33) -93]
Test Case: 884 | Input/Output: [(84 27 -32 -48) -48]
Test Case: 885 | Input/Output: [(-37 -16 1 19) -37]
Test Case: 886 | Input/Output: [(38 95 -73 56) -73]
Test Case: 887 | Input/Output: [(28 -72 -21 -28) -72]
Test Case: 888 | Input/Output: [(-74 -93 -99 49) -99]
Test Case: 889 | Input/Output: [(-60 91 57 -16) -60]
Test Case: 890 | Input/Output: [(-13 -33 31 33) -33]
Test Case: 891 | Input/Output: [(59 -90 17 49) -90]
Test Case: 892 | Input/Output: [(39 6 31 -40) -40]
Test Case: 893 | Input/Output: [(33 33 -83 4) -83]
Test Case: 894 | Input/Output: [(14 86 -63 82) -63]
Test Case: 895 | Input/Output: [(-73 24 -83 0) -83]
Test Case: 896 | Input/Output: [(5 50 -42 40) -42]
Test Case: 897 | Input/Output: [(-44 -8 -19 64) -44]
Test Case: 898 | Input/Output: [(25 -54 -29 -40) -54]
Test Case: 899 | Input/Output: [(6 -70 96 -24) -70]
Test Case: 900 | Input/Output: [(50 50 97 71) 50]
Test Case: 901 | Input/Output: [(1 56 -28 35) -28]
Test Case: 902 | Input/Output: [(-21 -15 50 -45) -45]
Test Case: 903 | Input/Output: [(-37 -17 51 89) -37]
Test Case: 904 | Input/Output: [(81 85 -89 -2) -89]
Test Case: 905 | Input/Output: [(94 25 -18 90) -18]
Test Case: 906 | Input/Output: [(56 8 -15 89) -15]
Test Case: 907 | Input/Output: [(28 -58 19 -41) -58]
Test Case: 908 | Input/Output: [(85 47 -70 11) -70]
Test Case: 909 | Input/Output: [(-39 76 15 15) -39]
Test Case: 910 | Input/Output: [(-87 45 18 -75) -87]
Test Case: 911 | Input/Output: [(55 78 -73 -94) -94]
Test Case: 912 | Input/Output: [(58 -19 98 -7) -19]
Test Case: 913 | Input/Output: [(97 76 65 -13) -13]
Test Case: 914 | Input/Output: [(66 -30 69 -86) -86]
Test Case: 915 | Input/Output: [(-8 34 92 11) -8]
Test Case: 916 | Input/Output: [(37 0 -65 -57) -65]
Test Case: 917 | Input/Output: [(-82 -67 -65 -39) -82]
Test Case: 918 | Input/Output: [(25 68 80 -29) -29]
Test Case: 919 | Input/Output: [(51 -53 -4 72) -53]
Test Case: 920 | Input/Output: [(18 95 86 -78) -78]
Test Case: 921 | Input/Output: [(-64 -11 73 63) -64]
Test Case: 922 | Input/Output: [(-47 -91 54 -6) -91]
Test Case: 923 | Input/Output: [(50 69 -14 -47) -47]
Test Case: 924 | Input/Output: [(-42 -17 94 -8) -42]
Test Case: 925 | Input/Output: [(-97 12 -34 -69) -97]
Test Case: 926 | Input/Output: [(74 36 -71 0) -71]
Test Case: 927 | Input/Output: [(79 32 83 -51) -51]
Test Case: 928 | Input/Output: [(36 80 17 -66) -66]
Test Case: 929 | Input/Output: [(-24 -3 14 -35) -35]
Test Case: 930 | Input/Output: [(96 91 100 -65) -65]
Test Case: 931 | Input/Output: [(-90 -84 -78 -45) -90]
Test Case: 932 | Input/Output: [(-36 62 -11 -52) -52]
Test Case: 933 | Input/Output: [(-65 94 -55 82) -65]
Test Case: 934 | Input/Output: [(95 -66 2 28) -66]
Test Case: 935 | Input/Output: [(67 16 51 10) 10]
Test Case: 936 | Input/Output: [(44 2 -85 -33) -85]
Test Case: 937 | Input/Output: [(-49 57 -79 23) -79]
Test Case: 938 | Input/Output: [(-68 -43 34 76) -68]
Test Case: 939 | Input/Output: [(-67 -34 -76 67) -76]
Test Case: 940 | Input/Output: [(31 29 -17 62) -17]
Test Case: 941 | Input/Output: [(-66 -14 83 -92) -92]
Test Case: 942 | Input/Output: [(-88 27 -81 -3) -88]
Test Case: 943 | Input/Output: [(61 48 -70 -28) -70]
Test Case: 944 | Input/Output: [(98 95 62 5) 5]
Test Case: 945 | Input/Output: [(48 5 36 -37) -37]
Test Case: 946 | Input/Output: [(-44 -19 98 -84) -84]
Test Case: 947 | Input/Output: [(44 53 -28 19) -28]
Test Case: 948 | Input/Output: [(73 -65 22 48) -65]
Test Case: 949 | Input/Output: [(15 42 84 45) 15]
Test Case: 950 | Input/Output: [(11 -83 -88 36) -88]
Test Case: 951 | Input/Output: [(-18 -43 94 6) -43]
Test Case: 952 | Input/Output: [(3 -8 -46 -27) -46]
Test Case: 953 | Input/Output: [(79 -21 -77 -62) -77]
Test Case: 954 | Input/Output: [(74 1 1 -73) -73]
Test Case: 955 | Input/Output: [(-13 -9 -22 -32) -32]
Test Case: 956 | Input/Output: [(98 -46 -2 24) -46]
Test Case: 957 | Input/Output: [(-50 86 -80 -11) -80]
Test Case: 958 | Input/Output: [(85 70 -51 97) -51]
Test Case: 959 | Input/Output: [(-61 -31 -17 -60) -61]
Test Case: 960 | Input/Output: [(-92 77 21 -13) -92]
Test Case: 961 | Input/Output: [(45 67 67 -24) -24]
Test Case: 962 | Input/Output: [(38 -82 -21 47) -82]
Test Case: 963 | Input/Output: [(-59 -19 -42 -55) -59]
Test Case: 964 | Input/Output: [(40 56 54 6) 6]
Test Case: 965 | Input/Output: [(65 -29 -17 46) -29]
Test Case: 966 | Input/Output: [(4 -33 4 -25) -33]
Test Case: 967 | Input/Output: [(-20 -1 -59 89) -59]
Test Case: 968 | Input/Output: [(-44 12 82 -32) -44]
Test Case: 969 | Input/Output: [(-66 -86 -9 -73) -86]
Test Case: 970 | Input/Output: [(-35 28 -72 -89) -89]
Test Case: 971 | Input/Output: [(33 49 34 -99) -99]
Test Case: 972 | Input/Output: [(-90 29 71 50) -90]
Test Case: 973 | Input/Output: [(-39 59 31 -71) -71]
Test Case: 974 | Input/Output: [(-47 83 -82 13) -82]
Test Case: 975 | Input/Output: [(-45 92 4 25) -45]
Test Case: 976 | Input/Output: [(70 -53 80 44) -53]
Test Case: 977 | Input/Output: [(-40 83 -8 34) -40]
Test Case: 978 | Input/Output: [(-91 -23 39 -48) -91]
Test Case: 979 | Input/Output: [(32 -64 -41 -34) -64]
Test Case: 980 | Input/Output: [(44 90 -2 37) -2]
Test Case: 981 | Input/Output: [(-79 -90 -66 30) -90]
Test Case: 982 | Input/Output: [(89 15 11 -25) -25]
Test Case: 983 | Input/Output: [(-8 -96 34 84) -96]
Test Case: 984 | Input/Output: [(14 21 -44 -7) -44]
Test Case: 985 | Input/Output: [(61 88 43 40) 40]
Test Case: 986 | Input/Output: [(-94 -50 -88 -43) -94]
Test Case: 987 | Input/Output: [(-97 -10 -64 59) -97]
Test Case: 988 | Input/Output: [(65 22 -91 4) -91]
Test Case: 989 | Input/Output: [(43 -53 54 -16) -53]
Test Case: 990 | Input/Output: [(83 -90 -33 57) -90]
Test Case: 991 | Input/Output: [(29 -20 22 69) -20]
Test Case: 992 | Input/Output: [(-6 75 64 -37) -37]
Test Case: 993 | Input/Output: [(0 -83 -36 59) -83]
Test Case: 994 | Input/Output: [(64 86 60 -31) -31]
Test Case: 995 | Input/Output: [(53 57 68 -2) -2]
Test Case: 996 | Input/Output: [(75 93 -47 -90) -90]
Test Case: 997 | Input/Output: [(17 29 56 39) 17]
Test Case: 998 | Input/Output: [(14 35 55 79) 14]
Test Case: 999 | Input/Output: [(-51 58 98 -31) -51]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:uniform-addition-and-deletion 1.0}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 3000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
random-screen = false
random-seed = -29 -82 64 9 -16 -125 -48 39 -113 -82 -77 18 -53 44 71 66
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-68 -68 12 -68] -68] [[-12 -11 -12 -12] -12] [[-5 -5 -5 -100] -100] [[-26 -26 -84 -26] -84] [[-53 -66 -53 -53] -66] [[56 56 -43 56] -43] [[-92 -92 -55 -92] -92] [[7 7 7 77] 7] [[-11 -11 -80 -11] -80] [[-51 -51 -74 -51] -74] [(-47 -47 -47 -47) -47] [(-13 -13 -13 -13) -13] [(20 20 20 20) 20] [(-26 -26 -26 -26) -26] [(76 76 76 76) 76] [(59 26 5 36) 5] [(16 52 36 48) 16] [(30 68 14 12) 12] [(59 17 100 21) 17] [(37 82 13 100) 13] [(72 91 71 96) 71] [(81 8 69 45) 8] [(2 13 1 36) 1] [(71 68 90 80) 68] [(33 58 98 1) 1] [(59 74 38 71) 38] [(89 20 69 18) 18] [(32 25 21 30) 21] [(71 49 50 41) 41] [(12 21 100 58) 12] [(65 39 68 3) 3] [(33 47 19 29) 19] [(33 57 53 19) 19] [(49 46 18 7) 7] [(60 59 34 52) 34] [(-58 -78 -80 80) -80] [(63 -14 46 58) -14] [(-20 -84 47 94) -84] [(-75 -58 -63 88) -75] [(1 -68 -46 -70) -70] [(33 -69 -59 -75) -75] [(48 32 -60 -11) -60] [(-70 87 -98 0) -98] [(-72 -66 48 -94) -94] [(50 59 -16 59) -16] [(-55 83 -10 83) -55] [(13 68 54 -55) -55] [(55 -76 22 11) -76] [(16 44 -4 43) -4] [(-5 -90 -53 21) -90] [(-12 -39 -33 -34) -39] [(-79 65 -52 77) -79] [(-42 -13 -29 -72) -72] [(-85 -58 90 98) -85] [(-80 -80 97 -91) -91] [(-20 -58 -33 50) -58] [(54 34 43 83) 34] [(38 90 -6 37) -6] [(84 -70 -70 -74) -74] [(-28 12 -47 -30) -47] [(68 -85 62 -84) -85] [(-68 91 53 91) -68] [(-91 67 6 -4) -91] [(-25 97 -78 85) -78] [(9 -95 72 -37) -95] [(-84 4 -91 45) -91] [(60 10 59 -25) -25] [(-23 -92 94 6) -92] [(60 -63 68 5) -63] [(-10 -89 70 4) -89] [(100 70 -44 -29) -44] [(51 68 -66 -48) -66] [(-51 98 -67 24) -67] [(-21 61 -69 -84) -84] [(-68 84 24 -40) -68] [(40 41 30 -26) -26] [(53 -92 45 -19) -92] [(32 -20 -40 11) -40] [(-91 -75 92 -22) -91] [(22 -56 -84 -56) -84] [(-37 -54 44 85) -54] [(91 73 -14 -36) -36] [(-17 0 -20 38) -20] [(90 87 -54 92) -54] [(-6 80 -54 75) -54] [(-71 -98 25 -65) -98] [(-93 50 -53 -95) -95] [(-39 -65 70 -27) -65] [(-68 4 4 -55) -68] [(-36 95 19 35) -36] [(26 19 82 -14) -14] [(79 -65 -98 60) -98] [(-22 87 -64 40) -64] [(-76 -15 77 27) -76] [(58 68 29 23) 23])
uniform-addition-and-deletion-rate = 0.09
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 636
Test mean error for best: 0.63600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -68                 | Program output: -68                
Correct output: -12                 | Program output: -11                
Correct output: -100                | Program output: -5                 
Correct output: -84                 | Program output: -26                
Correct output: -66                 | Program output: -66                
Correct output: -43                 | Program output: 56                 
Correct output: -92                 | Program output: -92                
Correct output: 7                   | Program output: 7                  
Correct output: -80                 | Program output: -11                
Correct output: -74                 | Program output: -51                
Correct output: -47                 | Program output: -47                
Correct output: -13                 | Program output: -13                
Correct output: 20                  | Program output: 20                 
Correct output: -26                 | Program output: -26                
Correct output: 76                  | Program output: 76                 
Correct output: 5                   | Program output: 26                 
Correct output: 16                  | Program output: exec_stackdepth52  
Correct output: 12                  | Program output: 68                 
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 82                 
Correct output: 71                  | Program output: 91                 
Correct output: 8                   | Program output: 8                  
Correct output: 1                   | Program output: 13                 
Correct output: 68                  | Program output: 68                 
Correct output: 1                   | Program output: 58                 
Correct output: 38                  | Program output: 74                 
Correct output: 18                  | Program output: 20                 
Correct output: 21                  | Program output: 25                 
Correct output: 41                  | Program output: 49                 
Correct output: 12                  | Program output: 21                 
Correct output: 3                   | Program output: 39                 
Correct output: 19                  | Program output: 47                 
Correct output: 19                  | Program output: 57                 
Correct output: 7                   | Program output: 46                 
Correct output: 34                  | Program output: 59                 
Correct output: -80                 | Program output: -78                
Correct output: -14                 | Program output: -14                
Correct output: -84                 | Program output: -84                
Correct output: -75                 | Program output: -58                
Correct output: -70                 | Program output: -68                
Correct output: -75                 | Program output: -69                
Correct output: -60                 | Program output: 32                 
Correct output: -98                 | Program output: 87                 
Correct output: -94                 | Program output: -66                
Correct output: -16                 | Program output: 59                 
Correct output: -55                 | Program output: 83                 
Correct output: -55                 | Program output: -2968              
Correct output: -76                 | Program output: -76                
Correct output: -4                  | Program output: exec_stackdepth44  
Correct output: -90                 | Program output: -90                
Correct output: -39                 | Program output: -39                
Correct output: -79                 | Program output: 65                 
Correct output: -72                 | Program output: -13                
Correct output: -85                 | Program output: -58                
Correct output: -91                 | Program output: -80                
Correct output: -58                 | Program output: -58                
Correct output: 34                  | Program output: 34                 
Correct output: -6                  | Program output: 90                 
Correct output: -74                 | Program output: -70                
Correct output: -47                 | Program output: 12                 
Correct output: -85                 | Program output: -85                
Correct output: -68                 | Program output: 91                 
Correct output: -91                 | Program output: 67                 
Correct output: -78                 | Program output: 97                 
Correct output: -95                 | Program output: -95                
Correct output: -91                 | Program output: 4                  
Correct output: -25                 | Program output: 10                 
Correct output: -92                 | Program output: -92                
Correct output: -63                 | Program output: -63                
Correct output: -89                 | Program output: -89                
Correct output: -44                 | Program output: 70                 
Correct output: -66                 | Program output: 68                 
Correct output: -67                 | Program output: 98                 
Correct output: -84                 | Program output: 61                 
Correct output: -68                 | Program output: 84                 
Correct output: -26                 | Program output: 41                 
Correct output: -92                 | Program output: -92                
Correct output: -40                 | Program output: -20                
Correct output: -91                 | Program output: -75                
Correct output: -84                 | Program output: -56                
Correct output: -54                 | Program output: -54                
Correct output: -36                 | Program output: 73                 
Correct output: -20                 | Program output: 0                  
Correct output: -54                 | Program output: 87                 
Correct output: -54                 | Program output: 80                 
Correct output: -98                 | Program output: -98                
Correct output: -95                 | Program output: 50                 
Correct output: -65                 | Program output: -65                
Correct output: -68                 | Program output: 4                  
Correct output: -36                 | Program output: 95                 
Correct output: -14                 | Program output: 19                 
Correct output: -98                 | Program output: -65                
Correct output: -64                 | Program output: 87                 
Correct output: -76                 | Program output: -15                
Correct output: 23                  | Program output: 68                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction -29} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_xor} {:close 1, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_div} {:close 2, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_add} {:close 1, :instruction integer_max} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_flush} {:close 1, :instruction in2} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_gte} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yank} {:close 1, :instruction print_exec} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_eq} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction boolean_or})
Lexicase best program: (boolean_swap -29 integer_yankdup integer_mult integer_swap exec_when (boolean_xor in1) exec_yankdup exec_stackdepth integer_div in2 exec_do*while (in4 boolean_invert_second_then_and integer_add) integer_max integer_empty integer_gt boolean_empty boolean_flush in2 exec_stackdepth exec_do*times (exec_do*while (print_integer boolean_frominteger) boolean_dup_items boolean_xor integer_gte) boolean_invert_second_then_and exec_yank print_exec () exec_stackdepth boolean_frominteger boolean_eq integer_dup_items exec_dup_items boolean_swap integer_gt integer_fromboolean integer_pop integer_mult exec_s_when_autoconstructing (integer_max in4 boolean_or) () ())
Lexicase best errors: [0 0 1 0 1 1 0 0 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 56
Percent parens: 0.161
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction -29} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_xor} {:close 1, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_div} {:close 2, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_add} {:close 1, :instruction integer_max} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_flush} {:close 1, :instruction in2} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_gte} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yank} {:close 1, :instruction print_exec} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_eq} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction boolean_or})
Zero cases best program: (boolean_swap -29 integer_yankdup integer_mult integer_swap exec_when (boolean_xor in1) exec_yankdup exec_stackdepth integer_div in2 exec_do*while (in4 boolean_invert_second_then_and integer_add) integer_max integer_empty integer_gt boolean_empty boolean_flush in2 exec_stackdepth exec_do*times (exec_do*while (print_integer boolean_frominteger) boolean_dup_items boolean_xor integer_gte) boolean_invert_second_then_and exec_yank print_exec () exec_stackdepth boolean_frominteger boolean_eq integer_dup_items exec_dup_items boolean_swap integer_gt integer_fromboolean integer_pop integer_mult exec_s_when_autoconstructing (integer_max in4 boolean_or) () ())
Zero cases best errors: [0 0 1 0 1 1 0 0 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 56
Percent parens: 0.161
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 1 4 1 2 2 1 1 4 1)
Population mean number of elite cases: 0.02
Count of perfect (error zero) individuals by case: (1 1 4 1 2 2 1 1 4 1)
Population mean number of perfect (error zero) cases: 0.02
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction -29} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_xor} {:close 1, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_div} {:close 2, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_add} {:close 1, :instruction integer_max} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_flush} {:close 1, :instruction in2} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_gte} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yank} {:close 1, :instruction print_exec} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_eq} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction boolean_or})
Best program: (boolean_swap -29 integer_yankdup integer_mult integer_swap exec_when (boolean_xor in1) exec_yankdup exec_stackdepth integer_div in2 exec_do*while (in4 boolean_invert_second_then_and integer_add) integer_max integer_empty integer_gt boolean_empty boolean_flush in2 exec_stackdepth exec_do*times (exec_do*while (print_integer boolean_frominteger) boolean_dup_items boolean_xor integer_gte) boolean_invert_second_then_and exec_yank print_exec () exec_stackdepth boolean_frominteger boolean_eq integer_dup_items exec_dup_items boolean_swap integer_gt integer_fromboolean integer_pop integer_mult exec_s_when_autoconstructing (integer_max in4 boolean_or) () ())
Errors: [0 0 1 0 1 1 0 0 1 1]
Total: 5
Mean: 0.5
Genome size: 47
Size: 56
Percent parens: 0.161
--- Population Statistics ---
Average total errors in population: 9.982
Median total errors in population: 10
Error averages by case: (0.999 0.999 0.996 0.999 0.998 0.998 0.999 0.999 0.996 0.999)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.869
Average program size in population (points): 70.08
Average percent parens in population: 0.281
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.999
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.999
Total error diversity:				 0.004
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.278
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 506123
--- Timings ---
Current time: 1559593871646 milliseconds
Total Time:           2.6 seconds
Initialization:       0.1 seconds,  4.0%
Reproduction:         0.7 seconds, 27.7%
Fitness Testing:      1.7 seconds, 68.4%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 644
Test mean error for best: 0.64400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -68                 | Program output: -68                
Correct output: -12                 | Program output: -12                
Correct output: -100                | Program output: -100               
Correct output: -84                 | Program output: -26                
Correct output: -66                 | Program output: -53                
Correct output: -43                 | Program output: 56                 
Correct output: -92                 | Program output: -92                
Correct output: 7                   | Program output: 77                 
Correct output: -80                 | Program output: -11                
Correct output: -74                 | Program output: -51                
Correct output: -47                 | Program output: -47                
Correct output: -13                 | Program output: -13                
Correct output: 20                  | Program output: 20                 
Correct output: -26                 | Program output: -26                
Correct output: 76                  | Program output: 76                 
Correct output: 5                   | Program output: 36                 
Correct output: 16                  | Program output: 48                 
Correct output: 12                  | Program output: 12                 
Correct output: 17                  | Program output: 21                 
Correct output: 13                  | Program output: 100                
Correct output: 71                  | Program output: 96                 
Correct output: 8                   | Program output: 45                 
Correct output: 1                   | Program output: 36                 
Correct output: 68                  | Program output: 80                 
Correct output: 1                   | Program output: 1                  
Correct output: 38                  | Program output: 71                 
Correct output: 18                  | Program output: 18                 
Correct output: 21                  | Program output: 30                 
Correct output: 41                  | Program output: 41                 
Correct output: 12                  | Program output: 58                 
Correct output: 3                   | Program output: 3                  
Correct output: 19                  | Program output: 29                 
Correct output: 19                  | Program output: 19                 
Correct output: 7                   | Program output: 7                  
Correct output: 34                  | Program output: 52                 
Correct output: -80                 | Program output: 80                 
Correct output: -14                 | Program output: 58                 
Correct output: -84                 | Program output: 94                 
Correct output: -75                 | Program output: 88                 
Correct output: -70                 | Program output: -70                
Correct output: -75                 | Program output: -75                
Correct output: -60                 | Program output: -11                
Correct output: -98                 | Program output: 0                  
Correct output: -94                 | Program output: -94                
Correct output: -16                 | Program output: 59                 
Correct output: -55                 | Program output: 83                 
Correct output: -55                 | Program output: -55                
Correct output: -76                 | Program output: 11                 
Correct output: -4                  | Program output: 43                 
Correct output: -90                 | Program output: 21                 
Correct output: -39                 | Program output: -34                
Correct output: -79                 | Program output: 77                 
Correct output: -72                 | Program output: -72                
Correct output: -85                 | Program output: 98                 
Correct output: -91                 | Program output: -91                
Correct output: -58                 | Program output: 50                 
Correct output: 34                  | Program output: 83                 
Correct output: -6                  | Program output: 37                 
Correct output: -74                 | Program output: -74                
Correct output: -47                 | Program output: -30                
Correct output: -85                 | Program output: -84                
Correct output: -68                 | Program output: 91                 
Correct output: -91                 | Program output: -4                 
Correct output: -78                 | Program output: 85                 
Correct output: -95                 | Program output: -37                
Correct output: -91                 | Program output: 45                 
Correct output: -25                 | Program output: -25                
Correct output: -92                 | Program output: 6                  
Correct output: -63                 | Program output: 5                  
Correct output: -89                 | Program output: 4                  
Correct output: -44                 | Program output: -29                
Correct output: -66                 | Program output: -48                
Correct output: -67                 | Program output: 24                 
Correct output: -84                 | Program output: -84                
Correct output: -68                 | Program output: -40                
Correct output: -26                 | Program output: -26                
Correct output: -92                 | Program output: -19                
Correct output: -40                 | Program output: 11                 
Correct output: -91                 | Program output: -22                
Correct output: -84                 | Program output: -56                
Correct output: -54                 | Program output: 85                 
Correct output: -36                 | Program output: -36                
Correct output: -20                 | Program output: 38                 
Correct output: -54                 | Program output: 92                 
Correct output: -54                 | Program output: 75                 
Correct output: -98                 | Program output: -65                
Correct output: -95                 | Program output: -95                
Correct output: -65                 | Program output: -27                
Correct output: -68                 | Program output: -55                
Correct output: -36                 | Program output: 35                 
Correct output: -14                 | Program output: -14                
Correct output: -98                 | Program output: 60                 
Correct output: -64                 | Program output: 40                 
Correct output: -76                 | Program output: 27                 
Correct output: 23                  | Program output: 23                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_min} {:close 2, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction -75} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_min} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup_items} {:close 2, :instruction integer_dup_items} {:close 0, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_swap} {:close 1, :instruction 60} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_shove} {:close 2, :instruction exec_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_lt} {:close 0, :instruction in4} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_add} {:close 0, :instruction exec_when} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_dup_items})
Lexicase best program: (print_integer integer_stackdepth boolean_invert_first_then_and integer_min in2 in1 -75 boolean_yankdup boolean_xor integer_min exec_empty exec_yankdup exec_dup_times (integer_mult boolean_dup_items integer_dup_items) in4 exec_pop (exec_dup (boolean_invert_second_then_and exec_swap () (60) exec_flush) boolean_dup_times boolean_invert_second_then_and integer_dup) boolean_eq exec_s_when_autoconstructing (boolean_invert_first_then_and integer_rot print_integer in1 exec_s_when_autoconstructing () (exec_dup_times (boolean_shove exec_shove ()) boolean_and integer_lte integer_yank exec_empty) (integer_dup_times integer_stackdepth) in2 exec_shove (exec_yank) exec_shove (exec_shove () integer_mod boolean_invert_first_then_and boolean_pop) exec_if (integer_yankdup boolean_dup boolean_yankdup) (boolean_or integer_lt in4 integer_mod) boolean_invert_second_then_and integer_add exec_when (integer_empty integer_rot boolean_swap boolean_rot) exec_dup_items) () ())
Lexicase best errors: [0 0 1 1 0 0 1 1 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 86
Percent parens: 0.233
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_min} {:close 2, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction -75} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_min} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup_items} {:close 2, :instruction integer_dup_items} {:close 0, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_swap} {:close 1, :instruction 60} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_shove} {:close 2, :instruction exec_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_lt} {:close 0, :instruction in4} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_add} {:close 0, :instruction exec_when} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_dup_items})
Zero cases best program: (print_integer integer_stackdepth boolean_invert_first_then_and integer_min in2 in1 -75 boolean_yankdup boolean_xor integer_min exec_empty exec_yankdup exec_dup_times (integer_mult boolean_dup_items integer_dup_items) in4 exec_pop (exec_dup (boolean_invert_second_then_and exec_swap () (60) exec_flush) boolean_dup_times boolean_invert_second_then_and integer_dup) boolean_eq exec_s_when_autoconstructing (boolean_invert_first_then_and integer_rot print_integer in1 exec_s_when_autoconstructing () (exec_dup_times (boolean_shove exec_shove ()) boolean_and integer_lte integer_yank exec_empty) (integer_dup_times integer_stackdepth) in2 exec_shove (exec_yank) exec_shove (exec_shove () integer_mod boolean_invert_first_then_and boolean_pop) exec_if (integer_yankdup boolean_dup boolean_yankdup) (boolean_or integer_lt in4 integer_mod) boolean_invert_second_then_and integer_add exec_when (integer_empty integer_rot boolean_swap boolean_rot) exec_dup_items) () ())
Zero cases best errors: [0 0 1 1 0 0 1 1 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 86
Percent parens: 0.233
--- Lexicase Population Statistics ---
Count of elite individuals by case: (55 52 232 227 55 51 82 82 98 98)
Population mean number of elite cases: 1.03
Count of perfect (error zero) individuals by case: (55 52 232 227 55 51 82 82 98 98)
Population mean number of perfect (error zero) cases: 1.03
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_min} {:close 2, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction -75} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_min} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup_items} {:close 2, :instruction integer_dup_items} {:close 0, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 1, :instruction exec_swap} {:close 1, :instruction 60} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 2, :instruction exec_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_empty} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_lt} {:close 0, :instruction in4} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_add} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_rot})
Best program: (print_integer integer_stackdepth boolean_invert_first_then_and integer_min in2 in1 -75 boolean_yankdup boolean_xor integer_min exec_yankdup exec_dup_times (integer_mult boolean_dup_items integer_dup_items) in4 exec_pop (exec_dup (boolean_invert_second_then_and integer_div exec_swap () (60) exec_flush) boolean_dup_times integer_dup) boolean_eq exec_s_when_autoconstructing (boolean_invert_first_then_and print_integer in1 exec_do*count (integer_dup exec_dup_times (exec_shove ()) boolean_and integer_lte exec_yankdup boolean_frominteger integer_yank exec_empty) integer_stackdepth) (in2 exec_shove (exec_yank) exec_do*while (exec_shove (exec_shove () integer_mod boolean_invert_first_then_and boolean_pop) exec_if (integer_yankdup boolean_dup boolean_yankdup) (boolean_or integer_lt in4 integer_mod) boolean_invert_second_then_and integer_add exec_dup_items exec_when (integer_empty integer_rot boolean_swap boolean_rot))) ())
Errors: [0 0 1 1 0 0 1 1 1 1]
Total: 6
Mean: 0.6
Genome size: 66
Size: 85
Percent parens: 0.224
--- Population Statistics ---
Average total errors in population: 8.968
Median total errors in population: 10
Error averages by case: (0.945 0.948 0.768 0.773 0.945 0.949 0.918 0.918 0.902 0.902)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 52.896
Average program size in population (points): 68.49
Average percent parens in population: 0.223
Minimum age in population: 1.0
Maximum age in population: 1.0
Average age in population: 1.0
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.999
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.999
Total error diversity:				 0.005
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.245
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 1443454
--- Timings ---
Current time: 1559593874422 milliseconds
Total Time:           5.5 seconds
Initialization:       0.1 seconds,  1.8%
Reproduction:         1.7 seconds, 31.0%
Fitness Testing:      2.8 seconds, 50.6%
Report:               0.9 seconds, 16.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 657
Test mean error for best: 0.65700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output:                    
Correct output: -44                 | Program output:                    
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output:                    
Correct output: 99                  | Program output: 99                 
Correct output: -68                 | Program output:                    
Correct output: -12                 | Program output:                    
Correct output: -100                | Program output:                    
Correct output: -84                 | Program output:                    
Correct output: -66                 | Program output:                    
Correct output: -43                 | Program output: -43                
Correct output: -92                 | Program output:                    
Correct output: 7                   | Program output: 7                  
Correct output: -80                 | Program output:                    
Correct output: -74                 | Program output:                    
Correct output: -47                 | Program output:                    
Correct output: -13                 | Program output:                    
Correct output: 20                  | Program output: 20                 
Correct output: -26                 | Program output:                    
Correct output: 76                  | Program output: 76                 
Correct output: 5                   | Program output: 5                  
Correct output: 16                  | Program output: 36                 
Correct output: 12                  | Program output: 14                 
Correct output: 17                  | Program output: 100                
Correct output: 13                  | Program output: 13                 
Correct output: 71                  | Program output: 71                 
Correct output: 8                   | Program output: 69                 
Correct output: 1                   | Program output: 1                  
Correct output: 68                  | Program output: 90                 
Correct output: 1                   | Program output: 98                 
Correct output: 38                  | Program output: 38                 
Correct output: 18                  | Program output: 69                 
Correct output: 21                  | Program output: 21                 
Correct output: 41                  | Program output: 50                 
Correct output: 12                  | Program output: 100                
Correct output: 3                   | Program output: 68                 
Correct output: 19                  | Program output: 19                 
Correct output: 19                  | Program output: 53                 
Correct output: 7                   | Program output: 18                 
Correct output: 34                  | Program output: 34                 
Correct output: -80                 | Program output:                    
Correct output: -14                 | Program output:                    
Correct output: -84                 | Program output:                    
Correct output: -75                 | Program output:                    
Correct output: -70                 | Program output:                    
Correct output: -75                 | Program output:                    
Correct output: -60                 | Program output: -60                
Correct output: -98                 | Program output: -98                
Correct output: -94                 | Program output:                    
Correct output: -16                 | Program output: -16                
Correct output: -55                 | Program output: -10                
Correct output: -55                 | Program output: -55                
Correct output: -76                 | Program output:                    
Correct output: -4                  | Program output: -4                 
Correct output: -90                 | Program output:                    
Correct output: -39                 | Program output:                    
Correct output: -79                 | Program output: -52                
Correct output: -72                 | Program output:                    
Correct output: -85                 | Program output:                    
Correct output: -91                 | Program output:                    
Correct output: -58                 | Program output:                    
Correct output: 34                  | Program output: 43                 
Correct output: -6                  | Program output: -6                 
Correct output: -74                 | Program output:                    
Correct output: -47                 | Program output: -47                
Correct output: -85                 | Program output:                    
Correct output: -68                 | Program output: 53                 
Correct output: -91                 | Program output: -4                 
Correct output: -78                 | Program output: -78                
Correct output: -95                 | Program output:                    
Correct output: -91                 | Program output: -91                
Correct output: -25                 | Program output: -25                
Correct output: -92                 | Program output:                    
Correct output: -63                 | Program output:                    
Correct output: -89                 | Program output:                    
Correct output: -44                 | Program output: -44                
Correct output: -66                 | Program output: -66                
Correct output: -67                 | Program output: -67                
Correct output: -84                 | Program output: -84                
Correct output: -68                 | Program output: -40                
Correct output: -26                 | Program output: -26                
Correct output: -92                 | Program output:                    
Correct output: -40                 | Program output:                    
Correct output: -91                 | Program output:                    
Correct output: -84                 | Program output:                    
Correct output: -54                 | Program output:                    
Correct output: -36                 | Program output: -36                
Correct output: -20                 | Program output:                    
Correct output: -54                 | Program output: -54                
Correct output: -54                 | Program output: -54                
Correct output: -98                 | Program output:                    
Correct output: -95                 | Program output: -95                
Correct output: -65                 | Program output:                    
Correct output: -68                 | Program output: -55                
Correct output: -36                 | Program output: 19                 
Correct output: -14                 | Program output: -14                
Correct output: -98                 | Program output:                    
Correct output: -64                 | Program output: -64                
Correct output: -76                 | Program output:                    
Correct output: 23                  | Program output: 29                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_or} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup} {:close 2, :instruction boolean_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_s} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction in4} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 2, :instruction integer_min})
Lexicase best program: (in3 integer_mult exec_when (integer_dup in4 exec_do*times (integer_swap integer_min in2 exec_dup_times (exec_swap (integer_rot exec_if (boolean_or print_integer) (integer_dup_items exec_pop (boolean_frominteger exec_dup (boolean_dup exec_dup (boolean_swap)) integer_shove integer_dec boolean_not exec_when (integer_dup exec_dup_items integer_eq integer_yankdup boolean_pop boolean_rot integer_dup_items exec_s_when_autoconstructing () (integer_pop boolean_rot boolean_shove integer_swap integer_inc exec_do*range (boolean_flush integer_pop exec_dup_times (exec_s () (exec_do*times (integer_swap) integer_dup_items) (integer_add) boolean_swap exec_pop (exec_swap (in4 print_boolean) (boolean_invert_first_then_and exec_eq print_newline boolean_eq boolean_and boolean_flush boolean_not integer_min))))) ())))) ()))))
Lexicase best errors: [0 0 0 1 0 0 1 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 85
Percent parens: 0.282
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_or} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup} {:close 2, :instruction boolean_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_s} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction in4} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 2, :instruction integer_min})
Zero cases best program: (in3 integer_mult exec_when (integer_dup in4 exec_do*times (integer_swap integer_min in2 exec_dup_times (exec_swap (integer_rot exec_if (boolean_or print_integer) (integer_dup_items exec_pop (boolean_frominteger exec_dup (boolean_dup exec_dup (boolean_swap)) integer_shove integer_dec boolean_not exec_when (integer_dup exec_dup_items integer_eq integer_yankdup boolean_pop boolean_rot integer_dup_items exec_s_when_autoconstructing () (integer_pop boolean_rot boolean_shove integer_swap integer_inc exec_do*range (boolean_flush integer_pop exec_dup_times (exec_s () (exec_do*times (integer_swap) integer_dup_items) (integer_add) boolean_swap exec_pop (exec_swap (in4 print_boolean) (boolean_invert_first_then_and exec_eq print_newline boolean_eq boolean_and boolean_flush boolean_not integer_min))))) ())))) ()))))
Zero cases best errors: [0 0 0 1 0 0 1 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 85
Percent parens: 0.282
--- Lexicase Population Statistics ---
Count of elite individuals by case: (87 86 86 121 117 120 162 132 332 86)
Population mean number of elite cases: 1.33
Count of perfect (error zero) individuals by case: (87 86 86 121 117 120 162 132 332 86)
Population mean number of perfect (error zero) cases: 1.33
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_or} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup} {:close 2, :instruction boolean_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_s} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction in4} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 2, :instruction integer_min})
Best program: (in3 integer_mult exec_when (integer_dup in4 exec_do*times (integer_swap integer_min in2 exec_dup_times (exec_swap (integer_rot exec_if (boolean_or print_integer) (integer_dup_items exec_pop (boolean_frominteger exec_dup (boolean_dup exec_dup (boolean_swap)) integer_shove integer_dec boolean_not exec_when (integer_dup exec_dup_items integer_eq integer_yankdup boolean_pop boolean_rot integer_dup_items exec_s_when_autoconstructing () (integer_pop boolean_rot boolean_shove integer_swap integer_inc exec_do*range (boolean_flush integer_pop exec_dup_times (exec_s () (exec_do*times (integer_swap) integer_dup_items) (integer_add) boolean_swap exec_pop (exec_swap (in4 print_boolean) (boolean_invert_first_then_and exec_eq print_newline boolean_eq boolean_and boolean_flush boolean_not integer_min))))) ())))) ()))))
Errors: [0 0 0 1 0 0 1 1 0 0]
Total: 3
Mean: 0.3
Genome size: 61
Size: 85
Percent parens: 0.282
--- Population Statistics ---
Average total errors in population: 8.671
Median total errors in population: 10
Error averages by case: (0.913 0.914 0.914 0.879 0.883 0.88 0.838 0.868 0.668 0.914)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 56.596
Average program size in population (points): 75.348
Average percent parens in population: 0.251
Minimum age in population: 2.0
Maximum age in population: 2.0
Average age in population: 2.0
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.007
Error (vector) diversity:			 0.018
Behavioral diversity:				 0.268
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 2216403
--- Timings ---
Current time: 1559593876809 milliseconds
Total Time:           8.1 seconds
Initialization:       0.1 seconds,  1.2%
Reproduction:         2.8 seconds, 34.8%
Fitness Testing:      3.5 seconds, 43.6%
Report:               1.7 seconds, 20.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 442
Test mean error for best: 0.44200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -68                 | Program output: -68                
Correct output: -12                 | Program output: -12                
Correct output: -100                | Program output: -100               
Correct output: -84                 | Program output: -26                
Correct output: -66                 | Program output: -53                
Correct output: -43                 | Program output: 56                 
Correct output: -92                 | Program output: -92                
Correct output: 7                   | Program output: 7                  
Correct output: -80                 | Program output: -11                
Correct output: -74                 | Program output: -51                
Correct output: -47                 | Program output: -47                
Correct output: -13                 | Program output: -13                
Correct output: 20                  | Program output: 20                 
Correct output: -26                 | Program output: -26                
Correct output: 76                  | Program output: 76                 
Correct output: 5                   | Program output: 36                 
Correct output: 16                  | Program output: 16                 
Correct output: 12                  | Program output: 12                 
Correct output: 17                  | Program output: 21                 
Correct output: 13                  | Program output: 37                 
Correct output: 71                  | Program output: 72                 
Correct output: 8                   | Program output: 45                 
Correct output: 1                   | Program output: 2                  
Correct output: 68                  | Program output: 71                 
Correct output: 1                   | Program output: 1                  
Correct output: 38                  | Program output: 59                 
Correct output: 18                  | Program output: 18                 
Correct output: 21                  | Program output: 30                 
Correct output: 41                  | Program output: 41                 
Correct output: 12                  | Program output: 12                 
Correct output: 3                   | Program output: 3                  
Correct output: 19                  | Program output: 29                 
Correct output: 19                  | Program output: 19                 
Correct output: 7                   | Program output: 7                  
Correct output: 34                  | Program output: 52                 
Correct output: -80                 | Program output: -58                
Correct output: -14                 | Program output: 58                 
Correct output: -84                 | Program output: -20                
Correct output: -75                 | Program output: -75                
Correct output: -70                 | Program output: -70                
Correct output: -75                 | Program output: -75                
Correct output: -60                 | Program output: -11                
Correct output: -98                 | Program output: -70                
Correct output: -94                 | Program output: -94                
Correct output: -16                 | Program output: 50                 
Correct output: -55                 | Program output: -55                
Correct output: -55                 | Program output: -55                
Correct output: -76                 | Program output: 11                 
Correct output: -4                  | Program output: 16                 
Correct output: -90                 | Program output: -5                 
Correct output: -39                 | Program output: -34                
Correct output: -79                 | Program output: -79                
Correct output: -72                 | Program output: -72                
Correct output: -85                 | Program output: -85                
Correct output: -91                 | Program output: -91                
Correct output: -58                 | Program output: -20                
Correct output: 34                  | Program output: 54                 
Correct output: -6                  | Program output: 37                 
Correct output: -74                 | Program output: -74                
Correct output: -47                 | Program output: -30                
Correct output: -85                 | Program output: -84                
Correct output: -68                 | Program output: -68                
Correct output: -91                 | Program output: -91                
Correct output: -78                 | Program output: -25                
Correct output: -95                 | Program output: -37                
Correct output: -91                 | Program output: -84                
Correct output: -25                 | Program output: -25                
Correct output: -92                 | Program output: -23                
Correct output: -63                 | Program output: 5                  
Correct output: -89                 | Program output: -10                
Correct output: -44                 | Program output: -29                
Correct output: -66                 | Program output: -48                
Correct output: -67                 | Program output: -51                
Correct output: -84                 | Program output: -84                
Correct output: -68                 | Program output: -68                
Correct output: -26                 | Program output: -26                
Correct output: -92                 | Program output: -19                
Correct output: -40                 | Program output: 11                 
Correct output: -91                 | Program output: -91                
Correct output: -84                 | Program output: -56                
Correct output: -54                 | Program output: -37                
Correct output: -36                 | Program output: -36                
Correct output: -20                 | Program output: -17                
Correct output: -54                 | Program output: 90                 
Correct output: -54                 | Program output: -6                 
Correct output: -98                 | Program output: -71                
Correct output: -95                 | Program output: -95                
Correct output: -65                 | Program output: -39                
Correct output: -68                 | Program output: -68                
Correct output: -36                 | Program output: -36                
Correct output: -14                 | Program output: -14                
Correct output: -98                 | Program output: 60                 
Correct output: -64                 | Program output: -22                
Correct output: -76                 | Program output: -76                
Correct output: 23                  | Program output: 23                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_min} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_or} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_s} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_add} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction in4} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_eq} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 2, :instruction integer_min})
Lexicase best program: (in3 integer_mult integer_dup in4 exec_do*times (integer_swap integer_min in2 exec_dup_times (integer_min) exec_swap (integer_rot exec_if (boolean_or print_integer) (integer_dup_items integer_dup_items exec_pop (boolean_frominteger exec_dup (boolean_dup exec_dup (integer_dup) integer_shove integer_dec boolean_not exec_when (integer_dup exec_dup_items exec_do*range (integer_eq integer_yankdup boolean_pop boolean_rot integer_dup_items exec_s_when_autoconstructing () (boolean_invert_first_then_and integer_pop boolean_rot integer_swap integer_inc exec_do*range (boolean_flush integer_pop exec_dup_times (exec_s () (exec_do*times (integer_swap) integer_dup_items) (integer_gte integer_add) exec_rot (boolean_swap exec_pop (exec_swap (in4 print_boolean) (exec_eq print_newline boolean_eq boolean_and boolean_flush boolean_not integer_min))) () ()))) ())))))) ()))
Lexicase best errors: [1 0 1 1 0 0 1 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 91
Percent parens: 0.297
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_min} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_or} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_s} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_add} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction in4} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_eq} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 2, :instruction integer_min})
Zero cases best program: (in3 integer_mult integer_dup in4 exec_do*times (integer_swap integer_min in2 exec_dup_times (integer_min) exec_swap (integer_rot exec_if (boolean_or print_integer) (integer_dup_items integer_dup_items exec_pop (boolean_frominteger exec_dup (boolean_dup exec_dup (integer_dup) integer_shove integer_dec boolean_not exec_when (integer_dup exec_dup_items exec_do*range (integer_eq integer_yankdup boolean_pop boolean_rot integer_dup_items exec_s_when_autoconstructing () (boolean_invert_first_then_and integer_pop boolean_rot integer_swap integer_inc exec_do*range (boolean_flush integer_pop exec_dup_times (exec_s () (exec_do*times (integer_swap) integer_dup_items) (integer_gte integer_add) exec_rot (boolean_swap exec_pop (exec_swap (in4 print_boolean) (exec_eq print_newline boolean_eq boolean_and boolean_flush boolean_not integer_min))) () ()))) ())))))) ()))
Zero cases best errors: [1 0 1 1 0 0 1 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 91
Percent parens: 0.297
--- Lexicase Population Statistics ---
Count of elite individuals by case: (81 239 13 13 235 6 83 211 309 108)
Population mean number of elite cases: 1.30
Count of perfect (error zero) individuals by case: (81 239 13 13 235 6 83 211 309 108)
Population mean number of perfect (error zero) cases: 1.30
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*count} {:close 2, :instruction integer_div} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_yank} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_max} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_add} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_if} {:close 1, :instruction integer_div} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_when} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_gte} {:close 0, :instruction in4} {:close 0, :instruction boolean_rot} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 0, :instruction print_newline} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_pop} {:close 1, :instruction integer_flush} {:close 1, :instruction print_integer} {:close 1, :instruction integer_rot} {:close 2, :instruction integer_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yank} {:close 2, :instruction boolean_empty} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_not} {:close 1, :instruction print_integer})
Best program: (exec_yank exec_do*count (integer_div) integer_shove integer_yank boolean_invert_first_then_and integer_max integer_gt exec_k_when_autoconstructing (integer_add integer_lt boolean_or exec_if (integer_div) (integer_eq) exec_rot (integer_flush integer_inc exec_when (integer_rot integer_flush) exec_eq boolean_swap) (boolean_or boolean_dup_items) (exec_pop (exec_stackdepth integer_empty exec_eq) exec_yankdup integer_gte) in4 boolean_rot in1 integer_min integer_stackdepth integer_dup integer_eq boolean_swap integer_yankdup exec_do*range (print_integer boolean_yankdup) boolean_xor integer_empty exec_flush exec_pop (in1 boolean_dup print_boolean) integer_inc print_newline exec_dup_times (boolean_or boolean_empty exec_yank exec_dup_times (integer_dup_items integer_rot integer_gte exec_do*while (exec_do*times (exec_dup_items exec_dup_items boolean_and boolean_rot boolean_pop) integer_flush) print_integer) integer_rot) integer_pop) () exec_k_when_autoconstructing (integer_swap boolean_stackdepth integer_pop exec_yank boolean_empty) () boolean_yankdup integer_lt boolean_invert_second_then_and exec_do*while (boolean_not print_integer))
Errors: [0 1 1 1 0 1 0 0 0 0]
Total: 4
Mean: 0.4
Genome size: 83
Size: 103
Percent parens: 0.194
--- Population Statistics ---
Average total errors in population: 8.702
Median total errors in population: 9
Error averages by case: (0.919 0.761 0.987 0.987 0.765 0.994 0.917 0.789 0.691 0.892)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 61.071
Average program size in population (points): 83.703
Average percent parens in population: 0.274
Minimum age in population: 3.0
Maximum age in population: 3.0
Average age in population: 3.0
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.007
Error (vector) diversity:			 0.022
Behavioral diversity:				 0.232
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 2972124
--- Timings ---
Current time: 1559593878989 milliseconds
Total Time:          10.5 seconds
Initialization:       0.1 seconds,  1.0%
Reproduction:         4.0 seconds, 38.3%
Fitness Testing:      4.2 seconds, 40.0%
Report:               2.2 seconds, 20.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 473
Test mean error for best: 0.47300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -68                 | Program output: -68                
Correct output: -12                 | Program output: -12                
Correct output: -100                | Program output: -100               
Correct output: -84                 | Program output: -26                
Correct output: -66                 | Program output: -66                
Correct output: -43                 | Program output: 56                 
Correct output: -92                 | Program output: -92                
Correct output: 7                   | Program output: 7                  
Correct output: -80                 | Program output: -11                
Correct output: -74                 | Program output: -51                
Correct output: -47                 | Program output: -47                
Correct output: -13                 | Program output: -13                
Correct output: 20                  | Program output: 20                 
Correct output: -26                 | Program output: -26                
Correct output: 76                  | Program output: 76                 
Correct output: 5                   | Program output: 26                 
Correct output: 16                  | Program output: 52                 
Correct output: 12                  | Program output: 68                 
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 82                 
Correct output: 71                  | Program output: 91                 
Correct output: 8                   | Program output: 8                  
Correct output: 1                   | Program output: 13                 
Correct output: 68                  | Program output: 68                 
Correct output: 1                   | Program output: 58                 
Correct output: 38                  | Program output: 74                 
Correct output: 18                  | Program output: 20                 
Correct output: 21                  | Program output: 25                 
Correct output: 41                  | Program output: 49                 
Correct output: 12                  | Program output: 21                 
Correct output: 3                   | Program output: 39                 
Correct output: 19                  | Program output: 47                 
Correct output: 19                  | Program output: 57                 
Correct output: 7                   | Program output: 46                 
Correct output: 34                  | Program output: 59                 
Correct output: -80                 | Program output: -78                
Correct output: -14                 | Program output: -14                
Correct output: -84                 | Program output: -84                
Correct output: -75                 | Program output: -58                
Correct output: -70                 | Program output: -70                
Correct output: -75                 | Program output: -75                
Correct output: -60                 | Program output: -11                
Correct output: -98                 | Program output: 0                  
Correct output: -94                 | Program output: -94                
Correct output: -16                 | Program output: 59                 
Correct output: -55                 | Program output: 83                 
Correct output: -55                 | Program output: -55                
Correct output: -76                 | Program output: -76                
Correct output: -4                  | Program output: 44                 
Correct output: -90                 | Program output: -90                
Correct output: -39                 | Program output: -39                
Correct output: -79                 | Program output: 65                 
Correct output: -72                 | Program output: -72                
Correct output: -85                 | Program output: -58                
Correct output: -91                 | Program output: -91                
Correct output: -58                 | Program output: -58                
Correct output: 34                  | Program output: 34                 
Correct output: -6                  | Program output: 90                 
Correct output: -74                 | Program output: -74                
Correct output: -47                 | Program output: -30                
Correct output: -85                 | Program output: -85                
Correct output: -68                 | Program output: 91                 
Correct output: -91                 | Program output: -4                 
Correct output: -78                 | Program output: 97                 
Correct output: -95                 | Program output: -95                
Correct output: -91                 | Program output: 4                  
Correct output: -25                 | Program output: -25                
Correct output: -92                 | Program output: -92                
Correct output: -63                 | Program output: -63                
Correct output: -89                 | Program output: -89                
Correct output: -44                 | Program output: -29                
Correct output: -66                 | Program output: -48                
Correct output: -67                 | Program output: 98                 
Correct output: -84                 | Program output: -84                
Correct output: -68                 | Program output: -40                
Correct output: -26                 | Program output: -26                
Correct output: -92                 | Program output: -92                
Correct output: -40                 | Program output: -20                
Correct output: -91                 | Program output: -75                
Correct output: -84                 | Program output: -56                
Correct output: -54                 | Program output: -54                
Correct output: -36                 | Program output: -36                
Correct output: -20                 | Program output: 0                  
Correct output: -54                 | Program output: 87                 
Correct output: -54                 | Program output: 80                 
Correct output: -98                 | Program output: -98                
Correct output: -95                 | Program output: -95                
Correct output: -65                 | Program output: -65                
Correct output: -68                 | Program output: -55                
Correct output: -36                 | Program output: 95                 
Correct output: -14                 | Program output: -14                
Correct output: -98                 | Program output: -65                
Correct output: -64                 | Program output: 87                 
Correct output: -76                 | Program output: -15                
Correct output: 23                  | Program output: 68                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_rot} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_min} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_or} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in1} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_s} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_add} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 2, :instruction integer_inc} {:close 0, :instruction exec_swap} {:close 0, :instruction in4} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_eq} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_not})
Lexicase best program: (boolean_rot integer_mult integer_dup in4 integer_swap integer_min in2 integer_min exec_swap (integer_rot exec_if (boolean_or print_integer) (integer_dup_items integer_dup_items exec_pop (boolean_frominteger exec_dup (boolean_dup exec_dup (integer_dup) integer_shove integer_dec boolean_not boolean_frominteger exec_when (integer_dup exec_dup_items in1 integer_eq integer_yankdup boolean_pop boolean_rot exec_s_when_autoconstructing () (boolean_xor integer_pop boolean_rot integer_swap integer_inc exec_do*range (boolean_flush integer_pop exec_dup_times (exec_s () (exec_do*times (integer_swap) integer_dup_items) (integer_add) exec_rot (boolean_swap exec_pop (integer_inc)) (exec_swap (in4 print_boolean) (exec_eq print_newline boolean_eq boolean_and boolean_flush boolean_not)) ()))) ()))))) ())
Lexicase best errors: [0 0 1 0 0 1 1 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 85
Percent parens: 0.282
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_rot} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_min} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_or} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in1} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_s} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_add} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 2, :instruction integer_inc} {:close 0, :instruction exec_swap} {:close 0, :instruction in4} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_eq} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_not})
Zero cases best program: (boolean_rot integer_mult integer_dup in4 integer_swap integer_min in2 integer_min exec_swap (integer_rot exec_if (boolean_or print_integer) (integer_dup_items integer_dup_items exec_pop (boolean_frominteger exec_dup (boolean_dup exec_dup (integer_dup) integer_shove integer_dec boolean_not boolean_frominteger exec_when (integer_dup exec_dup_items in1 integer_eq integer_yankdup boolean_pop boolean_rot exec_s_when_autoconstructing () (boolean_xor integer_pop boolean_rot integer_swap integer_inc exec_do*range (boolean_flush integer_pop exec_dup_times (exec_s () (exec_do*times (integer_swap) integer_dup_items) (integer_add) exec_rot (boolean_swap exec_pop (integer_inc)) (exec_swap (in4 print_boolean) (exec_eq print_newline boolean_eq boolean_and boolean_flush boolean_not)) ()))) ()))))) ())
Zero cases best errors: [0 0 1 0 0 1 1 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 85
Percent parens: 0.282
--- Lexicase Population Statistics ---
Count of elite individuals by case: (128 345 319 358 361 133 218 125 363 126)
Population mean number of elite cases: 2.48
Count of perfect (error zero) individuals by case: (128 345 319 358 361 133 218 125 363 126)
Population mean number of perfect (error zero) cases: 2.48
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_mult} {:close 0, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_y} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_k} {:close 0, :instruction exec_dup} {:close 1, :instruction tag_integer_789} {:close 2, :instruction boolean_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction tag_boolean_474} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_s} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_swap} {:close 0, :instruction in4} {:close 1, :instruction print_boolean} {:close 0, :instruction 62} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_min} {:close 0, :instruction print_newline} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_not} {:close 2, :instruction integer_min})
Best program: (integer_mult in4 exec_do*times (integer_swap integer_min in2 exec_swap (integer_rot exec_if (integer_min boolean_or print_integer) (integer_dup_items exec_y (exec_pop (boolean_frominteger exec_dup (boolean_dup boolean_flush exec_k () (exec_dup (tag_integer_789) boolean_swap)) integer_shove integer_dec boolean_not exec_when (in3 exec_eq integer_eq integer_yankdup boolean_pop exec_s_when_autoconstructing () (integer_pop boolean_rot boolean_shove integer_swap integer_inc tag_boolean_474 exec_do*range (boolean_flush integer_pop exec_dup_times (exec_s () (integer_yankdup integer_gte) (exec_do*times (integer_swap) boolean_swap exec_swap (in4 print_boolean) (62 exec_eq exec_eq integer_min) print_newline exec_shove () boolean_eq boolean_and boolean_not integer_min)))) ()))))) ()))
Errors: [0 0 1 0 0 1 1 0 0 0]
Total: 3
Mean: 0.3
Genome size: 62
Size: 87
Percent parens: 0.287
--- Population Statistics ---
Average total errors in population: 7.524
Median total errors in population: 8
Error averages by case: (0.872 0.655 0.681 0.642 0.639 0.867 0.782 0.875 0.637 0.874)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 69.318
Average program size in population (points): 92.919
Average percent parens in population: 0.257
Minimum age in population: 4.0
Maximum age in population: 4.0
Average age in population: 4.0
Median age in population: 4.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.008
Error (vector) diversity:			 0.03
Behavioral diversity:				 0.207
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 3746824
--- Timings ---
Current time: 1559593883026 milliseconds
Total Time:          12.9 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:         5.1 seconds, 39.9%
Fitness Testing:      5.2 seconds, 40.2%
Report:               2.5 seconds, 19.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 472
Test mean error for best: 0.47200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -68                 | Program output: -68                
Correct output: -12                 | Program output: -12                
Correct output: -100                | Program output: -100               
Correct output: -84                 | Program output: -84                
Correct output: -66                 | Program output: -53                
Correct output: -43                 | Program output: -43                
Correct output: -92                 | Program output: -92                
Correct output: 7                   | Program output: 7                  
Correct output: -80                 | Program output: -80                
Correct output: -74                 | Program output: -74                
Correct output: -47                 | Program output: -47                
Correct output: -13                 | Program output: -13                
Correct output: 20                  | Program output: 20                 
Correct output: -26                 | Program output: -26                
Correct output: 76                  | Program output: 76                 
Correct output: 5                   | Program output: 5                  
Correct output: 16                  | Program output: 36                 
Correct output: 12                  | Program output: 14                 
Correct output: 17                  | Program output: 100                
Correct output: 13                  | Program output: 13                 
Correct output: 71                  | Program output: 71                 
Correct output: 8                   | Program output: 69                 
Correct output: 1                   | Program output: 1                  
Correct output: 68                  | Program output: 90                 
Correct output: 1                   | Program output: 98                 
Correct output: 38                  | Program output: 38                 
Correct output: 18                  | Program output: 69                 
Correct output: 21                  | Program output: 21                 
Correct output: 41                  | Program output: 50                 
Correct output: 12                  | Program output: 100                
Correct output: 3                   | Program output: 68                 
Correct output: 19                  | Program output: 19                 
Correct output: 19                  | Program output: 53                 
Correct output: 7                   | Program output: 18                 
Correct output: 34                  | Program output: 34                 
Correct output: -80                 | Program output: -80                
Correct output: -14                 | Program output: 46                 
Correct output: -84                 | Program output: 47                 
Correct output: -75                 | Program output: -63                
Correct output: -70                 | Program output: -70                
Correct output: -75                 | Program output: -75                
Correct output: -60                 | Program output: -60                
Correct output: -98                 | Program output: -98                
Correct output: -94                 | Program output: -94                
Correct output: -16                 | Program output: -16                
Correct output: -55                 | Program output: -10                
Correct output: -55                 | Program output: -55                
Correct output: -76                 | Program output: 22                 
Correct output: -4                  | Program output: -4                 
Correct output: -90                 | Program output: -53                
Correct output: -39                 | Program output: -34                
Correct output: -79                 | Program output: -52                
Correct output: -72                 | Program output: -72                
Correct output: -85                 | Program output: 90                 
Correct output: -91                 | Program output: -91                
Correct output: -58                 | Program output: -33                
Correct output: 34                  | Program output: 43                 
Correct output: -6                  | Program output: -6                 
Correct output: -74                 | Program output: -74                
Correct output: -47                 | Program output: -47                
Correct output: -85                 | Program output: -84                
Correct output: -68                 | Program output: 53                 
Correct output: -91                 | Program output: -4                 
Correct output: -78                 | Program output: -78                
Correct output: -95                 | Program output: -37                
Correct output: -91                 | Program output: -91                
Correct output: -25                 | Program output: -25                
Correct output: -92                 | Program output: 94                 
Correct output: -63                 | Program output: 68                 
Correct output: -89                 | Program output: 70                 
Correct output: -44                 | Program output: -44                
Correct output: -66                 | Program output: -66                
Correct output: -67                 | Program output: -67                
Correct output: -84                 | Program output: -84                
Correct output: -68                 | Program output: -40                
Correct output: -26                 | Program output: -26                
Correct output: -92                 | Program output: -19                
Correct output: -40                 | Program output: -40                
Correct output: -91                 | Program output: -22                
Correct output: -84                 | Program output: -84                
Correct output: -54                 | Program output: 44                 
Correct output: -36                 | Program output: -36                
Correct output: -20                 | Program output: -20                
Correct output: -54                 | Program output: -54                
Correct output: -54                 | Program output: -54                
Correct output: -98                 | Program output: -65                
Correct output: -95                 | Program output: -95                
Correct output: -65                 | Program output: -27                
Correct output: -68                 | Program output: -55                
Correct output: -36                 | Program output: 19                 
Correct output: -14                 | Program output: -14                
Correct output: -98                 | Program output: -98                
Correct output: -64                 | Program output: -64                
Correct output: -76                 | Program output: 77                 
Correct output: 23                  | Program output: 29                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_min} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_or} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_div} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_s} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction exec_do*while} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 2, :instruction integer_min})
Lexicase best program: (in3 exec_when (integer_dup in4 exec_do*times (integer_swap integer_min integer_rot exec_if (boolean_or print_integer) (integer_dup_items exec_pop (boolean_frominteger integer_div) exec_dup (boolean_dup integer_flush) exec_dup (integer_shove boolean_invert_second_then_and boolean_or) boolean_not exec_when (integer_dup exec_dup_items integer_eq integer_yankdup exec_s_when_autoconstructing (integer_dup_items exec_s_when_autoconstructing () (boolean_not integer_pop boolean_rot integer_swap integer_inc boolean_flush exec_empty integer_pop integer_dec exec_s () (exec_do*times (integer_swap) integer_dup_items) (exec_dup_items exec_pop (integer_dup in4 exec_do*while (print_boolean) boolean_invert_first_then_and exec_eq print_newline boolean_eq boolean_and integer_sub boolean_flush boolean_not integer_min))) ()) () ())))))
Lexicase best errors: [0 1 0 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 80
Percent parens: 0.263
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_min} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_or} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_div} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_s} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction exec_do*while} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 2, :instruction integer_min})
Zero cases best program: (in3 exec_when (integer_dup in4 exec_do*times (integer_swap integer_min integer_rot exec_if (boolean_or print_integer) (integer_dup_items exec_pop (boolean_frominteger integer_div) exec_dup (boolean_dup integer_flush) exec_dup (integer_shove boolean_invert_second_then_and boolean_or) boolean_not exec_when (integer_dup exec_dup_items integer_eq integer_yankdup exec_s_when_autoconstructing (integer_dup_items exec_s_when_autoconstructing () (boolean_not integer_pop boolean_rot integer_swap integer_inc boolean_flush exec_empty integer_pop integer_dec exec_s () (exec_do*times (integer_swap) integer_dup_items) (exec_dup_items exec_pop (integer_dup in4 exec_do*while (print_boolean) boolean_invert_first_then_and exec_eq print_newline boolean_eq boolean_and integer_sub boolean_flush boolean_not integer_min))) ()) () ())))))
Zero cases best errors: [0 1 0 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 80
Percent parens: 0.263
--- Lexicase Population Statistics ---
Count of elite individuals by case: (378 233 203 155 323 255 186 66 154 198)
Population mean number of elite cases: 2.15
Count of perfect (error zero) individuals by case: (378 233 203 155 323 255 186 66 154 198)
Population mean number of perfect (error zero) cases: 2.15
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 1, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_or} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 2, :instruction integer_pop} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_s} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction in4} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_and} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 2, :instruction integer_min})
Best program: (in3 integer_mult exec_when (integer_dup in4 exec_do*times (integer_swap integer_min exec_swap (boolean_eq integer_rot exec_if (integer_min boolean_or print_integer) (integer_eq integer_dup_items exec_pop (boolean_frominteger exec_dup (integer_dup boolean_dup integer_flush) exec_dup (integer_shove integer_dec boolean_or) integer_mod) boolean_or boolean_not boolean_stackdepth exec_when (integer_dup exec_dup_items integer_eq integer_yankdup boolean_pop boolean_rot integer_pop)) integer_dup_items exec_s_when_autoconstructing () (integer_pop boolean_rot boolean_shove integer_swap integer_dup_items integer_inc exec_do*range (boolean_flush integer_pop exec_dup_times (exec_s () (exec_do*times (integer_swap) boolean_swap exec_pop (exec_swap (in4 print_boolean) (boolean_invert_first_then_and boolean_and) print_newline boolean_eq boolean_shove boolean_and integer_sub boolean_flush boolean_not integer_min)) ()))) ()) ())))
Errors: [0 1 0 0 0 0 0 1 0 0]
Total: 2
Mean: 0.2
Genome size: 69
Size: 92
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 7.849
Median total errors in population: 9
Error averages by case: (0.622 0.767 0.797 0.845 0.677 0.745 0.814 0.934 0.846 0.802)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 64.269
Average program size in population (points): 88.284
Average percent parens in population: 0.274
Minimum age in population: 5.0
Maximum age in population: 5.0
Average age in population: 5.0
Median age in population: 5.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.009
Error (vector) diversity:			 0.074
Behavioral diversity:				 0.336
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 4509288
--- Timings ---
Current time: 1559593885557 milliseconds
Total Time:          16.8 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         6.2 seconds, 37.1%
Fitness Testing:      6.1 seconds, 36.1%
Report:               4.4 seconds, 26.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 185
Test mean error for best: 0.18500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -68                 | Program output: -68                
Correct output: -12                 | Program output: -12                
Correct output: -100                | Program output: -100               
Correct output: -84                 | Program output: -84                
Correct output: -66                 | Program output: -66                
Correct output: -43                 | Program output: -43                
Correct output: -92                 | Program output: -92                
Correct output: 7                   | Program output: 7                  
Correct output: -80                 | Program output: -80                
Correct output: -74                 | Program output: -74                
Correct output: -47                 | Program output: -47                
Correct output: -13                 | Program output: -13                
Correct output: 20                  | Program output: 20                 
Correct output: -26                 | Program output: -26                
Correct output: 76                  | Program output: 76                 
Correct output: 5                   | Program output: 5                  
Correct output: 16                  | Program output: 36                 
Correct output: 12                  | Program output: 12                 
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 13                 
Correct output: 71                  | Program output: 71                 
Correct output: 8                   | Program output: 8                  
Correct output: 1                   | Program output: 1                  
Correct output: 68                  | Program output: 68                 
Correct output: 1                   | Program output: 1                  
Correct output: 38                  | Program output: 38                 
Correct output: 18                  | Program output: 18                 
Correct output: 21                  | Program output: 21                 
Correct output: 41                  | Program output: 41                 
Correct output: 12                  | Program output: 21                 
Correct output: 3                   | Program output: 3                  
Correct output: 19                  | Program output: 19                 
Correct output: 19                  | Program output: 19                 
Correct output: 7                   | Program output: 7                  
Correct output: 34                  | Program output: 34                 
Correct output: -80                 | Program output: -80                
Correct output: -14                 | Program output: -14                
Correct output: -84                 | Program output: -84                
Correct output: -75                 | Program output: -63                
Correct output: -70                 | Program output: -70                
Correct output: -75                 | Program output: -75                
Correct output: -60                 | Program output: -60                
Correct output: -98                 | Program output: -98                
Correct output: -94                 | Program output: -94                
Correct output: -16                 | Program output: -16                
Correct output: -55                 | Program output: -10                
Correct output: -55                 | Program output: -55                
Correct output: -76                 | Program output: -76                
Correct output: -4                  | Program output: -4                 
Correct output: -90                 | Program output: -90                
Correct output: -39                 | Program output: -39                
Correct output: -79                 | Program output: -52                
Correct output: -72                 | Program output: -72                
Correct output: -85                 | Program output: -58                
Correct output: -91                 | Program output: -91                
Correct output: -58                 | Program output: -58                
Correct output: 34                  | Program output: 34                 
Correct output: -6                  | Program output: -6                 
Correct output: -74                 | Program output: -74                
Correct output: -47                 | Program output: -47                
Correct output: -85                 | Program output: -85                
Correct output: -68                 | Program output: 53                 
Correct output: -91                 | Program output: -4                 
Correct output: -78                 | Program output: -78                
Correct output: -95                 | Program output: -95                
Correct output: -91                 | Program output: -91                
Correct output: -25                 | Program output: -25                
Correct output: -92                 | Program output: -92                
Correct output: -63                 | Program output: -63                
Correct output: -89                 | Program output: -89                
Correct output: -44                 | Program output: -44                
Correct output: -66                 | Program output: -66                
Correct output: -67                 | Program output: -67                
Correct output: -84                 | Program output: -84                
Correct output: -68                 | Program output: -40                
Correct output: -26                 | Program output: -26                
Correct output: -92                 | Program output: -92                
Correct output: -40                 | Program output: -40                
Correct output: -91                 | Program output: -75                
Correct output: -84                 | Program output: -84                
Correct output: -54                 | Program output: -54                
Correct output: -36                 | Program output: -36                
Correct output: -20                 | Program output: -20                
Correct output: -54                 | Program output: -54                
Correct output: -54                 | Program output: -54                
Correct output: -98                 | Program output: -98                
Correct output: -95                 | Program output: -95                
Correct output: -65                 | Program output: -65                
Correct output: -68                 | Program output: -55                
Correct output: -36                 | Program output: 19                 
Correct output: -14                 | Program output: -14                
Correct output: -98                 | Program output: -98                
Correct output: -64                 | Program output: -64                
Correct output: -76                 | Program output: -15                
Correct output: 23                  | Program output: 23                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction exec_when} {:close 0, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 1, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_s} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction in4} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction print_newline} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_flush} {:close 2, :instruction integer_min})
Lexicase best program: (in3 exec_when (in4 exec_do*times (in2 integer_swap integer_min exec_swap (exec_swap (integer_rot exec_if (integer_min boolean_or print_integer) (exec_eq integer_dup_items exec_dup (boolean_dup integer_flush) exec_dup (integer_shove integer_dec boolean_or) exec_k (boolean_not exec_when (integer_dup exec_dup_items integer_eq exec_dup_items boolean_pop boolean_rot integer_stackdepth exec_dup_items integer_eq) integer_pop boolean_rot boolean_shove integer_swap integer_inc exec_eq exec_do*range (exec_dup_times (exec_s () (exec_do*times (integer_swap) integer_dup_items) (exec_pop (exec_swap (in4 print_boolean) (boolean_invert_first_then_and exec_eq print_newline exec_k (boolean_eq boolean_and integer_sub boolean_flush integer_min) ())))))) ())) ()) ())))
Lexicase best errors: [0 0 0 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 85
Percent parens: 0.294
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction exec_when} {:close 0, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 1, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_s} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction in4} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction print_newline} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_flush} {:close 2, :instruction integer_min})
Zero cases best program: (in3 exec_when (in4 exec_do*times (in2 integer_swap integer_min exec_swap (exec_swap (integer_rot exec_if (integer_min boolean_or print_integer) (exec_eq integer_dup_items exec_dup (boolean_dup integer_flush) exec_dup (integer_shove integer_dec boolean_or) exec_k (boolean_not exec_when (integer_dup exec_dup_items integer_eq exec_dup_items boolean_pop boolean_rot integer_stackdepth exec_dup_items integer_eq) integer_pop boolean_rot boolean_shove integer_swap integer_inc exec_eq exec_do*range (exec_dup_times (exec_s () (exec_do*times (integer_swap) integer_dup_items) (exec_pop (exec_swap (in4 print_boolean) (boolean_invert_first_then_and exec_eq print_newline exec_k (boolean_eq boolean_and integer_sub boolean_flush integer_min) ())))))) ())) ()) ())))
Zero cases best errors: [0 0 0 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 85
Percent parens: 0.294
--- Lexicase Population Statistics ---
Count of elite individuals by case: (390 226 353 373 331 356 358 57 249 378)
Population mean number of elite cases: 3.07
Count of perfect (error zero) individuals by case: (390 226 353 373 331 356 358 57 249 378)
Population mean number of perfect (error zero) cases: 3.07
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction tagged_506} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_y} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_dup} {:close 2, :instruction boolean_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction tag_boolean_474} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_s} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_swap} {:close 0, :instruction in4} {:close 0, :instruction exec_eq} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yankdup} {:close 2, :instruction integer_min})
Best program: (in3 boolean_dup exec_when (integer_dup in4 tagged_506 integer_swap integer_min in2 exec_swap (integer_rot integer_dup_times) (integer_min print_integer) integer_dup_items exec_y (exec_pop (boolean_frominteger exec_dup (boolean_swap)) integer_shove integer_dec exec_when (integer_dup integer_sub) exec_eq integer_eq integer_yankdup boolean_pop integer_dup_items boolean_dup_times) boolean_shove integer_inc tag_boolean_474 exec_do*range (boolean_flush exec_pop () integer_pop exec_dup_times (exec_s () (exec_do*times (exec_y_when_autoconstructing () integer_swap) exec_swap (in4 exec_eq print_newline boolean_eq boolean_not integer_yankdup integer_min) ()) ()))))
Errors: [0 0 0 0 0 0 0 1 0 0]
Total: 1
Mean: 0.1
Genome size: 51
Size: 69
Percent parens: 0.261
--- Population Statistics ---
Average total errors in population: 6.929
Median total errors in population: 7
Error averages by case: (0.61 0.774 0.647 0.627 0.669 0.644 0.642 0.943 0.751 0.622)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 59.153
Average program size in population (points): 82.73
Average percent parens in population: 0.284
Minimum age in population: 6.0
Maximum age in population: 6.0
Average age in population: 6.0
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.01
Error (vector) diversity:			 0.085
Behavioral diversity:				 0.336
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 5327824
--- Timings ---
Current time: 1559593888371 milliseconds
Total Time:          19.4 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:         7.4 seconds, 38.0%
Fitness Testing:      7.0 seconds, 35.9%
Report:               5.0 seconds, 25.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 185
Test mean error for best: 0.18500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -68                 | Program output: -68                
Correct output: -12                 | Program output: -12                
Correct output: -100                | Program output: -100               
Correct output: -84                 | Program output: -84                
Correct output: -66                 | Program output: -66                
Correct output: -43                 | Program output: -43                
Correct output: -92                 | Program output: -92                
Correct output: 7                   | Program output: 7                  
Correct output: -80                 | Program output: -80                
Correct output: -74                 | Program output: -74                
Correct output: -47                 | Program output: -47                
Correct output: -13                 | Program output: -13                
Correct output: 20                  | Program output: 20                 
Correct output: -26                 | Program output: -26                
Correct output: 76                  | Program output: 76                 
Correct output: 5                   | Program output: 5                  
Correct output: 16                  | Program output: 36                 
Correct output: 12                  | Program output: 12                 
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 13                 
Correct output: 71                  | Program output: 71                 
Correct output: 8                   | Program output: 8                  
Correct output: 1                   | Program output: 1                  
Correct output: 68                  | Program output: 68                 
Correct output: 1                   | Program output: 1                  
Correct output: 38                  | Program output: 38                 
Correct output: 18                  | Program output: 18                 
Correct output: 21                  | Program output: 21                 
Correct output: 41                  | Program output: 41                 
Correct output: 12                  | Program output: 21                 
Correct output: 3                   | Program output: 3                  
Correct output: 19                  | Program output: 19                 
Correct output: 19                  | Program output: 19                 
Correct output: 7                   | Program output: 7                  
Correct output: 34                  | Program output: 34                 
Correct output: -80                 | Program output: -80                
Correct output: -14                 | Program output: -14                
Correct output: -84                 | Program output: -84                
Correct output: -75                 | Program output: -63                
Correct output: -70                 | Program output: -70                
Correct output: -75                 | Program output: -75                
Correct output: -60                 | Program output: -60                
Correct output: -98                 | Program output: -98                
Correct output: -94                 | Program output: -94                
Correct output: -16                 | Program output: -16                
Correct output: -55                 | Program output: -10                
Correct output: -55                 | Program output: -55                
Correct output: -76                 | Program output: -76                
Correct output: -4                  | Program output: -4                 
Correct output: -90                 | Program output: -90                
Correct output: -39                 | Program output: -39                
Correct output: -79                 | Program output: -52                
Correct output: -72                 | Program output: -72                
Correct output: -85                 | Program output: -58                
Correct output: -91                 | Program output: -91                
Correct output: -58                 | Program output: -58                
Correct output: 34                  | Program output: 34                 
Correct output: -6                  | Program output: -6                 
Correct output: -74                 | Program output: -74                
Correct output: -47                 | Program output: -47                
Correct output: -85                 | Program output: -85                
Correct output: -68                 | Program output: 53                 
Correct output: -91                 | Program output: -4                 
Correct output: -78                 | Program output: -78                
Correct output: -95                 | Program output: -95                
Correct output: -91                 | Program output: -91                
Correct output: -25                 | Program output: -25                
Correct output: -92                 | Program output: -92                
Correct output: -63                 | Program output: -63                
Correct output: -89                 | Program output: -89                
Correct output: -44                 | Program output: -44                
Correct output: -66                 | Program output: -66                
Correct output: -67                 | Program output: -67                
Correct output: -84                 | Program output: -84                
Correct output: -68                 | Program output: -40                
Correct output: -26                 | Program output: -26                
Correct output: -92                 | Program output: -92                
Correct output: -40                 | Program output: -40                
Correct output: -91                 | Program output: -75                
Correct output: -84                 | Program output: -84                
Correct output: -54                 | Program output: -54                
Correct output: -36                 | Program output: -36                
Correct output: -20                 | Program output: -20                
Correct output: -54                 | Program output: -54                
Correct output: -54                 | Program output: -54                
Correct output: -98                 | Program output: -98                
Correct output: -95                 | Program output: -95                
Correct output: -65                 | Program output: -65                
Correct output: -68                 | Program output: -55                
Correct output: -36                 | Program output: 19                 
Correct output: -14                 | Program output: -14                
Correct output: -98                 | Program output: -98                
Correct output: -64                 | Program output: -64                
Correct output: -76                 | Program output: -15                
Correct output: 23                  | Program output: 23                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction boolean_dup} {:close 1, :instruction tag_boolean_347} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction tagged_506} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_y} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_dup} {:close 2, :instruction boolean_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction tag_boolean_474} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_s} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_swap} {:close 0, :instruction in4} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yankdup} {:close 2, :instruction integer_min})
Lexicase best program: (in3 boolean_dup tag_boolean_347 exec_when (integer_dup in4 tagged_506 integer_swap boolean_dup_times integer_min in2 exec_swap (integer_rot integer_dup_times) (integer_min print_integer) integer_dup_items exec_y (exec_pop (boolean_frominteger exec_dup (boolean_swap)) integer_shove integer_dec integer_dup integer_sub) exec_eq integer_eq integer_yankdup boolean_pop integer_dup_items boolean_dup_times) integer_inc tag_boolean_474 exec_do*range (boolean_and boolean_flush exec_pop () integer_pop exec_s () (exec_y_when_autoconstructing () integer_swap) (exec_swap (in4 print_newline boolean_eq boolean_not integer_yankdup integer_min) ())))
Lexicase best errors: [0 0 0 0 0 0 1 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 64
Percent parens: 0.234
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction boolean_dup} {:close 1, :instruction tag_boolean_347} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction tagged_506} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_y} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_dup} {:close 2, :instruction boolean_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction tag_boolean_474} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_s} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_swap} {:close 0, :instruction in4} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yankdup} {:close 2, :instruction integer_min})
Zero cases best program: (in3 boolean_dup tag_boolean_347 exec_when (integer_dup in4 tagged_506 integer_swap boolean_dup_times integer_min in2 exec_swap (integer_rot integer_dup_times) (integer_min print_integer) integer_dup_items exec_y (exec_pop (boolean_frominteger exec_dup (boolean_swap)) integer_shove integer_dec integer_dup integer_sub) exec_eq integer_eq integer_yankdup boolean_pop integer_dup_items boolean_dup_times) integer_inc tag_boolean_474 exec_do*range (boolean_and boolean_flush exec_pop () integer_pop exec_s () (exec_y_when_autoconstructing () integer_swap) (exec_swap (in4 print_newline boolean_eq boolean_not integer_yankdup integer_min) ())))
Zero cases best errors: [0 0 0 0 0 0 1 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 64
Percent parens: 0.234
--- Lexicase Population Statistics ---
Count of elite individuals by case: (373 425 477 373 431 380 78 417 179 341)
Population mean number of elite cases: 3.47
Count of perfect (error zero) individuals by case: (373 425 477 373 431 380 78 417 179 341)
Population mean number of perfect (error zero) cases: 3.47
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction tagged_506} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_rot} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_yank} {:close 2, :instruction boolean_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_when} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_s} {:close 0, :instruction integer_inc} {:close 0, :instruction tag_boolean_474} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_s} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction in4} {:close 0, :instruction exec_eq} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_rot} {:close 2, :instruction integer_min})
Best program: (in3 boolean_dup exec_when (integer_dup in4 tagged_506 integer_swap integer_min in2 exec_swap (integer_rot integer_dup_times) (integer_min boolean_rot print_integer) integer_dup_items exec_pop (exec_dup (integer_yank boolean_swap)) integer_shove integer_dec exec_when (integer_sub) exec_eq integer_eq integer_yankdup boolean_pop integer_dup_items boolean_dup_times) boolean_shove exec_s (integer_inc tag_boolean_474 exec_do*range (boolean_flush exec_pop () integer_pop exec_dup_times (exec_s () (exec_y_when_autoconstructing () exec_swap (in4 exec_eq print_newline boolean_eq boolean_not integer_yankdup exec_rot () (integer_min) ()) ()) ()))) () ())
Errors: [0 0 0 0 0 0 1 0 0 0]
Total: 1
Mean: 0.1
Genome size: 50
Size: 72
Percent parens: 0.306
--- Population Statistics ---
Average total errors in population: 6.526
Median total errors in population: 7
Error averages by case: (0.627 0.575 0.523 0.627 0.569 0.62 0.922 0.583 0.821 0.659)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 56.883
Average program size in population (points): 79.086
Average percent parens in population: 0.279
Minimum age in population: 7.0
Maximum age in population: 7.0
Average age in population: 7.0
Median age in population: 7.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.01
Error (vector) diversity:			 0.072
Behavioral diversity:				 0.309
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 6461900
--- Timings ---
Current time: 1559593890939 milliseconds
Total Time:          22.4 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:         8.5 seconds, 37.9%
Fitness Testing:      8.1 seconds, 36.0%
Report:               5.8 seconds, 25.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 110
Test mean error for best: 0.11000
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 1
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 1
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 1
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 1
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 1
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 1
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 1
Test Case  225 | Error: 1
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 1
Test Case  230 | Error: 1
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 1
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 1
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 1
Test Case  254 | Error: 0
Test Case  255 | Error: 1
Test Case  256 | Error: 1
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 1
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 1
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 1
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 1
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 1
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 1
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 1
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 1
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 1
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 1
Test Case  329 | Error: 0
Test Case  330 | Error: 1
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 1
Test Case  336 | Error: 1
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 1
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 1
Test Case  346 | Error: 0
Test Case  347 | Error: 1
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 1
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 1
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 1
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 1
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 1
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 1
Test Case  381 | Error: 0
Test Case  382 | Error: 1
Test Case  383 | Error: 0
Test Case  384 | Error: 1
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 1
Test Case  388 | Error: 0
Test Case  389 | Error: 1
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 1
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 1
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 1
Test Case  405 | Error: 1
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 1
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 1
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 1
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 1
Test Case  483 | Error: 1
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 1
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 1
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 1
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 1
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 1
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 1
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 1
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 1
Test Case  541 | Error: 1
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 1
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 1
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 1
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 1
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 1
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 1
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 1
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 1
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 1
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 1
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 1
Test Case  686 | Error: 1
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 1
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 1
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 1
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 1
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 1
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 1
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 1
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 1
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 1
Test Case  823 | Error: 1
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 1
Test Case  842 | Error: 1
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 1
Test Case  848 | Error: 0
Test Case  849 | Error: 1
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 1
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 1
Test Case  862 | Error: 0
Test Case  863 | Error: 1
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 1
Test Case  868 | Error: 0
Test Case  869 | Error: 1
Test Case  870 | Error: 1
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 1
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 1
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 1
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 1
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 1
Test Case  925 | Error: 1
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 1
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 1
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 1
Test Case  943 | Error: 0
Test Case  944 | Error: 1
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 1
Test Case  960 | Error: 1
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 1
Test Case  964 | Error: 1
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 1
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 1
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 1
Test Case  986 | Error: 1
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 1
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -68                 | Program output: -68                
Correct output: -12                 | Program output: -12                
Correct output: -100                | Program output: -100               
Correct output: -84                 | Program output: -84                
Correct output: -66                 | Program output: -66                
Correct output: -43                 | Program output: -43                
Correct output: -92                 | Program output: -92                
Correct output: 7                   | Program output: 7                  
Correct output: -80                 | Program output: -80                
Correct output: -74                 | Program output: -74                
Correct output: -47                 | Program output: -47                
Correct output: -13                 | Program output: -13                
Correct output: 20                  | Program output: 20                 
Correct output: -26                 | Program output: -26                
Correct output: 76                  | Program output: 76                 
Correct output: 5                   | Program output: 5                  
Correct output: 16                  | Program output: 16                 
Correct output: 12                  | Program output: 14                 
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 13                 
Correct output: 71                  | Program output: 71                 
Correct output: 8                   | Program output: 8                  
Correct output: 1                   | Program output: 1                  
Correct output: 68                  | Program output: 68                 
Correct output: 1                   | Program output: 33                 
Correct output: 38                  | Program output: 38                 
Correct output: 18                  | Program output: 20                 
Correct output: 21                  | Program output: 21                 
Correct output: 41                  | Program output: 49                 
Correct output: 12                  | Program output: 12                 
Correct output: 3                   | Program output: 39                 
Correct output: 19                  | Program output: 19                 
Correct output: 19                  | Program output: 33                 
Correct output: 7                   | Program output: 18                 
Correct output: 34                  | Program output: 34                 
Correct output: -80                 | Program output: -80                
Correct output: -14                 | Program output: -14                
Correct output: -84                 | Program output: -84                
Correct output: -75                 | Program output: -75                
Correct output: -70                 | Program output: -70                
Correct output: -75                 | Program output: -75                
Correct output: -60                 | Program output: -60                
Correct output: -98                 | Program output: -98                
Correct output: -94                 | Program output: -94                
Correct output: -16                 | Program output: -16                
Correct output: -55                 | Program output: -55                
Correct output: -55                 | Program output: -55                
Correct output: -76                 | Program output: -76                
Correct output: -4                  | Program output: -4                 
Correct output: -90                 | Program output: -90                
Correct output: -39                 | Program output: -39                
Correct output: -79                 | Program output: -79                
Correct output: -72                 | Program output: -72                
Correct output: -85                 | Program output: -85                
Correct output: -91                 | Program output: -91                
Correct output: -58                 | Program output: -58                
Correct output: 34                  | Program output: 34                 
Correct output: -6                  | Program output: -6                 
Correct output: -74                 | Program output: -74                
Correct output: -47                 | Program output: -47                
Correct output: -85                 | Program output: -85                
Correct output: -68                 | Program output: -68                
Correct output: -91                 | Program output: -4                 
Correct output: -78                 | Program output: -78                
Correct output: -95                 | Program output: -95                
Correct output: -91                 | Program output: -91                
Correct output: -25                 | Program output: -25                
Correct output: -92                 | Program output: -92                
Correct output: -63                 | Program output: -63                
Correct output: -89                 | Program output: -89                
Correct output: -44                 | Program output: -44                
Correct output: -66                 | Program output: -66                
Correct output: -67                 | Program output: -67                
Correct output: -84                 | Program output: -84                
Correct output: -68                 | Program output: -40                
Correct output: -26                 | Program output: -26                
Correct output: -92                 | Program output: -92                
Correct output: -40                 | Program output: -40                
Correct output: -91                 | Program output: -75                
Correct output: -84                 | Program output: -84                
Correct output: -54                 | Program output: -54                
Correct output: -36                 | Program output: -36                
Correct output: -20                 | Program output: -20                
Correct output: -54                 | Program output: -54                
Correct output: -54                 | Program output: -54                
Correct output: -98                 | Program output: -98                
Correct output: -95                 | Program output: -95                
Correct output: -65                 | Program output: -65                
Correct output: -68                 | Program output: -55                
Correct output: -36                 | Program output: -36                
Correct output: -14                 | Program output: -14                
Correct output: -98                 | Program output: -98                
Correct output: -64                 | Program output: -64                
Correct output: -76                 | Program output: -76                
Correct output: 23                  | Program output: 29                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction exec_when} {:close 0, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_or} {:close 1, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_or} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_s} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction integer_sub} {:close 2, :instruction integer_min})
Lexicase best program: (in1 in3 exec_when (in4 exec_do*times (integer_min in2 integer_swap integer_min exec_swap (exec_if (boolean_or print_integer) (exec_eq exec_shove (integer_dup_items boolean_frominteger exec_dup (integer_flush) exec_dup (integer_shove integer_dec integer_dup_items boolean_or) print_boolean) boolean_not boolean_and) boolean_shove exec_when (boolean_invert_first_then_and exec_dup_items exec_dup_items boolean_pop boolean_rot integer_stackdepth integer_pop boolean_rot boolean_shove integer_inc exec_eq exec_do*range (exec_s () (integer_swap) (integer_dup_items) exec_y_when_autoconstructing (exec_swap (in4 boolean_invert_first_then_and exec_eq print_newline boolean_eq boolean_and boolean_stackdepth) () integer_sub integer_min)))) ())))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 73
Percent parens: 0.247
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction exec_when} {:close 0, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_or} {:close 1, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_or} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_s} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction integer_sub} {:close 2, :instruction integer_min})
Zero cases best program: (in1 in3 exec_when (in4 exec_do*times (integer_min in2 integer_swap integer_min exec_swap (exec_if (boolean_or print_integer) (exec_eq exec_shove (integer_dup_items boolean_frominteger exec_dup (integer_flush) exec_dup (integer_shove integer_dec integer_dup_items boolean_or) print_boolean) boolean_not boolean_and) boolean_shove exec_when (boolean_invert_first_then_and exec_dup_items exec_dup_items boolean_pop boolean_rot integer_stackdepth integer_pop boolean_rot boolean_shove integer_inc exec_eq exec_do*range (exec_s () (integer_swap) (integer_dup_items) exec_y_when_autoconstructing (exec_swap (in4 boolean_invert_first_then_and exec_eq print_newline boolean_eq boolean_and boolean_stackdepth) () integer_sub integer_min)))) ())))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 73
Percent parens: 0.247
--- Lexicase Population Statistics ---
Count of elite individuals by case: (107 485 421 458 262 414 311 381 257 469)
Population mean number of elite cases: 3.57
Count of perfect (error zero) individuals by case: (107 485 421 458 262 414 311 381 257 469)
Population mean number of perfect (error zero) cases: 3.57
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction exec_when} {:close 0, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_if} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_or} {:close 1, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_s} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 2, :instruction integer_min})
Best program: (in1 in3 exec_when (in4 exec_do*times (integer_min in2 integer_min exec_swap (exec_if (exec_when (boolean_or print_integer) exec_eq integer_sub integer_flush) (exec_dup (integer_shove integer_dec boolean_or) boolean_not boolean_and) exec_when (integer_dup integer_dup_items exec_dup_items integer_eq exec_dup_items integer_mod boolean_pop integer_stackdepth exec_s_when_autoconstructing () (integer_pop boolean_rot boolean_shove integer_inc exec_eq exec_do*range (exec_s () (exec_do*times (integer_swap) integer_dup_items) (exec_pop (exec_y_when_autoconstructing (exec_swap (in4 boolean_invert_first_then_and exec_eq print_newline boolean_eq boolean_and integer_min) ()))))) ())) ())))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 52
Size: 74
Percent parens: 0.297
--- Population Statistics ---
Average total errors in population: 6.435
Median total errors in population: 7
Error averages by case: (0.893 0.515 0.579 0.542 0.738 0.586 0.689 0.619 0.743 0.531)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 55.135
Average program size in population (points): 77.502
Average percent parens in population: 0.284
Minimum age in population: 8.0
Maximum age in population: 8.0
Average age in population: 8.0
Median age in population: 8.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.011
Error (vector) diversity:			 0.067
Behavioral diversity:				 0.283
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 7402580
--- Timings ---
Current time: 1559593893551 milliseconds
Total Time:          24.8 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:         9.6 seconds, 38.7%
Fitness Testing:      9.0 seconds, 36.3%
Report:               6.1 seconds, 24.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 8
Successful program: (in1 in3 exec_when (in4 exec_do*times (integer_min in2 integer_min exec_swap (exec_if (exec_when (boolean_or print_integer) exec_eq integer_sub integer_flush) (exec_dup (integer_shove integer_dec boolean_or) boolean_not boolean_and) exec_when (integer_dup integer_dup_items exec_dup_items integer_eq exec_dup_items integer_mod boolean_pop integer_stackdepth exec_s_when_autoconstructing () (integer_pop boolean_rot boolean_shove integer_inc exec_eq exec_do*range (exec_s () (exec_do*times (integer_swap) integer_dup_items) (exec_pop (exec_y_when_autoconstructing (exec_swap (in4 boolean_invert_first_then_and exec_eq print_newline boolean_eq boolean_and integer_min) ()))))) ())) ())))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 74


Auto-simplifying with starting size: 74
step: 0
program: (in1 in3 exec_when (in4 exec_do*times (integer_min in2 integer_min exec_swap (exec_if (exec_when (boolean_or print_integer) exec_eq integer_sub integer_flush) (exec_dup (integer_shove integer_dec boolean_or) boolean_not boolean_and) exec_when (integer_dup integer_dup_items exec_dup_items integer_eq exec_dup_items integer_mod boolean_pop integer_stackdepth exec_s_when_autoconstructing () (integer_pop boolean_rot boolean_shove integer_inc exec_eq exec_do*range (exec_s () (exec_do*times (integer_swap) integer_dup_items) (exec_pop (exec_y_when_autoconstructing (exec_swap (in4 boolean_invert_first_then_and exec_eq print_newline boolean_eq boolean_and integer_min) ()))))) ())) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 74

step: 500
program: (in1 in3 exec_when (in4 exec_do*times (integer_min in2 integer_min exec_swap (exec_if (exec_when (boolean_or print_integer) exec_eq integer_sub integer_flush) (exec_dup (integer_shove integer_dec boolean_or) boolean_not boolean_and) exec_when (integer_dup integer_dup_items exec_dup_items integer_eq exec_dup_items integer_mod boolean_pop integer_stackdepth exec_s_when_autoconstructing () (integer_pop boolean_rot boolean_shove integer_inc exec_eq exec_do*range (exec_s () (exec_do*times (integer_swap) integer_dup_items) (exec_pop (exec_y_when_autoconstructing (exec_swap (in4 boolean_invert_first_then_and exec_eq print_newline boolean_eq boolean_and integer_min) ()))))) ())) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 74

step: 1000
program: (in1 in3 exec_when (in4 exec_do*times (integer_min in2 integer_min exec_swap (exec_if (exec_when (boolean_or print_integer) exec_eq integer_sub integer_flush) (exec_dup (integer_shove integer_dec boolean_or) boolean_not boolean_and) exec_when (integer_dup integer_dup_items exec_dup_items integer_eq exec_dup_items integer_mod boolean_pop integer_stackdepth exec_s_when_autoconstructing () (integer_pop boolean_rot boolean_shove integer_inc exec_eq exec_do*range (exec_s () (exec_do*times (integer_swap) integer_dup_items) (exec_pop (exec_y_when_autoconstructing (exec_swap (in4 boolean_invert_first_then_and exec_eq print_newline boolean_eq boolean_and integer_min) ()))))) ())) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 74

step: 1500
program: (in1 in3 exec_when (in4 exec_do*times (integer_min in2 integer_min exec_swap (exec_if (exec_when (boolean_or print_integer) exec_eq integer_sub integer_flush) (exec_dup (integer_shove integer_dec boolean_or) boolean_not boolean_and) exec_when (integer_dup integer_dup_items exec_dup_items integer_eq exec_dup_items integer_mod boolean_pop integer_stackdepth exec_s_when_autoconstructing () (integer_pop boolean_rot boolean_shove integer_inc exec_eq exec_do*range (exec_s () (exec_do*times (integer_swap) integer_dup_items) (exec_pop (exec_y_when_autoconstructing (exec_swap (in4 boolean_invert_first_then_and exec_eq print_newline boolean_eq boolean_and integer_min) ()))))) ())) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 74

step: 2000
program: (in1 in3 exec_when (in4 exec_do*times (integer_min in2 integer_min exec_swap (exec_if (exec_when (boolean_or print_integer) exec_eq integer_sub integer_flush) (exec_dup (integer_shove integer_dec boolean_or) boolean_not boolean_and) exec_when (integer_dup integer_dup_items exec_dup_items integer_eq exec_dup_items integer_mod boolean_pop integer_stackdepth exec_s_when_autoconstructing () (integer_pop boolean_rot boolean_shove integer_inc exec_eq exec_do*range (exec_s () (exec_do*times (integer_swap) integer_dup_items) (exec_pop (exec_y_when_autoconstructing (exec_swap (in4 boolean_invert_first_then_and exec_eq print_newline boolean_eq boolean_and integer_min) ()))))) ())) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 74

step: 2500
program: (in1 in3 exec_when (in4 exec_do*times (integer_min in2 integer_min exec_swap (exec_if (exec_when (boolean_or print_integer) exec_eq integer_sub integer_flush) (exec_dup (integer_shove integer_dec boolean_or) boolean_not boolean_and) exec_when (integer_dup integer_dup_items exec_dup_items integer_eq exec_dup_items integer_mod boolean_pop integer_stackdepth exec_s_when_autoconstructing () (integer_pop boolean_rot boolean_shove integer_inc exec_eq exec_do*range (exec_s () (exec_do*times (integer_swap) integer_dup_items) (exec_pop (exec_y_when_autoconstructing (exec_swap (in4 boolean_invert_first_then_and exec_eq print_newline boolean_eq boolean_and integer_min) ()))))) ())) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 74

step: 3000
program: (in1 in3 exec_when (in4 exec_do*times (integer_min in2 integer_min exec_swap (exec_if (exec_when (boolean_or print_integer) exec_eq integer_sub integer_flush) (exec_dup (integer_shove integer_dec boolean_or) boolean_not boolean_and) exec_when (integer_dup integer_dup_items exec_dup_items integer_eq exec_dup_items integer_mod boolean_pop integer_stackdepth exec_s_when_autoconstructing () (integer_pop boolean_rot boolean_shove integer_inc exec_eq exec_do*range (exec_s () (exec_do*times (integer_swap) integer_dup_items) (exec_pop (exec_y_when_autoconstructing (exec_swap (in4 boolean_invert_first_then_and exec_eq print_newline boolean_eq boolean_and integer_min) ()))))) ())) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 74

step: 3500
program: (in1 in3 exec_when (in4 exec_do*times (integer_min in2 integer_min exec_swap (exec_if (exec_when (boolean_or print_integer) exec_eq integer_sub integer_flush) (exec_dup (integer_shove integer_dec boolean_or) boolean_not boolean_and) exec_when (integer_dup integer_dup_items exec_dup_items integer_eq exec_dup_items integer_mod boolean_pop integer_stackdepth exec_s_when_autoconstructing () (integer_pop boolean_rot boolean_shove integer_inc exec_eq exec_do*range (exec_s () (exec_do*times (integer_swap) integer_dup_items) (exec_pop (exec_y_when_autoconstructing (exec_swap (in4 boolean_invert_first_then_and exec_eq print_newline boolean_eq boolean_and integer_min) ()))))) ())) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 74

step: 4000
program: (in1 in3 exec_when (in4 exec_do*times (integer_min in2 integer_min exec_swap (exec_if (exec_when (boolean_or print_integer) exec_eq integer_sub integer_flush) (exec_dup (integer_shove integer_dec boolean_or) boolean_not boolean_and) exec_when (integer_dup integer_dup_items exec_dup_items integer_eq exec_dup_items integer_mod boolean_pop integer_stackdepth exec_s_when_autoconstructing () (integer_pop boolean_rot boolean_shove integer_inc exec_eq exec_do*range (exec_s () (exec_do*times (integer_swap) integer_dup_items) (exec_pop (exec_y_when_autoconstructing (exec_swap (in4 boolean_invert_first_then_and exec_eq print_newline boolean_eq boolean_and integer_min) ()))))) ())) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 74

step: 4500
program: (in1 in3 exec_when (in4 exec_do*times (integer_min in2 integer_min exec_swap (exec_if (exec_when (boolean_or print_integer) exec_eq integer_sub integer_flush) (exec_dup (integer_shove integer_dec boolean_or) boolean_not boolean_and) exec_when (integer_dup integer_dup_items exec_dup_items integer_eq exec_dup_items integer_mod boolean_pop integer_stackdepth exec_s_when_autoconstructing () (integer_pop boolean_rot boolean_shove integer_inc exec_eq exec_do*range (exec_s () (exec_do*times (integer_swap) integer_dup_items) (exec_pop (exec_y_when_autoconstructing (exec_swap (in4 boolean_invert_first_then_and exec_eq print_newline boolean_eq boolean_and integer_min) ()))))) ())) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 74

step: 5000
program: (in1 in3 exec_when (in4 exec_do*times (integer_min in2 integer_min exec_swap (exec_if (exec_when (boolean_or print_integer) exec_eq integer_sub integer_flush) (exec_dup (integer_shove integer_dec boolean_or) boolean_not boolean_and) exec_when (integer_dup integer_dup_items exec_dup_items integer_eq exec_dup_items integer_mod boolean_pop integer_stackdepth exec_s_when_autoconstructing () (integer_pop boolean_rot boolean_shove integer_inc exec_eq exec_do*range (exec_s () (exec_do*times (integer_swap) integer_dup_items) (exec_pop (exec_y_when_autoconstructing (exec_swap (in4 boolean_invert_first_then_and exec_eq print_newline boolean_eq boolean_and integer_min) ()))))) ())) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 74

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 110
Test mean error for best: 0.11000
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 1
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 1
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 1
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 1
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 1
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 1
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 1
Test Case  225 | Error: 1
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 1
Test Case  230 | Error: 1
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 1
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 1
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 1
Test Case  254 | Error: 0
Test Case  255 | Error: 1
Test Case  256 | Error: 1
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 1
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 1
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 1
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 1
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 1
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 1
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 1
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 1
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 1
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 1
Test Case  329 | Error: 0
Test Case  330 | Error: 1
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 1
Test Case  336 | Error: 1
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 1
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 1
Test Case  346 | Error: 0
Test Case  347 | Error: 1
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 1
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 1
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 1
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 1
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 1
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 1
Test Case  381 | Error: 0
Test Case  382 | Error: 1
Test Case  383 | Error: 0
Test Case  384 | Error: 1
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 1
Test Case  388 | Error: 0
Test Case  389 | Error: 1
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 1
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 1
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 1
Test Case  405 | Error: 1
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 1
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 1
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 1
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 1
Test Case  483 | Error: 1
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 1
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 1
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 1
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 1
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 1
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 1
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 1
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 1
Test Case  541 | Error: 1
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 1
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 1
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 1
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 1
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 1
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 1
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 1
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 1
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 1
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 1
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 1
Test Case  686 | Error: 1
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 1
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 1
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 1
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 1
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 1
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 1
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 1
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 1
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 1
Test Case  823 | Error: 1
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 1
Test Case  842 | Error: 1
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 1
Test Case  848 | Error: 0
Test Case  849 | Error: 1
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 1
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 1
Test Case  862 | Error: 0
Test Case  863 | Error: 1
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 1
Test Case  868 | Error: 0
Test Case  869 | Error: 1
Test Case  870 | Error: 1
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 1
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 1
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 1
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 1
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 1
Test Case  925 | Error: 1
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 1
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 1
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 1
Test Case  943 | Error: 0
Test Case  944 | Error: 1
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 1
Test Case  960 | Error: 1
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 1
Test Case  964 | Error: 1
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 1
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 1
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 1
Test Case  986 | Error: 1
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 1
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -68                 | Program output: -68                
Correct output: -12                 | Program output: -12                
Correct output: -100                | Program output: -100               
Correct output: -84                 | Program output: -84                
Correct output: -66                 | Program output: -66                
Correct output: -43                 | Program output: -43                
Correct output: -92                 | Program output: -92                
Correct output: 7                   | Program output: 7                  
Correct output: -80                 | Program output: -80                
Correct output: -74                 | Program output: -74                
Correct output: -47                 | Program output: -47                
Correct output: -13                 | Program output: -13                
Correct output: 20                  | Program output: 20                 
Correct output: -26                 | Program output: -26                
Correct output: 76                  | Program output: 76                 
Correct output: 5                   | Program output: 5                  
Correct output: 16                  | Program output: 16                 
Correct output: 12                  | Program output: 14                 
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 13                 
Correct output: 71                  | Program output: 71                 
Correct output: 8                   | Program output: 8                  
Correct output: 1                   | Program output: 1                  
Correct output: 68                  | Program output: 68                 
Correct output: 1                   | Program output: 33                 
Correct output: 38                  | Program output: 38                 
Correct output: 18                  | Program output: 20                 
Correct output: 21                  | Program output: 21                 
Correct output: 41                  | Program output: 49                 
Correct output: 12                  | Program output: 12                 
Correct output: 3                   | Program output: 39                 
Correct output: 19                  | Program output: 19                 
Correct output: 19                  | Program output: 33                 
Correct output: 7                   | Program output: 18                 
Correct output: 34                  | Program output: 34                 
Correct output: -80                 | Program output: -80                
Correct output: -14                 | Program output: -14                
Correct output: -84                 | Program output: -84                
Correct output: -75                 | Program output: -75                
Correct output: -70                 | Program output: -70                
Correct output: -75                 | Program output: -75                
Correct output: -60                 | Program output: -60                
Correct output: -98                 | Program output: -98                
Correct output: -94                 | Program output: -94                
Correct output: -16                 | Program output: -16                
Correct output: -55                 | Program output: -55                
Correct output: -55                 | Program output: -55                
Correct output: -76                 | Program output: -76                
Correct output: -4                  | Program output: -4                 
Correct output: -90                 | Program output: -90                
Correct output: -39                 | Program output: -39                
Correct output: -79                 | Program output: -79                
Correct output: -72                 | Program output: -72                
Correct output: -85                 | Program output: -85                
Correct output: -91                 | Program output: -91                
Correct output: -58                 | Program output: -58                
Correct output: 34                  | Program output: 34                 
Correct output: -6                  | Program output: -6                 
Correct output: -74                 | Program output: -74                
Correct output: -47                 | Program output: -47                
Correct output: -85                 | Program output: -85                
Correct output: -68                 | Program output: -68                
Correct output: -91                 | Program output: -4                 
Correct output: -78                 | Program output: -78                
Correct output: -95                 | Program output: -95                
Correct output: -91                 | Program output: -91                
Correct output: -25                 | Program output: -25                
Correct output: -92                 | Program output: -92                
Correct output: -63                 | Program output: -63                
Correct output: -89                 | Program output: -89                
Correct output: -44                 | Program output: -44                
Correct output: -66                 | Program output: -66                
Correct output: -67                 | Program output: -67                
Correct output: -84                 | Program output: -84                
Correct output: -68                 | Program output: -40                
Correct output: -26                 | Program output: -26                
Correct output: -92                 | Program output: -92                
Correct output: -40                 | Program output: -40                
Correct output: -91                 | Program output: -75                
Correct output: -84                 | Program output: -84                
Correct output: -54                 | Program output: -54                
Correct output: -36                 | Program output: -36                
Correct output: -20                 | Program output: -20                
Correct output: -54                 | Program output: -54                
Correct output: -54                 | Program output: -54                
Correct output: -98                 | Program output: -98                
Correct output: -95                 | Program output: -95                
Correct output: -65                 | Program output: -65                
Correct output: -68                 | Program output: -55                
Correct output: -36                 | Program output: -36                
Correct output: -14                 | Program output: -14                
Correct output: -98                 | Program output: -98                
Correct output: -64                 | Program output: -64                
Correct output: -76                 | Program output: -76                
Correct output: 23                  | Program output: 29                 
;;******************************
