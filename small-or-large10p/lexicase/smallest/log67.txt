Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 3000 :genetic-operator-probabilities {:uniform-addition-and-deletion,1.0} :uniform-addition-and-deletion-rate 0.09
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:uniform-addition-and-deletion 1.0}
max-error = 1
max-generations = 3000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[21 21 21 -26] -26] [[-49 99 99 99] -49] [[-56 -88 -88 -88] -88] [[47 -45 47 47] -45] [[86 64 64 64] 64] [[-86 -8 -86 -86] -86] [[89 -42 89 89] -42] [[-85 -14 -85 -85] -85] [[75 75 75 -68] -68] [[61 -16 61 61] -16] [(-11 -11 -11 -11) -11] [(50 50 50 50) 50] [(-1 -1 -1 -1) -1] [(64 64 64 64) 64] [(-85 -85 -85 -85) -85] [(24 57 11 36) 11] [(6 92 76 79) 6] [(38 37 59 61) 37] [(26 48 14 27) 14] [(21 35 33 83) 21] [(92 75 83 59) 59] [(14 71 14 37) 14] [(64 82 51 25) 25] [(44 85 51 26) 26] [(55 87 42 16) 16] [(58 100 86 81) 58] [(72 36 89 82) 36] [(15 73 52 0) 0] [(94 69 92 63) 63] [(3 86 85 84) 3] [(59 93 84 79) 59] [(70 87 80 75) 70] [(85 25 16 41) 16] [(70 5 48 97) 5] [(25 21 73 19) 19] [(-13 -89 -35 -26) -89] [(92 67 9 -30) -30] [(-57 67 69 50) -57] [(-99 100 41 -32) -99] [(19 82 98 57) 19] [(-14 -13 -6 -82) -82] [(56 -86 17 32) -86] [(-64 -84 82 23) -84] [(-94 88 13 32) -94] [(-12 -67 37 80) -67] [(-66 80 12 6) -66] [(-75 -21 70 -90) -90] [(62 91 -22 -33) -33] [(-62 -49 53 -65) -65] [(94 87 -100 -9) -100] [(-16 -62 -77 53) -77] [(-99 88 9 18) -99] [(-90 86 -9 -16) -90] [(-21 98 -30 -20) -30] [(-57 -50 65 33) -57] [(-60 56 -20 -48) -60] [(24 -61 76 56) -61] [(42 90 36 -73) -73] [(-61 45 -8 -71) -71] [(22 74 -33 -6) -33] [(3 -53 -25 -71) -71] [(-15 34 12 10) -15] [(-12 -63 20 -12) -63] [(-64 100 22 45) -64] [(77 5 89 10) 5] [(-50 -36 -40 -86) -86] [(79 -33 -26 -85) -85] [(-64 -45 13 -18) -64] [(-100 56 82 4) -100] [(-52 -1 -15 8) -52] [(-89 76 -32 73) -89] [(30 80 -26 11) -26] [(-54 -48 -17 -8) -54] [(-65 -76 32 35) -76] [(40 -61 -93 -55) -93] [(-77 -80 54 -9) -80] [(-96 -34 1 61) -96] [(7 26 28 -60) -60] [(52 -96 53 -78) -96] [(-14 -96 -74 -11) -96] [(-77 84 -9 -98) -98] [(-19 -49 -96 25) -96] [(43 98 70 -2) -2] [(77 -61 -38 -38) -61] [(-47 42 -24 91) -47] [(-77 27 70 -71) -77] [(30 -59 75 59) -59] [(75 -65 -90 44) -90] [(-10 25 55 50) -10] [(-36 70 -14 -57) -57] [(-8 -19 67 -74) -74] [(-68 64 -66 -96) -96] [(71 82 -70 59) -70] [(-18 -45 -55 -95) -95] [(99 65 -54 16) -54])
uniform-addition-and-deletion-rate = 0.09
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[21 21 21 -26] -26]
Train Case:   6 | Input/Output: [[-49 99 99 99] -49]
Train Case:   7 | Input/Output: [[-56 -88 -88 -88] -88]
Train Case:   8 | Input/Output: [[47 -45 47 47] -45]
Train Case:   9 | Input/Output: [[86 64 64 64] 64]
Train Case:  10 | Input/Output: [[-86 -8 -86 -86] -86]
Train Case:  11 | Input/Output: [[89 -42 89 89] -42]
Train Case:  12 | Input/Output: [[-85 -14 -85 -85] -85]
Train Case:  13 | Input/Output: [[75 75 75 -68] -68]
Train Case:  14 | Input/Output: [[61 -16 61 61] -16]
Train Case:  15 | Input/Output: [(-11 -11 -11 -11) -11]
Train Case:  16 | Input/Output: [(50 50 50 50) 50]
Train Case:  17 | Input/Output: [(-1 -1 -1 -1) -1]
Train Case:  18 | Input/Output: [(64 64 64 64) 64]
Train Case:  19 | Input/Output: [(-85 -85 -85 -85) -85]
Train Case:  20 | Input/Output: [(24 57 11 36) 11]
Train Case:  21 | Input/Output: [(6 92 76 79) 6]
Train Case:  22 | Input/Output: [(38 37 59 61) 37]
Train Case:  23 | Input/Output: [(26 48 14 27) 14]
Train Case:  24 | Input/Output: [(21 35 33 83) 21]
Train Case:  25 | Input/Output: [(92 75 83 59) 59]
Train Case:  26 | Input/Output: [(14 71 14 37) 14]
Train Case:  27 | Input/Output: [(64 82 51 25) 25]
Train Case:  28 | Input/Output: [(44 85 51 26) 26]
Train Case:  29 | Input/Output: [(55 87 42 16) 16]
Train Case:  30 | Input/Output: [(58 100 86 81) 58]
Train Case:  31 | Input/Output: [(72 36 89 82) 36]
Train Case:  32 | Input/Output: [(15 73 52 0) 0]
Train Case:  33 | Input/Output: [(94 69 92 63) 63]
Train Case:  34 | Input/Output: [(3 86 85 84) 3]
Train Case:  35 | Input/Output: [(59 93 84 79) 59]
Train Case:  36 | Input/Output: [(70 87 80 75) 70]
Train Case:  37 | Input/Output: [(85 25 16 41) 16]
Train Case:  38 | Input/Output: [(70 5 48 97) 5]
Train Case:  39 | Input/Output: [(25 21 73 19) 19]
Train Case:  40 | Input/Output: [(-13 -89 -35 -26) -89]
Train Case:  41 | Input/Output: [(92 67 9 -30) -30]
Train Case:  42 | Input/Output: [(-57 67 69 50) -57]
Train Case:  43 | Input/Output: [(-99 100 41 -32) -99]
Train Case:  44 | Input/Output: [(19 82 98 57) 19]
Train Case:  45 | Input/Output: [(-14 -13 -6 -82) -82]
Train Case:  46 | Input/Output: [(56 -86 17 32) -86]
Train Case:  47 | Input/Output: [(-64 -84 82 23) -84]
Train Case:  48 | Input/Output: [(-94 88 13 32) -94]
Train Case:  49 | Input/Output: [(-12 -67 37 80) -67]
Train Case:  50 | Input/Output: [(-66 80 12 6) -66]
Train Case:  51 | Input/Output: [(-75 -21 70 -90) -90]
Train Case:  52 | Input/Output: [(62 91 -22 -33) -33]
Train Case:  53 | Input/Output: [(-62 -49 53 -65) -65]
Train Case:  54 | Input/Output: [(94 87 -100 -9) -100]
Train Case:  55 | Input/Output: [(-16 -62 -77 53) -77]
Train Case:  56 | Input/Output: [(-99 88 9 18) -99]
Train Case:  57 | Input/Output: [(-90 86 -9 -16) -90]
Train Case:  58 | Input/Output: [(-21 98 -30 -20) -30]
Train Case:  59 | Input/Output: [(-57 -50 65 33) -57]
Train Case:  60 | Input/Output: [(-60 56 -20 -48) -60]
Train Case:  61 | Input/Output: [(24 -61 76 56) -61]
Train Case:  62 | Input/Output: [(42 90 36 -73) -73]
Train Case:  63 | Input/Output: [(-61 45 -8 -71) -71]
Train Case:  64 | Input/Output: [(22 74 -33 -6) -33]
Train Case:  65 | Input/Output: [(3 -53 -25 -71) -71]
Train Case:  66 | Input/Output: [(-15 34 12 10) -15]
Train Case:  67 | Input/Output: [(-12 -63 20 -12) -63]
Train Case:  68 | Input/Output: [(-64 100 22 45) -64]
Train Case:  69 | Input/Output: [(77 5 89 10) 5]
Train Case:  70 | Input/Output: [(-50 -36 -40 -86) -86]
Train Case:  71 | Input/Output: [(79 -33 -26 -85) -85]
Train Case:  72 | Input/Output: [(-64 -45 13 -18) -64]
Train Case:  73 | Input/Output: [(-100 56 82 4) -100]
Train Case:  74 | Input/Output: [(-52 -1 -15 8) -52]
Train Case:  75 | Input/Output: [(-89 76 -32 73) -89]
Train Case:  76 | Input/Output: [(30 80 -26 11) -26]
Train Case:  77 | Input/Output: [(-54 -48 -17 -8) -54]
Train Case:  78 | Input/Output: [(-65 -76 32 35) -76]
Train Case:  79 | Input/Output: [(40 -61 -93 -55) -93]
Train Case:  80 | Input/Output: [(-77 -80 54 -9) -80]
Train Case:  81 | Input/Output: [(-96 -34 1 61) -96]
Train Case:  82 | Input/Output: [(7 26 28 -60) -60]
Train Case:  83 | Input/Output: [(52 -96 53 -78) -96]
Train Case:  84 | Input/Output: [(-14 -96 -74 -11) -96]
Train Case:  85 | Input/Output: [(-77 84 -9 -98) -98]
Train Case:  86 | Input/Output: [(-19 -49 -96 25) -96]
Train Case:  87 | Input/Output: [(43 98 70 -2) -2]
Train Case:  88 | Input/Output: [(77 -61 -38 -38) -61]
Train Case:  89 | Input/Output: [(-47 42 -24 91) -47]
Train Case:  90 | Input/Output: [(-77 27 70 -71) -77]
Train Case:  91 | Input/Output: [(30 -59 75 59) -59]
Train Case:  92 | Input/Output: [(75 -65 -90 44) -90]
Train Case:  93 | Input/Output: [(-10 25 55 50) -10]
Train Case:  94 | Input/Output: [(-36 70 -14 -57) -57]
Train Case:  95 | Input/Output: [(-8 -19 67 -74) -74]
Train Case:  96 | Input/Output: [(-68 64 -66 -96) -96]
Train Case:  97 | Input/Output: [(71 82 -70 59) -70]
Train Case:  98 | Input/Output: [(-18 -45 -55 -95) -95]
Train Case:  99 | Input/Output: [(99 65 -54 16) -54]
Test Case:   0 | Input/Output: [[46 46 46 -70] -70]
Test Case:   1 | Input/Output: [[40 31 40 40] 31]
Test Case:   2 | Input/Output: [[-32 42 -32 -32] -32]
Test Case:   3 | Input/Output: [[-22 -15 -22 -22] -22]
Test Case:   4 | Input/Output: [[82 70 70 70] 70]
Test Case:   5 | Input/Output: [[95 95 95 -13] -13]
Test Case:   6 | Input/Output: [[-17 -48 -17 -17] -48]
Test Case:   7 | Input/Output: [[61 -56 -56 -56] -56]
Test Case:   8 | Input/Output: [[-53 -55 -53 -53] -55]
Test Case:   9 | Input/Output: [[-76 -76 -62 -76] -76]
Test Case:  10 | Input/Output: [[-88 1 1 1] -88]
Test Case:  11 | Input/Output: [[51 17 17 17] 17]
Test Case:  12 | Input/Output: [[18 -28 -28 -28] -28]
Test Case:  13 | Input/Output: [[-54 98 -54 -54] -54]
Test Case:  14 | Input/Output: [[-8 -89 -89 -89] -89]
Test Case:  15 | Input/Output: [[-37 -37 12 -37] -37]
Test Case:  16 | Input/Output: [[41 32 41 41] 32]
Test Case:  17 | Input/Output: [[-30 -50 -30 -30] -50]
Test Case:  18 | Input/Output: [[61 14 14 14] 14]
Test Case:  19 | Input/Output: [[-53 -77 -53 -53] -77]
Test Case:  20 | Input/Output: [[15 15 15 51] 15]
Test Case:  21 | Input/Output: [[-31 -31 -31 81] -31]
Test Case:  22 | Input/Output: [[-66 -66 -66 7] -66]
Test Case:  23 | Input/Output: [[11 11 11 -94] -94]
Test Case:  24 | Input/Output: [[93 93 93 7] 7]
Test Case:  25 | Input/Output: [[63 4 4 4] 4]
Test Case:  26 | Input/Output: [[8 -18 8 8] -18]
Test Case:  27 | Input/Output: [[71 83 71 71] 71]
Test Case:  28 | Input/Output: [[2 46 2 2] 2]
Test Case:  29 | Input/Output: [[3 3 27 3] 3]
Test Case:  30 | Input/Output: [[-76 -67 -67 -67] -76]
Test Case:  31 | Input/Output: [[55 -83 -83 -83] -83]
Test Case:  32 | Input/Output: [[43 2 2 2] 2]
Test Case:  33 | Input/Output: [[-8 70 70 70] -8]
Test Case:  34 | Input/Output: [[24 24 61 24] 24]
Test Case:  35 | Input/Output: [[84 84 84 67] 67]
Test Case:  36 | Input/Output: [[19 -83 -83 -83] -83]
Test Case:  37 | Input/Output: [[82 -22 -22 -22] -22]
Test Case:  38 | Input/Output: [[-89 84 -89 -89] -89]
Test Case:  39 | Input/Output: [[35 35 35 -8] -8]
Test Case:  40 | Input/Output: [[75 1 75 75] 1]
Test Case:  41 | Input/Output: [[-32 -32 17 -32] -32]
Test Case:  42 | Input/Output: [[67 67 91 67] 67]
Test Case:  43 | Input/Output: [[75 75 75 37] 37]
Test Case:  44 | Input/Output: [[-75 30 -75 -75] -75]
Test Case:  45 | Input/Output: [[48 48 48 2] 2]
Test Case:  46 | Input/Output: [[44 44 44 33] 33]
Test Case:  47 | Input/Output: [[-62 -62 -64 -62] -64]
Test Case:  48 | Input/Output: [[-67 95 -67 -67] -67]
Test Case:  49 | Input/Output: [[-48 -48 -19 -48] -48]
Test Case:  50 | Input/Output: [[96 96 96 60] 60]
Test Case:  51 | Input/Output: [[-72 -11 -72 -72] -72]
Test Case:  52 | Input/Output: [[86 47 47 47] 47]
Test Case:  53 | Input/Output: [[5 5 5 -38] -38]
Test Case:  54 | Input/Output: [[-51 85 -51 -51] -51]
Test Case:  55 | Input/Output: [[-48 15 15 15] -48]
Test Case:  56 | Input/Output: [[-3 -3 -3 -82] -82]
Test Case:  57 | Input/Output: [[-78 -78 -78 -49] -78]
Test Case:  58 | Input/Output: [[-100 -100 -60 -100] -100]
Test Case:  59 | Input/Output: [[61 -66 61 61] -66]
Test Case:  60 | Input/Output: [[90 90 90 -10] -10]
Test Case:  61 | Input/Output: [[99 74 74 74] 74]
Test Case:  62 | Input/Output: [[-76 -65 -76 -76] -76]
Test Case:  63 | Input/Output: [[54 54 -13 54] -13]
Test Case:  64 | Input/Output: [[-72 -31 -31 -31] -72]
Test Case:  65 | Input/Output: [[34 -68 -68 -68] -68]
Test Case:  66 | Input/Output: [[75 75 75 30] 30]
Test Case:  67 | Input/Output: [[88 -29 88 88] -29]
Test Case:  68 | Input/Output: [[-24 -24 53 -24] -24]
Test Case:  69 | Input/Output: [[96 93 93 93] 93]
Test Case:  70 | Input/Output: [[-38 -38 -38 58] -38]
Test Case:  71 | Input/Output: [[3 -39 -39 -39] -39]
Test Case:  72 | Input/Output: [[7 43 43 43] 7]
Test Case:  73 | Input/Output: [[-55 -55 -55 -11] -55]
Test Case:  74 | Input/Output: [[64 64 -51 64] -51]
Test Case:  75 | Input/Output: [[17 59 59 59] 17]
Test Case:  76 | Input/Output: [[-26 -26 -27 -26] -27]
Test Case:  77 | Input/Output: [[-80 -30 -30 -30] -80]
Test Case:  78 | Input/Output: [[39 39 39 -85] -85]
Test Case:  79 | Input/Output: [[84 31 84 84] 31]
Test Case:  80 | Input/Output: [[84 75 75 75] 75]
Test Case:  81 | Input/Output: [[-65 -92 -65 -65] -92]
Test Case:  82 | Input/Output: [[52 52 27 52] 27]
Test Case:  83 | Input/Output: [[32 32 32 -69] -69]
Test Case:  84 | Input/Output: [[3 54 54 54] 3]
Test Case:  85 | Input/Output: [[-77 -77 -77 78] -77]
Test Case:  86 | Input/Output: [[8 15 15 15] 8]
Test Case:  87 | Input/Output: [[-62 -45 -62 -62] -62]
Test Case:  88 | Input/Output: [[94 94 94 -44] -44]
Test Case:  89 | Input/Output: [[-13 -13 -13 60] -13]
Test Case:  90 | Input/Output: [[-27 46 -27 -27] -27]
Test Case:  91 | Input/Output: [[35 35 35 -47] -47]
Test Case:  92 | Input/Output: [[-12 -12 -6 -12] -12]
Test Case:  93 | Input/Output: [[-29 -29 -74 -29] -74]
Test Case:  94 | Input/Output: [[-13 -13 -13 99] -13]
Test Case:  95 | Input/Output: [[85 85 -39 85] -39]
Test Case:  96 | Input/Output: [[49 72 49 49] 49]
Test Case:  97 | Input/Output: [[44 44 44 75] 44]
Test Case:  98 | Input/Output: [[97 97 23 97] 23]
Test Case:  99 | Input/Output: [[-84 -84 -84 -50] -84]
Test Case: 100 | Input/Output: [(99 99 99 99) 99]
Test Case: 101 | Input/Output: [(51 51 51 51) 51]
Test Case: 102 | Input/Output: [(-9 -9 -9 -9) -9]
Test Case: 103 | Input/Output: [(94 94 94 94) 94]
Test Case: 104 | Input/Output: [(70 70 70 70) 70]
Test Case: 105 | Input/Output: [(24 24 24 24) 24]
Test Case: 106 | Input/Output: [(19 19 19 19) 19]
Test Case: 107 | Input/Output: [(47 47 47 47) 47]
Test Case: 108 | Input/Output: [(52 52 52 52) 52]
Test Case: 109 | Input/Output: [(-13 -13 -13 -13) -13]
Test Case: 110 | Input/Output: [(65 65 65 65) 65]
Test Case: 111 | Input/Output: [(1 1 1 1) 1]
Test Case: 112 | Input/Output: [(29 29 29 29) 29]
Test Case: 113 | Input/Output: [(-91 -91 -91 -91) -91]
Test Case: 114 | Input/Output: [(-50 -50 -50 -50) -50]
Test Case: 115 | Input/Output: [(-41 -41 -41 -41) -41]
Test Case: 116 | Input/Output: [(13 13 13 13) 13]
Test Case: 117 | Input/Output: [(81 81 81 81) 81]
Test Case: 118 | Input/Output: [(-37 -37 -37 -37) -37]
Test Case: 119 | Input/Output: [(-77 -77 -77 -77) -77]
Test Case: 120 | Input/Output: [(-67 -67 -67 -67) -67]
Test Case: 121 | Input/Output: [(-100 -100 -100 -100) -100]
Test Case: 122 | Input/Output: [(41 41 41 41) 41]
Test Case: 123 | Input/Output: [(41 41 41 41) 41]
Test Case: 124 | Input/Output: [(-46 -46 -46 -46) -46]
Test Case: 125 | Input/Output: [(67 67 67 67) 67]
Test Case: 126 | Input/Output: [(13 13 13 13) 13]
Test Case: 127 | Input/Output: [(-63 -63 -63 -63) -63]
Test Case: 128 | Input/Output: [(66 66 66 66) 66]
Test Case: 129 | Input/Output: [(-11 -11 -11 -11) -11]
Test Case: 130 | Input/Output: [(-32 -32 -32 -32) -32]
Test Case: 131 | Input/Output: [(-2 -2 -2 -2) -2]
Test Case: 132 | Input/Output: [(64 64 64 64) 64]
Test Case: 133 | Input/Output: [(-30 -30 -30 -30) -30]
Test Case: 134 | Input/Output: [(11 11 11 11) 11]
Test Case: 135 | Input/Output: [(-16 -16 -16 -16) -16]
Test Case: 136 | Input/Output: [(-95 -95 -95 -95) -95]
Test Case: 137 | Input/Output: [(-60 -60 -60 -60) -60]
Test Case: 138 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 139 | Input/Output: [(-87 -87 -87 -87) -87]
Test Case: 140 | Input/Output: [(-65 -65 -65 -65) -65]
Test Case: 141 | Input/Output: [(-43 -43 -43 -43) -43]
Test Case: 142 | Input/Output: [(-48 -48 -48 -48) -48]
Test Case: 143 | Input/Output: [(-18 -18 -18 -18) -18]
Test Case: 144 | Input/Output: [(-54 -54 -54 -54) -54]
Test Case: 145 | Input/Output: [(23 23 23 23) 23]
Test Case: 146 | Input/Output: [(98 98 98 98) 98]
Test Case: 147 | Input/Output: [(-47 -47 -47 -47) -47]
Test Case: 148 | Input/Output: [(-74 -74 -74 -74) -74]
Test Case: 149 | Input/Output: [(-9 -9 -9 -9) -9]
Test Case: 150 | Input/Output: [(19 19 19 19) 19]
Test Case: 151 | Input/Output: [(-8 -8 -8 -8) -8]
Test Case: 152 | Input/Output: [(-94 -94 -94 -94) -94]
Test Case: 153 | Input/Output: [(-54 -54 -54 -54) -54]
Test Case: 154 | Input/Output: [(19 19 19 19) 19]
Test Case: 155 | Input/Output: [(-48 -48 -48 -48) -48]
Test Case: 156 | Input/Output: [(93 93 93 93) 93]
Test Case: 157 | Input/Output: [(83 83 83 83) 83]
Test Case: 158 | Input/Output: [(-10 -10 -10 -10) -10]
Test Case: 159 | Input/Output: [(32 32 32 32) 32]
Test Case: 160 | Input/Output: [(35 35 35 35) 35]
Test Case: 161 | Input/Output: [(98 98 98 98) 98]
Test Case: 162 | Input/Output: [(-76 -76 -76 -76) -76]
Test Case: 163 | Input/Output: [(80 80 80 80) 80]
Test Case: 164 | Input/Output: [(-76 -76 -76 -76) -76]
Test Case: 165 | Input/Output: [(-67 -67 -67 -67) -67]
Test Case: 166 | Input/Output: [(84 84 84 84) 84]
Test Case: 167 | Input/Output: [(41 41 41 41) 41]
Test Case: 168 | Input/Output: [(19 19 19 19) 19]
Test Case: 169 | Input/Output: [(23 23 23 23) 23]
Test Case: 170 | Input/Output: [(-77 -77 -77 -77) -77]
Test Case: 171 | Input/Output: [(-26 -26 -26 -26) -26]
Test Case: 172 | Input/Output: [(8 8 8 8) 8]
Test Case: 173 | Input/Output: [(67 67 67 67) 67]
Test Case: 174 | Input/Output: [(-35 -35 -35 -35) -35]
Test Case: 175 | Input/Output: [(25 25 25 25) 25]
Test Case: 176 | Input/Output: [(16 16 16 16) 16]
Test Case: 177 | Input/Output: [(80 80 80 80) 80]
Test Case: 178 | Input/Output: [(3 3 3 3) 3]
Test Case: 179 | Input/Output: [(-93 -93 -93 -93) -93]
Test Case: 180 | Input/Output: [(70 70 70 70) 70]
Test Case: 181 | Input/Output: [(89 89 89 89) 89]
Test Case: 182 | Input/Output: [(-59 -59 -59 -59) -59]
Test Case: 183 | Input/Output: [(-72 -72 -72 -72) -72]
Test Case: 184 | Input/Output: [(75 75 75 75) 75]
Test Case: 185 | Input/Output: [(20 20 20 20) 20]
Test Case: 186 | Input/Output: [(-39 -39 -39 -39) -39]
Test Case: 187 | Input/Output: [(-60 -60 -60 -60) -60]
Test Case: 188 | Input/Output: [(-97 -97 -97 -97) -97]
Test Case: 189 | Input/Output: [(-17 -17 -17 -17) -17]
Test Case: 190 | Input/Output: [(5 5 5 5) 5]
Test Case: 191 | Input/Output: [(88 88 88 88) 88]
Test Case: 192 | Input/Output: [(-7 -7 -7 -7) -7]
Test Case: 193 | Input/Output: [(24 24 24 24) 24]
Test Case: 194 | Input/Output: [(-51 -51 -51 -51) -51]
Test Case: 195 | Input/Output: [(-19 -19 -19 -19) -19]
Test Case: 196 | Input/Output: [(-80 -80 -80 -80) -80]
Test Case: 197 | Input/Output: [(48 48 48 48) 48]
Test Case: 198 | Input/Output: [(40 40 40 40) 40]
Test Case: 199 | Input/Output: [(-75 -75 -75 -75) -75]
Test Case: 200 | Input/Output: [(24 24 29 90) 24]
Test Case: 201 | Input/Output: [(17 99 1 47) 1]
Test Case: 202 | Input/Output: [(76 67 90 44) 44]
Test Case: 203 | Input/Output: [(0 56 84 98) 0]
Test Case: 204 | Input/Output: [(17 69 72 65) 17]
Test Case: 205 | Input/Output: [(46 36 9 22) 9]
Test Case: 206 | Input/Output: [(38 31 15 20) 15]
Test Case: 207 | Input/Output: [(29 23 98 10) 10]
Test Case: 208 | Input/Output: [(45 82 22 69) 22]
Test Case: 209 | Input/Output: [(44 8 84 9) 8]
Test Case: 210 | Input/Output: [(27 99 34 45) 27]
Test Case: 211 | Input/Output: [(50 85 38 72) 38]
Test Case: 212 | Input/Output: [(64 3 20 76) 3]
Test Case: 213 | Input/Output: [(77 91 95 21) 21]
Test Case: 214 | Input/Output: [(97 63 100 24) 24]
Test Case: 215 | Input/Output: [(31 25 70 46) 25]
Test Case: 216 | Input/Output: [(21 72 22 24) 21]
Test Case: 217 | Input/Output: [(70 95 78 20) 20]
Test Case: 218 | Input/Output: [(24 75 5 12) 5]
Test Case: 219 | Input/Output: [(58 63 94 33) 33]
Test Case: 220 | Input/Output: [(30 43 9 88) 9]
Test Case: 221 | Input/Output: [(33 95 8 19) 8]
Test Case: 222 | Input/Output: [(81 10 27 82) 10]
Test Case: 223 | Input/Output: [(44 21 92 30) 21]
Test Case: 224 | Input/Output: [(97 2 92 95) 2]
Test Case: 225 | Input/Output: [(71 60 49 89) 49]
Test Case: 226 | Input/Output: [(15 74 16 96) 15]
Test Case: 227 | Input/Output: [(8 82 48 40) 8]
Test Case: 228 | Input/Output: [(43 67 7 41) 7]
Test Case: 229 | Input/Output: [(69 9 41 9) 9]
Test Case: 230 | Input/Output: [(73 57 93 95) 57]
Test Case: 231 | Input/Output: [(4 65 74 15) 4]
Test Case: 232 | Input/Output: [(3 85 20 93) 3]
Test Case: 233 | Input/Output: [(64 21 80 47) 21]
Test Case: 234 | Input/Output: [(62 41 37 54) 37]
Test Case: 235 | Input/Output: [(43 91 93 32) 32]
Test Case: 236 | Input/Output: [(93 90 8 70) 8]
Test Case: 237 | Input/Output: [(87 84 11 53) 11]
Test Case: 238 | Input/Output: [(56 14 62 15) 14]
Test Case: 239 | Input/Output: [(48 4 81 83) 4]
Test Case: 240 | Input/Output: [(64 24 27 10) 10]
Test Case: 241 | Input/Output: [(90 25 63 67) 25]
Test Case: 242 | Input/Output: [(70 57 65 76) 57]
Test Case: 243 | Input/Output: [(23 62 89 38) 23]
Test Case: 244 | Input/Output: [(61 62 48 39) 39]
Test Case: 245 | Input/Output: [(10 63 7 0) 0]
Test Case: 246 | Input/Output: [(74 88 69 67) 67]
Test Case: 247 | Input/Output: [(34 93 61 90) 34]
Test Case: 248 | Input/Output: [(13 49 36 65) 13]
Test Case: 249 | Input/Output: [(48 90 22 40) 22]
Test Case: 250 | Input/Output: [(64 7 78 72) 7]
Test Case: 251 | Input/Output: [(22 56 88 16) 16]
Test Case: 252 | Input/Output: [(35 95 44 59) 35]
Test Case: 253 | Input/Output: [(61 5 77 28) 5]
Test Case: 254 | Input/Output: [(73 38 95 63) 38]
Test Case: 255 | Input/Output: [(60 25 79 61) 25]
Test Case: 256 | Input/Output: [(77 70 87 56) 56]
Test Case: 257 | Input/Output: [(78 53 48 58) 48]
Test Case: 258 | Input/Output: [(67 7 78 21) 7]
Test Case: 259 | Input/Output: [(60 18 83 16) 16]
Test Case: 260 | Input/Output: [(32 49 64 44) 32]
Test Case: 261 | Input/Output: [(90 73 61 9) 9]
Test Case: 262 | Input/Output: [(72 100 87 100) 72]
Test Case: 263 | Input/Output: [(78 29 31 44) 29]
Test Case: 264 | Input/Output: [(46 77 11 89) 11]
Test Case: 265 | Input/Output: [(32 89 73 54) 32]
Test Case: 266 | Input/Output: [(92 10 51 42) 10]
Test Case: 267 | Input/Output: [(88 62 70 81) 62]
Test Case: 268 | Input/Output: [(29 56 49 68) 29]
Test Case: 269 | Input/Output: [(30 23 50 13) 13]
Test Case: 270 | Input/Output: [(63 49 47 71) 47]
Test Case: 271 | Input/Output: [(10 99 22 62) 10]
Test Case: 272 | Input/Output: [(84 50 5 16) 5]
Test Case: 273 | Input/Output: [(29 95 41 40) 29]
Test Case: 274 | Input/Output: [(39 13 33 37) 13]
Test Case: 275 | Input/Output: [(89 52 52 59) 52]
Test Case: 276 | Input/Output: [(27 98 64 10) 10]
Test Case: 277 | Input/Output: [(77 8 18 69) 8]
Test Case: 278 | Input/Output: [(46 70 62 37) 37]
Test Case: 279 | Input/Output: [(28 30 27 79) 27]
Test Case: 280 | Input/Output: [(26 42 14 50) 14]
Test Case: 281 | Input/Output: [(44 21 39 99) 21]
Test Case: 282 | Input/Output: [(83 93 22 55) 22]
Test Case: 283 | Input/Output: [(35 39 0 65) 0]
Test Case: 284 | Input/Output: [(25 23 83 7) 7]
Test Case: 285 | Input/Output: [(1 89 12 60) 1]
Test Case: 286 | Input/Output: [(42 43 17 68) 17]
Test Case: 287 | Input/Output: [(70 60 93 87) 60]
Test Case: 288 | Input/Output: [(93 53 5 53) 5]
Test Case: 289 | Input/Output: [(46 96 22 24) 22]
Test Case: 290 | Input/Output: [(43 5 64 57) 5]
Test Case: 291 | Input/Output: [(4 70 16 34) 4]
Test Case: 292 | Input/Output: [(62 81 31 28) 28]
Test Case: 293 | Input/Output: [(79 24 8 62) 8]
Test Case: 294 | Input/Output: [(36 29 11 26) 11]
Test Case: 295 | Input/Output: [(75 78 17 81) 17]
Test Case: 296 | Input/Output: [(50 33 70 50) 33]
Test Case: 297 | Input/Output: [(95 11 23 100) 11]
Test Case: 298 | Input/Output: [(82 22 45 58) 22]
Test Case: 299 | Input/Output: [(29 6 13 96) 6]
Test Case: 300 | Input/Output: [(7 52 46 64) 7]
Test Case: 301 | Input/Output: [(79 17 95 15) 15]
Test Case: 302 | Input/Output: [(33 77 50 74) 33]
Test Case: 303 | Input/Output: [(40 14 31 91) 14]
Test Case: 304 | Input/Output: [(18 1 43 36) 1]
Test Case: 305 | Input/Output: [(96 81 77 83) 77]
Test Case: 306 | Input/Output: [(36 60 86 4) 4]
Test Case: 307 | Input/Output: [(99 47 52 77) 47]
Test Case: 308 | Input/Output: [(89 89 29 3) 3]
Test Case: 309 | Input/Output: [(62 64 18 15) 15]
Test Case: 310 | Input/Output: [(42 51 19 76) 19]
Test Case: 311 | Input/Output: [(15 50 97 60) 15]
Test Case: 312 | Input/Output: [(93 41 32 57) 32]
Test Case: 313 | Input/Output: [(84 89 45 45) 45]
Test Case: 314 | Input/Output: [(23 67 40 100) 23]
Test Case: 315 | Input/Output: [(60 96 36 96) 36]
Test Case: 316 | Input/Output: [(89 86 9 47) 9]
Test Case: 317 | Input/Output: [(4 38 52 33) 4]
Test Case: 318 | Input/Output: [(11 6 36 26) 6]
Test Case: 319 | Input/Output: [(25 25 89 55) 25]
Test Case: 320 | Input/Output: [(38 10 11 99) 10]
Test Case: 321 | Input/Output: [(3 52 48 13) 3]
Test Case: 322 | Input/Output: [(63 6 53 13) 6]
Test Case: 323 | Input/Output: [(17 37 97 73) 17]
Test Case: 324 | Input/Output: [(7 90 95 79) 7]
Test Case: 325 | Input/Output: [(64 85 18 38) 18]
Test Case: 326 | Input/Output: [(10 70 61 6) 6]
Test Case: 327 | Input/Output: [(36 27 53 23) 23]
Test Case: 328 | Input/Output: [(48 46 68 46) 46]
Test Case: 329 | Input/Output: [(14 9 23 12) 9]
Test Case: 330 | Input/Output: [(96 87 85 20) 20]
Test Case: 331 | Input/Output: [(68 97 44 64) 44]
Test Case: 332 | Input/Output: [(63 55 41 38) 38]
Test Case: 333 | Input/Output: [(5 34 13 80) 5]
Test Case: 334 | Input/Output: [(95 100 90 76) 76]
Test Case: 335 | Input/Output: [(23 50 61 13) 13]
Test Case: 336 | Input/Output: [(65 90 24 87) 24]
Test Case: 337 | Input/Output: [(87 29 72 57) 29]
Test Case: 338 | Input/Output: [(19 8 50 76) 8]
Test Case: 339 | Input/Output: [(62 86 67 63) 62]
Test Case: 340 | Input/Output: [(75 85 57 68) 57]
Test Case: 341 | Input/Output: [(80 0 61 55) 0]
Test Case: 342 | Input/Output: [(96 9 29 69) 9]
Test Case: 343 | Input/Output: [(57 98 2 6) 2]
Test Case: 344 | Input/Output: [(33 85 33 94) 33]
Test Case: 345 | Input/Output: [(0 45 18 74) 0]
Test Case: 346 | Input/Output: [(38 27 21 21) 21]
Test Case: 347 | Input/Output: [(22 93 44 39) 22]
Test Case: 348 | Input/Output: [(31 20 98 14) 14]
Test Case: 349 | Input/Output: [(23 62 66 36) 23]
Test Case: 350 | Input/Output: [(34 39 62 1) 1]
Test Case: 351 | Input/Output: [(14 6 88 81) 6]
Test Case: 352 | Input/Output: [(42 46 98 18) 18]
Test Case: 353 | Input/Output: [(59 87 71 85) 59]
Test Case: 354 | Input/Output: [(21 43 100 69) 21]
Test Case: 355 | Input/Output: [(42 3 37 18) 3]
Test Case: 356 | Input/Output: [(37 60 27 81) 27]
Test Case: 357 | Input/Output: [(100 34 98 45) 34]
Test Case: 358 | Input/Output: [(43 82 25 99) 25]
Test Case: 359 | Input/Output: [(55 96 18 15) 15]
Test Case: 360 | Input/Output: [(95 54 53 86) 53]
Test Case: 361 | Input/Output: [(29 16 18 91) 16]
Test Case: 362 | Input/Output: [(6 4 32 39) 4]
Test Case: 363 | Input/Output: [(37 54 0 92) 0]
Test Case: 364 | Input/Output: [(35 51 89 10) 10]
Test Case: 365 | Input/Output: [(90 90 71 14) 14]
Test Case: 366 | Input/Output: [(31 47 57 44) 31]
Test Case: 367 | Input/Output: [(77 61 91 31) 31]
Test Case: 368 | Input/Output: [(75 63 33 9) 9]
Test Case: 369 | Input/Output: [(9 19 12 82) 9]
Test Case: 370 | Input/Output: [(87 49 22 6) 6]
Test Case: 371 | Input/Output: [(28 10 41 15) 10]
Test Case: 372 | Input/Output: [(17 2 51 42) 2]
Test Case: 373 | Input/Output: [(74 21 90 52) 21]
Test Case: 374 | Input/Output: [(15 34 86 23) 15]
Test Case: 375 | Input/Output: [(20 89 45 66) 20]
Test Case: 376 | Input/Output: [(81 60 83 44) 44]
Test Case: 377 | Input/Output: [(62 38 2 24) 2]
Test Case: 378 | Input/Output: [(78 85 85 76) 76]
Test Case: 379 | Input/Output: [(81 17 80 64) 17]
Test Case: 380 | Input/Output: [(60 48 19 6) 6]
Test Case: 381 | Input/Output: [(100 32 72 78) 32]
Test Case: 382 | Input/Output: [(3 49 60 8) 3]
Test Case: 383 | Input/Output: [(68 65 54 40) 40]
Test Case: 384 | Input/Output: [(15 96 29 93) 15]
Test Case: 385 | Input/Output: [(16 92 7 81) 7]
Test Case: 386 | Input/Output: [(72 73 7 71) 7]
Test Case: 387 | Input/Output: [(57 85 16 34) 16]
Test Case: 388 | Input/Output: [(20 13 36 71) 13]
Test Case: 389 | Input/Output: [(11 66 35 65) 11]
Test Case: 390 | Input/Output: [(20 59 91 12) 12]
Test Case: 391 | Input/Output: [(63 40 92 14) 14]
Test Case: 392 | Input/Output: [(100 22 61 33) 22]
Test Case: 393 | Input/Output: [(20 67 73 42) 20]
Test Case: 394 | Input/Output: [(30 12 99 60) 12]
Test Case: 395 | Input/Output: [(54 89 87 65) 54]
Test Case: 396 | Input/Output: [(64 72 62 94) 62]
Test Case: 397 | Input/Output: [(55 82 0 41) 0]
Test Case: 398 | Input/Output: [(77 38 8 41) 8]
Test Case: 399 | Input/Output: [(30 0 84 53) 0]
Test Case: 400 | Input/Output: [(55 -95 9 35) -95]
Test Case: 401 | Input/Output: [(-11 87 -52 -36) -52]
Test Case: 402 | Input/Output: [(56 62 -83 1) -83]
Test Case: 403 | Input/Output: [(-61 -36 -80 -80) -80]
Test Case: 404 | Input/Output: [(66 -29 -65 28) -65]
Test Case: 405 | Input/Output: [(-39 -61 -44 8) -61]
Test Case: 406 | Input/Output: [(-9 -66 -23 33) -66]
Test Case: 407 | Input/Output: [(-35 62 -77 47) -77]
Test Case: 408 | Input/Output: [(-73 83 -76 81) -76]
Test Case: 409 | Input/Output: [(-64 -75 83 -14) -75]
Test Case: 410 | Input/Output: [(55 -30 7 9) -30]
Test Case: 411 | Input/Output: [(-8 -34 55 14) -34]
Test Case: 412 | Input/Output: [(82 9 97 -62) -62]
Test Case: 413 | Input/Output: [(-98 -80 76 -53) -98]
Test Case: 414 | Input/Output: [(16 41 -93 -5) -93]
Test Case: 415 | Input/Output: [(-56 -7 -79 -7) -79]
Test Case: 416 | Input/Output: [(58 -63 18 51) -63]
Test Case: 417 | Input/Output: [(87 42 51 -99) -99]
Test Case: 418 | Input/Output: [(-99 41 -17 7) -99]
Test Case: 419 | Input/Output: [(-69 85 89 -98) -98]
Test Case: 420 | Input/Output: [(-81 33 34 -46) -81]
Test Case: 421 | Input/Output: [(33 9 19 -2) -2]
Test Case: 422 | Input/Output: [(-29 -2 47 -52) -52]
Test Case: 423 | Input/Output: [(-57 -47 29 -8) -57]
Test Case: 424 | Input/Output: [(57 -29 0 82) -29]
Test Case: 425 | Input/Output: [(-26 -66 26 51) -66]
Test Case: 426 | Input/Output: [(-97 -24 50 -10) -97]
Test Case: 427 | Input/Output: [(-80 -68 -46 29) -80]
Test Case: 428 | Input/Output: [(-49 -72 80 -70) -72]
Test Case: 429 | Input/Output: [(1 4 17 37) 1]
Test Case: 430 | Input/Output: [(-39 -15 -40 64) -40]
Test Case: 431 | Input/Output: [(-38 -9 15 54) -38]
Test Case: 432 | Input/Output: [(-39 2 -67 41) -67]
Test Case: 433 | Input/Output: [(-78 22 52 -72) -78]
Test Case: 434 | Input/Output: [(-73 -1 -12 -90) -90]
Test Case: 435 | Input/Output: [(98 -99 -42 91) -99]
Test Case: 436 | Input/Output: [(-10 -50 -3 96) -50]
Test Case: 437 | Input/Output: [(-2 86 -5 -30) -30]
Test Case: 438 | Input/Output: [(-86 -85 1 -23) -86]
Test Case: 439 | Input/Output: [(-58 -6 -81 -86) -86]
Test Case: 440 | Input/Output: [(-23 76 40 -11) -23]
Test Case: 441 | Input/Output: [(84 84 58 2) 2]
Test Case: 442 | Input/Output: [(-25 -62 -93 -40) -93]
Test Case: 443 | Input/Output: [(-3 69 13 71) -3]
Test Case: 444 | Input/Output: [(52 67 -68 -82) -82]
Test Case: 445 | Input/Output: [(-87 17 87 -98) -98]
Test Case: 446 | Input/Output: [(-4 7 -76 1) -76]
Test Case: 447 | Input/Output: [(7 -55 -34 -23) -55]
Test Case: 448 | Input/Output: [(-34 -69 10 -81) -81]
Test Case: 449 | Input/Output: [(-38 81 -72 24) -72]
Test Case: 450 | Input/Output: [(-90 -90 7 -90) -90]
Test Case: 451 | Input/Output: [(34 -85 93 -32) -85]
Test Case: 452 | Input/Output: [(-72 -35 -41 46) -72]
Test Case: 453 | Input/Output: [(-97 17 -60 43) -97]
Test Case: 454 | Input/Output: [(97 -19 -44 -88) -88]
Test Case: 455 | Input/Output: [(53 51 -86 19) -86]
Test Case: 456 | Input/Output: [(92 25 16 -84) -84]
Test Case: 457 | Input/Output: [(-69 59 -51 -76) -76]
Test Case: 458 | Input/Output: [(53 -35 -4 -12) -35]
Test Case: 459 | Input/Output: [(88 2 16 13) 2]
Test Case: 460 | Input/Output: [(-99 -2 42 47) -99]
Test Case: 461 | Input/Output: [(55 -27 -30 -1) -30]
Test Case: 462 | Input/Output: [(86 -18 -83 -2) -83]
Test Case: 463 | Input/Output: [(-38 -9 -37 -33) -38]
Test Case: 464 | Input/Output: [(-58 30 83 56) -58]
Test Case: 465 | Input/Output: [(24 -41 -21 -21) -41]
Test Case: 466 | Input/Output: [(-83 -64 36 67) -83]
Test Case: 467 | Input/Output: [(24 -69 -1 -18) -69]
Test Case: 468 | Input/Output: [(-32 65 89 62) -32]
Test Case: 469 | Input/Output: [(43 -15 -63 -21) -63]
Test Case: 470 | Input/Output: [(93 -44 -18 -71) -71]
Test Case: 471 | Input/Output: [(77 86 100 12) 12]
Test Case: 472 | Input/Output: [(24 82 56 -100) -100]
Test Case: 473 | Input/Output: [(21 -81 28 69) -81]
Test Case: 474 | Input/Output: [(-21 95 98 0) -21]
Test Case: 475 | Input/Output: [(28 -31 -61 -69) -69]
Test Case: 476 | Input/Output: [(-89 -44 -89 -29) -89]
Test Case: 477 | Input/Output: [(58 -14 83 -98) -98]
Test Case: 478 | Input/Output: [(-1 -70 68 75) -70]
Test Case: 479 | Input/Output: [(-59 -60 19 68) -60]
Test Case: 480 | Input/Output: [(50 27 -34 10) -34]
Test Case: 481 | Input/Output: [(15 5 -75 -57) -75]
Test Case: 482 | Input/Output: [(98 71 -35 21) -35]
Test Case: 483 | Input/Output: [(-28 -68 5 -36) -68]
Test Case: 484 | Input/Output: [(42 88 69 97) 42]
Test Case: 485 | Input/Output: [(12 69 -73 12) -73]
Test Case: 486 | Input/Output: [(42 -100 38 -51) -100]
Test Case: 487 | Input/Output: [(46 -88 46 -19) -88]
Test Case: 488 | Input/Output: [(-73 33 85 74) -73]
Test Case: 489 | Input/Output: [(-49 2 64 -39) -49]
Test Case: 490 | Input/Output: [(-52 -39 -3 -59) -59]
Test Case: 491 | Input/Output: [(-26 -35 59 28) -35]
Test Case: 492 | Input/Output: [(-64 70 50 7) -64]
Test Case: 493 | Input/Output: [(-26 34 17 16) -26]
Test Case: 494 | Input/Output: [(16 70 1 8) 1]
Test Case: 495 | Input/Output: [(-10 32 58 46) -10]
Test Case: 496 | Input/Output: [(57 -29 49 -85) -85]
Test Case: 497 | Input/Output: [(-77 61 83 -23) -77]
Test Case: 498 | Input/Output: [(-64 40 -37 71) -64]
Test Case: 499 | Input/Output: [(-27 18 26 -65) -65]
Test Case: 500 | Input/Output: [(-7 15 -23 74) -23]
Test Case: 501 | Input/Output: [(0 -65 82 -76) -76]
Test Case: 502 | Input/Output: [(91 85 -73 50) -73]
Test Case: 503 | Input/Output: [(-68 -77 99 35) -77]
Test Case: 504 | Input/Output: [(-65 92 60 74) -65]
Test Case: 505 | Input/Output: [(88 86 16 65) 16]
Test Case: 506 | Input/Output: [(-46 -49 88 0) -49]
Test Case: 507 | Input/Output: [(-11 -97 88 -32) -97]
Test Case: 508 | Input/Output: [(25 5 -14 -40) -40]
Test Case: 509 | Input/Output: [(73 19 -93 -50) -93]
Test Case: 510 | Input/Output: [(61 -99 41 5) -99]
Test Case: 511 | Input/Output: [(34 -19 37 79) -19]
Test Case: 512 | Input/Output: [(30 66 -17 -42) -42]
Test Case: 513 | Input/Output: [(-19 67 -6 99) -19]
Test Case: 514 | Input/Output: [(74 57 -73 -85) -85]
Test Case: 515 | Input/Output: [(74 52 -77 -76) -77]
Test Case: 516 | Input/Output: [(-90 5 76 92) -90]
Test Case: 517 | Input/Output: [(46 40 -12 5) -12]
Test Case: 518 | Input/Output: [(-68 -98 52 36) -98]
Test Case: 519 | Input/Output: [(-17 -90 57 -67) -90]
Test Case: 520 | Input/Output: [(13 25 74 72) 13]
Test Case: 521 | Input/Output: [(54 -58 -61 -86) -86]
Test Case: 522 | Input/Output: [(35 -83 -28 -83) -83]
Test Case: 523 | Input/Output: [(-65 -87 2 -76) -87]
Test Case: 524 | Input/Output: [(-98 -5 -41 57) -98]
Test Case: 525 | Input/Output: [(-24 -55 -90 -89) -90]
Test Case: 526 | Input/Output: [(20 9 -66 62) -66]
Test Case: 527 | Input/Output: [(53 -67 11 27) -67]
Test Case: 528 | Input/Output: [(-54 40 20 -36) -54]
Test Case: 529 | Input/Output: [(-85 8 84 -79) -85]
Test Case: 530 | Input/Output: [(-89 -80 -23 -15) -89]
Test Case: 531 | Input/Output: [(-24 30 50 -36) -36]
Test Case: 532 | Input/Output: [(-91 -48 26 78) -91]
Test Case: 533 | Input/Output: [(-28 24 -29 -57) -57]
Test Case: 534 | Input/Output: [(23 -43 -57 -15) -57]
Test Case: 535 | Input/Output: [(-20 -67 65 -73) -73]
Test Case: 536 | Input/Output: [(1 70 73 30) 1]
Test Case: 537 | Input/Output: [(-82 -41 -84 -24) -84]
Test Case: 538 | Input/Output: [(97 -45 13 84) -45]
Test Case: 539 | Input/Output: [(-85 -20 -14 -63) -85]
Test Case: 540 | Input/Output: [(-52 99 75 57) -52]
Test Case: 541 | Input/Output: [(82 51 72 53) 51]
Test Case: 542 | Input/Output: [(22 -5 73 32) -5]
Test Case: 543 | Input/Output: [(54 -6 76 44) -6]
Test Case: 544 | Input/Output: [(76 -1 -4 -80) -80]
Test Case: 545 | Input/Output: [(73 -82 -35 76) -82]
Test Case: 546 | Input/Output: [(-73 84 -51 -87) -87]
Test Case: 547 | Input/Output: [(81 98 -65 57) -65]
Test Case: 548 | Input/Output: [(-14 43 -92 46) -92]
Test Case: 549 | Input/Output: [(-72 -43 64 45) -72]
Test Case: 550 | Input/Output: [(25 39 -81 31) -81]
Test Case: 551 | Input/Output: [(23 -54 43 12) -54]
Test Case: 552 | Input/Output: [(11 -12 -32 70) -32]
Test Case: 553 | Input/Output: [(-3 -72 -77 24) -77]
Test Case: 554 | Input/Output: [(-22 -5 99 2) -22]
Test Case: 555 | Input/Output: [(-33 98 -52 -35) -52]
Test Case: 556 | Input/Output: [(-66 63 -47 -43) -66]
Test Case: 557 | Input/Output: [(-70 66 2 17) -70]
Test Case: 558 | Input/Output: [(52 43 98 -27) -27]
Test Case: 559 | Input/Output: [(-54 45 -97 -27) -97]
Test Case: 560 | Input/Output: [(-68 77 57 -99) -99]
Test Case: 561 | Input/Output: [(-75 51 90 -30) -75]
Test Case: 562 | Input/Output: [(67 -59 -18 -9) -59]
Test Case: 563 | Input/Output: [(27 58 -95 94) -95]
Test Case: 564 | Input/Output: [(-7 -8 48 -68) -68]
Test Case: 565 | Input/Output: [(15 -21 79 88) -21]
Test Case: 566 | Input/Output: [(-41 4 -60 49) -60]
Test Case: 567 | Input/Output: [(-48 33 74 -65) -65]
Test Case: 568 | Input/Output: [(-45 -44 40 -41) -45]
Test Case: 569 | Input/Output: [(60 21 25 75) 21]
Test Case: 570 | Input/Output: [(79 46 -21 23) -21]
Test Case: 571 | Input/Output: [(81 -97 -56 53) -97]
Test Case: 572 | Input/Output: [(-5 -49 61 -95) -95]
Test Case: 573 | Input/Output: [(-35 -11 -8 20) -35]
Test Case: 574 | Input/Output: [(57 -63 2 32) -63]
Test Case: 575 | Input/Output: [(65 23 89 36) 23]
Test Case: 576 | Input/Output: [(-33 -18 -98 -73) -98]
Test Case: 577 | Input/Output: [(91 -86 1 75) -86]
Test Case: 578 | Input/Output: [(-35 -5 -7 -38) -38]
Test Case: 579 | Input/Output: [(94 19 33 80) 19]
Test Case: 580 | Input/Output: [(-71 78 27 70) -71]
Test Case: 581 | Input/Output: [(-79 -3 68 32) -79]
Test Case: 582 | Input/Output: [(-73 -87 -98 16) -98]
Test Case: 583 | Input/Output: [(11 27 98 25) 11]
Test Case: 584 | Input/Output: [(45 97 -81 71) -81]
Test Case: 585 | Input/Output: [(55 42 78 -91) -91]
Test Case: 586 | Input/Output: [(90 -63 -84 70) -84]
Test Case: 587 | Input/Output: [(76 -85 51 10) -85]
Test Case: 588 | Input/Output: [(42 -12 65 56) -12]
Test Case: 589 | Input/Output: [(7 14 -93 -98) -98]
Test Case: 590 | Input/Output: [(1 -16 -95 -3) -95]
Test Case: 591 | Input/Output: [(-87 -20 70 -61) -87]
Test Case: 592 | Input/Output: [(88 -36 -47 58) -47]
Test Case: 593 | Input/Output: [(73 -92 -100 69) -100]
Test Case: 594 | Input/Output: [(74 89 43 -18) -18]
Test Case: 595 | Input/Output: [(-90 -97 -35 -82) -97]
Test Case: 596 | Input/Output: [(-66 71 57 -45) -66]
Test Case: 597 | Input/Output: [(78 72 38 34) 34]
Test Case: 598 | Input/Output: [(37 71 -21 -78) -78]
Test Case: 599 | Input/Output: [(-69 15 57 -24) -69]
Test Case: 600 | Input/Output: [(-95 -40 -63 77) -95]
Test Case: 601 | Input/Output: [(98 -21 -61 28) -61]
Test Case: 602 | Input/Output: [(51 13 30 100) 13]
Test Case: 603 | Input/Output: [(-10 11 84 91) -10]
Test Case: 604 | Input/Output: [(56 34 -77 76) -77]
Test Case: 605 | Input/Output: [(43 47 58 -83) -83]
Test Case: 606 | Input/Output: [(-9 81 100 -41) -41]
Test Case: 607 | Input/Output: [(-55 -87 -10 23) -87]
Test Case: 608 | Input/Output: [(93 54 -29 -97) -97]
Test Case: 609 | Input/Output: [(-42 24 51 -20) -42]
Test Case: 610 | Input/Output: [(9 77 28 -58) -58]
Test Case: 611 | Input/Output: [(-6 -71 94 -78) -78]
Test Case: 612 | Input/Output: [(91 -99 -70 -11) -99]
Test Case: 613 | Input/Output: [(-77 51 -99 85) -99]
Test Case: 614 | Input/Output: [(-50 25 -35 -59) -59]
Test Case: 615 | Input/Output: [(-92 -87 -63 25) -92]
Test Case: 616 | Input/Output: [(-61 10 -13 70) -61]
Test Case: 617 | Input/Output: [(-84 -53 -50 66) -84]
Test Case: 618 | Input/Output: [(-78 -79 -46 -24) -79]
Test Case: 619 | Input/Output: [(-26 -88 1 98) -88]
Test Case: 620 | Input/Output: [(-22 -47 -14 -74) -74]
Test Case: 621 | Input/Output: [(49 92 -99 -67) -99]
Test Case: 622 | Input/Output: [(87 -30 90 14) -30]
Test Case: 623 | Input/Output: [(53 -17 98 48) -17]
Test Case: 624 | Input/Output: [(71 -73 -54 82) -73]
Test Case: 625 | Input/Output: [(-7 78 -47 -79) -79]
Test Case: 626 | Input/Output: [(15 21 -53 19) -53]
Test Case: 627 | Input/Output: [(45 -50 -91 33) -91]
Test Case: 628 | Input/Output: [(50 58 19 -66) -66]
Test Case: 629 | Input/Output: [(91 -55 42 26) -55]
Test Case: 630 | Input/Output: [(26 45 -13 95) -13]
Test Case: 631 | Input/Output: [(72 -17 -77 -53) -77]
Test Case: 632 | Input/Output: [(-56 -22 -73 -60) -73]
Test Case: 633 | Input/Output: [(-96 -79 -32 -77) -96]
Test Case: 634 | Input/Output: [(-38 -79 -64 38) -79]
Test Case: 635 | Input/Output: [(-34 51 -79 16) -79]
Test Case: 636 | Input/Output: [(73 97 -42 -20) -42]
Test Case: 637 | Input/Output: [(-16 4 56 -86) -86]
Test Case: 638 | Input/Output: [(-15 -57 14 66) -57]
Test Case: 639 | Input/Output: [(96 -64 -87 26) -87]
Test Case: 640 | Input/Output: [(-7 -39 96 -5) -39]
Test Case: 641 | Input/Output: [(-18 14 -4 -25) -25]
Test Case: 642 | Input/Output: [(86 -92 77 0) -92]
Test Case: 643 | Input/Output: [(-53 -18 -100 69) -100]
Test Case: 644 | Input/Output: [(53 73 -77 -94) -94]
Test Case: 645 | Input/Output: [(-39 22 -7 -68) -68]
Test Case: 646 | Input/Output: [(9 -48 -63 -39) -63]
Test Case: 647 | Input/Output: [(34 20 -83 -24) -83]
Test Case: 648 | Input/Output: [(-20 -7 2 -25) -25]
Test Case: 649 | Input/Output: [(-15 54 -63 18) -63]
Test Case: 650 | Input/Output: [(25 65 -39 8) -39]
Test Case: 651 | Input/Output: [(-10 31 20 -78) -78]
Test Case: 652 | Input/Output: [(-48 -74 16 -91) -91]
Test Case: 653 | Input/Output: [(1 100 14 50) 1]
Test Case: 654 | Input/Output: [(6 35 14 66) 6]
Test Case: 655 | Input/Output: [(48 88 26 -44) -44]
Test Case: 656 | Input/Output: [(-97 -67 94 4) -97]
Test Case: 657 | Input/Output: [(-94 -85 5 26) -94]
Test Case: 658 | Input/Output: [(97 92 27 -40) -40]
Test Case: 659 | Input/Output: [(14 89 -34 -66) -66]
Test Case: 660 | Input/Output: [(-86 -62 -49 97) -86]
Test Case: 661 | Input/Output: [(4 -39 -9 -16) -39]
Test Case: 662 | Input/Output: [(70 38 -29 52) -29]
Test Case: 663 | Input/Output: [(-34 17 -35 -84) -84]
Test Case: 664 | Input/Output: [(45 -35 73 -84) -84]
Test Case: 665 | Input/Output: [(-13 49 -1 -82) -82]
Test Case: 666 | Input/Output: [(-46 -86 -76 21) -86]
Test Case: 667 | Input/Output: [(-85 -3 -12 27) -85]
Test Case: 668 | Input/Output: [(93 -98 99 59) -98]
Test Case: 669 | Input/Output: [(16 -23 -44 60) -44]
Test Case: 670 | Input/Output: [(-100 3 -6 -8) -100]
Test Case: 671 | Input/Output: [(46 57 -14 5) -14]
Test Case: 672 | Input/Output: [(-50 34 -3 -16) -50]
Test Case: 673 | Input/Output: [(85 -2 26 16) -2]
Test Case: 674 | Input/Output: [(42 100 -95 25) -95]
Test Case: 675 | Input/Output: [(-29 -4 -64 66) -64]
Test Case: 676 | Input/Output: [(59 -91 95 -28) -91]
Test Case: 677 | Input/Output: [(-75 -62 16 -40) -75]
Test Case: 678 | Input/Output: [(-18 -28 -33 -96) -96]
Test Case: 679 | Input/Output: [(88 -74 79 94) -74]
Test Case: 680 | Input/Output: [(52 0 71 8) 0]
Test Case: 681 | Input/Output: [(72 13 -31 41) -31]
Test Case: 682 | Input/Output: [(-88 -7 -63 -50) -88]
Test Case: 683 | Input/Output: [(-15 57 -71 100) -71]
Test Case: 684 | Input/Output: [(-16 -34 -37 38) -37]
Test Case: 685 | Input/Output: [(77 -94 58 89) -94]
Test Case: 686 | Input/Output: [(-19 37 -77 99) -77]
Test Case: 687 | Input/Output: [(41 8 -60 13) -60]
Test Case: 688 | Input/Output: [(43 -27 -55 -62) -62]
Test Case: 689 | Input/Output: [(-6 40 -3 -30) -30]
Test Case: 690 | Input/Output: [(8 -37 -5 -27) -37]
Test Case: 691 | Input/Output: [(-45 50 -8 91) -45]
Test Case: 692 | Input/Output: [(59 -18 28 -35) -35]
Test Case: 693 | Input/Output: [(-34 4 -72 -30) -72]
Test Case: 694 | Input/Output: [(68 -33 26 58) -33]
Test Case: 695 | Input/Output: [(-60 74 65 63) -60]
Test Case: 696 | Input/Output: [(47 -80 89 -24) -80]
Test Case: 697 | Input/Output: [(91 21 84 -2) -2]
Test Case: 698 | Input/Output: [(62 82 -42 -24) -42]
Test Case: 699 | Input/Output: [(87 71 55 77) 55]
Test Case: 700 | Input/Output: [(76 16 99 -65) -65]
Test Case: 701 | Input/Output: [(18 -64 -37 86) -64]
Test Case: 702 | Input/Output: [(56 65 1 56) 1]
Test Case: 703 | Input/Output: [(-69 29 100 -54) -69]
Test Case: 704 | Input/Output: [(-89 28 -7 2) -89]
Test Case: 705 | Input/Output: [(13 -5 -55 76) -55]
Test Case: 706 | Input/Output: [(47 -50 45 -32) -50]
Test Case: 707 | Input/Output: [(78 62 70 39) 39]
Test Case: 708 | Input/Output: [(-81 7 40 3) -81]
Test Case: 709 | Input/Output: [(88 -58 18 91) -58]
Test Case: 710 | Input/Output: [(-93 59 -98 72) -98]
Test Case: 711 | Input/Output: [(-99 -34 80 49) -99]
Test Case: 712 | Input/Output: [(-78 -52 75 20) -78]
Test Case: 713 | Input/Output: [(23 64 -49 -53) -53]
Test Case: 714 | Input/Output: [(-73 -88 -19 -72) -88]
Test Case: 715 | Input/Output: [(67 44 47 -66) -66]
Test Case: 716 | Input/Output: [(19 -60 100 69) -60]
Test Case: 717 | Input/Output: [(-84 -43 52 81) -84]
Test Case: 718 | Input/Output: [(43 -15 -88 -67) -88]
Test Case: 719 | Input/Output: [(-41 -75 75 -99) -99]
Test Case: 720 | Input/Output: [(-7 6 -57 -82) -82]
Test Case: 721 | Input/Output: [(71 28 -39 58) -39]
Test Case: 722 | Input/Output: [(-26 60 54 49) -26]
Test Case: 723 | Input/Output: [(-5 -48 -56 -28) -56]
Test Case: 724 | Input/Output: [(50 63 28 55) 28]
Test Case: 725 | Input/Output: [(8 -60 -28 -76) -76]
Test Case: 726 | Input/Output: [(46 60 -95 -72) -95]
Test Case: 727 | Input/Output: [(-19 -65 -43 4) -65]
Test Case: 728 | Input/Output: [(68 -2 -15 38) -15]
Test Case: 729 | Input/Output: [(-99 55 -39 -53) -99]
Test Case: 730 | Input/Output: [(38 1 79 53) 1]
Test Case: 731 | Input/Output: [(-70 -41 42 -18) -70]
Test Case: 732 | Input/Output: [(-32 -60 63 -81) -81]
Test Case: 733 | Input/Output: [(75 15 -70 30) -70]
Test Case: 734 | Input/Output: [(65 -33 3 68) -33]
Test Case: 735 | Input/Output: [(0 27 -96 -21) -96]
Test Case: 736 | Input/Output: [(30 -65 12 -84) -84]
Test Case: 737 | Input/Output: [(64 -33 81 -61) -61]
Test Case: 738 | Input/Output: [(11 31 82 -70) -70]
Test Case: 739 | Input/Output: [(-7 32 100 -18) -18]
Test Case: 740 | Input/Output: [(47 19 56 49) 19]
Test Case: 741 | Input/Output: [(-56 97 90 74) -56]
Test Case: 742 | Input/Output: [(45 -11 60 89) -11]
Test Case: 743 | Input/Output: [(64 6 7 60) 6]
Test Case: 744 | Input/Output: [(-6 55 -29 -18) -29]
Test Case: 745 | Input/Output: [(93 -2 -94 -23) -94]
Test Case: 746 | Input/Output: [(64 48 56 -56) -56]
Test Case: 747 | Input/Output: [(31 -72 -83 -34) -83]
Test Case: 748 | Input/Output: [(87 22 -93 73) -93]
Test Case: 749 | Input/Output: [(-15 58 87 -86) -86]
Test Case: 750 | Input/Output: [(12 87 -48 -31) -48]
Test Case: 751 | Input/Output: [(54 80 -18 -87) -87]
Test Case: 752 | Input/Output: [(47 -97 83 87) -97]
Test Case: 753 | Input/Output: [(-20 21 -88 80) -88]
Test Case: 754 | Input/Output: [(-88 -53 -55 -27) -88]
Test Case: 755 | Input/Output: [(-100 -85 -19 91) -100]
Test Case: 756 | Input/Output: [(-23 -73 66 -58) -73]
Test Case: 757 | Input/Output: [(4 -35 -15 -16) -35]
Test Case: 758 | Input/Output: [(20 -70 -53 -52) -70]
Test Case: 759 | Input/Output: [(75 71 6 43) 6]
Test Case: 760 | Input/Output: [(29 1 -53 -59) -59]
Test Case: 761 | Input/Output: [(-17 55 87 28) -17]
Test Case: 762 | Input/Output: [(55 32 54 -44) -44]
Test Case: 763 | Input/Output: [(-63 0 13 30) -63]
Test Case: 764 | Input/Output: [(-79 12 -45 50) -79]
Test Case: 765 | Input/Output: [(-69 -14 45 -3) -69]
Test Case: 766 | Input/Output: [(-96 56 -24 -11) -96]
Test Case: 767 | Input/Output: [(53 -59 -87 12) -87]
Test Case: 768 | Input/Output: [(-47 77 50 -46) -47]
Test Case: 769 | Input/Output: [(-90 24 88 -76) -90]
Test Case: 770 | Input/Output: [(-74 -69 83 1) -74]
Test Case: 771 | Input/Output: [(92 54 -62 -82) -82]
Test Case: 772 | Input/Output: [(1 -98 -28 3) -98]
Test Case: 773 | Input/Output: [(84 60 -70 -5) -70]
Test Case: 774 | Input/Output: [(19 23 -86 -10) -86]
Test Case: 775 | Input/Output: [(-46 94 95 -61) -61]
Test Case: 776 | Input/Output: [(48 70 -75 -38) -75]
Test Case: 777 | Input/Output: [(-17 95 97 -55) -55]
Test Case: 778 | Input/Output: [(-18 73 -40 -13) -40]
Test Case: 779 | Input/Output: [(-84 74 81 6) -84]
Test Case: 780 | Input/Output: [(-81 16 22 48) -81]
Test Case: 781 | Input/Output: [(-77 23 -53 -97) -97]
Test Case: 782 | Input/Output: [(-23 6 81 -51) -51]
Test Case: 783 | Input/Output: [(0 35 -17 -54) -54]
Test Case: 784 | Input/Output: [(92 42 -16 15) -16]
Test Case: 785 | Input/Output: [(78 -97 -16 21) -97]
Test Case: 786 | Input/Output: [(-83 58 -57 48) -83]
Test Case: 787 | Input/Output: [(-97 30 -42 0) -97]
Test Case: 788 | Input/Output: [(-76 -64 -8 -95) -95]
Test Case: 789 | Input/Output: [(-11 -39 -89 -85) -89]
Test Case: 790 | Input/Output: [(6 -96 81 2) -96]
Test Case: 791 | Input/Output: [(-77 -78 67 15) -78]
Test Case: 792 | Input/Output: [(-41 74 -50 -64) -64]
Test Case: 793 | Input/Output: [(-49 72 -6 13) -49]
Test Case: 794 | Input/Output: [(89 20 -75 15) -75]
Test Case: 795 | Input/Output: [(-16 -2 79 -27) -27]
Test Case: 796 | Input/Output: [(-75 -77 -14 -81) -81]
Test Case: 797 | Input/Output: [(-28 -51 -15 64) -51]
Test Case: 798 | Input/Output: [(58 -56 -77 95) -77]
Test Case: 799 | Input/Output: [(-57 92 63 -3) -57]
Test Case: 800 | Input/Output: [(59 -89 71 -5) -89]
Test Case: 801 | Input/Output: [(-27 56 41 -77) -77]
Test Case: 802 | Input/Output: [(46 -4 100 9) -4]
Test Case: 803 | Input/Output: [(-5 -37 27 -93) -93]
Test Case: 804 | Input/Output: [(92 83 -93 -41) -93]
Test Case: 805 | Input/Output: [(-69 10 -31 91) -69]
Test Case: 806 | Input/Output: [(-21 -29 54 34) -29]
Test Case: 807 | Input/Output: [(-86 14 -24 -41) -86]
Test Case: 808 | Input/Output: [(-14 83 84 -100) -100]
Test Case: 809 | Input/Output: [(-96 10 37 -25) -96]
Test Case: 810 | Input/Output: [(13 -80 -90 28) -90]
Test Case: 811 | Input/Output: [(87 67 42 0) 0]
Test Case: 812 | Input/Output: [(-65 83 59 -79) -79]
Test Case: 813 | Input/Output: [(57 -25 100 -34) -34]
Test Case: 814 | Input/Output: [(22 58 13 -80) -80]
Test Case: 815 | Input/Output: [(6 -8 -65 67) -65]
Test Case: 816 | Input/Output: [(67 -49 100 -57) -57]
Test Case: 817 | Input/Output: [(45 63 -44 -18) -44]
Test Case: 818 | Input/Output: [(-79 91 51 -67) -79]
Test Case: 819 | Input/Output: [(30 -15 36 -81) -81]
Test Case: 820 | Input/Output: [(-35 -26 93 0) -35]
Test Case: 821 | Input/Output: [(8 2 -36 -32) -36]
Test Case: 822 | Input/Output: [(34 -50 -58 -17) -58]
Test Case: 823 | Input/Output: [(-55 34 97 65) -55]
Test Case: 824 | Input/Output: [(88 -52 85 -25) -52]
Test Case: 825 | Input/Output: [(-33 -84 67 -63) -84]
Test Case: 826 | Input/Output: [(100 -70 67 -3) -70]
Test Case: 827 | Input/Output: [(-100 80 -73 -32) -100]
Test Case: 828 | Input/Output: [(50 100 -80 37) -80]
Test Case: 829 | Input/Output: [(-18 -80 -67 -32) -80]
Test Case: 830 | Input/Output: [(69 22 -77 -8) -77]
Test Case: 831 | Input/Output: [(-34 45 22 -56) -56]
Test Case: 832 | Input/Output: [(-51 -48 -90 -97) -97]
Test Case: 833 | Input/Output: [(-60 -61 -86 76) -86]
Test Case: 834 | Input/Output: [(45 -70 61 58) -70]
Test Case: 835 | Input/Output: [(36 8 -33 -58) -58]
Test Case: 836 | Input/Output: [(39 -61 -23 -34) -61]
Test Case: 837 | Input/Output: [(-89 65 -58 36) -89]
Test Case: 838 | Input/Output: [(72 1 13 -65) -65]
Test Case: 839 | Input/Output: [(17 49 89 69) 17]
Test Case: 840 | Input/Output: [(-27 -11 -14 33) -27]
Test Case: 841 | Input/Output: [(-79 -20 63 22) -79]
Test Case: 842 | Input/Output: [(23 70 -88 99) -88]
Test Case: 843 | Input/Output: [(14 -63 50 81) -63]
Test Case: 844 | Input/Output: [(21 -92 -71 -40) -92]
Test Case: 845 | Input/Output: [(70 23 -96 -38) -96]
Test Case: 846 | Input/Output: [(-2 -58 -41 90) -58]
Test Case: 847 | Input/Output: [(-17 -62 92 59) -62]
Test Case: 848 | Input/Output: [(71 46 69 -80) -80]
Test Case: 849 | Input/Output: [(79 -64 92 -13) -64]
Test Case: 850 | Input/Output: [(68 -35 19 -34) -35]
Test Case: 851 | Input/Output: [(-92 -10 -69 87) -92]
Test Case: 852 | Input/Output: [(41 -30 40 -17) -30]
Test Case: 853 | Input/Output: [(19 -18 -83 61) -83]
Test Case: 854 | Input/Output: [(-1 70 91 -13) -13]
Test Case: 855 | Input/Output: [(74 -94 98 -65) -94]
Test Case: 856 | Input/Output: [(60 15 20 -100) -100]
Test Case: 857 | Input/Output: [(51 37 -27 63) -27]
Test Case: 858 | Input/Output: [(-90 73 17 3) -90]
Test Case: 859 | Input/Output: [(68 8 -39 62) -39]
Test Case: 860 | Input/Output: [(53 43 62 -94) -94]
Test Case: 861 | Input/Output: [(97 -43 -57 75) -57]
Test Case: 862 | Input/Output: [(-57 72 -69 -41) -69]
Test Case: 863 | Input/Output: [(-16 -4 22 7) -16]
Test Case: 864 | Input/Output: [(7 99 -75 63) -75]
Test Case: 865 | Input/Output: [(55 -25 58 51) -25]
Test Case: 866 | Input/Output: [(84 70 -74 72) -74]
Test Case: 867 | Input/Output: [(94 -27 3 73) -27]
Test Case: 868 | Input/Output: [(13 -62 -15 16) -62]
Test Case: 869 | Input/Output: [(-31 67 -27 -98) -98]
Test Case: 870 | Input/Output: [(14 93 -3 -26) -26]
Test Case: 871 | Input/Output: [(58 23 -61 -87) -87]
Test Case: 872 | Input/Output: [(32 -36 -93 -94) -94]
Test Case: 873 | Input/Output: [(27 86 -13 -54) -54]
Test Case: 874 | Input/Output: [(-60 99 72 -21) -60]
Test Case: 875 | Input/Output: [(-70 -54 -9 14) -70]
Test Case: 876 | Input/Output: [(-81 79 -32 80) -81]
Test Case: 877 | Input/Output: [(-75 -37 -65 -98) -98]
Test Case: 878 | Input/Output: [(-48 -15 52 -24) -48]
Test Case: 879 | Input/Output: [(-50 94 -78 50) -78]
Test Case: 880 | Input/Output: [(-57 57 -18 -79) -79]
Test Case: 881 | Input/Output: [(-46 71 28 53) -46]
Test Case: 882 | Input/Output: [(-4 -76 28 -54) -76]
Test Case: 883 | Input/Output: [(-36 6 37 -21) -36]
Test Case: 884 | Input/Output: [(55 -54 -99 94) -99]
Test Case: 885 | Input/Output: [(9 -29 -41 51) -41]
Test Case: 886 | Input/Output: [(51 -42 58 15) -42]
Test Case: 887 | Input/Output: [(5 70 97 20) 5]
Test Case: 888 | Input/Output: [(-100 59 -96 -9) -100]
Test Case: 889 | Input/Output: [(85 -39 45 87) -39]
Test Case: 890 | Input/Output: [(-48 -99 83 -98) -99]
Test Case: 891 | Input/Output: [(94 82 8 -30) -30]
Test Case: 892 | Input/Output: [(-33 16 66 42) -33]
Test Case: 893 | Input/Output: [(65 73 58 76) 58]
Test Case: 894 | Input/Output: [(-29 -31 57 50) -31]
Test Case: 895 | Input/Output: [(-78 -7 -56 -68) -78]
Test Case: 896 | Input/Output: [(-39 -44 11 -25) -44]
Test Case: 897 | Input/Output: [(-81 -71 90 -83) -83]
Test Case: 898 | Input/Output: [(-93 71 -78 -88) -93]
Test Case: 899 | Input/Output: [(-42 -35 -25 -56) -56]
Test Case: 900 | Input/Output: [(66 23 52 9) 9]
Test Case: 901 | Input/Output: [(59 -96 -98 -93) -98]
Test Case: 902 | Input/Output: [(-38 -39 -78 13) -78]
Test Case: 903 | Input/Output: [(-62 -2 -52 71) -62]
Test Case: 904 | Input/Output: [(84 -45 32 90) -45]
Test Case: 905 | Input/Output: [(25 1 -28 -37) -37]
Test Case: 906 | Input/Output: [(-60 17 -32 -21) -60]
Test Case: 907 | Input/Output: [(91 -8 -46 47) -46]
Test Case: 908 | Input/Output: [(-65 12 -81 85) -81]
Test Case: 909 | Input/Output: [(-43 3 -9 15) -43]
Test Case: 910 | Input/Output: [(40 59 -95 20) -95]
Test Case: 911 | Input/Output: [(-52 8 3 -48) -52]
Test Case: 912 | Input/Output: [(47 -40 -56 79) -56]
Test Case: 913 | Input/Output: [(58 36 -70 22) -70]
Test Case: 914 | Input/Output: [(-25 -45 -16 48) -45]
Test Case: 915 | Input/Output: [(58 -25 21 75) -25]
Test Case: 916 | Input/Output: [(-25 10 -28 70) -28]
Test Case: 917 | Input/Output: [(-5 2 -74 -42) -74]
Test Case: 918 | Input/Output: [(-27 -27 64 32) -27]
Test Case: 919 | Input/Output: [(-65 -41 -8 19) -65]
Test Case: 920 | Input/Output: [(-32 33 39 -58) -58]
Test Case: 921 | Input/Output: [(59 66 -100 26) -100]
Test Case: 922 | Input/Output: [(19 -81 83 -40) -81]
Test Case: 923 | Input/Output: [(-73 7 -8 -14) -73]
Test Case: 924 | Input/Output: [(100 -17 20 -26) -26]
Test Case: 925 | Input/Output: [(-57 77 -86 79) -86]
Test Case: 926 | Input/Output: [(63 -51 93 51) -51]
Test Case: 927 | Input/Output: [(34 -61 -75 -80) -80]
Test Case: 928 | Input/Output: [(30 -1 -45 -85) -85]
Test Case: 929 | Input/Output: [(-31 4 89 -78) -78]
Test Case: 930 | Input/Output: [(6 -85 -39 -60) -85]
Test Case: 931 | Input/Output: [(21 66 64 -33) -33]
Test Case: 932 | Input/Output: [(9 97 83 12) 9]
Test Case: 933 | Input/Output: [(-38 -28 49 -80) -80]
Test Case: 934 | Input/Output: [(-18 -97 -89 -88) -97]
Test Case: 935 | Input/Output: [(8 73 -13 96) -13]
Test Case: 936 | Input/Output: [(-25 -10 -72 -84) -84]
Test Case: 937 | Input/Output: [(49 -31 -14 82) -31]
Test Case: 938 | Input/Output: [(39 -68 30 -90) -90]
Test Case: 939 | Input/Output: [(12 -88 15 -36) -88]
Test Case: 940 | Input/Output: [(85 26 79 37) 26]
Test Case: 941 | Input/Output: [(65 -95 24 66) -95]
Test Case: 942 | Input/Output: [(29 -25 10 -2) -25]
Test Case: 943 | Input/Output: [(-47 34 20 31) -47]
Test Case: 944 | Input/Output: [(-83 -80 -49 47) -83]
Test Case: 945 | Input/Output: [(1 -78 -42 -23) -78]
Test Case: 946 | Input/Output: [(15 27 -60 14) -60]
Test Case: 947 | Input/Output: [(52 -100 -36 100) -100]
Test Case: 948 | Input/Output: [(89 -11 -81 55) -81]
Test Case: 949 | Input/Output: [(-13 -99 55 -7) -99]
Test Case: 950 | Input/Output: [(-61 92 -67 -81) -81]
Test Case: 951 | Input/Output: [(35 95 69 -61) -61]
Test Case: 952 | Input/Output: [(-95 -56 20 -7) -95]
Test Case: 953 | Input/Output: [(-17 75 -19 64) -19]
Test Case: 954 | Input/Output: [(72 -87 -40 96) -87]
Test Case: 955 | Input/Output: [(-32 -21 34 -16) -32]
Test Case: 956 | Input/Output: [(78 -69 -63 44) -69]
Test Case: 957 | Input/Output: [(79 74 -11 -35) -35]
Test Case: 958 | Input/Output: [(7 -43 95 38) -43]
Test Case: 959 | Input/Output: [(62 -52 58 -64) -64]
Test Case: 960 | Input/Output: [(0 -40 28 31) -40]
Test Case: 961 | Input/Output: [(53 -72 -30 87) -72]
Test Case: 962 | Input/Output: [(-37 99 -92 80) -92]
Test Case: 963 | Input/Output: [(-36 -63 -76 -82) -82]
Test Case: 964 | Input/Output: [(-23 -17 15 -54) -54]
Test Case: 965 | Input/Output: [(-70 16 -7 27) -70]
Test Case: 966 | Input/Output: [(-34 95 44 -34) -34]
Test Case: 967 | Input/Output: [(56 46 -39 8) -39]
Test Case: 968 | Input/Output: [(8 70 -25 69) -25]
Test Case: 969 | Input/Output: [(41 28 21 -5) -5]
Test Case: 970 | Input/Output: [(30 30 -63 -53) -63]
Test Case: 971 | Input/Output: [(-71 -80 37 40) -80]
Test Case: 972 | Input/Output: [(70 65 97 -95) -95]
Test Case: 973 | Input/Output: [(12 -91 -95 -16) -95]
Test Case: 974 | Input/Output: [(-30 99 11 18) -30]
Test Case: 975 | Input/Output: [(-69 -92 -46 78) -92]
Test Case: 976 | Input/Output: [(-24 74 -49 22) -49]
Test Case: 977 | Input/Output: [(-46 72 -82 34) -82]
Test Case: 978 | Input/Output: [(-67 42 75 -84) -84]
Test Case: 979 | Input/Output: [(-20 13 82 -92) -92]
Test Case: 980 | Input/Output: [(92 -28 17 -66) -66]
Test Case: 981 | Input/Output: [(-27 38 -48 -95) -95]
Test Case: 982 | Input/Output: [(58 -99 94 -31) -99]
Test Case: 983 | Input/Output: [(-81 -100 -31 -18) -100]
Test Case: 984 | Input/Output: [(-52 55 13 78) -52]
Test Case: 985 | Input/Output: [(-1 -18 56 73) -18]
Test Case: 986 | Input/Output: [(-100 42 -32 -46) -100]
Test Case: 987 | Input/Output: [(-98 -10 -68 56) -98]
Test Case: 988 | Input/Output: [(92 -35 -10 98) -35]
Test Case: 989 | Input/Output: [(-45 -62 26 -100) -100]
Test Case: 990 | Input/Output: [(-87 84 86 4) -87]
Test Case: 991 | Input/Output: [(-99 17 80 64) -99]
Test Case: 992 | Input/Output: [(-22 38 23 -69) -69]
Test Case: 993 | Input/Output: [(-44 -56 17 38) -56]
Test Case: 994 | Input/Output: [(-22 66 36 2) -22]
Test Case: 995 | Input/Output: [(23 67 -1 52) -1]
Test Case: 996 | Input/Output: [(89 -81 -5 53) -81]
Test Case: 997 | Input/Output: [(8 26 -84 -76) -84]
Test Case: 998 | Input/Output: [(89 -69 -60 -8) -69]
Test Case: 999 | Input/Output: [(84 63 -77 -50) -77]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:uniform-addition-and-deletion 1.0}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 3000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
random-screen = false
random-seed = 121 123 2 -33 56 8 -41 55 52 -100 11 124 107 -40 -69 31
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[21 21 21 -26] -26] [[-49 99 99 99] -49] [[-56 -88 -88 -88] -88] [[47 -45 47 47] -45] [[86 64 64 64] 64] [[-86 -8 -86 -86] -86] [[89 -42 89 89] -42] [[-85 -14 -85 -85] -85] [[75 75 75 -68] -68] [[61 -16 61 61] -16] [(-11 -11 -11 -11) -11] [(50 50 50 50) 50] [(-1 -1 -1 -1) -1] [(64 64 64 64) 64] [(-85 -85 -85 -85) -85] [(24 57 11 36) 11] [(6 92 76 79) 6] [(38 37 59 61) 37] [(26 48 14 27) 14] [(21 35 33 83) 21] [(92 75 83 59) 59] [(14 71 14 37) 14] [(64 82 51 25) 25] [(44 85 51 26) 26] [(55 87 42 16) 16] [(58 100 86 81) 58] [(72 36 89 82) 36] [(15 73 52 0) 0] [(94 69 92 63) 63] [(3 86 85 84) 3] [(59 93 84 79) 59] [(70 87 80 75) 70] [(85 25 16 41) 16] [(70 5 48 97) 5] [(25 21 73 19) 19] [(-13 -89 -35 -26) -89] [(92 67 9 -30) -30] [(-57 67 69 50) -57] [(-99 100 41 -32) -99] [(19 82 98 57) 19] [(-14 -13 -6 -82) -82] [(56 -86 17 32) -86] [(-64 -84 82 23) -84] [(-94 88 13 32) -94] [(-12 -67 37 80) -67] [(-66 80 12 6) -66] [(-75 -21 70 -90) -90] [(62 91 -22 -33) -33] [(-62 -49 53 -65) -65] [(94 87 -100 -9) -100] [(-16 -62 -77 53) -77] [(-99 88 9 18) -99] [(-90 86 -9 -16) -90] [(-21 98 -30 -20) -30] [(-57 -50 65 33) -57] [(-60 56 -20 -48) -60] [(24 -61 76 56) -61] [(42 90 36 -73) -73] [(-61 45 -8 -71) -71] [(22 74 -33 -6) -33] [(3 -53 -25 -71) -71] [(-15 34 12 10) -15] [(-12 -63 20 -12) -63] [(-64 100 22 45) -64] [(77 5 89 10) 5] [(-50 -36 -40 -86) -86] [(79 -33 -26 -85) -85] [(-64 -45 13 -18) -64] [(-100 56 82 4) -100] [(-52 -1 -15 8) -52] [(-89 76 -32 73) -89] [(30 80 -26 11) -26] [(-54 -48 -17 -8) -54] [(-65 -76 32 35) -76] [(40 -61 -93 -55) -93] [(-77 -80 54 -9) -80] [(-96 -34 1 61) -96] [(7 26 28 -60) -60] [(52 -96 53 -78) -96] [(-14 -96 -74 -11) -96] [(-77 84 -9 -98) -98] [(-19 -49 -96 25) -96] [(43 98 70 -2) -2] [(77 -61 -38 -38) -61] [(-47 42 -24 91) -47] [(-77 27 70 -71) -77] [(30 -59 75 59) -59] [(75 -65 -90 44) -90] [(-10 25 55 50) -10] [(-36 70 -14 -57) -57] [(-8 -19 67 -74) -74] [(-68 64 -66 -96) -96] [(71 82 -70 59) -70] [(-18 -45 -55 -95) -95] [(99 65 -54 16) -54])
uniform-addition-and-deletion-rate = 0.09
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 662
Test mean error for best: 0.66200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -26                 | Program output: 21                 
Correct output: -49                 | Program output: -49                
Correct output: -88                 | Program output: -56                
Correct output: -45                 | Program output: 47                 
Correct output: 64                  | Program output: 86                 
Correct output: -86                 | Program output: -86                
Correct output: -42                 | Program output: 89                 
Correct output: -85                 | Program output: -85                
Correct output: -68                 | Program output: 75                 
Correct output: -16                 | Program output: 61                 
Correct output: -11                 | Program output: -11                
Correct output: 50                  | Program output: 50                 
Correct output: -1                  | Program output: -1                 
Correct output: 64                  | Program output: 64                 
Correct output: -85                 | Program output: -85                
Correct output: 11                  | Program output: 24                 
Correct output: 6                   | Program output: 6                  
Correct output: 37                  | Program output: 38                 
Correct output: 14                  | Program output: 26                 
Correct output: 21                  | Program output: 21                 
Correct output: 59                  | Program output: 92                 
Correct output: 14                  | Program output: 14                 
Correct output: 25                  | Program output: 64                 
Correct output: 26                  | Program output: 44                 
Correct output: 16                  | Program output: 55                 
Correct output: 58                  | Program output: 58                 
Correct output: 36                  | Program output: 72                 
Correct output: 0                   | Program output: 15                 
Correct output: 63                  | Program output: 94                 
Correct output: 3                   | Program output: 3                  
Correct output: 59                  | Program output: 59                 
Correct output: 70                  | Program output: 70                 
Correct output: 16                  | Program output: 85                 
Correct output: 5                   | Program output: 70                 
Correct output: 19                  | Program output: 25                 
Correct output: -89                 | Program output: -13                
Correct output: -30                 | Program output: 92                 
Correct output: -57                 | Program output: -57                
Correct output: -99                 | Program output: -99                
Correct output: 19                  | Program output: 19                 
Correct output: -82                 | Program output: -14                
Correct output: -86                 | Program output: 56                 
Correct output: -84                 | Program output: -64                
Correct output: -94                 | Program output: -94                
Correct output: -67                 | Program output: -12                
Correct output: -66                 | Program output: -66                
Correct output: -90                 | Program output: -75                
Correct output: -33                 | Program output: 62                 
Correct output: -65                 | Program output: -62                
Correct output: -100                | Program output: 94                 
Correct output: -77                 | Program output: -16                
Correct output: -99                 | Program output: -99                
Correct output: -90                 | Program output: -90                
Correct output: -30                 | Program output: -21                
Correct output: -57                 | Program output: -57                
Correct output: -60                 | Program output: -60                
Correct output: -61                 | Program output: 24                 
Correct output: -73                 | Program output: 42                 
Correct output: -71                 | Program output: -61                
Correct output: -33                 | Program output: 22                 
Correct output: -71                 | Program output: 3                  
Correct output: -15                 | Program output: -15                
Correct output: -63                 | Program output: -12                
Correct output: -64                 | Program output: -64                
Correct output: 5                   | Program output: 77                 
Correct output: -86                 | Program output: -50                
Correct output: -85                 | Program output: 79                 
Correct output: -64                 | Program output: -64                
Correct output: -100                | Program output: -100               
Correct output: -52                 | Program output: -52                
Correct output: -89                 | Program output: -89                
Correct output: -26                 | Program output: 30                 
Correct output: -54                 | Program output: -54                
Correct output: -76                 | Program output: -65                
Correct output: -93                 | Program output: 40                 
Correct output: -80                 | Program output: -77                
Correct output: -96                 | Program output: -96                
Correct output: -60                 | Program output: 7                  
Correct output: -96                 | Program output: 52                 
Correct output: -96                 | Program output: -14                
Correct output: -98                 | Program output: -77                
Correct output: -96                 | Program output: -19                
Correct output: -2                  | Program output: 43                 
Correct output: -61                 | Program output: 77                 
Correct output: -47                 | Program output: -47                
Correct output: -77                 | Program output: -77                
Correct output: -59                 | Program output: 30                 
Correct output: -90                 | Program output: 75                 
Correct output: -10                 | Program output: -10                
Correct output: -57                 | Program output: -36                
Correct output: -74                 | Program output: -8                 
Correct output: -96                 | Program output: -68                
Correct output: -70                 | Program output: 71                 
Correct output: -95                 | Program output: -18                
Correct output: -54                 | Program output: 99                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction print_integer} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 1, :instruction integer_div} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_gte} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 1, :instruction tagged_593} {:close 1, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_s} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 1, :instruction exec_eq} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_s} {:close 0, :instruction integer_max} {:close 0, :instruction -88} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction -25} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_dup_times})
Lexicase best program: (print_integer exec_swap (in1 integer_div) (integer_sub integer_gte) exec_do*range () integer_gte exec_rot (tagged_593) (print_integer) (integer_inc exec_s_when_autoconstructing () (integer_dup_times integer_mod exec_s (in2 in1 exec_eq) (print_integer boolean_flush boolean_dup_items exec_do*while (integer_yankdup exec_shove (integer_fromboolean integer_yank exec_do*range (exec_stackdepth boolean_shove exec_s () (integer_max -88 boolean_frominteger integer_rot boolean_stackdepth integer_flush exec_do*while () in3 print_newline boolean_and exec_s_when_autoconstructing (-25 boolean_and exec_rot () (boolean_shove integer_max exec_dup_times (in1 integer_dup_times)) ()) () ()) ())))) ()) ()))
Lexicase best errors: [1 0 0 0 0 0 0 1 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 77
Percent parens: 0.351
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction print_integer} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 1, :instruction integer_div} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_gte} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 1, :instruction tagged_593} {:close 1, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_s} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 1, :instruction exec_eq} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_s} {:close 0, :instruction integer_max} {:close 0, :instruction -88} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction -25} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_dup_times})
Zero cases best program: (print_integer exec_swap (in1 integer_div) (integer_sub integer_gte) exec_do*range () integer_gte exec_rot (tagged_593) (print_integer) (integer_inc exec_s_when_autoconstructing () (integer_dup_times integer_mod exec_s (in2 in1 exec_eq) (print_integer boolean_flush boolean_dup_items exec_do*while (integer_yankdup exec_shove (integer_fromboolean integer_yank exec_do*range (exec_stackdepth boolean_shove exec_s () (integer_max -88 boolean_frominteger integer_rot boolean_stackdepth integer_flush exec_do*while () in3 print_newline boolean_and exec_s_when_autoconstructing (-25 boolean_and exec_rot () (boolean_shove integer_max exec_dup_times (in1 integer_dup_times)) ()) () ()) ())))) ()) ()))
Zero cases best errors: [1 0 0 0 0 0 0 1 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 77
Percent parens: 0.351
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 14 2 14 2 2 2 4 8 4)
Population mean number of elite cases: 0.05
Count of perfect (error zero) individuals by case: (1 14 2 14 2 2 2 4 8 4)
Population mean number of perfect (error zero) cases: 0.05
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_min} {:close 1, :instruction exec_k} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 1, :instruction in1} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup} {:close 1, :instruction in3} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_847} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_empty} {:close 0, :instruction tag_boolean_147} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_min} {:close 1, :instruction tagged_870} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_s} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction integer_add} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_s} {:close 0, :instruction exec_while} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction tagged_716} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_or} {:close 0, :instruction tag_integer_534} {:close 1, :instruction integer_pop} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction tagged_169} {:close 1, :instruction print_exec})
Best program: (integer_min exec_k () (integer_empty integer_fromboolean) boolean_rot integer_rot exec_dup (integer_add exec_noop print_integer exec_noop integer_mult exec_noop print_integer in1) boolean_swap exec_while (boolean_dup in3) integer_empty boolean_yankdup exec_dup_items exec_s_when_autoconstructing () (integer_mult tagged_847 integer_flush integer_stackdepth exec_empty tag_boolean_147 exec_s (boolean_shove) (integer_mod) (integer_lt integer_dup_times boolean_yankdup) integer_min tagged_870) (integer_lt exec_dup_items exec_k_when_autoconstructing (integer_lt exec_yank boolean_pop exec_s (exec_flush exec_k_when_autoconstructing (exec_stackdepth exec_dup_times (exec_if (integer_add exec_k (exec_dup_times (integer_rot exec_eq integer_inc in2 exec_shove (integer_rot boolean_dup_times exec_yankdup exec_dup (print_boolean exec_dup (boolean_invert_second_then_and) exec_noop) integer_empty exec_do*count (boolean_yank) exec_s (exec_while (exec_flush integer_sub integer_mult integer_yank boolean_frominteger tagged_716) integer_mult boolean_or tag_integer_534 integer_pop) (print_integer) (boolean_and) exec_dup_times (exec_dup_items exec_stackdepth tagged_169 print_exec ())))) ()) ())) ()) () ()) ()))
Errors: [1 0 0 0 0 0 0 1 0 1]
Total: 3
Mean: 0.3
Genome size: 87
Size: 121
Percent parens: 0.281
--- Population Statistics ---
Average total errors in population: 9.947
Median total errors in population: 10
Error averages by case: (0.999 0.986 0.998 0.986 0.998 0.998 0.998 0.996 0.992 0.996)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.73
Average program size in population (points): 69.705
Average percent parens in population: 0.279
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.006
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.276
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 496001
--- Timings ---
Current time: 1559594044577 milliseconds
Total Time:           2.6 seconds
Initialization:       0.1 seconds,  3.8%
Reproduction:         0.8 seconds, 29.2%
Fitness Testing:      1.8 seconds, 66.9%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 638
Test mean error for best: 0.63800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -26                 | Program output: 21                 
Correct output: -49                 | Program output: 99                 
Correct output: -88                 | Program output: -88                
Correct output: -45                 | Program output: -45                
Correct output: 64                  | Program output: 64                 
Correct output: -86                 | Program output: -8                 
Correct output: -42                 | Program output: -42                
Correct output: -85                 | Program output: -14                
Correct output: -68                 | Program output: 75                 
Correct output: -16                 | Program output: -16                
Correct output: -11                 | Program output: -11                
Correct output: 50                  | Program output: 50                 
Correct output: -1                  | Program output: -1                 
Correct output: 64                  | Program output: 64                 
Correct output: -85                 | Program output: -85                
Correct output: 11                  | Program output: 57                 
Correct output: 6                   | Program output: 92                 
Correct output: 37                  | Program output: 37                 
Correct output: 14                  | Program output: 48                 
Correct output: 21                  | Program output: 35                 
Correct output: 59                  | Program output: 75                 
Correct output: 14                  | Program output: 71                 
Correct output: 25                  | Program output: 82                 
Correct output: 26                  | Program output: 85                 
Correct output: 16                  | Program output: 87                 
Correct output: 58                  | Program output: 100                
Correct output: 36                  | Program output: 36                 
Correct output: 0                   | Program output: 73                 
Correct output: 63                  | Program output: 69                 
Correct output: 3                   | Program output: 86                 
Correct output: 59                  | Program output: 93                 
Correct output: 70                  | Program output: 87                 
Correct output: 16                  | Program output: 25                 
Correct output: 5                   | Program output: 5                  
Correct output: 19                  | Program output: 21                 
Correct output: -89                 | Program output: -89                
Correct output: -30                 | Program output: 67                 
Correct output: -57                 | Program output: 67                 
Correct output: -99                 | Program output: 100                
Correct output: 19                  | Program output: 82                 
Correct output: -82                 | Program output: -13                
Correct output: -86                 | Program output: -86                
Correct output: -84                 | Program output: -84                
Correct output: -94                 | Program output: 88                 
Correct output: -67                 | Program output: -67                
Correct output: -66                 | Program output: 80                 
Correct output: -90                 | Program output: -21                
Correct output: -33                 | Program output: 91                 
Correct output: -65                 | Program output: -49                
Correct output: -100                | Program output: 87                 
Correct output: -77                 | Program output: -62                
Correct output: -99                 | Program output: 88                 
Correct output: -90                 | Program output: 86                 
Correct output: -30                 | Program output: 98                 
Correct output: -57                 | Program output: -50                
Correct output: -60                 | Program output: 56                 
Correct output: -61                 | Program output: -61                
Correct output: -73                 | Program output: 90                 
Correct output: -71                 | Program output: 45                 
Correct output: -33                 | Program output: 74                 
Correct output: -71                 | Program output: -53                
Correct output: -15                 | Program output: 34                 
Correct output: -63                 | Program output: -63                
Correct output: -64                 | Program output: 100                
Correct output: 5                   | Program output: 5                  
Correct output: -86                 | Program output: -36                
Correct output: -85                 | Program output: -33                
Correct output: -64                 | Program output: -45                
Correct output: -100                | Program output: 56                 
Correct output: -52                 | Program output: -1                 
Correct output: -89                 | Program output: 76                 
Correct output: -26                 | Program output: 80                 
Correct output: -54                 | Program output: -48                
Correct output: -76                 | Program output: -76                
Correct output: -93                 | Program output: -61                
Correct output: -80                 | Program output: -80                
Correct output: -96                 | Program output: -34                
Correct output: -60                 | Program output: 26                 
Correct output: -96                 | Program output: -96                
Correct output: -96                 | Program output: -96                
Correct output: -98                 | Program output: 84                 
Correct output: -96                 | Program output: -49                
Correct output: -2                  | Program output: 98                 
Correct output: -61                 | Program output: -61                
Correct output: -47                 | Program output: 42                 
Correct output: -77                 | Program output: 27                 
Correct output: -59                 | Program output: -59                
Correct output: -90                 | Program output: -65                
Correct output: -10                 | Program output: 25                 
Correct output: -57                 | Program output: 70                 
Correct output: -74                 | Program output: -19                
Correct output: -96                 | Program output: 64                 
Correct output: -70                 | Program output: 82                 
Correct output: -95                 | Program output: -45                
Correct output: -54                 | Program output: 65                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_if} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_dup} {:close 1, :instruction integer_lte} {:close 2, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_empty} {:close 1, :instruction tag_exec_836} {:close 0, :instruction print_integer} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction integer_rot})
Lexicase best program: (exec_while (integer_yankdup boolean_frominteger exec_do*times (exec_if (integer_lte integer_eq print_boolean boolean_rot integer_eq) (integer_mod print_integer exec_if (boolean_not exec_yankdup) (boolean_eq integer_empty boolean_xor boolean_dup) integer_lte) boolean_yankdup)) boolean_dup_items boolean_flush boolean_dup integer_dup_items integer_dup_times integer_pop boolean_not exec_dup_times (boolean_eq integer_mult integer_pop exec_do*times (integer_pop) integer_max integer_eq integer_shove in2 boolean_xor exec_empty tag_exec_836 () print_integer exec_s_when_autoconstructing () (integer_min integer_rot) ()))
Lexicase best errors: [0 1 0 1 0 0 1 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 58
Percent parens: 0.224
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_if} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_dup} {:close 1, :instruction integer_lte} {:close 2, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_empty} {:close 1, :instruction tag_exec_836} {:close 0, :instruction print_integer} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction integer_rot})
Zero cases best program: (exec_while (integer_yankdup boolean_frominteger exec_do*times (exec_if (integer_lte integer_eq print_boolean boolean_rot integer_eq) (integer_mod print_integer exec_if (boolean_not exec_yankdup) (boolean_eq integer_empty boolean_xor boolean_dup) integer_lte) boolean_yankdup)) boolean_dup_items boolean_flush boolean_dup integer_dup_items integer_dup_times integer_pop boolean_not exec_dup_times (boolean_eq integer_mult integer_pop exec_do*times (integer_pop) integer_max integer_eq integer_shove in2 boolean_xor exec_empty tag_exec_836 () print_integer exec_s_when_autoconstructing () (integer_min integer_rot) ()))
Zero cases best errors: [0 1 0 1 0 0 1 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 58
Percent parens: 0.224
--- Lexicase Population Statistics ---
Count of elite individuals by case: (459 26 140 23 140 142 301 302 140 27)
Population mean number of elite cases: 1.70
Count of perfect (error zero) individuals by case: (459 26 140 23 140 142 301 302 140 27)
Population mean number of perfect (error zero) cases: 1.70
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_if} {:close 0, :instruction integer_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_dup} {:close 1, :instruction integer_lte} {:close 2, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_max} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_empty} {:close 1, :instruction tag_exec_836} {:close 0, :instruction print_integer} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction integer_rot})
Best program: (exec_while (integer_yankdup boolean_shove boolean_frominteger exec_do*times (exec_if (integer_eq print_boolean boolean_rot boolean_invert_second_then_and integer_mod print_integer exec_if (boolean_not exec_yankdup) (boolean_invert_first_then_and boolean_eq integer_empty integer_min boolean_xor exec_when (boolean_dup) integer_lte) boolean_yankdup) () boolean_dup_items boolean_flush boolean_dup boolean_dup_items integer_dup_items) integer_dup_times boolean_not) boolean_eq integer_mult integer_pop exec_do*times (integer_max integer_eq in2 boolean_xor exec_empty tag_exec_836 () print_integer exec_s_when_autoconstructing () (integer_min integer_rot) ()))
Errors: [0 1 0 1 0 0 1 1 0 1]
Total: 5
Mean: 0.5
Genome size: 45
Size: 58
Percent parens: 0.224
--- Population Statistics ---
Average total errors in population: 8.3
Median total errors in population: 10
Error averages by case: (0.541 0.974 0.86 0.977 0.86 0.858 0.699 0.698 0.86 0.973)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 68.157
Average program size in population (points): 95.734
Average percent parens in population: 0.287
Minimum age in population: 1.0
Maximum age in population: 1.0
Average age in population: 1.0
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.006
Error (vector) diversity:			 0.019
Behavioral diversity:				 0.203
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 967846
--- Timings ---
Current time: 1559594046603 milliseconds
Total Time:           4.9 seconds
Initialization:       0.1 seconds,  2.1%
Reproduction:         1.8 seconds, 36.4%
Fitness Testing:      2.5 seconds, 50.8%
Report:               0.5 seconds, 10.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 662
Test mean error for best: 0.66200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -26                 | Program output: 21                 
Correct output: -49                 | Program output: -49                
Correct output: -88                 | Program output: -56                
Correct output: -45                 | Program output: 47                 
Correct output: 64                  | Program output: 86                 
Correct output: -86                 | Program output: -86                
Correct output: -42                 | Program output: 89                 
Correct output: -85                 | Program output: -85                
Correct output: -68                 | Program output: 75                 
Correct output: -16                 | Program output: 61                 
Correct output: -11                 | Program output: -11                
Correct output: 50                  | Program output: 50                 
Correct output: -1                  | Program output: -1                 
Correct output: 64                  | Program output: 64                 
Correct output: -85                 | Program output: -85                
Correct output: 11                  | Program output: 24                 
Correct output: 6                   | Program output: 6                  
Correct output: 37                  | Program output: 38                 
Correct output: 14                  | Program output: 26                 
Correct output: 21                  | Program output: 21                 
Correct output: 59                  | Program output: 92                 
Correct output: 14                  | Program output: 14                 
Correct output: 25                  | Program output: 64                 
Correct output: 26                  | Program output: 44                 
Correct output: 16                  | Program output: 55                 
Correct output: 58                  | Program output: 58                 
Correct output: 36                  | Program output: 72                 
Correct output: 0                   | Program output: 15                 
Correct output: 63                  | Program output: 94                 
Correct output: 3                   | Program output: 3                  
Correct output: 59                  | Program output: 59                 
Correct output: 70                  | Program output: 70                 
Correct output: 16                  | Program output: 85                 
Correct output: 5                   | Program output: 70                 
Correct output: 19                  | Program output: 25                 
Correct output: -89                 | Program output: -13                
Correct output: -30                 | Program output: 92                 
Correct output: -57                 | Program output: -57                
Correct output: -99                 | Program output: -99                
Correct output: 19                  | Program output: 19                 
Correct output: -82                 | Program output: -14                
Correct output: -86                 | Program output: 56                 
Correct output: -84                 | Program output: -64                
Correct output: -94                 | Program output: -94                
Correct output: -67                 | Program output: -12                
Correct output: -66                 | Program output: -66                
Correct output: -90                 | Program output: -75                
Correct output: -33                 | Program output: 62                 
Correct output: -65                 | Program output: -62                
Correct output: -100                | Program output: 94                 
Correct output: -77                 | Program output: -16                
Correct output: -99                 | Program output: -99                
Correct output: -90                 | Program output: -90                
Correct output: -30                 | Program output: -21                
Correct output: -57                 | Program output: -57                
Correct output: -60                 | Program output: -60                
Correct output: -61                 | Program output: 24                 
Correct output: -73                 | Program output: 42                 
Correct output: -71                 | Program output: -61                
Correct output: -33                 | Program output: 22                 
Correct output: -71                 | Program output: 3                  
Correct output: -15                 | Program output: -15                
Correct output: -63                 | Program output: -12                
Correct output: -64                 | Program output: -64                
Correct output: 5                   | Program output: 77                 
Correct output: -86                 | Program output: -50                
Correct output: -85                 | Program output: 79                 
Correct output: -64                 | Program output: -64                
Correct output: -100                | Program output: -100               
Correct output: -52                 | Program output: -52                
Correct output: -89                 | Program output: -89                
Correct output: -26                 | Program output: 30                 
Correct output: -54                 | Program output: -54                
Correct output: -76                 | Program output: -65                
Correct output: -93                 | Program output: 40                 
Correct output: -80                 | Program output: -77                
Correct output: -96                 | Program output: -96                
Correct output: -60                 | Program output: 7                  
Correct output: -96                 | Program output: 52                 
Correct output: -96                 | Program output: -14                
Correct output: -98                 | Program output: -77                
Correct output: -96                 | Program output: -19                
Correct output: -2                  | Program output: 43                 
Correct output: -61                 | Program output: 77                 
Correct output: -47                 | Program output: -47                
Correct output: -77                 | Program output: -77                
Correct output: -59                 | Program output: 30                 
Correct output: -90                 | Program output: 75                 
Correct output: -10                 | Program output: -10                
Correct output: -57                 | Program output: -36                
Correct output: -74                 | Program output: -8                 
Correct output: -96                 | Program output: -68                
Correct output: -70                 | Program output: 71                 
Correct output: -95                 | Program output: -18                
Correct output: -54                 | Program output: 99                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 1, :instruction integer_div} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_gte} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_rot} {:close 1, :instruction tagged_593} {:close 1, :instruction print_integer} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction exec_empty} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 1, :instruction exec_eq} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_div} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction integer_max} {:close 1, :instruction integer_rot} {:close 0, :instruction -88} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction print_newline} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction -25} {:close 0, :instruction boolean_and} {:close 0, :instruction -9} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_max} {:close 0, :instruction in1} {:close 0, :instruction integer_dup_times})
Lexicase best program: (exec_swap (in1 integer_div) (integer_sub integer_gte) exec_do*range () exec_rot (tagged_593) (print_integer) (exec_s_when_autoconstructing () (integer_dup_times exec_s (exec_empty in2 in1 exec_eq) (print_integer boolean_flush boolean_dup_items integer_div) (integer_yankdup integer_fromboolean integer_yank exec_do*range (boolean_shove in1 integer_max integer_rot) -88 boolean_frominteger integer_rot exec_s_when_autoconstructing (boolean_stackdepth integer_flush exec_do*while () in3 print_newline exec_s_when_autoconstructing (-25 boolean_and -9 exec_rot () (boolean_shove integer_max in1 integer_dup_times) ()) () ()) () ())) ()))
Lexicase best errors: [0 1 1 1 1 1 0 0 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 70
Percent parens: 0.343
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 1, :instruction integer_div} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_gte} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_rot} {:close 1, :instruction tagged_593} {:close 1, :instruction print_integer} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction exec_empty} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 1, :instruction exec_eq} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_div} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction integer_max} {:close 1, :instruction integer_rot} {:close 0, :instruction -88} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction print_newline} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction -25} {:close 0, :instruction boolean_and} {:close 0, :instruction -9} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_max} {:close 0, :instruction in1} {:close 0, :instruction integer_dup_times})
Zero cases best program: (exec_swap (in1 integer_div) (integer_sub integer_gte) exec_do*range () exec_rot (tagged_593) (print_integer) (exec_s_when_autoconstructing () (integer_dup_times exec_s (exec_empty in2 in1 exec_eq) (print_integer boolean_flush boolean_dup_items integer_div) (integer_yankdup integer_fromboolean integer_yank exec_do*range (boolean_shove in1 integer_max integer_rot) -88 boolean_frominteger integer_rot exec_s_when_autoconstructing (boolean_stackdepth integer_flush exec_do*while () in3 print_newline exec_s_when_autoconstructing (-25 boolean_and -9 exec_rot () (boolean_shove integer_max in1 integer_dup_times) ()) () ()) () ())) ()))
Zero cases best errors: [0 1 1 1 1 1 0 0 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 70
Percent parens: 0.343
--- Lexicase Population Statistics ---
Count of elite individuals by case: (377 64 15 60 12 63 120 120 120 15)
Population mean number of elite cases: 0.97
Count of perfect (error zero) individuals by case: (377 64 15 60 12 63 120 120 120 15)
Population mean number of perfect (error zero) cases: 0.97
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_min} {:close 1, :instruction exec_k} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_s} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_add} {:close 0, :instruction tagged_372} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_noop} {:close 1, :instruction in1} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction tag_boolean_147} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_min} {:close 1, :instruction tagged_870} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_s} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction integer_add} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_rot} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_s} {:close 0, :instruction exec_while} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction tagged_716} {:close 0, :instruction integer_mult} {:close 0, :instruction tag_integer_534} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_max} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction print_exec})
Best program: (integer_min exec_k () (integer_empty integer_fromboolean) boolean_rot exec_s (integer_rot exec_dup (integer_add tagged_372 exec_noop print_integer exec_noop boolean_yank integer_mult exec_noop in1) boolean_swap exec_while (boolean_dup integer_empty boolean_yankdup exec_dup_items exec_s_when_autoconstructing () (integer_mult integer_flush exec_empty tag_boolean_147 exec_s (boolean_shove) (integer_mod) (integer_lt integer_dup_times integer_pop integer_min tagged_870) integer_lt exec_dup_items exec_k_when_autoconstructing (integer_lt boolean_pop exec_s (exec_flush exec_k_when_autoconstructing (exec_stackdepth exec_dup_times (exec_if (integer_add exec_dup_times (exec_eq integer_yank integer_inc exec_rot (in2 exec_shove (integer_rot boolean_dup_times exec_yankdup exec_dup (print_boolean exec_dup (boolean_invert_second_then_and) exec_noop) integer_empty boolean_yank) exec_s (exec_while (exec_flush integer_sub integer_mult integer_yank boolean_frominteger tagged_716) integer_mult tag_integer_534 integer_pop) (integer_max print_integer) (boolean_and) exec_dup_times (exec_dup_items exec_stackdepth print_exec ())) () ())) ())) ()) () ()) ()) ())) () ())
Errors: [0 1 1 1 1 1 0 0 0 1]
Total: 6
Mean: 0.6
Genome size: 83
Size: 120
Percent parens: 0.308
--- Population Statistics ---
Average total errors in population: 9.034
Median total errors in population: 10
Error averages by case: (0.623 0.936 0.985 0.94 0.988 0.937 0.88 0.88 0.88 0.985)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 67.796
Average program size in population (points): 93.749
Average percent parens in population: 0.270
Minimum age in population: 2.0
Maximum age in population: 2.0
Average age in population: 2.0
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.005
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.264
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1478013
--- Timings ---
Current time: 1559594048733 milliseconds
Total Time:           7.0 seconds
Initialization:       0.1 seconds,  1.4%
Reproduction:         3.0 seconds, 42.6%
Fitness Testing:      3.1 seconds, 44.7%
Report:               0.8 seconds, 11.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 432
Test mean error for best: 0.43200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -26                 | Program output: 21                 
Correct output: -49                 | Program output: -49                
Correct output: -88                 | Program output: -88                
Correct output: -45                 | Program output: 47                 
Correct output: 64                  | Program output: 64                 
Correct output: -86                 | Program output: -86                
Correct output: -42                 | Program output: 89                 
Correct output: -85                 | Program output: -85                
Correct output: -68                 | Program output: 75                 
Correct output: -16                 | Program output: 61                 
Correct output: -11                 | Program output: -11                
Correct output: 50                  | Program output: 50                 
Correct output: -1                  | Program output: -1                 
Correct output: 64                  | Program output: 64                 
Correct output: -85                 | Program output: -85                
Correct output: 11                  | Program output: 11                 
Correct output: 6                   | Program output: 6                  
Correct output: 37                  | Program output: 38                 
Correct output: 14                  | Program output: 14                 
Correct output: 21                  | Program output: 21                 
Correct output: 59                  | Program output: 83                 
Correct output: 14                  | Program output: 14                 
Correct output: 25                  | Program output: 51                 
Correct output: 26                  | Program output: 44                 
Correct output: 16                  | Program output: 42                 
Correct output: 58                  | Program output: 58                 
Correct output: 36                  | Program output: 72                 
Correct output: 0                   | Program output: 15                 
Correct output: 63                  | Program output: 92                 
Correct output: 3                   | Program output: 3                  
Correct output: 59                  | Program output: 59                 
Correct output: 70                  | Program output: 70                 
Correct output: 16                  | Program output: 16                 
Correct output: 5                   | Program output: 48                 
Correct output: 19                  | Program output: 25                 
Correct output: -89                 | Program output: -35                
Correct output: -30                 | Program output: 9                  
Correct output: -57                 | Program output: -57                
Correct output: -99                 | Program output: -99                
Correct output: 19                  | Program output: 19                 
Correct output: -82                 | Program output: -14                
Correct output: -86                 | Program output: 17                 
Correct output: -84                 | Program output: -64                
Correct output: -94                 | Program output: -94                
Correct output: -67                 | Program output: -12                
Correct output: -66                 | Program output: -66                
Correct output: -90                 | Program output: -75                
Correct output: -33                 | Program output: -22                
Correct output: -65                 | Program output: -62                
Correct output: -100                | Program output: -100               
Correct output: -77                 | Program output: -77                
Correct output: -99                 | Program output: -99                
Correct output: -90                 | Program output: -90                
Correct output: -30                 | Program output: -30                
Correct output: -57                 | Program output: -57                
Correct output: -60                 | Program output: -60                
Correct output: -61                 | Program output: 24                 
Correct output: -73                 | Program output: 36                 
Correct output: -71                 | Program output: -61                
Correct output: -33                 | Program output: -33                
Correct output: -71                 | Program output: -25                
Correct output: -15                 | Program output: -15                
Correct output: -63                 | Program output: -12                
Correct output: -64                 | Program output: -64                
Correct output: 5                   | Program output: 77                 
Correct output: -86                 | Program output: -50                
Correct output: -85                 | Program output: -26                
Correct output: -64                 | Program output: -64                
Correct output: -100                | Program output: -100               
Correct output: -52                 | Program output: -52                
Correct output: -89                 | Program output: -89                
Correct output: -26                 | Program output: -26                
Correct output: -54                 | Program output: -54                
Correct output: -76                 | Program output: -65                
Correct output: -93                 | Program output: -93                
Correct output: -80                 | Program output: -77                
Correct output: -96                 | Program output: -96                
Correct output: -60                 | Program output: 7                  
Correct output: -96                 | Program output: 52                 
Correct output: -96                 | Program output: -74                
Correct output: -98                 | Program output: -77                
Correct output: -96                 | Program output: -96                
Correct output: -2                  | Program output: 43                 
Correct output: -61                 | Program output: -38                
Correct output: -47                 | Program output: -47                
Correct output: -77                 | Program output: -77                
Correct output: -59                 | Program output: 30                 
Correct output: -90                 | Program output: -90                
Correct output: -10                 | Program output: -10                
Correct output: -57                 | Program output: -36                
Correct output: -74                 | Program output: -8                 
Correct output: -96                 | Program output: -68                
Correct output: -70                 | Program output: -70                
Correct output: -95                 | Program output: -55                
Correct output: -54                 | Program output: -54                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction print_integer} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 1, :instruction integer_div} {:close 2, :instruction exec_dup_items} {:close 1, :instruction integer_gte} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_rot} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_add} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 1, :instruction exec_eq} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_s} {:close 0, :instruction integer_max} {:close 0, :instruction integer_lte} {:close 0, :instruction -88} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_add} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction -25} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_sub})
Lexicase best program: (print_integer exec_swap (in1 integer_div) (exec_dup_items) integer_gte exec_do*range () exec_rot (print_integer) (integer_dup_times integer_add) (in2 in1 integer_min) exec_eq print_integer boolean_flush boolean_dup_items integer_yankdup exec_shove (integer_fromboolean integer_yank integer_pop exec_stackdepth boolean_shove exec_s () (integer_max integer_lte -88 exec_while () boolean_eq) (boolean_frominteger integer_add) integer_rot boolean_stackdepth exec_yankdup integer_flush exec_do*while () in3 boolean_and exec_s_when_autoconstructing (-25 boolean_and exec_rot () (boolean_stackdepth boolean_yank boolean_shove integer_max boolean_and exec_dup_times (in1 integer_dup_times integer_sub)) ()) () ()))
Lexicase best errors: [0 0 0 1 1 0 1 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 73
Percent parens: 0.274
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction print_integer} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 1, :instruction integer_div} {:close 2, :instruction exec_dup_items} {:close 1, :instruction integer_gte} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_rot} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_add} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 1, :instruction exec_eq} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_s} {:close 0, :instruction integer_max} {:close 0, :instruction integer_lte} {:close 0, :instruction -88} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_add} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction -25} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_sub})
Zero cases best program: (print_integer exec_swap (in1 integer_div) (exec_dup_items) integer_gte exec_do*range () exec_rot (print_integer) (integer_dup_times integer_add) (in2 in1 integer_min) exec_eq print_integer boolean_flush boolean_dup_items integer_yankdup exec_shove (integer_fromboolean integer_yank integer_pop exec_stackdepth boolean_shove exec_s () (integer_max integer_lte -88 exec_while () boolean_eq) (boolean_frominteger integer_add) integer_rot boolean_stackdepth exec_yankdup integer_flush exec_do*while () in3 boolean_and exec_s_when_autoconstructing (-25 boolean_and exec_rot () (boolean_stackdepth boolean_yank boolean_shove integer_max boolean_and exec_dup_times (in1 integer_dup_times integer_sub)) ()) () ()))
Zero cases best errors: [0 0 0 1 1 0 1 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 73
Percent parens: 0.274
--- Lexicase Population Statistics ---
Count of elite individuals by case: (206 31 207 189 96 32 93 111 424 204)
Population mean number of elite cases: 1.59
Count of perfect (error zero) individuals by case: (206 31 207 189 96 32 93 111 424 204)
Population mean number of perfect (error zero) cases: 1.59
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in1} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_while} {:close 0, :instruction exec_k} {:close 0, :instruction in3} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_flush} {:close 2, :instruction boolean_or} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction 10} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in4} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_k} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_k} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_when} {:close 0, :instruction exec_if} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_eq} {:close 0, :instruction tagged_660} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_min} {:close 1, :instruction exec_dup} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction tagged_334} {:close 1, :instruction integer_flush} {:close 1, :instruction integer_max} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_add} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_div} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_eq} {:close 0, :instruction in3} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_add} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yankdup})
Best program: (in1 integer_yank integer_shove exec_while () exec_k (in3 exec_pop () integer_min print_integer exec_do*count () boolean_dup_times exec_dup_times (integer_shove boolean_swap boolean_yankdup exec_flush boolean_or)) (integer_swap) exec_dup_times (10 integer_yankdup in4 boolean_rot exec_k (exec_dup () exec_k (integer_inc exec_when (exec_if (integer_empty) (integer_gte integer_eq tagged_660 integer_gte integer_min) exec_dup () integer_yankdup) exec_empty print_exec (boolean_invert_first_then_and boolean_frominteger tagged_334 integer_flush) integer_max) (integer_swap exec_k (boolean_and boolean_flush) (integer_min boolean_flush integer_min integer_swap integer_add exec_dup_items boolean_stackdepth integer_pop integer_lte exec_eq boolean_dup integer_min exec_dup_times (exec_shove (integer_div exec_pop (integer_mod boolean_xor) exec_shove () integer_inc exec_eq in3 integer_inc integer_dup print_integer integer_add integer_mod boolean_yankdup))))) ()))
Errors: [0 1 0 0 1 1 1 0 0 0]
Total: 4
Mean: 0.4
Genome size: 76
Size: 100
Percent parens: 0.240
--- Population Statistics ---
Average total errors in population: 8.407
Median total errors in population: 9
Error averages by case: (0.794 0.969 0.793 0.811 0.904 0.968 0.907 0.889 0.576 0.796)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 72.351
Average program size in population (points): 100.71
Average percent parens in population: 0.284
Minimum age in population: 3.0
Maximum age in population: 3.0
Average age in population: 3.0
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.007
Error (vector) diversity:			 0.022
Behavioral diversity:				 0.309
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 2081635
--- Timings ---
Current time: 1559594050789 milliseconds
Total Time:           9.1 seconds
Initialization:       0.1 seconds,  1.1%
Reproduction:         4.1 seconds, 45.2%
Fitness Testing:      3.8 seconds, 41.7%
Report:               1.1 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 432
Test mean error for best: 0.43200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -26                 | Program output: 21                 
Correct output: -49                 | Program output: -49                
Correct output: -88                 | Program output: -88                
Correct output: -45                 | Program output: 47                 
Correct output: 64                  | Program output: 64                 
Correct output: -86                 | Program output: -86                
Correct output: -42                 | Program output: 89                 
Correct output: -85                 | Program output: -85                
Correct output: -68                 | Program output: 75                 
Correct output: -16                 | Program output: 61                 
Correct output: -11                 | Program output: -11                
Correct output: 50                  | Program output: 50                 
Correct output: -1                  | Program output: -1                 
Correct output: 64                  | Program output: 64                 
Correct output: -85                 | Program output: -85                
Correct output: 11                  | Program output: 11                 
Correct output: 6                   | Program output: 6                  
Correct output: 37                  | Program output: 38                 
Correct output: 14                  | Program output: 14                 
Correct output: 21                  | Program output: 21                 
Correct output: 59                  | Program output: 83                 
Correct output: 14                  | Program output: 14                 
Correct output: 25                  | Program output: 51                 
Correct output: 26                  | Program output: 44                 
Correct output: 16                  | Program output: 42                 
Correct output: 58                  | Program output: 58                 
Correct output: 36                  | Program output: 72                 
Correct output: 0                   | Program output: 15                 
Correct output: 63                  | Program output: 92                 
Correct output: 3                   | Program output: 3                  
Correct output: 59                  | Program output: 59                 
Correct output: 70                  | Program output: 70                 
Correct output: 16                  | Program output: 16                 
Correct output: 5                   | Program output: 48                 
Correct output: 19                  | Program output: 25                 
Correct output: -89                 | Program output: -35                
Correct output: -30                 | Program output: 9                  
Correct output: -57                 | Program output: -57                
Correct output: -99                 | Program output: -99                
Correct output: 19                  | Program output: 19                 
Correct output: -82                 | Program output: -14                
Correct output: -86                 | Program output: 17                 
Correct output: -84                 | Program output: -64                
Correct output: -94                 | Program output: -94                
Correct output: -67                 | Program output: -12                
Correct output: -66                 | Program output: -66                
Correct output: -90                 | Program output: -75                
Correct output: -33                 | Program output: -22                
Correct output: -65                 | Program output: -62                
Correct output: -100                | Program output: -100               
Correct output: -77                 | Program output: -77                
Correct output: -99                 | Program output: -99                
Correct output: -90                 | Program output: -90                
Correct output: -30                 | Program output: -30                
Correct output: -57                 | Program output: -57                
Correct output: -60                 | Program output: -60                
Correct output: -61                 | Program output: 24                 
Correct output: -73                 | Program output: 36                 
Correct output: -71                 | Program output: -61                
Correct output: -33                 | Program output: -33                
Correct output: -71                 | Program output: -25                
Correct output: -15                 | Program output: -15                
Correct output: -63                 | Program output: -12                
Correct output: -64                 | Program output: -64                
Correct output: 5                   | Program output: 77                 
Correct output: -86                 | Program output: -50                
Correct output: -85                 | Program output: -26                
Correct output: -64                 | Program output: -64                
Correct output: -100                | Program output: -100               
Correct output: -52                 | Program output: -52                
Correct output: -89                 | Program output: -89                
Correct output: -26                 | Program output: -26                
Correct output: -54                 | Program output: -54                
Correct output: -76                 | Program output: -65                
Correct output: -93                 | Program output: -93                
Correct output: -80                 | Program output: -77                
Correct output: -96                 | Program output: -96                
Correct output: -60                 | Program output: 7                  
Correct output: -96                 | Program output: 52                 
Correct output: -96                 | Program output: -74                
Correct output: -98                 | Program output: -77                
Correct output: -96                 | Program output: -96                
Correct output: -2                  | Program output: 43                 
Correct output: -61                 | Program output: -38                
Correct output: -47                 | Program output: -47                
Correct output: -77                 | Program output: -77                
Correct output: -59                 | Program output: 30                 
Correct output: -90                 | Program output: -90                
Correct output: -10                 | Program output: -10                
Correct output: -57                 | Program output: -36                
Correct output: -74                 | Program output: -8                 
Correct output: -96                 | Program output: -68                
Correct output: -70                 | Program output: -70                
Correct output: -95                 | Program output: -55                
Correct output: -54                 | Program output: -54                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction print_integer} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 1, :instruction integer_div} {:close 2, :instruction exec_dup_items} {:close 1, :instruction integer_gte} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_rot} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_add} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_eq} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_lte} {:close 0, :instruction -88} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_add} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction -25} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_dup_times})
Lexicase best program: (print_integer exec_swap (in1 integer_div) (exec_dup_items) integer_gte exec_do*range () exec_rot (print_integer) (integer_dup_times integer_add) (in2 integer_min) integer_gte exec_eq print_integer boolean_flush boolean_dup_items integer_yankdup exec_shove (integer_fromboolean boolean_invert_first_then_and integer_yank integer_pop exec_stackdepth boolean_shove exec_s () (exec_noop integer_max integer_lte -88 exec_while () boolean_eq) (boolean_frominteger integer_add) integer_rot boolean_stackdepth exec_yankdup integer_flush exec_do*while () in3 boolean_yankdup boolean_and exec_s_when_autoconstructing (-25 boolean_and exec_rot () (boolean_stackdepth boolean_yank boolean_shove integer_max exec_dup_times (in1 integer_dup_times)) ()) () ()))
Lexicase best errors: [1 0 0 1 1 0 1 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 74
Percent parens: 0.270
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction print_integer} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 1, :instruction integer_div} {:close 2, :instruction exec_dup_items} {:close 1, :instruction integer_gte} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_rot} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_add} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_eq} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_lte} {:close 0, :instruction -88} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_add} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction -25} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_dup_times})
Zero cases best program: (print_integer exec_swap (in1 integer_div) (exec_dup_items) integer_gte exec_do*range () exec_rot (print_integer) (integer_dup_times integer_add) (in2 integer_min) integer_gte exec_eq print_integer boolean_flush boolean_dup_items integer_yankdup exec_shove (integer_fromboolean boolean_invert_first_then_and integer_yank integer_pop exec_stackdepth boolean_shove exec_s () (exec_noop integer_max integer_lte -88 exec_while () boolean_eq) (boolean_frominteger integer_add) integer_rot boolean_stackdepth exec_yankdup integer_flush exec_do*while () in3 boolean_yankdup boolean_and exec_s_when_autoconstructing (-25 boolean_and exec_rot () (boolean_stackdepth boolean_yank boolean_shove integer_max exec_dup_times (in1 integer_dup_times)) ()) () ()))
Zero cases best errors: [1 0 0 1 1 0 1 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 74
Percent parens: 0.270
--- Lexicase Population Statistics ---
Count of elite individuals by case: (132 556 361 303 131 341 132 223 341 342)
Population mean number of elite cases: 2.86
Count of perfect (error zero) individuals by case: (132 556 361 303 131 341 132 223 341 342)
Population mean number of perfect (error zero) cases: 2.86
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in1} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_while} {:close 0, :instruction exec_k} {:close 0, :instruction in3} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_flush} {:close 2, :instruction boolean_or} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup_times} {:close 0, :instruction 10} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in4} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_k} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_k} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_when} {:close 0, :instruction exec_if} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_eq} {:close 0, :instruction tagged_660} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_min} {:close 1, :instruction exec_dup} {:close 1, :instruction exec_s} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction tagged_334} {:close 1, :instruction integer_flush} {:close 1, :instruction integer_max} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction -8} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_add} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_div} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_add} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yankdup})
Best program: (in1 integer_shove exec_while () exec_k (in3 exec_s_when_autoconstructing (integer_min print_integer exec_do*count () boolean_dup_times exec_dup_times (integer_shove boolean_swap boolean_yankdup exec_flush boolean_or)) (integer_swap) (integer_yank exec_dup_times (10 integer_yankdup in4 boolean_rot exec_k (exec_dup () exec_k (integer_inc exec_when (exec_if (integer_empty) (integer_gte integer_eq tagged_660 integer_gte integer_min) exec_dup () exec_s () (integer_yankdup) (print_exec (boolean_invert_first_then_and boolean_frominteger tagged_334 integer_flush) integer_max) integer_swap exec_k (boolean_and boolean_flush) (integer_min boolean_flush integer_min -8 integer_swap boolean_flush integer_add exec_dup_items boolean_stackdepth integer_pop integer_lte exec_eq integer_min exec_dup_times (exec_shove (integer_div exec_pop (integer_mod boolean_xor) exec_shove () integer_inc exec_eq boolean_xor in3 integer_inc integer_dup print_integer integer_add integer_mod boolean_yankdup))))) ()) ()))) ())
Errors: [1 0 0 0 1 0 1 1 0 0]
Total: 4
Mean: 0.4
Genome size: 78
Size: 107
Percent parens: 0.271
--- Population Statistics ---
Average total errors in population: 7.138
Median total errors in population: 7
Error averages by case: (0.868 0.444 0.639 0.697 0.869 0.659 0.868 0.777 0.659 0.658)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 67.229
Average program size in population (points): 91.645
Average percent parens in population: 0.268
Minimum age in population: 4.0
Maximum age in population: 4.0
Average age in population: 4.0
Median age in population: 4.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.007
Error (vector) diversity:			 0.026
Behavioral diversity:				 0.238
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 2632283
--- Timings ---
Current time: 1559594052788 milliseconds
Total Time:          11.1 seconds
Initialization:       0.1 seconds,  0.9%
Reproduction:         5.3 seconds, 47.3%
Fitness Testing:      4.4 seconds, 39.7%
Report:               1.3 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 410
Test mean error for best: 0.41000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -26                 | Program output: 21                 
Correct output: -49                 | Program output: 99                 
Correct output: -88                 | Program output: -88                
Correct output: -45                 | Program output: -45                
Correct output: 64                  | Program output: 64                 
Correct output: -86                 | Program output: -86                
Correct output: -42                 | Program output: -42                
Correct output: -85                 | Program output: -85                
Correct output: -68                 | Program output: 75                 
Correct output: -16                 | Program output: -16                
Correct output: -11                 | Program output: -11                
Correct output: 50                  | Program output: 50                 
Correct output: -1                  | Program output: -1                 
Correct output: 64                  | Program output: 64                 
Correct output: -85                 | Program output: -85                
Correct output: 11                  | Program output: 11                 
Correct output: 6                   | Program output: 76                 
Correct output: 37                  | Program output: 37                 
Correct output: 14                  | Program output: 14                 
Correct output: 21                  | Program output: 33                 
Correct output: 59                  | Program output: 75                 
Correct output: 14                  | Program output: 14                 
Correct output: 25                  | Program output: 51                 
Correct output: 26                  | Program output: 51                 
Correct output: 16                  | Program output: 42                 
Correct output: 58                  | Program output: 86                 
Correct output: 36                  | Program output: 36                 
Correct output: 0                   | Program output: 52                 
Correct output: 63                  | Program output: 69                 
Correct output: 3                   | Program output: 85                 
Correct output: 59                  | Program output: 84                 
Correct output: 70                  | Program output: 80                 
Correct output: 16                  | Program output: 16                 
Correct output: 5                   | Program output: 5                  
Correct output: 19                  | Program output: 21                 
Correct output: -89                 | Program output: -89                
Correct output: -30                 | Program output: 9                  
Correct output: -57                 | Program output: 67                 
Correct output: -99                 | Program output: 41                 
Correct output: 19                  | Program output: 82                 
Correct output: -82                 | Program output: -13                
Correct output: -86                 | Program output: -86                
Correct output: -84                 | Program output: -84                
Correct output: -94                 | Program output: 13                 
Correct output: -67                 | Program output: -67                
Correct output: -66                 | Program output: 12                 
Correct output: -90                 | Program output: -21                
Correct output: -33                 | Program output: -22                
Correct output: -65                 | Program output: -49                
Correct output: -100                | Program output: -100               
Correct output: -77                 | Program output: -77                
Correct output: -99                 | Program output: 9                  
Correct output: -90                 | Program output: -9                 
Correct output: -30                 | Program output: -30                
Correct output: -57                 | Program output: -50                
Correct output: -60                 | Program output: -20                
Correct output: -61                 | Program output: -61                
Correct output: -73                 | Program output: 36                 
Correct output: -71                 | Program output: -8                 
Correct output: -33                 | Program output: -33                
Correct output: -71                 | Program output: -53                
Correct output: -15                 | Program output: 12                 
Correct output: -63                 | Program output: -63                
Correct output: -64                 | Program output: 22                 
Correct output: 5                   | Program output: 5                  
Correct output: -86                 | Program output: -40                
Correct output: -85                 | Program output: -33                
Correct output: -64                 | Program output: -45                
Correct output: -100                | Program output: 56                 
Correct output: -52                 | Program output: -15                
Correct output: -89                 | Program output: -32                
Correct output: -26                 | Program output: -26                
Correct output: -54                 | Program output: -48                
Correct output: -76                 | Program output: -76                
Correct output: -93                 | Program output: -93                
Correct output: -80                 | Program output: -80                
Correct output: -96                 | Program output: -34                
Correct output: -60                 | Program output: 26                 
Correct output: -96                 | Program output: -96                
Correct output: -96                 | Program output: -96                
Correct output: -98                 | Program output: -9                 
Correct output: -96                 | Program output: -96                
Correct output: -2                  | Program output: 70                 
Correct output: -61                 | Program output: -61                
Correct output: -47                 | Program output: -24                
Correct output: -77                 | Program output: 27                 
Correct output: -59                 | Program output: -59                
Correct output: -90                 | Program output: -90                
Correct output: -10                 | Program output: 25                 
Correct output: -57                 | Program output: -14                
Correct output: -74                 | Program output: -19                
Correct output: -96                 | Program output: -66                
Correct output: -70                 | Program output: -70                
Correct output: -95                 | Program output: -55                
Correct output: -54                 | Program output: -54                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_while} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction exec_k} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_k} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_when} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction tagged_660} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_min} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction tagged_334} {:close 1, :instruction integer_flush} {:close 0, :instruction in2} {:close 1, :instruction integer_max} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_div} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction in3} {:close 0, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yankdup})
Lexicase best program: (in1 exec_dup_items integer_shove exec_while () in3 in2 integer_min print_integer boolean_dup_times integer_shove boolean_swap boolean_yankdup exec_flush integer_swap exec_dup_times (exec_if (integer_yankdup in1 in4 exec_k (exec_dup () exec_k (integer_inc exec_when (exec_if (in1 boolean_dup_times integer_gte tagged_660 integer_gte integer_min) (exec_dup () integer_empty integer_yankdup) exec_empty print_exec (boolean_flush exec_dup_times (integer_fromboolean boolean_frominteger tagged_334 integer_flush) in2 integer_max) integer_rot) integer_swap boolean_and exec_flush boolean_flush) (integer_min integer_min integer_swap integer_swap integer_swap integer_add boolean_pop) exec_do*range (boolean_stackdepth integer_pop integer_min exec_shove (integer_div exec_pop (integer_mod boolean_xor) exec_shove () integer_gte integer_inc exec_eq boolean_and in3 integer_dup print_integer integer_add boolean_yankdup))) ()) ()))
Lexicase best errors: [0 0 1 0 0 0 1 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 95
Percent parens: 0.211
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_while} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction exec_k} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_k} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_when} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction tagged_660} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_min} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction tagged_334} {:close 1, :instruction integer_flush} {:close 0, :instruction in2} {:close 1, :instruction integer_max} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_div} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction in3} {:close 0, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yankdup})
Zero cases best program: (in1 exec_dup_items integer_shove exec_while () in3 in2 integer_min print_integer boolean_dup_times integer_shove boolean_swap boolean_yankdup exec_flush integer_swap exec_dup_times (exec_if (integer_yankdup in1 in4 exec_k (exec_dup () exec_k (integer_inc exec_when (exec_if (in1 boolean_dup_times integer_gte tagged_660 integer_gte integer_min) (exec_dup () integer_empty integer_yankdup) exec_empty print_exec (boolean_flush exec_dup_times (integer_fromboolean boolean_frominteger tagged_334 integer_flush) in2 integer_max) integer_rot) integer_swap boolean_and exec_flush boolean_flush) (integer_min integer_min integer_swap integer_swap integer_swap integer_add boolean_pop) exec_do*range (boolean_stackdepth integer_pop integer_min exec_shove (integer_div exec_pop (integer_mod boolean_xor) exec_shove () integer_gte integer_inc exec_eq boolean_and in3 integer_dup print_integer integer_add boolean_yankdup))) ()) ()))
Zero cases best errors: [0 0 1 0 0 0 1 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 95
Percent parens: 0.211
--- Lexicase Population Statistics ---
Count of elite individuals by case: (655 142 385 402 141 673 387 425 156 417)
Population mean number of elite cases: 3.78
Count of perfect (error zero) individuals by case: (655 142 385 402 141 673 387 425 156 417)
Population mean number of perfect (error zero) cases: 3.78
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in1} {:close 0, :instruction integer_div} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_while} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_pop} {:close 2, :instruction boolean_or} {:close 0, :instruction exec_dup_times} {:close 0, :instruction 10} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_k} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_k} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_when} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_while} {:close 0, :instruction exec_if} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction tagged_660} {:close 1, :instruction integer_min} {:close 1, :instruction exec_dup} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction tagged_334} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_max} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_div} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_eq} {:close 0, :instruction in3} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yankdup})
Best program: (in1 integer_div integer_shove exec_while () in3 in2 exec_if (boolean_yankdup exec_pop () integer_min print_integer integer_pop exec_do*count () boolean_dup_times integer_shove integer_pop boolean_invert_second_then_and boolean_swap exec_flush exec_pop (boolean_or)) (exec_dup_times (10 integer_yankdup in4 exec_yankdup exec_k (exec_dup () exec_k (integer_inc exec_when (integer_lte exec_while (exec_if (integer_eq boolean_dup_times integer_gte integer_shove integer_eq tagged_660 integer_min) (exec_dup () integer_yankdup) exec_empty boolean_frominteger tagged_334 integer_flush) boolean_shove integer_max) integer_swap integer_pop exec_k (boolean_and boolean_flush) (boolean_flush integer_min integer_swap integer_add boolean_pop) exec_dup_items boolean_stackdepth exec_pop (integer_pop exec_eq exec_dup_times (exec_shove (integer_div exec_pop (integer_mod boolean_xor) exec_shove () integer_gte integer_inc exec_eq in3 integer_inc integer_dup in2) print_integer exec_s_when_autoconstructing (integer_add boolean_yankdup) () ()))) ()) ())))
Errors: [0 0 1 0 0 0 1 0 0 0]
Total: 2
Mean: 0.2
Genome size: 82
Size: 110
Percent parens: 0.255
--- Population Statistics ---
Average total errors in population: 6.217
Median total errors in population: 5
Error averages by case: (0.345 0.858 0.615 0.598 0.859 0.327 0.613 0.575 0.844 0.583)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 69.839
Average program size in population (points): 93.708
Average percent parens in population: 0.255
Minimum age in population: 5.0
Maximum age in population: 5.0
Average age in population: 5.0
Median age in population: 5.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.009
Error (vector) diversity:			 0.028
Behavioral diversity:				 0.229
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 3075555
--- Timings ---
Current time: 1559594054603 milliseconds
Total Time:          12.9 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:         6.4 seconds, 49.3%
Fitness Testing:      4.9 seconds, 37.6%
Report:               1.6 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 425
Test mean error for best: 0.42500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -26                 | Program output: 21                 
Correct output: -49                 | Program output: -49                
Correct output: -88                 | Program output: -88                
Correct output: -45                 | Program output: -45                
Correct output: 64                  | Program output: 64                 
Correct output: -86                 | Program output: -86                
Correct output: -42                 | Program output: -42                
Correct output: -85                 | Program output: -85                
Correct output: -68                 | Program output: 75                 
Correct output: -16                 | Program output: -16                
Correct output: -11                 | Program output: -11                
Correct output: 50                  | Program output: 50                 
Correct output: -1                  | Program output: -1                 
Correct output: 64                  | Program output: 64                 
Correct output: -85                 | Program output: -85                
Correct output: 11                  | Program output: 24                 
Correct output: 6                   | Program output: 6                  
Correct output: 37                  | Program output: 37                 
Correct output: 14                  | Program output: 26                 
Correct output: 21                  | Program output: 21                 
Correct output: 59                  | Program output: 75                 
Correct output: 14                  | Program output: 14                 
Correct output: 25                  | Program output: 64                 
Correct output: 26                  | Program output: 44                 
Correct output: 16                  | Program output: 55                 
Correct output: 58                  | Program output: 58                 
Correct output: 36                  | Program output: 36                 
Correct output: 0                   | Program output: 15                 
Correct output: 63                  | Program output: 69                 
Correct output: 3                   | Program output: 3                  
Correct output: 59                  | Program output: 59                 
Correct output: 70                  | Program output: 70                 
Correct output: 16                  | Program output: 25                 
Correct output: 5                   | Program output: 5                  
Correct output: 19                  | Program output: 21                 
Correct output: -89                 | Program output: -89                
Correct output: -30                 | Program output: 67                 
Correct output: -57                 | Program output: -57                
Correct output: -99                 | Program output: -99                
Correct output: 19                  | Program output: 19                 
Correct output: -82                 | Program output: -14                
Correct output: -86                 | Program output: -86                
Correct output: -84                 | Program output: -84                
Correct output: -94                 | Program output: -94                
Correct output: -67                 | Program output: -67                
Correct output: -66                 | Program output: -66                
Correct output: -90                 | Program output: -75                
Correct output: -33                 | Program output: 62                 
Correct output: -65                 | Program output: -62                
Correct output: -100                | Program output: 87                 
Correct output: -77                 | Program output: -62                
Correct output: -99                 | Program output: -99                
Correct output: -90                 | Program output: -90                
Correct output: -30                 | Program output: -21                
Correct output: -57                 | Program output: -57                
Correct output: -60                 | Program output: -60                
Correct output: -61                 | Program output: -61                
Correct output: -73                 | Program output: 42                 
Correct output: -71                 | Program output: -61                
Correct output: -33                 | Program output: 22                 
Correct output: -71                 | Program output: -53                
Correct output: -15                 | Program output: -15                
Correct output: -63                 | Program output: -63                
Correct output: -64                 | Program output: -64                
Correct output: 5                   | Program output: 5                  
Correct output: -86                 | Program output: -50                
Correct output: -85                 | Program output: -33                
Correct output: -64                 | Program output: -64                
Correct output: -100                | Program output: -100               
Correct output: -52                 | Program output: -52                
Correct output: -89                 | Program output: -89                
Correct output: -26                 | Program output: 30                 
Correct output: -54                 | Program output: -54                
Correct output: -76                 | Program output: -76                
Correct output: -93                 | Program output: -61                
Correct output: -80                 | Program output: -80                
Correct output: -96                 | Program output: -96                
Correct output: -60                 | Program output: 7                  
Correct output: -96                 | Program output: -96                
Correct output: -96                 | Program output: -96                
Correct output: -98                 | Program output: -77                
Correct output: -96                 | Program output: -49                
Correct output: -2                  | Program output: 43                 
Correct output: -61                 | Program output: -61                
Correct output: -47                 | Program output: -47                
Correct output: -77                 | Program output: -77                
Correct output: -59                 | Program output: -59                
Correct output: -90                 | Program output: -65                
Correct output: -10                 | Program output: -10                
Correct output: -57                 | Program output: -36                
Correct output: -74                 | Program output: -19                
Correct output: -96                 | Program output: -68                
Correct output: -70                 | Program output: 71                 
Correct output: -95                 | Program output: -45                
Correct output: -54                 | Program output: 65                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in1} {:close 0, :instruction integer_div} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_while} {:close 0, :instruction in2} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_y} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_k} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 2, :instruction boolean_or} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction 10} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_k} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_k} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_when} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_eq} {:close 0, :instruction tagged_660} {:close 1, :instruction integer_min} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction tagged_334} {:close 1, :instruction integer_flush} {:close 1, :instruction integer_max} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_s} {:close 0, :instruction exec_eq} {:close 0, :instruction in3} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup})
Lexicase best program: (in1 integer_div integer_shove exec_while () in2 boolean_yankdup exec_pop () integer_min exec_y (print_integer exec_do*count () boolean_dup_times exec_k (integer_shove boolean_swap exec_dup (exec_flush boolean_or)) (integer_swap) exec_dup_times (exec_if (10 integer_yankdup in4 exec_yank exec_k (exec_dup () exec_k (integer_inc exec_when (exec_y_when_autoconstructing (integer_lte exec_if (boolean_dup_times integer_gte integer_eq tagged_660 integer_min) (integer_yankdup) print_exec (boolean_not boolean_flush boolean_frominteger tagged_334 integer_flush) integer_max) exec_rot () (integer_swap integer_pop exec_k (boolean_flush) (boolean_flush integer_min integer_swap boolean_pop) exec_dup_items boolean_dup boolean_shove boolean_stackdepth integer_pop exec_eq integer_min in4 exec_dup_times (exec_shove (exec_pop (integer_gte integer_inc exec_s () (exec_eq in3 exec_while (integer_dup integer_add integer_max boolean_yankdup)) ())))) ())) ()) ()) ())))
Lexicase best errors: [0 0 0 0 0 1 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 109
Percent parens: 0.303
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in1} {:close 0, :instruction integer_div} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_while} {:close 0, :instruction in2} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_y} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_k} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 2, :instruction boolean_or} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction 10} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_k} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_k} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_when} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_eq} {:close 0, :instruction tagged_660} {:close 1, :instruction integer_min} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction tagged_334} {:close 1, :instruction integer_flush} {:close 1, :instruction integer_max} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_s} {:close 0, :instruction exec_eq} {:close 0, :instruction in3} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup})
Zero cases best program: (in1 integer_div integer_shove exec_while () in2 boolean_yankdup exec_pop () integer_min exec_y (print_integer exec_do*count () boolean_dup_times exec_k (integer_shove boolean_swap exec_dup (exec_flush boolean_or)) (integer_swap) exec_dup_times (exec_if (10 integer_yankdup in4 exec_yank exec_k (exec_dup () exec_k (integer_inc exec_when (exec_y_when_autoconstructing (integer_lte exec_if (boolean_dup_times integer_gte integer_eq tagged_660 integer_min) (integer_yankdup) print_exec (boolean_not boolean_flush boolean_frominteger tagged_334 integer_flush) integer_max) exec_rot () (integer_swap integer_pop exec_k (boolean_flush) (boolean_flush integer_min integer_swap boolean_pop) exec_dup_items boolean_dup boolean_shove boolean_stackdepth integer_pop exec_eq integer_min in4 exec_dup_times (exec_shove (exec_pop (integer_gte integer_inc exec_s () (exec_eq in3 exec_while (integer_dup integer_add integer_max boolean_yankdup)) ())))) ())) ()) ()) ())))
Zero cases best errors: [0 0 0 0 0 1 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 109
Percent parens: 0.303
--- Lexicase Population Statistics ---
Count of elite individuals by case: (314 419 326 326 330 444 422 693 610 416)
Population mean number of elite cases: 4.30
Count of perfect (error zero) individuals by case: (314 419 326 326 330 444 422 693 610 416)
Population mean number of perfect (error zero) cases: 4.30
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction print_integer} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 1, :instruction integer_div} {:close 2, :instruction exec_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_empty} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_add} {:close 0, :instruction -75} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_s} {:close 0, :instruction integer_max} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_div} {:close 0, :instruction -88} {:close 1, :instruction exec_while} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_add} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup_times})
Best program: (print_integer exec_swap (in1 integer_div) (exec_dup_items) exec_rot (integer_empty print_integer) (integer_dup_times integer_add) (-75 in2 in1 integer_min) boolean_eq exec_eq boolean_flush boolean_dup_items integer_yankdup exec_shove (integer_sub integer_fromboolean boolean_invert_second_then_and integer_pop exec_yank) exec_stackdepth boolean_shove exec_s () (integer_max integer_lte integer_div -88 exec_while () exec_s (boolean_pop boolean_frominteger integer_add) (integer_rot exec_yankdup exec_do*while () in3 boolean_and boolean_dup exec_s_when_autoconstructing (integer_sub boolean_and exec_rot () (boolean_yank integer_max boolean_flush boolean_and exec_dup_times (boolean_frominteger integer_dup_times)) ()) () ()) ()) ())
Errors: [0 0 0 0 0 1 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 54
Size: 76
Percent parens: 0.289
--- Population Statistics ---
Average total errors in population: 5.7
Median total errors in population: 4
Error averages by case: (0.686 0.581 0.674 0.674 0.67 0.556 0.578 0.307 0.39 0.584)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 70.003
Average program size in population (points): 94.198
Average percent parens in population: 0.257
Minimum age in population: 6.0
Maximum age in population: 6.0
Average age in population: 6.0
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.01
Error (vector) diversity:			 0.047
Behavioral diversity:				 0.223
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 3602188
--- Timings ---
Current time: 1559594056888 milliseconds
Total Time:          14.8 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         7.5 seconds, 50.6%
Fitness Testing:      5.4 seconds, 36.3%
Report:               1.8 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 445
Test mean error for best: 0.44500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -26                 | Program output: -26                
Correct output: -49                 | Program output: -49                
Correct output: -88                 | Program output: -88                
Correct output: -45                 | Program output: 47                 
Correct output: 64                  | Program output: 64                 
Correct output: -86                 | Program output: -86                
Correct output: -42                 | Program output: 89                 
Correct output: -85                 | Program output: -85                
Correct output: -68                 | Program output: -68                
Correct output: -16                 | Program output: 61                 
Correct output: -11                 | Program output: -11                
Correct output: 50                  | Program output: 50                 
Correct output: -1                  | Program output: -1                 
Correct output: 64                  | Program output: 64                 
Correct output: -85                 | Program output: -85                
Correct output: 11                  | Program output: 24                 
Correct output: 6                   | Program output: 6                  
Correct output: 37                  | Program output: 38                 
Correct output: 14                  | Program output: 26                 
Correct output: 21                  | Program output: 21                 
Correct output: 59                  | Program output: 59                 
Correct output: 14                  | Program output: 14                 
Correct output: 25                  | Program output: 25                 
Correct output: 26                  | Program output: 26                 
Correct output: 16                  | Program output: 16                 
Correct output: 58                  | Program output: 58                 
Correct output: 36                  | Program output: 72                 
Correct output: 0                   | Program output: 0                  
Correct output: 63                  | Program output: 63                 
Correct output: 3                   | Program output: 3                  
Correct output: 59                  | Program output: 59                 
Correct output: 70                  | Program output: 70                 
Correct output: 16                  | Program output: 41                 
Correct output: 5                   | Program output: 70                 
Correct output: 19                  | Program output: 19                 
Correct output: -89                 | Program output: -26                
Correct output: -30                 | Program output: -30                
Correct output: -57                 | Program output: -57                
Correct output: -99                 | Program output: -99                
Correct output: 19                  | Program output: 19                 
Correct output: -82                 | Program output: -82                
Correct output: -86                 | Program output: 32                 
Correct output: -84                 | Program output: -64                
Correct output: -94                 | Program output: -94                
Correct output: -67                 | Program output: -12                
Correct output: -66                 | Program output: -66                
Correct output: -90                 | Program output: -90                
Correct output: -33                 | Program output: -33                
Correct output: -65                 | Program output: -65                
Correct output: -100                | Program output: -9                 
Correct output: -77                 | Program output: -16                
Correct output: -99                 | Program output: -99                
Correct output: -90                 | Program output: -90                
Correct output: -30                 | Program output: -21                
Correct output: -57                 | Program output: -57                
Correct output: -60                 | Program output: -60                
Correct output: -61                 | Program output: 24                 
Correct output: -73                 | Program output: -73                
Correct output: -71                 | Program output: -71                
Correct output: -33                 | Program output: -6                 
Correct output: -71                 | Program output: -71                
Correct output: -15                 | Program output: -15                
Correct output: -63                 | Program output: -12                
Correct output: -64                 | Program output: -64                
Correct output: 5                   | Program output: 10                 
Correct output: -86                 | Program output: -86                
Correct output: -85                 | Program output: -85                
Correct output: -64                 | Program output: -64                
Correct output: -100                | Program output: -100               
Correct output: -52                 | Program output: -52                
Correct output: -89                 | Program output: -89                
Correct output: -26                 | Program output: 11                 
Correct output: -54                 | Program output: -54                
Correct output: -76                 | Program output: -65                
Correct output: -93                 | Program output: -55                
Correct output: -80                 | Program output: -77                
Correct output: -96                 | Program output: -96                
Correct output: -60                 | Program output: -60-60             
Correct output: -96                 | Program output: -78                
Correct output: -96                 | Program output: -14                
Correct output: -98                 | Program output: -98                
Correct output: -96                 | Program output: -19                
Correct output: -2                  | Program output: -2                 
Correct output: -61                 | Program output: -38                
Correct output: -47                 | Program output: -47                
Correct output: -77                 | Program output: -77                
Correct output: -59                 | Program output: 30                 
Correct output: -90                 | Program output: 44                 
Correct output: -10                 | Program output: -10                
Correct output: -57                 | Program output: -57                
Correct output: -74                 | Program output: -74                
Correct output: -96                 | Program output: -96                
Correct output: -70                 | Program output: 59                 
Correct output: -95                 | Program output: -95                
Correct output: -54                 | Program output: 16                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction print_integer} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 2, :instruction exec_dup_items} {:close 1, :instruction integer_gte} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_rot} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_add} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 1, :instruction exec_eq} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_sub} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction in3} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_flush} {:close 0, :instruction -25} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_boolean})
Lexicase best program: (print_integer exec_noop exec_swap (in1 exec_dup_items) () integer_gte exec_do*range () exec_rot (print_integer) (integer_dup_times integer_add) (in2 in4 in1 integer_min) exec_eq print_integer boolean_flush exec_do*range (boolean_dup_items boolean_yank exec_shove (integer_fromboolean integer_yank integer_pop boolean_yankdup boolean_shove exec_s () (integer_lte exec_while () boolean_eq) (boolean_frominteger integer_sub) integer_add) boolean_stackdepth exec_yankdup integer_flush in3 boolean_and exec_flush -25 exec_rot () (integer_pop boolean_yank boolean_and integer_empty exec_dup_times (exec_swap () (integer_dup_times print_boolean))) ()))
Lexicase best errors: [0 0 1 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 69
Percent parens: 0.275
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction print_integer} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 2, :instruction exec_dup_items} {:close 1, :instruction integer_gte} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_rot} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_add} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 1, :instruction exec_eq} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_sub} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction in3} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_flush} {:close 0, :instruction -25} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_boolean})
Zero cases best program: (print_integer exec_noop exec_swap (in1 exec_dup_items) () integer_gte exec_do*range () exec_rot (print_integer) (integer_dup_times integer_add) (in2 in4 in1 integer_min) exec_eq print_integer boolean_flush exec_do*range (boolean_dup_items boolean_yank exec_shove (integer_fromboolean integer_yank integer_pop boolean_yankdup boolean_shove exec_s () (integer_lte exec_while () boolean_eq) (boolean_frominteger integer_sub) integer_add) boolean_stackdepth exec_yankdup integer_flush in3 boolean_and exec_flush -25 exec_rot () (integer_pop boolean_yank boolean_and integer_empty exec_dup_times (exec_swap () (integer_dup_times print_boolean))) ()))
Zero cases best errors: [0 0 1 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 69
Percent parens: 0.275
--- Lexicase Population Statistics ---
Count of elite individuals by case: (585 483 414 485 487 5 5 6 486 5)
Population mean number of elite cases: 2.96
Count of perfect (error zero) individuals by case: (585 483 414 485 487 5 5 6 486 5)
Population mean number of perfect (error zero) cases: 2.96
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction print_integer} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 2, :instruction exec_dup_items} {:close 1, :instruction integer_gte} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_rot} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_add} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 1, :instruction exec_eq} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_sub} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction in3} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_flush} {:close 0, :instruction -25} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_boolean})
Best program: (print_integer exec_noop exec_swap (in1 exec_dup_items) () integer_gte exec_do*range () exec_rot (print_integer) (integer_dup_times integer_add) (in2 in4 in1 integer_min) exec_eq print_integer boolean_flush exec_do*range (boolean_dup_items boolean_yank exec_shove (integer_fromboolean integer_yank integer_pop boolean_yankdup boolean_shove exec_s () (integer_lte exec_while () boolean_eq) (boolean_frominteger integer_sub) integer_add) boolean_stackdepth exec_yankdup integer_flush in3 boolean_and exec_flush -25 exec_rot () (integer_pop boolean_yank boolean_and integer_empty exec_dup_times (exec_swap () (integer_dup_times print_boolean))) ()))
Errors: [0 0 1 0 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 50
Size: 69
Percent parens: 0.275
--- Population Statistics ---
Average total errors in population: 7.039
Median total errors in population: 8
Error averages by case: (0.415 0.517 0.586 0.515 0.513 0.995 0.995 0.994 0.514 0.995)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 64.515
Average program size in population (points): 87.514
Average percent parens in population: 0.263
Minimum age in population: 7.0
Maximum age in population: 7.0
Average age in population: 7.0
Median age in population: 7.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.008
Error (vector) diversity:			 0.025
Behavioral diversity:				 0.196
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 4147185
--- Timings ---
Current time: 1559594058923 milliseconds
Total Time:          17.2 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         8.6 seconds, 50.3%
Fitness Testing:      6.0 seconds, 34.7%
Report:               2.5 seconds, 14.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 410
Test mean error for best: 0.41000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -26                 | Program output: 21                 
Correct output: -49                 | Program output: 99                 
Correct output: -88                 | Program output: -88                
Correct output: -45                 | Program output: -45                
Correct output: 64                  | Program output: 64                 
Correct output: -86                 | Program output: -86                
Correct output: -42                 | Program output: -42                
Correct output: -85                 | Program output: -85                
Correct output: -68                 | Program output: 75                 
Correct output: -16                 | Program output: -16                
Correct output: -11                 | Program output: -11                
Correct output: 50                  | Program output: 50                 
Correct output: -1                  | Program output: -1                 
Correct output: 64                  | Program output: 64                 
Correct output: -85                 | Program output: -85                
Correct output: 11                  | Program output: 11                 
Correct output: 6                   | Program output: 76                 
Correct output: 37                  | Program output: 37                 
Correct output: 14                  | Program output: 14                 
Correct output: 21                  | Program output: 33                 
Correct output: 59                  | Program output: 75                 
Correct output: 14                  | Program output: 14                 
Correct output: 25                  | Program output: 51                 
Correct output: 26                  | Program output: 51                 
Correct output: 16                  | Program output: 42                 
Correct output: 58                  | Program output: 86                 
Correct output: 36                  | Program output: 36                 
Correct output: 0                   | Program output: 52                 
Correct output: 63                  | Program output: 69                 
Correct output: 3                   | Program output: 85                 
Correct output: 59                  | Program output: 84                 
Correct output: 70                  | Program output: 80                 
Correct output: 16                  | Program output: 16                 
Correct output: 5                   | Program output: 5                  
Correct output: 19                  | Program output: 21                 
Correct output: -89                 | Program output: -89                
Correct output: -30                 | Program output: 9                  
Correct output: -57                 | Program output: 67                 
Correct output: -99                 | Program output: 41                 
Correct output: 19                  | Program output: 82                 
Correct output: -82                 | Program output: -13                
Correct output: -86                 | Program output: -86                
Correct output: -84                 | Program output: -84                
Correct output: -94                 | Program output: 13                 
Correct output: -67                 | Program output: -67                
Correct output: -66                 | Program output: 12                 
Correct output: -90                 | Program output: -21                
Correct output: -33                 | Program output: -22                
Correct output: -65                 | Program output: -49                
Correct output: -100                | Program output: -100               
Correct output: -77                 | Program output: -77                
Correct output: -99                 | Program output: 9                  
Correct output: -90                 | Program output: -9                 
Correct output: -30                 | Program output: -30                
Correct output: -57                 | Program output: -50                
Correct output: -60                 | Program output: -20                
Correct output: -61                 | Program output: -61                
Correct output: -73                 | Program output: 36                 
Correct output: -71                 | Program output: -8                 
Correct output: -33                 | Program output: -33                
Correct output: -71                 | Program output: -53                
Correct output: -15                 | Program output: 12                 
Correct output: -63                 | Program output: -63                
Correct output: -64                 | Program output: 22                 
Correct output: 5                   | Program output: 5                  
Correct output: -86                 | Program output: -40                
Correct output: -85                 | Program output: -33                
Correct output: -64                 | Program output: -45                
Correct output: -100                | Program output: 56                 
Correct output: -52                 | Program output: -15                
Correct output: -89                 | Program output: -32                
Correct output: -26                 | Program output: -26                
Correct output: -54                 | Program output: -48                
Correct output: -76                 | Program output: -76                
Correct output: -93                 | Program output: -93                
Correct output: -80                 | Program output: -80                
Correct output: -96                 | Program output: -34                
Correct output: -60                 | Program output: 26                 
Correct output: -96                 | Program output: -96                
Correct output: -96                 | Program output: -96                
Correct output: -98                 | Program output: -9                 
Correct output: -96                 | Program output: -96                
Correct output: -2                  | Program output: 70                 
Correct output: -61                 | Program output: -61                
Correct output: -47                 | Program output: -24                
Correct output: -77                 | Program output: 27                 
Correct output: -59                 | Program output: -59                
Correct output: -90                 | Program output: -90                
Correct output: -10                 | Program output: 25                 
Correct output: -57                 | Program output: -14                
Correct output: -74                 | Program output: -19                
Correct output: -96                 | Program output: -66                
Correct output: -70                 | Program output: -70                
Correct output: -95                 | Program output: -55                
Correct output: -54                 | Program output: -54                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction print_integer} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 2, :instruction exec_dup_items} {:close 1, :instruction integer_gte} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_rot} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_add} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 1, :instruction integer_min} {:close 1, :instruction exec_eq} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_sub} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction -25} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_stackdepth})
Lexicase best program: (print_integer exec_noop exec_swap (in1 exec_dup_items) () integer_gte exec_do*range () exec_rot (print_integer) (integer_dup_times integer_add) (in2 in4 in1 integer_min integer_min) exec_eq print_integer boolean_flush exec_do*range (boolean_dup_items boolean_yank exec_shove (integer_fromboolean integer_yank integer_pop boolean_shove exec_s () (integer_lte exec_while () boolean_eq) (boolean_frominteger integer_sub) integer_add) boolean_stackdepth exec_yankdup in3 boolean_and exec_flush exec_k_when_autoconstructing (-25 exec_shove (exec_rot () (integer_pop boolean_yank boolean_and integer_empty exec_dup_times (exec_swap () (integer_dup_times print_boolean integer_stackdepth))) ())) ()))
Lexicase best errors: [1 1 0 0 1 0 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 74
Percent parens: 0.297
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction print_integer} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 2, :instruction exec_dup_items} {:close 1, :instruction integer_gte} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_rot} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_add} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 1, :instruction integer_min} {:close 1, :instruction exec_eq} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_sub} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction -25} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_stackdepth})
Zero cases best program: (print_integer exec_noop exec_swap (in1 exec_dup_items) () integer_gte exec_do*range () exec_rot (print_integer) (integer_dup_times integer_add) (in2 in4 in1 integer_min integer_min) exec_eq print_integer boolean_flush exec_do*range (boolean_dup_items boolean_yank exec_shove (integer_fromboolean integer_yank integer_pop boolean_shove exec_s () (integer_lte exec_while () boolean_eq) (boolean_frominteger integer_sub) integer_add) boolean_stackdepth exec_yankdup in3 boolean_and exec_flush exec_k_when_autoconstructing (-25 exec_shove (exec_rot () (integer_pop boolean_yank boolean_and integer_empty exec_dup_times (exec_swap () (integer_dup_times print_boolean integer_stackdepth))) ())) ()))
Zero cases best errors: [1 1 0 0 1 0 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 74
Percent parens: 0.297
--- Lexicase Population Statistics ---
Count of elite individuals by case: (7 3 475 532 3 341 429 403 532 231)
Population mean number of elite cases: 2.96
Count of perfect (error zero) individuals by case: (7 3 475 532 3 341 429 403 532 231)
Population mean number of perfect (error zero) cases: 2.96
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_empty} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 2, :instruction boolean_dup_times} {:close 2, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction 10} {:close 0, :instruction in4} {:close 0, :instruction exec_k} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_when} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_min} {:close 0, :instruction exec_while} {:close 0, :instruction exec_empty} {:close 0, :instruction in4} {:close 0, :instruction print_exec} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction tagged_334} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_div} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction print_integer} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yankdup})
Best program: (integer_empty in1 in3 exec_eq boolean_dup_times in4 in2 integer_min print_integer boolean_dup_times integer_shove boolean_swap boolean_yankdup exec_dup_times (exec_if (10 in4 exec_k (exec_dup () exec_if (exec_k (boolean_pop integer_sub exec_eq) (exec_rot (boolean_eq boolean_eq integer_inc exec_when (exec_if (exec_do*while (boolean_dup_times integer_eq boolean_invert_first_then_and) integer_min) (exec_while (exec_empty in4 print_exec (boolean_stackdepth) boolean_frominteger tagged_334 boolean_shove exec_s_when_autoconstructing (integer_flush) (boolean_and integer_rot) (boolean_flush integer_min exec_eq integer_swap boolean_stackdepth integer_pop exec_eq exec_dup_times (integer_div exec_pop (integer_mod boolean_xor) exec_k (boolean_yankdup exec_shove () integer_gte integer_inc exec_eq integer_dup exec_stackdepth print_integer integer_add boolean_yankdup) ())))))) () ())) ()) ()) ()))
Errors: [0 0 0 0 0 1 1 1 0 0]
Total: 3
Mean: 0.3
Genome size: 70
Size: 98
Percent parens: 0.286
--- Population Statistics ---
Average total errors in population: 7.044
Median total errors in population: 6
Error averages by case: (0.993 0.997 0.525 0.468 0.997 0.659 0.571 0.597 0.468 0.769)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 53.621
Average program size in population (points): 73.747
Average percent parens in population: 0.272
Minimum age in population: 8.0
Maximum age in population: 8.0
Average age in population: 8.0
Median age in population: 8.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.008
Error (vector) diversity:			 0.024
Behavioral diversity:				 0.188
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 4630646
--- Timings ---
Current time: 1559594060800 milliseconds
Total Time:          19.1 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:         9.8 seconds, 51.1%
Fitness Testing:      6.4 seconds, 33.7%
Report:               2.8 seconds, 14.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 213
Test mean error for best: 0.21300
Test Case    0 | Error: 1
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 1
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 1
Test Case   24 | Error: 1
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 1
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 1
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 1
Test Case   44 | Error: 0
Test Case   45 | Error: 1
Test Case   46 | Error: 1
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 1
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 1
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 1
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 1
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 1
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 1
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 1
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 1
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 1
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 1
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 1
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 1
Test Case  214 | Error: 1
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 1
Test Case  218 | Error: 0
Test Case  219 | Error: 1
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 1
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 1
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 1
Test Case  245 | Error: 1
Test Case  246 | Error: 1
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 1
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 1
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 1
Test Case  260 | Error: 0
Test Case  261 | Error: 1
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 1
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 1
Test Case  277 | Error: 0
Test Case  278 | Error: 1
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 1
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 1
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 1
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 1
Test Case  307 | Error: 0
Test Case  308 | Error: 1
Test Case  309 | Error: 1
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 1
Test Case  327 | Error: 1
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 1
Test Case  331 | Error: 0
Test Case  332 | Error: 1
Test Case  333 | Error: 0
Test Case  334 | Error: 1
Test Case  335 | Error: 1
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 1
Test Case  349 | Error: 0
Test Case  350 | Error: 1
Test Case  351 | Error: 0
Test Case  352 | Error: 1
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 1
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 1
Test Case  365 | Error: 1
Test Case  366 | Error: 0
Test Case  367 | Error: 1
Test Case  368 | Error: 1
Test Case  369 | Error: 0
Test Case  370 | Error: 1
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 1
Test Case  377 | Error: 0
Test Case  378 | Error: 1
Test Case  379 | Error: 0
Test Case  380 | Error: 1
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 1
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 1
Test Case  391 | Error: 1
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 1
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 1
Test Case  418 | Error: 0
Test Case  419 | Error: 1
Test Case  420 | Error: 0
Test Case  421 | Error: 1
Test Case  422 | Error: 1
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 1
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 1
Test Case  438 | Error: 0
Test Case  439 | Error: 1
Test Case  440 | Error: 0
Test Case  441 | Error: 1
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 1
Test Case  445 | Error: 1
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 1
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 1
Test Case  455 | Error: 0
Test Case  456 | Error: 1
Test Case  457 | Error: 1
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 1
Test Case  471 | Error: 1
Test Case  472 | Error: 1
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 1
Test Case  476 | Error: 0
Test Case  477 | Error: 1
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 1
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 1
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 1
Test Case  500 | Error: 0
Test Case  501 | Error: 1
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 1
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 1
Test Case  513 | Error: 0
Test Case  514 | Error: 1
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 1
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 1
Test Case  532 | Error: 0
Test Case  533 | Error: 1
Test Case  534 | Error: 0
Test Case  535 | Error: 1
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 1
Test Case  545 | Error: 0
Test Case  546 | Error: 1
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 1
Test Case  559 | Error: 0
Test Case  560 | Error: 1
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 1
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 1
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 1
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 1
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 1
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 1
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 1
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 1
Test Case  598 | Error: 1
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 1
Test Case  606 | Error: 1
Test Case  607 | Error: 0
Test Case  608 | Error: 1
Test Case  609 | Error: 0
Test Case  610 | Error: 1
Test Case  611 | Error: 1
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 1
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 1
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 1
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 1
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 1
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 1
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 1
Test Case  645 | Error: 1
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 1
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 1
Test Case  652 | Error: 1
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 1
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 1
Test Case  659 | Error: 1
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 1
Test Case  664 | Error: 1
Test Case  665 | Error: 1
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 1
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 1
Test Case  689 | Error: 1
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 1
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 1
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 1
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 1
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 1
Test Case  714 | Error: 0
Test Case  715 | Error: 1
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 1
Test Case  720 | Error: 1
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 1
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 1
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 1
Test Case  737 | Error: 1
Test Case  738 | Error: 1
Test Case  739 | Error: 1
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 1
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 1
Test Case  750 | Error: 0
Test Case  751 | Error: 1
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 1
Test Case  761 | Error: 0
Test Case  762 | Error: 1
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 1
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 1
Test Case  776 | Error: 0
Test Case  777 | Error: 1
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 1
Test Case  782 | Error: 1
Test Case  783 | Error: 1
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 1
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 1
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 1
Test Case  796 | Error: 1
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 1
Test Case  802 | Error: 0
Test Case  803 | Error: 1
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 1
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 1
Test Case  812 | Error: 1
Test Case  813 | Error: 1
Test Case  814 | Error: 1
Test Case  815 | Error: 0
Test Case  816 | Error: 1
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 1
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 1
Test Case  832 | Error: 1
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 1
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 1
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 1
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 1
Test Case  855 | Error: 0
Test Case  856 | Error: 1
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 1
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 1
Test Case  870 | Error: 1
Test Case  871 | Error: 1
Test Case  872 | Error: 1
Test Case  873 | Error: 1
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 1
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 1
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 1
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 1
Test Case  898 | Error: 0
Test Case  899 | Error: 1
Test Case  900 | Error: 1
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 1
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 1
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 1
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 1
Test Case  928 | Error: 1
Test Case  929 | Error: 1
Test Case  930 | Error: 0
Test Case  931 | Error: 1
Test Case  932 | Error: 0
Test Case  933 | Error: 1
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 1
Test Case  937 | Error: 0
Test Case  938 | Error: 1
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 1
Test Case  951 | Error: 1
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 1
Test Case  958 | Error: 0
Test Case  959 | Error: 1
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 1
Test Case  964 | Error: 1
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 1
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 1
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 1
Test Case  979 | Error: 1
Test Case  980 | Error: 1
Test Case  981 | Error: 1
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 1
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 1
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -26                 | Program output: 21                 
Correct output: -49                 | Program output: -49                
Correct output: -88                 | Program output: -88                
Correct output: -45                 | Program output: -45                
Correct output: 64                  | Program output: 64                 
Correct output: -86                 | Program output: -86                
Correct output: -42                 | Program output: -42                
Correct output: -85                 | Program output: -85                
Correct output: -68                 | Program output: 75                 
Correct output: -16                 | Program output: -16                
Correct output: -11                 | Program output: -11                
Correct output: 50                  | Program output: 50                 
Correct output: -1                  | Program output: -1                 
Correct output: 64                  | Program output: 64                 
Correct output: -85                 | Program output: -85                
Correct output: 11                  | Program output: 11                 
Correct output: 6                   | Program output: 6                  
Correct output: 37                  | Program output: 37                 
Correct output: 14                  | Program output: 14                 
Correct output: 21                  | Program output: 21                 
Correct output: 59                  | Program output: 75                 
Correct output: 14                  | Program output: 14                 
Correct output: 25                  | Program output: 51                 
Correct output: 26                  | Program output: 44                 
Correct output: 16                  | Program output: 42                 
Correct output: 58                  | Program output: 58                 
Correct output: 36                  | Program output: 36                 
Correct output: 0                   | Program output: 15                 
Correct output: 63                  | Program output: 69                 
Correct output: 3                   | Program output: 3                  
Correct output: 59                  | Program output: 59                 
Correct output: 70                  | Program output: 70                 
Correct output: 16                  | Program output: 16                 
Correct output: 5                   | Program output: 5                  
Correct output: 19                  | Program output: 21                 
Correct output: -89                 | Program output: -89                
Correct output: -30                 | Program output: 9                  
Correct output: -57                 | Program output: -57                
Correct output: -99                 | Program output: -99                
Correct output: 19                  | Program output: 19                 
Correct output: -82                 | Program output: -14                
Correct output: -86                 | Program output: -86                
Correct output: -84                 | Program output: -84                
Correct output: -94                 | Program output: -94                
Correct output: -67                 | Program output: -67                
Correct output: -66                 | Program output: -66                
Correct output: -90                 | Program output: -75                
Correct output: -33                 | Program output: -22                
Correct output: -65                 | Program output: -62                
Correct output: -100                | Program output: -100               
Correct output: -77                 | Program output: -77                
Correct output: -99                 | Program output: -99                
Correct output: -90                 | Program output: -90                
Correct output: -30                 | Program output: -30                
Correct output: -57                 | Program output: -57                
Correct output: -60                 | Program output: -60                
Correct output: -61                 | Program output: -61                
Correct output: -73                 | Program output: 36                 
Correct output: -71                 | Program output: -61                
Correct output: -33                 | Program output: -33                
Correct output: -71                 | Program output: -53                
Correct output: -15                 | Program output: -15                
Correct output: -63                 | Program output: -63                
Correct output: -64                 | Program output: -64                
Correct output: 5                   | Program output: 5                  
Correct output: -86                 | Program output: -50                
Correct output: -85                 | Program output: -33                
Correct output: -64                 | Program output: -64                
Correct output: -100                | Program output: -100               
Correct output: -52                 | Program output: -52                
Correct output: -89                 | Program output: -89                
Correct output: -26                 | Program output: -26                
Correct output: -54                 | Program output: -54                
Correct output: -76                 | Program output: -76                
Correct output: -93                 | Program output: -93                
Correct output: -80                 | Program output: -80                
Correct output: -96                 | Program output: -96                
Correct output: -60                 | Program output: 7                  
Correct output: -96                 | Program output: -96                
Correct output: -96                 | Program output: -96                
Correct output: -98                 | Program output: -77                
Correct output: -96                 | Program output: -96                
Correct output: -2                  | Program output: 43                 
Correct output: -61                 | Program output: -61                
Correct output: -47                 | Program output: -47                
Correct output: -77                 | Program output: -77                
Correct output: -59                 | Program output: -59                
Correct output: -90                 | Program output: -90                
Correct output: -10                 | Program output: -10                
Correct output: -57                 | Program output: -36                
Correct output: -74                 | Program output: -19                
Correct output: -96                 | Program output: -68                
Correct output: -70                 | Program output: -70                
Correct output: -95                 | Program output: -55                
Correct output: -54                 | Program output: -54                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 2, :instruction boolean_dup_times} {:close 2, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_if} {:close 0, :instruction 10} {:close 0, :instruction in4} {:close 0, :instruction exec_k} {:close 0, :instruction in1} {:close 0, :instruction exec_if} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_when} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_min} {:close 0, :instruction exec_while} {:close 0, :instruction exec_empty} {:close 0, :instruction in4} {:close 0, :instruction print_exec} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_div} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_if} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_exec_357} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction print_integer} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yankdup})
Lexicase best program: (in1 in3 exec_eq boolean_dup_times in4 in2 integer_min integer_min print_integer boolean_dup_times integer_shove boolean_swap boolean_yankdup exec_dup_times (integer_yank exec_if (10 in4 exec_k (in1 exec_if (exec_k (boolean_pop integer_sub exec_eq) (exec_rot (boolean_eq boolean_eq exec_k_when_autoconstructing (integer_inc exec_when (exec_if (exec_do*while (boolean_dup_times integer_eq boolean_invert_first_then_and) integer_min) (exec_while (exec_empty in4 print_exec (boolean_stackdepth) boolean_frominteger boolean_shove exec_s_when_autoconstructing (boolean_and integer_rot) (boolean_flush integer_min exec_eq integer_swap boolean_stackdepth integer_pop exec_eq exec_dup_times (integer_div exec_pop (boolean_xor) exec_k (boolean_yankdup integer_sub exec_shove () integer_gte integer_inc exec_if (exec_eq integer_dup tag_exec_357 (integer_lt exec_stackdepth print_integer integer_add boolean_yankdup)) ()) ())) ())))) ()) () ())) ()) ()) ()))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 105
Percent parens: 0.305
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 2, :instruction boolean_dup_times} {:close 2, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_if} {:close 0, :instruction 10} {:close 0, :instruction in4} {:close 0, :instruction exec_k} {:close 0, :instruction in1} {:close 0, :instruction exec_if} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_when} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_min} {:close 0, :instruction exec_while} {:close 0, :instruction exec_empty} {:close 0, :instruction in4} {:close 0, :instruction print_exec} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_div} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_if} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_exec_357} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction print_integer} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yankdup})
Zero cases best program: (in1 in3 exec_eq boolean_dup_times in4 in2 integer_min integer_min print_integer boolean_dup_times integer_shove boolean_swap boolean_yankdup exec_dup_times (integer_yank exec_if (10 in4 exec_k (in1 exec_if (exec_k (boolean_pop integer_sub exec_eq) (exec_rot (boolean_eq boolean_eq exec_k_when_autoconstructing (integer_inc exec_when (exec_if (exec_do*while (boolean_dup_times integer_eq boolean_invert_first_then_and) integer_min) (exec_while (exec_empty in4 print_exec (boolean_stackdepth) boolean_frominteger boolean_shove exec_s_when_autoconstructing (boolean_and integer_rot) (boolean_flush integer_min exec_eq integer_swap boolean_stackdepth integer_pop exec_eq exec_dup_times (integer_div exec_pop (boolean_xor) exec_k (boolean_yankdup integer_sub exec_shove () integer_gte integer_inc exec_if (exec_eq integer_dup tag_exec_357 (integer_lt exec_stackdepth print_integer integer_add boolean_yankdup)) ()) ())) ())))) ()) () ())) ()) ()) ()))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 105
Percent parens: 0.305
--- Lexicase Population Statistics ---
Count of elite individuals by case: (534 319 284 661 553 284 318 525 530 288)
Population mean number of elite cases: 4.30
Count of perfect (error zero) individuals by case: (534 319 284 661 553 284 318 525 530 288)
Population mean number of perfect (error zero) cases: 4.30
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 2, :instruction boolean_dup_times} {:close 2, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_if} {:close 0, :instruction 10} {:close 0, :instruction in4} {:close 0, :instruction exec_k} {:close 0, :instruction in1} {:close 0, :instruction exec_if} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_when} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_min} {:close 0, :instruction exec_while} {:close 0, :instruction exec_empty} {:close 0, :instruction in4} {:close 0, :instruction print_exec} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_div} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_if} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_exec_357} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction print_integer} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yankdup})
Best program: (in1 in3 exec_eq boolean_dup_times in4 in2 integer_min integer_min print_integer boolean_dup_times integer_shove boolean_swap boolean_yankdup exec_dup_times (integer_yank exec_if (10 in4 exec_k (in1 exec_if (exec_k (boolean_pop integer_sub exec_eq) (exec_rot (boolean_eq boolean_eq exec_k_when_autoconstructing (integer_inc exec_when (exec_if (exec_do*while (boolean_dup_times integer_eq boolean_invert_first_then_and) integer_min) (exec_while (exec_empty in4 print_exec (boolean_stackdepth) boolean_frominteger boolean_shove exec_s_when_autoconstructing (boolean_and integer_rot) (boolean_flush integer_min exec_eq integer_swap boolean_stackdepth integer_pop exec_eq exec_dup_times (integer_div exec_pop (boolean_xor) exec_k (boolean_yankdup integer_sub exec_shove () integer_gte integer_inc exec_if (exec_eq integer_dup tag_exec_357 (integer_lt exec_stackdepth print_integer integer_add boolean_yankdup)) ()) ())) ())))) ()) () ())) ()) ()) ()))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 73
Size: 105
Percent parens: 0.305
--- Population Statistics ---
Average total errors in population: 5.704
Median total errors in population: 6
Error averages by case: (0.466 0.681 0.716 0.339 0.447 0.716 0.682 0.475 0.47 0.712)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 61.206
Average program size in population (points): 85.125
Average percent parens in population: 0.281
Minimum age in population: 9.0
Maximum age in population: 9.0
Average age in population: 9.0
Median age in population: 9.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.01
Error (vector) diversity:			 0.037
Behavioral diversity:				 0.162
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 5064388
--- Timings ---
Current time: 1559594062635 milliseconds
Total Time:          20.9 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        10.9 seconds, 51.9%
Fitness Testing:      6.9 seconds, 33.0%
Report:               3.1 seconds, 14.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 9
Successful program: (in1 in3 exec_eq boolean_dup_times in4 in2 integer_min integer_min print_integer boolean_dup_times integer_shove boolean_swap boolean_yankdup exec_dup_times (integer_yank exec_if (10 in4 exec_k (in1 exec_if (exec_k (boolean_pop integer_sub exec_eq) (exec_rot (boolean_eq boolean_eq exec_k_when_autoconstructing (integer_inc exec_when (exec_if (exec_do*while (boolean_dup_times integer_eq boolean_invert_first_then_and) integer_min) (exec_while (exec_empty in4 print_exec (boolean_stackdepth) boolean_frominteger boolean_shove exec_s_when_autoconstructing (boolean_and integer_rot) (boolean_flush integer_min exec_eq integer_swap boolean_stackdepth integer_pop exec_eq exec_dup_times (integer_div exec_pop (boolean_xor) exec_k (boolean_yankdup integer_sub exec_shove () integer_gte integer_inc exec_if (exec_eq integer_dup tag_exec_357 (integer_lt exec_stackdepth print_integer integer_add boolean_yankdup)) ()) ())) ())))) ()) () ())) ()) ()) ()))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 105


Auto-simplifying with starting size: 105
step: 0
program: (in1 in3 exec_eq boolean_dup_times in4 in2 integer_min integer_min print_integer boolean_dup_times integer_shove boolean_swap boolean_yankdup exec_dup_times (integer_yank exec_if (10 in4 exec_k (in1 exec_if (exec_k (boolean_pop integer_sub exec_eq) (exec_rot (boolean_eq boolean_eq exec_k_when_autoconstructing (integer_inc exec_when (exec_if (exec_do*while (boolean_dup_times integer_eq boolean_invert_first_then_and) integer_min) (exec_while (exec_empty in4 print_exec (boolean_stackdepth) boolean_frominteger boolean_shove exec_s_when_autoconstructing (boolean_and integer_rot) (boolean_flush integer_min exec_eq integer_swap boolean_stackdepth integer_pop exec_eq exec_dup_times (integer_div exec_pop (boolean_xor) exec_k (boolean_yankdup integer_sub exec_shove () integer_gte integer_inc exec_if (exec_eq integer_dup tag_exec_357 (integer_lt exec_stackdepth print_integer integer_add boolean_yankdup)) ()) ())) ())))) ()) () ())) ()) ()) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 105

step: 500
program: (in1 in3 exec_eq boolean_dup_times in4 in2 integer_min integer_min print_integer boolean_dup_times integer_shove boolean_swap boolean_yankdup exec_dup_times (integer_yank exec_if (10 in4 exec_k (in1 exec_if (exec_k (boolean_pop integer_sub exec_eq) (exec_rot (boolean_eq boolean_eq exec_k_when_autoconstructing (integer_inc exec_when (exec_if (exec_do*while (boolean_dup_times integer_eq boolean_invert_first_then_and) integer_min) (exec_while (exec_empty in4 print_exec (boolean_stackdepth) boolean_frominteger boolean_shove exec_s_when_autoconstructing (boolean_and integer_rot) (boolean_flush integer_min exec_eq integer_swap boolean_stackdepth integer_pop exec_eq exec_dup_times (integer_div exec_pop (boolean_xor) exec_k (boolean_yankdup integer_sub exec_shove () integer_gte integer_inc exec_if (exec_eq integer_dup tag_exec_357 (integer_lt exec_stackdepth print_integer integer_add boolean_yankdup)) ()) ())) ())))) ()) () ())) ()) ()) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 105

step: 1000
program: (in1 in3 exec_eq boolean_dup_times in4 in2 integer_min integer_min print_integer boolean_dup_times integer_shove boolean_swap boolean_yankdup exec_dup_times (integer_yank exec_if (10 in4 exec_k (in1 exec_if (exec_k (boolean_pop integer_sub exec_eq) (exec_rot (boolean_eq boolean_eq exec_k_when_autoconstructing (integer_inc exec_when (exec_if (exec_do*while (boolean_dup_times integer_eq boolean_invert_first_then_and) integer_min) (exec_while (exec_empty in4 print_exec (boolean_stackdepth) boolean_frominteger boolean_shove exec_s_when_autoconstructing (boolean_and integer_rot) (boolean_flush integer_min exec_eq integer_swap boolean_stackdepth integer_pop exec_eq exec_dup_times (integer_div exec_pop (boolean_xor) exec_k (boolean_yankdup integer_sub exec_shove () integer_gte integer_inc exec_if (exec_eq integer_dup tag_exec_357 (integer_lt exec_stackdepth print_integer integer_add boolean_yankdup)) ()) ())) ())))) ()) () ())) ()) ()) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 105

step: 1500
program: (in1 in3 exec_eq boolean_dup_times in4 in2 integer_min integer_min print_integer boolean_dup_times integer_shove boolean_swap boolean_yankdup exec_dup_times (integer_yank exec_if (10 in4 exec_k (in1 exec_if (exec_k (boolean_pop integer_sub exec_eq) (exec_rot (boolean_eq boolean_eq exec_k_when_autoconstructing (integer_inc exec_when (exec_if (exec_do*while (boolean_dup_times integer_eq boolean_invert_first_then_and) integer_min) (exec_while (exec_empty in4 print_exec (boolean_stackdepth) boolean_frominteger boolean_shove exec_s_when_autoconstructing (boolean_and integer_rot) (boolean_flush integer_min exec_eq integer_swap boolean_stackdepth integer_pop exec_eq exec_dup_times (integer_div exec_pop (boolean_xor) exec_k (boolean_yankdup integer_sub exec_shove () integer_gte integer_inc exec_if (exec_eq integer_dup tag_exec_357 (integer_lt exec_stackdepth print_integer integer_add boolean_yankdup)) ()) ())) ())))) ()) () ())) ()) ()) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 105

step: 2000
program: (in1 in3 exec_eq boolean_dup_times in4 in2 integer_min integer_min print_integer boolean_dup_times integer_shove boolean_swap boolean_yankdup exec_dup_times (integer_yank exec_if (10 in4 exec_k (in1 exec_if (exec_k (boolean_pop integer_sub exec_eq) (exec_rot (boolean_eq boolean_eq exec_k_when_autoconstructing (integer_inc exec_when (exec_if (exec_do*while (boolean_dup_times integer_eq boolean_invert_first_then_and) integer_min) (exec_while (exec_empty in4 print_exec (boolean_stackdepth) boolean_frominteger boolean_shove exec_s_when_autoconstructing (boolean_and integer_rot) (boolean_flush integer_min exec_eq integer_swap boolean_stackdepth integer_pop exec_eq exec_dup_times (integer_div exec_pop (boolean_xor) exec_k (boolean_yankdup integer_sub exec_shove () integer_gte integer_inc exec_if (exec_eq integer_dup tag_exec_357 (integer_lt exec_stackdepth print_integer integer_add boolean_yankdup)) ()) ())) ())))) ()) () ())) ()) ()) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 105

step: 2500
program: (in1 in3 exec_eq boolean_dup_times in4 in2 integer_min integer_min print_integer boolean_dup_times integer_shove boolean_swap boolean_yankdup exec_dup_times (integer_yank exec_if (10 in4 exec_k (in1 exec_if (exec_k (boolean_pop integer_sub exec_eq) (exec_rot (boolean_eq boolean_eq exec_k_when_autoconstructing (integer_inc exec_when (exec_if (exec_do*while (boolean_dup_times integer_eq boolean_invert_first_then_and) integer_min) (exec_while (exec_empty in4 print_exec (boolean_stackdepth) boolean_frominteger boolean_shove exec_s_when_autoconstructing (boolean_and integer_rot) (boolean_flush integer_min exec_eq integer_swap boolean_stackdepth integer_pop exec_eq exec_dup_times (integer_div exec_pop (boolean_xor) exec_k (boolean_yankdup integer_sub exec_shove () integer_gte integer_inc exec_if (exec_eq integer_dup tag_exec_357 (integer_lt exec_stackdepth print_integer integer_add boolean_yankdup)) ()) ())) ())))) ()) () ())) ()) ()) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 105

step: 3000
program: (in1 in3 exec_eq boolean_dup_times in4 in2 integer_min integer_min print_integer boolean_dup_times integer_shove boolean_swap boolean_yankdup exec_dup_times (integer_yank exec_if (10 in4 exec_k (in1 exec_if (exec_k (boolean_pop integer_sub exec_eq) (exec_rot (boolean_eq boolean_eq exec_k_when_autoconstructing (integer_inc exec_when (exec_if (exec_do*while (boolean_dup_times integer_eq boolean_invert_first_then_and) integer_min) (exec_while (exec_empty in4 print_exec (boolean_stackdepth) boolean_frominteger boolean_shove exec_s_when_autoconstructing (boolean_and integer_rot) (boolean_flush integer_min exec_eq integer_swap boolean_stackdepth integer_pop exec_eq exec_dup_times (integer_div exec_pop (boolean_xor) exec_k (boolean_yankdup integer_sub exec_shove () integer_gte integer_inc exec_if (exec_eq integer_dup tag_exec_357 (integer_lt exec_stackdepth print_integer integer_add boolean_yankdup)) ()) ())) ())))) ()) () ())) ()) ()) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 105

step: 3500
program: (in1 in3 exec_eq boolean_dup_times in4 in2 integer_min integer_min print_integer boolean_dup_times integer_shove boolean_swap boolean_yankdup exec_dup_times (integer_yank exec_if (10 in4 exec_k (in1 exec_if (exec_k (boolean_pop integer_sub exec_eq) (exec_rot (boolean_eq boolean_eq exec_k_when_autoconstructing (integer_inc exec_when (exec_if (exec_do*while (boolean_dup_times integer_eq boolean_invert_first_then_and) integer_min) (exec_while (exec_empty in4 print_exec (boolean_stackdepth) boolean_frominteger boolean_shove exec_s_when_autoconstructing (boolean_and integer_rot) (boolean_flush integer_min exec_eq integer_swap boolean_stackdepth integer_pop exec_eq exec_dup_times (integer_div exec_pop (boolean_xor) exec_k (boolean_yankdup integer_sub exec_shove () integer_gte integer_inc exec_if (exec_eq integer_dup tag_exec_357 (integer_lt exec_stackdepth print_integer integer_add boolean_yankdup)) ()) ())) ())))) ()) () ())) ()) ()) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 105

step: 4000
program: (in1 in3 exec_eq boolean_dup_times in4 in2 integer_min integer_min print_integer boolean_dup_times integer_shove boolean_swap boolean_yankdup exec_dup_times (integer_yank exec_if (10 in4 exec_k (in1 exec_if (exec_k (boolean_pop integer_sub exec_eq) (exec_rot (boolean_eq boolean_eq exec_k_when_autoconstructing (integer_inc exec_when (exec_if (exec_do*while (boolean_dup_times integer_eq boolean_invert_first_then_and) integer_min) (exec_while (exec_empty in4 print_exec (boolean_stackdepth) boolean_frominteger boolean_shove exec_s_when_autoconstructing (boolean_and integer_rot) (boolean_flush integer_min exec_eq integer_swap boolean_stackdepth integer_pop exec_eq exec_dup_times (integer_div exec_pop (boolean_xor) exec_k (boolean_yankdup integer_sub exec_shove () integer_gte integer_inc exec_if (exec_eq integer_dup tag_exec_357 (integer_lt exec_stackdepth print_integer integer_add boolean_yankdup)) ()) ())) ())))) ()) () ())) ()) ()) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 105

step: 4500
program: (in1 in3 exec_eq boolean_dup_times in4 in2 integer_min integer_min print_integer boolean_dup_times integer_shove boolean_swap boolean_yankdup exec_dup_times (integer_yank exec_if (10 in4 exec_k (in1 exec_if (exec_k (boolean_pop integer_sub exec_eq) (exec_rot (boolean_eq boolean_eq exec_k_when_autoconstructing (integer_inc exec_when (exec_if (exec_do*while (boolean_dup_times integer_eq boolean_invert_first_then_and) integer_min) (exec_while (exec_empty in4 print_exec (boolean_stackdepth) boolean_frominteger boolean_shove exec_s_when_autoconstructing (boolean_and integer_rot) (boolean_flush integer_min exec_eq integer_swap boolean_stackdepth integer_pop exec_eq exec_dup_times (integer_div exec_pop (boolean_xor) exec_k (boolean_yankdup integer_sub exec_shove () integer_gte integer_inc exec_if (exec_eq integer_dup tag_exec_357 (integer_lt exec_stackdepth print_integer integer_add boolean_yankdup)) ()) ())) ())))) ()) () ())) ()) ()) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 105

step: 5000
program: (in1 in3 exec_eq boolean_dup_times in4 in2 integer_min integer_min print_integer boolean_dup_times integer_shove boolean_swap boolean_yankdup exec_dup_times (integer_yank exec_if (10 in4 exec_k (in1 exec_if (exec_k (boolean_pop integer_sub exec_eq) (exec_rot (boolean_eq boolean_eq exec_k_when_autoconstructing (integer_inc exec_when (exec_if (exec_do*while (boolean_dup_times integer_eq boolean_invert_first_then_and) integer_min) (exec_while (exec_empty in4 print_exec (boolean_stackdepth) boolean_frominteger boolean_shove exec_s_when_autoconstructing (boolean_and integer_rot) (boolean_flush integer_min exec_eq integer_swap boolean_stackdepth integer_pop exec_eq exec_dup_times (integer_div exec_pop (boolean_xor) exec_k (boolean_yankdup integer_sub exec_shove () integer_gte integer_inc exec_if (exec_eq integer_dup tag_exec_357 (integer_lt exec_stackdepth print_integer integer_add boolean_yankdup)) ()) ())) ())))) ()) () ())) ()) ()) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 105

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 213
Test mean error for best: 0.21300
Test Case    0 | Error: 1
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 1
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 1
Test Case   24 | Error: 1
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 1
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 1
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 1
Test Case   44 | Error: 0
Test Case   45 | Error: 1
Test Case   46 | Error: 1
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 1
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 1
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 1
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 1
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 1
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 1
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 1
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 1
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 1
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 1
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 1
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 1
Test Case  214 | Error: 1
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 1
Test Case  218 | Error: 0
Test Case  219 | Error: 1
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 1
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 1
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 1
Test Case  245 | Error: 1
Test Case  246 | Error: 1
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 1
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 1
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 1
Test Case  260 | Error: 0
Test Case  261 | Error: 1
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 1
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 1
Test Case  277 | Error: 0
Test Case  278 | Error: 1
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 1
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 1
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 1
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 1
Test Case  307 | Error: 0
Test Case  308 | Error: 1
Test Case  309 | Error: 1
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 1
Test Case  327 | Error: 1
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 1
Test Case  331 | Error: 0
Test Case  332 | Error: 1
Test Case  333 | Error: 0
Test Case  334 | Error: 1
Test Case  335 | Error: 1
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 1
Test Case  349 | Error: 0
Test Case  350 | Error: 1
Test Case  351 | Error: 0
Test Case  352 | Error: 1
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 1
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 1
Test Case  365 | Error: 1
Test Case  366 | Error: 0
Test Case  367 | Error: 1
Test Case  368 | Error: 1
Test Case  369 | Error: 0
Test Case  370 | Error: 1
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 1
Test Case  377 | Error: 0
Test Case  378 | Error: 1
Test Case  379 | Error: 0
Test Case  380 | Error: 1
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 1
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 1
Test Case  391 | Error: 1
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 1
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 1
Test Case  418 | Error: 0
Test Case  419 | Error: 1
Test Case  420 | Error: 0
Test Case  421 | Error: 1
Test Case  422 | Error: 1
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 1
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 1
Test Case  438 | Error: 0
Test Case  439 | Error: 1
Test Case  440 | Error: 0
Test Case  441 | Error: 1
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 1
Test Case  445 | Error: 1
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 1
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 1
Test Case  455 | Error: 0
Test Case  456 | Error: 1
Test Case  457 | Error: 1
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 1
Test Case  471 | Error: 1
Test Case  472 | Error: 1
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 1
Test Case  476 | Error: 0
Test Case  477 | Error: 1
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 1
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 1
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 1
Test Case  500 | Error: 0
Test Case  501 | Error: 1
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 1
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 1
Test Case  513 | Error: 0
Test Case  514 | Error: 1
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 1
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 1
Test Case  532 | Error: 0
Test Case  533 | Error: 1
Test Case  534 | Error: 0
Test Case  535 | Error: 1
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 1
Test Case  545 | Error: 0
Test Case  546 | Error: 1
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 1
Test Case  559 | Error: 0
Test Case  560 | Error: 1
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 1
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 1
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 1
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 1
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 1
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 1
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 1
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 1
Test Case  598 | Error: 1
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 1
Test Case  606 | Error: 1
Test Case  607 | Error: 0
Test Case  608 | Error: 1
Test Case  609 | Error: 0
Test Case  610 | Error: 1
Test Case  611 | Error: 1
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 1
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 1
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 1
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 1
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 1
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 1
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 1
Test Case  645 | Error: 1
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 1
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 1
Test Case  652 | Error: 1
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 1
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 1
Test Case  659 | Error: 1
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 1
Test Case  664 | Error: 1
Test Case  665 | Error: 1
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 1
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 1
Test Case  689 | Error: 1
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 1
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 1
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 1
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 1
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 1
Test Case  714 | Error: 0
Test Case  715 | Error: 1
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 1
Test Case  720 | Error: 1
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 1
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 1
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 1
Test Case  737 | Error: 1
Test Case  738 | Error: 1
Test Case  739 | Error: 1
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 1
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 1
Test Case  750 | Error: 0
Test Case  751 | Error: 1
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 1
Test Case  761 | Error: 0
Test Case  762 | Error: 1
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 1
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 1
Test Case  776 | Error: 0
Test Case  777 | Error: 1
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 1
Test Case  782 | Error: 1
Test Case  783 | Error: 1
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 1
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 1
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 1
Test Case  796 | Error: 1
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 1
Test Case  802 | Error: 0
Test Case  803 | Error: 1
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 1
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 1
Test Case  812 | Error: 1
Test Case  813 | Error: 1
Test Case  814 | Error: 1
Test Case  815 | Error: 0
Test Case  816 | Error: 1
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 1
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 1
Test Case  832 | Error: 1
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 1
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 1
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 1
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 1
Test Case  855 | Error: 0
Test Case  856 | Error: 1
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 1
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 1
Test Case  870 | Error: 1
Test Case  871 | Error: 1
Test Case  872 | Error: 1
Test Case  873 | Error: 1
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 1
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 1
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 1
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 1
Test Case  898 | Error: 0
Test Case  899 | Error: 1
Test Case  900 | Error: 1
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 1
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 1
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 1
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 1
Test Case  928 | Error: 1
Test Case  929 | Error: 1
Test Case  930 | Error: 0
Test Case  931 | Error: 1
Test Case  932 | Error: 0
Test Case  933 | Error: 1
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 1
Test Case  937 | Error: 0
Test Case  938 | Error: 1
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 1
Test Case  951 | Error: 1
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 1
Test Case  958 | Error: 0
Test Case  959 | Error: 1
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 1
Test Case  964 | Error: 1
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 1
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 1
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 1
Test Case  979 | Error: 1
Test Case  980 | Error: 1
Test Case  981 | Error: 1
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 1
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 1
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -26                 | Program output: 21                 
Correct output: -49                 | Program output: -49                
Correct output: -88                 | Program output: -88                
Correct output: -45                 | Program output: -45                
Correct output: 64                  | Program output: 64                 
Correct output: -86                 | Program output: -86                
Correct output: -42                 | Program output: -42                
Correct output: -85                 | Program output: -85                
Correct output: -68                 | Program output: 75                 
Correct output: -16                 | Program output: -16                
Correct output: -11                 | Program output: -11                
Correct output: 50                  | Program output: 50                 
Correct output: -1                  | Program output: -1                 
Correct output: 64                  | Program output: 64                 
Correct output: -85                 | Program output: -85                
Correct output: 11                  | Program output: 11                 
Correct output: 6                   | Program output: 6                  
Correct output: 37                  | Program output: 37                 
Correct output: 14                  | Program output: 14                 
Correct output: 21                  | Program output: 21                 
Correct output: 59                  | Program output: 75                 
Correct output: 14                  | Program output: 14                 
Correct output: 25                  | Program output: 51                 
Correct output: 26                  | Program output: 44                 
Correct output: 16                  | Program output: 42                 
Correct output: 58                  | Program output: 58                 
Correct output: 36                  | Program output: 36                 
Correct output: 0                   | Program output: 15                 
Correct output: 63                  | Program output: 69                 
Correct output: 3                   | Program output: 3                  
Correct output: 59                  | Program output: 59                 
Correct output: 70                  | Program output: 70                 
Correct output: 16                  | Program output: 16                 
Correct output: 5                   | Program output: 5                  
Correct output: 19                  | Program output: 21                 
Correct output: -89                 | Program output: -89                
Correct output: -30                 | Program output: 9                  
Correct output: -57                 | Program output: -57                
Correct output: -99                 | Program output: -99                
Correct output: 19                  | Program output: 19                 
Correct output: -82                 | Program output: -14                
Correct output: -86                 | Program output: -86                
Correct output: -84                 | Program output: -84                
Correct output: -94                 | Program output: -94                
Correct output: -67                 | Program output: -67                
Correct output: -66                 | Program output: -66                
Correct output: -90                 | Program output: -75                
Correct output: -33                 | Program output: -22                
Correct output: -65                 | Program output: -62                
Correct output: -100                | Program output: -100               
Correct output: -77                 | Program output: -77                
Correct output: -99                 | Program output: -99                
Correct output: -90                 | Program output: -90                
Correct output: -30                 | Program output: -30                
Correct output: -57                 | Program output: -57                
Correct output: -60                 | Program output: -60                
Correct output: -61                 | Program output: -61                
Correct output: -73                 | Program output: 36                 
Correct output: -71                 | Program output: -61                
Correct output: -33                 | Program output: -33                
Correct output: -71                 | Program output: -53                
Correct output: -15                 | Program output: -15                
Correct output: -63                 | Program output: -63                
Correct output: -64                 | Program output: -64                
Correct output: 5                   | Program output: 5                  
Correct output: -86                 | Program output: -50                
Correct output: -85                 | Program output: -33                
Correct output: -64                 | Program output: -64                
Correct output: -100                | Program output: -100               
Correct output: -52                 | Program output: -52                
Correct output: -89                 | Program output: -89                
Correct output: -26                 | Program output: -26                
Correct output: -54                 | Program output: -54                
Correct output: -76                 | Program output: -76                
Correct output: -93                 | Program output: -93                
Correct output: -80                 | Program output: -80                
Correct output: -96                 | Program output: -96                
Correct output: -60                 | Program output: 7                  
Correct output: -96                 | Program output: -96                
Correct output: -96                 | Program output: -96                
Correct output: -98                 | Program output: -77                
Correct output: -96                 | Program output: -96                
Correct output: -2                  | Program output: 43                 
Correct output: -61                 | Program output: -61                
Correct output: -47                 | Program output: -47                
Correct output: -77                 | Program output: -77                
Correct output: -59                 | Program output: -59                
Correct output: -90                 | Program output: -90                
Correct output: -10                 | Program output: -10                
Correct output: -57                 | Program output: -36                
Correct output: -74                 | Program output: -19                
Correct output: -96                 | Program output: -68                
Correct output: -70                 | Program output: -70                
Correct output: -95                 | Program output: -55                
Correct output: -54                 | Program output: -54                
;;******************************
