Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 3000 :genetic-operator-probabilities {:uniform-addition-and-deletion,1.0} :uniform-addition-and-deletion-rate 0.09
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:uniform-addition-and-deletion 1.0}
max-error = 1
max-generations = 3000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-32 -32 -32 -62] -62] [[-36 51 -36 -36] -36] [[-54 36 36 36] -54] [[62 62 62 -38] -38] [[-70 -70 44 -70] -70] [[-16 46 -16 -16] -16] [[-60 -60 40 -60] -60] [[-22 -22 -22 -88] -88] [[-13 52 52 52] -13] [[-58 -69 -58 -58] -69] [(-45 -45 -45 -45) -45] [(64 64 64 64) 64] [(-6 -6 -6 -6) -6] [(-46 -46 -46 -46) -46] [(-97 -97 -97 -97) -97] [(15 11 64 22) 11] [(67 84 13 34) 13] [(7 26 70 74) 7] [(27 35 67 77) 27] [(7 33 81 35) 7] [(80 40 64 9) 9] [(97 88 96 86) 86] [(11 34 80 26) 11] [(71 29 58 19) 19] [(29 12 18 55) 12] [(81 75 98 96) 75] [(0 31 34 64) 0] [(69 55 63 59) 55] [(0 2 73 66) 0] [(66 90 90 42) 42] [(5 5 83 35) 5] [(76 74 10 26) 10] [(24 42 13 49) 13] [(38 66 69 39) 38] [(56 22 70 31) 22] [(31 -7 44 -69) -69] [(51 68 -7 45) -7] [(-22 57 33 -62) -62] [(-84 -14 59 -52) -84] [(-59 -85 -16 95) -85] [(-40 20 -45 -18) -45] [(22 -65 -96 11) -96] [(-45 9 -26 1) -45] [(99 -11 -70 -40) -70] [(-97 98 41 -63) -97] [(-95 -19 66 -32) -95] [(-87 -68 95 -61) -87] [(69 28 89 74) 28] [(22 -11 22 -1) -11] [(-62 86 -21 3) -62] [(-80 78 -7 -55) -80] [(40 18 -69 -71) -71] [(74 -24 -67 43) -67] [(-87 17 -96 -21) -96] [(-4 72 13 97) -4] [(86 -79 96 -74) -79] [(-42 12 39 22) -42] [(5 -35 11 50) -35] [(37 72 10 33) 10] [(1 -47 12 8) -47] [(-55 -61 -44 95) -61] [(73 -60 -73 97) -73] [(-22 -50 99 20) -50] [(28 16 36 47) 16] [(-99 91 -86 65) -99] [(-73 95 37 39) -73] [(-2 -20 -61 8) -61] [(-2 -51 -94 92) -94] [(-2 -32 98 37) -32] [(60 -13 -73 54) -73] [(-44 -18 65 -78) -78] [(33 -6 -28 54) -28] [(-78 24 -67 -13) -78] [(14 96 72 67) 14] [(74 3 15 57) 3] [(-91 93 -97 35) -97] [(95 49 36 78) 36] [(-12 16 72 42) -12] [(87 8 -90 7) -90] [(-96 -29 91 83) -96] [(43 82 -42 -53) -53] [(52 -73 -29 62) -73] [(73 -78 -51 -40) -78] [(46 35 76 62) 35] [(6 -92 81 11) -92] [(9 30 -56 75) -56] [(17 -61 26 -34) -61] [(68 -99 -49 56) -99] [(96 49 -98 -2) -98] [(-44 -22 -14 -96) -96] [(-69 6 -96 42) -96] [(20 -65 82 -97) -97] [(25 -27 -40 81) -40] [(44 -13 43 -94) -94] [(-50 77 -99 -68) -99])
uniform-addition-and-deletion-rate = 0.09
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[-32 -32 -32 -62] -62]
Train Case:   6 | Input/Output: [[-36 51 -36 -36] -36]
Train Case:   7 | Input/Output: [[-54 36 36 36] -54]
Train Case:   8 | Input/Output: [[62 62 62 -38] -38]
Train Case:   9 | Input/Output: [[-70 -70 44 -70] -70]
Train Case:  10 | Input/Output: [[-16 46 -16 -16] -16]
Train Case:  11 | Input/Output: [[-60 -60 40 -60] -60]
Train Case:  12 | Input/Output: [[-22 -22 -22 -88] -88]
Train Case:  13 | Input/Output: [[-13 52 52 52] -13]
Train Case:  14 | Input/Output: [[-58 -69 -58 -58] -69]
Train Case:  15 | Input/Output: [(-45 -45 -45 -45) -45]
Train Case:  16 | Input/Output: [(64 64 64 64) 64]
Train Case:  17 | Input/Output: [(-6 -6 -6 -6) -6]
Train Case:  18 | Input/Output: [(-46 -46 -46 -46) -46]
Train Case:  19 | Input/Output: [(-97 -97 -97 -97) -97]
Train Case:  20 | Input/Output: [(15 11 64 22) 11]
Train Case:  21 | Input/Output: [(67 84 13 34) 13]
Train Case:  22 | Input/Output: [(7 26 70 74) 7]
Train Case:  23 | Input/Output: [(27 35 67 77) 27]
Train Case:  24 | Input/Output: [(7 33 81 35) 7]
Train Case:  25 | Input/Output: [(80 40 64 9) 9]
Train Case:  26 | Input/Output: [(97 88 96 86) 86]
Train Case:  27 | Input/Output: [(11 34 80 26) 11]
Train Case:  28 | Input/Output: [(71 29 58 19) 19]
Train Case:  29 | Input/Output: [(29 12 18 55) 12]
Train Case:  30 | Input/Output: [(81 75 98 96) 75]
Train Case:  31 | Input/Output: [(0 31 34 64) 0]
Train Case:  32 | Input/Output: [(69 55 63 59) 55]
Train Case:  33 | Input/Output: [(0 2 73 66) 0]
Train Case:  34 | Input/Output: [(66 90 90 42) 42]
Train Case:  35 | Input/Output: [(5 5 83 35) 5]
Train Case:  36 | Input/Output: [(76 74 10 26) 10]
Train Case:  37 | Input/Output: [(24 42 13 49) 13]
Train Case:  38 | Input/Output: [(38 66 69 39) 38]
Train Case:  39 | Input/Output: [(56 22 70 31) 22]
Train Case:  40 | Input/Output: [(31 -7 44 -69) -69]
Train Case:  41 | Input/Output: [(51 68 -7 45) -7]
Train Case:  42 | Input/Output: [(-22 57 33 -62) -62]
Train Case:  43 | Input/Output: [(-84 -14 59 -52) -84]
Train Case:  44 | Input/Output: [(-59 -85 -16 95) -85]
Train Case:  45 | Input/Output: [(-40 20 -45 -18) -45]
Train Case:  46 | Input/Output: [(22 -65 -96 11) -96]
Train Case:  47 | Input/Output: [(-45 9 -26 1) -45]
Train Case:  48 | Input/Output: [(99 -11 -70 -40) -70]
Train Case:  49 | Input/Output: [(-97 98 41 -63) -97]
Train Case:  50 | Input/Output: [(-95 -19 66 -32) -95]
Train Case:  51 | Input/Output: [(-87 -68 95 -61) -87]
Train Case:  52 | Input/Output: [(69 28 89 74) 28]
Train Case:  53 | Input/Output: [(22 -11 22 -1) -11]
Train Case:  54 | Input/Output: [(-62 86 -21 3) -62]
Train Case:  55 | Input/Output: [(-80 78 -7 -55) -80]
Train Case:  56 | Input/Output: [(40 18 -69 -71) -71]
Train Case:  57 | Input/Output: [(74 -24 -67 43) -67]
Train Case:  58 | Input/Output: [(-87 17 -96 -21) -96]
Train Case:  59 | Input/Output: [(-4 72 13 97) -4]
Train Case:  60 | Input/Output: [(86 -79 96 -74) -79]
Train Case:  61 | Input/Output: [(-42 12 39 22) -42]
Train Case:  62 | Input/Output: [(5 -35 11 50) -35]
Train Case:  63 | Input/Output: [(37 72 10 33) 10]
Train Case:  64 | Input/Output: [(1 -47 12 8) -47]
Train Case:  65 | Input/Output: [(-55 -61 -44 95) -61]
Train Case:  66 | Input/Output: [(73 -60 -73 97) -73]
Train Case:  67 | Input/Output: [(-22 -50 99 20) -50]
Train Case:  68 | Input/Output: [(28 16 36 47) 16]
Train Case:  69 | Input/Output: [(-99 91 -86 65) -99]
Train Case:  70 | Input/Output: [(-73 95 37 39) -73]
Train Case:  71 | Input/Output: [(-2 -20 -61 8) -61]
Train Case:  72 | Input/Output: [(-2 -51 -94 92) -94]
Train Case:  73 | Input/Output: [(-2 -32 98 37) -32]
Train Case:  74 | Input/Output: [(60 -13 -73 54) -73]
Train Case:  75 | Input/Output: [(-44 -18 65 -78) -78]
Train Case:  76 | Input/Output: [(33 -6 -28 54) -28]
Train Case:  77 | Input/Output: [(-78 24 -67 -13) -78]
Train Case:  78 | Input/Output: [(14 96 72 67) 14]
Train Case:  79 | Input/Output: [(74 3 15 57) 3]
Train Case:  80 | Input/Output: [(-91 93 -97 35) -97]
Train Case:  81 | Input/Output: [(95 49 36 78) 36]
Train Case:  82 | Input/Output: [(-12 16 72 42) -12]
Train Case:  83 | Input/Output: [(87 8 -90 7) -90]
Train Case:  84 | Input/Output: [(-96 -29 91 83) -96]
Train Case:  85 | Input/Output: [(43 82 -42 -53) -53]
Train Case:  86 | Input/Output: [(52 -73 -29 62) -73]
Train Case:  87 | Input/Output: [(73 -78 -51 -40) -78]
Train Case:  88 | Input/Output: [(46 35 76 62) 35]
Train Case:  89 | Input/Output: [(6 -92 81 11) -92]
Train Case:  90 | Input/Output: [(9 30 -56 75) -56]
Train Case:  91 | Input/Output: [(17 -61 26 -34) -61]
Train Case:  92 | Input/Output: [(68 -99 -49 56) -99]
Train Case:  93 | Input/Output: [(96 49 -98 -2) -98]
Train Case:  94 | Input/Output: [(-44 -22 -14 -96) -96]
Train Case:  95 | Input/Output: [(-69 6 -96 42) -96]
Train Case:  96 | Input/Output: [(20 -65 82 -97) -97]
Train Case:  97 | Input/Output: [(25 -27 -40 81) -40]
Train Case:  98 | Input/Output: [(44 -13 43 -94) -94]
Train Case:  99 | Input/Output: [(-50 77 -99 -68) -99]
Test Case:   0 | Input/Output: [[-6 3 3 3] -6]
Test Case:   1 | Input/Output: [[4 4 -26 4] -26]
Test Case:   2 | Input/Output: [[-74 -74 -100 -74] -100]
Test Case:   3 | Input/Output: [[-9 -9 -9 98] -9]
Test Case:   4 | Input/Output: [[-42 -77 -77 -77] -77]
Test Case:   5 | Input/Output: [[-3 -4 -4 -4] -4]
Test Case:   6 | Input/Output: [[-91 -91 -91 -17] -91]
Test Case:   7 | Input/Output: [[42 42 42 74] 42]
Test Case:   8 | Input/Output: [[19 19 62 19] 19]
Test Case:   9 | Input/Output: [[-68 -68 -68 -77] -77]
Test Case:  10 | Input/Output: [[-6 -6 -6 15] -6]
Test Case:  11 | Input/Output: [[33 33 33 97] 33]
Test Case:  12 | Input/Output: [[76 78 76 76] 76]
Test Case:  13 | Input/Output: [[72 72 -20 72] -20]
Test Case:  14 | Input/Output: [[94 39 94 94] 39]
Test Case:  15 | Input/Output: [[26 26 6 26] 6]
Test Case:  16 | Input/Output: [[-69 82 82 82] -69]
Test Case:  17 | Input/Output: [[-13 89 -13 -13] -13]
Test Case:  18 | Input/Output: [[72 72 72 -99] -99]
Test Case:  19 | Input/Output: [[-90 -90 -3 -90] -90]
Test Case:  20 | Input/Output: [[43 43 43 -98] -98]
Test Case:  21 | Input/Output: [[-3 -92 -3 -3] -92]
Test Case:  22 | Input/Output: [[53 -32 53 53] -32]
Test Case:  23 | Input/Output: [[-100 5 5 5] -100]
Test Case:  24 | Input/Output: [[92 92 92 5] 5]
Test Case:  25 | Input/Output: [[36 36 36 3] 3]
Test Case:  26 | Input/Output: [[4 49 4 4] 4]
Test Case:  27 | Input/Output: [[71 65 65 65] 65]
Test Case:  28 | Input/Output: [[-86 -86 -86 70] -86]
Test Case:  29 | Input/Output: [[-31 58 -31 -31] -31]
Test Case:  30 | Input/Output: [[2 -54 -54 -54] -54]
Test Case:  31 | Input/Output: [[83 83 83 -1] -1]
Test Case:  32 | Input/Output: [[-68 -88 -88 -88] -88]
Test Case:  33 | Input/Output: [[60 60 80 60] 60]
Test Case:  34 | Input/Output: [[-75 42 -75 -75] -75]
Test Case:  35 | Input/Output: [[22 0 22 22] 0]
Test Case:  36 | Input/Output: [[-3 -3 -64 -3] -64]
Test Case:  37 | Input/Output: [[-5 55 -5 -5] -5]
Test Case:  38 | Input/Output: [[83 83 -45 83] -45]
Test Case:  39 | Input/Output: [[79 -70 -70 -70] -70]
Test Case:  40 | Input/Output: [[9 -86 -86 -86] -86]
Test Case:  41 | Input/Output: [[29 -20 -20 -20] -20]
Test Case:  42 | Input/Output: [[-41 -41 -41 81] -41]
Test Case:  43 | Input/Output: [[58 58 58 -72] -72]
Test Case:  44 | Input/Output: [[29 66 29 29] 29]
Test Case:  45 | Input/Output: [[-14 -10 -14 -14] -14]
Test Case:  46 | Input/Output: [[72 72 28 72] 28]
Test Case:  47 | Input/Output: [[-84 -84 -84 -39] -84]
Test Case:  48 | Input/Output: [[96 0 0 0] 0]
Test Case:  49 | Input/Output: [[-74 98 -74 -74] -74]
Test Case:  50 | Input/Output: [[-30 21 21 21] -30]
Test Case:  51 | Input/Output: [[99 -3 -3 -3] -3]
Test Case:  52 | Input/Output: [[-64 -45 -45 -45] -64]
Test Case:  53 | Input/Output: [[-31 -31 -31 -16] -31]
Test Case:  54 | Input/Output: [[34 34 -76 34] -76]
Test Case:  55 | Input/Output: [[24 -74 24 24] -74]
Test Case:  56 | Input/Output: [[98 98 44 98] 44]
Test Case:  57 | Input/Output: [[15 3 3 3] 3]
Test Case:  58 | Input/Output: [[21 -23 -23 -23] -23]
Test Case:  59 | Input/Output: [[-48 23 23 23] -48]
Test Case:  60 | Input/Output: [[62 41 41 41] 41]
Test Case:  61 | Input/Output: [[-59 -59 -89 -59] -89]
Test Case:  62 | Input/Output: [[-89 19 -89 -89] -89]
Test Case:  63 | Input/Output: [[83 69 69 69] 69]
Test Case:  64 | Input/Output: [[88 88 37 88] 37]
Test Case:  65 | Input/Output: [[75 75 75 83] 75]
Test Case:  66 | Input/Output: [[73 -5 -5 -5] -5]
Test Case:  67 | Input/Output: [[95 95 95 -80] -80]
Test Case:  68 | Input/Output: [[-28 -28 -2 -28] -28]
Test Case:  69 | Input/Output: [[29 29 29 65] 29]
Test Case:  70 | Input/Output: [[77 77 77 37] 37]
Test Case:  71 | Input/Output: [[-8 -8 26 -8] -8]
Test Case:  72 | Input/Output: [[-28 -28 34 -28] -28]
Test Case:  73 | Input/Output: [[-29 -29 82 -29] -29]
Test Case:  74 | Input/Output: [[84 84 -78 84] -78]
Test Case:  75 | Input/Output: [[-27 56 -27 -27] -27]
Test Case:  76 | Input/Output: [[-97 -97 -97 -18] -97]
Test Case:  77 | Input/Output: [[-63 -63 -55 -63] -63]
Test Case:  78 | Input/Output: [[-23 -23 -3 -23] -23]
Test Case:  79 | Input/Output: [[34 34 -16 34] -16]
Test Case:  80 | Input/Output: [[58 58 100 58] 58]
Test Case:  81 | Input/Output: [[-2 -2 -2 60] -2]
Test Case:  82 | Input/Output: [[-77 29 29 29] -77]
Test Case:  83 | Input/Output: [[-50 -50 -50 -90] -90]
Test Case:  84 | Input/Output: [[33 33 33 43] 33]
Test Case:  85 | Input/Output: [[56 56 56 59] 56]
Test Case:  86 | Input/Output: [[-32 -9 -32 -32] -32]
Test Case:  87 | Input/Output: [[99 99 99 -27] -27]
Test Case:  88 | Input/Output: [[62 62 62 2] 2]
Test Case:  89 | Input/Output: [[48 -13 48 48] -13]
Test Case:  90 | Input/Output: [[34 -83 34 34] -83]
Test Case:  91 | Input/Output: [[-98 -98 -98 76] -98]
Test Case:  92 | Input/Output: [[-66 54 -66 -66] -66]
Test Case:  93 | Input/Output: [[-47 -47 -47 37] -47]
Test Case:  94 | Input/Output: [[34 34 34 -12] -12]
Test Case:  95 | Input/Output: [[71 71 71 -38] -38]
Test Case:  96 | Input/Output: [[11 11 -74 11] -74]
Test Case:  97 | Input/Output: [[86 86 86 34] 34]
Test Case:  98 | Input/Output: [[71 71 71 -51] -51]
Test Case:  99 | Input/Output: [[55 55 55 37] 37]
Test Case: 100 | Input/Output: [(98 98 98 98) 98]
Test Case: 101 | Input/Output: [(-36 -36 -36 -36) -36]
Test Case: 102 | Input/Output: [(1 1 1 1) 1]
Test Case: 103 | Input/Output: [(-55 -55 -55 -55) -55]
Test Case: 104 | Input/Output: [(-50 -50 -50 -50) -50]
Test Case: 105 | Input/Output: [(4 4 4 4) 4]
Test Case: 106 | Input/Output: [(24 24 24 24) 24]
Test Case: 107 | Input/Output: [(68 68 68 68) 68]
Test Case: 108 | Input/Output: [(-83 -83 -83 -83) -83]
Test Case: 109 | Input/Output: [(12 12 12 12) 12]
Test Case: 110 | Input/Output: [(-56 -56 -56 -56) -56]
Test Case: 111 | Input/Output: [(60 60 60 60) 60]
Test Case: 112 | Input/Output: [(11 11 11 11) 11]
Test Case: 113 | Input/Output: [(100 100 100 100) 100]
Test Case: 114 | Input/Output: [(69 69 69 69) 69]
Test Case: 115 | Input/Output: [(-12 -12 -12 -12) -12]
Test Case: 116 | Input/Output: [(69 69 69 69) 69]
Test Case: 117 | Input/Output: [(48 48 48 48) 48]
Test Case: 118 | Input/Output: [(-50 -50 -50 -50) -50]
Test Case: 119 | Input/Output: [(-36 -36 -36 -36) -36]
Test Case: 120 | Input/Output: [(-75 -75 -75 -75) -75]
Test Case: 121 | Input/Output: [(-18 -18 -18 -18) -18]
Test Case: 122 | Input/Output: [(83 83 83 83) 83]
Test Case: 123 | Input/Output: [(73 73 73 73) 73]
Test Case: 124 | Input/Output: [(30 30 30 30) 30]
Test Case: 125 | Input/Output: [(28 28 28 28) 28]
Test Case: 126 | Input/Output: [(-74 -74 -74 -74) -74]
Test Case: 127 | Input/Output: [(-7 -7 -7 -7) -7]
Test Case: 128 | Input/Output: [(96 96 96 96) 96]
Test Case: 129 | Input/Output: [(-19 -19 -19 -19) -19]
Test Case: 130 | Input/Output: [(-9 -9 -9 -9) -9]
Test Case: 131 | Input/Output: [(-40 -40 -40 -40) -40]
Test Case: 132 | Input/Output: [(27 27 27 27) 27]
Test Case: 133 | Input/Output: [(65 65 65 65) 65]
Test Case: 134 | Input/Output: [(-37 -37 -37 -37) -37]
Test Case: 135 | Input/Output: [(99 99 99 99) 99]
Test Case: 136 | Input/Output: [(-20 -20 -20 -20) -20]
Test Case: 137 | Input/Output: [(25 25 25 25) 25]
Test Case: 138 | Input/Output: [(-3 -3 -3 -3) -3]
Test Case: 139 | Input/Output: [(20 20 20 20) 20]
Test Case: 140 | Input/Output: [(86 86 86 86) 86]
Test Case: 141 | Input/Output: [(72 72 72 72) 72]
Test Case: 142 | Input/Output: [(-98 -98 -98 -98) -98]
Test Case: 143 | Input/Output: [(-48 -48 -48 -48) -48]
Test Case: 144 | Input/Output: [(-25 -25 -25 -25) -25]
Test Case: 145 | Input/Output: [(73 73 73 73) 73]
Test Case: 146 | Input/Output: [(52 52 52 52) 52]
Test Case: 147 | Input/Output: [(-72 -72 -72 -72) -72]
Test Case: 148 | Input/Output: [(-71 -71 -71 -71) -71]
Test Case: 149 | Input/Output: [(-76 -76 -76 -76) -76]
Test Case: 150 | Input/Output: [(-32 -32 -32 -32) -32]
Test Case: 151 | Input/Output: [(-19 -19 -19 -19) -19]
Test Case: 152 | Input/Output: [(-10 -10 -10 -10) -10]
Test Case: 153 | Input/Output: [(48 48 48 48) 48]
Test Case: 154 | Input/Output: [(45 45 45 45) 45]
Test Case: 155 | Input/Output: [(81 81 81 81) 81]
Test Case: 156 | Input/Output: [(-45 -45 -45 -45) -45]
Test Case: 157 | Input/Output: [(-89 -89 -89 -89) -89]
Test Case: 158 | Input/Output: [(69 69 69 69) 69]
Test Case: 159 | Input/Output: [(-2 -2 -2 -2) -2]
Test Case: 160 | Input/Output: [(6 6 6 6) 6]
Test Case: 161 | Input/Output: [(-84 -84 -84 -84) -84]
Test Case: 162 | Input/Output: [(80 80 80 80) 80]
Test Case: 163 | Input/Output: [(-39 -39 -39 -39) -39]
Test Case: 164 | Input/Output: [(78 78 78 78) 78]
Test Case: 165 | Input/Output: [(-65 -65 -65 -65) -65]
Test Case: 166 | Input/Output: [(-41 -41 -41 -41) -41]
Test Case: 167 | Input/Output: [(23 23 23 23) 23]
Test Case: 168 | Input/Output: [(5 5 5 5) 5]
Test Case: 169 | Input/Output: [(11 11 11 11) 11]
Test Case: 170 | Input/Output: [(-34 -34 -34 -34) -34]
Test Case: 171 | Input/Output: [(-37 -37 -37 -37) -37]
Test Case: 172 | Input/Output: [(-10 -10 -10 -10) -10]
Test Case: 173 | Input/Output: [(83 83 83 83) 83]
Test Case: 174 | Input/Output: [(-85 -85 -85 -85) -85]
Test Case: 175 | Input/Output: [(76 76 76 76) 76]
Test Case: 176 | Input/Output: [(-58 -58 -58 -58) -58]
Test Case: 177 | Input/Output: [(-60 -60 -60 -60) -60]
Test Case: 178 | Input/Output: [(-76 -76 -76 -76) -76]
Test Case: 179 | Input/Output: [(61 61 61 61) 61]
Test Case: 180 | Input/Output: [(-46 -46 -46 -46) -46]
Test Case: 181 | Input/Output: [(52 52 52 52) 52]
Test Case: 182 | Input/Output: [(27 27 27 27) 27]
Test Case: 183 | Input/Output: [(64 64 64 64) 64]
Test Case: 184 | Input/Output: [(-20 -20 -20 -20) -20]
Test Case: 185 | Input/Output: [(-84 -84 -84 -84) -84]
Test Case: 186 | Input/Output: [(-39 -39 -39 -39) -39]
Test Case: 187 | Input/Output: [(-93 -93 -93 -93) -93]
Test Case: 188 | Input/Output: [(-79 -79 -79 -79) -79]
Test Case: 189 | Input/Output: [(76 76 76 76) 76]
Test Case: 190 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 191 | Input/Output: [(0 0 0 0) 0]
Test Case: 192 | Input/Output: [(76 76 76 76) 76]
Test Case: 193 | Input/Output: [(10 10 10 10) 10]
Test Case: 194 | Input/Output: [(-30 -30 -30 -30) -30]
Test Case: 195 | Input/Output: [(93 93 93 93) 93]
Test Case: 196 | Input/Output: [(26 26 26 26) 26]
Test Case: 197 | Input/Output: [(66 66 66 66) 66]
Test Case: 198 | Input/Output: [(-85 -85 -85 -85) -85]
Test Case: 199 | Input/Output: [(5 5 5 5) 5]
Test Case: 200 | Input/Output: [(61 83 2 56) 2]
Test Case: 201 | Input/Output: [(29 23 67 1) 1]
Test Case: 202 | Input/Output: [(28 87 45 47) 28]
Test Case: 203 | Input/Output: [(4 74 5 5) 4]
Test Case: 204 | Input/Output: [(41 96 40 26) 26]
Test Case: 205 | Input/Output: [(64 50 33 28) 28]
Test Case: 206 | Input/Output: [(2 59 93 80) 2]
Test Case: 207 | Input/Output: [(87 22 23 63) 22]
Test Case: 208 | Input/Output: [(64 86 44 2) 2]
Test Case: 209 | Input/Output: [(83 52 22 85) 22]
Test Case: 210 | Input/Output: [(88 77 92 46) 46]
Test Case: 211 | Input/Output: [(12 24 11 79) 11]
Test Case: 212 | Input/Output: [(48 71 83 70) 48]
Test Case: 213 | Input/Output: [(13 59 89 20) 13]
Test Case: 214 | Input/Output: [(67 71 100 57) 57]
Test Case: 215 | Input/Output: [(57 39 12 51) 12]
Test Case: 216 | Input/Output: [(35 21 69 52) 21]
Test Case: 217 | Input/Output: [(91 26 84 90) 26]
Test Case: 218 | Input/Output: [(50 88 2 67) 2]
Test Case: 219 | Input/Output: [(40 65 61 25) 25]
Test Case: 220 | Input/Output: [(44 15 24 57) 15]
Test Case: 221 | Input/Output: [(45 3 8 17) 3]
Test Case: 222 | Input/Output: [(0 37 20 20) 0]
Test Case: 223 | Input/Output: [(48 67 22 58) 22]
Test Case: 224 | Input/Output: [(47 40 56 69) 40]
Test Case: 225 | Input/Output: [(66 22 37 86) 22]
Test Case: 226 | Input/Output: [(15 51 65 50) 15]
Test Case: 227 | Input/Output: [(16 76 24 96) 16]
Test Case: 228 | Input/Output: [(23 56 87 29) 23]
Test Case: 229 | Input/Output: [(86 41 32 100) 32]
Test Case: 230 | Input/Output: [(33 74 74 60) 33]
Test Case: 231 | Input/Output: [(79 40 87 60) 40]
Test Case: 232 | Input/Output: [(8 12 41 28) 8]
Test Case: 233 | Input/Output: [(100 97 26 35) 26]
Test Case: 234 | Input/Output: [(36 78 12 49) 12]
Test Case: 235 | Input/Output: [(58 73 40 93) 40]
Test Case: 236 | Input/Output: [(78 25 52 38) 25]
Test Case: 237 | Input/Output: [(4 45 66 73) 4]
Test Case: 238 | Input/Output: [(100 50 84 25) 25]
Test Case: 239 | Input/Output: [(72 92 70 8) 8]
Test Case: 240 | Input/Output: [(81 18 37 9) 9]
Test Case: 241 | Input/Output: [(26 78 39 5) 5]
Test Case: 242 | Input/Output: [(52 86 37 2) 2]
Test Case: 243 | Input/Output: [(27 7 36 98) 7]
Test Case: 244 | Input/Output: [(21 12 49 16) 12]
Test Case: 245 | Input/Output: [(52 25 15 94) 15]
Test Case: 246 | Input/Output: [(59 86 30 16) 16]
Test Case: 247 | Input/Output: [(49 87 74 46) 46]
Test Case: 248 | Input/Output: [(74 95 68 4) 4]
Test Case: 249 | Input/Output: [(10 5 10 16) 5]
Test Case: 250 | Input/Output: [(22 45 44 70) 22]
Test Case: 251 | Input/Output: [(61 50 30 7) 7]
Test Case: 252 | Input/Output: [(40 36 52 9) 9]
Test Case: 253 | Input/Output: [(1 41 13 53) 1]
Test Case: 254 | Input/Output: [(28 69 7 9) 7]
Test Case: 255 | Input/Output: [(35 41 75 28) 28]
Test Case: 256 | Input/Output: [(70 71 18 93) 18]
Test Case: 257 | Input/Output: [(53 59 74 48) 48]
Test Case: 258 | Input/Output: [(65 68 97 76) 65]
Test Case: 259 | Input/Output: [(51 36 38 8) 8]
Test Case: 260 | Input/Output: [(86 13 46 56) 13]
Test Case: 261 | Input/Output: [(51 49 85 3) 3]
Test Case: 262 | Input/Output: [(2 25 99 16) 2]
Test Case: 263 | Input/Output: [(23 62 82 6) 6]
Test Case: 264 | Input/Output: [(100 0 26 24) 0]
Test Case: 265 | Input/Output: [(70 84 34 91) 34]
Test Case: 266 | Input/Output: [(97 42 31 62) 31]
Test Case: 267 | Input/Output: [(40 43 11 48) 11]
Test Case: 268 | Input/Output: [(35 75 85 65) 35]
Test Case: 269 | Input/Output: [(44 31 82 75) 31]
Test Case: 270 | Input/Output: [(26 37 2 90) 2]
Test Case: 271 | Input/Output: [(78 85 1 8) 1]
Test Case: 272 | Input/Output: [(41 72 11 60) 11]
Test Case: 273 | Input/Output: [(25 90 21 56) 21]
Test Case: 274 | Input/Output: [(37 50 63 2) 2]
Test Case: 275 | Input/Output: [(30 36 84 95) 30]
Test Case: 276 | Input/Output: [(36 59 67 64) 36]
Test Case: 277 | Input/Output: [(0 55 8 12) 0]
Test Case: 278 | Input/Output: [(100 22 34 59) 22]
Test Case: 279 | Input/Output: [(92 22 10 24) 10]
Test Case: 280 | Input/Output: [(36 15 49 11) 11]
Test Case: 281 | Input/Output: [(34 37 71 33) 33]
Test Case: 282 | Input/Output: [(51 12 42 99) 12]
Test Case: 283 | Input/Output: [(69 30 57 8) 8]
Test Case: 284 | Input/Output: [(91 100 36 71) 36]
Test Case: 285 | Input/Output: [(61 94 30 3) 3]
Test Case: 286 | Input/Output: [(66 40 97 44) 40]
Test Case: 287 | Input/Output: [(48 49 50 40) 40]
Test Case: 288 | Input/Output: [(5 86 14 76) 5]
Test Case: 289 | Input/Output: [(49 2 70 80) 2]
Test Case: 290 | Input/Output: [(38 90 63 62) 38]
Test Case: 291 | Input/Output: [(67 89 95 69) 67]
Test Case: 292 | Input/Output: [(61 35 55 80) 35]
Test Case: 293 | Input/Output: [(9 55 82 17) 9]
Test Case: 294 | Input/Output: [(70 90 17 52) 17]
Test Case: 295 | Input/Output: [(2 47 98 59) 2]
Test Case: 296 | Input/Output: [(20 7 53 57) 7]
Test Case: 297 | Input/Output: [(5 44 6 94) 5]
Test Case: 298 | Input/Output: [(92 62 64 20) 20]
Test Case: 299 | Input/Output: [(64 57 67 38) 38]
Test Case: 300 | Input/Output: [(41 99 77 32) 32]
Test Case: 301 | Input/Output: [(59 91 81 12) 12]
Test Case: 302 | Input/Output: [(68 82 58 24) 24]
Test Case: 303 | Input/Output: [(25 43 78 10) 10]
Test Case: 304 | Input/Output: [(90 64 71 89) 64]
Test Case: 305 | Input/Output: [(80 87 92 7) 7]
Test Case: 306 | Input/Output: [(43 39 66 55) 39]
Test Case: 307 | Input/Output: [(18 84 9 92) 9]
Test Case: 308 | Input/Output: [(69 71 80 18) 18]
Test Case: 309 | Input/Output: [(32 56 77 23) 23]
Test Case: 310 | Input/Output: [(41 32 81 56) 32]
Test Case: 311 | Input/Output: [(31 85 2 18) 2]
Test Case: 312 | Input/Output: [(88 54 0 89) 0]
Test Case: 313 | Input/Output: [(8 57 61 14) 8]
Test Case: 314 | Input/Output: [(41 78 12 28) 12]
Test Case: 315 | Input/Output: [(8 24 16 26) 8]
Test Case: 316 | Input/Output: [(23 37 39 89) 23]
Test Case: 317 | Input/Output: [(13 23 25 42) 13]
Test Case: 318 | Input/Output: [(94 81 68 80) 68]
Test Case: 319 | Input/Output: [(38 61 64 38) 38]
Test Case: 320 | Input/Output: [(70 54 65 70) 54]
Test Case: 321 | Input/Output: [(9 75 60 67) 9]
Test Case: 322 | Input/Output: [(77 39 60 15) 15]
Test Case: 323 | Input/Output: [(90 91 54 1) 1]
Test Case: 324 | Input/Output: [(78 80 57 54) 54]
Test Case: 325 | Input/Output: [(99 78 83 82) 78]
Test Case: 326 | Input/Output: [(89 90 94 66) 66]
Test Case: 327 | Input/Output: [(4 44 50 94) 4]
Test Case: 328 | Input/Output: [(91 77 43 44) 43]
Test Case: 329 | Input/Output: [(69 27 67 74) 27]
Test Case: 330 | Input/Output: [(29 49 38 13) 13]
Test Case: 331 | Input/Output: [(71 47 52 26) 26]
Test Case: 332 | Input/Output: [(59 97 3 46) 3]
Test Case: 333 | Input/Output: [(52 36 35 72) 35]
Test Case: 334 | Input/Output: [(19 78 30 94) 19]
Test Case: 335 | Input/Output: [(57 88 27 35) 27]
Test Case: 336 | Input/Output: [(68 50 59 38) 38]
Test Case: 337 | Input/Output: [(69 17 41 29) 17]
Test Case: 338 | Input/Output: [(100 50 78 5) 5]
Test Case: 339 | Input/Output: [(30 35 79 91) 30]
Test Case: 340 | Input/Output: [(20 62 7 8) 7]
Test Case: 341 | Input/Output: [(82 72 13 15) 13]
Test Case: 342 | Input/Output: [(37 27 51 63) 27]
Test Case: 343 | Input/Output: [(25 29 39 59) 25]
Test Case: 344 | Input/Output: [(68 53 69 8) 8]
Test Case: 345 | Input/Output: [(9 33 4 38) 4]
Test Case: 346 | Input/Output: [(100 31 63 9) 9]
Test Case: 347 | Input/Output: [(33 42 18 90) 18]
Test Case: 348 | Input/Output: [(94 74 12 58) 12]
Test Case: 349 | Input/Output: [(11 53 0 63) 0]
Test Case: 350 | Input/Output: [(89 74 13 71) 13]
Test Case: 351 | Input/Output: [(37 64 57 16) 16]
Test Case: 352 | Input/Output: [(93 99 48 95) 48]
Test Case: 353 | Input/Output: [(24 59 75 12) 12]
Test Case: 354 | Input/Output: [(20 28 67 0) 0]
Test Case: 355 | Input/Output: [(18 87 97 92) 18]
Test Case: 356 | Input/Output: [(41 94 83 99) 41]
Test Case: 357 | Input/Output: [(68 85 100 90) 68]
Test Case: 358 | Input/Output: [(97 40 60 4) 4]
Test Case: 359 | Input/Output: [(96 1 74 37) 1]
Test Case: 360 | Input/Output: [(48 8 85 75) 8]
Test Case: 361 | Input/Output: [(55 51 37 4) 4]
Test Case: 362 | Input/Output: [(54 60 10 59) 10]
Test Case: 363 | Input/Output: [(2 47 30 89) 2]
Test Case: 364 | Input/Output: [(3 77 56 26) 3]
Test Case: 365 | Input/Output: [(5 90 77 42) 5]
Test Case: 366 | Input/Output: [(77 48 62 61) 48]
Test Case: 367 | Input/Output: [(45 58 39 100) 39]
Test Case: 368 | Input/Output: [(38 81 85 23) 23]
Test Case: 369 | Input/Output: [(74 95 38 55) 38]
Test Case: 370 | Input/Output: [(38 18 13 81) 13]
Test Case: 371 | Input/Output: [(38 2 35 89) 2]
Test Case: 372 | Input/Output: [(52 20 49 4) 4]
Test Case: 373 | Input/Output: [(92 61 52 7) 7]
Test Case: 374 | Input/Output: [(56 94 16 31) 16]
Test Case: 375 | Input/Output: [(58 68 10 11) 10]
Test Case: 376 | Input/Output: [(95 90 8 76) 8]
Test Case: 377 | Input/Output: [(79 76 3 83) 3]
Test Case: 378 | Input/Output: [(98 78 100 21) 21]
Test Case: 379 | Input/Output: [(59 74 5 82) 5]
Test Case: 380 | Input/Output: [(4 72 40 64) 4]
Test Case: 381 | Input/Output: [(95 67 33 92) 33]
Test Case: 382 | Input/Output: [(33 1 54 1) 1]
Test Case: 383 | Input/Output: [(97 84 69 60) 60]
Test Case: 384 | Input/Output: [(77 66 42 32) 32]
Test Case: 385 | Input/Output: [(29 4 30 54) 4]
Test Case: 386 | Input/Output: [(57 78 21 70) 21]
Test Case: 387 | Input/Output: [(72 33 40 50) 33]
Test Case: 388 | Input/Output: [(87 79 100 51) 51]
Test Case: 389 | Input/Output: [(7 20 24 12) 7]
Test Case: 390 | Input/Output: [(76 45 8 36) 8]
Test Case: 391 | Input/Output: [(38 37 40 70) 37]
Test Case: 392 | Input/Output: [(52 12 66 59) 12]
Test Case: 393 | Input/Output: [(30 15 63 46) 15]
Test Case: 394 | Input/Output: [(72 40 3 69) 3]
Test Case: 395 | Input/Output: [(24 78 56 85) 24]
Test Case: 396 | Input/Output: [(2 47 77 83) 2]
Test Case: 397 | Input/Output: [(12 14 47 94) 12]
Test Case: 398 | Input/Output: [(66 89 94 42) 42]
Test Case: 399 | Input/Output: [(40 30 73 96) 30]
Test Case: 400 | Input/Output: [(-28 -96 -10 58) -96]
Test Case: 401 | Input/Output: [(59 84 90 31) 31]
Test Case: 402 | Input/Output: [(-80 -19 42 -18) -80]
Test Case: 403 | Input/Output: [(68 12 -77 72) -77]
Test Case: 404 | Input/Output: [(7 -20 -52 97) -52]
Test Case: 405 | Input/Output: [(1 71 -76 -43) -76]
Test Case: 406 | Input/Output: [(100 94 44 -76) -76]
Test Case: 407 | Input/Output: [(-68 22 67 -74) -74]
Test Case: 408 | Input/Output: [(74 -26 -25 -19) -26]
Test Case: 409 | Input/Output: [(70 7 -1 6) -1]
Test Case: 410 | Input/Output: [(-85 -44 90 32) -85]
Test Case: 411 | Input/Output: [(86 27 -66 22) -66]
Test Case: 412 | Input/Output: [(39 83 13 78) 13]
Test Case: 413 | Input/Output: [(-18 -64 16 -8) -64]
Test Case: 414 | Input/Output: [(-67 -47 89 75) -67]
Test Case: 415 | Input/Output: [(44 49 -84 -51) -84]
Test Case: 416 | Input/Output: [(-64 71 86 99) -64]
Test Case: 417 | Input/Output: [(49 8 -69 57) -69]
Test Case: 418 | Input/Output: [(-52 -24 11 -52) -52]
Test Case: 419 | Input/Output: [(-8 70 96 73) -8]
Test Case: 420 | Input/Output: [(-48 -99 -92 -84) -99]
Test Case: 421 | Input/Output: [(11 26 90 8) 8]
Test Case: 422 | Input/Output: [(81 40 70 97) 40]
Test Case: 423 | Input/Output: [(78 47 -25 -77) -77]
Test Case: 424 | Input/Output: [(67 -79 75 41) -79]
Test Case: 425 | Input/Output: [(32 -21 38 54) -21]
Test Case: 426 | Input/Output: [(71 -80 58 57) -80]
Test Case: 427 | Input/Output: [(10 -85 13 47) -85]
Test Case: 428 | Input/Output: [(-71 95 -68 31) -71]
Test Case: 429 | Input/Output: [(-80 -7 -25 -31) -80]
Test Case: 430 | Input/Output: [(90 11 93 -8) -8]
Test Case: 431 | Input/Output: [(-65 24 86 -53) -65]
Test Case: 432 | Input/Output: [(-3 -76 -86 13) -86]
Test Case: 433 | Input/Output: [(-75 98 85 -30) -75]
Test Case: 434 | Input/Output: [(-67 -67 47 -26) -67]
Test Case: 435 | Input/Output: [(3 -16 12 45) -16]
Test Case: 436 | Input/Output: [(-1 79 97 56) -1]
Test Case: 437 | Input/Output: [(90 34 68 40) 34]
Test Case: 438 | Input/Output: [(43 -35 -52 85) -52]
Test Case: 439 | Input/Output: [(98 -39 3 -93) -93]
Test Case: 440 | Input/Output: [(-87 -69 12 100) -87]
Test Case: 441 | Input/Output: [(58 -57 -16 -2) -57]
Test Case: 442 | Input/Output: [(99 -11 75 -36) -36]
Test Case: 443 | Input/Output: [(5 -81 -49 -49) -81]
Test Case: 444 | Input/Output: [(10 73 83 -23) -23]
Test Case: 445 | Input/Output: [(-26 -57 -87 78) -87]
Test Case: 446 | Input/Output: [(62 13 43 -67) -67]
Test Case: 447 | Input/Output: [(-97 12 47 -81) -97]
Test Case: 448 | Input/Output: [(-84 1 77 95) -84]
Test Case: 449 | Input/Output: [(-18 -23 -7 99) -23]
Test Case: 450 | Input/Output: [(87 -45 -26 -64) -64]
Test Case: 451 | Input/Output: [(-66 -20 -91 -75) -91]
Test Case: 452 | Input/Output: [(84 -12 -35 33) -35]
Test Case: 453 | Input/Output: [(56 -70 97 53) -70]
Test Case: 454 | Input/Output: [(-23 46 -57 36) -57]
Test Case: 455 | Input/Output: [(-50 62 29 38) -50]
Test Case: 456 | Input/Output: [(-67 66 91 92) -67]
Test Case: 457 | Input/Output: [(95 -58 -22 72) -58]
Test Case: 458 | Input/Output: [(-84 68 96 75) -84]
Test Case: 459 | Input/Output: [(49 38 46 11) 11]
Test Case: 460 | Input/Output: [(79 -70 48 80) -70]
Test Case: 461 | Input/Output: [(90 -81 -71 -21) -81]
Test Case: 462 | Input/Output: [(-87 14 44 -65) -87]
Test Case: 463 | Input/Output: [(-80 24 67 -88) -88]
Test Case: 464 | Input/Output: [(36 32 -96 -74) -96]
Test Case: 465 | Input/Output: [(-91 -67 91 -57) -91]
Test Case: 466 | Input/Output: [(85 24 48 29) 24]
Test Case: 467 | Input/Output: [(-61 0 76 -99) -99]
Test Case: 468 | Input/Output: [(41 -31 98 53) -31]
Test Case: 469 | Input/Output: [(95 81 88 -73) -73]
Test Case: 470 | Input/Output: [(47 100 -51 59) -51]
Test Case: 471 | Input/Output: [(-68 84 4 89) -68]
Test Case: 472 | Input/Output: [(0 14 -23 87) -23]
Test Case: 473 | Input/Output: [(-1 10 49 -63) -63]
Test Case: 474 | Input/Output: [(-22 69 -38 93) -38]
Test Case: 475 | Input/Output: [(-27 -18 99 -31) -31]
Test Case: 476 | Input/Output: [(64 0 68 51) 0]
Test Case: 477 | Input/Output: [(-99 87 16 91) -99]
Test Case: 478 | Input/Output: [(47 30 -69 25) -69]
Test Case: 479 | Input/Output: [(40 34 -37 5) -37]
Test Case: 480 | Input/Output: [(-20 63 86 81) -20]
Test Case: 481 | Input/Output: [(-59 -63 13 -55) -63]
Test Case: 482 | Input/Output: [(-65 -9 -19 -12) -65]
Test Case: 483 | Input/Output: [(-7 78 8 88) -7]
Test Case: 484 | Input/Output: [(50 -47 78 44) -47]
Test Case: 485 | Input/Output: [(9 -4 11 56) -4]
Test Case: 486 | Input/Output: [(58 30 -34 -92) -92]
Test Case: 487 | Input/Output: [(40 13 1 25) 1]
Test Case: 488 | Input/Output: [(-54 90 54 65) -54]
Test Case: 489 | Input/Output: [(72 -89 11 -79) -89]
Test Case: 490 | Input/Output: [(-100 -88 60 83) -100]
Test Case: 491 | Input/Output: [(-7 48 -36 -44) -44]
Test Case: 492 | Input/Output: [(89 -90 -73 36) -90]
Test Case: 493 | Input/Output: [(18 26 58 -89) -89]
Test Case: 494 | Input/Output: [(92 -9 44 -58) -58]
Test Case: 495 | Input/Output: [(80 63 97 17) 17]
Test Case: 496 | Input/Output: [(10 -31 -88 84) -88]
Test Case: 497 | Input/Output: [(15 4 13 59) 4]
Test Case: 498 | Input/Output: [(-21 39 -88 -92) -92]
Test Case: 499 | Input/Output: [(84 49 -88 -45) -88]
Test Case: 500 | Input/Output: [(-71 -20 78 59) -71]
Test Case: 501 | Input/Output: [(-27 -56 -19 79) -56]
Test Case: 502 | Input/Output: [(-31 -79 41 -94) -94]
Test Case: 503 | Input/Output: [(76 -47 -29 -17) -47]
Test Case: 504 | Input/Output: [(51 71 19 49) 19]
Test Case: 505 | Input/Output: [(48 -27 19 98) -27]
Test Case: 506 | Input/Output: [(69 -60 -32 18) -60]
Test Case: 507 | Input/Output: [(26 7 29 70) 7]
Test Case: 508 | Input/Output: [(88 62 61 10) 10]
Test Case: 509 | Input/Output: [(-14 48 90 -71) -71]
Test Case: 510 | Input/Output: [(56 -99 27 -41) -99]
Test Case: 511 | Input/Output: [(20 -62 -82 -94) -94]
Test Case: 512 | Input/Output: [(-35 89 -94 -83) -94]
Test Case: 513 | Input/Output: [(41 60 -13 63) -13]
Test Case: 514 | Input/Output: [(82 74 -61 66) -61]
Test Case: 515 | Input/Output: [(53 74 -52 92) -52]
Test Case: 516 | Input/Output: [(-27 -34 -74 -55) -74]
Test Case: 517 | Input/Output: [(-80 47 -88 -100) -100]
Test Case: 518 | Input/Output: [(19 82 46 30) 19]
Test Case: 519 | Input/Output: [(-41 -65 -89 -61) -89]
Test Case: 520 | Input/Output: [(-38 -9 100 17) -38]
Test Case: 521 | Input/Output: [(-13 95 -92 -100) -100]
Test Case: 522 | Input/Output: [(65 83 9 -2) -2]
Test Case: 523 | Input/Output: [(66 -10 76 -26) -26]
Test Case: 524 | Input/Output: [(-99 -53 87 -77) -99]
Test Case: 525 | Input/Output: [(65 -14 95 89) -14]
Test Case: 526 | Input/Output: [(-50 -39 -75 13) -75]
Test Case: 527 | Input/Output: [(9 42 56 15) 9]
Test Case: 528 | Input/Output: [(-44 -22 50 -83) -83]
Test Case: 529 | Input/Output: [(49 18 42 -16) -16]
Test Case: 530 | Input/Output: [(-52 -30 -59 -78) -78]
Test Case: 531 | Input/Output: [(-35 -74 -54 12) -74]
Test Case: 532 | Input/Output: [(98 -73 -29 -65) -73]
Test Case: 533 | Input/Output: [(-29 70 4 65) -29]
Test Case: 534 | Input/Output: [(-31 -77 62 28) -77]
Test Case: 535 | Input/Output: [(80 74 18 -73) -73]
Test Case: 536 | Input/Output: [(13 -73 -96 -61) -96]
Test Case: 537 | Input/Output: [(-10 -80 4 -81) -81]
Test Case: 538 | Input/Output: [(-64 70 -38 -70) -70]
Test Case: 539 | Input/Output: [(59 95 25 -65) -65]
Test Case: 540 | Input/Output: [(-50 -26 -47 19) -50]
Test Case: 541 | Input/Output: [(-9 -41 -100 8) -100]
Test Case: 542 | Input/Output: [(-82 59 62 -40) -82]
Test Case: 543 | Input/Output: [(-76 -35 25 -99) -99]
Test Case: 544 | Input/Output: [(-23 -83 98 67) -83]
Test Case: 545 | Input/Output: [(-96 27 87 22) -96]
Test Case: 546 | Input/Output: [(-45 -67 86 67) -67]
Test Case: 547 | Input/Output: [(83 -24 13 86) -24]
Test Case: 548 | Input/Output: [(15 83 -45 -81) -81]
Test Case: 549 | Input/Output: [(19 -12 -85 -98) -98]
Test Case: 550 | Input/Output: [(24 -17 -11 14) -17]
Test Case: 551 | Input/Output: [(78 31 -69 75) -69]
Test Case: 552 | Input/Output: [(-92 34 80 -48) -92]
Test Case: 553 | Input/Output: [(16 19 71 73) 16]
Test Case: 554 | Input/Output: [(33 1 -16 23) -16]
Test Case: 555 | Input/Output: [(-83 -77 50 -97) -97]
Test Case: 556 | Input/Output: [(46 -28 -37 -59) -59]
Test Case: 557 | Input/Output: [(74 5 -16 -17) -17]
Test Case: 558 | Input/Output: [(-79 -16 98 -84) -84]
Test Case: 559 | Input/Output: [(-94 -26 -63 82) -94]
Test Case: 560 | Input/Output: [(-25 68 95 -14) -25]
Test Case: 561 | Input/Output: [(-58 58 -25 20) -58]
Test Case: 562 | Input/Output: [(-50 27 84 -76) -76]
Test Case: 563 | Input/Output: [(93 -55 -17 -16) -55]
Test Case: 564 | Input/Output: [(-20 74 92 -21) -21]
Test Case: 565 | Input/Output: [(-42 -91 92 99) -91]
Test Case: 566 | Input/Output: [(-38 -16 -51 89) -51]
Test Case: 567 | Input/Output: [(25 -34 -9 -10) -34]
Test Case: 568 | Input/Output: [(45 -27 -8 -13) -27]
Test Case: 569 | Input/Output: [(22 -84 -96 92) -96]
Test Case: 570 | Input/Output: [(2 63 18 -30) -30]
Test Case: 571 | Input/Output: [(37 47 41 -100) -100]
Test Case: 572 | Input/Output: [(100 9 44 -78) -78]
Test Case: 573 | Input/Output: [(53 -63 89 -55) -63]
Test Case: 574 | Input/Output: [(23 -25 47 39) -25]
Test Case: 575 | Input/Output: [(67 -3 60 29) -3]
Test Case: 576 | Input/Output: [(33 16 -86 -84) -86]
Test Case: 577 | Input/Output: [(86 -45 70 -5) -45]
Test Case: 578 | Input/Output: [(-40 -57 -16 -49) -57]
Test Case: 579 | Input/Output: [(13 0 -74 -18) -74]
Test Case: 580 | Input/Output: [(-54 -50 -53 -17) -54]
Test Case: 581 | Input/Output: [(67 44 81 -74) -74]
Test Case: 582 | Input/Output: [(38 -71 60 94) -71]
Test Case: 583 | Input/Output: [(32 44 25 -87) -87]
Test Case: 584 | Input/Output: [(-23 71 -99 -41) -99]
Test Case: 585 | Input/Output: [(6 -39 -89 93) -89]
Test Case: 586 | Input/Output: [(82 -98 53 -29) -98]
Test Case: 587 | Input/Output: [(-53 31 -78 87) -78]
Test Case: 588 | Input/Output: [(0 -82 -11 -60) -82]
Test Case: 589 | Input/Output: [(-19 45 -9 17) -19]
Test Case: 590 | Input/Output: [(46 -37 99 -48) -48]
Test Case: 591 | Input/Output: [(79 -23 -14 66) -23]
Test Case: 592 | Input/Output: [(59 -50 7 -92) -92]
Test Case: 593 | Input/Output: [(87 -97 15 -84) -97]
Test Case: 594 | Input/Output: [(-42 -74 45 -16) -74]
Test Case: 595 | Input/Output: [(-84 -49 49 76) -84]
Test Case: 596 | Input/Output: [(53 49 -75 7) -75]
Test Case: 597 | Input/Output: [(88 -88 -38 36) -88]
Test Case: 598 | Input/Output: [(-36 19 86 -12) -36]
Test Case: 599 | Input/Output: [(85 48 64 41) 41]
Test Case: 600 | Input/Output: [(8 46 -41 27) -41]
Test Case: 601 | Input/Output: [(-22 -53 -28 96) -53]
Test Case: 602 | Input/Output: [(-17 87 -86 -1) -86]
Test Case: 603 | Input/Output: [(58 47 37 11) 11]
Test Case: 604 | Input/Output: [(-87 -76 76 -54) -87]
Test Case: 605 | Input/Output: [(-93 -17 -51 79) -93]
Test Case: 606 | Input/Output: [(67 89 -55 92) -55]
Test Case: 607 | Input/Output: [(-38 -73 -62 64) -73]
Test Case: 608 | Input/Output: [(-46 2 -10 57) -46]
Test Case: 609 | Input/Output: [(-80 -50 -53 -61) -80]
Test Case: 610 | Input/Output: [(6 61 -19 74) -19]
Test Case: 611 | Input/Output: [(23 52 -39 -48) -48]
Test Case: 612 | Input/Output: [(94 -79 32 45) -79]
Test Case: 613 | Input/Output: [(-59 -100 29 -31) -100]
Test Case: 614 | Input/Output: [(5 -87 -22 -29) -87]
Test Case: 615 | Input/Output: [(62 -89 -56 60) -89]
Test Case: 616 | Input/Output: [(51 80 -26 79) -26]
Test Case: 617 | Input/Output: [(70 86 7 -82) -82]
Test Case: 618 | Input/Output: [(-62 39 -48 48) -62]
Test Case: 619 | Input/Output: [(89 55 -59 -73) -73]
Test Case: 620 | Input/Output: [(-22 45 56 -8) -22]
Test Case: 621 | Input/Output: [(-78 -4 98 -19) -78]
Test Case: 622 | Input/Output: [(84 61 -93 -37) -93]
Test Case: 623 | Input/Output: [(-58 -86 97 -30) -86]
Test Case: 624 | Input/Output: [(80 78 -55 -88) -88]
Test Case: 625 | Input/Output: [(-52 -5 74 82) -52]
Test Case: 626 | Input/Output: [(73 76 0 16) 0]
Test Case: 627 | Input/Output: [(72 94 99 -96) -96]
Test Case: 628 | Input/Output: [(14 -94 -45 -57) -94]
Test Case: 629 | Input/Output: [(10 -18 -70 -99) -99]
Test Case: 630 | Input/Output: [(-52 -55 41 70) -55]
Test Case: 631 | Input/Output: [(25 26 20 92) 20]
Test Case: 632 | Input/Output: [(-68 13 66 -82) -82]
Test Case: 633 | Input/Output: [(-47 -89 -4 -18) -89]
Test Case: 634 | Input/Output: [(-94 61 -83 -43) -94]
Test Case: 635 | Input/Output: [(-89 81 -44 -44) -89]
Test Case: 636 | Input/Output: [(-83 -59 9 6) -83]
Test Case: 637 | Input/Output: [(10 71 58 -8) -8]
Test Case: 638 | Input/Output: [(-91 43 18 -27) -91]
Test Case: 639 | Input/Output: [(10 55 -59 -82) -82]
Test Case: 640 | Input/Output: [(-54 -49 88 -59) -59]
Test Case: 641 | Input/Output: [(67 -3 -77 -26) -77]
Test Case: 642 | Input/Output: [(-63 -81 -57 45) -81]
Test Case: 643 | Input/Output: [(24 78 62 -55) -55]
Test Case: 644 | Input/Output: [(94 35 -45 -72) -72]
Test Case: 645 | Input/Output: [(36 39 43 -42) -42]
Test Case: 646 | Input/Output: [(11 -67 -42 88) -67]
Test Case: 647 | Input/Output: [(-46 50 -74 22) -74]
Test Case: 648 | Input/Output: [(73 -5 16 93) -5]
Test Case: 649 | Input/Output: [(-10 0 -52 -28) -52]
Test Case: 650 | Input/Output: [(-77 19 -39 45) -77]
Test Case: 651 | Input/Output: [(56 68 -47 -17) -47]
Test Case: 652 | Input/Output: [(-89 -49 -35 -36) -89]
Test Case: 653 | Input/Output: [(-19 -68 58 -92) -92]
Test Case: 654 | Input/Output: [(91 50 -16 4) -16]
Test Case: 655 | Input/Output: [(87 48 48 87) 48]
Test Case: 656 | Input/Output: [(3 84 97 -76) -76]
Test Case: 657 | Input/Output: [(26 -7 77 -40) -40]
Test Case: 658 | Input/Output: [(-67 90 -32 73) -67]
Test Case: 659 | Input/Output: [(29 -68 23 1) -68]
Test Case: 660 | Input/Output: [(-84 79 -64 -75) -84]
Test Case: 661 | Input/Output: [(11 -5 -81 14) -81]
Test Case: 662 | Input/Output: [(97 -4 84 67) -4]
Test Case: 663 | Input/Output: [(-51 -78 -92 36) -92]
Test Case: 664 | Input/Output: [(94 1 -62 -48) -62]
Test Case: 665 | Input/Output: [(44 -12 44 98) -12]
Test Case: 666 | Input/Output: [(-84 -67 -87 70) -87]
Test Case: 667 | Input/Output: [(-41 -51 92 -49) -51]
Test Case: 668 | Input/Output: [(-61 65 -73 52) -73]
Test Case: 669 | Input/Output: [(13 -34 44 93) -34]
Test Case: 670 | Input/Output: [(-10 -12 -8 -48) -48]
Test Case: 671 | Input/Output: [(45 -43 -81 53) -81]
Test Case: 672 | Input/Output: [(87 -43 -99 13) -99]
Test Case: 673 | Input/Output: [(43 11 -68 94) -68]
Test Case: 674 | Input/Output: [(4 33 61 34) 4]
Test Case: 675 | Input/Output: [(1 -78 -84 -78) -84]
Test Case: 676 | Input/Output: [(5 12 -27 46) -27]
Test Case: 677 | Input/Output: [(-34 95 -7 -65) -65]
Test Case: 678 | Input/Output: [(-58 10 -80 86) -80]
Test Case: 679 | Input/Output: [(13 62 -89 65) -89]
Test Case: 680 | Input/Output: [(31 62 10 -32) -32]
Test Case: 681 | Input/Output: [(-40 -10 -79 -12) -79]
Test Case: 682 | Input/Output: [(-62 15 -22 -80) -80]
Test Case: 683 | Input/Output: [(13 -11 22 96) -11]
Test Case: 684 | Input/Output: [(-55 89 -54 70) -55]
Test Case: 685 | Input/Output: [(73 72 58 86) 58]
Test Case: 686 | Input/Output: [(79 35 22 93) 22]
Test Case: 687 | Input/Output: [(-12 25 42 80) -12]
Test Case: 688 | Input/Output: [(-40 -3 2 88) -40]
Test Case: 689 | Input/Output: [(46 -16 65 64) -16]
Test Case: 690 | Input/Output: [(-25 94 45 -19) -25]
Test Case: 691 | Input/Output: [(-99 -26 88 -47) -99]
Test Case: 692 | Input/Output: [(99 43 0 -48) -48]
Test Case: 693 | Input/Output: [(49 -86 36 -3) -86]
Test Case: 694 | Input/Output: [(52 58 60 55) 52]
Test Case: 695 | Input/Output: [(-76 -41 32 17) -76]
Test Case: 696 | Input/Output: [(-31 66 85 38) -31]
Test Case: 697 | Input/Output: [(-56 -62 44 67) -62]
Test Case: 698 | Input/Output: [(59 -80 44 1) -80]
Test Case: 699 | Input/Output: [(3 59 -87 92) -87]
Test Case: 700 | Input/Output: [(-98 56 -44 89) -98]
Test Case: 701 | Input/Output: [(-80 -25 -23 65) -80]
Test Case: 702 | Input/Output: [(-33 17 59 41) -33]
Test Case: 703 | Input/Output: [(-100 -99 20 -63) -100]
Test Case: 704 | Input/Output: [(-95 -27 -90 -50) -95]
Test Case: 705 | Input/Output: [(-72 -71 52 66) -72]
Test Case: 706 | Input/Output: [(-36 96 -24 84) -36]
Test Case: 707 | Input/Output: [(4 61 -63 43) -63]
Test Case: 708 | Input/Output: [(61 21 -41 -79) -79]
Test Case: 709 | Input/Output: [(-25 15 26 13) -25]
Test Case: 710 | Input/Output: [(-63 44 14 26) -63]
Test Case: 711 | Input/Output: [(-17 -41 41 9) -41]
Test Case: 712 | Input/Output: [(42 -42 39 -60) -60]
Test Case: 713 | Input/Output: [(-13 77 14 6) -13]
Test Case: 714 | Input/Output: [(-80 -59 53 46) -80]
Test Case: 715 | Input/Output: [(64 97 -36 -35) -36]
Test Case: 716 | Input/Output: [(-96 -91 -41 11) -96]
Test Case: 717 | Input/Output: [(-93 -51 60 -87) -93]
Test Case: 718 | Input/Output: [(-4 33 -83 43) -83]
Test Case: 719 | Input/Output: [(35 11 -41 89) -41]
Test Case: 720 | Input/Output: [(-49 0 90 49) -49]
Test Case: 721 | Input/Output: [(-86 -78 -3 -79) -86]
Test Case: 722 | Input/Output: [(86 -32 91 -9) -32]
Test Case: 723 | Input/Output: [(-52 38 -20 -14) -52]
Test Case: 724 | Input/Output: [(-30 96 -15 44) -30]
Test Case: 725 | Input/Output: [(-44 -39 79 46) -44]
Test Case: 726 | Input/Output: [(-71 96 -44 -1) -71]
Test Case: 727 | Input/Output: [(-33 34 -40 -44) -44]
Test Case: 728 | Input/Output: [(-86 -34 19 18) -86]
Test Case: 729 | Input/Output: [(-14 24 2 38) -14]
Test Case: 730 | Input/Output: [(-89 72 41 80) -89]
Test Case: 731 | Input/Output: [(-30 89 -55 -90) -90]
Test Case: 732 | Input/Output: [(93 -86 -92 -64) -92]
Test Case: 733 | Input/Output: [(-22 81 -28 -59) -59]
Test Case: 734 | Input/Output: [(-44 -51 44 -99) -99]
Test Case: 735 | Input/Output: [(-2 -29 64 -96) -96]
Test Case: 736 | Input/Output: [(-37 22 -55 -24) -55]
Test Case: 737 | Input/Output: [(58 80 -44 -89) -89]
Test Case: 738 | Input/Output: [(-32 -3 81 63) -32]
Test Case: 739 | Input/Output: [(29 -81 63 6) -81]
Test Case: 740 | Input/Output: [(16 70 -86 -14) -86]
Test Case: 741 | Input/Output: [(29 -61 30 -23) -61]
Test Case: 742 | Input/Output: [(-17 -41 -33 -100) -100]
Test Case: 743 | Input/Output: [(-49 92 96 -59) -59]
Test Case: 744 | Input/Output: [(57 -10 -90 5) -90]
Test Case: 745 | Input/Output: [(-62 27 -67 -24) -67]
Test Case: 746 | Input/Output: [(90 34 84 -32) -32]
Test Case: 747 | Input/Output: [(-16 32 -26 30) -26]
Test Case: 748 | Input/Output: [(48 -90 -82 -71) -90]
Test Case: 749 | Input/Output: [(-65 -23 55 -17) -65]
Test Case: 750 | Input/Output: [(67 -30 -3 -12) -30]
Test Case: 751 | Input/Output: [(-81 -83 30 48) -83]
Test Case: 752 | Input/Output: [(-73 4 -17 57) -73]
Test Case: 753 | Input/Output: [(-61 72 15 -38) -61]
Test Case: 754 | Input/Output: [(-80 14 98 71) -80]
Test Case: 755 | Input/Output: [(-24 50 68 -36) -36]
Test Case: 756 | Input/Output: [(-74 31 -72 71) -74]
Test Case: 757 | Input/Output: [(57 -68 -54 20) -68]
Test Case: 758 | Input/Output: [(-41 -9 -42 -98) -98]
Test Case: 759 | Input/Output: [(47 -89 -96 -10) -96]
Test Case: 760 | Input/Output: [(-99 69 12 -16) -99]
Test Case: 761 | Input/Output: [(-71 71 76 78) -71]
Test Case: 762 | Input/Output: [(52 95 51 21) 21]
Test Case: 763 | Input/Output: [(-89 -77 -43 -65) -89]
Test Case: 764 | Input/Output: [(-89 -96 -4 -4) -96]
Test Case: 765 | Input/Output: [(2 63 -24 27) -24]
Test Case: 766 | Input/Output: [(-77 99 -91 -91) -91]
Test Case: 767 | Input/Output: [(100 -81 16 -98) -98]
Test Case: 768 | Input/Output: [(48 92 -49 6) -49]
Test Case: 769 | Input/Output: [(53 47 36 68) 36]
Test Case: 770 | Input/Output: [(-46 50 -54 -69) -69]
Test Case: 771 | Input/Output: [(71 80 -83 56) -83]
Test Case: 772 | Input/Output: [(69 27 47 -51) -51]
Test Case: 773 | Input/Output: [(-93 -41 34 -35) -93]
Test Case: 774 | Input/Output: [(64 12 19 1) 1]
Test Case: 775 | Input/Output: [(-60 96 -7 -54) -60]
Test Case: 776 | Input/Output: [(-65 56 71 25) -65]
Test Case: 777 | Input/Output: [(-28 18 -77 -57) -77]
Test Case: 778 | Input/Output: [(-63 -75 96 65) -75]
Test Case: 779 | Input/Output: [(-78 71 -8 -9) -78]
Test Case: 780 | Input/Output: [(75 37 -72 65) -72]
Test Case: 781 | Input/Output: [(-13 -31 -85 9) -85]
Test Case: 782 | Input/Output: [(75 -72 -6 71) -72]
Test Case: 783 | Input/Output: [(93 55 -24 -88) -88]
Test Case: 784 | Input/Output: [(0 -11 -55 -18) -55]
Test Case: 785 | Input/Output: [(29 -5 -49 30) -49]
Test Case: 786 | Input/Output: [(-12 39 43 -85) -85]
Test Case: 787 | Input/Output: [(-52 -58 -71 84) -71]
Test Case: 788 | Input/Output: [(-60 -58 -24 76) -60]
Test Case: 789 | Input/Output: [(58 -87 11 -62) -87]
Test Case: 790 | Input/Output: [(62 5 87 -50) -50]
Test Case: 791 | Input/Output: [(-27 -31 44 -40) -40]
Test Case: 792 | Input/Output: [(-50 71 -86 94) -86]
Test Case: 793 | Input/Output: [(-48 -51 -99 -95) -99]
Test Case: 794 | Input/Output: [(49 35 90 -31) -31]
Test Case: 795 | Input/Output: [(-51 -64 -67 18) -67]
Test Case: 796 | Input/Output: [(33 -82 29 -32) -82]
Test Case: 797 | Input/Output: [(99 26 -14 -71) -71]
Test Case: 798 | Input/Output: [(6 93 -14 -95) -95]
Test Case: 799 | Input/Output: [(26 -98 -8 59) -98]
Test Case: 800 | Input/Output: [(-98 26 -72 -97) -98]
Test Case: 801 | Input/Output: [(42 56 -12 -3) -12]
Test Case: 802 | Input/Output: [(-20 -100 47 9) -100]
Test Case: 803 | Input/Output: [(-13 -73 62 -32) -73]
Test Case: 804 | Input/Output: [(-17 -93 -44 18) -93]
Test Case: 805 | Input/Output: [(-95 -59 -58 67) -95]
Test Case: 806 | Input/Output: [(-59 -96 -7 87) -96]
Test Case: 807 | Input/Output: [(51 80 23 66) 23]
Test Case: 808 | Input/Output: [(-92 10 -12 28) -92]
Test Case: 809 | Input/Output: [(25 25 -8 -46) -46]
Test Case: 810 | Input/Output: [(94 -31 -39 39) -39]
Test Case: 811 | Input/Output: [(-82 -42 -38 10) -82]
Test Case: 812 | Input/Output: [(9 51 -36 -78) -78]
Test Case: 813 | Input/Output: [(-50 -19 49 -97) -97]
Test Case: 814 | Input/Output: [(-59 94 -14 86) -59]
Test Case: 815 | Input/Output: [(-6 33 -24 -9) -24]
Test Case: 816 | Input/Output: [(89 18 56 -35) -35]
Test Case: 817 | Input/Output: [(44 9 -82 83) -82]
Test Case: 818 | Input/Output: [(-76 -54 36 -64) -76]
Test Case: 819 | Input/Output: [(-50 12 34 -82) -82]
Test Case: 820 | Input/Output: [(-29 -48 83 4) -48]
Test Case: 821 | Input/Output: [(-33 -53 50 27) -53]
Test Case: 822 | Input/Output: [(99 46 -54 -14) -54]
Test Case: 823 | Input/Output: [(6 -2 -39 -47) -47]
Test Case: 824 | Input/Output: [(76 100 -86 19) -86]
Test Case: 825 | Input/Output: [(-59 -14 22 3) -59]
Test Case: 826 | Input/Output: [(-87 -71 78 -26) -87]
Test Case: 827 | Input/Output: [(52 -35 -32 31) -35]
Test Case: 828 | Input/Output: [(21 -23 -68 72) -68]
Test Case: 829 | Input/Output: [(47 45 -89 -49) -89]
Test Case: 830 | Input/Output: [(51 -54 87 -45) -54]
Test Case: 831 | Input/Output: [(-60 -88 5 7) -88]
Test Case: 832 | Input/Output: [(-88 20 14 50) -88]
Test Case: 833 | Input/Output: [(-58 4 47 -99) -99]
Test Case: 834 | Input/Output: [(-68 46 59 -13) -68]
Test Case: 835 | Input/Output: [(-43 42 72 86) -43]
Test Case: 836 | Input/Output: [(34 24 -14 -37) -37]
Test Case: 837 | Input/Output: [(-7 -20 59 -3) -20]
Test Case: 838 | Input/Output: [(74 -98 -4 84) -98]
Test Case: 839 | Input/Output: [(-17 -40 -36 -79) -79]
Test Case: 840 | Input/Output: [(-65 -12 2 91) -65]
Test Case: 841 | Input/Output: [(-60 79 15 -94) -94]
Test Case: 842 | Input/Output: [(-81 -90 83 -91) -91]
Test Case: 843 | Input/Output: [(34 -1 -24 -23) -24]
Test Case: 844 | Input/Output: [(-70 16 10 -17) -70]
Test Case: 845 | Input/Output: [(-27 46 6 -10) -27]
Test Case: 846 | Input/Output: [(78 9 50 22) 9]
Test Case: 847 | Input/Output: [(2 81 99 -31) -31]
Test Case: 848 | Input/Output: [(-57 -100 -56 -48) -100]
Test Case: 849 | Input/Output: [(-98 85 14 32) -98]
Test Case: 850 | Input/Output: [(-80 -90 17 85) -90]
Test Case: 851 | Input/Output: [(79 83 -82 97) -82]
Test Case: 852 | Input/Output: [(2 -60 -50 -45) -60]
Test Case: 853 | Input/Output: [(-12 -60 71 -42) -60]
Test Case: 854 | Input/Output: [(82 -46 21 79) -46]
Test Case: 855 | Input/Output: [(-82 9 -66 -13) -82]
Test Case: 856 | Input/Output: [(27 86 -95 -52) -95]
Test Case: 857 | Input/Output: [(-56 -15 -21 22) -56]
Test Case: 858 | Input/Output: [(51 -77 -72 71) -77]
Test Case: 859 | Input/Output: [(26 65 -67 11) -67]
Test Case: 860 | Input/Output: [(7 91 65 79) 7]
Test Case: 861 | Input/Output: [(90 -51 11 9) -51]
Test Case: 862 | Input/Output: [(-10 -73 -36 -2) -73]
Test Case: 863 | Input/Output: [(57 -55 -9 -50) -55]
Test Case: 864 | Input/Output: [(-65 -82 -37 76) -82]
Test Case: 865 | Input/Output: [(-14 -99 -74 -65) -99]
Test Case: 866 | Input/Output: [(-87 -13 11 6) -87]
Test Case: 867 | Input/Output: [(-22 -32 56 64) -32]
Test Case: 868 | Input/Output: [(86 -47 -62 20) -62]
Test Case: 869 | Input/Output: [(-13 3 -95 -4) -95]
Test Case: 870 | Input/Output: [(-16 77 53 -23) -23]
Test Case: 871 | Input/Output: [(-64 -88 -35 88) -88]
Test Case: 872 | Input/Output: [(-59 91 -56 47) -59]
Test Case: 873 | Input/Output: [(27 -38 -21 -16) -38]
Test Case: 874 | Input/Output: [(53 11 94 -11) -11]
Test Case: 875 | Input/Output: [(-38 -51 45 86) -51]
Test Case: 876 | Input/Output: [(89 73 -58 -12) -58]
Test Case: 877 | Input/Output: [(47 24 16 45) 16]
Test Case: 878 | Input/Output: [(-3 -22 51 -16) -22]
Test Case: 879 | Input/Output: [(-76 71 94 -55) -76]
Test Case: 880 | Input/Output: [(-61 -64 -96 -12) -96]
Test Case: 881 | Input/Output: [(78 -58 99 6) -58]
Test Case: 882 | Input/Output: [(31 -1 -83 38) -83]
Test Case: 883 | Input/Output: [(-31 90 80 93) -31]
Test Case: 884 | Input/Output: [(59 -46 63 -90) -90]
Test Case: 885 | Input/Output: [(-73 14 39 -16) -73]
Test Case: 886 | Input/Output: [(-22 40 2 -97) -97]
Test Case: 887 | Input/Output: [(-59 -76 -29 -92) -92]
Test Case: 888 | Input/Output: [(77 30 24 -50) -50]
Test Case: 889 | Input/Output: [(42 7 72 48) 7]
Test Case: 890 | Input/Output: [(80 -87 92 64) -87]
Test Case: 891 | Input/Output: [(89 26 47 79) 26]
Test Case: 892 | Input/Output: [(95 60 -57 78) -57]
Test Case: 893 | Input/Output: [(-79 66 83 -89) -89]
Test Case: 894 | Input/Output: [(77 -48 -16 77) -48]
Test Case: 895 | Input/Output: [(-51 -69 -90 67) -90]
Test Case: 896 | Input/Output: [(-58 -66 85 63) -66]
Test Case: 897 | Input/Output: [(-49 63 -17 77) -49]
Test Case: 898 | Input/Output: [(32 -27 46 25) -27]
Test Case: 899 | Input/Output: [(-14 50 -96 -49) -96]
Test Case: 900 | Input/Output: [(17 -84 -46 -43) -84]
Test Case: 901 | Input/Output: [(-50 -28 42 -11) -50]
Test Case: 902 | Input/Output: [(30 74 53 -52) -52]
Test Case: 903 | Input/Output: [(100 -33 -46 -74) -74]
Test Case: 904 | Input/Output: [(64 -69 90 94) -69]
Test Case: 905 | Input/Output: [(99 -4 -72 -90) -90]
Test Case: 906 | Input/Output: [(-49 91 29 -65) -65]
Test Case: 907 | Input/Output: [(92 -44 74 -9) -44]
Test Case: 908 | Input/Output: [(-27 56 12 51) -27]
Test Case: 909 | Input/Output: [(36 -75 -23 -98) -98]
Test Case: 910 | Input/Output: [(19 -54 96 -1) -54]
Test Case: 911 | Input/Output: [(-47 -30 92 12) -47]
Test Case: 912 | Input/Output: [(29 -29 -26 64) -29]
Test Case: 913 | Input/Output: [(90 -19 39 19) -19]
Test Case: 914 | Input/Output: [(-46 -52 72 -61) -61]
Test Case: 915 | Input/Output: [(69 87 -85 93) -85]
Test Case: 916 | Input/Output: [(-33 2 61 59) -33]
Test Case: 917 | Input/Output: [(28 48 98 13) 13]
Test Case: 918 | Input/Output: [(81 30 -35 2) -35]
Test Case: 919 | Input/Output: [(-93 83 -74 -62) -93]
Test Case: 920 | Input/Output: [(72 42 1 -62) -62]
Test Case: 921 | Input/Output: [(-91 -8 95 46) -91]
Test Case: 922 | Input/Output: [(98 68 88 76) 68]
Test Case: 923 | Input/Output: [(-3 69 17 -74) -74]
Test Case: 924 | Input/Output: [(14 -27 -70 -59) -70]
Test Case: 925 | Input/Output: [(-26 -69 94 31) -69]
Test Case: 926 | Input/Output: [(-27 29 -69 97) -69]
Test Case: 927 | Input/Output: [(21 73 -51 25) -51]
Test Case: 928 | Input/Output: [(-72 -82 46 94) -82]
Test Case: 929 | Input/Output: [(15 -98 -41 23) -98]
Test Case: 930 | Input/Output: [(-29 -11 -39 65) -39]
Test Case: 931 | Input/Output: [(5 -34 100 14) -34]
Test Case: 932 | Input/Output: [(37 -48 -54 -88) -88]
Test Case: 933 | Input/Output: [(93 -17 -8 64) -17]
Test Case: 934 | Input/Output: [(-62 -65 78 -64) -65]
Test Case: 935 | Input/Output: [(-30 -71 -19 50) -71]
Test Case: 936 | Input/Output: [(85 -44 52 54) -44]
Test Case: 937 | Input/Output: [(-32 -88 -14 41) -88]
Test Case: 938 | Input/Output: [(0 27 71 74) 0]
Test Case: 939 | Input/Output: [(96 82 -45 81) -45]
Test Case: 940 | Input/Output: [(-72 -80 -86 24) -86]
Test Case: 941 | Input/Output: [(-64 -48 59 0) -64]
Test Case: 942 | Input/Output: [(45 -60 62 -52) -60]
Test Case: 943 | Input/Output: [(100 27 22 35) 22]
Test Case: 944 | Input/Output: [(18 79 -24 -20) -24]
Test Case: 945 | Input/Output: [(-22 -71 29 -1) -71]
Test Case: 946 | Input/Output: [(-81 -61 -53 4) -81]
Test Case: 947 | Input/Output: [(81 95 -90 -81) -90]
Test Case: 948 | Input/Output: [(83 -5 -2 62) -5]
Test Case: 949 | Input/Output: [(-66 23 14 47) -66]
Test Case: 950 | Input/Output: [(46 -68 81 14) -68]
Test Case: 951 | Input/Output: [(25 51 -62 32) -62]
Test Case: 952 | Input/Output: [(68 24 -55 -61) -61]
Test Case: 953 | Input/Output: [(-28 -94 65 17) -94]
Test Case: 954 | Input/Output: [(98 20 62 43) 20]
Test Case: 955 | Input/Output: [(12 85 0 -29) -29]
Test Case: 956 | Input/Output: [(-7 -50 -41 12) -50]
Test Case: 957 | Input/Output: [(-97 -4 -42 -65) -97]
Test Case: 958 | Input/Output: [(47 95 22 -47) -47]
Test Case: 959 | Input/Output: [(39 -22 -10 -82) -82]
Test Case: 960 | Input/Output: [(-16 35 -95 -70) -95]
Test Case: 961 | Input/Output: [(-70 -63 -1 -96) -96]
Test Case: 962 | Input/Output: [(-14 8 31 59) -14]
Test Case: 963 | Input/Output: [(-37 -35 -11 61) -37]
Test Case: 964 | Input/Output: [(-79 -92 94 -37) -92]
Test Case: 965 | Input/Output: [(85 44 -20 35) -20]
Test Case: 966 | Input/Output: [(55 -31 43 -25) -31]
Test Case: 967 | Input/Output: [(38 -56 -25 -83) -83]
Test Case: 968 | Input/Output: [(16 -10 51 97) -10]
Test Case: 969 | Input/Output: [(2 -68 7 64) -68]
Test Case: 970 | Input/Output: [(28 -63 -35 -10) -63]
Test Case: 971 | Input/Output: [(-21 -4 15 -17) -21]
Test Case: 972 | Input/Output: [(92 28 -37 70) -37]
Test Case: 973 | Input/Output: [(77 -78 -99 8) -99]
Test Case: 974 | Input/Output: [(93 -59 82 -27) -59]
Test Case: 975 | Input/Output: [(41 -18 4 -67) -67]
Test Case: 976 | Input/Output: [(-47 -67 7 60) -67]
Test Case: 977 | Input/Output: [(-62 -20 -41 3) -62]
Test Case: 978 | Input/Output: [(51 20 71 -59) -59]
Test Case: 979 | Input/Output: [(94 -89 41 -12) -89]
Test Case: 980 | Input/Output: [(-12 95 -8 49) -12]
Test Case: 981 | Input/Output: [(47 -15 -89 77) -89]
Test Case: 982 | Input/Output: [(-71 -86 72 -21) -86]
Test Case: 983 | Input/Output: [(-51 -49 -38 60) -51]
Test Case: 984 | Input/Output: [(-7 -67 -26 10) -67]
Test Case: 985 | Input/Output: [(-42 75 55 2) -42]
Test Case: 986 | Input/Output: [(50 59 58 88) 50]
Test Case: 987 | Input/Output: [(-54 -59 -61 -83) -83]
Test Case: 988 | Input/Output: [(-9 61 -11 -34) -34]
Test Case: 989 | Input/Output: [(100 -85 -94 -98) -98]
Test Case: 990 | Input/Output: [(-79 -85 72 93) -85]
Test Case: 991 | Input/Output: [(60 -17 -74 -20) -74]
Test Case: 992 | Input/Output: [(-4 73 67 99) -4]
Test Case: 993 | Input/Output: [(75 84 46 -58) -58]
Test Case: 994 | Input/Output: [(26 -48 16 -100) -100]
Test Case: 995 | Input/Output: [(-54 -84 62 4) -84]
Test Case: 996 | Input/Output: [(88 -55 -86 50) -86]
Test Case: 997 | Input/Output: [(84 -75 -40 -49) -75]
Test Case: 998 | Input/Output: [(62 9 -65 -48) -65]
Test Case: 999 | Input/Output: [(88 -100 -94 -83) -100]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:uniform-addition-and-deletion 1.0}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 3000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
random-screen = false
random-seed = 13 3 -73 -6 17 52 -115 -69 -50 -121 67 -36 93 114 47 104
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-32 -32 -32 -62] -62] [[-36 51 -36 -36] -36] [[-54 36 36 36] -54] [[62 62 62 -38] -38] [[-70 -70 44 -70] -70] [[-16 46 -16 -16] -16] [[-60 -60 40 -60] -60] [[-22 -22 -22 -88] -88] [[-13 52 52 52] -13] [[-58 -69 -58 -58] -69] [(-45 -45 -45 -45) -45] [(64 64 64 64) 64] [(-6 -6 -6 -6) -6] [(-46 -46 -46 -46) -46] [(-97 -97 -97 -97) -97] [(15 11 64 22) 11] [(67 84 13 34) 13] [(7 26 70 74) 7] [(27 35 67 77) 27] [(7 33 81 35) 7] [(80 40 64 9) 9] [(97 88 96 86) 86] [(11 34 80 26) 11] [(71 29 58 19) 19] [(29 12 18 55) 12] [(81 75 98 96) 75] [(0 31 34 64) 0] [(69 55 63 59) 55] [(0 2 73 66) 0] [(66 90 90 42) 42] [(5 5 83 35) 5] [(76 74 10 26) 10] [(24 42 13 49) 13] [(38 66 69 39) 38] [(56 22 70 31) 22] [(31 -7 44 -69) -69] [(51 68 -7 45) -7] [(-22 57 33 -62) -62] [(-84 -14 59 -52) -84] [(-59 -85 -16 95) -85] [(-40 20 -45 -18) -45] [(22 -65 -96 11) -96] [(-45 9 -26 1) -45] [(99 -11 -70 -40) -70] [(-97 98 41 -63) -97] [(-95 -19 66 -32) -95] [(-87 -68 95 -61) -87] [(69 28 89 74) 28] [(22 -11 22 -1) -11] [(-62 86 -21 3) -62] [(-80 78 -7 -55) -80] [(40 18 -69 -71) -71] [(74 -24 -67 43) -67] [(-87 17 -96 -21) -96] [(-4 72 13 97) -4] [(86 -79 96 -74) -79] [(-42 12 39 22) -42] [(5 -35 11 50) -35] [(37 72 10 33) 10] [(1 -47 12 8) -47] [(-55 -61 -44 95) -61] [(73 -60 -73 97) -73] [(-22 -50 99 20) -50] [(28 16 36 47) 16] [(-99 91 -86 65) -99] [(-73 95 37 39) -73] [(-2 -20 -61 8) -61] [(-2 -51 -94 92) -94] [(-2 -32 98 37) -32] [(60 -13 -73 54) -73] [(-44 -18 65 -78) -78] [(33 -6 -28 54) -28] [(-78 24 -67 -13) -78] [(14 96 72 67) 14] [(74 3 15 57) 3] [(-91 93 -97 35) -97] [(95 49 36 78) 36] [(-12 16 72 42) -12] [(87 8 -90 7) -90] [(-96 -29 91 83) -96] [(43 82 -42 -53) -53] [(52 -73 -29 62) -73] [(73 -78 -51 -40) -78] [(46 35 76 62) 35] [(6 -92 81 11) -92] [(9 30 -56 75) -56] [(17 -61 26 -34) -61] [(68 -99 -49 56) -99] [(96 49 -98 -2) -98] [(-44 -22 -14 -96) -96] [(-69 6 -96 42) -96] [(20 -65 82 -97) -97] [(25 -27 -40 81) -40] [(44 -13 43 -94) -94] [(-50 77 -99 -68) -99])
uniform-addition-and-deletion-rate = 0.09
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 637
Test mean error for best: 0.63700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -62                 | Program output: -62                
Correct output: -36                 | Program output: -36                
Correct output: -54                 | Program output: 36                 
Correct output: -38                 | Program output: -38                
Correct output: -70                 | Program output: -70                
Correct output: -16                 | Program output: -16                
Correct output: -60                 | Program output: -60                
Correct output: -88                 | Program output: -88                
Correct output: -13                 | Program output: 52                 
Correct output: -69                 | Program output: -58                
Correct output: -45                 | Program output: -45                
Correct output: 64                  | Program output: 64                 
Correct output: -6                  | Program output: -6                 
Correct output: -46                 | Program output: -46                
Correct output: -97                 | Program output: -97                
Correct output: 11                  | Program output: 22                 
Correct output: 13                  | Program output: 34                 
Correct output: 7                   | Program output: 74                 
Correct output: 27                  | Program output: 77                 
Correct output: 7                   | Program output: 35                 
Correct output: 9                   | Program output: 9                  
Correct output: 86                  | Program output: 86                 
Correct output: 11                  | Program output: 26                 
Correct output: 19                  | Program output: 19                 
Correct output: 12                  | Program output: 55                 
Correct output: 75                  | Program output: 96                 
Correct output: 0                   | Program output: 64                 
Correct output: 55                  | Program output: 59                 
Correct output: 0                   | Program output: 66                 
Correct output: 42                  | Program output: 42                 
Correct output: 5                   | Program output: 35                 
Correct output: 10                  | Program output: 26                 
Correct output: 13                  | Program output: 49                 
Correct output: 38                  | Program output: 39                 
Correct output: 22                  | Program output: 31                 
Correct output: -69                 | Program output: -69                
Correct output: -7                  | Program output: 45                 
Correct output: -62                 | Program output: -62                
Correct output: -84                 | Program output: -52                
Correct output: -85                 | Program output: 95                 
Correct output: -45                 | Program output: -18                
Correct output: -96                 | Program output: 11                 
Correct output: -45                 | Program output: 1                  
Correct output: -70                 | Program output: -40                
Correct output: -97                 | Program output: -63                
Correct output: -95                 | Program output: -32                
Correct output: -87                 | Program output: -61                
Correct output: 28                  | Program output: 74                 
Correct output: -11                 | Program output: -1                 
Correct output: -62                 | Program output: 3                  
Correct output: -80                 | Program output: -55                
Correct output: -71                 | Program output: -71                
Correct output: -67                 | Program output: 43                 
Correct output: -96                 | Program output: -21                
Correct output: -4                  | Program output: 97                 
Correct output: -79                 | Program output: -74                
Correct output: -42                 | Program output: 22                 
Correct output: -35                 | Program output: 50                 
Correct output: 10                  | Program output: 33                 
Correct output: -47                 | Program output: 8                  
Correct output: -61                 | Program output: 95                 
Correct output: -73                 | Program output: 97                 
Correct output: -50                 | Program output: 20                 
Correct output: 16                  | Program output: 47                 
Correct output: -99                 | Program output: 65                 
Correct output: -73                 | Program output: 39                 
Correct output: -61                 | Program output: 8                  
Correct output: -94                 | Program output: 92                 
Correct output: -32                 | Program output: 37                 
Correct output: -73                 | Program output: 54                 
Correct output: -78                 | Program output: -78                
Correct output: -28                 | Program output: 54                 
Correct output: -78                 | Program output: -13                
Correct output: 14                  | Program output: 67                 
Correct output: 3                   | Program output: 57                 
Correct output: -97                 | Program output: 35                 
Correct output: 36                  | Program output: 78                 
Correct output: -12                 | Program output: 42                 
Correct output: -90                 | Program output: 7                  
Correct output: -96                 | Program output: 83                 
Correct output: -53                 | Program output: -53                
Correct output: -73                 | Program output: 62                 
Correct output: -78                 | Program output: -40                
Correct output: 35                  | Program output: 62                 
Correct output: -92                 | Program output: 11                 
Correct output: -56                 | Program output: 75                 
Correct output: -61                 | Program output: -34                
Correct output: -99                 | Program output: 56                 
Correct output: -98                 | Program output: -2                 
Correct output: -96                 | Program output: -96                
Correct output: -96                 | Program output: 42                 
Correct output: -97                 | Program output: -97                
Correct output: -40                 | Program output: 81                 
Correct output: -94                 | Program output: -94                
Correct output: -99                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_shove} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction tag_exec_316} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_yank} {:close 0, :instruction in4} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_not} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_while} {:close 1, :instruction integer_flush} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction tag_integer_848} {:close 0, :instruction exec_while} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction tag_exec_844} {:close 1, :instruction exec_yank} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_xor} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_add} {:close 0, :instruction integer_pop} {:close 2, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 2, :instruction boolean_eq} {:close 0, :instruction exec_s_when_autoconstructing})
Lexicase best program: (boolean_shove integer_div boolean_dup_items tag_exec_316 (exec_stackdepth) integer_mult exec_dup (exec_if () (boolean_yank in4 integer_dup_items) exec_dup_times (integer_sub boolean_not print_boolean boolean_or boolean_invert_first_then_and exec_yank) integer_dup_items) exec_while (integer_flush) print_integer boolean_shove exec_dup (exec_k_when_autoconstructing (boolean_flush exec_yankdup) (integer_swap) boolean_frominteger) in3 boolean_dup tag_integer_848 exec_while (exec_yank in3 integer_eq in3 tag_exec_844 (exec_yank) boolean_flush) integer_fromboolean integer_mult integer_sub exec_k_when_autoconstructing () (exec_shove (boolean_or) integer_shove integer_dup integer_yankdup) integer_stackdepth exec_k_when_autoconstructing (boolean_xor) (in4 print_integer boolean_frominteger integer_add integer_pop integer_gte) exec_do*while (integer_div integer_dup integer_min exec_eq) integer_dec integer_swap integer_mod exec_rot () (boolean_and integer_fromboolean boolean_or integer_sub integer_rot boolean_eq) () exec_s_when_autoconstructing () () ())
Lexicase best errors: [1 0 0 1 1 0 1 1 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 98
Percent parens: 0.245
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_shove} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction tag_exec_316} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_yank} {:close 0, :instruction in4} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_not} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_while} {:close 1, :instruction integer_flush} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction tag_integer_848} {:close 0, :instruction exec_while} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction tag_exec_844} {:close 1, :instruction exec_yank} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_xor} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_add} {:close 0, :instruction integer_pop} {:close 2, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 2, :instruction boolean_eq} {:close 0, :instruction exec_s_when_autoconstructing})
Zero cases best program: (boolean_shove integer_div boolean_dup_items tag_exec_316 (exec_stackdepth) integer_mult exec_dup (exec_if () (boolean_yank in4 integer_dup_items) exec_dup_times (integer_sub boolean_not print_boolean boolean_or boolean_invert_first_then_and exec_yank) integer_dup_items) exec_while (integer_flush) print_integer boolean_shove exec_dup (exec_k_when_autoconstructing (boolean_flush exec_yankdup) (integer_swap) boolean_frominteger) in3 boolean_dup tag_integer_848 exec_while (exec_yank in3 integer_eq in3 tag_exec_844 (exec_yank) boolean_flush) integer_fromboolean integer_mult integer_sub exec_k_when_autoconstructing () (exec_shove (boolean_or) integer_shove integer_dup integer_yankdup) integer_stackdepth exec_k_when_autoconstructing (boolean_xor) (in4 print_integer boolean_frominteger integer_add integer_pop integer_gte) exec_do*while (integer_div integer_dup integer_min exec_eq) integer_dec integer_swap integer_mod exec_rot () (boolean_and integer_fromboolean boolean_or integer_sub integer_rot boolean_eq) () exec_s_when_autoconstructing () () ())
Zero cases best errors: [1 0 0 1 1 0 1 1 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 98
Percent parens: 0.245
--- Lexicase Population Statistics ---
Count of elite individuals by case: (2 3 3 6 2 3 2 1000 9 1000)
Population mean number of elite cases: 2.03
Count of perfect (error zero) individuals by case: (2 3 3 6 2 3 2 0 9 0)
Population mean number of perfect (error zero) cases: 0.03
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dec} {:close 0, :instruction integer_div} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_max} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction print_newline} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_rot} {:close 0, :instruction in4} {:close 0, :instruction exec_s} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_if} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_yank} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_and} {:close 2, :instruction exec_rot} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_div} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 0, :instruction in4} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_invert_first_then_and})
Best program: (integer_dec integer_div exec_stackdepth exec_pop () exec_k_when_autoconstructing (integer_max) (exec_yank) boolean_empty integer_shove boolean_eq integer_dup integer_sub in2 boolean_or integer_max boolean_stackdepth integer_max print_newline boolean_yank integer_empty integer_sub integer_flush exec_dup_times (exec_rot () (in4 exec_s (print_boolean exec_noop boolean_shove) (integer_div integer_lt print_integer integer_add boolean_dup integer_max) (boolean_invert_second_then_and integer_gte exec_if () (integer_lte boolean_yank) integer_gte) integer_min boolean_invert_second_then_and in2 integer_dup_times boolean_frominteger boolean_and exec_rot () () (integer_pop) exec_do*while (integer_stackdepth integer_lte integer_swap exec_do*while (boolean_empty exec_s_when_autoconstructing (exec_eq exec_do*while () integer_flush integer_stackdepth integer_eq in2 exec_y_when_autoconstructing (boolean_pop exec_empty) exec_s_when_autoconstructing (integer_empty exec_flush integer_div integer_gt) (exec_do*range (in4 boolean_shove exec_dup_items) exec_pop (integer_swap exec_stackdepth integer_stackdepth) boolean_dup_times integer_fromboolean exec_yank boolean_or exec_stackdepth exec_shove (integer_stackdepth) integer_eq boolean_dup boolean_frominteger exec_when (boolean_frominteger integer_gt in3 print_exec (boolean_invert_first_then_and))) ()) () ()))) ()))
Errors: [1 0 0 1 1 0 1 1 0 1]
Total: 6
Mean: 0.6
Genome size: 94
Size: 125
Percent parens: 0.248
--- Population Statistics ---
Average total errors in population: 9.97
Median total errors in population: 10
Error averages by case: (0.998 0.997 0.997 0.994 0.998 0.997 0.998 1.0 0.991 1.0)
Error minima by case: (0 0 0 0 0 0 0 1 0 1)
Average genome size in population (length): 50.018
Average program size in population (points): 68.707
Average percent parens in population: 0.280
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.279
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 508973
--- Timings ---
Current time: 1559593753852 milliseconds
Total Time:           2.8 seconds
Initialization:       0.1 seconds,  3.5%
Reproduction:         0.8 seconds, 27.2%
Fitness Testing:      1.9 seconds, 69.2%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 656
Test mean error for best: 0.65600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -62                 | Program output: -32                
Correct output: -36                 | Program output: -36                
Correct output: -54                 | Program output: -54                
Correct output: -38                 | Program output: 62                 
Correct output: -70                 | Program output: -70                
Correct output: -16                 | Program output: -16                
Correct output: -60                 | Program output: -60                
Correct output: -88                 | Program output: -22                
Correct output: -13                 | Program output: -13                
Correct output: -69                 | Program output: -58                
Correct output: -45                 | Program output: -45                
Correct output: 64                  | Program output: 64                 
Correct output: -6                  | Program output: -6                 
Correct output: -46                 | Program output: -46                
Correct output: -97                 | Program output: -97                
Correct output: 11                  | Program output: 15                 
Correct output: 13                  | Program output: 67                 
Correct output: 7                   | Program output: 7                  
Correct output: 27                  | Program output: 27                 
Correct output: 7                   | Program output: 7                  
Correct output: 9                   | Program output: 80                 
Correct output: 86                  | Program output: 97                 
Correct output: 11                  | Program output: 11                 
Correct output: 19                  | Program output: 71                 
Correct output: 12                  | Program output: 29                 
Correct output: 75                  | Program output: 81                 
Correct output: 0                   | Program output: 0                  
Correct output: 55                  | Program output: 69                 
Correct output: 0                   | Program output: 0                  
Correct output: 42                  | Program output: 66                 
Correct output: 5                   | Program output: 5                  
Correct output: 10                  | Program output: 76                 
Correct output: 13                  | Program output: 24                 
Correct output: 38                  | Program output: 38                 
Correct output: 22                  | Program output: 56                 
Correct output: -69                 | Program output: 31                 
Correct output: -7                  | Program output: 51                 
Correct output: -62                 | Program output: -22                
Correct output: -84                 | Program output: -84                
Correct output: -85                 | Program output: -59                
Correct output: -45                 | Program output: -40                
Correct output: -96                 | Program output: 22                 
Correct output: -45                 | Program output: -45                
Correct output: -70                 | Program output: 99                 
Correct output: -97                 | Program output: -97                
Correct output: -95                 | Program output: -95                
Correct output: -87                 | Program output: -87                
Correct output: 28                  | Program output: 69                 
Correct output: -11                 | Program output: 22                 
Correct output: -62                 | Program output: -62                
Correct output: -80                 | Program output: -80                
Correct output: -71                 | Program output: 40                 
Correct output: -67                 | Program output: 74                 
Correct output: -96                 | Program output: -87                
Correct output: -4                  | Program output: -4                 
Correct output: -79                 | Program output: 86                 
Correct output: -42                 | Program output: -42                
Correct output: -35                 | Program output: 5                  
Correct output: 10                  | Program output: 37                 
Correct output: -47                 | Program output: 1                  
Correct output: -61                 | Program output: -55                
Correct output: -73                 | Program output: 73                 
Correct output: -50                 | Program output: -22                
Correct output: 16                  | Program output: 28                 
Correct output: -99                 | Program output: -99                
Correct output: -73                 | Program output: -73                
Correct output: -61                 | Program output: -2                 
Correct output: -94                 | Program output: -2                 
Correct output: -32                 | Program output: -2                 
Correct output: -73                 | Program output: 60                 
Correct output: -78                 | Program output: -44                
Correct output: -28                 | Program output: 33                 
Correct output: -78                 | Program output: -78                
Correct output: 14                  | Program output: 14                 
Correct output: 3                   | Program output: 74                 
Correct output: -97                 | Program output: -91                
Correct output: 36                  | Program output: 95                 
Correct output: -12                 | Program output: -12                
Correct output: -90                 | Program output: 87                 
Correct output: -96                 | Program output: -96                
Correct output: -53                 | Program output: 43                 
Correct output: -73                 | Program output: 52                 
Correct output: -78                 | Program output: 73                 
Correct output: 35                  | Program output: 46                 
Correct output: -92                 | Program output: 6                  
Correct output: -56                 | Program output: 9                  
Correct output: -61                 | Program output: 17                 
Correct output: -99                 | Program output: 68                 
Correct output: -98                 | Program output: 96                 
Correct output: -96                 | Program output: -44                
Correct output: -96                 | Program output: -69                
Correct output: -97                 | Program output: 20                 
Correct output: -40                 | Program output: 25                 
Correct output: -94                 | Program output: 44                 
Correct output: -99                 | Program output: -50                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_pop} {:close 1, :instruction tagged_574} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_yankdup} {:close 2, :instruction integer_inc} {:close 1, :instruction integer_lte} {:close 1, :instruction exec_when} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 1, :instruction tag_integer_751} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_when} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_k} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction in1} {:close 0, :instruction tagged_984} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_max} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_eq} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_add} {:close 0, :instruction exec_dup_items})
Lexicase best program: (exec_pop (tagged_574) exec_shove (exec_yankdup integer_inc) integer_lte exec_when () integer_yankdup boolean_eq exec_empty tag_integer_751 integer_div exec_do*range (exec_when () integer_shove integer_mult integer_shove exec_do*range (exec_k (print_integer exec_if (boolean_and exec_yankdup integer_div boolean_invert_second_then_and) (boolean_rot boolean_stackdepth integer_swap exec_do*times (integer_eq boolean_xor in1 tagged_984 print_integer exec_s_when_autoconstructing (exec_dup_times (exec_dup_items boolean_xor exec_flush exec_y_when_autoconstructing (integer_rot boolean_dup) integer_pop exec_stackdepth) integer_yankdup integer_max integer_fromboolean integer_lt) (exec_s_when_autoconstructing (integer_mult boolean_yankdup exec_eq print_integer integer_dec boolean_pop) (integer_add exec_dup_items) ()) ()))) ())))
Lexicase best errors: [0 1 0 1 1 0 0 0 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 77
Percent parens: 0.260
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_pop} {:close 1, :instruction tagged_574} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_yankdup} {:close 2, :instruction integer_inc} {:close 1, :instruction integer_lte} {:close 1, :instruction exec_when} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 1, :instruction tag_integer_751} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_when} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_k} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction in1} {:close 0, :instruction tagged_984} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_max} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_eq} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_add} {:close 0, :instruction exec_dup_items})
Zero cases best program: (exec_pop (tagged_574) exec_shove (exec_yankdup integer_inc) integer_lte exec_when () integer_yankdup boolean_eq exec_empty tag_integer_751 integer_div exec_do*range (exec_when () integer_shove integer_mult integer_shove exec_do*range (exec_k (print_integer exec_if (boolean_and exec_yankdup integer_div boolean_invert_second_then_and) (boolean_rot boolean_stackdepth integer_swap exec_do*times (integer_eq boolean_xor in1 tagged_984 print_integer exec_s_when_autoconstructing (exec_dup_times (exec_dup_items boolean_xor exec_flush exec_y_when_autoconstructing (integer_rot boolean_dup) integer_pop exec_stackdepth) integer_yankdup integer_max integer_fromboolean integer_lt) (exec_s_when_autoconstructing (integer_mult boolean_yankdup exec_eq print_integer integer_dec boolean_pop) (integer_add exec_dup_items) ()) ()))) ())))
Zero cases best errors: [0 1 0 1 1 0 0 0 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 77
Percent parens: 0.260
--- Lexicase Population Statistics ---
Count of elite individuals by case: (220 98 219 91 1000 219 220 305 91 1000)
Population mean number of elite cases: 3.46
Count of perfect (error zero) individuals by case: (220 98 219 91 0 219 220 305 91 0)
Population mean number of perfect (error zero) cases: 1.46
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_pop} {:close 1, :instruction tagged_574} {:close 0, :instruction exec_shove} {:close 2, :instruction integer_inc} {:close 1, :instruction integer_lte} {:close 1, :instruction exec_when} {:close 0, :instruction integer_yankdup} {:close 1, :instruction tag_integer_751} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_when} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_k} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction in1} {:close 0, :instruction tagged_984} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_max} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_eq} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove})
Best program: (integer_yankdup exec_pop (tagged_574) exec_shove (integer_inc) integer_lte exec_when () integer_yankdup tag_integer_751 exec_do*range (exec_when () integer_shove integer_flush) exec_do*range (exec_k (exec_if (boolean_and integer_div boolean_stackdepth integer_eq integer_swap exec_do*times (integer_eq boolean_xor in1 tagged_984 print_integer exec_dup_times (boolean_yankdup exec_dup_items exec_swap (boolean_xor exec_flush integer_rot boolean_dup) (integer_pop exec_stackdepth) integer_yankdup integer_max integer_fromboolean boolean_empty integer_lt) exec_s_when_autoconstructing (integer_mult boolean_eq boolean_yankdup exec_eq print_integer boolean_pop) (integer_add integer_shove) ())) ()) ()))
Errors: [0 1 0 1 1 0 0 0 1 1]
Total: 5
Mean: 0.5
Genome size: 51
Size: 69
Percent parens: 0.261
--- Population Statistics ---
Average total errors in population: 8.537
Median total errors in population: 10
Error averages by case: (0.78 0.902 0.781 0.909 1.0 0.781 0.78 0.695 0.909 1.0)
Error minima by case: (0 0 0 0 1 0 0 0 0 1)
Average genome size in population (length): 59.915
Average program size in population (points): 79.447
Average percent parens in population: 0.244
Minimum age in population: 1.0
Maximum age in population: 1.0
Average age in population: 1.0
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.999
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.999
Total error diversity:				 0.006
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.178
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 1004912
--- Timings ---
Current time: 1559593755911 milliseconds
Total Time:           5.1 seconds
Initialization:       0.1 seconds,  1.9%
Reproduction:         1.8 seconds, 35.7%
Fitness Testing:      2.6 seconds, 51.7%
Report:               0.5 seconds, 10.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 643
Test mean error for best: 0.64300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -62                 | Program output: -32                
Correct output: -36                 | Program output: 51                 
Correct output: -54                 | Program output: 36                 
Correct output: -38                 | Program output: 62                 
Correct output: -70                 | Program output: -70                
Correct output: -16                 | Program output: 46                 
Correct output: -60                 | Program output: -60                
Correct output: -88                 | Program output: -22                
Correct output: -13                 | Program output: 52                 
Correct output: -69                 | Program output: -69                
Correct output: -45                 | Program output: -45                
Correct output: 64                  | Program output: 64                 
Correct output: -6                  | Program output: -6                 
Correct output: -46                 | Program output: -46                
Correct output: -97                 | Program output: -97                
Correct output: 11                  | Program output: 11                 
Correct output: 13                  | Program output: 84                 
Correct output: 7                   | Program output: 26                 
Correct output: 27                  | Program output: 35                 
Correct output: 7                   | Program output: 33                 
Correct output: 9                   | Program output: 40                 
Correct output: 86                  | Program output: 88                 
Correct output: 11                  | Program output: 34                 
Correct output: 19                  | Program output: 29                 
Correct output: 12                  | Program output: 12                 
Correct output: 75                  | Program output: 75                 
Correct output: 0                   | Program output: 31                 
Correct output: 55                  | Program output: 55                 
Correct output: 0                   | Program output: 2                  
Correct output: 42                  | Program output: 90                 
Correct output: 5                   | Program output: 5                  
Correct output: 10                  | Program output: 74                 
Correct output: 13                  | Program output: 42                 
Correct output: 38                  | Program output: 66                 
Correct output: 22                  | Program output: 22                 
Correct output: -69                 | Program output: -7                 
Correct output: -7                  | Program output: 68                 
Correct output: -62                 | Program output: 57                 
Correct output: -84                 | Program output: -14                
Correct output: -85                 | Program output: -85                
Correct output: -45                 | Program output: 20                 
Correct output: -96                 | Program output: -65                
Correct output: -45                 | Program output: 9                  
Correct output: -70                 | Program output: -11                
Correct output: -97                 | Program output: 98                 
Correct output: -95                 | Program output: -19                
Correct output: -87                 | Program output: -68                
Correct output: 28                  | Program output: 28                 
Correct output: -11                 | Program output: -11                
Correct output: -62                 | Program output: 86                 
Correct output: -80                 | Program output: 78                 
Correct output: -71                 | Program output: 18                 
Correct output: -67                 | Program output: -24                
Correct output: -96                 | Program output: 17                 
Correct output: -4                  | Program output: 72                 
Correct output: -79                 | Program output: -79                
Correct output: -42                 | Program output: 12                 
Correct output: -35                 | Program output: -35                
Correct output: 10                  | Program output: 72                 
Correct output: -47                 | Program output: -47                
Correct output: -61                 | Program output: -61                
Correct output: -73                 | Program output: -60                
Correct output: -50                 | Program output: -50                
Correct output: 16                  | Program output: 16                 
Correct output: -99                 | Program output: 91                 
Correct output: -73                 | Program output: 95                 
Correct output: -61                 | Program output: -20                
Correct output: -94                 | Program output: -51                
Correct output: -32                 | Program output: -32                
Correct output: -73                 | Program output: -13                
Correct output: -78                 | Program output: -18                
Correct output: -28                 | Program output: -6                 
Correct output: -78                 | Program output: 24                 
Correct output: 14                  | Program output: 96                 
Correct output: 3                   | Program output: 3                  
Correct output: -97                 | Program output: 93                 
Correct output: 36                  | Program output: 49                 
Correct output: -12                 | Program output: 16                 
Correct output: -90                 | Program output: 8                  
Correct output: -96                 | Program output: -29                
Correct output: -53                 | Program output: 82                 
Correct output: -73                 | Program output: -73                
Correct output: -78                 | Program output: -78                
Correct output: 35                  | Program output: 35                 
Correct output: -92                 | Program output: -92                
Correct output: -56                 | Program output: 30                 
Correct output: -61                 | Program output: -61                
Correct output: -99                 | Program output: -99                
Correct output: -98                 | Program output: 49                 
Correct output: -96                 | Program output: -22                
Correct output: -96                 | Program output: 6                  
Correct output: -97                 | Program output: -65                
Correct output: -40                 | Program output: -27                
Correct output: -94                 | Program output: -13                
Correct output: -99                 | Program output: 77                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_empty} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_max} {:close 0, :instruction in3} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_while} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*range})
Lexicase best program: (exec_empty exec_pop (boolean_swap) integer_max in3 boolean_not boolean_and in2 exec_do*while (print_integer boolean_frominteger exec_while () exec_yank exec_when (exec_do*range (integer_dup boolean_frominteger integer_fromboolean exec_do*range (integer_add integer_dup_times boolean_yank boolean_stackdepth) boolean_invert_first_then_and) exec_shove (exec_while (exec_do*range ())))))
Lexicase best errors: [0 0 0 1 0 1 1 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 37
Percent parens: 0.270
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_empty} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_max} {:close 0, :instruction in3} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_while} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*range})
Zero cases best program: (exec_empty exec_pop (boolean_swap) integer_max in3 boolean_not boolean_and in2 exec_do*while (print_integer boolean_frominteger exec_while () exec_yank exec_when (exec_do*range (integer_dup boolean_frominteger integer_fromboolean exec_do*range (integer_add integer_dup_times boolean_yank boolean_stackdepth) boolean_invert_first_then_and) exec_shove (exec_while (exec_do*range ())))))
Zero cases best errors: [0 0 0 1 0 1 1 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 37
Percent parens: 0.270
--- Lexicase Population Statistics ---
Count of elite individuals by case: (539 1 355 185 2 183 309 311 1 1)
Population mean number of elite cases: 1.89
Count of perfect (error zero) individuals by case: (539 1 355 185 2 183 309 311 1 1)
Population mean number of perfect (error zero) cases: 1.89
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_empty} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_max} {:close 0, :instruction in3} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_while} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*range})
Best program: (exec_empty exec_pop (boolean_swap) integer_max in3 boolean_not boolean_and in2 exec_do*while (print_integer boolean_frominteger exec_while () exec_yank exec_when (exec_do*range (integer_dup boolean_frominteger integer_fromboolean exec_do*range (integer_add integer_dup_times boolean_yank boolean_stackdepth) boolean_invert_first_then_and) exec_shove (exec_while (exec_do*range ())))))
Errors: [0 0 0 1 0 1 1 1 0 0]
Total: 4
Mean: 0.4
Genome size: 27
Size: 37
Percent parens: 0.270
--- Population Statistics ---
Average total errors in population: 8.113
Median total errors in population: 8
Error averages by case: (0.461 0.999 0.645 0.815 0.998 0.817 0.691 0.689 0.999 0.999)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 53.662
Average program size in population (points): 71.391
Average percent parens in population: 0.250
Minimum age in population: 2.0
Maximum age in population: 2.0
Average age in population: 2.0
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.006
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.14
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1477990
--- Timings ---
Current time: 1559593757895 milliseconds
Total Time:           7.1 seconds
Initialization:       0.1 seconds,  1.4%
Reproduction:         3.0 seconds, 41.8%
Fitness Testing:      3.2 seconds, 44.5%
Report:               0.9 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 648
Test mean error for best: 0.64800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -62                 | Program output: -32                
Correct output: -36                 | Program output: -36                
Correct output: -54                 | Program output: 36                 
Correct output: -38                 | Program output: 62                 
Correct output: -70                 | Program output: 44                 
Correct output: -16                 | Program output: -16                
Correct output: -60                 | Program output: 40                 
Correct output: -88                 | Program output: -22                
Correct output: -13                 | Program output: 52                 
Correct output: -69                 | Program output: -58                
Correct output: -45                 | Program output: -45                
Correct output: 64                  | Program output: 64                 
Correct output: -6                  | Program output: -6                 
Correct output: -46                 | Program output: -46                
Correct output: -97                 | Program output: -97                
Correct output: 11                  | Program output: 64                 
Correct output: 13                  | Program output: 13                 
Correct output: 7                   | Program output: 70                 
Correct output: 27                  | Program output: 67                 
Correct output: 7                   | Program output: 81                 
Correct output: 9                   | Program output: 64                 
Correct output: 86                  | Program output: 96                 
Correct output: 11                  | Program output: 80                 
Correct output: 19                  | Program output: 58                 
Correct output: 12                  | Program output: 18                 
Correct output: 75                  | Program output: 98                 
Correct output: 0                   | Program output: 34                 
Correct output: 55                  | Program output: 63                 
Correct output: 0                   | Program output: 73                 
Correct output: 42                  | Program output: 90                 
Correct output: 5                   | Program output: 83                 
Correct output: 10                  | Program output: 10                 
Correct output: 13                  | Program output: 13                 
Correct output: 38                  | Program output: 69                 
Correct output: 22                  | Program output: 70                 
Correct output: -69                 | Program output: 44                 
Correct output: -7                  | Program output: -7                 
Correct output: -62                 | Program output: 33                 
Correct output: -84                 | Program output: 59                 
Correct output: -85                 | Program output: -16                
Correct output: -45                 | Program output: -45                
Correct output: -96                 | Program output: -96                
Correct output: -45                 | Program output: -26                
Correct output: -70                 | Program output: -70                
Correct output: -97                 | Program output: 41                 
Correct output: -95                 | Program output: 66                 
Correct output: -87                 | Program output: 95                 
Correct output: 28                  | Program output: 89                 
Correct output: -11                 | Program output: 22                 
Correct output: -62                 | Program output: -21                
Correct output: -80                 | Program output: -7                 
Correct output: -71                 | Program output: -69                
Correct output: -67                 | Program output: -67                
Correct output: -96                 | Program output: -96                
Correct output: -4                  | Program output: 13                 
Correct output: -79                 | Program output: 96                 
Correct output: -42                 | Program output: 39                 
Correct output: -35                 | Program output: 11                 
Correct output: 10                  | Program output: 10                 
Correct output: -47                 | Program output: 12                 
Correct output: -61                 | Program output: -44                
Correct output: -73                 | Program output: -73                
Correct output: -50                 | Program output: 99                 
Correct output: 16                  | Program output: 36                 
Correct output: -99                 | Program output: -86                
Correct output: -73                 | Program output: 37                 
Correct output: -61                 | Program output: -61                
Correct output: -94                 | Program output: -94                
Correct output: -32                 | Program output: 98                 
Correct output: -73                 | Program output: -73                
Correct output: -78                 | Program output: 65                 
Correct output: -28                 | Program output: -28                
Correct output: -78                 | Program output: -67                
Correct output: 14                  | Program output: 72                 
Correct output: 3                   | Program output: 15                 
Correct output: -97                 | Program output: -97                
Correct output: 36                  | Program output: 36                 
Correct output: -12                 | Program output: 72                 
Correct output: -90                 | Program output: -90                
Correct output: -96                 | Program output: 91                 
Correct output: -53                 | Program output: -42                
Correct output: -73                 | Program output: -29                
Correct output: -78                 | Program output: -51                
Correct output: 35                  | Program output: 76                 
Correct output: -92                 | Program output: 81                 
Correct output: -56                 | Program output: -56                
Correct output: -61                 | Program output: 26                 
Correct output: -99                 | Program output: -49                
Correct output: -98                 | Program output: -98                
Correct output: -96                 | Program output: -14                
Correct output: -96                 | Program output: -96                
Correct output: -97                 | Program output: 82                 
Correct output: -40                 | Program output: -40                
Correct output: -94                 | Program output: 43                 
Correct output: -99                 | Program output: -99                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_empty} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_max} {:close 0, :instruction in3} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_while} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*range})
Lexicase best program: (exec_empty exec_pop (boolean_swap) integer_max in3 boolean_not boolean_and exec_do*while (print_integer boolean_frominteger exec_while () exec_swap (exec_yank exec_when (integer_dup boolean_frominteger integer_fromboolean exec_do*range (integer_add integer_dup_times exec_stackdepth boolean_yank boolean_stackdepth) boolean_invert_first_then_and) exec_shove (exec_while (exec_do*range ()))) ()))
Lexicase best errors: [0 0 0 0 0 0 1 1 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 38
Percent parens: 0.289
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_empty} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_max} {:close 0, :instruction in3} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_while} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*range})
Zero cases best program: (exec_empty exec_pop (boolean_swap) integer_max in3 boolean_not boolean_and exec_do*while (print_integer boolean_frominteger exec_while () exec_swap (exec_yank exec_when (integer_dup boolean_frominteger integer_fromboolean exec_do*range (integer_add integer_dup_times exec_stackdepth boolean_yank boolean_stackdepth) boolean_invert_first_then_and) exec_shove (exec_while (exec_do*range ()))) ()))
Zero cases best errors: [0 0 0 0 0 0 1 1 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 38
Percent parens: 0.289
--- Lexicase Population Statistics ---
Count of elite individuals by case: (146 143 299 146 624 146 2 3 345 305)
Population mean number of elite cases: 2.16
Count of perfect (error zero) individuals by case: (146 143 299 146 624 146 2 3 345 305)
Population mean number of perfect (error zero) cases: 2.16
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in3} {:close 0, :instruction tag_exec_321} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_dec} {:close 2, :instruction integer_gt} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction -87} {:close 0, :instruction integer_dup} {:close 0, :instruction tagged_826} {:close 1, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_do*times} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_k} {:close 0, :instruction print_newline} {:close 0, :instruction exec_empty} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_yank} {:close 1, :instruction exec_yankdup})
Best program: (in3 tag_exec_321 (boolean_or boolean_rot) exec_if (print_integer integer_dup_times integer_gt integer_inc boolean_empty integer_rot exec_pop (integer_dec) integer_gt) () integer_shove integer_stackdepth exec_stackdepth -87 integer_dup tagged_826 boolean_eq in1 integer_mult boolean_or exec_noop exec_do*while (boolean_or boolean_flush exec_do*times () boolean_pop) boolean_yankdup integer_yankdup integer_mod boolean_invert_first_then_and exec_flush exec_k () (print_newline exec_empty in4 in1 exec_stackdepth boolean_frominteger boolean_dup boolean_invert_second_then_and) integer_dup_items integer_dup_items integer_max in4 integer_yankdup boolean_eq exec_yankdup exec_pop (exec_dup (boolean_or boolean_xor) integer_inc) boolean_invert_first_then_and integer_max boolean_xor boolean_xor exec_yank exec_yankdup)
Errors: [0 0 0 0 0 0 1 1 1 1]
Total: 4
Mean: 0.4
Genome size: 62
Size: 73
Percent parens: 0.151
--- Population Statistics ---
Average total errors in population: 7.841
Median total errors in population: 8
Error averages by case: (0.854 0.857 0.701 0.854 0.376 0.854 0.998 0.997 0.655 0.695)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.557
Average program size in population (points): 54.807
Average percent parens in population: 0.264
Minimum age in population: 3.0
Maximum age in population: 3.0
Average age in population: 3.0
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 8
Genome diversity (% unique genomes):	 0.989
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.989
Total error diversity:				 0.007
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.114
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 1903532
--- Timings ---
Current time: 1559593759926 milliseconds
Total Time:           9.0 seconds
Initialization:       0.1 seconds,  1.1%
Reproduction:         4.2 seconds, 46.2%
Fitness Testing:      3.6 seconds, 40.2%
Report:               1.1 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 656
Test mean error for best: 0.65600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -62                 | Program output: -32                
Correct output: -36                 | Program output: -36                
Correct output: -54                 | Program output: -54                
Correct output: -38                 | Program output: 62                 
Correct output: -70                 | Program output: -70                
Correct output: -16                 | Program output: -16                
Correct output: -60                 | Program output: -60                
Correct output: -88                 | Program output: -22                
Correct output: -13                 | Program output: -13                
Correct output: -69                 | Program output: -58                
Correct output: -45                 | Program output: -45                
Correct output: 64                  | Program output: 64                 
Correct output: -6                  | Program output: -6                 
Correct output: -46                 | Program output: -46                
Correct output: -97                 | Program output: -97                
Correct output: 11                  | Program output: 15                 
Correct output: 13                  | Program output: 67                 
Correct output: 7                   | Program output: 7                  
Correct output: 27                  | Program output: 27                 
Correct output: 7                   | Program output: 7                  
Correct output: 9                   | Program output: 80                 
Correct output: 86                  | Program output: 97                 
Correct output: 11                  | Program output: 11                 
Correct output: 19                  | Program output: 71                 
Correct output: 12                  | Program output: 29                 
Correct output: 75                  | Program output: 81                 
Correct output: 0                   | Program output: 0                  
Correct output: 55                  | Program output: 69                 
Correct output: 0                   | Program output: 0                  
Correct output: 42                  | Program output: 66                 
Correct output: 5                   | Program output: 5                  
Correct output: 10                  | Program output: 76                 
Correct output: 13                  | Program output: 24                 
Correct output: 38                  | Program output: 38                 
Correct output: 22                  | Program output: 56                 
Correct output: -69                 | Program output: 31                 
Correct output: -7                  | Program output: 51                 
Correct output: -62                 | Program output: -22                
Correct output: -84                 | Program output: -84                
Correct output: -85                 | Program output: -59                
Correct output: -45                 | Program output: -40                
Correct output: -96                 | Program output: 22                 
Correct output: -45                 | Program output: -45                
Correct output: -70                 | Program output: 99                 
Correct output: -97                 | Program output: -97                
Correct output: -95                 | Program output: -95                
Correct output: -87                 | Program output: -87                
Correct output: 28                  | Program output: 69                 
Correct output: -11                 | Program output: 22                 
Correct output: -62                 | Program output: -62                
Correct output: -80                 | Program output: -80                
Correct output: -71                 | Program output: 40                 
Correct output: -67                 | Program output: 74                 
Correct output: -96                 | Program output: -87                
Correct output: -4                  | Program output: -4                 
Correct output: -79                 | Program output: 86                 
Correct output: -42                 | Program output: -42                
Correct output: -35                 | Program output: 5                  
Correct output: 10                  | Program output: 37                 
Correct output: -47                 | Program output: 1                  
Correct output: -61                 | Program output: -55                
Correct output: -73                 | Program output: 73                 
Correct output: -50                 | Program output: -22                
Correct output: 16                  | Program output: 28                 
Correct output: -99                 | Program output: -99                
Correct output: -73                 | Program output: -73                
Correct output: -61                 | Program output: -2                 
Correct output: -94                 | Program output: -2                 
Correct output: -32                 | Program output: -2                 
Correct output: -73                 | Program output: 60                 
Correct output: -78                 | Program output: -44                
Correct output: -28                 | Program output: 33                 
Correct output: -78                 | Program output: -78                
Correct output: 14                  | Program output: 14                 
Correct output: 3                   | Program output: 74                 
Correct output: -97                 | Program output: -91                
Correct output: 36                  | Program output: 95                 
Correct output: -12                 | Program output: -12                
Correct output: -90                 | Program output: 87                 
Correct output: -96                 | Program output: -96                
Correct output: -53                 | Program output: 43                 
Correct output: -73                 | Program output: 52                 
Correct output: -78                 | Program output: 73                 
Correct output: 35                  | Program output: 46                 
Correct output: -92                 | Program output: 6                  
Correct output: -56                 | Program output: 9                  
Correct output: -61                 | Program output: 17                 
Correct output: -99                 | Program output: 68                 
Correct output: -98                 | Program output: 96                 
Correct output: -96                 | Program output: -44                
Correct output: -96                 | Program output: -69                
Correct output: -97                 | Program output: 20                 
Correct output: -40                 | Program output: 25                 
Correct output: -94                 | Program output: 44                 
Correct output: -99                 | Program output: -50                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_eq} {:close 1, :instruction tagged_574} {:close 0, :instruction exec_yankdup} {:close 2, :instruction integer_inc} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_lte} {:close 1, :instruction exec_when} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_empty} {:close 1, :instruction tag_integer_751} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_when} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in4} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_max} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction in3} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_if})
Lexicase best program: (exec_yankdup exec_pop (boolean_eq tagged_574) exec_yankdup integer_inc exec_rot (integer_lte) (exec_when () exec_empty) (integer_yankdup exec_empty tag_integer_751) integer_div exec_do*range (exec_when () integer_shove integer_flush) exec_s_when_autoconstructing (integer_mult boolean_or exec_dup_items boolean_and integer_fromboolean in4 boolean_rot boolean_stackdepth exec_stackdepth boolean_dup_items integer_yank integer_swap integer_eq boolean_xor in1 print_integer exec_dup_items exec_swap (boolean_xor integer_rot integer_swap) (exec_s (boolean_dup) (integer_pop exec_stackdepth) (integer_max integer_inc) integer_yankdup integer_max exec_empty integer_fromboolean boolean_empty exec_s_when_autoconstructing (in3) (integer_mult exec_do*range (boolean_invert_first_then_and exec_eq boolean_dup_times boolean_pop) integer_add integer_shove exec_if () ()) ())) () ())
Lexicase best errors: [0 1 0 0 0 0 1 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 84
Percent parens: 0.262
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_eq} {:close 1, :instruction tagged_574} {:close 0, :instruction exec_yankdup} {:close 2, :instruction integer_inc} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_lte} {:close 1, :instruction exec_when} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_empty} {:close 1, :instruction tag_integer_751} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_when} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in4} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_max} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction in3} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_if})
Zero cases best program: (exec_yankdup exec_pop (boolean_eq tagged_574) exec_yankdup integer_inc exec_rot (integer_lte) (exec_when () exec_empty) (integer_yankdup exec_empty tag_integer_751) integer_div exec_do*range (exec_when () integer_shove integer_flush) exec_s_when_autoconstructing (integer_mult boolean_or exec_dup_items boolean_and integer_fromboolean in4 boolean_rot boolean_stackdepth exec_stackdepth boolean_dup_items integer_yank integer_swap integer_eq boolean_xor in1 print_integer exec_dup_items exec_swap (boolean_xor integer_rot integer_swap) (exec_s (boolean_dup) (integer_pop exec_stackdepth) (integer_max integer_inc) integer_yankdup integer_max exec_empty integer_fromboolean boolean_empty exec_s_when_autoconstructing (in3) (integer_mult exec_do*range (boolean_invert_first_then_and exec_eq boolean_dup_times boolean_pop) integer_add integer_shove exec_if () ()) ())) () ())
Zero cases best errors: [0 1 0 0 0 0 1 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 84
Percent parens: 0.262
--- Lexicase Population Statistics ---
Count of elite individuals by case: (23 142 633 34 35 35 321 319 23 34)
Population mean number of elite cases: 1.60
Count of perfect (error zero) individuals by case: (23 142 633 34 35 35 321 319 23 34)
Population mean number of perfect (error zero) cases: 1.60
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_pop} {:close 1, :instruction tagged_574} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_flush} {:close 2, :instruction integer_inc} {:close 1, :instruction integer_lte} {:close 1, :instruction exec_when} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_empty} {:close 1, :instruction tag_integer_751} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_856} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_when} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*range} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_eq} {:close 0, :instruction in1} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 2, :instruction exec_dup_items} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_eq} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_gte})
Best program: (exec_pop (tagged_574) exec_shove (exec_yankdup boolean_eq integer_flush integer_inc) integer_lte exec_when () integer_yankdup exec_empty tag_integer_751 integer_div exec_do*range (tagged_856 integer_empty) integer_empty exec_when () integer_flush integer_mult exec_do*range (in2 exec_k (exec_if (boolean_and exec_yankdup integer_div integer_dec boolean_rot exec_rot (exec_do*times (integer_eq in1 integer_swap print_integer exec_dup_items exec_swap (boolean_xor exec_flush boolean_dup_items integer_rot boolean_dup) (integer_pop boolean_yankdup exec_stackdepth) integer_max integer_dup_items boolean_empty integer_lt) exec_s_when_autoconstructing (integer_mult boolean_eq exec_dup_items) () (boolean_yankdup exec_eq print_integer boolean_pop) integer_gte) () ()) ()) ()))
Errors: [0 1 0 0 0 0 1 1 0 0]
Total: 3
Mean: 0.3
Genome size: 58
Size: 78
Percent parens: 0.256
--- Population Statistics ---
Average total errors in population: 8.401
Median total errors in population: 9
Error averages by case: (0.977 0.858 0.367 0.966 0.965 0.965 0.679 0.681 0.977 0.966)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.944
Average program size in population (points): 55.112
Average percent parens in population: 0.265
Minimum age in population: 4.0
Maximum age in population: 4.0
Average age in population: 4.0
Median age in population: 4.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.006
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.173
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 2446898
--- Timings ---
Current time: 1559593761948 milliseconds
Total Time:          11.1 seconds
Initialization:       0.1 seconds,  0.9%
Reproduction:         5.4 seconds, 48.1%
Fitness Testing:      4.2 seconds, 37.4%
Report:               1.5 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 545
Test mean error for best: 0.54500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -62                 | Program output: -32                
Correct output: -36                 | Program output: -36                
Correct output: -54                 | Program output: -54                
Correct output: -38                 | Program output: 62                 
Correct output: -70                 | Program output: -70                
Correct output: -16                 | Program output: -16                
Correct output: -60                 | Program output: -60                
Correct output: -88                 | Program output: -22                
Correct output: -13                 | Program output: -13                
Correct output: -69                 | Program output: -69                
Correct output: -45                 | Program output: -45                
Correct output: 64                  | Program output: 64                 
Correct output: -6                  | Program output: -6                 
Correct output: -46                 | Program output: -46                
Correct output: -97                 | Program output: -97                
Correct output: 11                  | Program output: 15                 
Correct output: 13                  | Program output: 67                 
Correct output: 7                   | Program output: 7                  
Correct output: 27                  | Program output: 27                 
Correct output: 7                   | Program output: 7                  
Correct output: 9                   | Program output: 80                 
Correct output: 86                  | Program output: 97                 
Correct output: 11                  | Program output: 11                 
Correct output: 19                  | Program output: 71                 
Correct output: 12                  | Program output: 29                 
Correct output: 75                  | Program output: 81                 
Correct output: 0                   | Program output: 0                  
Correct output: 55                  | Program output: 69                 
Correct output: 0                   | Program output: 0                  
Correct output: 42                  | Program output: 66                 
Correct output: 5                   | Program output: 5                  
Correct output: 10                  | Program output: 76                 
Correct output: 13                  | Program output: 24                 
Correct output: 38                  | Program output: 38                 
Correct output: 22                  | Program output: 56                 
Correct output: -69                 | Program output: -7                 
Correct output: -7                  | Program output: 51                 
Correct output: -62                 | Program output: -22                
Correct output: -84                 | Program output: -14                
Correct output: -85                 | Program output: -85                
Correct output: -45                 | Program output: -40                
Correct output: -96                 | Program output: -65                
Correct output: -45                 | Program output: -45                
Correct output: -70                 | Program output: -11                
Correct output: -97                 | Program output: -97                
Correct output: -95                 | Program output: -19                
Correct output: -87                 | Program output: -68                
Correct output: 28                  | Program output: 69                 
Correct output: -11                 | Program output: -11                
Correct output: -62                 | Program output: -62                
Correct output: -80                 | Program output: -80                
Correct output: -71                 | Program output: 40                 
Correct output: -67                 | Program output: -24                
Correct output: -96                 | Program output: -87                
Correct output: -4                  | Program output: -4                 
Correct output: -79                 | Program output: -79                
Correct output: -42                 | Program output: -42                
Correct output: -35                 | Program output: -35                
Correct output: 10                  | Program output: 37                 
Correct output: -47                 | Program output: -47                
Correct output: -61                 | Program output: -61                
Correct output: -73                 | Program output: -60                
Correct output: -50                 | Program output: -50                
Correct output: 16                  | Program output: 28                 
Correct output: -99                 | Program output: -99                
Correct output: -73                 | Program output: -73                
Correct output: -61                 | Program output: -20                
Correct output: -94                 | Program output: -51                
Correct output: -32                 | Program output: -32                
Correct output: -73                 | Program output: -13                
Correct output: -78                 | Program output: -18                
Correct output: -28                 | Program output: -6                 
Correct output: -78                 | Program output: -78                
Correct output: 14                  | Program output: 14                 
Correct output: 3                   | Program output: 74                 
Correct output: -97                 | Program output: -91                
Correct output: 36                  | Program output: 95                 
Correct output: -12                 | Program output: -12                
Correct output: -90                 | Program output: 87                 
Correct output: -96                 | Program output: -29                
Correct output: -53                 | Program output: 43                 
Correct output: -73                 | Program output: -73                
Correct output: -78                 | Program output: -78                
Correct output: 35                  | Program output: 46                 
Correct output: -92                 | Program output: -92                
Correct output: -56                 | Program output: 9                  
Correct output: -61                 | Program output: -61                
Correct output: -99                 | Program output: -99                
Correct output: -98                 | Program output: 96                 
Correct output: -96                 | Program output: -22                
Correct output: -96                 | Program output: -69                
Correct output: -97                 | Program output: -65                
Correct output: -40                 | Program output: -27                
Correct output: -94                 | Program output: -13                
Correct output: -99                 | Program output: -50                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_pop} {:close 1, :instruction tagged_574} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 2, :instruction integer_inc} {:close 2, :instruction integer_pop} {:close 1, :instruction integer_lte} {:close 1, :instruction exec_when} {:close 0, :instruction integer_yankdup} {:close 1, :instruction tag_integer_751} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gt} {:close 1, :instruction in2} {:close 1, :instruction exec_when} {:close 1, :instruction integer_flush} {:close 1, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*range} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_do*times} {:close 0, :instruction in1} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction tagged_990} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_eq} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_pop})
Lexicase best program: (exec_pop (tagged_574) exec_shove (exec_yankdup boolean_eq integer_inc) integer_pop integer_lte exec_when () integer_yankdup tag_integer_751 integer_div exec_do*range (integer_gt in2) exec_when () integer_flush exec_if () (integer_mult exec_do*range (in2 exec_if (boolean_and exec_yankdup integer_div boolean_invert_second_then_and) (boolean_rot integer_swap boolean_frominteger exec_rot (integer_dec exec_do*times (in1 integer_swap print_integer exec_swap (boolean_xor exec_flush integer_mult integer_rot integer_pop exec_stackdepth) (exec_y_when_autoconstructing (integer_max integer_dup_items boolean_empty boolean_and integer_lt) exec_s_when_autoconstructing (tagged_990 exec_k_when_autoconstructing () (boolean_or boolean_eq boolean_yankdup exec_eq print_integer exec_y_when_autoconstructing (boolean_pop))) () ()))) () ()))))
Lexicase best errors: [1 1 0 0 0 1 0 0 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 82
Percent parens: 0.293
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_pop} {:close 1, :instruction tagged_574} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 2, :instruction integer_inc} {:close 2, :instruction integer_pop} {:close 1, :instruction integer_lte} {:close 1, :instruction exec_when} {:close 0, :instruction integer_yankdup} {:close 1, :instruction tag_integer_751} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gt} {:close 1, :instruction in2} {:close 1, :instruction exec_when} {:close 1, :instruction integer_flush} {:close 1, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*range} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_do*times} {:close 0, :instruction in1} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction tagged_990} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_eq} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_pop})
Zero cases best program: (exec_pop (tagged_574) exec_shove (exec_yankdup boolean_eq integer_inc) integer_pop integer_lte exec_when () integer_yankdup tag_integer_751 integer_div exec_do*range (integer_gt in2) exec_when () integer_flush exec_if () (integer_mult exec_do*range (in2 exec_if (boolean_and exec_yankdup integer_div boolean_invert_second_then_and) (boolean_rot integer_swap boolean_frominteger exec_rot (integer_dec exec_do*times (in1 integer_swap print_integer exec_swap (boolean_xor exec_flush integer_mult integer_rot integer_pop exec_stackdepth) (exec_y_when_autoconstructing (integer_max integer_dup_items boolean_empty boolean_and integer_lt) exec_s_when_autoconstructing (tagged_990 exec_k_when_autoconstructing () (boolean_or boolean_eq boolean_yankdup exec_eq print_integer exec_y_when_autoconstructing (boolean_pop))) () ()))) () ()))))
Zero cases best errors: [1 1 0 0 0 1 0 0 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 82
Percent parens: 0.293
--- Lexicase Population Statistics ---
Count of elite individuals by case: (101 149 589 324 327 146 320 327 149 103)
Population mean number of elite cases: 2.54
Count of perfect (error zero) individuals by case: (101 149 589 324 327 146 320 327 149 103)
Population mean number of perfect (error zero) cases: 2.54
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_pop} {:close 1, :instruction tagged_574} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_min} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 2, :instruction integer_inc} {:close 1, :instruction tagged_888} {:close 1, :instruction exec_dup} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_div} {:close 0, :instruction exec_empty} {:close 1, :instruction tag_integer_751} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_when} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction exec_if} {:close 0, :instruction tag_exec_607} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_invert_second_then_and} {:close 2, :instruction exec_do*range} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*times} {:close 0, :instruction in1} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_shove})
Best program: (exec_pop (tagged_574) exec_shove (integer_min exec_yankdup boolean_eq integer_inc) tagged_888 exec_dup () integer_lte exec_do*range (integer_div) exec_empty tag_integer_751 integer_div exec_do*range (integer_stackdepth exec_when () integer_mod) integer_shove integer_flush integer_mult in2 exec_k (exec_if (tag_exec_607 (integer_div boolean_invert_second_then_and) exec_do*range ()) (boolean_rot) integer_swap exec_rot (integer_rot exec_do*times (in1 integer_swap print_integer boolean_xor exec_flush boolean_dup_items integer_rot boolean_dup) integer_pop boolean_pop exec_stackdepth) (exec_y_when_autoconstructing (integer_dup_items integer_fromboolean integer_dup boolean_empty integer_eq) integer_yank) (integer_lt) boolean_and exec_s_when_autoconstructing (integer_mult exec_while (boolean_yankdup print_integer boolean_pop) integer_shove) () ()) ())
Errors: [0 1 0 0 1 1 0 1 1 0]
Total: 5
Mean: 0.5
Genome size: 61
Size: 83
Percent parens: 0.265
--- Population Statistics ---
Average total errors in population: 7.465
Median total errors in population: 7
Error averages by case: (0.899 0.851 0.411 0.676 0.673 0.854 0.68 0.673 0.851 0.897)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.728
Average program size in population (points): 69.451
Average percent parens in population: 0.269
Minimum age in population: 5.0
Maximum age in population: 5.0
Average age in population: 5.0
Median age in population: 5.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.006
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.152
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 2960618
--- Timings ---
Current time: 1559593764100 milliseconds
Total Time:          13.3 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         6.7 seconds, 50.6%
Fitness Testing:      4.6 seconds, 35.0%
Report:               1.8 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 648
Test mean error for best: 0.64800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -62                 | Program output: -32                
Correct output: -36                 | Program output: -36                
Correct output: -54                 | Program output: 36                 
Correct output: -38                 | Program output: 62                 
Correct output: -70                 | Program output: 44                 
Correct output: -16                 | Program output: -16                
Correct output: -60                 | Program output: 40                 
Correct output: -88                 | Program output: -22                
Correct output: -13                 | Program output: 52                 
Correct output: -69                 | Program output: -58                
Correct output: -45                 | Program output: -45                
Correct output: 64                  | Program output: 64                 
Correct output: -6                  | Program output: -6                 
Correct output: -46                 | Program output: -46                
Correct output: -97                 | Program output: -97                
Correct output: 11                  | Program output: 64                 
Correct output: 13                  | Program output: 13                 
Correct output: 7                   | Program output: 70                 
Correct output: 27                  | Program output: 67                 
Correct output: 7                   | Program output: 81                 
Correct output: 9                   | Program output: 64                 
Correct output: 86                  | Program output: 96                 
Correct output: 11                  | Program output: 80                 
Correct output: 19                  | Program output: 58                 
Correct output: 12                  | Program output: 18                 
Correct output: 75                  | Program output: 98                 
Correct output: 0                   | Program output: 34                 
Correct output: 55                  | Program output: 63                 
Correct output: 0                   | Program output: 73                 
Correct output: 42                  | Program output: 90                 
Correct output: 5                   | Program output: 83                 
Correct output: 10                  | Program output: 10                 
Correct output: 13                  | Program output: 13                 
Correct output: 38                  | Program output: 69                 
Correct output: 22                  | Program output: 70                 
Correct output: -69                 | Program output: 44                 
Correct output: -7                  | Program output: -7                 
Correct output: -62                 | Program output: 33                 
Correct output: -84                 | Program output: 59                 
Correct output: -85                 | Program output: -16                
Correct output: -45                 | Program output: -45                
Correct output: -96                 | Program output: -96                
Correct output: -45                 | Program output: -26                
Correct output: -70                 | Program output: -70                
Correct output: -97                 | Program output: 41                 
Correct output: -95                 | Program output: 66                 
Correct output: -87                 | Program output: 95                 
Correct output: 28                  | Program output: 89                 
Correct output: -11                 | Program output: 22                 
Correct output: -62                 | Program output: -21                
Correct output: -80                 | Program output: -7                 
Correct output: -71                 | Program output: -69                
Correct output: -67                 | Program output: -67                
Correct output: -96                 | Program output: -96                
Correct output: -4                  | Program output: 13                 
Correct output: -79                 | Program output: 96                 
Correct output: -42                 | Program output: 39                 
Correct output: -35                 | Program output: 11                 
Correct output: 10                  | Program output: 10                 
Correct output: -47                 | Program output: 12                 
Correct output: -61                 | Program output: -44                
Correct output: -73                 | Program output: -73                
Correct output: -50                 | Program output: 99                 
Correct output: 16                  | Program output: 36                 
Correct output: -99                 | Program output: -86                
Correct output: -73                 | Program output: 37                 
Correct output: -61                 | Program output: -61                
Correct output: -94                 | Program output: -94                
Correct output: -32                 | Program output: 98                 
Correct output: -73                 | Program output: -73                
Correct output: -78                 | Program output: 65                 
Correct output: -28                 | Program output: -28                
Correct output: -78                 | Program output: -67                
Correct output: 14                  | Program output: 72                 
Correct output: 3                   | Program output: 15                 
Correct output: -97                 | Program output: -97                
Correct output: 36                  | Program output: 36                 
Correct output: -12                 | Program output: 72                 
Correct output: -90                 | Program output: -90                
Correct output: -96                 | Program output: 91                 
Correct output: -53                 | Program output: -42                
Correct output: -73                 | Program output: -29                
Correct output: -78                 | Program output: -51                
Correct output: 35                  | Program output: 76                 
Correct output: -92                 | Program output: 81                 
Correct output: -56                 | Program output: -56                
Correct output: -61                 | Program output: 26                 
Correct output: -99                 | Program output: -49                
Correct output: -98                 | Program output: -98                
Correct output: -96                 | Program output: -14                
Correct output: -96                 | Program output: -96                
Correct output: -97                 | Program output: 82                 
Correct output: -40                 | Program output: -40                
Correct output: -94                 | Program output: 43                 
Correct output: -99                 | Program output: -99                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_max} {:close 0, :instruction in3} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 1, :instruction exec_while} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*range})
Lexicase best program: (exec_empty boolean_not exec_pop (boolean_swap) integer_max in3 boolean_not exec_do*while (print_integer exec_while () exec_when (exec_do*range (boolean_invert_second_then_and exec_do*range (exec_swap (exec_empty exec_do*range (integer_add boolean_stackdepth) exec_while (exec_shove (exec_while (exec_k_when_autoconstructing (exec_do*range ()) ())))) ())))))
Lexicase best errors: [0 1 0 0 1 1 1 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 40
Percent parens: 0.400
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_max} {:close 0, :instruction in3} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 1, :instruction exec_while} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*range})
Zero cases best program: (exec_empty boolean_not exec_pop (boolean_swap) integer_max in3 boolean_not exec_do*while (print_integer exec_while () exec_when (exec_do*range (boolean_invert_second_then_and exec_do*range (exec_swap (exec_empty exec_do*range (integer_add boolean_stackdepth) exec_while (exec_shove (exec_while (exec_k_when_autoconstructing (exec_do*range ()) ())))) ())))))
Zero cases best errors: [0 1 0 0 1 1 1 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 40
Percent parens: 0.400
--- Lexicase Population Statistics ---
Count of elite individuals by case: (236 154 236 236 3 154 27 234 311 236)
Population mean number of elite cases: 1.83
Count of perfect (error zero) individuals by case: (236 154 236 236 3 154 27 234 311 236)
Population mean number of perfect (error zero) cases: 1.83
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_or} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_rot} {:close 0, :instruction tag_exec_896} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction tag_boolean_381} {:close 0, :instruction integer_min} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction -66} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_pop})
Best program: (boolean_or boolean_rot integer_stackdepth in3 print_integer exec_do*while (boolean_rot) tag_exec_896 (integer_dec boolean_empty exec_s_when_autoconstructing (exec_do*count (exec_do*times (exec_do*range () exec_swap (integer_lte tag_boolean_381 integer_min integer_rot exec_k_when_autoconstructing (print_integer) (-66 exec_dup (exec_if (boolean_shove integer_dup_items boolean_yank boolean_eq) (exec_k_when_autoconstructing (integer_sub exec_do*times (boolean_pop)) ())))) ()))) () ()))
Errors: [0 1 0 0 1 1 1 0 1 0]
Total: 5
Mean: 0.5
Genome size: 32
Size: 51
Percent parens: 0.373
--- Population Statistics ---
Average total errors in population: 8.173
Median total errors in population: 9
Error averages by case: (0.764 0.846 0.764 0.764 0.997 0.846 0.973 0.766 0.689 0.764)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 53.109
Average program size in population (points): 72.634
Average percent parens in population: 0.268
Minimum age in population: 6.0
Maximum age in population: 6.0
Average age in population: 6.0
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.006
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.166
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 3491282
--- Timings ---
Current time: 1559593765982 milliseconds
Total Time:          15.3 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         7.9 seconds, 51.7%
Fitness Testing:      5.2 seconds, 33.8%
Report:               2.1 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 648
Test mean error for best: 0.64800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -62                 | Program output: -32                
Correct output: -36                 | Program output: -36                
Correct output: -54                 | Program output: 36                 
Correct output: -38                 | Program output: 62                 
Correct output: -70                 | Program output: 44                 
Correct output: -16                 | Program output: -16                
Correct output: -60                 | Program output: 40                 
Correct output: -88                 | Program output: -22                
Correct output: -13                 | Program output: 52                 
Correct output: -69                 | Program output: -58                
Correct output: -45                 | Program output: -45                
Correct output: 64                  | Program output: 64                 
Correct output: -6                  | Program output: -6                 
Correct output: -46                 | Program output: -46                
Correct output: -97                 | Program output: -97                
Correct output: 11                  | Program output: 64                 
Correct output: 13                  | Program output: 13                 
Correct output: 7                   | Program output: 70                 
Correct output: 27                  | Program output: 67                 
Correct output: 7                   | Program output: 81                 
Correct output: 9                   | Program output: 64                 
Correct output: 86                  | Program output: 96                 
Correct output: 11                  | Program output: 80                 
Correct output: 19                  | Program output: 58                 
Correct output: 12                  | Program output: 18                 
Correct output: 75                  | Program output: 98                 
Correct output: 0                   | Program output: 34                 
Correct output: 55                  | Program output: 63                 
Correct output: 0                   | Program output: 73                 
Correct output: 42                  | Program output: 90                 
Correct output: 5                   | Program output: 83                 
Correct output: 10                  | Program output: 10                 
Correct output: 13                  | Program output: 13                 
Correct output: 38                  | Program output: 69                 
Correct output: 22                  | Program output: 70                 
Correct output: -69                 | Program output: 44                 
Correct output: -7                  | Program output: -7                 
Correct output: -62                 | Program output: 33                 
Correct output: -84                 | Program output: 59                 
Correct output: -85                 | Program output: -16                
Correct output: -45                 | Program output: -45                
Correct output: -96                 | Program output: -96                
Correct output: -45                 | Program output: -26                
Correct output: -70                 | Program output: -70                
Correct output: -97                 | Program output: 41                 
Correct output: -95                 | Program output: 66                 
Correct output: -87                 | Program output: 95                 
Correct output: 28                  | Program output: 89                 
Correct output: -11                 | Program output: 22                 
Correct output: -62                 | Program output: -21                
Correct output: -80                 | Program output: -7                 
Correct output: -71                 | Program output: -69                
Correct output: -67                 | Program output: -67                
Correct output: -96                 | Program output: -96                
Correct output: -4                  | Program output: 13                 
Correct output: -79                 | Program output: 96                 
Correct output: -42                 | Program output: 39                 
Correct output: -35                 | Program output: 11                 
Correct output: 10                  | Program output: 10                 
Correct output: -47                 | Program output: 12                 
Correct output: -61                 | Program output: -44                
Correct output: -73                 | Program output: -73                
Correct output: -50                 | Program output: 99                 
Correct output: 16                  | Program output: 36                 
Correct output: -99                 | Program output: -86                
Correct output: -73                 | Program output: 37                 
Correct output: -61                 | Program output: -61                
Correct output: -94                 | Program output: -94                
Correct output: -32                 | Program output: 98                 
Correct output: -73                 | Program output: -73                
Correct output: -78                 | Program output: 65                 
Correct output: -28                 | Program output: -28                
Correct output: -78                 | Program output: -67                
Correct output: 14                  | Program output: 72                 
Correct output: 3                   | Program output: 15                 
Correct output: -97                 | Program output: -97                
Correct output: 36                  | Program output: 36                 
Correct output: -12                 | Program output: 72                 
Correct output: -90                 | Program output: -90                
Correct output: -96                 | Program output: 91                 
Correct output: -53                 | Program output: -42                
Correct output: -73                 | Program output: -29                
Correct output: -78                 | Program output: -51                
Correct output: 35                  | Program output: 76                 
Correct output: -92                 | Program output: 81                 
Correct output: -56                 | Program output: -56                
Correct output: -61                 | Program output: 26                 
Correct output: -99                 | Program output: -49                
Correct output: -98                 | Program output: -98                
Correct output: -96                 | Program output: -14                
Correct output: -96                 | Program output: -96                
Correct output: -97                 | Program output: 82                 
Correct output: -40                 | Program output: -40                
Correct output: -94                 | Program output: 43                 
Correct output: -99                 | Program output: -99                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_inc} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_yank} {:close 1, :instruction in3} {:close 1, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_or} {:close 0, :instruction -98} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_y} {:close 0, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_add} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_dup_times})
Lexicase best program: (integer_inc boolean_or integer_stackdepth integer_yank in3 boolean_pop print_integer exec_do*while (print_boolean exec_y (boolean_rot) integer_dec boolean_pop exec_do*range () boolean_or -98 integer_stackdepth) exec_noop integer_pop exec_swap () (exec_swap (boolean_stackdepth exec_y () integer_min exec_pop (integer_eq integer_add) boolean_shove) (exec_if (integer_fromboolean integer_dup_items exec_noop integer_min boolean_empty) (boolean_frominteger integer_yankdup) integer_dup_times)))
Lexicase best errors: [0 1 1 1 1 1 1 0 0 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 49
Percent parens: 0.245
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_inc} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_yank} {:close 1, :instruction in3} {:close 1, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_or} {:close 0, :instruction -98} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_y} {:close 0, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_add} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_dup_times})
Zero cases best program: (integer_inc boolean_or integer_stackdepth integer_yank in3 boolean_pop print_integer exec_do*while (print_boolean exec_y (boolean_rot) integer_dec boolean_pop exec_do*range () boolean_or -98 integer_stackdepth) exec_noop integer_pop exec_swap () (exec_swap (boolean_stackdepth exec_y () integer_min exec_pop (integer_eq integer_add) boolean_shove) (exec_if (integer_fromboolean integer_dup_items exec_noop integer_min boolean_empty) (boolean_frominteger integer_yankdup) integer_dup_times)))
Zero cases best errors: [0 1 1 1 1 1 1 0 0 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 49
Percent parens: 0.245
--- Lexicase Population Statistics ---
Count of elite individuals by case: (345 33 37 91 157 106 61 345 345 345)
Population mean number of elite cases: 1.87
Count of perfect (error zero) individuals by case: (345 33 37 91 157 106 61 345 345 345)
Population mean number of perfect (error zero) cases: 1.87
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_or} {:close 1, :instruction in3} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction -98} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction in1} {:close 0, :instruction print_exec} {:close 0, :instruction tag_boolean_381} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_pop})
Best program: (boolean_or in3 integer_gt integer_rot print_integer exec_y (integer_yankdup exec_do*count (-98 integer_stackdepth) in1) print_exec (tag_boolean_381 exec_empty) integer_empty integer_min integer_fromboolean boolean_dup_times print_integer exec_if (integer_fromboolean boolean_dup_times) () exec_pop (integer_min exec_s (integer_gt boolean_pop) () ()))
Errors: [0 1 1 1 1 1 1 0 0 0]
Total: 6
Mean: 0.6
Genome size: 27
Size: 37
Percent parens: 0.270
--- Population Statistics ---
Average total errors in population: 8.135
Median total errors in population: 8
Error averages by case: (0.655 0.967 0.963 0.909 0.843 0.894 0.939 0.655 0.655 0.655)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 48.455
Average program size in population (points): 65.937
Average percent parens in population: 0.266
Minimum age in population: 7.0
Maximum age in population: 7.0
Average age in population: 7.0
Median age in population: 7.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.005
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.154
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 4024184
--- Timings ---
Current time: 1559593768488 milliseconds
Total Time:          17.2 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         9.1 seconds, 52.8%
Fitness Testing:      5.7 seconds, 33.2%
Report:               2.3 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 648
Test mean error for best: 0.64800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -62                 | Program output: -32                
Correct output: -36                 | Program output: -36                
Correct output: -54                 | Program output: 36                 
Correct output: -38                 | Program output: 62                 
Correct output: -70                 | Program output: 44                 
Correct output: -16                 | Program output: -16                
Correct output: -60                 | Program output: 40                 
Correct output: -88                 | Program output: -22                
Correct output: -13                 | Program output: 52                 
Correct output: -69                 | Program output: -58                
Correct output: -45                 | Program output: -45                
Correct output: 64                  | Program output: 64                 
Correct output: -6                  | Program output: -6                 
Correct output: -46                 | Program output: -46                
Correct output: -97                 | Program output: -97                
Correct output: 11                  | Program output: 64                 
Correct output: 13                  | Program output: 13                 
Correct output: 7                   | Program output: 70                 
Correct output: 27                  | Program output: 67                 
Correct output: 7                   | Program output: 81                 
Correct output: 9                   | Program output: 64                 
Correct output: 86                  | Program output: 96                 
Correct output: 11                  | Program output: 80                 
Correct output: 19                  | Program output: 58                 
Correct output: 12                  | Program output: 18                 
Correct output: 75                  | Program output: 98                 
Correct output: 0                   | Program output: 34                 
Correct output: 55                  | Program output: 63                 
Correct output: 0                   | Program output: 73                 
Correct output: 42                  | Program output: 90                 
Correct output: 5                   | Program output: 83                 
Correct output: 10                  | Program output: 10                 
Correct output: 13                  | Program output: 13                 
Correct output: 38                  | Program output: 69                 
Correct output: 22                  | Program output: 70                 
Correct output: -69                 | Program output: 44                 
Correct output: -7                  | Program output: -7                 
Correct output: -62                 | Program output: 33                 
Correct output: -84                 | Program output: 59                 
Correct output: -85                 | Program output: -16                
Correct output: -45                 | Program output: -45                
Correct output: -96                 | Program output: -96                
Correct output: -45                 | Program output: -26                
Correct output: -70                 | Program output: -70                
Correct output: -97                 | Program output: 41                 
Correct output: -95                 | Program output: 66                 
Correct output: -87                 | Program output: 95                 
Correct output: 28                  | Program output: 89                 
Correct output: -11                 | Program output: 22                 
Correct output: -62                 | Program output: -21                
Correct output: -80                 | Program output: -7                 
Correct output: -71                 | Program output: -69                
Correct output: -67                 | Program output: -67                
Correct output: -96                 | Program output: -96                
Correct output: -4                  | Program output: 13                 
Correct output: -79                 | Program output: 96                 
Correct output: -42                 | Program output: 39                 
Correct output: -35                 | Program output: 11                 
Correct output: 10                  | Program output: 10                 
Correct output: -47                 | Program output: 12                 
Correct output: -61                 | Program output: -44                
Correct output: -73                 | Program output: -73                
Correct output: -50                 | Program output: 99                 
Correct output: 16                  | Program output: 36                 
Correct output: -99                 | Program output: -86                
Correct output: -73                 | Program output: 37                 
Correct output: -61                 | Program output: -61                
Correct output: -94                 | Program output: -94                
Correct output: -32                 | Program output: 98                 
Correct output: -73                 | Program output: -73                
Correct output: -78                 | Program output: 65                 
Correct output: -28                 | Program output: -28                
Correct output: -78                 | Program output: -67                
Correct output: 14                  | Program output: 72                 
Correct output: 3                   | Program output: 15                 
Correct output: -97                 | Program output: -97                
Correct output: 36                  | Program output: 36                 
Correct output: -12                 | Program output: 72                 
Correct output: -90                 | Program output: -90                
Correct output: -96                 | Program output: 91                 
Correct output: -53                 | Program output: -42                
Correct output: -73                 | Program output: -29                
Correct output: -78                 | Program output: -51                
Correct output: 35                  | Program output: 76                 
Correct output: -92                 | Program output: 81                 
Correct output: -56                 | Program output: -56                
Correct output: -61                 | Program output: 26                 
Correct output: -99                 | Program output: -49                
Correct output: -98                 | Program output: -98                
Correct output: -96                 | Program output: -14                
Correct output: -96                 | Program output: -96                
Correct output: -97                 | Program output: 82                 
Correct output: -40                 | Program output: -40                
Correct output: -94                 | Program output: 43                 
Correct output: -99                 | Program output: -99                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_or} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_y} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_add} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_rot} {:close 2, :instruction in4} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_shove} {:close 0, :instruction tagged_698} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_eq} {:close 0, :instruction print_exec} {:close 0, :instruction -38} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_dup_items} {:close 1, :instruction print_exec} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_boolean} {:close 2, :instruction integer_inc} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_gt})
Lexicase best program: (boolean_or boolean_rot integer_stackdepth in3 print_integer exec_do*while (integer_rot) exec_y (exec_do*range () integer_empty boolean_dup_times) integer_add exec_swap (integer_min boolean_dup_items integer_rot in4) () integer_mod boolean_shove tagged_698 integer_dup_items exec_yank integer_eq print_exec (-38 boolean_shove) integer_dup_items print_exec () boolean_rot boolean_flush print_boolean integer_inc boolean_dup_times boolean_empty integer_div integer_yankdup exec_do*times (integer_dup_times integer_yankdup integer_gt))
Lexicase best errors: [1 0 0 1 1 0 0 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 49
Percent parens: 0.184
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_or} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_y} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_add} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_rot} {:close 2, :instruction in4} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_shove} {:close 0, :instruction tagged_698} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_eq} {:close 0, :instruction print_exec} {:close 0, :instruction -38} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_dup_items} {:close 1, :instruction print_exec} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_boolean} {:close 2, :instruction integer_inc} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_gt})
Zero cases best program: (boolean_or boolean_rot integer_stackdepth in3 print_integer exec_do*while (integer_rot) exec_y (exec_do*range () integer_empty boolean_dup_times) integer_add exec_swap (integer_min boolean_dup_items integer_rot in4) () integer_mod boolean_shove tagged_698 integer_dup_items exec_yank integer_eq print_exec (-38 boolean_shove) integer_dup_items print_exec () boolean_rot boolean_flush print_boolean integer_inc boolean_dup_times boolean_empty integer_div integer_yankdup exec_do*times (integer_dup_times integer_yankdup integer_gt))
Zero cases best errors: [1 0 0 1 1 0 0 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 49
Percent parens: 0.184
--- Lexicase Population Statistics ---
Count of elite individuals by case: (78 277 276 111 134 525 277 525 278 312)
Population mean number of elite cases: 2.79
Count of perfect (error zero) individuals by case: (78 277 276 111 134 525 277 525 278 312)
Population mean number of perfect (error zero) cases: 2.79
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 1, :instruction exec_do*range} {:close 0, :instruction -98} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_min} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_max} {:close 0, :instruction in3} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_if} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup_items} {:close 1, :instruction print_exec} {:close 2, :instruction integer_inc} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gt})
Best program: (boolean_xor boolean_or exec_empty exec_empty boolean_pop boolean_invert_first_then_and in3 print_integer integer_dup_items exec_do*while (exec_y (integer_dup in1 exec_do*range () -98 integer_stackdepth) in2 exec_do*range (integer_min integer_mult integer_mod exec_yank integer_max in3 boolean_shove) boolean_invert_second_then_and exec_if (integer_lt) (integer_inc exec_dup_times (integer_eq integer_dup_items exec_dup_items print_exec () integer_inc)) boolean_dup_times) in1 integer_min exec_do*times (integer_dup_times integer_gt))
Errors: [1 0 0 1 1 0 0 0 0 1]
Total: 4
Mean: 0.4
Genome size: 41
Size: 51
Percent parens: 0.196
--- Population Statistics ---
Average total errors in population: 7.207
Median total errors in population: 6
Error averages by case: (0.922 0.723 0.724 0.889 0.866 0.475 0.723 0.475 0.722 0.688)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 47.712
Average program size in population (points): 65.382
Average percent parens in population: 0.270
Minimum age in population: 8.0
Maximum age in population: 8.0
Average age in population: 8.0
Median age in population: 8.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.007
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.168
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 4519371
--- Timings ---
Current time: 1559593770605 milliseconds
Total Time:          19.6 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        10.2 seconds, 52.0%
Fitness Testing:      6.2 seconds, 31.6%
Report:               3.1 seconds, 15.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 489
Test mean error for best: 0.48900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -62                 | Program output: -62                
Correct output: -36                 | Program output: -36                
Correct output: -54                 | Program output: -54                
Correct output: -38                 | Program output: -38                
Correct output: -70                 | Program output: -70                
Correct output: -16                 | Program output: -16                
Correct output: -60                 | Program output: -60                
Correct output: -88                 | Program output: -88                
Correct output: -13                 | Program output: -13                
Correct output: -69                 | Program output: -58                
Correct output: -45                 | Program output: -45                
Correct output: 64                  | Program output: 64                 
Correct output: -6                  | Program output: -6                 
Correct output: -46                 | Program output: -46                
Correct output: -97                 | Program output: -97                
Correct output: 11                  | Program output: 15                 
Correct output: 13                  | Program output: 67                 
Correct output: 7                   | Program output: 7                  
Correct output: 27                  | Program output: 27                 
Correct output: 7                   | Program output: 7                  
Correct output: 9                   | Program output: 80                 
Correct output: 86                  | Program output: 97                 
Correct output: 11                  | Program output: 11                 
Correct output: 19                  | Program output: 71                 
Correct output: 12                  | Program output: 29                 
Correct output: 75                  | Program output: 81                 
Correct output: 0                   | Program output: 0                  
Correct output: 55                  | Program output: 69                 
Correct output: 0                   | Program output: 0                  
Correct output: 42                  | Program output: 66                 
Correct output: 5                   | Program output: 5                  
Correct output: 10                  | Program output: 76                 
Correct output: 13                  | Program output: 24                 
Correct output: 38                  | Program output: 38                 
Correct output: 22                  | Program output: 56                 
Correct output: -69                 | Program output: -69                
Correct output: -7                  | Program output: 51                 
Correct output: -62                 | Program output: -62                
Correct output: -84                 | Program output: -52                
Correct output: -85                 | Program output: -85                
Correct output: -45                 | Program output: -18                
Correct output: -96                 | Program output: -65                
Correct output: -45                 | Program output: -45                
Correct output: -70                 | Program output: -40                
Correct output: -97                 | Program output: -63                
Correct output: -95                 | Program output: -32                
Correct output: -87                 | Program output: -61                
Correct output: 28                  | Program output: 69                 
Correct output: -11                 | Program output: -1                 
Correct output: -62                 | Program output: -62                
Correct output: -80                 | Program output: -55                
Correct output: -71                 | Program output: -71                
Correct output: -67                 | Program output: -24                
Correct output: -96                 | Program output: -21                
Correct output: -4                  | Program output: -4                 
Correct output: -79                 | Program output: -74                
Correct output: -42                 | Program output: -42                
Correct output: -35                 | Program output: -35                
Correct output: 10                  | Program output: 37                 
Correct output: -47                 | Program output: -47                
Correct output: -61                 | Program output: -61                
Correct output: -73                 | Program output: -60                
Correct output: -50                 | Program output: -50                
Correct output: 16                  | Program output: 28                 
Correct output: -99                 | Program output: -99                
Correct output: -73                 | Program output: -73                
Correct output: -61                 | Program output: -20                
Correct output: -94                 | Program output: -51                
Correct output: -32                 | Program output: -32                
Correct output: -73                 | Program output: -13                
Correct output: -78                 | Program output: -78                
Correct output: -28                 | Program output: -6                 
Correct output: -78                 | Program output: -13                
Correct output: 14                  | Program output: 14                 
Correct output: 3                   | Program output: 74                 
Correct output: -97                 | Program output: -91                
Correct output: 36                  | Program output: 95                 
Correct output: -12                 | Program output: -12                
Correct output: -90                 | Program output: 87                 
Correct output: -96                 | Program output: -29                
Correct output: -53                 | Program output: -53                
Correct output: -73                 | Program output: -73                
Correct output: -78                 | Program output: -40                
Correct output: 35                  | Program output: 46                 
Correct output: -92                 | Program output: -92                
Correct output: -56                 | Program output: 9                  
Correct output: -61                 | Program output: -34                
Correct output: -99                 | Program output: -99                
Correct output: -98                 | Program output: -2                 
Correct output: -96                 | Program output: -96                
Correct output: -96                 | Program output: -69                
Correct output: -97                 | Program output: -97                
Correct output: -40                 | Program output: -27                
Correct output: -94                 | Program output: -94                
Correct output: -99                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_swap} {:close 1, :instruction tagged_888} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_empty} {:close 1, :instruction tag_integer_751} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction exec_when} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_rot} {:close 0, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction in1} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_eq} {:close 0, :instruction tag_integer_666} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_shove})
Lexicase best program: (boolean_and integer_min integer_pop exec_yankdup boolean_eq integer_swap tagged_888 exec_rot () (exec_do*range (exec_do*times () exec_empty tag_integer_751) in1 integer_div exec_when () integer_mod) (integer_shove exec_if (in2 exec_k (exec_if (boolean_invert_second_then_and) (boolean_rot exec_do*times (integer_rot in4 exec_do*times (in1 integer_swap print_integer exec_swap (exec_flush integer_swap boolean_dup_items integer_rot integer_pop exec_y (boolean_pop integer_dup_items integer_gte integer_fromboolean integer_eq) tag_integer_666 integer_rot exec_pop () exec_pop (integer_yank) boolean_dup_times exec_s_when_autoconstructing (boolean_frominteger integer_gte exec_yank integer_mult exec_while (boolean_yankdup boolean_pop) integer_shove) () ()) ())))) ()) ()))
Lexicase best errors: [0 0 1 1 0 0 1 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 81
Percent parens: 0.296
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_swap} {:close 1, :instruction tagged_888} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_empty} {:close 1, :instruction tag_integer_751} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction exec_when} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_rot} {:close 0, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction in1} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_eq} {:close 0, :instruction tag_integer_666} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_shove})
Zero cases best program: (boolean_and integer_min integer_pop exec_yankdup boolean_eq integer_swap tagged_888 exec_rot () (exec_do*range (exec_do*times () exec_empty tag_integer_751) in1 integer_div exec_when () integer_mod) (integer_shove exec_if (in2 exec_k (exec_if (boolean_invert_second_then_and) (boolean_rot exec_do*times (integer_rot in4 exec_do*times (in1 integer_swap print_integer exec_swap (exec_flush integer_swap boolean_dup_items integer_rot integer_pop exec_y (boolean_pop integer_dup_items integer_gte integer_fromboolean integer_eq) tag_integer_666 integer_rot exec_pop () exec_pop (integer_yank) boolean_dup_times exec_s_when_autoconstructing (boolean_frominteger integer_gte exec_yank integer_mult exec_while (boolean_yankdup boolean_pop) integer_shove) () ()) ())))) ()) ()))
Zero cases best errors: [0 0 1 1 0 0 1 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 81
Percent parens: 0.296
--- Lexicase Population Statistics ---
Count of elite individuals by case: (102 121 304 310 223 582 52 125 312 102)
Population mean number of elite cases: 2.23
Count of perfect (error zero) individuals by case: (102 121 304 310 223 582 52 125 312 102)
Population mean number of perfect (error zero) cases: 2.23
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_pop} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 1, :instruction tag_integer_296} {:close 2, :instruction integer_inc} {:close 1, :instruction tagged_888} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_do*times} {:close 1, :instruction integer_div} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_eq} {:close 1, :instruction tag_integer_751} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_when} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*times} {:close 0, :instruction in1} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction tag_integer_666} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_shove})
Best program: (exec_pop (exec_shove (integer_min exec_do*count (integer_pop boolean_eq integer_dup tag_integer_296) integer_inc)) tagged_888 exec_rot () (exec_do*range (exec_do*times () integer_div) exec_empty boolean_eq tag_integer_751) (integer_gt exec_do*range (exec_when () integer_mod) integer_shove exec_if (in2 exec_k (exec_if (boolean_invert_second_then_and) (boolean_rot boolean_shove integer_swap in4 exec_do*times (exec_do*times (in1 integer_swap print_integer exec_swap (exec_flush integer_swap boolean_dup_items integer_rot integer_pop boolean_pop boolean_dup_times exec_stackdepth) (integer_dup_items integer_gte boolean_dup_items tag_integer_666 integer_rot integer_yank) integer_lt) boolean_dup_times integer_pop integer_yank integer_gte exec_yank integer_mult exec_while (boolean_yankdup boolean_pop) integer_shove))) ()) ()))
Errors: [0 0 1 1 0 0 1 0 1 0]
Total: 4
Mean: 0.4
Genome size: 62
Size: 84
Percent parens: 0.262
--- Population Statistics ---
Average total errors in population: 7.767
Median total errors in population: 7
Error averages by case: (0.898 0.879 0.696 0.69 0.777 0.418 0.948 0.875 0.688 0.898)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 53.535
Average program size in population (points): 74.514
Average percent parens in population: 0.279
Minimum age in population: 9.0
Maximum age in population: 9.0
Average age in population: 9.0
Median age in population: 9.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.007
Error (vector) diversity:			 0.03
Behavioral diversity:				 0.175
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 4995121
--- Timings ---
Current time: 1559593772546 milliseconds
Total Time:          21.7 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        11.3 seconds, 52.1%
Fitness Testing:      6.7 seconds, 30.8%
Report:               3.6 seconds, 16.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 489
Test mean error for best: 0.48900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -62                 | Program output: -62                
Correct output: -36                 | Program output: -36                
Correct output: -54                 | Program output: -54                
Correct output: -38                 | Program output: -38                
Correct output: -70                 | Program output: -70                
Correct output: -16                 | Program output: -16                
Correct output: -60                 | Program output: -60                
Correct output: -88                 | Program output: -88                
Correct output: -13                 | Program output: -13                
Correct output: -69                 | Program output: -58                
Correct output: -45                 | Program output: -45                
Correct output: 64                  | Program output: 64                 
Correct output: -6                  | Program output: -6                 
Correct output: -46                 | Program output: -46                
Correct output: -97                 | Program output: -97                
Correct output: 11                  | Program output: 15                 
Correct output: 13                  | Program output: 67                 
Correct output: 7                   | Program output: 7                  
Correct output: 27                  | Program output: 27                 
Correct output: 7                   | Program output: 7                  
Correct output: 9                   | Program output: 80                 
Correct output: 86                  | Program output: 97                 
Correct output: 11                  | Program output: 11                 
Correct output: 19                  | Program output: 71                 
Correct output: 12                  | Program output: 29                 
Correct output: 75                  | Program output: 81                 
Correct output: 0                   | Program output: 0                  
Correct output: 55                  | Program output: 69                 
Correct output: 0                   | Program output: 0                  
Correct output: 42                  | Program output: 66                 
Correct output: 5                   | Program output: 5                  
Correct output: 10                  | Program output: 76                 
Correct output: 13                  | Program output: 24                 
Correct output: 38                  | Program output: 38                 
Correct output: 22                  | Program output: 56                 
Correct output: -69                 | Program output: -69                
Correct output: -7                  | Program output: 51                 
Correct output: -62                 | Program output: -62                
Correct output: -84                 | Program output: -52                
Correct output: -85                 | Program output: -85                
Correct output: -45                 | Program output: -18                
Correct output: -96                 | Program output: -65                
Correct output: -45                 | Program output: -45                
Correct output: -70                 | Program output: -40                
Correct output: -97                 | Program output: -63                
Correct output: -95                 | Program output: -32                
Correct output: -87                 | Program output: -61                
Correct output: 28                  | Program output: 69                 
Correct output: -11                 | Program output: -1                 
Correct output: -62                 | Program output: -62                
Correct output: -80                 | Program output: -55                
Correct output: -71                 | Program output: -71                
Correct output: -67                 | Program output: -24                
Correct output: -96                 | Program output: -21                
Correct output: -4                  | Program output: -4                 
Correct output: -79                 | Program output: -74                
Correct output: -42                 | Program output: -42                
Correct output: -35                 | Program output: -35                
Correct output: 10                  | Program output: 37                 
Correct output: -47                 | Program output: -47                
Correct output: -61                 | Program output: -61                
Correct output: -73                 | Program output: -60                
Correct output: -50                 | Program output: -50                
Correct output: 16                  | Program output: 28                 
Correct output: -99                 | Program output: -99                
Correct output: -73                 | Program output: -73                
Correct output: -61                 | Program output: -20                
Correct output: -94                 | Program output: -51                
Correct output: -32                 | Program output: -32                
Correct output: -73                 | Program output: -13                
Correct output: -78                 | Program output: -78                
Correct output: -28                 | Program output: -6                 
Correct output: -78                 | Program output: -13                
Correct output: 14                  | Program output: 14                 
Correct output: 3                   | Program output: 74                 
Correct output: -97                 | Program output: -91                
Correct output: 36                  | Program output: 95                 
Correct output: -12                 | Program output: -12                
Correct output: -90                 | Program output: 87                 
Correct output: -96                 | Program output: -29                
Correct output: -53                 | Program output: -53                
Correct output: -73                 | Program output: -73                
Correct output: -78                 | Program output: -40                
Correct output: 35                  | Program output: 46                 
Correct output: -92                 | Program output: -92                
Correct output: -56                 | Program output: 9                  
Correct output: -61                 | Program output: -34                
Correct output: -99                 | Program output: -99                
Correct output: -98                 | Program output: -2                 
Correct output: -96                 | Program output: -96                
Correct output: -96                 | Program output: -69                
Correct output: -97                 | Program output: -97                
Correct output: -40                 | Program output: -27                
Correct output: -94                 | Program output: -94                
Correct output: -99                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_swap} {:close 1, :instruction tagged_888} {:close 1, :instruction exec_rot} {:close 0, :instruction print_newline} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_empty} {:close 1, :instruction tag_integer_751} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction exec_when} {:close 0, :instruction in1} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_rot} {:close 0, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction in1} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_eq} {:close 0, :instruction tag_integer_666} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_shove})
Lexicase best program: (boolean_and integer_min integer_pop exec_yankdup integer_swap tagged_888 exec_rot () (print_newline exec_do*range (exec_do*times () exec_empty tag_integer_751) in1 integer_div exec_when () in1 integer_mod) (integer_shove exec_if (in2 exec_if (boolean_invert_second_then_and) (boolean_rot exec_do*times (integer_rot in4 exec_do*times (in1 integer_swap print_integer exec_swap (exec_flush integer_swap boolean_dup_items integer_rot integer_pop exec_y (boolean_pop integer_dup_items integer_gte integer_fromboolean integer_eq) tag_integer_666 integer_rot exec_pop () exec_pop (integer_yank) exec_do*range (boolean_dup_times exec_s_when_autoconstructing (integer_div boolean_frominteger integer_gte exec_yank integer_mult exec_while (boolean_pop) integer_shove) () ())) ())))) ()))
Lexicase best errors: [1 1 0 0 0 0 0 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 81
Percent parens: 0.284
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_swap} {:close 1, :instruction tagged_888} {:close 1, :instruction exec_rot} {:close 0, :instruction print_newline} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_empty} {:close 1, :instruction tag_integer_751} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction exec_when} {:close 0, :instruction in1} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_rot} {:close 0, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction in1} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_eq} {:close 0, :instruction tag_integer_666} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_shove})
Zero cases best program: (boolean_and integer_min integer_pop exec_yankdup integer_swap tagged_888 exec_rot () (print_newline exec_do*range (exec_do*times () exec_empty tag_integer_751) in1 integer_div exec_when () in1 integer_mod) (integer_shove exec_if (in2 exec_if (boolean_invert_second_then_and) (boolean_rot exec_do*times (integer_rot in4 exec_do*times (in1 integer_swap print_integer exec_swap (exec_flush integer_swap boolean_dup_items integer_rot integer_pop exec_y (boolean_pop integer_dup_items integer_gte integer_fromboolean integer_eq) tag_integer_666 integer_rot exec_pop () exec_pop (integer_yank) exec_do*range (boolean_dup_times exec_s_when_autoconstructing (integer_div boolean_frominteger integer_gte exec_yank integer_mult exec_while (boolean_pop) integer_shove) () ())) ())))) ()))
Zero cases best errors: [1 1 0 0 0 0 0 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 81
Percent parens: 0.284
--- Lexicase Population Statistics ---
Count of elite individuals by case: (63 91 239 239 296 254 301 223 495 92)
Population mean number of elite cases: 2.29
Count of perfect (error zero) individuals by case: (63 91 239 239 296 254 301 223 495 92)
Population mean number of perfect (error zero) cases: 2.29
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_pop} {:close 0, :instruction integer_min} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 2, :instruction integer_inc} {:close 1, :instruction tagged_888} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_eq} {:close 1, :instruction tag_integer_751} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_when} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_do*range} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_invert_second_then_and} {:close 2, :instruction exec_do*range} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_rot} {:close 0, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction in1} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_swap} {:close 1, :instruction in1} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_div} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_while} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_lt} {:close 2, :instruction boolean_not} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction print_boolean})
Best program: (exec_pop (integer_min integer_pop exec_yankdup boolean_eq integer_inc) tagged_888 exec_swap (exec_do*times () exec_rot () (exec_do*range (exec_empty boolean_eq tag_integer_751) exec_do*range (exec_when () integer_mod) exec_do*range (in2 exec_k (boolean_invert_second_then_and) (exec_do*range ()) integer_swap exec_do*times (integer_rot in4 exec_do*times (in1 integer_swap print_integer exec_swap (in1) (boolean_xor exec_flush boolean_dup_items integer_rot boolean_dup) boolean_pop exec_stackdepth) exec_y_when_autoconstructing (integer_dup_items integer_gte integer_div integer_fromboolean boolean_empty boolean_stackdepth exec_while (integer_eq) exec_shove (integer_yank) integer_lt) boolean_not)) boolean_dup_times integer_mult exec_while (integer_yankdup boolean_yankdup boolean_pop) integer_shove print_boolean) ()) ())
Errors: [1 1 0 0 0 0 0 0 0 1]
Total: 3
Mean: 0.3
Genome size: 60
Size: 83
Percent parens: 0.277
--- Population Statistics ---
Average total errors in population: 7.707
Median total errors in population: 8
Error averages by case: (0.937 0.909 0.761 0.761 0.704 0.746 0.699 0.777 0.505 0.908)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 63.592
Average program size in population (points): 88.699
Average percent parens in population: 0.281
Minimum age in population: 10.0
Maximum age in population: 10.0
Average age in population: 10.0
Median age in population: 10.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.008
Error (vector) diversity:			 0.051
Behavioral diversity:				 0.242
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 5427730
--- Timings ---
Current time: 1559593774390 milliseconds
Total Time:          23.6 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        12.4 seconds, 52.6%
Fitness Testing:      7.1 seconds, 30.1%
Report:               4.0 seconds, 16.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 345
Test mean error for best: 0.34500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -62                 | Program output: -62                
Correct output: -36                 | Program output: -36                
Correct output: -54                 | Program output: -54                
Correct output: -38                 | Program output: -38                
Correct output: -70                 | Program output: -70                
Correct output: -16                 | Program output: -16                
Correct output: -60                 | Program output: -60                
Correct output: -88                 | Program output: -88                
Correct output: -13                 | Program output: -13                
Correct output: -69                 | Program output: -58                
Correct output: -45                 | Program output: -45                
Correct output: 64                  | Program output: 64                 
Correct output: -6                  | Program output: -6                 
Correct output: -46                 | Program output: -46                
Correct output: -97                 | Program output: -97                
Correct output: 11                  | Program output: 11                 
Correct output: 13                  | Program output: 67                 
Correct output: 7                   | Program output: 7                  
Correct output: 27                  | Program output: 27                 
Correct output: 7                   | Program output: 7                  
Correct output: 9                   | Program output: 40                 
Correct output: 86                  | Program output: 88                 
Correct output: 11                  | Program output: 11                 
Correct output: 19                  | Program output: 29                 
Correct output: 12                  | Program output: 12                 
Correct output: 75                  | Program output: 75                 
Correct output: 0                   | Program output: 0                  
Correct output: 55                  | Program output: 55                 
Correct output: 0                   | Program output: 0                  
Correct output: 42                  | Program output: 66                 
Correct output: 5                   | Program output: 5                  
Correct output: 10                  | Program output: 74                 
Correct output: 13                  | Program output: 24                 
Correct output: 38                  | Program output: 38                 
Correct output: 22                  | Program output: 22                 
Correct output: -69                 | Program output: -69                
Correct output: -7                  | Program output: 51                 
Correct output: -62                 | Program output: -62                
Correct output: -84                 | Program output: -84                
Correct output: -85                 | Program output: -85                
Correct output: -45                 | Program output: -40                
Correct output: -96                 | Program output: -65                
Correct output: -45                 | Program output: -45                
Correct output: -70                 | Program output: -40                
Correct output: -97                 | Program output: -97                
Correct output: -95                 | Program output: -95                
Correct output: -87                 | Program output: -87                
Correct output: 28                  | Program output: 28                 
Correct output: -11                 | Program output: -1                 
Correct output: -62                 | Program output: -62                
Correct output: -80                 | Program output: -80                
Correct output: -71                 | Program output: -71                
Correct output: -67                 | Program output: -24                
Correct output: -96                 | Program output: -87                
Correct output: -4                  | Program output: -4                 
Correct output: -79                 | Program output: -74                
Correct output: -42                 | Program output: -42                
Correct output: -35                 | Program output: -35                
Correct output: 10                  | Program output: 37                 
Correct output: -47                 | Program output: -47                
Correct output: -61                 | Program output: -61                
Correct output: -73                 | Program output: -60                
Correct output: -50                 | Program output: -50                
Correct output: 16                  | Program output: 16                 
Correct output: -99                 | Program output: -99                
Correct output: -73                 | Program output: -73                
Correct output: -61                 | Program output: -20                
Correct output: -94                 | Program output: -51                
Correct output: -32                 | Program output: -32                
Correct output: -73                 | Program output: -13                
Correct output: -78                 | Program output: -78                
Correct output: -28                 | Program output: -6                 
Correct output: -78                 | Program output: -78                
Correct output: 14                  | Program output: 14                 
Correct output: 3                   | Program output: 3                  
Correct output: -97                 | Program output: -91                
Correct output: 36                  | Program output: 49                 
Correct output: -12                 | Program output: -12                
Correct output: -90                 | Program output: 8                  
Correct output: -96                 | Program output: -96                
Correct output: -53                 | Program output: -53                
Correct output: -73                 | Program output: -73                
Correct output: -78                 | Program output: -40                
Correct output: 35                  | Program output: 35                 
Correct output: -92                 | Program output: -92                
Correct output: -56                 | Program output: 9                  
Correct output: -61                 | Program output: -34                
Correct output: -99                 | Program output: -99                
Correct output: -98                 | Program output: -2                 
Correct output: -96                 | Program output: -96                
Correct output: -96                 | Program output: -69                
Correct output: -97                 | Program output: -97                
Correct output: -40                 | Program output: -27                
Correct output: -94                 | Program output: -94                
Correct output: -99                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 2, :instruction integer_inc} {:close 1, :instruction tagged_888} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_eq} {:close 1, :instruction tag_integer_751} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*range} {:close 0, :instruction in2} {:close 1, :instruction exec_when} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_add} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_eq} {:close 0, :instruction tag_integer_666} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_yank} {:close 0, :instruction in2} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_y} {:close 0, :instruction integer_shove})
Lexicase best program: (exec_do*while (exec_pop (exec_shove (integer_min exec_do*count (integer_pop exec_yankdup integer_inc)) tagged_888) exec_yank exec_y_when_autoconstructing (exec_do*times () boolean_dup_items print_boolean integer_div) boolean_eq tag_integer_751) integer_shove integer_lte exec_do*range (in2 exec_when () integer_mod) integer_shove exec_if (in2 exec_if (boolean_invert_second_then_and) (integer_swap boolean_dup integer_rot in4 exec_do*times (in1 integer_min print_integer exec_do*count (exec_swap (exec_flush integer_swap boolean_dup_items boolean_pop integer_add exec_stackdepth) (boolean_flush) integer_dup_items integer_gte boolean_empty integer_eq) tag_integer_666 integer_rot integer_yank) integer_lt) boolean_and boolean_dup_times exec_s_when_autoconstructing (boolean_and integer_sub integer_gte exec_yank in2 exec_rot () (exec_k (boolean_yankdup boolean_pop) (exec_y (integer_shove))) ()) () ()) ())
Lexicase best errors: [1 0 0 0 1 0 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 93
Percent parens: 0.280
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 2, :instruction integer_inc} {:close 1, :instruction tagged_888} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_eq} {:close 1, :instruction tag_integer_751} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*range} {:close 0, :instruction in2} {:close 1, :instruction exec_when} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_add} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_eq} {:close 0, :instruction tag_integer_666} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_yank} {:close 0, :instruction in2} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_y} {:close 0, :instruction integer_shove})
Zero cases best program: (exec_do*while (exec_pop (exec_shove (integer_min exec_do*count (integer_pop exec_yankdup integer_inc)) tagged_888) exec_yank exec_y_when_autoconstructing (exec_do*times () boolean_dup_items print_boolean integer_div) boolean_eq tag_integer_751) integer_shove integer_lte exec_do*range (in2 exec_when () integer_mod) integer_shove exec_if (in2 exec_if (boolean_invert_second_then_and) (integer_swap boolean_dup integer_rot in4 exec_do*times (in1 integer_min print_integer exec_do*count (exec_swap (exec_flush integer_swap boolean_dup_items boolean_pop integer_add exec_stackdepth) (boolean_flush) integer_dup_items integer_gte boolean_empty integer_eq) tag_integer_666 integer_rot integer_yank) integer_lt) boolean_and boolean_dup_times exec_s_when_autoconstructing (boolean_and integer_sub integer_gte exec_yank in2 exec_rot () (exec_k (boolean_yankdup boolean_pop) (exec_y (integer_shove))) ()) () ()) ())
Zero cases best errors: [1 0 0 0 1 0 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 93
Percent parens: 0.280
--- Lexicase Population Statistics ---
Count of elite individuals by case: (31 288 261 261 29 266 519 339 262 286)
Population mean number of elite cases: 2.54
Count of perfect (error zero) individuals by case: (31 288 261 261 29 266 519 339 262 286)
Population mean number of perfect (error zero) cases: 2.54
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 2, :instruction integer_inc} {:close 1, :instruction tagged_888} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_eq} {:close 1, :instruction tag_integer_751} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction in2} {:close 1, :instruction exec_when} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_swap} {:close 0, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction in1} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_add} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction tag_integer_666} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_y} {:close 0, :instruction integer_shove})
Best program: (exec_do*while (exec_pop (exec_shove (integer_min exec_do*count (integer_pop exec_yankdup integer_inc)) tagged_888) exec_rot () (exec_yank exec_y_when_autoconstructing (exec_do*times () boolean_dup_items print_boolean integer_div) boolean_flush boolean_eq tag_integer_751) (in3 integer_shove integer_lte in2 exec_when () integer_mod) integer_shove integer_eq exec_if (in2 exec_k (exec_if (boolean_invert_second_then_and) (integer_swap in4 exec_do*times (in1 integer_swap integer_min print_integer exec_swap (exec_flush integer_swap boolean_dup_items integer_rot boolean_pop integer_add integer_rot) (exec_stackdepth) boolean_flush) integer_gte integer_dup_items integer_gte boolean_empty integer_eq) boolean_frominteger tag_integer_666 integer_rot integer_yank) (integer_lt) exec_eq boolean_dup_times exec_s_when_autoconstructing (integer_sub integer_gte exec_dup (exec_yank in2 exec_do*while (exec_rot () (boolean_yankdup boolean_pop) (exec_y (integer_shove))))) () ()) ()))
Errors: [1 0 0 0 1 0 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 73
Size: 102
Percent parens: 0.284
--- Population Statistics ---
Average total errors in population: 7.458
Median total errors in population: 7
Error averages by case: (0.969 0.712 0.739 0.739 0.971 0.734 0.481 0.661 0.738 0.714)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 64.463
Average program size in population (points): 88.629
Average percent parens in population: 0.271
Minimum age in population: 11.0
Maximum age in population: 11.0
Average age in population: 11.0
Median age in population: 11.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.009
Error (vector) diversity:			 0.045
Behavioral diversity:				 0.255
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 5836105
--- Timings ---
Current time: 1559593776260 milliseconds
Total Time:          25.4 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        13.5 seconds, 53.3%
Fitness Testing:      7.5 seconds, 29.5%
Report:               4.3 seconds, 16.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 349
Test mean error for best: 0.34900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -62                 | Program output: -32                
Correct output: -36                 | Program output: -36                
Correct output: -54                 | Program output: -54                
Correct output: -38                 | Program output: 62                 
Correct output: -70                 | Program output: -70                
Correct output: -16                 | Program output: -16                
Correct output: -60                 | Program output: -60                
Correct output: -88                 | Program output: -22                
Correct output: -13                 | Program output: -13                
Correct output: -69                 | Program output: -58                
Correct output: -45                 | Program output: -45                
Correct output: 64                  | Program output: 64                 
Correct output: -6                  | Program output: -6                 
Correct output: -46                 | Program output: -46                
Correct output: -97                 | Program output: -97                
Correct output: 11                  | Program output: 11                 
Correct output: 13                  | Program output: 67                 
Correct output: 7                   | Program output: 7                  
Correct output: 27                  | Program output: 27                 
Correct output: 7                   | Program output: 7                  
Correct output: 9                   | Program output: 40                 
Correct output: 86                  | Program output: 88                 
Correct output: 11                  | Program output: 11                 
Correct output: 19                  | Program output: 29                 
Correct output: 12                  | Program output: 29                 
Correct output: 75                  | Program output: 75                 
Correct output: 0                   | Program output: 0                  
Correct output: 55                  | Program output: 55                 
Correct output: 0                   | Program output: 0                  
Correct output: 42                  | Program output: 66                 
Correct output: 5                   | Program output: 5                  
Correct output: 10                  | Program output: 74                 
Correct output: 13                  | Program output: 24                 
Correct output: 38                  | Program output: 38                 
Correct output: 22                  | Program output: 22                 
Correct output: -69                 | Program output: -7                 
Correct output: -7                  | Program output: -7                 
Correct output: -62                 | Program output: -22                
Correct output: -84                 | Program output: -84                
Correct output: -85                 | Program output: -59                
Correct output: -45                 | Program output: -45                
Correct output: -96                 | Program output: -96                
Correct output: -45                 | Program output: -45                
Correct output: -70                 | Program output: -70                
Correct output: -97                 | Program output: -97                
Correct output: -95                 | Program output: -95                
Correct output: -87                 | Program output: -87                
Correct output: 28                  | Program output: 28                 
Correct output: -11                 | Program output: -11                
Correct output: -62                 | Program output: -62                
Correct output: -80                 | Program output: -80                
Correct output: -71                 | Program output: -69                
Correct output: -67                 | Program output: -67                
Correct output: -96                 | Program output: -96                
Correct output: -4                  | Program output: -4                 
Correct output: -79                 | Program output: -79                
Correct output: -42                 | Program output: -42                
Correct output: -35                 | Program output: -35                
Correct output: 10                  | Program output: 37                 
Correct output: -47                 | Program output: -47                
Correct output: -61                 | Program output: -55                
Correct output: -73                 | Program output: -73                
Correct output: -50                 | Program output: -50                
Correct output: 16                  | Program output: 16                 
Correct output: -99                 | Program output: -99                
Correct output: -73                 | Program output: -73                
Correct output: -61                 | Program output: -61                
Correct output: -94                 | Program output: -94                
Correct output: -32                 | Program output: -32                
Correct output: -73                 | Program output: -73                
Correct output: -78                 | Program output: -44                
Correct output: -28                 | Program output: -28                
Correct output: -78                 | Program output: -78                
Correct output: 14                  | Program output: 14                 
Correct output: 3                   | Program output: 3                  
Correct output: -97                 | Program output: -97                
Correct output: 36                  | Program output: 49                 
Correct output: -12                 | Program output: -12                
Correct output: -90                 | Program output: -90                
Correct output: -96                 | Program output: -96                
Correct output: -53                 | Program output: -42                
Correct output: -73                 | Program output: -29                
Correct output: -78                 | Program output: -51                
Correct output: 35                  | Program output: 35                 
Correct output: -92                 | Program output: -92                
Correct output: -56                 | Program output: -56                
Correct output: -61                 | Program output: -61                
Correct output: -99                 | Program output: -49                
Correct output: -98                 | Program output: -98                
Correct output: -96                 | Program output: -44                
Correct output: -96                 | Program output: -96                
Correct output: -97                 | Program output: -65                
Correct output: -40                 | Program output: -40                
Correct output: -94                 | Program output: -13                
Correct output: -99                 | Program output: -99                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 2, :instruction integer_inc} {:close 0, :instruction integer_dup} {:close 1, :instruction tagged_888} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_div} {:close 1, :instruction tag_integer_751} {:close 0, :instruction in3} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*range} {:close 0, :instruction in2} {:close 1, :instruction integer_mult} {:close 1, :instruction exec_when} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction exec_if} {:close 0, :instruction integer_rot} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction tag_integer_666} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_yank} {:close 3, :instruction integer_fromboolean} {:close 0, :instruction in2} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_y} {:close 0, :instruction integer_shove})
Lexicase best program: (exec_do*while (exec_pop (exec_shove (integer_min exec_do*count (integer_pop exec_yankdup integer_inc)) integer_dup tagged_888) exec_yank exec_y_when_autoconstructing (exec_do*times () boolean_dup_items print_boolean integer_div) tag_integer_751) in3 integer_mult integer_shove integer_lte exec_do*range (in2 integer_mult) exec_when () print_boolean integer_mod integer_shove exec_if (in2 exec_k (exec_if (integer_rot in4 integer_min in1 integer_swap integer_min print_integer exec_flush integer_swap boolean_dup_items integer_rot boolean_pop exec_stackdepth) (boolean_flush) integer_dup_items integer_gte boolean_empty boolean_yank integer_eq) (exec_pop (tag_integer_666 integer_rot integer_lt) boolean_dup_times integer_empty integer_sub integer_gte exec_yank integer_fromboolean)) () in2 exec_rot () (exec_k (boolean_yankdup boolean_pop) (exec_y (integer_shove))) ())
Lexicase best errors: [0 0 0 0 1 1 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 90
Percent parens: 0.244
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 2, :instruction integer_inc} {:close 0, :instruction integer_dup} {:close 1, :instruction tagged_888} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_div} {:close 1, :instruction tag_integer_751} {:close 0, :instruction in3} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*range} {:close 0, :instruction in2} {:close 1, :instruction integer_mult} {:close 1, :instruction exec_when} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction exec_if} {:close 0, :instruction integer_rot} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction tag_integer_666} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_yank} {:close 3, :instruction integer_fromboolean} {:close 0, :instruction in2} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_y} {:close 0, :instruction integer_shove})
Zero cases best program: (exec_do*while (exec_pop (exec_shove (integer_min exec_do*count (integer_pop exec_yankdup integer_inc)) integer_dup tagged_888) exec_yank exec_y_when_autoconstructing (exec_do*times () boolean_dup_items print_boolean integer_div) tag_integer_751) in3 integer_mult integer_shove integer_lte exec_do*range (in2 integer_mult) exec_when () print_boolean integer_mod integer_shove exec_if (in2 exec_k (exec_if (integer_rot in4 integer_min in1 integer_swap integer_min print_integer exec_flush integer_swap boolean_dup_items integer_rot boolean_pop exec_stackdepth) (boolean_flush) integer_dup_items integer_gte boolean_empty boolean_yank integer_eq) (exec_pop (tag_integer_666 integer_rot integer_lt) boolean_dup_times integer_empty integer_sub integer_gte exec_yank integer_fromboolean)) () in2 exec_rot () (exec_k (boolean_yankdup boolean_pop) (exec_y (integer_shove))) ())
Zero cases best errors: [0 0 0 0 1 1 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 90
Percent parens: 0.244
--- Lexicase Population Statistics ---
Count of elite individuals by case: (169 509 339 31 84 171 297 349 366 340)
Population mean number of elite cases: 2.65
Count of perfect (error zero) individuals by case: (169 509 339 31 84 171 297 349 366 340)
Population mean number of perfect (error zero) cases: 2.65
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 2, :instruction integer_inc} {:close 0, :instruction integer_flush} {:close 1, :instruction tagged_888} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_eq} {:close 1, :instruction tag_integer_751} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 1, :instruction exec_when} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*times} {:close 0, :instruction in1} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_add} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_shove})
Best program: (exec_do*while (exec_pop (exec_shove (integer_min exec_do*count (integer_pop exec_yankdup integer_inc)) integer_flush tagged_888) exec_rot () (exec_dup_items exec_yank exec_y_when_autoconstructing (boolean_dup_items print_boolean boolean_eq tag_integer_751) in3 integer_shove integer_lte integer_eq) (in3 in2 exec_when () integer_mod) integer_shove exec_if (in2 exec_k (exec_if (boolean_invert_second_then_and) (integer_swap integer_rot exec_do*times (in1 integer_empty integer_min print_integer exec_k_when_autoconstructing (exec_swap (exec_flush integer_swap boolean_dup_items integer_rot boolean_pop integer_add exec_stackdepth) (integer_swap boolean_flush) integer_gte boolean_empty integer_eq) (boolean_or integer_swap integer_rot integer_yank) integer_lt) boolean_yankdup boolean_and boolean_dup_times exec_s_when_autoconstructing (boolean_yankdup integer_gte exec_yank exec_k (boolean_yankdup boolean_pop boolean_pop) (integer_shove)) () ())) ()) ()))
Errors: [0 0 0 1 0 0 0 1 0 0]
Total: 2
Mean: 0.2
Genome size: 70
Size: 96
Percent parens: 0.271
--- Population Statistics ---
Average total errors in population: 7.345
Median total errors in population: 9
Error averages by case: (0.831 0.491 0.661 0.969 0.916 0.829 0.703 0.651 0.634 0.66)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 68.869
Average program size in population (points): 96.549
Average percent parens in population: 0.283
Minimum age in population: 12.0
Maximum age in population: 12.0
Average age in population: 12.0
Median age in population: 12.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.009
Error (vector) diversity:			 0.058
Behavioral diversity:				 0.245
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 6353415
--- Timings ---
Current time: 1559593778250 milliseconds
Total Time:          27.4 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        14.7 seconds, 53.6%
Fitness Testing:      8.0 seconds, 29.1%
Report:               4.6 seconds, 16.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 184
Test mean error for best: 0.18400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -62                 | Program output: -62                
Correct output: -36                 | Program output: -36                
Correct output: -54                 | Program output: -54                
Correct output: -38                 | Program output: -38                
Correct output: -70                 | Program output: -70                
Correct output: -16                 | Program output: -16                
Correct output: -60                 | Program output: -60                
Correct output: -88                 | Program output: -88                
Correct output: -13                 | Program output: -13                
Correct output: -69                 | Program output: -58                
Correct output: -45                 | Program output: -45                
Correct output: 64                  | Program output: 64                 
Correct output: -6                  | Program output: -6                 
Correct output: -46                 | Program output: -46                
Correct output: -97                 | Program output: -97                
Correct output: 11                  | Program output: 11                 
Correct output: 13                  | Program output: 13                 
Correct output: 7                   | Program output: 7                  
Correct output: 27                  | Program output: 27                 
Correct output: 7                   | Program output: 7                  
Correct output: 9                   | Program output: 40                 
Correct output: 86                  | Program output: 88                 
Correct output: 11                  | Program output: 11                 
Correct output: 19                  | Program output: 29                 
Correct output: 12                  | Program output: 12                 
Correct output: 75                  | Program output: 75                 
Correct output: 0                   | Program output: 0                  
Correct output: 55                  | Program output: 55                 
Correct output: 0                   | Program output: 0                  
Correct output: 42                  | Program output: 66                 
Correct output: 5                   | Program output: 5                  
Correct output: 10                  | Program output: 10                 
Correct output: 13                  | Program output: 13                 
Correct output: 38                  | Program output: 38                 
Correct output: 22                  | Program output: 22                 
Correct output: -69                 | Program output: -69                
Correct output: -7                  | Program output: -7                 
Correct output: -62                 | Program output: -62                
Correct output: -84                 | Program output: -84                
Correct output: -85                 | Program output: -85                
Correct output: -45                 | Program output: -40                
Correct output: -96                 | Program output: -96                
Correct output: -45                 | Program output: -45                
Correct output: -70                 | Program output: -40                
Correct output: -97                 | Program output: -97                
Correct output: -95                 | Program output: -95                
Correct output: -87                 | Program output: -87                
Correct output: 28                  | Program output: 28                 
Correct output: -11                 | Program output: -1                 
Correct output: -62                 | Program output: -62                
Correct output: -80                 | Program output: -80                
Correct output: -71                 | Program output: -71                
Correct output: -67                 | Program output: -67                
Correct output: -96                 | Program output: -87                
Correct output: -4                  | Program output: -4                 
Correct output: -79                 | Program output: -74                
Correct output: -42                 | Program output: -42                
Correct output: -35                 | Program output: -35                
Correct output: 10                  | Program output: 10                 
Correct output: -47                 | Program output: -47                
Correct output: -61                 | Program output: -61                
Correct output: -73                 | Program output: -73                
Correct output: -50                 | Program output: -50                
Correct output: 16                  | Program output: 16                 
Correct output: -99                 | Program output: -99                
Correct output: -73                 | Program output: -73                
Correct output: -61                 | Program output: -61                
Correct output: -94                 | Program output: -94                
Correct output: -32                 | Program output: -32                
Correct output: -73                 | Program output: -73                
Correct output: -78                 | Program output: -78                
Correct output: -28                 | Program output: -28                
Correct output: -78                 | Program output: -78                
Correct output: 14                  | Program output: 14                 
Correct output: 3                   | Program output: 3                  
Correct output: -97                 | Program output: -97                
Correct output: 36                  | Program output: 36                 
Correct output: -12                 | Program output: -12                
Correct output: -90                 | Program output: -90                
Correct output: -96                 | Program output: -96                
Correct output: -53                 | Program output: -53                
Correct output: -73                 | Program output: -73                
Correct output: -78                 | Program output: -40                
Correct output: 35                  | Program output: 35                 
Correct output: -92                 | Program output: -92                
Correct output: -56                 | Program output: -56                
Correct output: -61                 | Program output: -34                
Correct output: -99                 | Program output: -99                
Correct output: -98                 | Program output: -2                 
Correct output: -96                 | Program output: -96                
Correct output: -96                 | Program output: -96                
Correct output: -97                 | Program output: -97                
Correct output: -40                 | Program output: -40                
Correct output: -94                 | Program output: -94                
Correct output: -99                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction tagged_888} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_or} {:close 1, :instruction tag_integer_751} {:close 0, :instruction in3} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*range} {:close 0, :instruction in2} {:close 1, :instruction exec_when} {:close 1, :instruction integer_min} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_rot} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction in1} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_eq} {:close 0, :instruction tag_integer_666} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_yank} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y})
Lexicase best program: (exec_do*while (exec_shove (integer_min exec_eq integer_pop exec_yankdup tagged_888) exec_rot () (exec_y_when_autoconstructing (exec_do*times () boolean_dup_items print_boolean integer_div) boolean_eq boolean_or tag_integer_751) (in3 integer_lte exec_do*range (in2 exec_when () integer_min) integer_gte exec_rot () (integer_mod) (integer_shove exec_if (in2 exec_if (integer_swap integer_rot in4 exec_do*times (in1 integer_swap integer_min print_integer exec_swap (exec_flush boolean_xor integer_swap boolean_dup_items integer_rot exec_do*times (boolean_pop exec_swap (integer_add integer_yankdup exec_stackdepth) (exec_y_when_autoconstructing (integer_gte boolean_frominteger integer_eq) tag_integer_666 print_integer in4 exec_noop integer_rot integer_yank) integer_lt) boolean_dup_times exec_s_when_autoconstructing (integer_sub exec_yank in2 exec_k (boolean_yankdup boolean_pop) (exec_if (exec_y ()) ())) () ()) ())) ()) ()))))
Lexicase best errors: [0 1 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 102
Percent parens: 0.314
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction tagged_888} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_or} {:close 1, :instruction tag_integer_751} {:close 0, :instruction in3} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*range} {:close 0, :instruction in2} {:close 1, :instruction exec_when} {:close 1, :instruction integer_min} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_rot} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction in1} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_eq} {:close 0, :instruction tag_integer_666} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_yank} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y})
Zero cases best program: (exec_do*while (exec_shove (integer_min exec_eq integer_pop exec_yankdup tagged_888) exec_rot () (exec_y_when_autoconstructing (exec_do*times () boolean_dup_items print_boolean integer_div) boolean_eq boolean_or tag_integer_751) (in3 integer_lte exec_do*range (in2 exec_when () integer_min) integer_gte exec_rot () (integer_mod) (integer_shove exec_if (in2 exec_if (integer_swap integer_rot in4 exec_do*times (in1 integer_swap integer_min print_integer exec_swap (exec_flush boolean_xor integer_swap boolean_dup_items integer_rot exec_do*times (boolean_pop exec_swap (integer_add integer_yankdup exec_stackdepth) (exec_y_when_autoconstructing (integer_gte boolean_frominteger integer_eq) tag_integer_666 print_integer in4 exec_noop integer_rot integer_yank) integer_lt) boolean_dup_times exec_s_when_autoconstructing (integer_sub exec_yank in2 exec_k (boolean_yankdup boolean_pop) (exec_if (exec_y ()) ())) () ()) ())) ()) ()))))
Zero cases best errors: [0 1 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 102
Percent parens: 0.314
--- Lexicase Population Statistics ---
Count of elite individuals by case: (154 200 316 574 363 412 422 489 321 152)
Population mean number of elite cases: 3.40
Count of perfect (error zero) individuals by case: (154 200 316 574 363 412 422 489 321 152)
Population mean number of perfect (error zero) cases: 3.40
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction tagged_888} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_div} {:close 1, :instruction tag_integer_751} {:close 0, :instruction in3} {:close 0, :instruction exec_do*range} {:close 0, :instruction in2} {:close 1, :instruction exec_when} {:close 1, :instruction integer_min} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_if} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction in1} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_div} {:close 0, :instruction integer_add} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_eq} {:close 0, :instruction tag_integer_666} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y})
Best program: (exec_do*while (exec_shove (integer_min exec_eq integer_pop exec_yankdup tagged_888) exec_rot () (exec_yank exec_y_when_autoconstructing (exec_do*times () boolean_dup_items print_boolean integer_div) tag_integer_751) (in3 exec_do*range (in2 exec_when () integer_min) exec_rot () (exec_dup (integer_mod) integer_shove exec_if (exec_k_when_autoconstructing () () in2 exec_k (exec_if (integer_swap integer_rot in4 exec_do*times (in1 integer_swap integer_min print_integer exec_swap (exec_flush boolean_xor integer_swap boolean_dup_items integer_rot exec_do*times (boolean_pop integer_div integer_add exec_stackdepth) exec_y_when_autoconstructing (integer_gte boolean_empty integer_eq) tag_integer_666 in4 integer_rot exec_noop integer_rot integer_yank) (integer_lt) boolean_dup_times exec_s_when_autoconstructing (integer_sub in2 exec_rot () (exec_k (boolean_pop) (exec_if (exec_y ()) ())) ()) () ())) ()) ()) ()) ())))
Errors: [0 1 0 0 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 68
Size: 106
Percent parens: 0.358
--- Population Statistics ---
Average total errors in population: 6.597
Median total errors in population: 7
Error averages by case: (0.846 0.8 0.684 0.426 0.637 0.588 0.578 0.511 0.679 0.848)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 69.475
Average program size in population (points): 96.593
Average percent parens in population: 0.279
Minimum age in population: 13.0
Maximum age in population: 13.0
Average age in population: 13.0
Median age in population: 13.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.01
Error (vector) diversity:			 0.084
Behavioral diversity:				 0.288
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 6803199
--- Timings ---
Current time: 1559593780233 milliseconds
Total Time:          29.3 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        15.8 seconds, 53.9%
Fitness Testing:      8.4 seconds, 28.7%
Report:               5.0 seconds, 17.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 201
Test mean error for best: 0.20100
Test Case    0 | Error: 1
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 1
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 1
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 1
Test Case   51 | Error: 0
Test Case   52 | Error: 1
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 1
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 1
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 1
Test Case  203 | Error: 1
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 1
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 1
Test Case  213 | Error: 1
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 1
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 1
Test Case  227 | Error: 1
Test Case  228 | Error: 1
Test Case  229 | Error: 0
Test Case  230 | Error: 1
Test Case  231 | Error: 0
Test Case  232 | Error: 1
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 1
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 1
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 1
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 1
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 1
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 1
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 1
Test Case  276 | Error: 1
Test Case  277 | Error: 1
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 1
Test Case  289 | Error: 0
Test Case  290 | Error: 1
Test Case  291 | Error: 1
Test Case  292 | Error: 0
Test Case  293 | Error: 1
Test Case  294 | Error: 0
Test Case  295 | Error: 1
Test Case  296 | Error: 0
Test Case  297 | Error: 1
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 1
Test Case  314 | Error: 0
Test Case  315 | Error: 1
Test Case  316 | Error: 1
Test Case  317 | Error: 1
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 1
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 1
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 1
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 1
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 1
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 1
Test Case  356 | Error: 1
Test Case  357 | Error: 1
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 1
Test Case  364 | Error: 1
Test Case  365 | Error: 1
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 1
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 1
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 1
Test Case  396 | Error: 1
Test Case  397 | Error: 1
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 1
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 1
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 1
Test Case  415 | Error: 0
Test Case  416 | Error: 1
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 1
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 1
Test Case  429 | Error: 1
Test Case  430 | Error: 0
Test Case  431 | Error: 1
Test Case  432 | Error: 0
Test Case  433 | Error: 1
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 1
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 1
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 1
Test Case  448 | Error: 1
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 1
Test Case  456 | Error: 1
Test Case  457 | Error: 0
Test Case  458 | Error: 1
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 1
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 1
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 1
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 1
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 1
Test Case  481 | Error: 0
Test Case  482 | Error: 1
Test Case  483 | Error: 1
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 1
Test Case  489 | Error: 0
Test Case  490 | Error: 1
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 1
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 1
Test Case  519 | Error: 0
Test Case  520 | Error: 1
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 1
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 1
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 1
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 1
Test Case  541 | Error: 0
Test Case  542 | Error: 1
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 1
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 1
Test Case  553 | Error: 1
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 1
Test Case  560 | Error: 1
Test Case  561 | Error: 1
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 1
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 1
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 1
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 1
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 1
Test Case  605 | Error: 1
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 1
Test Case  609 | Error: 1
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 1
Test Case  619 | Error: 0
Test Case  620 | Error: 1
Test Case  621 | Error: 1
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 1
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 1
Test Case  635 | Error: 1
Test Case  636 | Error: 1
Test Case  637 | Error: 0
Test Case  638 | Error: 1
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 1
Test Case  651 | Error: 0
Test Case  652 | Error: 1
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 1
Test Case  659 | Error: 0
Test Case  660 | Error: 1
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 1
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 1
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 1
Test Case  688 | Error: 1
Test Case  689 | Error: 0
Test Case  690 | Error: 1
Test Case  691 | Error: 1
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 1
Test Case  695 | Error: 1
Test Case  696 | Error: 1
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 1
Test Case  701 | Error: 1
Test Case  702 | Error: 1
Test Case  703 | Error: 1
Test Case  704 | Error: 1
Test Case  705 | Error: 1
Test Case  706 | Error: 1
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 1
Test Case  710 | Error: 1
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 1
Test Case  714 | Error: 1
Test Case  715 | Error: 0
Test Case  716 | Error: 1
Test Case  717 | Error: 1
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 1
Test Case  721 | Error: 1
Test Case  722 | Error: 0
Test Case  723 | Error: 1
Test Case  724 | Error: 1
Test Case  725 | Error: 1
Test Case  726 | Error: 1
Test Case  727 | Error: 0
Test Case  728 | Error: 1
Test Case  729 | Error: 1
Test Case  730 | Error: 1
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 1
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 1
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 1
Test Case  753 | Error: 1
Test Case  754 | Error: 1
Test Case  755 | Error: 0
Test Case  756 | Error: 1
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 1
Test Case  761 | Error: 1
Test Case  762 | Error: 0
Test Case  763 | Error: 1
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 1
Test Case  774 | Error: 0
Test Case  775 | Error: 1
Test Case  776 | Error: 1
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 1
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 1
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 1
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 1
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 1
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 1
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 1
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 1
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 1
Test Case  826 | Error: 1
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 1
Test Case  833 | Error: 0
Test Case  834 | Error: 1
Test Case  835 | Error: 1
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 1
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 1
Test Case  845 | Error: 1
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 1
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 1
Test Case  856 | Error: 0
Test Case  857 | Error: 1
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 1
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 1
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 1
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 1
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 1
Test Case  884 | Error: 0
Test Case  885 | Error: 1
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 1
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 1
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 1
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 1
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 1
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 1
Test Case  920 | Error: 0
Test Case  921 | Error: 1
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 1
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 1
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 1
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 1
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 1
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 1
Test Case  963 | Error: 1
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 1
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 1
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 1
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 1
Test Case  984 | Error: 0
Test Case  985 | Error: 1
Test Case  986 | Error: 1
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 1
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -62                 | Program output: -62                
Correct output: -36                 | Program output: -36                
Correct output: -54                 | Program output: 36                 
Correct output: -38                 | Program output: -38                
Correct output: -70                 | Program output: -70                
Correct output: -16                 | Program output: -16                
Correct output: -60                 | Program output: -60                
Correct output: -88                 | Program output: -88                
Correct output: -13                 | Program output: 52                 
Correct output: -69                 | Program output: -69                
Correct output: -45                 | Program output: -45                
Correct output: 64                  | Program output: 64                 
Correct output: -6                  | Program output: -6                 
Correct output: -46                 | Program output: -46                
Correct output: -97                 | Program output: -97                
Correct output: 11                  | Program output: 11                 
Correct output: 13                  | Program output: 13                 
Correct output: 7                   | Program output: 26                 
Correct output: 27                  | Program output: 35                 
Correct output: 7                   | Program output: 33                 
Correct output: 9                   | Program output: 9                  
Correct output: 86                  | Program output: 86                 
Correct output: 11                  | Program output: 26                 
Correct output: 19                  | Program output: 19                 
Correct output: 12                  | Program output: 12                 
Correct output: 75                  | Program output: 75                 
Correct output: 0                   | Program output: 31                 
Correct output: 55                  | Program output: 55                 
Correct output: 0                   | Program output: 2                  
Correct output: 42                  | Program output: 42                 
Correct output: 5                   | Program output: 5                  
Correct output: 10                  | Program output: 10                 
Correct output: 13                  | Program output: 13                 
Correct output: 38                  | Program output: 39                 
Correct output: 22                  | Program output: 22                 
Correct output: -69                 | Program output: -69                
Correct output: -7                  | Program output: -7                 
Correct output: -62                 | Program output: -62                
Correct output: -84                 | Program output: -52                
Correct output: -85                 | Program output: -85                
Correct output: -45                 | Program output: -45                
Correct output: -96                 | Program output: -96                
Correct output: -45                 | Program output: -26                
Correct output: -70                 | Program output: -70                
Correct output: -97                 | Program output: -63                
Correct output: -95                 | Program output: -32                
Correct output: -87                 | Program output: -68                
Correct output: 28                  | Program output: 28                 
Correct output: -11                 | Program output: -11                
Correct output: -62                 | Program output: -21                
Correct output: -80                 | Program output: -55                
Correct output: -71                 | Program output: -71                
Correct output: -67                 | Program output: -67                
Correct output: -96                 | Program output: -96                
Correct output: -4                  | Program output: 13                 
Correct output: -79                 | Program output: -79                
Correct output: -42                 | Program output: 12                 
Correct output: -35                 | Program output: -35                
Correct output: 10                  | Program output: 10                 
Correct output: -47                 | Program output: -47                
Correct output: -61                 | Program output: -61                
Correct output: -73                 | Program output: -73                
Correct output: -50                 | Program output: -50                
Correct output: 16                  | Program output: 16                 
Correct output: -99                 | Program output: -86                
Correct output: -73                 | Program output: 37                 
Correct output: -61                 | Program output: -61                
Correct output: -94                 | Program output: -94                
Correct output: -32                 | Program output: -32                
Correct output: -73                 | Program output: -73                
Correct output: -78                 | Program output: -78                
Correct output: -28                 | Program output: -28                
Correct output: -78                 | Program output: -67                
Correct output: 14                  | Program output: 67                 
Correct output: 3                   | Program output: 3                  
Correct output: -97                 | Program output: -97                
Correct output: 36                  | Program output: 36                 
Correct output: -12                 | Program output: 16                 
Correct output: -90                 | Program output: -90                
Correct output: -96                 | Program output: -29                
Correct output: -53                 | Program output: -53                
Correct output: -73                 | Program output: -73                
Correct output: -78                 | Program output: -78                
Correct output: 35                  | Program output: 35                 
Correct output: -92                 | Program output: -92                
Correct output: -56                 | Program output: -56                
Correct output: -61                 | Program output: -61                
Correct output: -99                 | Program output: -99                
Correct output: -98                 | Program output: -98                
Correct output: -96                 | Program output: -96                
Correct output: -96                 | Program output: -96                
Correct output: -97                 | Program output: -97                
Correct output: -40                 | Program output: -40                
Correct output: -94                 | Program output: -94                
Correct output: -99                 | Program output: -99                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 2, :instruction integer_inc} {:close 0, :instruction integer_dup} {:close 1, :instruction tagged_888} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_do*times} {:close 1, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 1, :instruction tag_integer_751} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*range} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_when} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction exec_if} {:close 0, :instruction integer_rot} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction tag_integer_666} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_gte} {:close 3, :instruction integer_fromboolean} {:close 0, :instruction in2} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction integer_shove})
Lexicase best program: (exec_pop (exec_do*while (integer_min exec_do*count (integer_pop exec_yankdup integer_inc)) integer_dup tagged_888) exec_yank boolean_or exec_y_when_autoconstructing (exec_do*times () integer_div) integer_eq tag_integer_751 integer_mult integer_shove integer_lte exec_do*range (in2 in3 integer_mult) boolean_or exec_when () integer_mod integer_shove exec_if (in2 exec_k (exec_if (integer_rot in4 integer_min in1 integer_swap integer_min print_integer exec_flush boolean_dup_items exec_do*count (integer_rot exec_stackdepth) boolean_flush) (integer_dup_items integer_gte boolean_empty boolean_yank integer_eq) exec_pop (integer_lt tag_integer_666 integer_rot integer_lt) in3 boolean_dup_times integer_empty integer_sub integer_gte integer_fromboolean) ()) (in2 exec_rot () (exec_k (boolean_pop) (exec_y_when_autoconstructing (exec_y (integer_shove)))) ()))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 90
Percent parens: 0.256
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 2, :instruction integer_inc} {:close 0, :instruction integer_dup} {:close 1, :instruction tagged_888} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_do*times} {:close 1, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 1, :instruction tag_integer_751} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*range} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_when} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction exec_if} {:close 0, :instruction integer_rot} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction tag_integer_666} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_gte} {:close 3, :instruction integer_fromboolean} {:close 0, :instruction in2} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction integer_shove})
Zero cases best program: (exec_pop (exec_do*while (integer_min exec_do*count (integer_pop exec_yankdup integer_inc)) integer_dup tagged_888) exec_yank boolean_or exec_y_when_autoconstructing (exec_do*times () integer_div) integer_eq tag_integer_751 integer_mult integer_shove integer_lte exec_do*range (in2 in3 integer_mult) boolean_or exec_when () integer_mod integer_shove exec_if (in2 exec_k (exec_if (integer_rot in4 integer_min in1 integer_swap integer_min print_integer exec_flush boolean_dup_items exec_do*count (integer_rot exec_stackdepth) boolean_flush) (integer_dup_items integer_gte boolean_empty boolean_yank integer_eq) exec_pop (integer_lt tag_integer_666 integer_rot integer_lt) in3 boolean_dup_times integer_empty integer_sub integer_gte integer_fromboolean) ()) (in2 exec_rot () (exec_k (boolean_pop) (exec_y_when_autoconstructing (exec_y (integer_shove)))) ()))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 90
Percent parens: 0.256
--- Lexicase Population Statistics ---
Count of elite individuals by case: (229 445 421 281 503 419 216 497 251 233)
Population mean number of elite cases: 3.49
Count of perfect (error zero) individuals by case: (229 445 421 281 503 419 216 497 251 233)
Population mean number of perfect (error zero) cases: 3.49
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 2, :instruction integer_inc} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_div} {:close 1, :instruction tag_integer_751} {:close 0, :instruction in3} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*range} {:close 0, :instruction in2} {:close 1, :instruction exec_when} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction integer_rot} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_eq} {:close 0, :instruction print_newline} {:close 0, :instruction exec_pop} {:close 0, :instruction tag_integer_666} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_or} {:close 3, :instruction integer_fromboolean} {:close 0, :instruction in2} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_stackdepth})
Best program: (exec_do*while (exec_shove (integer_min exec_do*count (integer_pop exec_yankdup integer_inc)) integer_dup exec_yank exec_y_when_autoconstructing (exec_do*times () boolean_dup_items print_boolean integer_div) tag_integer_751) in3 integer_mult integer_shove integer_mod exec_do*range (in2 exec_when () integer_stackdepth print_boolean integer_mod) integer_shove integer_gt exec_if (in2 exec_k (integer_rot in4 integer_min in1 integer_yank integer_swap integer_min print_integer exec_flush integer_swap boolean_dup_items integer_rot integer_rot exec_stackdepth) (boolean_flush) integer_dup_items boolean_empty boolean_yank integer_eq) (print_newline exec_pop (tag_integer_666 integer_rot integer_lt) boolean_dup_times integer_empty integer_sub integer_gte boolean_or integer_fromboolean) in2 exec_rot () (integer_fromboolean boolean_yankdup boolean_pop) (exec_y (boolean_stackdepth)))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 67
Size: 84
Percent parens: 0.202
--- Population Statistics ---
Average total errors in population: 6.505
Median total errors in population: 7
Error averages by case: (0.771 0.555 0.579 0.719 0.497 0.581 0.784 0.503 0.749 0.767)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 68.683
Average program size in population (points): 94.394
Average percent parens in population: 0.270
Minimum age in population: 14.0
Maximum age in population: 14.0
Average age in population: 14.0
Median age in population: 14.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.011
Error (vector) diversity:			 0.07
Behavioral diversity:				 0.294
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 7247757
--- Timings ---
Current time: 1559593782208 milliseconds
Total Time:          31.3 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        17.0 seconds, 54.2%
Fitness Testing:      8.9 seconds, 28.3%
Report:               5.4 seconds, 17.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 14
Successful program: (exec_do*while (exec_shove (integer_min exec_do*count (integer_pop exec_yankdup integer_inc)) integer_dup exec_yank exec_y_when_autoconstructing (exec_do*times () boolean_dup_items print_boolean integer_div) tag_integer_751) in3 integer_mult integer_shove integer_mod exec_do*range (in2 exec_when () integer_stackdepth print_boolean integer_mod) integer_shove integer_gt exec_if (in2 exec_k (integer_rot in4 integer_min in1 integer_yank integer_swap integer_min print_integer exec_flush integer_swap boolean_dup_items integer_rot integer_rot exec_stackdepth) (boolean_flush) integer_dup_items boolean_empty boolean_yank integer_eq) (print_newline exec_pop (tag_integer_666 integer_rot integer_lt) boolean_dup_times integer_empty integer_sub integer_gte boolean_or integer_fromboolean) in2 exec_rot () (integer_fromboolean boolean_yankdup boolean_pop) (exec_y (boolean_stackdepth)))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 84


Auto-simplifying with starting size: 84
step: 0
program: (exec_do*while (exec_shove (integer_min exec_do*count (integer_pop exec_yankdup integer_inc)) integer_dup exec_yank exec_y_when_autoconstructing (exec_do*times () boolean_dup_items print_boolean integer_div) tag_integer_751) in3 integer_mult integer_shove integer_mod exec_do*range (in2 exec_when () integer_stackdepth print_boolean integer_mod) integer_shove integer_gt exec_if (in2 exec_k (integer_rot in4 integer_min in1 integer_yank integer_swap integer_min print_integer exec_flush integer_swap boolean_dup_items integer_rot integer_rot exec_stackdepth) (boolean_flush) integer_dup_items boolean_empty boolean_yank integer_eq) (print_newline exec_pop (tag_integer_666 integer_rot integer_lt) boolean_dup_times integer_empty integer_sub integer_gte boolean_or integer_fromboolean) in2 exec_rot () (integer_fromboolean boolean_yankdup boolean_pop) (exec_y (boolean_stackdepth)))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 84

step: 500
program: (exec_do*while (exec_shove (integer_min exec_do*count (integer_pop exec_yankdup integer_inc)) integer_dup exec_yank exec_y_when_autoconstructing (exec_do*times () boolean_dup_items print_boolean integer_div) tag_integer_751) in3 integer_mult integer_shove integer_mod exec_do*range (in2 exec_when () integer_stackdepth print_boolean integer_mod) integer_shove integer_gt exec_if (in2 exec_k (integer_rot in4 integer_min in1 integer_yank integer_swap integer_min print_integer exec_flush integer_swap boolean_dup_items integer_rot integer_rot exec_stackdepth) (boolean_flush) integer_dup_items boolean_empty boolean_yank integer_eq) (print_newline exec_pop (tag_integer_666 integer_rot integer_lt) boolean_dup_times integer_empty integer_sub integer_gte boolean_or integer_fromboolean) in2 exec_rot () (integer_fromboolean boolean_yankdup boolean_pop) (exec_y (boolean_stackdepth)))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 84

step: 1000
program: (exec_do*while (exec_shove (integer_min exec_do*count (integer_pop exec_yankdup integer_inc)) integer_dup exec_yank exec_y_when_autoconstructing (exec_do*times () boolean_dup_items print_boolean integer_div) tag_integer_751) in3 integer_mult integer_shove integer_mod exec_do*range (in2 exec_when () integer_stackdepth print_boolean integer_mod) integer_shove integer_gt exec_if (in2 exec_k (integer_rot in4 integer_min in1 integer_yank integer_swap integer_min print_integer exec_flush integer_swap boolean_dup_items integer_rot integer_rot exec_stackdepth) (boolean_flush) integer_dup_items boolean_empty boolean_yank integer_eq) (print_newline exec_pop (tag_integer_666 integer_rot integer_lt) boolean_dup_times integer_empty integer_sub integer_gte boolean_or integer_fromboolean) in2 exec_rot () (integer_fromboolean boolean_yankdup boolean_pop) (exec_y (boolean_stackdepth)))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 84

step: 1500
program: (exec_do*while (exec_shove (integer_min exec_do*count (integer_pop exec_yankdup integer_inc)) integer_dup exec_yank exec_y_when_autoconstructing (exec_do*times () boolean_dup_items print_boolean integer_div) tag_integer_751) in3 integer_mult integer_shove integer_mod exec_do*range (in2 exec_when () integer_stackdepth print_boolean integer_mod) integer_shove integer_gt exec_if (in2 exec_k (integer_rot in4 integer_min in1 integer_yank integer_swap integer_min print_integer exec_flush integer_swap boolean_dup_items integer_rot integer_rot exec_stackdepth) (boolean_flush) integer_dup_items boolean_empty boolean_yank integer_eq) (print_newline exec_pop (tag_integer_666 integer_rot integer_lt) boolean_dup_times integer_empty integer_sub integer_gte boolean_or integer_fromboolean) in2 exec_rot () (integer_fromboolean boolean_yankdup boolean_pop) (exec_y (boolean_stackdepth)))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 84

step: 2000
program: (exec_do*while (exec_shove (integer_min exec_do*count (integer_pop exec_yankdup integer_inc)) integer_dup exec_yank exec_y_when_autoconstructing (exec_do*times () boolean_dup_items print_boolean integer_div) tag_integer_751) in3 integer_mult integer_shove integer_mod exec_do*range (in2 exec_when () integer_stackdepth print_boolean integer_mod) integer_shove integer_gt exec_if (in2 exec_k (integer_rot in4 integer_min in1 integer_yank integer_swap integer_min print_integer exec_flush integer_swap boolean_dup_items integer_rot integer_rot exec_stackdepth) (boolean_flush) integer_dup_items boolean_empty boolean_yank integer_eq) (print_newline exec_pop (tag_integer_666 integer_rot integer_lt) boolean_dup_times integer_empty integer_sub integer_gte boolean_or integer_fromboolean) in2 exec_rot () (integer_fromboolean boolean_yankdup boolean_pop) (exec_y (boolean_stackdepth)))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 84

step: 2500
program: (exec_do*while (exec_shove (integer_min exec_do*count (integer_pop exec_yankdup integer_inc)) integer_dup exec_yank exec_y_when_autoconstructing (exec_do*times () boolean_dup_items print_boolean integer_div) tag_integer_751) in3 integer_mult integer_shove integer_mod exec_do*range (in2 exec_when () integer_stackdepth print_boolean integer_mod) integer_shove integer_gt exec_if (in2 exec_k (integer_rot in4 integer_min in1 integer_yank integer_swap integer_min print_integer exec_flush integer_swap boolean_dup_items integer_rot integer_rot exec_stackdepth) (boolean_flush) integer_dup_items boolean_empty boolean_yank integer_eq) (print_newline exec_pop (tag_integer_666 integer_rot integer_lt) boolean_dup_times integer_empty integer_sub integer_gte boolean_or integer_fromboolean) in2 exec_rot () (integer_fromboolean boolean_yankdup boolean_pop) (exec_y (boolean_stackdepth)))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 84

step: 3000
program: (exec_do*while (exec_shove (integer_min exec_do*count (integer_pop exec_yankdup integer_inc)) integer_dup exec_yank exec_y_when_autoconstructing (exec_do*times () boolean_dup_items print_boolean integer_div) tag_integer_751) in3 integer_mult integer_shove integer_mod exec_do*range (in2 exec_when () integer_stackdepth print_boolean integer_mod) integer_shove integer_gt exec_if (in2 exec_k (integer_rot in4 integer_min in1 integer_yank integer_swap integer_min print_integer exec_flush integer_swap boolean_dup_items integer_rot integer_rot exec_stackdepth) (boolean_flush) integer_dup_items boolean_empty boolean_yank integer_eq) (print_newline exec_pop (tag_integer_666 integer_rot integer_lt) boolean_dup_times integer_empty integer_sub integer_gte boolean_or integer_fromboolean) in2 exec_rot () (integer_fromboolean boolean_yankdup boolean_pop) (exec_y (boolean_stackdepth)))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 84

step: 3500
program: (exec_do*while (exec_shove (integer_min exec_do*count (integer_pop exec_yankdup integer_inc)) integer_dup exec_yank exec_y_when_autoconstructing (exec_do*times () boolean_dup_items print_boolean integer_div) tag_integer_751) in3 integer_mult integer_shove integer_mod exec_do*range (in2 exec_when () integer_stackdepth print_boolean integer_mod) integer_shove integer_gt exec_if (in2 exec_k (integer_rot in4 integer_min in1 integer_yank integer_swap integer_min print_integer exec_flush integer_swap boolean_dup_items integer_rot integer_rot exec_stackdepth) (boolean_flush) integer_dup_items boolean_empty boolean_yank integer_eq) (print_newline exec_pop (tag_integer_666 integer_rot integer_lt) boolean_dup_times integer_empty integer_sub integer_gte boolean_or integer_fromboolean) in2 exec_rot () (integer_fromboolean boolean_yankdup boolean_pop) (exec_y (boolean_stackdepth)))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 84

step: 4000
program: (exec_do*while (exec_shove (integer_min exec_do*count (integer_pop exec_yankdup integer_inc)) integer_dup exec_yank exec_y_when_autoconstructing (exec_do*times () boolean_dup_items print_boolean integer_div) tag_integer_751) in3 integer_mult integer_shove integer_mod exec_do*range (in2 exec_when () integer_stackdepth print_boolean integer_mod) integer_shove integer_gt exec_if (in2 exec_k (integer_rot in4 integer_min in1 integer_yank integer_swap integer_min print_integer exec_flush integer_swap boolean_dup_items integer_rot integer_rot exec_stackdepth) (boolean_flush) integer_dup_items boolean_empty boolean_yank integer_eq) (print_newline exec_pop (tag_integer_666 integer_rot integer_lt) boolean_dup_times integer_empty integer_sub integer_gte boolean_or integer_fromboolean) in2 exec_rot () (integer_fromboolean boolean_yankdup boolean_pop) (exec_y (boolean_stackdepth)))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 84

step: 4500
program: (exec_do*while (exec_shove (integer_min exec_do*count (integer_pop exec_yankdup integer_inc)) integer_dup exec_yank exec_y_when_autoconstructing (exec_do*times () boolean_dup_items print_boolean integer_div) tag_integer_751) in3 integer_mult integer_shove integer_mod exec_do*range (in2 exec_when () integer_stackdepth print_boolean integer_mod) integer_shove integer_gt exec_if (in2 exec_k (integer_rot in4 integer_min in1 integer_yank integer_swap integer_min print_integer exec_flush integer_swap boolean_dup_items integer_rot integer_rot exec_stackdepth) (boolean_flush) integer_dup_items boolean_empty boolean_yank integer_eq) (print_newline exec_pop (tag_integer_666 integer_rot integer_lt) boolean_dup_times integer_empty integer_sub integer_gte boolean_or integer_fromboolean) in2 exec_rot () (integer_fromboolean boolean_yankdup boolean_pop) (exec_y (boolean_stackdepth)))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 84

step: 5000
program: (exec_do*while (exec_shove (integer_min exec_do*count (integer_pop exec_yankdup integer_inc)) integer_dup exec_yank exec_y_when_autoconstructing (exec_do*times () boolean_dup_items print_boolean integer_div) tag_integer_751) in3 integer_mult integer_shove integer_mod exec_do*range (in2 exec_when () integer_stackdepth print_boolean integer_mod) integer_shove integer_gt exec_if (in2 exec_k (integer_rot in4 integer_min in1 integer_yank integer_swap integer_min print_integer exec_flush integer_swap boolean_dup_items integer_rot integer_rot exec_stackdepth) (boolean_flush) integer_dup_items boolean_empty boolean_yank integer_eq) (print_newline exec_pop (tag_integer_666 integer_rot integer_lt) boolean_dup_times integer_empty integer_sub integer_gte boolean_or integer_fromboolean) in2 exec_rot () (integer_fromboolean boolean_yankdup boolean_pop) (exec_y (boolean_stackdepth)))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 84

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 201
Test mean error for best: 0.20100
Test Case    0 | Error: 1
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 1
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 1
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 1
Test Case   51 | Error: 0
Test Case   52 | Error: 1
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 1
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 1
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 1
Test Case  203 | Error: 1
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 1
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 1
Test Case  213 | Error: 1
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 1
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 1
Test Case  227 | Error: 1
Test Case  228 | Error: 1
Test Case  229 | Error: 0
Test Case  230 | Error: 1
Test Case  231 | Error: 0
Test Case  232 | Error: 1
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 1
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 1
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 1
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 1
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 1
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 1
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 1
Test Case  276 | Error: 1
Test Case  277 | Error: 1
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 1
Test Case  289 | Error: 0
Test Case  290 | Error: 1
Test Case  291 | Error: 1
Test Case  292 | Error: 0
Test Case  293 | Error: 1
Test Case  294 | Error: 0
Test Case  295 | Error: 1
Test Case  296 | Error: 0
Test Case  297 | Error: 1
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 1
Test Case  314 | Error: 0
Test Case  315 | Error: 1
Test Case  316 | Error: 1
Test Case  317 | Error: 1
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 1
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 1
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 1
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 1
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 1
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 1
Test Case  356 | Error: 1
Test Case  357 | Error: 1
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 1
Test Case  364 | Error: 1
Test Case  365 | Error: 1
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 1
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 1
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 1
Test Case  396 | Error: 1
Test Case  397 | Error: 1
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 1
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 1
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 1
Test Case  415 | Error: 0
Test Case  416 | Error: 1
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 1
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 1
Test Case  429 | Error: 1
Test Case  430 | Error: 0
Test Case  431 | Error: 1
Test Case  432 | Error: 0
Test Case  433 | Error: 1
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 1
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 1
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 1
Test Case  448 | Error: 1
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 1
Test Case  456 | Error: 1
Test Case  457 | Error: 0
Test Case  458 | Error: 1
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 1
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 1
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 1
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 1
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 1
Test Case  481 | Error: 0
Test Case  482 | Error: 1
Test Case  483 | Error: 1
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 1
Test Case  489 | Error: 0
Test Case  490 | Error: 1
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 1
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 1
Test Case  519 | Error: 0
Test Case  520 | Error: 1
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 1
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 1
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 1
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 1
Test Case  541 | Error: 0
Test Case  542 | Error: 1
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 1
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 1
Test Case  553 | Error: 1
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 1
Test Case  560 | Error: 1
Test Case  561 | Error: 1
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 1
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 1
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 1
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 1
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 1
Test Case  605 | Error: 1
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 1
Test Case  609 | Error: 1
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 1
Test Case  619 | Error: 0
Test Case  620 | Error: 1
Test Case  621 | Error: 1
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 1
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 1
Test Case  635 | Error: 1
Test Case  636 | Error: 1
Test Case  637 | Error: 0
Test Case  638 | Error: 1
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 1
Test Case  651 | Error: 0
Test Case  652 | Error: 1
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 1
Test Case  659 | Error: 0
Test Case  660 | Error: 1
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 1
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 1
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 1
Test Case  688 | Error: 1
Test Case  689 | Error: 0
Test Case  690 | Error: 1
Test Case  691 | Error: 1
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 1
Test Case  695 | Error: 1
Test Case  696 | Error: 1
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 1
Test Case  701 | Error: 1
Test Case  702 | Error: 1
Test Case  703 | Error: 1
Test Case  704 | Error: 1
Test Case  705 | Error: 1
Test Case  706 | Error: 1
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 1
Test Case  710 | Error: 1
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 1
Test Case  714 | Error: 1
Test Case  715 | Error: 0
Test Case  716 | Error: 1
Test Case  717 | Error: 1
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 1
Test Case  721 | Error: 1
Test Case  722 | Error: 0
Test Case  723 | Error: 1
Test Case  724 | Error: 1
Test Case  725 | Error: 1
Test Case  726 | Error: 1
Test Case  727 | Error: 0
Test Case  728 | Error: 1
Test Case  729 | Error: 1
Test Case  730 | Error: 1
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 1
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 1
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 1
Test Case  753 | Error: 1
Test Case  754 | Error: 1
Test Case  755 | Error: 0
Test Case  756 | Error: 1
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 1
Test Case  761 | Error: 1
Test Case  762 | Error: 0
Test Case  763 | Error: 1
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 1
Test Case  774 | Error: 0
Test Case  775 | Error: 1
Test Case  776 | Error: 1
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 1
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 1
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 1
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 1
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 1
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 1
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 1
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 1
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 1
Test Case  826 | Error: 1
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 1
Test Case  833 | Error: 0
Test Case  834 | Error: 1
Test Case  835 | Error: 1
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 1
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 1
Test Case  845 | Error: 1
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 1
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 1
Test Case  856 | Error: 0
Test Case  857 | Error: 1
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 1
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 1
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 1
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 1
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 1
Test Case  884 | Error: 0
Test Case  885 | Error: 1
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 1
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 1
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 1
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 1
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 1
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 1
Test Case  920 | Error: 0
Test Case  921 | Error: 1
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 1
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 1
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 1
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 1
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 1
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 1
Test Case  963 | Error: 1
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 1
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 1
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 1
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 1
Test Case  984 | Error: 0
Test Case  985 | Error: 1
Test Case  986 | Error: 1
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 1
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -62                 | Program output: -62                
Correct output: -36                 | Program output: -36                
Correct output: -54                 | Program output: 36                 
Correct output: -38                 | Program output: -38                
Correct output: -70                 | Program output: -70                
Correct output: -16                 | Program output: -16                
Correct output: -60                 | Program output: -60                
Correct output: -88                 | Program output: -88                
Correct output: -13                 | Program output: 52                 
Correct output: -69                 | Program output: -69                
Correct output: -45                 | Program output: -45                
Correct output: 64                  | Program output: 64                 
Correct output: -6                  | Program output: -6                 
Correct output: -46                 | Program output: -46                
Correct output: -97                 | Program output: -97                
Correct output: 11                  | Program output: 11                 
Correct output: 13                  | Program output: 13                 
Correct output: 7                   | Program output: 26                 
Correct output: 27                  | Program output: 35                 
Correct output: 7                   | Program output: 33                 
Correct output: 9                   | Program output: 9                  
Correct output: 86                  | Program output: 86                 
Correct output: 11                  | Program output: 26                 
Correct output: 19                  | Program output: 19                 
Correct output: 12                  | Program output: 12                 
Correct output: 75                  | Program output: 75                 
Correct output: 0                   | Program output: 31                 
Correct output: 55                  | Program output: 55                 
Correct output: 0                   | Program output: 2                  
Correct output: 42                  | Program output: 42                 
Correct output: 5                   | Program output: 5                  
Correct output: 10                  | Program output: 10                 
Correct output: 13                  | Program output: 13                 
Correct output: 38                  | Program output: 39                 
Correct output: 22                  | Program output: 22                 
Correct output: -69                 | Program output: -69                
Correct output: -7                  | Program output: -7                 
Correct output: -62                 | Program output: -62                
Correct output: -84                 | Program output: -52                
Correct output: -85                 | Program output: -85                
Correct output: -45                 | Program output: -45                
Correct output: -96                 | Program output: -96                
Correct output: -45                 | Program output: -26                
Correct output: -70                 | Program output: -70                
Correct output: -97                 | Program output: -63                
Correct output: -95                 | Program output: -32                
Correct output: -87                 | Program output: -68                
Correct output: 28                  | Program output: 28                 
Correct output: -11                 | Program output: -11                
Correct output: -62                 | Program output: -21                
Correct output: -80                 | Program output: -55                
Correct output: -71                 | Program output: -71                
Correct output: -67                 | Program output: -67                
Correct output: -96                 | Program output: -96                
Correct output: -4                  | Program output: 13                 
Correct output: -79                 | Program output: -79                
Correct output: -42                 | Program output: 12                 
Correct output: -35                 | Program output: -35                
Correct output: 10                  | Program output: 10                 
Correct output: -47                 | Program output: -47                
Correct output: -61                 | Program output: -61                
Correct output: -73                 | Program output: -73                
Correct output: -50                 | Program output: -50                
Correct output: 16                  | Program output: 16                 
Correct output: -99                 | Program output: -86                
Correct output: -73                 | Program output: 37                 
Correct output: -61                 | Program output: -61                
Correct output: -94                 | Program output: -94                
Correct output: -32                 | Program output: -32                
Correct output: -73                 | Program output: -73                
Correct output: -78                 | Program output: -78                
Correct output: -28                 | Program output: -28                
Correct output: -78                 | Program output: -67                
Correct output: 14                  | Program output: 67                 
Correct output: 3                   | Program output: 3                  
Correct output: -97                 | Program output: -97                
Correct output: 36                  | Program output: 36                 
Correct output: -12                 | Program output: 16                 
Correct output: -90                 | Program output: -90                
Correct output: -96                 | Program output: -29                
Correct output: -53                 | Program output: -53                
Correct output: -73                 | Program output: -73                
Correct output: -78                 | Program output: -78                
Correct output: 35                  | Program output: 35                 
Correct output: -92                 | Program output: -92                
Correct output: -56                 | Program output: -56                
Correct output: -61                 | Program output: -61                
Correct output: -99                 | Program output: -99                
Correct output: -98                 | Program output: -98                
Correct output: -96                 | Program output: -96                
Correct output: -96                 | Program output: -96                
Correct output: -97                 | Program output: -97                
Correct output: -40                 | Program output: -40                
Correct output: -94                 | Program output: -94                
Correct output: -99                 | Program output: -99                
;;******************************
