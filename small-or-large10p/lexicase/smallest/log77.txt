Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 3000 :genetic-operator-probabilities {:uniform-addition-and-deletion,1.0} :uniform-addition-and-deletion-rate 0.09
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:uniform-addition-and-deletion 1.0}
max-error = 1
max-generations = 3000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-83 -83 -83 -46] -83] [[4 4 34 4] 4] [[93 93 93 -50] -50] [[-12 -12 -12 95] -12] [[-41 -41 -41 54] -41] [[-94 -94 -94 -55] -94] [[-90 -90 7 -90] -90] [[33 33 33 33] 33] [[43 -77 43 43] -77] [[11 11 11 -60] -60] [(61 61 61 61) 61] [(68 68 68 68) 68] [(64 64 64 64) 64] [(79 79 79 79) 79] [(49 49 49 49) 49] [(76 58 88 18) 18] [(97 85 40 25) 25] [(6 59 53 25) 6] [(41 15 17 9) 9] [(68 26 45 80) 26] [(54 4 33 34) 4] [(14 71 16 33) 14] [(69 59 1 30) 1] [(54 92 87 69) 54] [(73 77 50 83) 50] [(60 45 90 0) 0] [(88 18 59 25) 18] [(87 24 84 1) 1] [(75 54 39 55) 39] [(11 40 65 16) 11] [(97 57 44 3) 3] [(55 95 55 98) 55] [(12 5 78 76) 5] [(68 10 90 80) 10] [(0 1 77 32) 0] [(24 -97 87 -6) -97] [(77 -17 56 12) -17] [(73 -49 -18 -36) -49] [(-90 -100 93 -29) -100] [(-28 53 -39 15) -39] [(-95 -17 81 -35) -95] [(-61 56 48 -16) -61] [(-6 -24 -65 -59) -65] [(-8 39 -31 95) -31] [(-92 -63 -39 45) -92] [(19 52 78 19) 19] [(2 -77 76 -50) -77] [(-89 66 60 21) -89] [(76 -11 -4 -87) -87] [(50 35 -25 17) -25] [(-33 99 -67 -3) -67] [(-71 -66 -32 16) -71] [(-5 28 23 3) -5] [(50 -20 -66 -95) -95] [(30 -76 -43 -49) -76] [(24 84 -60 -54) -60] [(-86 -57 38 37) -86] [(-97 -50 99 -41) -97] [(-6 -39 49 93) -39] [(37 21 -58 -72) -72] [(39 -19 78 30) -19] [(-42 74 -21 98) -42] [(0 -74 -75 94) -75] [(65 -4 -70 33) -70] [(54 -11 -92 -59) -92] [(42 62 24 79) 24] [(-100 51 23 -97) -100] [(53 26 -40 45) -40] [(-60 3 -26 31) -60] [(26 -64 20 48) -64] [(60 81 50 2) 2] [(38 23 -42 -76) -76] [(-73 -12 82 8) -73] [(-100 -91 64 -60) -100] [(-54 29 66 66) -54] [(-56 -1 48 -66) -66] [(-71 -15 40 -79) -79] [(-21 -94 33 56) -94] [(-95 -74 73 51) -95] [(81 -81 -11 48) -81] [(-99 79 58 -77) -99] [(12 10 -22 -47) -47] [(-98 -17 19 -21) -98] [(99 -44 23 -44) -44] [(71 48 100 53) 48] [(64 83 -85 -58) -85] [(12 -3 -26 -60) -60] [(91 -52 83 -54) -54] [(-50 -96 73 -8) -96] [(45 -26 -75 -5) -75] [(56 -12 -91 51) -91] [(72 -65 -19 78) -65] [(-14 -64 -33 65) -64] [(83 90 84 33) 33] [(47 -67 -100 13) -100])
uniform-addition-and-deletion-rate = 0.09
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[-83 -83 -83 -46] -83]
Train Case:   6 | Input/Output: [[4 4 34 4] 4]
Train Case:   7 | Input/Output: [[93 93 93 -50] -50]
Train Case:   8 | Input/Output: [[-12 -12 -12 95] -12]
Train Case:   9 | Input/Output: [[-41 -41 -41 54] -41]
Train Case:  10 | Input/Output: [[-94 -94 -94 -55] -94]
Train Case:  11 | Input/Output: [[-90 -90 7 -90] -90]
Train Case:  12 | Input/Output: [[33 33 33 33] 33]
Train Case:  13 | Input/Output: [[43 -77 43 43] -77]
Train Case:  14 | Input/Output: [[11 11 11 -60] -60]
Train Case:  15 | Input/Output: [(61 61 61 61) 61]
Train Case:  16 | Input/Output: [(68 68 68 68) 68]
Train Case:  17 | Input/Output: [(64 64 64 64) 64]
Train Case:  18 | Input/Output: [(79 79 79 79) 79]
Train Case:  19 | Input/Output: [(49 49 49 49) 49]
Train Case:  20 | Input/Output: [(76 58 88 18) 18]
Train Case:  21 | Input/Output: [(97 85 40 25) 25]
Train Case:  22 | Input/Output: [(6 59 53 25) 6]
Train Case:  23 | Input/Output: [(41 15 17 9) 9]
Train Case:  24 | Input/Output: [(68 26 45 80) 26]
Train Case:  25 | Input/Output: [(54 4 33 34) 4]
Train Case:  26 | Input/Output: [(14 71 16 33) 14]
Train Case:  27 | Input/Output: [(69 59 1 30) 1]
Train Case:  28 | Input/Output: [(54 92 87 69) 54]
Train Case:  29 | Input/Output: [(73 77 50 83) 50]
Train Case:  30 | Input/Output: [(60 45 90 0) 0]
Train Case:  31 | Input/Output: [(88 18 59 25) 18]
Train Case:  32 | Input/Output: [(87 24 84 1) 1]
Train Case:  33 | Input/Output: [(75 54 39 55) 39]
Train Case:  34 | Input/Output: [(11 40 65 16) 11]
Train Case:  35 | Input/Output: [(97 57 44 3) 3]
Train Case:  36 | Input/Output: [(55 95 55 98) 55]
Train Case:  37 | Input/Output: [(12 5 78 76) 5]
Train Case:  38 | Input/Output: [(68 10 90 80) 10]
Train Case:  39 | Input/Output: [(0 1 77 32) 0]
Train Case:  40 | Input/Output: [(24 -97 87 -6) -97]
Train Case:  41 | Input/Output: [(77 -17 56 12) -17]
Train Case:  42 | Input/Output: [(73 -49 -18 -36) -49]
Train Case:  43 | Input/Output: [(-90 -100 93 -29) -100]
Train Case:  44 | Input/Output: [(-28 53 -39 15) -39]
Train Case:  45 | Input/Output: [(-95 -17 81 -35) -95]
Train Case:  46 | Input/Output: [(-61 56 48 -16) -61]
Train Case:  47 | Input/Output: [(-6 -24 -65 -59) -65]
Train Case:  48 | Input/Output: [(-8 39 -31 95) -31]
Train Case:  49 | Input/Output: [(-92 -63 -39 45) -92]
Train Case:  50 | Input/Output: [(19 52 78 19) 19]
Train Case:  51 | Input/Output: [(2 -77 76 -50) -77]
Train Case:  52 | Input/Output: [(-89 66 60 21) -89]
Train Case:  53 | Input/Output: [(76 -11 -4 -87) -87]
Train Case:  54 | Input/Output: [(50 35 -25 17) -25]
Train Case:  55 | Input/Output: [(-33 99 -67 -3) -67]
Train Case:  56 | Input/Output: [(-71 -66 -32 16) -71]
Train Case:  57 | Input/Output: [(-5 28 23 3) -5]
Train Case:  58 | Input/Output: [(50 -20 -66 -95) -95]
Train Case:  59 | Input/Output: [(30 -76 -43 -49) -76]
Train Case:  60 | Input/Output: [(24 84 -60 -54) -60]
Train Case:  61 | Input/Output: [(-86 -57 38 37) -86]
Train Case:  62 | Input/Output: [(-97 -50 99 -41) -97]
Train Case:  63 | Input/Output: [(-6 -39 49 93) -39]
Train Case:  64 | Input/Output: [(37 21 -58 -72) -72]
Train Case:  65 | Input/Output: [(39 -19 78 30) -19]
Train Case:  66 | Input/Output: [(-42 74 -21 98) -42]
Train Case:  67 | Input/Output: [(0 -74 -75 94) -75]
Train Case:  68 | Input/Output: [(65 -4 -70 33) -70]
Train Case:  69 | Input/Output: [(54 -11 -92 -59) -92]
Train Case:  70 | Input/Output: [(42 62 24 79) 24]
Train Case:  71 | Input/Output: [(-100 51 23 -97) -100]
Train Case:  72 | Input/Output: [(53 26 -40 45) -40]
Train Case:  73 | Input/Output: [(-60 3 -26 31) -60]
Train Case:  74 | Input/Output: [(26 -64 20 48) -64]
Train Case:  75 | Input/Output: [(60 81 50 2) 2]
Train Case:  76 | Input/Output: [(38 23 -42 -76) -76]
Train Case:  77 | Input/Output: [(-73 -12 82 8) -73]
Train Case:  78 | Input/Output: [(-100 -91 64 -60) -100]
Train Case:  79 | Input/Output: [(-54 29 66 66) -54]
Train Case:  80 | Input/Output: [(-56 -1 48 -66) -66]
Train Case:  81 | Input/Output: [(-71 -15 40 -79) -79]
Train Case:  82 | Input/Output: [(-21 -94 33 56) -94]
Train Case:  83 | Input/Output: [(-95 -74 73 51) -95]
Train Case:  84 | Input/Output: [(81 -81 -11 48) -81]
Train Case:  85 | Input/Output: [(-99 79 58 -77) -99]
Train Case:  86 | Input/Output: [(12 10 -22 -47) -47]
Train Case:  87 | Input/Output: [(-98 -17 19 -21) -98]
Train Case:  88 | Input/Output: [(99 -44 23 -44) -44]
Train Case:  89 | Input/Output: [(71 48 100 53) 48]
Train Case:  90 | Input/Output: [(64 83 -85 -58) -85]
Train Case:  91 | Input/Output: [(12 -3 -26 -60) -60]
Train Case:  92 | Input/Output: [(91 -52 83 -54) -54]
Train Case:  93 | Input/Output: [(-50 -96 73 -8) -96]
Train Case:  94 | Input/Output: [(45 -26 -75 -5) -75]
Train Case:  95 | Input/Output: [(56 -12 -91 51) -91]
Train Case:  96 | Input/Output: [(72 -65 -19 78) -65]
Train Case:  97 | Input/Output: [(-14 -64 -33 65) -64]
Train Case:  98 | Input/Output: [(83 90 84 33) 33]
Train Case:  99 | Input/Output: [(47 -67 -100 13) -100]
Test Case:   0 | Input/Output: [[-34 -77 -34 -34] -77]
Test Case:   1 | Input/Output: [[5 -93 -93 -93] -93]
Test Case:   2 | Input/Output: [[77 73 73 73] 73]
Test Case:   3 | Input/Output: [[80 80 80 -67] -67]
Test Case:   4 | Input/Output: [[16 16 16 72] 16]
Test Case:   5 | Input/Output: [[-76 -87 -87 -87] -87]
Test Case:   6 | Input/Output: [[29 29 -7 29] -7]
Test Case:   7 | Input/Output: [[21 36 21 21] 21]
Test Case:   8 | Input/Output: [[37 37 -25 37] -25]
Test Case:   9 | Input/Output: [[-25 55 55 55] -25]
Test Case:  10 | Input/Output: [[42 42 -86 42] -86]
Test Case:  11 | Input/Output: [[-6 -6 -6 -34] -34]
Test Case:  12 | Input/Output: [[47 47 -69 47] -69]
Test Case:  13 | Input/Output: [[-83 33 -83 -83] -83]
Test Case:  14 | Input/Output: [[13 -59 13 13] -59]
Test Case:  15 | Input/Output: [[43 66 43 43] 43]
Test Case:  16 | Input/Output: [[45 -33 -33 -33] -33]
Test Case:  17 | Input/Output: [[13 -78 13 13] -78]
Test Case:  18 | Input/Output: [[25 -47 25 25] -47]
Test Case:  19 | Input/Output: [[24 27 27 27] 24]
Test Case:  20 | Input/Output: [[-94 -94 -94 -89] -94]
Test Case:  21 | Input/Output: [[-79 -79 -79 -91] -91]
Test Case:  22 | Input/Output: [[1 -23 -23 -23] -23]
Test Case:  23 | Input/Output: [[39 39 -38 39] -38]
Test Case:  24 | Input/Output: [[-100 54 54 54] -100]
Test Case:  25 | Input/Output: [[40 -68 -68 -68] -68]
Test Case:  26 | Input/Output: [[-74 -9 -9 -9] -74]
Test Case:  27 | Input/Output: [[16 -64 -64 -64] -64]
Test Case:  28 | Input/Output: [[-65 -65 37 -65] -65]
Test Case:  29 | Input/Output: [[-66 -29 -66 -66] -66]
Test Case:  30 | Input/Output: [[-28 96 96 96] -28]
Test Case:  31 | Input/Output: [[40 40 40 -35] -35]
Test Case:  32 | Input/Output: [[-74 -74 -74 -71] -74]
Test Case:  33 | Input/Output: [[-86 -86 -86 -34] -86]
Test Case:  34 | Input/Output: [[92 -9 -9 -9] -9]
Test Case:  35 | Input/Output: [[-49 -49 -49 -49] -49]
Test Case:  36 | Input/Output: [[89 89 89 52] 52]
Test Case:  37 | Input/Output: [[75 58 58 58] 58]
Test Case:  38 | Input/Output: [[60 -100 -100 -100] -100]
Test Case:  39 | Input/Output: [[35 82 82 82] 35]
Test Case:  40 | Input/Output: [[-9 57 57 57] -9]
Test Case:  41 | Input/Output: [[-38 7 7 7] -38]
Test Case:  42 | Input/Output: [[88 -61 88 88] -61]
Test Case:  43 | Input/Output: [[-10 20 -10 -10] -10]
Test Case:  44 | Input/Output: [[-67 8 -67 -67] -67]
Test Case:  45 | Input/Output: [[32 32 4 32] 4]
Test Case:  46 | Input/Output: [[-4 53 53 53] -4]
Test Case:  47 | Input/Output: [[17 17 66 17] 17]
Test Case:  48 | Input/Output: [[95 95 95 -71] -71]
Test Case:  49 | Input/Output: [[97 -39 -39 -39] -39]
Test Case:  50 | Input/Output: [[88 77 77 77] 77]
Test Case:  51 | Input/Output: [[1 2 2 2] 1]
Test Case:  52 | Input/Output: [[60 60 18 60] 18]
Test Case:  53 | Input/Output: [[-36 -58 -36 -36] -58]
Test Case:  54 | Input/Output: [[1 -33 1 1] -33]
Test Case:  55 | Input/Output: [[-9 -76 -9 -9] -76]
Test Case:  56 | Input/Output: [[41 -45 41 41] -45]
Test Case:  57 | Input/Output: [[-72 -72 -72 -1] -72]
Test Case:  58 | Input/Output: [[-17 -17 -17 58] -17]
Test Case:  59 | Input/Output: [[43 72 43 43] 43]
Test Case:  60 | Input/Output: [[19 92 92 92] 19]
Test Case:  61 | Input/Output: [[-45 -90 -90 -90] -90]
Test Case:  62 | Input/Output: [[-60 -61 -60 -60] -61]
Test Case:  63 | Input/Output: [[-33 -55 -33 -33] -55]
Test Case:  64 | Input/Output: [[78 78 78 -98] -98]
Test Case:  65 | Input/Output: [[16 -50 -50 -50] -50]
Test Case:  66 | Input/Output: [[25 45 25 25] 25]
Test Case:  67 | Input/Output: [[74 74 74 28] 28]
Test Case:  68 | Input/Output: [[-95 95 95 95] -95]
Test Case:  69 | Input/Output: [[-95 34 34 34] -95]
Test Case:  70 | Input/Output: [[62 62 62 12] 12]
Test Case:  71 | Input/Output: [[-39 -39 96 -39] -39]
Test Case:  72 | Input/Output: [[-70 9 -70 -70] -70]
Test Case:  73 | Input/Output: [[85 89 85 85] 85]
Test Case:  74 | Input/Output: [[-16 6 6 6] -16]
Test Case:  75 | Input/Output: [[-38 -38 -38 -31] -38]
Test Case:  76 | Input/Output: [[-5 95 95 95] -5]
Test Case:  77 | Input/Output: [[-17 -67 -67 -67] -67]
Test Case:  78 | Input/Output: [[-93 -10 -93 -93] -93]
Test Case:  79 | Input/Output: [[36 36 4 36] 4]
Test Case:  80 | Input/Output: [[51 51 51 4] 4]
Test Case:  81 | Input/Output: [[98 -53 -53 -53] -53]
Test Case:  82 | Input/Output: [[-6 -6 -6 -91] -91]
Test Case:  83 | Input/Output: [[-55 -55 -55 32] -55]
Test Case:  84 | Input/Output: [[90 90 90 -81] -81]
Test Case:  85 | Input/Output: [[-65 17 -65 -65] -65]
Test Case:  86 | Input/Output: [[-74 -50 -74 -74] -74]
Test Case:  87 | Input/Output: [[69 79 79 79] 69]
Test Case:  88 | Input/Output: [[-48 -48 56 -48] -48]
Test Case:  89 | Input/Output: [[-78 -78 -78 43] -78]
Test Case:  90 | Input/Output: [[61 91 61 61] 61]
Test Case:  91 | Input/Output: [[-53 76 -53 -53] -53]
Test Case:  92 | Input/Output: [[21 21 82 21] 21]
Test Case:  93 | Input/Output: [[-95 -45 -95 -95] -95]
Test Case:  94 | Input/Output: [[-4 -51 -4 -4] -51]
Test Case:  95 | Input/Output: [[21 21 21 72] 21]
Test Case:  96 | Input/Output: [[-59 -59 -59 -41] -59]
Test Case:  97 | Input/Output: [[-21 -21 -21 -43] -43]
Test Case:  98 | Input/Output: [[82 82 -36 82] -36]
Test Case:  99 | Input/Output: [[-67 25 -67 -67] -67]
Test Case: 100 | Input/Output: [(-78 -78 -78 -78) -78]
Test Case: 101 | Input/Output: [(27 27 27 27) 27]
Test Case: 102 | Input/Output: [(65 65 65 65) 65]
Test Case: 103 | Input/Output: [(57 57 57 57) 57]
Test Case: 104 | Input/Output: [(-62 -62 -62 -62) -62]
Test Case: 105 | Input/Output: [(15 15 15 15) 15]
Test Case: 106 | Input/Output: [(53 53 53 53) 53]
Test Case: 107 | Input/Output: [(-63 -63 -63 -63) -63]
Test Case: 108 | Input/Output: [(65 65 65 65) 65]
Test Case: 109 | Input/Output: [(-27 -27 -27 -27) -27]
Test Case: 110 | Input/Output: [(43 43 43 43) 43]
Test Case: 111 | Input/Output: [(-63 -63 -63 -63) -63]
Test Case: 112 | Input/Output: [(93 93 93 93) 93]
Test Case: 113 | Input/Output: [(77 77 77 77) 77]
Test Case: 114 | Input/Output: [(22 22 22 22) 22]
Test Case: 115 | Input/Output: [(-37 -37 -37 -37) -37]
Test Case: 116 | Input/Output: [(-45 -45 -45 -45) -45]
Test Case: 117 | Input/Output: [(-20 -20 -20 -20) -20]
Test Case: 118 | Input/Output: [(8 8 8 8) 8]
Test Case: 119 | Input/Output: [(7 7 7 7) 7]
Test Case: 120 | Input/Output: [(-65 -65 -65 -65) -65]
Test Case: 121 | Input/Output: [(-56 -56 -56 -56) -56]
Test Case: 122 | Input/Output: [(80 80 80 80) 80]
Test Case: 123 | Input/Output: [(9 9 9 9) 9]
Test Case: 124 | Input/Output: [(-6 -6 -6 -6) -6]
Test Case: 125 | Input/Output: [(-96 -96 -96 -96) -96]
Test Case: 126 | Input/Output: [(84 84 84 84) 84]
Test Case: 127 | Input/Output: [(72 72 72 72) 72]
Test Case: 128 | Input/Output: [(-13 -13 -13 -13) -13]
Test Case: 129 | Input/Output: [(34 34 34 34) 34]
Test Case: 130 | Input/Output: [(88 88 88 88) 88]
Test Case: 131 | Input/Output: [(93 93 93 93) 93]
Test Case: 132 | Input/Output: [(-58 -58 -58 -58) -58]
Test Case: 133 | Input/Output: [(75 75 75 75) 75]
Test Case: 134 | Input/Output: [(48 48 48 48) 48]
Test Case: 135 | Input/Output: [(-98 -98 -98 -98) -98]
Test Case: 136 | Input/Output: [(44 44 44 44) 44]
Test Case: 137 | Input/Output: [(92 92 92 92) 92]
Test Case: 138 | Input/Output: [(-30 -30 -30 -30) -30]
Test Case: 139 | Input/Output: [(48 48 48 48) 48]
Test Case: 140 | Input/Output: [(38 38 38 38) 38]
Test Case: 141 | Input/Output: [(79 79 79 79) 79]
Test Case: 142 | Input/Output: [(92 92 92 92) 92]
Test Case: 143 | Input/Output: [(-25 -25 -25 -25) -25]
Test Case: 144 | Input/Output: [(-61 -61 -61 -61) -61]
Test Case: 145 | Input/Output: [(61 61 61 61) 61]
Test Case: 146 | Input/Output: [(-26 -26 -26 -26) -26]
Test Case: 147 | Input/Output: [(-83 -83 -83 -83) -83]
Test Case: 148 | Input/Output: [(-52 -52 -52 -52) -52]
Test Case: 149 | Input/Output: [(-70 -70 -70 -70) -70]
Test Case: 150 | Input/Output: [(81 81 81 81) 81]
Test Case: 151 | Input/Output: [(60 60 60 60) 60]
Test Case: 152 | Input/Output: [(-2 -2 -2 -2) -2]
Test Case: 153 | Input/Output: [(80 80 80 80) 80]
Test Case: 154 | Input/Output: [(-14 -14 -14 -14) -14]
Test Case: 155 | Input/Output: [(-99 -99 -99 -99) -99]
Test Case: 156 | Input/Output: [(47 47 47 47) 47]
Test Case: 157 | Input/Output: [(-56 -56 -56 -56) -56]
Test Case: 158 | Input/Output: [(22 22 22 22) 22]
Test Case: 159 | Input/Output: [(63 63 63 63) 63]
Test Case: 160 | Input/Output: [(-30 -30 -30 -30) -30]
Test Case: 161 | Input/Output: [(74 74 74 74) 74]
Test Case: 162 | Input/Output: [(-74 -74 -74 -74) -74]
Test Case: 163 | Input/Output: [(-4 -4 -4 -4) -4]
Test Case: 164 | Input/Output: [(53 53 53 53) 53]
Test Case: 165 | Input/Output: [(7 7 7 7) 7]
Test Case: 166 | Input/Output: [(8 8 8 8) 8]
Test Case: 167 | Input/Output: [(39 39 39 39) 39]
Test Case: 168 | Input/Output: [(65 65 65 65) 65]
Test Case: 169 | Input/Output: [(55 55 55 55) 55]
Test Case: 170 | Input/Output: [(-82 -82 -82 -82) -82]
Test Case: 171 | Input/Output: [(41 41 41 41) 41]
Test Case: 172 | Input/Output: [(-26 -26 -26 -26) -26]
Test Case: 173 | Input/Output: [(-46 -46 -46 -46) -46]
Test Case: 174 | Input/Output: [(-60 -60 -60 -60) -60]
Test Case: 175 | Input/Output: [(-81 -81 -81 -81) -81]
Test Case: 176 | Input/Output: [(91 91 91 91) 91]
Test Case: 177 | Input/Output: [(1 1 1 1) 1]
Test Case: 178 | Input/Output: [(75 75 75 75) 75]
Test Case: 179 | Input/Output: [(16 16 16 16) 16]
Test Case: 180 | Input/Output: [(75 75 75 75) 75]
Test Case: 181 | Input/Output: [(-57 -57 -57 -57) -57]
Test Case: 182 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 183 | Input/Output: [(76 76 76 76) 76]
Test Case: 184 | Input/Output: [(-18 -18 -18 -18) -18]
Test Case: 185 | Input/Output: [(-26 -26 -26 -26) -26]
Test Case: 186 | Input/Output: [(-100 -100 -100 -100) -100]
Test Case: 187 | Input/Output: [(58 58 58 58) 58]
Test Case: 188 | Input/Output: [(-86 -86 -86 -86) -86]
Test Case: 189 | Input/Output: [(30 30 30 30) 30]
Test Case: 190 | Input/Output: [(-14 -14 -14 -14) -14]
Test Case: 191 | Input/Output: [(24 24 24 24) 24]
Test Case: 192 | Input/Output: [(70 70 70 70) 70]
Test Case: 193 | Input/Output: [(61 61 61 61) 61]
Test Case: 194 | Input/Output: [(-18 -18 -18 -18) -18]
Test Case: 195 | Input/Output: [(-51 -51 -51 -51) -51]
Test Case: 196 | Input/Output: [(-71 -71 -71 -71) -71]
Test Case: 197 | Input/Output: [(-54 -54 -54 -54) -54]
Test Case: 198 | Input/Output: [(92 92 92 92) 92]
Test Case: 199 | Input/Output: [(-20 -20 -20 -20) -20]
Test Case: 200 | Input/Output: [(10 100 75 29) 10]
Test Case: 201 | Input/Output: [(54 100 80 87) 54]
Test Case: 202 | Input/Output: [(57 55 5 24) 5]
Test Case: 203 | Input/Output: [(0 4 68 47) 0]
Test Case: 204 | Input/Output: [(8 90 98 22) 8]
Test Case: 205 | Input/Output: [(69 62 0 44) 0]
Test Case: 206 | Input/Output: [(2 15 72 67) 2]
Test Case: 207 | Input/Output: [(81 42 54 79) 42]
Test Case: 208 | Input/Output: [(43 24 16 0) 0]
Test Case: 209 | Input/Output: [(33 82 36 27) 27]
Test Case: 210 | Input/Output: [(69 58 14 26) 14]
Test Case: 211 | Input/Output: [(15 67 71 59) 15]
Test Case: 212 | Input/Output: [(42 93 90 55) 42]
Test Case: 213 | Input/Output: [(70 57 54 28) 28]
Test Case: 214 | Input/Output: [(79 90 74 55) 55]
Test Case: 215 | Input/Output: [(46 90 8 38) 8]
Test Case: 216 | Input/Output: [(28 61 59 37) 28]
Test Case: 217 | Input/Output: [(15 22 44 38) 15]
Test Case: 218 | Input/Output: [(12 28 34 84) 12]
Test Case: 219 | Input/Output: [(76 10 72 66) 10]
Test Case: 220 | Input/Output: [(42 80 43 5) 5]
Test Case: 221 | Input/Output: [(0 62 45 91) 0]
Test Case: 222 | Input/Output: [(10 100 61 19) 10]
Test Case: 223 | Input/Output: [(100 79 36 81) 36]
Test Case: 224 | Input/Output: [(97 11 92 6) 6]
Test Case: 225 | Input/Output: [(5 34 63 58) 5]
Test Case: 226 | Input/Output: [(4 90 51 84) 4]
Test Case: 227 | Input/Output: [(61 56 3 15) 3]
Test Case: 228 | Input/Output: [(79 27 51 42) 27]
Test Case: 229 | Input/Output: [(61 61 66 87) 61]
Test Case: 230 | Input/Output: [(98 97 93 60) 60]
Test Case: 231 | Input/Output: [(15 28 23 100) 15]
Test Case: 232 | Input/Output: [(27 25 8 33) 8]
Test Case: 233 | Input/Output: [(24 26 53 90) 24]
Test Case: 234 | Input/Output: [(51 52 58 75) 51]
Test Case: 235 | Input/Output: [(33 4 33 16) 4]
Test Case: 236 | Input/Output: [(11 75 21 18) 11]
Test Case: 237 | Input/Output: [(77 74 20 97) 20]
Test Case: 238 | Input/Output: [(75 60 45 23) 23]
Test Case: 239 | Input/Output: [(37 67 47 97) 37]
Test Case: 240 | Input/Output: [(27 98 94 64) 27]
Test Case: 241 | Input/Output: [(23 88 10 20) 10]
Test Case: 242 | Input/Output: [(46 62 67 74) 46]
Test Case: 243 | Input/Output: [(92 57 21 35) 21]
Test Case: 244 | Input/Output: [(15 60 98 15) 15]
Test Case: 245 | Input/Output: [(10 18 30 8) 8]
Test Case: 246 | Input/Output: [(53 81 58 24) 24]
Test Case: 247 | Input/Output: [(26 35 85 42) 26]
Test Case: 248 | Input/Output: [(82 51 33 74) 33]
Test Case: 249 | Input/Output: [(1 64 41 34) 1]
Test Case: 250 | Input/Output: [(70 85 74 25) 25]
Test Case: 251 | Input/Output: [(96 46 42 1) 1]
Test Case: 252 | Input/Output: [(91 1 0 33) 0]
Test Case: 253 | Input/Output: [(16 15 35 75) 15]
Test Case: 254 | Input/Output: [(82 14 74 72) 14]
Test Case: 255 | Input/Output: [(5 80 91 78) 5]
Test Case: 256 | Input/Output: [(29 73 1 81) 1]
Test Case: 257 | Input/Output: [(15 55 11 40) 11]
Test Case: 258 | Input/Output: [(20 8 14 6) 6]
Test Case: 259 | Input/Output: [(75 93 0 6) 0]
Test Case: 260 | Input/Output: [(13 76 95 33) 13]
Test Case: 261 | Input/Output: [(71 18 85 76) 18]
Test Case: 262 | Input/Output: [(94 96 49 62) 49]
Test Case: 263 | Input/Output: [(23 12 56 56) 12]
Test Case: 264 | Input/Output: [(88 82 19 14) 14]
Test Case: 265 | Input/Output: [(83 50 19 77) 19]
Test Case: 266 | Input/Output: [(32 45 27 62) 27]
Test Case: 267 | Input/Output: [(31 100 1 47) 1]
Test Case: 268 | Input/Output: [(21 6 22 17) 6]
Test Case: 269 | Input/Output: [(95 99 11 92) 11]
Test Case: 270 | Input/Output: [(79 76 14 67) 14]
Test Case: 271 | Input/Output: [(82 31 71 11) 11]
Test Case: 272 | Input/Output: [(50 96 4 80) 4]
Test Case: 273 | Input/Output: [(56 35 10 41) 10]
Test Case: 274 | Input/Output: [(18 63 54 36) 18]
Test Case: 275 | Input/Output: [(30 23 11 14) 11]
Test Case: 276 | Input/Output: [(1 62 4 57) 1]
Test Case: 277 | Input/Output: [(100 45 97 99) 45]
Test Case: 278 | Input/Output: [(79 47 61 69) 47]
Test Case: 279 | Input/Output: [(2 54 15 29) 2]
Test Case: 280 | Input/Output: [(55 3 9 54) 3]
Test Case: 281 | Input/Output: [(24 29 33 14) 14]
Test Case: 282 | Input/Output: [(79 100 71 67) 67]
Test Case: 283 | Input/Output: [(88 13 64 9) 9]
Test Case: 284 | Input/Output: [(85 79 67 8) 8]
Test Case: 285 | Input/Output: [(66 6 71 70) 6]
Test Case: 286 | Input/Output: [(38 66 63 69) 38]
Test Case: 287 | Input/Output: [(40 75 2 4) 2]
Test Case: 288 | Input/Output: [(19 77 47 83) 19]
Test Case: 289 | Input/Output: [(72 77 70 55) 55]
Test Case: 290 | Input/Output: [(48 9 13 3) 3]
Test Case: 291 | Input/Output: [(10 61 5 33) 5]
Test Case: 292 | Input/Output: [(3 73 64 64) 3]
Test Case: 293 | Input/Output: [(95 92 14 32) 14]
Test Case: 294 | Input/Output: [(7 34 41 33) 7]
Test Case: 295 | Input/Output: [(73 61 100 73) 61]
Test Case: 296 | Input/Output: [(44 94 60 27) 27]
Test Case: 297 | Input/Output: [(34 44 59 12) 12]
Test Case: 298 | Input/Output: [(35 17 61 64) 17]
Test Case: 299 | Input/Output: [(75 42 59 91) 42]
Test Case: 300 | Input/Output: [(0 66 56 60) 0]
Test Case: 301 | Input/Output: [(63 58 90 25) 25]
Test Case: 302 | Input/Output: [(53 76 79 59) 53]
Test Case: 303 | Input/Output: [(31 91 70 83) 31]
Test Case: 304 | Input/Output: [(89 11 37 5) 5]
Test Case: 305 | Input/Output: [(41 40 0 18) 0]
Test Case: 306 | Input/Output: [(81 34 76 67) 34]
Test Case: 307 | Input/Output: [(13 10 49 36) 10]
Test Case: 308 | Input/Output: [(21 77 63 80) 21]
Test Case: 309 | Input/Output: [(0 94 8 35) 0]
Test Case: 310 | Input/Output: [(4 55 69 100) 4]
Test Case: 311 | Input/Output: [(45 97 35 49) 35]
Test Case: 312 | Input/Output: [(65 38 36 71) 36]
Test Case: 313 | Input/Output: [(50 67 3 53) 3]
Test Case: 314 | Input/Output: [(5 41 82 62) 5]
Test Case: 315 | Input/Output: [(94 96 81 36) 36]
Test Case: 316 | Input/Output: [(100 93 51 95) 51]
Test Case: 317 | Input/Output: [(87 17 80 12) 12]
Test Case: 318 | Input/Output: [(95 15 18 27) 15]
Test Case: 319 | Input/Output: [(35 98 48 84) 35]
Test Case: 320 | Input/Output: [(94 87 67 19) 19]
Test Case: 321 | Input/Output: [(71 45 20 60) 20]
Test Case: 322 | Input/Output: [(1 44 100 33) 1]
Test Case: 323 | Input/Output: [(21 67 4 11) 4]
Test Case: 324 | Input/Output: [(91 6 16 22) 6]
Test Case: 325 | Input/Output: [(45 17 39 95) 17]
Test Case: 326 | Input/Output: [(70 83 12 23) 12]
Test Case: 327 | Input/Output: [(42 72 85 17) 17]
Test Case: 328 | Input/Output: [(39 71 31 58) 31]
Test Case: 329 | Input/Output: [(16 96 29 95) 16]
Test Case: 330 | Input/Output: [(81 95 32 44) 32]
Test Case: 331 | Input/Output: [(3 24 27 40) 3]
Test Case: 332 | Input/Output: [(94 85 0 18) 0]
Test Case: 333 | Input/Output: [(32 24 89 51) 24]
Test Case: 334 | Input/Output: [(11 5 34 46) 5]
Test Case: 335 | Input/Output: [(62 81 25 69) 25]
Test Case: 336 | Input/Output: [(49 12 6 82) 6]
Test Case: 337 | Input/Output: [(94 8 33 13) 8]
Test Case: 338 | Input/Output: [(52 0 23 35) 0]
Test Case: 339 | Input/Output: [(15 14 46 1) 1]
Test Case: 340 | Input/Output: [(27 70 82 25) 25]
Test Case: 341 | Input/Output: [(21 97 5 31) 5]
Test Case: 342 | Input/Output: [(75 8 8 17) 8]
Test Case: 343 | Input/Output: [(32 23 32 92) 23]
Test Case: 344 | Input/Output: [(10 66 97 16) 10]
Test Case: 345 | Input/Output: [(69 47 84 11) 11]
Test Case: 346 | Input/Output: [(48 15 29 63) 15]
Test Case: 347 | Input/Output: [(7 55 45 11) 7]
Test Case: 348 | Input/Output: [(11 16 73 1) 1]
Test Case: 349 | Input/Output: [(58 81 93 62) 58]
Test Case: 350 | Input/Output: [(85 76 65 63) 63]
Test Case: 351 | Input/Output: [(27 62 60 36) 27]
Test Case: 352 | Input/Output: [(54 44 95 19) 19]
Test Case: 353 | Input/Output: [(45 43 70 98) 43]
Test Case: 354 | Input/Output: [(86 47 25 6) 6]
Test Case: 355 | Input/Output: [(87 92 63 59) 59]
Test Case: 356 | Input/Output: [(81 9 92 84) 9]
Test Case: 357 | Input/Output: [(79 8 80 19) 8]
Test Case: 358 | Input/Output: [(35 52 69 85) 35]
Test Case: 359 | Input/Output: [(3 20 90 90) 3]
Test Case: 360 | Input/Output: [(93 40 40 59) 40]
Test Case: 361 | Input/Output: [(36 20 52 5) 5]
Test Case: 362 | Input/Output: [(91 68 92 80) 68]
Test Case: 363 | Input/Output: [(83 52 4 23) 4]
Test Case: 364 | Input/Output: [(59 22 33 52) 22]
Test Case: 365 | Input/Output: [(5 41 46 48) 5]
Test Case: 366 | Input/Output: [(41 20 33 18) 18]
Test Case: 367 | Input/Output: [(9 99 61 3) 3]
Test Case: 368 | Input/Output: [(62 69 21 78) 21]
Test Case: 369 | Input/Output: [(85 80 23 2) 2]
Test Case: 370 | Input/Output: [(56 15 11 74) 11]
Test Case: 371 | Input/Output: [(55 14 48 62) 14]
Test Case: 372 | Input/Output: [(57 3 35 88) 3]
Test Case: 373 | Input/Output: [(24 55 79 83) 24]
Test Case: 374 | Input/Output: [(87 5 41 20) 5]
Test Case: 375 | Input/Output: [(27 90 28 99) 27]
Test Case: 376 | Input/Output: [(56 95 60 88) 56]
Test Case: 377 | Input/Output: [(67 87 62 63) 62]
Test Case: 378 | Input/Output: [(27 9 86 39) 9]
Test Case: 379 | Input/Output: [(68 42 47 38) 38]
Test Case: 380 | Input/Output: [(6 11 45 29) 6]
Test Case: 381 | Input/Output: [(90 34 27 84) 27]
Test Case: 382 | Input/Output: [(10 35 37 46) 10]
Test Case: 383 | Input/Output: [(63 67 87 87) 63]
Test Case: 384 | Input/Output: [(30 73 5 95) 5]
Test Case: 385 | Input/Output: [(52 29 41 7) 7]
Test Case: 386 | Input/Output: [(4 92 15 64) 4]
Test Case: 387 | Input/Output: [(46 15 50 58) 15]
Test Case: 388 | Input/Output: [(28 91 66 63) 28]
Test Case: 389 | Input/Output: [(22 64 68 55) 22]
Test Case: 390 | Input/Output: [(0 57 82 23) 0]
Test Case: 391 | Input/Output: [(76 2 30 54) 2]
Test Case: 392 | Input/Output: [(94 12 57 48) 12]
Test Case: 393 | Input/Output: [(79 41 49 9) 9]
Test Case: 394 | Input/Output: [(18 52 53 99) 18]
Test Case: 395 | Input/Output: [(1 10 86 85) 1]
Test Case: 396 | Input/Output: [(70 22 29 62) 22]
Test Case: 397 | Input/Output: [(48 35 99 20) 20]
Test Case: 398 | Input/Output: [(14 51 96 27) 14]
Test Case: 399 | Input/Output: [(49 38 27 91) 27]
Test Case: 400 | Input/Output: [(-92 68 15 38) -92]
Test Case: 401 | Input/Output: [(-71 37 33 -28) -71]
Test Case: 402 | Input/Output: [(-12 52 60 85) -12]
Test Case: 403 | Input/Output: [(46 -56 -46 -31) -56]
Test Case: 404 | Input/Output: [(-41 31 -78 -98) -98]
Test Case: 405 | Input/Output: [(33 -12 84 -41) -41]
Test Case: 406 | Input/Output: [(27 82 87 17) 17]
Test Case: 407 | Input/Output: [(77 35 -80 -89) -89]
Test Case: 408 | Input/Output: [(-57 63 -89 43) -89]
Test Case: 409 | Input/Output: [(90 2 -51 -42) -51]
Test Case: 410 | Input/Output: [(35 51 58 -81) -81]
Test Case: 411 | Input/Output: [(63 29 38 -55) -55]
Test Case: 412 | Input/Output: [(3 -82 14 -4) -82]
Test Case: 413 | Input/Output: [(-94 66 -61 -15) -94]
Test Case: 414 | Input/Output: [(-42 24 45 -90) -90]
Test Case: 415 | Input/Output: [(40 85 -49 -66) -66]
Test Case: 416 | Input/Output: [(-55 -30 -64 75) -64]
Test Case: 417 | Input/Output: [(58 -92 -85 -59) -92]
Test Case: 418 | Input/Output: [(50 -3 22 -77) -77]
Test Case: 419 | Input/Output: [(12 -69 28 -10) -69]
Test Case: 420 | Input/Output: [(25 -64 -29 84) -64]
Test Case: 421 | Input/Output: [(-43 44 61 -8) -43]
Test Case: 422 | Input/Output: [(-94 -17 38 5) -94]
Test Case: 423 | Input/Output: [(75 77 -86 76) -86]
Test Case: 424 | Input/Output: [(70 14 -55 33) -55]
Test Case: 425 | Input/Output: [(62 32 46 85) 32]
Test Case: 426 | Input/Output: [(-3 -70 -27 -17) -70]
Test Case: 427 | Input/Output: [(72 28 52 94) 28]
Test Case: 428 | Input/Output: [(-5 -85 22 68) -85]
Test Case: 429 | Input/Output: [(76 20 96 -58) -58]
Test Case: 430 | Input/Output: [(49 56 -39 -42) -42]
Test Case: 431 | Input/Output: [(-96 8 -86 -44) -96]
Test Case: 432 | Input/Output: [(99 28 58 -95) -95]
Test Case: 433 | Input/Output: [(94 85 31 72) 31]
Test Case: 434 | Input/Output: [(-61 -81 -45 -28) -81]
Test Case: 435 | Input/Output: [(-86 -49 47 -47) -86]
Test Case: 436 | Input/Output: [(-35 -94 -89 -61) -94]
Test Case: 437 | Input/Output: [(10 -40 42 -86) -86]
Test Case: 438 | Input/Output: [(60 61 -82 -31) -82]
Test Case: 439 | Input/Output: [(-34 -66 67 100) -66]
Test Case: 440 | Input/Output: [(11 63 -49 58) -49]
Test Case: 441 | Input/Output: [(7 66 89 71) 7]
Test Case: 442 | Input/Output: [(-1 -53 -96 77) -96]
Test Case: 443 | Input/Output: [(-60 -44 57 -62) -62]
Test Case: 444 | Input/Output: [(79 8 -85 -29) -85]
Test Case: 445 | Input/Output: [(56 69 -14 -24) -24]
Test Case: 446 | Input/Output: [(-16 33 27 -26) -26]
Test Case: 447 | Input/Output: [(5 34 -64 -81) -81]
Test Case: 448 | Input/Output: [(87 28 -49 -58) -58]
Test Case: 449 | Input/Output: [(14 -74 -95 33) -95]
Test Case: 450 | Input/Output: [(-62 -4 -12 -94) -94]
Test Case: 451 | Input/Output: [(-57 -94 -69 -41) -94]
Test Case: 452 | Input/Output: [(100 99 24 63) 24]
Test Case: 453 | Input/Output: [(-82 12 -23 16) -82]
Test Case: 454 | Input/Output: [(2 9 65 37) 2]
Test Case: 455 | Input/Output: [(92 -14 -36 -66) -66]
Test Case: 456 | Input/Output: [(-12 -33 -61 -51) -61]
Test Case: 457 | Input/Output: [(100 26 -60 -5) -60]
Test Case: 458 | Input/Output: [(-78 -88 -55 -39) -88]
Test Case: 459 | Input/Output: [(9 -97 1 14) -97]
Test Case: 460 | Input/Output: [(-42 34 65 -56) -56]
Test Case: 461 | Input/Output: [(9 49 -82 -61) -82]
Test Case: 462 | Input/Output: [(-90 -56 50 -59) -90]
Test Case: 463 | Input/Output: [(-57 -80 -30 51) -80]
Test Case: 464 | Input/Output: [(-90 85 -22 48) -90]
Test Case: 465 | Input/Output: [(-98 52 88 -5) -98]
Test Case: 466 | Input/Output: [(-47 -59 66 -14) -59]
Test Case: 467 | Input/Output: [(83 40 80 -76) -76]
Test Case: 468 | Input/Output: [(-6 5 38 -3) -6]
Test Case: 469 | Input/Output: [(22 -55 45 98) -55]
Test Case: 470 | Input/Output: [(-87 51 -64 1) -87]
Test Case: 471 | Input/Output: [(59 -71 -68 -73) -73]
Test Case: 472 | Input/Output: [(-52 98 -45 -25) -52]
Test Case: 473 | Input/Output: [(39 91 47 -73) -73]
Test Case: 474 | Input/Output: [(76 65 76 -25) -25]
Test Case: 475 | Input/Output: [(51 15 46 1) 1]
Test Case: 476 | Input/Output: [(45 -27 -92 -31) -92]
Test Case: 477 | Input/Output: [(74 -66 -85 11) -85]
Test Case: 478 | Input/Output: [(-81 -3 82 -39) -81]
Test Case: 479 | Input/Output: [(-52 77 15 -11) -52]
Test Case: 480 | Input/Output: [(-31 0 -99 -27) -99]
Test Case: 481 | Input/Output: [(97 62 -30 -15) -30]
Test Case: 482 | Input/Output: [(-59 -59 -86 -55) -86]
Test Case: 483 | Input/Output: [(-68 39 -89 49) -89]
Test Case: 484 | Input/Output: [(-57 -99 96 34) -99]
Test Case: 485 | Input/Output: [(44 55 73 -29) -29]
Test Case: 486 | Input/Output: [(-90 7 -86 67) -90]
Test Case: 487 | Input/Output: [(-67 35 31 77) -67]
Test Case: 488 | Input/Output: [(-47 -65 0 -6) -65]
Test Case: 489 | Input/Output: [(17 -15 -100 76) -100]
Test Case: 490 | Input/Output: [(17 100 85 59) 17]
Test Case: 491 | Input/Output: [(51 -45 46 -90) -90]
Test Case: 492 | Input/Output: [(69 -34 44 -68) -68]
Test Case: 493 | Input/Output: [(-22 69 -30 -36) -36]
Test Case: 494 | Input/Output: [(0 -86 -75 -95) -95]
Test Case: 495 | Input/Output: [(-46 31 80 21) -46]
Test Case: 496 | Input/Output: [(75 37 -29 95) -29]
Test Case: 497 | Input/Output: [(-76 81 -25 -84) -84]
Test Case: 498 | Input/Output: [(-100 -11 -77 -79) -100]
Test Case: 499 | Input/Output: [(37 -60 -64 -89) -89]
Test Case: 500 | Input/Output: [(85 -43 -77 100) -77]
Test Case: 501 | Input/Output: [(-61 24 -54 7) -61]
Test Case: 502 | Input/Output: [(-84 -52 -68 -3) -84]
Test Case: 503 | Input/Output: [(91 -18 21 47) -18]
Test Case: 504 | Input/Output: [(-54 70 8 -91) -91]
Test Case: 505 | Input/Output: [(90 -69 -7 43) -69]
Test Case: 506 | Input/Output: [(-22 -99 66 -71) -99]
Test Case: 507 | Input/Output: [(-41 88 -1 -55) -55]
Test Case: 508 | Input/Output: [(-64 94 63 -4) -64]
Test Case: 509 | Input/Output: [(-64 -44 24 69) -64]
Test Case: 510 | Input/Output: [(62 -14 85 48) -14]
Test Case: 511 | Input/Output: [(62 -83 84 -17) -83]
Test Case: 512 | Input/Output: [(72 -62 14 -52) -62]
Test Case: 513 | Input/Output: [(91 -96 47 -95) -96]
Test Case: 514 | Input/Output: [(-29 -92 65 98) -92]
Test Case: 515 | Input/Output: [(95 -90 70 -75) -90]
Test Case: 516 | Input/Output: [(-98 -16 8 24) -98]
Test Case: 517 | Input/Output: [(80 98 -44 -93) -93]
Test Case: 518 | Input/Output: [(74 53 71 -90) -90]
Test Case: 519 | Input/Output: [(-69 78 21 -99) -99]
Test Case: 520 | Input/Output: [(-66 52 -54 -22) -66]
Test Case: 521 | Input/Output: [(-74 98 7 -85) -85]
Test Case: 522 | Input/Output: [(63 -35 34 97) -35]
Test Case: 523 | Input/Output: [(41 -24 -69 90) -69]
Test Case: 524 | Input/Output: [(17 -26 -11 -33) -33]
Test Case: 525 | Input/Output: [(-35 -21 -87 3) -87]
Test Case: 526 | Input/Output: [(-79 -22 23 -58) -79]
Test Case: 527 | Input/Output: [(-68 42 -85 -24) -85]
Test Case: 528 | Input/Output: [(-2 -98 -98 64) -98]
Test Case: 529 | Input/Output: [(-57 -82 8 66) -82]
Test Case: 530 | Input/Output: [(93 -79 -13 -58) -79]
Test Case: 531 | Input/Output: [(-98 23 28 46) -98]
Test Case: 532 | Input/Output: [(17 81 31 -54) -54]
Test Case: 533 | Input/Output: [(-97 16 41 -36) -97]
Test Case: 534 | Input/Output: [(37 38 81 97) 37]
Test Case: 535 | Input/Output: [(-78 -38 63 80) -78]
Test Case: 536 | Input/Output: [(-67 86 -57 81) -67]
Test Case: 537 | Input/Output: [(-23 -27 95 81) -27]
Test Case: 538 | Input/Output: [(-10 81 -45 -63) -63]
Test Case: 539 | Input/Output: [(6 50 14 -99) -99]
Test Case: 540 | Input/Output: [(-46 -98 -41 -18) -98]
Test Case: 541 | Input/Output: [(-76 48 -73 68) -76]
Test Case: 542 | Input/Output: [(-7 2 -13 -68) -68]
Test Case: 543 | Input/Output: [(-83 -91 26 44) -91]
Test Case: 544 | Input/Output: [(-29 22 -33 -28) -33]
Test Case: 545 | Input/Output: [(-40 16 19 65) -40]
Test Case: 546 | Input/Output: [(8 -2 66 -49) -49]
Test Case: 547 | Input/Output: [(34 35 94 22) 22]
Test Case: 548 | Input/Output: [(23 25 -9 -63) -63]
Test Case: 549 | Input/Output: [(5 -91 18 -85) -91]
Test Case: 550 | Input/Output: [(-100 -41 56 44) -100]
Test Case: 551 | Input/Output: [(-8 66 -75 -90) -90]
Test Case: 552 | Input/Output: [(-54 -84 -68 56) -84]
Test Case: 553 | Input/Output: [(91 -26 9 -15) -26]
Test Case: 554 | Input/Output: [(-48 59 -35 -95) -95]
Test Case: 555 | Input/Output: [(-11 -37 -14 -97) -97]
Test Case: 556 | Input/Output: [(62 22 -1 -18) -18]
Test Case: 557 | Input/Output: [(0 32 24 -10) -10]
Test Case: 558 | Input/Output: [(-80 -25 -90 -73) -90]
Test Case: 559 | Input/Output: [(-36 96 -11 66) -36]
Test Case: 560 | Input/Output: [(51 43 -8 46) -8]
Test Case: 561 | Input/Output: [(53 3 -53 28) -53]
Test Case: 562 | Input/Output: [(-13 30 41 -80) -80]
Test Case: 563 | Input/Output: [(83 100 -76 37) -76]
Test Case: 564 | Input/Output: [(100 1 -58 32) -58]
Test Case: 565 | Input/Output: [(98 -80 14 4) -80]
Test Case: 566 | Input/Output: [(-54 11 93 -92) -92]
Test Case: 567 | Input/Output: [(-66 -52 78 -21) -66]
Test Case: 568 | Input/Output: [(-18 -82 -53 88) -82]
Test Case: 569 | Input/Output: [(-6 17 -54 -86) -86]
Test Case: 570 | Input/Output: [(45 9 -22 -27) -27]
Test Case: 571 | Input/Output: [(-11 -37 -96 -51) -96]
Test Case: 572 | Input/Output: [(52 -48 73 -79) -79]
Test Case: 573 | Input/Output: [(34 69 23 2) 2]
Test Case: 574 | Input/Output: [(62 10 91 -24) -24]
Test Case: 575 | Input/Output: [(50 -93 11 -18) -93]
Test Case: 576 | Input/Output: [(-81 -81 94 6) -81]
Test Case: 577 | Input/Output: [(57 -17 -97 -29) -97]
Test Case: 578 | Input/Output: [(89 40 -5 -35) -35]
Test Case: 579 | Input/Output: [(-92 75 -94 -92) -94]
Test Case: 580 | Input/Output: [(16 16 -22 -50) -50]
Test Case: 581 | Input/Output: [(6 -22 -1 81) -22]
Test Case: 582 | Input/Output: [(15 62 13 82) 13]
Test Case: 583 | Input/Output: [(28 -91 -39 -68) -91]
Test Case: 584 | Input/Output: [(50 13 -43 5) -43]
Test Case: 585 | Input/Output: [(-96 82 -88 -10) -96]
Test Case: 586 | Input/Output: [(-22 11 -13 74) -22]
Test Case: 587 | Input/Output: [(-91 2 -68 18) -91]
Test Case: 588 | Input/Output: [(-39 59 13 71) -39]
Test Case: 589 | Input/Output: [(-64 51 84 68) -64]
Test Case: 590 | Input/Output: [(-56 50 -10 -11) -56]
Test Case: 591 | Input/Output: [(13 -11 -56 75) -56]
Test Case: 592 | Input/Output: [(-19 13 -75 11) -75]
Test Case: 593 | Input/Output: [(85 40 80 20) 20]
Test Case: 594 | Input/Output: [(-1 7 -34 -75) -75]
Test Case: 595 | Input/Output: [(87 36 17 -8) -8]
Test Case: 596 | Input/Output: [(-57 -4 -68 65) -68]
Test Case: 597 | Input/Output: [(-73 -3 80 17) -73]
Test Case: 598 | Input/Output: [(-56 -14 -23 72) -56]
Test Case: 599 | Input/Output: [(-86 60 -78 -18) -86]
Test Case: 600 | Input/Output: [(-4 4 100 -40) -40]
Test Case: 601 | Input/Output: [(37 -10 -25 -90) -90]
Test Case: 602 | Input/Output: [(43 11 -12 -30) -30]
Test Case: 603 | Input/Output: [(-8 77 31 48) -8]
Test Case: 604 | Input/Output: [(-68 -14 15 -66) -68]
Test Case: 605 | Input/Output: [(-47 -74 -23 -25) -74]
Test Case: 606 | Input/Output: [(76 20 -41 47) -41]
Test Case: 607 | Input/Output: [(44 40 -18 51) -18]
Test Case: 608 | Input/Output: [(56 -28 72 -7) -28]
Test Case: 609 | Input/Output: [(-95 -56 -80 -60) -95]
Test Case: 610 | Input/Output: [(-75 -23 -54 81) -75]
Test Case: 611 | Input/Output: [(-15 -58 43 -55) -58]
Test Case: 612 | Input/Output: [(-20 28 48 61) -20]
Test Case: 613 | Input/Output: [(-49 38 8 70) -49]
Test Case: 614 | Input/Output: [(-89 24 36 26) -89]
Test Case: 615 | Input/Output: [(-34 45 -48 -67) -67]
Test Case: 616 | Input/Output: [(-41 -51 27 64) -51]
Test Case: 617 | Input/Output: [(2 -30 -14 48) -30]
Test Case: 618 | Input/Output: [(63 -5 92 22) -5]
Test Case: 619 | Input/Output: [(-100 -50 66 -84) -100]
Test Case: 620 | Input/Output: [(90 73 92 41) 41]
Test Case: 621 | Input/Output: [(13 -28 -70 -77) -77]
Test Case: 622 | Input/Output: [(83 30 35 65) 30]
Test Case: 623 | Input/Output: [(-46 -10 39 -16) -46]
Test Case: 624 | Input/Output: [(-32 -4 68 -35) -35]
Test Case: 625 | Input/Output: [(-8 -36 -87 -29) -87]
Test Case: 626 | Input/Output: [(100 -73 78 30) -73]
Test Case: 627 | Input/Output: [(-94 -15 28 27) -94]
Test Case: 628 | Input/Output: [(26 -1 -27 -92) -92]
Test Case: 629 | Input/Output: [(98 94 -1 1) -1]
Test Case: 630 | Input/Output: [(15 77 1 -75) -75]
Test Case: 631 | Input/Output: [(-10 -75 -14 -51) -75]
Test Case: 632 | Input/Output: [(-65 -86 -26 42) -86]
Test Case: 633 | Input/Output: [(-54 89 -59 92) -59]
Test Case: 634 | Input/Output: [(79 40 49 78) 40]
Test Case: 635 | Input/Output: [(20 29 -23 -23) -23]
Test Case: 636 | Input/Output: [(93 -88 -61 -74) -88]
Test Case: 637 | Input/Output: [(-45 -79 -98 -31) -98]
Test Case: 638 | Input/Output: [(80 -23 -96 68) -96]
Test Case: 639 | Input/Output: [(-48 81 61 23) -48]
Test Case: 640 | Input/Output: [(91 -62 -76 -36) -76]
Test Case: 641 | Input/Output: [(-90 -31 -84 -20) -90]
Test Case: 642 | Input/Output: [(64 82 -79 -32) -79]
Test Case: 643 | Input/Output: [(37 92 55 7) 7]
Test Case: 644 | Input/Output: [(-67 -76 45 75) -76]
Test Case: 645 | Input/Output: [(-83 77 73 90) -83]
Test Case: 646 | Input/Output: [(79 79 -70 -8) -70]
Test Case: 647 | Input/Output: [(-70 38 -2 -34) -70]
Test Case: 648 | Input/Output: [(-41 72 0 -21) -41]
Test Case: 649 | Input/Output: [(-10 -53 -43 -3) -53]
Test Case: 650 | Input/Output: [(-84 -80 -50 -60) -84]
Test Case: 651 | Input/Output: [(80 -10 -12 74) -12]
Test Case: 652 | Input/Output: [(-61 -92 -30 74) -92]
Test Case: 653 | Input/Output: [(95 -91 -11 -43) -91]
Test Case: 654 | Input/Output: [(-10 16 11 -24) -24]
Test Case: 655 | Input/Output: [(-88 28 -70 30) -88]
Test Case: 656 | Input/Output: [(-15 96 -70 -41) -70]
Test Case: 657 | Input/Output: [(45 36 48 3) 3]
Test Case: 658 | Input/Output: [(65 -5 -94 27) -94]
Test Case: 659 | Input/Output: [(-65 -77 43 -88) -88]
Test Case: 660 | Input/Output: [(-43 13 79 3) -43]
Test Case: 661 | Input/Output: [(19 -71 61 87) -71]
Test Case: 662 | Input/Output: [(-100 13 13 25) -100]
Test Case: 663 | Input/Output: [(51 -27 -30 -79) -79]
Test Case: 664 | Input/Output: [(-83 56 -1 -2) -83]
Test Case: 665 | Input/Output: [(-32 77 -31 -98) -98]
Test Case: 666 | Input/Output: [(90 44 2 -34) -34]
Test Case: 667 | Input/Output: [(26 -11 47 -40) -40]
Test Case: 668 | Input/Output: [(-3 -36 23 -13) -36]
Test Case: 669 | Input/Output: [(-65 74 -41 87) -65]
Test Case: 670 | Input/Output: [(75 37 56 -6) -6]
Test Case: 671 | Input/Output: [(67 56 0 18) 0]
Test Case: 672 | Input/Output: [(4 85 20 96) 4]
Test Case: 673 | Input/Output: [(56 69 -5 12) -5]
Test Case: 674 | Input/Output: [(87 -28 -96 -29) -96]
Test Case: 675 | Input/Output: [(-72 74 -66 -68) -72]
Test Case: 676 | Input/Output: [(63 -60 41 49) -60]
Test Case: 677 | Input/Output: [(-84 -1 10 -72) -84]
Test Case: 678 | Input/Output: [(74 77 -100 18) -100]
Test Case: 679 | Input/Output: [(98 77 -79 -92) -92]
Test Case: 680 | Input/Output: [(84 34 -22 -1) -22]
Test Case: 681 | Input/Output: [(81 100 57 67) 57]
Test Case: 682 | Input/Output: [(56 -16 -87 29) -87]
Test Case: 683 | Input/Output: [(-8 64 78 -99) -99]
Test Case: 684 | Input/Output: [(19 -94 -18 -91) -94]
Test Case: 685 | Input/Output: [(20 -100 29 13) -100]
Test Case: 686 | Input/Output: [(-56 -83 49 -94) -94]
Test Case: 687 | Input/Output: [(-69 65 -96 -37) -96]
Test Case: 688 | Input/Output: [(60 54 95 -54) -54]
Test Case: 689 | Input/Output: [(-70 70 84 52) -70]
Test Case: 690 | Input/Output: [(74 -29 51 -42) -42]
Test Case: 691 | Input/Output: [(-12 -87 37 -62) -87]
Test Case: 692 | Input/Output: [(-14 -10 72 -90) -90]
Test Case: 693 | Input/Output: [(5 71 -91 -19) -91]
Test Case: 694 | Input/Output: [(0 -88 -88 19) -88]
Test Case: 695 | Input/Output: [(-26 38 -74 -58) -74]
Test Case: 696 | Input/Output: [(89 20 0 88) 0]
Test Case: 697 | Input/Output: [(-70 79 -70 -28) -70]
Test Case: 698 | Input/Output: [(0 4 -29 28) -29]
Test Case: 699 | Input/Output: [(75 62 -7 -59) -59]
Test Case: 700 | Input/Output: [(66 -73 18 65) -73]
Test Case: 701 | Input/Output: [(32 97 18 -33) -33]
Test Case: 702 | Input/Output: [(36 -18 -8 -32) -32]
Test Case: 703 | Input/Output: [(82 -92 3 72) -92]
Test Case: 704 | Input/Output: [(-58 -25 -55 -47) -58]
Test Case: 705 | Input/Output: [(-20 87 49 -50) -50]
Test Case: 706 | Input/Output: [(-58 -16 -58 -28) -58]
Test Case: 707 | Input/Output: [(79 66 42 13) 13]
Test Case: 708 | Input/Output: [(-73 53 64 93) -73]
Test Case: 709 | Input/Output: [(42 -16 -63 -45) -63]
Test Case: 710 | Input/Output: [(-92 1 60 32) -92]
Test Case: 711 | Input/Output: [(49 -17 83 -61) -61]
Test Case: 712 | Input/Output: [(-32 18 31 -19) -32]
Test Case: 713 | Input/Output: [(35 38 96 -44) -44]
Test Case: 714 | Input/Output: [(58 -51 99 -75) -75]
Test Case: 715 | Input/Output: [(-87 46 63 1) -87]
Test Case: 716 | Input/Output: [(-49 26 -56 -36) -56]
Test Case: 717 | Input/Output: [(-47 -4 -10 29) -47]
Test Case: 718 | Input/Output: [(-32 -48 -4 -17) -48]
Test Case: 719 | Input/Output: [(-46 -26 32 42) -46]
Test Case: 720 | Input/Output: [(-54 -48 -61 35) -61]
Test Case: 721 | Input/Output: [(67 -27 -71 -58) -71]
Test Case: 722 | Input/Output: [(-91 -56 59 73) -91]
Test Case: 723 | Input/Output: [(22 84 53 65) 22]
Test Case: 724 | Input/Output: [(-87 -30 -79 -7) -87]
Test Case: 725 | Input/Output: [(37 78 27 87) 27]
Test Case: 726 | Input/Output: [(60 -24 44 4) -24]
Test Case: 727 | Input/Output: [(16 -19 -90 -40) -90]
Test Case: 728 | Input/Output: [(83 -97 -35 84) -97]
Test Case: 729 | Input/Output: [(39 74 62 -42) -42]
Test Case: 730 | Input/Output: [(1 -94 -86 -6) -94]
Test Case: 731 | Input/Output: [(68 -26 -71 -82) -82]
Test Case: 732 | Input/Output: [(-89 -56 -7 58) -89]
Test Case: 733 | Input/Output: [(-1 52 -43 -56) -56]
Test Case: 734 | Input/Output: [(-62 -19 49 -67) -67]
Test Case: 735 | Input/Output: [(-15 -93 94 -85) -93]
Test Case: 736 | Input/Output: [(-61 -9 -2 -7) -61]
Test Case: 737 | Input/Output: [(-17 77 -83 40) -83]
Test Case: 738 | Input/Output: [(-31 -8 -49 79) -49]
Test Case: 739 | Input/Output: [(20 -51 99 26) -51]
Test Case: 740 | Input/Output: [(-66 -19 90 29) -66]
Test Case: 741 | Input/Output: [(86 -40 43 12) -40]
Test Case: 742 | Input/Output: [(-80 75 -81 74) -81]
Test Case: 743 | Input/Output: [(15 -70 86 -33) -70]
Test Case: 744 | Input/Output: [(54 100 37 -52) -52]
Test Case: 745 | Input/Output: [(-67 1 -3 25) -67]
Test Case: 746 | Input/Output: [(-53 16 -62 57) -62]
Test Case: 747 | Input/Output: [(1 14 80 -23) -23]
Test Case: 748 | Input/Output: [(-79 -85 -99 -60) -99]
Test Case: 749 | Input/Output: [(-77 85 -65 -2) -77]
Test Case: 750 | Input/Output: [(-46 -7 -29 -6) -46]
Test Case: 751 | Input/Output: [(33 19 38 41) 19]
Test Case: 752 | Input/Output: [(52 54 -17 65) -17]
Test Case: 753 | Input/Output: [(74 -65 -86 -64) -86]
Test Case: 754 | Input/Output: [(73 60 75 -87) -87]
Test Case: 755 | Input/Output: [(34 14 -29 -48) -48]
Test Case: 756 | Input/Output: [(10 -46 28 -35) -46]
Test Case: 757 | Input/Output: [(-75 -56 -71 -43) -75]
Test Case: 758 | Input/Output: [(97 83 -66 58) -66]
Test Case: 759 | Input/Output: [(-92 81 -30 -18) -92]
Test Case: 760 | Input/Output: [(57 -38 34 22) -38]
Test Case: 761 | Input/Output: [(-37 67 55 2) -37]
Test Case: 762 | Input/Output: [(4 -84 73 62) -84]
Test Case: 763 | Input/Output: [(14 81 -44 2) -44]
Test Case: 764 | Input/Output: [(-10 -43 91 62) -43]
Test Case: 765 | Input/Output: [(-45 76 -71 85) -71]
Test Case: 766 | Input/Output: [(45 -5 -39 -35) -39]
Test Case: 767 | Input/Output: [(77 53 91 41) 41]
Test Case: 768 | Input/Output: [(48 33 52 68) 33]
Test Case: 769 | Input/Output: [(51 74 -38 -2) -38]
Test Case: 770 | Input/Output: [(-90 -69 -1 -21) -90]
Test Case: 771 | Input/Output: [(100 42 -49 -9) -49]
Test Case: 772 | Input/Output: [(-64 80 34 82) -64]
Test Case: 773 | Input/Output: [(38 59 4 41) 4]
Test Case: 774 | Input/Output: [(-69 -50 91 -54) -69]
Test Case: 775 | Input/Output: [(-43 -69 36 82) -69]
Test Case: 776 | Input/Output: [(74 -45 53 -97) -97]
Test Case: 777 | Input/Output: [(30 -93 -17 -9) -93]
Test Case: 778 | Input/Output: [(21 19 71 84) 19]
Test Case: 779 | Input/Output: [(-38 59 44 88) -38]
Test Case: 780 | Input/Output: [(5 26 -62 19) -62]
Test Case: 781 | Input/Output: [(-95 5 -8 -60) -95]
Test Case: 782 | Input/Output: [(70 -79 5 -97) -97]
Test Case: 783 | Input/Output: [(83 -72 -96 32) -96]
Test Case: 784 | Input/Output: [(-12 -55 -11 71) -55]
Test Case: 785 | Input/Output: [(92 -87 -73 83) -87]
Test Case: 786 | Input/Output: [(91 -3 47 -4) -4]
Test Case: 787 | Input/Output: [(-70 -95 -57 -13) -95]
Test Case: 788 | Input/Output: [(11 1 51 79) 1]
Test Case: 789 | Input/Output: [(63 77 -67 39) -67]
Test Case: 790 | Input/Output: [(34 7 0 38) 0]
Test Case: 791 | Input/Output: [(-20 -68 99 68) -68]
Test Case: 792 | Input/Output: [(63 -77 5 -43) -77]
Test Case: 793 | Input/Output: [(46 98 -57 12) -57]
Test Case: 794 | Input/Output: [(80 73 -75 21) -75]
Test Case: 795 | Input/Output: [(-63 -64 -38 29) -64]
Test Case: 796 | Input/Output: [(-44 38 -35 -55) -55]
Test Case: 797 | Input/Output: [(19 48 27 -68) -68]
Test Case: 798 | Input/Output: [(-13 -69 88 65) -69]
Test Case: 799 | Input/Output: [(97 -28 79 87) -28]
Test Case: 800 | Input/Output: [(84 93 -14 -85) -85]
Test Case: 801 | Input/Output: [(-80 -15 14 39) -80]
Test Case: 802 | Input/Output: [(-22 52 41 -89) -89]
Test Case: 803 | Input/Output: [(-26 -76 29 70) -76]
Test Case: 804 | Input/Output: [(70 99 -67 -43) -67]
Test Case: 805 | Input/Output: [(-88 -78 -85 -44) -88]
Test Case: 806 | Input/Output: [(2 79 -18 -62) -62]
Test Case: 807 | Input/Output: [(-97 17 -27 38) -97]
Test Case: 808 | Input/Output: [(-43 -27 3 -24) -43]
Test Case: 809 | Input/Output: [(21 6 -33 -44) -44]
Test Case: 810 | Input/Output: [(21 29 24 8) 8]
Test Case: 811 | Input/Output: [(-80 -98 -73 50) -98]
Test Case: 812 | Input/Output: [(19 -27 15 -69) -69]
Test Case: 813 | Input/Output: [(-10 100 23 -91) -91]
Test Case: 814 | Input/Output: [(-56 62 48 -7) -56]
Test Case: 815 | Input/Output: [(60 -87 35 -74) -87]
Test Case: 816 | Input/Output: [(-55 68 -8 84) -55]
Test Case: 817 | Input/Output: [(98 -99 -27 20) -99]
Test Case: 818 | Input/Output: [(90 48 -66 -44) -66]
Test Case: 819 | Input/Output: [(94 -53 -75 80) -75]
Test Case: 820 | Input/Output: [(-19 13 -30 -84) -84]
Test Case: 821 | Input/Output: [(88 -100 -41 -60) -100]
Test Case: 822 | Input/Output: [(-67 80 23 -73) -73]
Test Case: 823 | Input/Output: [(-46 89 61 22) -46]
Test Case: 824 | Input/Output: [(27 -37 -72 -81) -81]
Test Case: 825 | Input/Output: [(66 -69 62 33) -69]
Test Case: 826 | Input/Output: [(91 -38 69 -3) -38]
Test Case: 827 | Input/Output: [(19 -16 -19 -3) -19]
Test Case: 828 | Input/Output: [(51 53 12 15) 12]
Test Case: 829 | Input/Output: [(67 76 27 -71) -71]
Test Case: 830 | Input/Output: [(-96 -17 15 96) -96]
Test Case: 831 | Input/Output: [(43 -65 96 -82) -82]
Test Case: 832 | Input/Output: [(-62 -15 25 -53) -62]
Test Case: 833 | Input/Output: [(80 -84 -80 21) -84]
Test Case: 834 | Input/Output: [(-53 -37 -10 -12) -53]
Test Case: 835 | Input/Output: [(-95 32 89 70) -95]
Test Case: 836 | Input/Output: [(-65 -86 63 89) -86]
Test Case: 837 | Input/Output: [(-24 37 -60 -97) -97]
Test Case: 838 | Input/Output: [(-63 47 -41 -18) -63]
Test Case: 839 | Input/Output: [(29 89 5 -77) -77]
Test Case: 840 | Input/Output: [(87 60 -36 -70) -70]
Test Case: 841 | Input/Output: [(5 77 -48 71) -48]
Test Case: 842 | Input/Output: [(-92 52 13 1) -92]
Test Case: 843 | Input/Output: [(87 -50 -71 -36) -71]
Test Case: 844 | Input/Output: [(-74 62 84 6) -74]
Test Case: 845 | Input/Output: [(-47 -63 90 30) -63]
Test Case: 846 | Input/Output: [(41 24 59 48) 24]
Test Case: 847 | Input/Output: [(-13 -93 57 43) -93]
Test Case: 848 | Input/Output: [(-2 8 5 -98) -98]
Test Case: 849 | Input/Output: [(23 23 -83 22) -83]
Test Case: 850 | Input/Output: [(7 -89 57 -53) -89]
Test Case: 851 | Input/Output: [(-49 40 47 -7) -49]
Test Case: 852 | Input/Output: [(92 30 -55 -76) -76]
Test Case: 853 | Input/Output: [(-71 32 -87 -95) -95]
Test Case: 854 | Input/Output: [(-34 22 -63 98) -63]
Test Case: 855 | Input/Output: [(-40 -29 -100 81) -100]
Test Case: 856 | Input/Output: [(-66 -99 -34 17) -99]
Test Case: 857 | Input/Output: [(51 -93 -61 35) -93]
Test Case: 858 | Input/Output: [(68 11 -67 -32) -67]
Test Case: 859 | Input/Output: [(52 -9 -84 58) -84]
Test Case: 860 | Input/Output: [(14 -33 -81 -47) -81]
Test Case: 861 | Input/Output: [(-97 28 81 4) -97]
Test Case: 862 | Input/Output: [(-25 94 -57 84) -57]
Test Case: 863 | Input/Output: [(-25 -4 -88 88) -88]
Test Case: 864 | Input/Output: [(91 -7 77 85) -7]
Test Case: 865 | Input/Output: [(-97 -6 -26 -83) -97]
Test Case: 866 | Input/Output: [(-67 82 -70 65) -70]
Test Case: 867 | Input/Output: [(3 65 -30 -8) -30]
Test Case: 868 | Input/Output: [(-68 7 53 71) -68]
Test Case: 869 | Input/Output: [(-5 -93 -27 -82) -93]
Test Case: 870 | Input/Output: [(-66 -90 2 -40) -90]
Test Case: 871 | Input/Output: [(-81 100 -91 41) -91]
Test Case: 872 | Input/Output: [(24 4 -59 63) -59]
Test Case: 873 | Input/Output: [(-70 -89 -16 98) -89]
Test Case: 874 | Input/Output: [(46 7 -38 98) -38]
Test Case: 875 | Input/Output: [(-15 -28 24 71) -28]
Test Case: 876 | Input/Output: [(-77 82 85 69) -77]
Test Case: 877 | Input/Output: [(48 19 -88 6) -88]
Test Case: 878 | Input/Output: [(-56 29 44 -40) -56]
Test Case: 879 | Input/Output: [(-82 32 42 -79) -82]
Test Case: 880 | Input/Output: [(-66 98 -63 71) -66]
Test Case: 881 | Input/Output: [(-62 35 -10 41) -62]
Test Case: 882 | Input/Output: [(51 0 22 24) 0]
Test Case: 883 | Input/Output: [(-89 49 -22 -16) -89]
Test Case: 884 | Input/Output: [(-64 -54 98 46) -64]
Test Case: 885 | Input/Output: [(-94 -59 49 1) -94]
Test Case: 886 | Input/Output: [(-95 -12 17 16) -95]
Test Case: 887 | Input/Output: [(-94 98 30 5) -94]
Test Case: 888 | Input/Output: [(-53 -63 -49 86) -63]
Test Case: 889 | Input/Output: [(-92 54 -17 -93) -93]
Test Case: 890 | Input/Output: [(-62 64 -100 -1) -100]
Test Case: 891 | Input/Output: [(-36 -43 -94 44) -94]
Test Case: 892 | Input/Output: [(98 18 59 65) 18]
Test Case: 893 | Input/Output: [(-60 96 6 56) -60]
Test Case: 894 | Input/Output: [(-23 -58 -64 -98) -98]
Test Case: 895 | Input/Output: [(9 96 66 72) 9]
Test Case: 896 | Input/Output: [(40 -18 87 -12) -18]
Test Case: 897 | Input/Output: [(19 -93 -29 -45) -93]
Test Case: 898 | Input/Output: [(-56 24 -65 -98) -98]
Test Case: 899 | Input/Output: [(-73 32 2 55) -73]
Test Case: 900 | Input/Output: [(-75 -72 -53 -55) -75]
Test Case: 901 | Input/Output: [(-25 -10 15 1) -25]
Test Case: 902 | Input/Output: [(90 -46 11 79) -46]
Test Case: 903 | Input/Output: [(78 -77 90 -10) -77]
Test Case: 904 | Input/Output: [(-82 -16 36 28) -82]
Test Case: 905 | Input/Output: [(30 -53 57 -53) -53]
Test Case: 906 | Input/Output: [(-8 -96 33 90) -96]
Test Case: 907 | Input/Output: [(-92 56 -60 74) -92]
Test Case: 908 | Input/Output: [(5 -38 64 -26) -38]
Test Case: 909 | Input/Output: [(-47 -29 -28 -87) -87]
Test Case: 910 | Input/Output: [(-85 -11 -70 -77) -85]
Test Case: 911 | Input/Output: [(45 -20 75 -74) -74]
Test Case: 912 | Input/Output: [(25 -64 19 82) -64]
Test Case: 913 | Input/Output: [(-27 80 -45 -5) -45]
Test Case: 914 | Input/Output: [(24 -36 0 23) -36]
Test Case: 915 | Input/Output: [(-11 -36 -69 32) -69]
Test Case: 916 | Input/Output: [(-98 -30 -70 46) -98]
Test Case: 917 | Input/Output: [(33 -48 9 -92) -92]
Test Case: 918 | Input/Output: [(-33 34 -36 47) -36]
Test Case: 919 | Input/Output: [(-20 -50 93 74) -50]
Test Case: 920 | Input/Output: [(-54 77 -6 87) -54]
Test Case: 921 | Input/Output: [(-50 23 27 -73) -73]
Test Case: 922 | Input/Output: [(95 39 73 -65) -65]
Test Case: 923 | Input/Output: [(-43 26 -76 -27) -76]
Test Case: 924 | Input/Output: [(37 -51 -70 62) -70]
Test Case: 925 | Input/Output: [(76 21 99 98) 21]
Test Case: 926 | Input/Output: [(89 -16 78 40) -16]
Test Case: 927 | Input/Output: [(95 -17 87 2) -17]
Test Case: 928 | Input/Output: [(-18 -98 -60 32) -98]
Test Case: 929 | Input/Output: [(44 72 -45 -97) -97]
Test Case: 930 | Input/Output: [(-40 -95 6 81) -95]
Test Case: 931 | Input/Output: [(64 -49 1 -35) -49]
Test Case: 932 | Input/Output: [(-18 -54 63 80) -54]
Test Case: 933 | Input/Output: [(69 -47 -21 -34) -47]
Test Case: 934 | Input/Output: [(-28 -65 44 35) -65]
Test Case: 935 | Input/Output: [(34 -32 -99 -25) -99]
Test Case: 936 | Input/Output: [(57 98 -92 -55) -92]
Test Case: 937 | Input/Output: [(75 -12 -48 61) -48]
Test Case: 938 | Input/Output: [(25 29 44 -87) -87]
Test Case: 939 | Input/Output: [(-81 -86 -42 -88) -88]
Test Case: 940 | Input/Output: [(66 -80 -94 -26) -94]
Test Case: 941 | Input/Output: [(52 76 -62 18) -62]
Test Case: 942 | Input/Output: [(80 -18 -1 65) -18]
Test Case: 943 | Input/Output: [(-46 67 49 88) -46]
Test Case: 944 | Input/Output: [(67 56 80 -21) -21]
Test Case: 945 | Input/Output: [(37 -99 65 -59) -99]
Test Case: 946 | Input/Output: [(41 4 -36 -17) -36]
Test Case: 947 | Input/Output: [(16 89 64 -12) -12]
Test Case: 948 | Input/Output: [(-99 68 -10 -65) -99]
Test Case: 949 | Input/Output: [(78 -62 -40 8) -62]
Test Case: 950 | Input/Output: [(-9 48 81 -28) -28]
Test Case: 951 | Input/Output: [(-79 -55 91 26) -79]
Test Case: 952 | Input/Output: [(86 67 -87 -16) -87]
Test Case: 953 | Input/Output: [(-30 5 -87 -16) -87]
Test Case: 954 | Input/Output: [(98 7 -76 11) -76]
Test Case: 955 | Input/Output: [(-7 51 -13 -30) -30]
Test Case: 956 | Input/Output: [(-61 93 -25 -71) -71]
Test Case: 957 | Input/Output: [(-26 -48 12 32) -48]
Test Case: 958 | Input/Output: [(-99 39 67 11) -99]
Test Case: 959 | Input/Output: [(-90 -95 69 -34) -95]
Test Case: 960 | Input/Output: [(-26 -60 49 7) -60]
Test Case: 961 | Input/Output: [(-43 13 44 26) -43]
Test Case: 962 | Input/Output: [(-38 -92 91 43) -92]
Test Case: 963 | Input/Output: [(80 20 47 -9) -9]
Test Case: 964 | Input/Output: [(65 73 82 -76) -76]
Test Case: 965 | Input/Output: [(-97 -11 -83 -5) -97]
Test Case: 966 | Input/Output: [(-46 9 37 -74) -74]
Test Case: 967 | Input/Output: [(34 -61 61 44) -61]
Test Case: 968 | Input/Output: [(20 10 13 -23) -23]
Test Case: 969 | Input/Output: [(83 -28 51 96) -28]
Test Case: 970 | Input/Output: [(66 17 31 -3) -3]
Test Case: 971 | Input/Output: [(92 -9 94 23) -9]
Test Case: 972 | Input/Output: [(-71 -95 77 53) -95]
Test Case: 973 | Input/Output: [(18 59 -8 2) -8]
Test Case: 974 | Input/Output: [(31 -88 16 86) -88]
Test Case: 975 | Input/Output: [(-2 -26 -22 -48) -48]
Test Case: 976 | Input/Output: [(-59 -45 75 -6) -59]
Test Case: 977 | Input/Output: [(-51 -38 -55 55) -55]
Test Case: 978 | Input/Output: [(81 61 -85 82) -85]
Test Case: 979 | Input/Output: [(-53 -19 16 -8) -53]
Test Case: 980 | Input/Output: [(87 -64 64 -98) -98]
Test Case: 981 | Input/Output: [(22 21 98 63) 21]
Test Case: 982 | Input/Output: [(64 -99 76 83) -99]
Test Case: 983 | Input/Output: [(77 73 -35 28) -35]
Test Case: 984 | Input/Output: [(58 42 -32 -60) -60]
Test Case: 985 | Input/Output: [(-2 42 -77 -63) -77]
Test Case: 986 | Input/Output: [(-45 36 27 11) -45]
Test Case: 987 | Input/Output: [(-21 -53 -25 -73) -73]
Test Case: 988 | Input/Output: [(15 97 14 -61) -61]
Test Case: 989 | Input/Output: [(54 9 41 -33) -33]
Test Case: 990 | Input/Output: [(96 55 -95 69) -95]
Test Case: 991 | Input/Output: [(-41 41 88 13) -41]
Test Case: 992 | Input/Output: [(-29 42 26 73) -29]
Test Case: 993 | Input/Output: [(33 -91 57 72) -91]
Test Case: 994 | Input/Output: [(-29 91 -95 89) -95]
Test Case: 995 | Input/Output: [(20 48 68 26) 20]
Test Case: 996 | Input/Output: [(8 13 30 -82) -82]
Test Case: 997 | Input/Output: [(86 16 88 17) 16]
Test Case: 998 | Input/Output: [(33 71 -25 82) -25]
Test Case: 999 | Input/Output: [(-35 21 70 -20) -35]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:uniform-addition-and-deletion 1.0}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 3000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
random-screen = false
random-seed = 113 71 -56 42 -6 -30 72 -79 -68 -81 -60 -40 41 -37 -54 35
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-83 -83 -83 -46] -83] [[4 4 34 4] 4] [[93 93 93 -50] -50] [[-12 -12 -12 95] -12] [[-41 -41 -41 54] -41] [[-94 -94 -94 -55] -94] [[-90 -90 7 -90] -90] [[33 33 33 33] 33] [[43 -77 43 43] -77] [[11 11 11 -60] -60] [(61 61 61 61) 61] [(68 68 68 68) 68] [(64 64 64 64) 64] [(79 79 79 79) 79] [(49 49 49 49) 49] [(76 58 88 18) 18] [(97 85 40 25) 25] [(6 59 53 25) 6] [(41 15 17 9) 9] [(68 26 45 80) 26] [(54 4 33 34) 4] [(14 71 16 33) 14] [(69 59 1 30) 1] [(54 92 87 69) 54] [(73 77 50 83) 50] [(60 45 90 0) 0] [(88 18 59 25) 18] [(87 24 84 1) 1] [(75 54 39 55) 39] [(11 40 65 16) 11] [(97 57 44 3) 3] [(55 95 55 98) 55] [(12 5 78 76) 5] [(68 10 90 80) 10] [(0 1 77 32) 0] [(24 -97 87 -6) -97] [(77 -17 56 12) -17] [(73 -49 -18 -36) -49] [(-90 -100 93 -29) -100] [(-28 53 -39 15) -39] [(-95 -17 81 -35) -95] [(-61 56 48 -16) -61] [(-6 -24 -65 -59) -65] [(-8 39 -31 95) -31] [(-92 -63 -39 45) -92] [(19 52 78 19) 19] [(2 -77 76 -50) -77] [(-89 66 60 21) -89] [(76 -11 -4 -87) -87] [(50 35 -25 17) -25] [(-33 99 -67 -3) -67] [(-71 -66 -32 16) -71] [(-5 28 23 3) -5] [(50 -20 -66 -95) -95] [(30 -76 -43 -49) -76] [(24 84 -60 -54) -60] [(-86 -57 38 37) -86] [(-97 -50 99 -41) -97] [(-6 -39 49 93) -39] [(37 21 -58 -72) -72] [(39 -19 78 30) -19] [(-42 74 -21 98) -42] [(0 -74 -75 94) -75] [(65 -4 -70 33) -70] [(54 -11 -92 -59) -92] [(42 62 24 79) 24] [(-100 51 23 -97) -100] [(53 26 -40 45) -40] [(-60 3 -26 31) -60] [(26 -64 20 48) -64] [(60 81 50 2) 2] [(38 23 -42 -76) -76] [(-73 -12 82 8) -73] [(-100 -91 64 -60) -100] [(-54 29 66 66) -54] [(-56 -1 48 -66) -66] [(-71 -15 40 -79) -79] [(-21 -94 33 56) -94] [(-95 -74 73 51) -95] [(81 -81 -11 48) -81] [(-99 79 58 -77) -99] [(12 10 -22 -47) -47] [(-98 -17 19 -21) -98] [(99 -44 23 -44) -44] [(71 48 100 53) 48] [(64 83 -85 -58) -85] [(12 -3 -26 -60) -60] [(91 -52 83 -54) -54] [(-50 -96 73 -8) -96] [(45 -26 -75 -5) -75] [(56 -12 -91 51) -91] [(72 -65 -19 78) -65] [(-14 -64 -33 65) -64] [(83 90 84 33) 33] [(47 -67 -100 13) -100])
uniform-addition-and-deletion-rate = 0.09
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 644
Test mean error for best: 0.64400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -83                 | Program output: -46                
Correct output: 4                   | Program output: 4                  
Correct output: -50                 | Program output: -50                
Correct output: -12                 | Program output: 95                 
Correct output: -41                 | Program output: 54                 
Correct output: -94                 | Program output: -55                
Correct output: -90                 | Program output: -90                
Correct output: 33                  | Program output: 33                 
Correct output: -77                 | Program output: 43                 
Correct output: -60                 | Program output: -60                
Correct output: 61                  | Program output: 61                 
Correct output: 68                  | Program output: 68                 
Correct output: 64                  | Program output: 64                 
Correct output: 79                  | Program output: 79                 
Correct output: 49                  | Program output: 49                 
Correct output: 18                  | Program output: 18                 
Correct output: 25                  | Program output: 25                 
Correct output: 6                   | Program output: 25                 
Correct output: 9                   | Program output: 9                  
Correct output: 26                  | Program output: 80                 
Correct output: 4                   | Program output: 34                 
Correct output: 14                  | Program output: 33                 
Correct output: 1                   | Program output: 30                 
Correct output: 54                  | Program output: 69                 
Correct output: 50                  | Program output: 83                 
Correct output: 0                   | Program output: 0                  
Correct output: 18                  | Program output: 25                 
Correct output: 1                   | Program output: 1                  
Correct output: 39                  | Program output: 55                 
Correct output: 11                  | Program output: 16                 
Correct output: 3                   | Program output: 3                  
Correct output: 55                  | Program output: 98                 
Correct output: 5                   | Program output: 76                 
Correct output: 10                  | Program output: 80                 
Correct output: 0                   | Program output: 32                 
Correct output: -97                 | Program output: -6                 
Correct output: -17                 | Program output: 12                 
Correct output: -49                 | Program output: -36                
Correct output: -100                | Program output: -29                
Correct output: -39                 | Program output: 15                 
Correct output: -95                 | Program output: -35                
Correct output: -61                 | Program output: -16                
Correct output: -65                 | Program output: -59                
Correct output: -31                 | Program output: 95                 
Correct output: -92                 | Program output: 45                 
Correct output: 19                  | Program output: 19                 
Correct output: -77                 | Program output: -50                
Correct output: -89                 | Program output: 21                 
Correct output: -87                 | Program output: -87                
Correct output: -25                 | Program output: 17                 
Correct output: -67                 | Program output: -3                 
Correct output: -71                 | Program output: 16                 
Correct output: -5                  | Program output: 3                  
Correct output: -95                 | Program output: -95                
Correct output: -76                 | Program output: -49                
Correct output: -60                 | Program output: -54                
Correct output: -86                 | Program output: 37                 
Correct output: -97                 | Program output: -41                
Correct output: -39                 | Program output: 93                 
Correct output: -72                 | Program output: -72                
Correct output: -19                 | Program output: 30                 
Correct output: -42                 | Program output: 98                 
Correct output: -75                 | Program output: 94                 
Correct output: -70                 | Program output: 33                 
Correct output: -92                 | Program output: -59                
Correct output: 24                  | Program output: 79                 
Correct output: -100                | Program output: -97                
Correct output: -40                 | Program output: 45                 
Correct output: -60                 | Program output: 31                 
Correct output: -64                 | Program output: 48                 
Correct output: 2                   | Program output: 2                  
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: 8                  
Correct output: -100                | Program output: -60                
Correct output: -54                 | Program output: 66                 
Correct output: -66                 | Program output: -66                
Correct output: -79                 | Program output: -79                
Correct output: -94                 | Program output: 56                 
Correct output: -95                 | Program output: 51                 
Correct output: -81                 | Program output: 48                 
Correct output: -99                 | Program output: -77                
Correct output: -47                 | Program output: -47                
Correct output: -98                 | Program output: -21                
Correct output: -44                 | Program output: -44                
Correct output: 48                  | Program output: 53                 
Correct output: -85                 | Program output: -58                
Correct output: -60                 | Program output: -60                
Correct output: -54                 | Program output: -54                
Correct output: -96                 | Program output: -8                 
Correct output: -75                 | Program output: -5                 
Correct output: -91                 | Program output: 51                 
Correct output: -65                 | Program output: 78                 
Correct output: -64                 | Program output: 65                 
Correct output: 33                  | Program output: 33                 
Correct output: -100                | Program output: 13                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_when} {:close 0, :instruction boolean_yank} {:close 0, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction integer_min})
Lexicase best program: (exec_when () boolean_yank in4 print_integer integer_min)
Lexicase best errors: [1 0 0 1 1 1 0 0 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 7
Percent parens: 0.286
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_when} {:close 0, :instruction boolean_yank} {:close 0, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction integer_min})
Zero cases best program: (exec_when () boolean_yank in4 print_integer integer_min)
Zero cases best errors: [1 0 0 1 1 1 0 0 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 7
Percent parens: 0.286
--- Lexicase Population Statistics ---
Count of elite individuals by case: (2 2 6 3 2 2 12 2 1000 1000)
Population mean number of elite cases: 2.03
Count of perfect (error zero) individuals by case: (2 2 6 3 2 2 12 2 0 0)
Population mean number of perfect (error zero) cases: 0.03
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_do*range} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_div} {:close 0, :instruction 24} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_rot} {:close 1, :instruction tagged_217} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_k} {:close 2, :instruction exec_k} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_when} {:close 1, :instruction integer_div} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_eq} {:close 0, :instruction tagged_785} {:close 0, :instruction -16} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_while} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4})
Best program: (exec_do*range () integer_mult integer_div 24 in4 boolean_dup_times boolean_rot tagged_217 integer_dup_times exec_k (exec_k () () exec_pop (boolean_dup_times) exec_when (exec_do*while (integer_dup boolean_pop exec_when () integer_div) exec_dup_items in4 print_integer boolean_eq) tagged_785 -16 integer_fromboolean exec_when (boolean_eq) exec_while (exec_k_when_autoconstructing () (in4))) ())
Errors: [1 0 0 1 1 1 0 0 1 1]
Total: 6
Mean: 0.6
Genome size: 31
Size: 45
Percent parens: 0.311
--- Population Statistics ---
Average total errors in population: 9.969
Median total errors in population: 10
Error averages by case: (0.998 0.998 0.994 0.997 0.998 0.998 0.988 0.998 1.0 1.0)
Error minima by case: (0 0 0 0 0 0 0 0 1 1)
Average genome size in population (length): 50.977
Average program size in population (points): 70.37
Average percent parens in population: 0.282
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.999
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.999
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.257
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 498503
--- Timings ---
Current time: 1559594079924 milliseconds
Total Time:           2.6 seconds
Initialization:       0.1 seconds,  3.9%
Reproduction:         0.8 seconds, 30.7%
Fitness Testing:      1.7 seconds, 65.5%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 658
Test mean error for best: 0.65800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -83                 | Program output: -83                
Correct output: 4                   | Program output: 4                  
Correct output: -50                 | Program output: 93                 
Correct output: -12                 | Program output: -12                
Correct output: -41                 | Program output: -41                
Correct output: -94                 | Program output: -94                
Correct output: -90                 | Program output: -90                
Correct output: 33                  | Program output: 33                 
Correct output: -77                 | Program output: -77                
Correct output: -60                 | Program output: 11                 
Correct output: 61                  | Program output: 61                 
Correct output: 68                  | Program output: 68                 
Correct output: 64                  | Program output: 64                 
Correct output: 79                  | Program output: 79                 
Correct output: 49                  | Program output: 49                 
Correct output: 18                  | Program output: 58                 
Correct output: 25                  | Program output: 85                 
Correct output: 6                   | Program output: 59                 
Correct output: 9                   | Program output: 15                 
Correct output: 26                  | Program output: 26                 
Correct output: 4                   | Program output: 4                  
Correct output: 14                  | Program output: 71                 
Correct output: 1                   | Program output: 59                 
Correct output: 54                  | Program output: 92                 
Correct output: 50                  | Program output: 77                 
Correct output: 0                   | Program output: 45                 
Correct output: 18                  | Program output: 18                 
Correct output: 1                   | Program output: 24                 
Correct output: 39                  | Program output: 54                 
Correct output: 11                  | Program output: 40                 
Correct output: 3                   | Program output: 57                 
Correct output: 55                  | Program output: 95                 
Correct output: 5                   | Program output: 5                  
Correct output: 10                  | Program output: 10                 
Correct output: 0                   | Program output: 1                  
Correct output: -97                 | Program output: -97                
Correct output: -17                 | Program output: -17                
Correct output: -49                 | Program output: -49                
Correct output: -100                | Program output: -100               
Correct output: -39                 | Program output: 53                 
Correct output: -95                 | Program output: -17                
Correct output: -61                 | Program output: 56                 
Correct output: -65                 | Program output: -24                
Correct output: -31                 | Program output: 39                 
Correct output: -92                 | Program output: -63                
Correct output: 19                  | Program output: 52                 
Correct output: -77                 | Program output: -77                
Correct output: -89                 | Program output: 66                 
Correct output: -87                 | Program output: -11                
Correct output: -25                 | Program output: 35                 
Correct output: -67                 | Program output: 99                 
Correct output: -71                 | Program output: -66                
Correct output: -5                  | Program output: 28                 
Correct output: -95                 | Program output: -20                
Correct output: -76                 | Program output: -76                
Correct output: -60                 | Program output: 84                 
Correct output: -86                 | Program output: -57                
Correct output: -97                 | Program output: -50                
Correct output: -39                 | Program output: -39                
Correct output: -72                 | Program output: 21                 
Correct output: -19                 | Program output: -19                
Correct output: -42                 | Program output: 74                 
Correct output: -75                 | Program output: -74                
Correct output: -70                 | Program output: -4                 
Correct output: -92                 | Program output: -11                
Correct output: 24                  | Program output: 62                 
Correct output: -100                | Program output: 51                 
Correct output: -40                 | Program output: 26                 
Correct output: -60                 | Program output: 3                  
Correct output: -64                 | Program output: -64                
Correct output: 2                   | Program output: 81                 
Correct output: -76                 | Program output: 23                 
Correct output: -73                 | Program output: -12                
Correct output: -100                | Program output: -91                
Correct output: -54                 | Program output: 29                 
Correct output: -66                 | Program output: -1                 
Correct output: -79                 | Program output: -15                
Correct output: -94                 | Program output: -94                
Correct output: -95                 | Program output: -74                
Correct output: -81                 | Program output: -81                
Correct output: -99                 | Program output: 79                 
Correct output: -47                 | Program output: 10                 
Correct output: -98                 | Program output: -17                
Correct output: -44                 | Program output: -44                
Correct output: 48                  | Program output: 48                 
Correct output: -85                 | Program output: 83                 
Correct output: -60                 | Program output: -3                 
Correct output: -54                 | Program output: -52                
Correct output: -96                 | Program output: -96                
Correct output: -75                 | Program output: -26                
Correct output: -91                 | Program output: -12                
Correct output: -65                 | Program output: -65                
Correct output: -64                 | Program output: -64                
Correct output: 33                  | Program output: 90                 
Correct output: -100                | Program output: -67                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 1, :instruction exec_rot} {:close 0, :instruction 24} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_rot} {:close 1, :instruction tagged_217} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_k} {:close 2, :instruction exec_k} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_when} {:close 1, :instruction integer_div} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_eq} {:close 0, :instruction tagged_785} {:close 0, :instruction -16} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_when} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_while} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4})
Lexicase best program: (integer_mult exec_noop integer_div exec_rot () (24 boolean_and in4 boolean_dup_times boolean_rot tagged_217) (integer_dup_times exec_k (exec_k () () boolean_pop exec_pop (boolean_dup_times) exec_when (exec_do*while (integer_dup boolean_pop exec_when () integer_div) exec_dup_items in2 print_integer boolean_eq) tagged_785 -16 integer_mult) (integer_fromboolean exec_when (exec_pop () exec_while (exec_k_when_autoconstructing () (in4))))))
Lexicase best errors: [1 1 1 0 0 0 1 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 52
Percent parens: 0.327
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 1, :instruction exec_rot} {:close 0, :instruction 24} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_rot} {:close 1, :instruction tagged_217} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_k} {:close 2, :instruction exec_k} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_when} {:close 1, :instruction integer_div} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_eq} {:close 0, :instruction tagged_785} {:close 0, :instruction -16} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_when} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_while} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4})
Zero cases best program: (integer_mult exec_noop integer_div exec_rot () (24 boolean_and in4 boolean_dup_times boolean_rot tagged_217) (integer_dup_times exec_k (exec_k () () boolean_pop exec_pop (boolean_dup_times) exec_when (exec_do*while (integer_dup boolean_pop exec_when () integer_div) exec_dup_items in2 print_integer boolean_eq) tagged_785 -16 integer_mult) (integer_fromboolean exec_when (exec_pop () exec_while (exec_k_when_autoconstructing () (in4))))))
Zero cases best errors: [1 1 1 0 0 0 1 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 52
Percent parens: 0.327
--- Lexicase Population Statistics ---
Count of elite individuals by case: (240 89 238 39 39 2 250 529 39 368)
Population mean number of elite cases: 1.83
Count of perfect (error zero) individuals by case: (240 89 238 39 39 2 250 529 39 368)
Population mean number of perfect (error zero) cases: 1.83
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 1, :instruction boolean_rot} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_eq} {:close 1, :instruction in1} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction tag_exec_818} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_while} {:close 1, :instruction in3} {:close 0, :instruction print_newline} {:close 2, :instruction exec_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_max} {:close 1, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_min} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction print_newline} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_fromboolean})
Best program: (integer_add integer_fromboolean boolean_rot boolean_empty integer_yankdup integer_shove exec_s_when_autoconstructing (in3 integer_sub integer_mult exec_stackdepth) (in2 in3 boolean_rot) (boolean_and) integer_pop print_integer boolean_flush exec_s (integer_yank boolean_or boolean_dup_times) (boolean_empty) (boolean_eq in1) boolean_rot exec_empty boolean_frominteger boolean_or exec_pop (integer_min exec_while (boolean_flush boolean_frominteger exec_s_when_autoconstructing (tag_exec_818 () integer_pop exec_shove (exec_while (in3) print_newline exec_flush)) (print_boolean exec_do*range (integer_max integer_add) integer_stackdepth) (exec_pop (exec_rot (integer_stackdepth exec_do*while () boolean_invert_first_then_and integer_gte integer_min) (integer_sub in1 boolean_frominteger print_newline integer_stackdepth) (integer_gte boolean_dup_times) boolean_swap) integer_fromboolean))))
Errors: [1 1 1 0 0 0 1 0 0 0]
Total: 4
Mean: 0.4
Genome size: 63
Size: 84
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 8.167
Median total errors in population: 8
Error averages by case: (0.76 0.911 0.762 0.961 0.961 0.998 0.75 0.471 0.961 0.632)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 28.339
Average program size in population (points): 39.681
Average percent parens in population: 0.262
Minimum age in population: 1.0
Maximum age in population: 1.0
Average age in population: 1.0
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 99
Genome diversity (% unique genomes):	 0.752
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 99
Syntactic diversity (% unique Push programs):	 0.752
Total error diversity:				 0.006
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.087
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 829145
--- Timings ---
Current time: 1559594081698 milliseconds
Total Time:           4.5 seconds
Initialization:       0.1 seconds,  2.2%
Reproduction:         1.8 seconds, 40.6%
Fitness Testing:      2.1 seconds, 48.0%
Report:               0.4 seconds,  9.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 632
Test mean error for best: 0.63200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -83                 | Program output: -83                
Correct output: 4                   | Program output: 4                  
Correct output: -50                 | Program output: 93                 
Correct output: -12                 | Program output: -12                
Correct output: -41                 | Program output: -41                
Correct output: -94                 | Program output: -94                
Correct output: -90                 | Program output: -90                
Correct output: 33                  | Program output: 33                 
Correct output: -77                 | Program output: 43                 
Correct output: -60                 | Program output: 11                 
Correct output: 61                  | Program output: 61                 
Correct output: 68                  | Program output: 68                 
Correct output: 64                  | Program output: 64                 
Correct output: 79                  | Program output: 79                 
Correct output: 49                  | Program output: 49                 
Correct output: 18                  | Program output: 76                 
Correct output: 25                  | Program output: 97                 
Correct output: 6                   | Program output: 6                  
Correct output: 9                   | Program output: 41                 
Correct output: 26                  | Program output: 68                 
Correct output: 4                   | Program output: 54                 
Correct output: 14                  | Program output: 14                 
Correct output: 1                   | Program output: 69                 
Correct output: 54                  | Program output: 54                 
Correct output: 50                  | Program output: 73                 
Correct output: 0                   | Program output: 60                 
Correct output: 18                  | Program output: 88                 
Correct output: 1                   | Program output: 87                 
Correct output: 39                  | Program output: 75                 
Correct output: 11                  | Program output: 11                 
Correct output: 3                   | Program output: 97                 
Correct output: 55                  | Program output: 55                 
Correct output: 5                   | Program output: 12                 
Correct output: 10                  | Program output: 68                 
Correct output: 0                   | Program output: 0                  
Correct output: -97                 | Program output: 24                 
Correct output: -17                 | Program output: 77                 
Correct output: -49                 | Program output: 73                 
Correct output: -100                | Program output: -90                
Correct output: -39                 | Program output: -28                
Correct output: -95                 | Program output: -95                
Correct output: -61                 | Program output: -61                
Correct output: -65                 | Program output: -6                 
Correct output: -31                 | Program output: -8                 
Correct output: -92                 | Program output: -92                
Correct output: 19                  | Program output: 19                 
Correct output: -77                 | Program output: 2                  
Correct output: -89                 | Program output: -89                
Correct output: -87                 | Program output: 76                 
Correct output: -25                 | Program output: 50                 
Correct output: -67                 | Program output: -33                
Correct output: -71                 | Program output: -71                
Correct output: -5                  | Program output: -5                 
Correct output: -95                 | Program output: 50                 
Correct output: -76                 | Program output: 30                 
Correct output: -60                 | Program output: 24                 
Correct output: -86                 | Program output: -86                
Correct output: -97                 | Program output: -97                
Correct output: -39                 | Program output: -6                 
Correct output: -72                 | Program output: 37                 
Correct output: -19                 | Program output: 39                 
Correct output: -42                 | Program output: -42                
Correct output: -75                 | Program output: 0                  
Correct output: -70                 | Program output: 65                 
Correct output: -92                 | Program output: 54                 
Correct output: 24                  | Program output: 42                 
Correct output: -100                | Program output: -100               
Correct output: -40                 | Program output: 53                 
Correct output: -60                 | Program output: -60                
Correct output: -64                 | Program output: 26                 
Correct output: 2                   | Program output: 60                 
Correct output: -76                 | Program output: 38                 
Correct output: -73                 | Program output: -73                
Correct output: -100                | Program output: -100               
Correct output: -54                 | Program output: -54                
Correct output: -66                 | Program output: -56                
Correct output: -79                 | Program output: -71                
Correct output: -94                 | Program output: -21                
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: 81                 
Correct output: -99                 | Program output: -99                
Correct output: -47                 | Program output: 12                 
Correct output: -98                 | Program output: -98                
Correct output: -44                 | Program output: 99                 
Correct output: 48                  | Program output: 71                 
Correct output: -85                 | Program output: 64                 
Correct output: -60                 | Program output: 12                 
Correct output: -54                 | Program output: 91                 
Correct output: -96                 | Program output: -50                
Correct output: -75                 | Program output: 45                 
Correct output: -91                 | Program output: 56                 
Correct output: -65                 | Program output: 72                 
Correct output: -64                 | Program output: -14                
Correct output: 33                  | Program output: 83                 
Correct output: -100                | Program output: 47                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 0, :instruction integer_stackdepth})
Lexicase best program: (in1 print_integer boolean_empty integer_div integer_stackdepth)
Lexicase best errors: [1 0 1 1 1 0 0 1 1 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 6
Percent parens: 0.167
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div} {:close 0, :instruction integer_stackdepth})
Zero cases best program: (in1 print_integer boolean_empty integer_div integer_stackdepth)
Zero cases best errors: [1 0 1 1 1 0 0 1 1 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 6
Percent parens: 0.167
--- Lexicase Population Statistics ---
Count of elite individuals by case: (85 290 97 236 88 302 206 96 236 206)
Population mean number of elite cases: 1.84
Count of perfect (error zero) individuals by case: (85 290 97 236 88 302 206 96 236 206)
Population mean number of perfect (error zero) cases: 1.84
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_stackdepth})
Best program: (in2 in1 print_integer boolean_empty integer_stackdepth)
Errors: [1 0 1 1 1 0 0 1 1 0]
Total: 6
Mean: 0.6
Genome size: 5
Size: 6
Percent parens: 0.167
--- Population Statistics ---
Average total errors in population: 8.158
Median total errors in population: 8
Error averages by case: (0.915 0.71 0.903 0.764 0.912 0.698 0.794 0.904 0.764 0.794)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 34.472
Average program size in population (points): 47.28
Average percent parens in population: 0.260
Minimum age in population: 2.0
Maximum age in population: 2.0
Average age in population: 2.0
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 25
Genome diversity (% unique genomes):	 0.911
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 25
Syntactic diversity (% unique Push programs):	 0.911
Total error diversity:				 0.005
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.118
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1167847
--- Timings ---
Current time: 1559594083625 milliseconds
Total Time:           6.5 seconds
Initialization:       0.1 seconds,  1.5%
Reproduction:         3.2 seconds, 48.7%
Fitness Testing:      2.6 seconds, 39.4%
Report:               0.7 seconds, 10.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 562
Test mean error for best: 0.56200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -83                 | Program output: -83                
Correct output: 4                   | Program output: 4                  
Correct output: -50                 | Program output: 93                 
Correct output: -12                 | Program output: -12                
Correct output: -41                 | Program output: -41                
Correct output: -94                 | Program output: -94                
Correct output: -90                 | Program output: -90                
Correct output: 33                  | Program output: 33                 
Correct output: -77                 | Program output: -77                
Correct output: -60                 | Program output: 11                 
Correct output: 61                  | Program output: 61                 
Correct output: 68                  | Program output: 68                 
Correct output: 64                  | Program output: 64                 
Correct output: 79                  | Program output: 79                 
Correct output: 49                  | Program output: 49                 
Correct output: 18                  | Program output: 58                 
Correct output: 25                  | Program output: 85                 
Correct output: 6                   | Program output: 59                 
Correct output: 9                   | Program output: 15                 
Correct output: 26                  | Program output: 26                 
Correct output: 4                   | Program output: 4                  
Correct output: 14                  | Program output: 71                 
Correct output: 1                   | Program output: 11                 
Correct output: 54                  | Program output: 92                 
Correct output: 50                  | Program output: 77                 
Correct output: 0                   | Program output: 45                 
Correct output: 18                  | Program output: 18                 
Correct output: 1                   | Program output: 24                 
Correct output: 39                  | Program output: 54                 
Correct output: 11                  | Program output: 40                 
Correct output: 3                   | Program output: 57                 
Correct output: 55                  | Program output: 95                 
Correct output: 5                   | Program output: 5                  
Correct output: 10                  | Program output: 10                 
Correct output: 0                   | Program output: 1                  
Correct output: -97                 | Program output: -97                
Correct output: -17                 | Program output: -17                
Correct output: -49                 | Program output: -18                
Correct output: -100                | Program output: -100               
Correct output: -39                 | Program output: -39                
Correct output: -95                 | Program output: -17                
Correct output: -61                 | Program output: 56                 
Correct output: -65                 | Program output: -65                
Correct output: -31                 | Program output: -31                
Correct output: -92                 | Program output: -39                
Correct output: 19                  | Program output: 52                 
Correct output: -77                 | Program output: -77                
Correct output: -89                 | Program output: 66                 
Correct output: -87                 | Program output: -4                 
Correct output: -25                 | Program output: -25                
Correct output: -67                 | Program output: -67                
Correct output: -71                 | Program output: -32                
Correct output: -5                  | Program output: 28                 
Correct output: -95                 | Program output: -66                
Correct output: -76                 | Program output: -43                
Correct output: -60                 | Program output: -60                
Correct output: -86                 | Program output: -57                
Correct output: -97                 | Program output: -50                
Correct output: -39                 | Program output: -39                
Correct output: -72                 | Program output: -58                
Correct output: -19                 | Program output: -19                
Correct output: -42                 | Program output: -21                
Correct output: -75                 | Program output: -75                
Correct output: -70                 | Program output: -70                
Correct output: -92                 | Program output: -92                
Correct output: 24                  | Program output: 62                 
Correct output: -100                | Program output: 51                 
Correct output: -40                 | Program output: -40                
Correct output: -60                 | Program output: -26                
Correct output: -64                 | Program output: -64                
Correct output: 2                   | Program output: 81                 
Correct output: -76                 | Program output: -42                
Correct output: -73                 | Program output: -12                
Correct output: -100                | Program output: -91                
Correct output: -54                 | Program output: 29                 
Correct output: -66                 | Program output: -1                 
Correct output: -79                 | Program output: -15                
Correct output: -94                 | Program output: -94                
Correct output: -95                 | Program output: -74                
Correct output: -81                 | Program output: -11                
Correct output: -99                 | Program output: 79                 
Correct output: -47                 | Program output: -22                
Correct output: -98                 | Program output: -17                
Correct output: -44                 | Program output: -44                
Correct output: 48                  | Program output: 48                 
Correct output: -85                 | Program output: -85                
Correct output: -60                 | Program output: -26                
Correct output: -54                 | Program output: -52                
Correct output: -96                 | Program output: -96                
Correct output: -75                 | Program output: -75                
Correct output: -91                 | Program output: -91                
Correct output: -65                 | Program output: -19                
Correct output: -64                 | Program output: -33                
Correct output: 33                  | Program output: 90                 
Correct output: -100                | Program output: -100               
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 1, :instruction boolean_rot} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_eq} {:close 1, :instruction in1} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_min} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction tag_exec_818} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_shove} {:close 2, :instruction exec_if} {:close 2, :instruction exec_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_max} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_min} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_newline} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_fromboolean})
Lexicase best program: (integer_add exec_k_when_autoconstructing (integer_fromboolean boolean_empty integer_yankdup integer_shove exec_s_when_autoconstructing (in3 integer_sub integer_mult exec_stackdepth) (in2 in3 boolean_rot) (boolean_and) integer_dup_times integer_pop print_integer boolean_flush exec_s (integer_yank integer_min boolean_dup_times) (boolean_eq in1) (boolean_rot) exec_empty boolean_frominteger boolean_or exec_shove (integer_min exec_while (boolean_flush boolean_frominteger exec_s_when_autoconstructing (tag_exec_818 () integer_pop exec_shove (exec_if () () exec_flush)) (exec_shove (print_boolean exec_do*range (integer_max integer_stackdepth) exec_pop (exec_rot (boolean_shove exec_do*while () boolean_dup integer_gte integer_min) (integer_sub print_integer boolean_yank print_newline integer_stackdepth) (boolean_dup_times) boolean_swap) integer_fromboolean)) ()))) ())
Lexicase best errors: [0 1 0 0 1 0 0 1 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 85
Percent parens: 0.294
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 1, :instruction boolean_rot} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_eq} {:close 1, :instruction in1} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_min} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction tag_exec_818} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_shove} {:close 2, :instruction exec_if} {:close 2, :instruction exec_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_max} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_min} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_newline} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_fromboolean})
Zero cases best program: (integer_add exec_k_when_autoconstructing (integer_fromboolean boolean_empty integer_yankdup integer_shove exec_s_when_autoconstructing (in3 integer_sub integer_mult exec_stackdepth) (in2 in3 boolean_rot) (boolean_and) integer_dup_times integer_pop print_integer boolean_flush exec_s (integer_yank integer_min boolean_dup_times) (boolean_eq in1) (boolean_rot) exec_empty boolean_frominteger boolean_or exec_shove (integer_min exec_while (boolean_flush boolean_frominteger exec_s_when_autoconstructing (tag_exec_818 () integer_pop exec_shove (exec_if () () exec_flush)) (exec_shove (print_boolean exec_do*range (integer_max integer_stackdepth) exec_pop (exec_rot (boolean_shove exec_do*while () boolean_dup integer_gte integer_min) (integer_sub print_integer boolean_yank print_newline integer_stackdepth) (boolean_dup_times) boolean_swap) integer_fromboolean)) ()))) ())
Zero cases best errors: [0 1 0 0 1 0 0 1 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 85
Percent parens: 0.294
--- Lexicase Population Statistics ---
Count of elite individuals by case: (679 68 139 136 190 141 141 259 259 259)
Population mean number of elite cases: 2.27
Count of perfect (error zero) individuals by case: (679 68 139 136 190 141 141 259 259 259)
Population mean number of perfect (error zero) cases: 2.27
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 1, :instruction boolean_rot} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_eq} {:close 1, :instruction in1} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction tag_exec_818} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in3} {:close 0, :instruction integer_empty} {:close 2, :instruction exec_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_max} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 1, :instruction integer_min} {:close 0, :instruction integer_sub} {:close 0, :instruction print_newline} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_fromboolean})
Best program: (integer_add exec_k_when_autoconstructing (integer_fromboolean boolean_empty integer_yankdup integer_shove exec_s_when_autoconstructing (in3 integer_sub integer_mult boolean_invert_first_then_and exec_stackdepth) (boolean_dup in2 in3 boolean_rot) (boolean_and) integer_dup_times integer_pop print_integer boolean_flush exec_s (integer_yank exec_s (boolean_or boolean_dup_times) (boolean_eq in1) (boolean_rot) exec_empty boolean_frominteger boolean_and boolean_or exec_pop (integer_min exec_while (boolean_flush boolean_frominteger exec_s_when_autoconstructing (tag_exec_818 () boolean_empty exec_shove (integer_dup_items in3) integer_empty exec_flush) () (print_boolean exec_do*range (integer_max exec_pop (exec_rot (integer_stackdepth exec_do*while () boolean_dup in3 integer_min) (integer_sub print_newline integer_stackdepth) (integer_gte boolean_dup_times) boolean_swap) integer_fromboolean))))) () ()) ())
Errors: [0 1 0 0 1 0 0 1 1 1]
Total: 5
Mean: 0.5
Genome size: 63
Size: 88
Percent parens: 0.284
--- Population Statistics ---
Average total errors in population: 7.729
Median total errors in population: 8
Error averages by case: (0.321 0.932 0.861 0.864 0.81 0.859 0.859 0.741 0.741 0.741)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 28.661
Average program size in population (points): 38.909
Average percent parens in population: 0.251
Minimum age in population: 3.0
Maximum age in population: 3.0
Average age in population: 3.0
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 22
Genome diversity (% unique genomes):	 0.885
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 22
Syntactic diversity (% unique Push programs):	 0.885
Total error diversity:				 0.006
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.123
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 1456969
--- Timings ---
Current time: 1559594085476 milliseconds
Total Time:           8.2 seconds
Initialization:       0.1 seconds,  1.2%
Reproduction:         4.4 seconds, 53.4%
Fitness Testing:      2.9 seconds, 35.5%
Report:               0.8 seconds,  9.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 632
Test mean error for best: 0.63200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -83                 | Program output: -83                
Correct output: 4                   | Program output: 4                  
Correct output: -50                 | Program output: 93                 
Correct output: -12                 | Program output: -12                
Correct output: -41                 | Program output: -41                
Correct output: -94                 | Program output: -94                
Correct output: -90                 | Program output: -90                
Correct output: 33                  | Program output: 33                 
Correct output: -77                 | Program output: 43                 
Correct output: -60                 | Program output: 11                 
Correct output: 61                  | Program output: 61                 
Correct output: 68                  | Program output: 68                 
Correct output: 64                  | Program output: 64                 
Correct output: 79                  | Program output: 79                 
Correct output: 49                  | Program output: 49                 
Correct output: 18                  | Program output: 76                 
Correct output: 25                  | Program output: 97                 
Correct output: 6                   | Program output: 6                  
Correct output: 9                   | Program output: 41                 
Correct output: 26                  | Program output: 68                 
Correct output: 4                   | Program output: 54                 
Correct output: 14                  | Program output: 14                 
Correct output: 1                   | Program output: 69                 
Correct output: 54                  | Program output: 54                 
Correct output: 50                  | Program output: 73                 
Correct output: 0                   | Program output: 60                 
Correct output: 18                  | Program output: 88                 
Correct output: 1                   | Program output: 87                 
Correct output: 39                  | Program output: 75                 
Correct output: 11                  | Program output: 11                 
Correct output: 3                   | Program output: 97                 
Correct output: 55                  | Program output: 55                 
Correct output: 5                   | Program output: 12                 
Correct output: 10                  | Program output: 68                 
Correct output: 0                   | Program output: 0                  
Correct output: -97                 | Program output: 24                 
Correct output: -17                 | Program output: 77                 
Correct output: -49                 | Program output: 73                 
Correct output: -100                | Program output: -90                
Correct output: -39                 | Program output: -28                
Correct output: -95                 | Program output: -95                
Correct output: -61                 | Program output: -61                
Correct output: -65                 | Program output: -6                 
Correct output: -31                 | Program output: -8                 
Correct output: -92                 | Program output: -92                
Correct output: 19                  | Program output: 19                 
Correct output: -77                 | Program output: 2                  
Correct output: -89                 | Program output: -89                
Correct output: -87                 | Program output: 76                 
Correct output: -25                 | Program output: 50                 
Correct output: -67                 | Program output: -33                
Correct output: -71                 | Program output: -71                
Correct output: -5                  | Program output: -5                 
Correct output: -95                 | Program output: 50                 
Correct output: -76                 | Program output: 30                 
Correct output: -60                 | Program output: 24                 
Correct output: -86                 | Program output: -86                
Correct output: -97                 | Program output: -97                
Correct output: -39                 | Program output: -6                 
Correct output: -72                 | Program output: 37                 
Correct output: -19                 | Program output: 39                 
Correct output: -42                 | Program output: -42                
Correct output: -75                 | Program output: 0                  
Correct output: -70                 | Program output: 65                 
Correct output: -92                 | Program output: 54                 
Correct output: 24                  | Program output: 42                 
Correct output: -100                | Program output: -100               
Correct output: -40                 | Program output: 53                 
Correct output: -60                 | Program output: -60                
Correct output: -64                 | Program output: 26                 
Correct output: 2                   | Program output: 60                 
Correct output: -76                 | Program output: 38                 
Correct output: -73                 | Program output: -73                
Correct output: -100                | Program output: -100               
Correct output: -54                 | Program output: -54                
Correct output: -66                 | Program output: -56                
Correct output: -79                 | Program output: -71                
Correct output: -94                 | Program output: -21                
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: 81                 
Correct output: -99                 | Program output: -99                
Correct output: -47                 | Program output: 12                 
Correct output: -98                 | Program output: -98                
Correct output: -44                 | Program output: 99                 
Correct output: 48                  | Program output: 71                 
Correct output: -85                 | Program output: 64                 
Correct output: -60                 | Program output: 12                 
Correct output: -54                 | Program output: 91                 
Correct output: -96                 | Program output: -50                
Correct output: -75                 | Program output: 45                 
Correct output: -91                 | Program output: 56                 
Correct output: -65                 | Program output: 72                 
Correct output: -64                 | Program output: -14                
Correct output: 33                  | Program output: 83                 
Correct output: -100                | Program output: 47                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_times})
Lexicase best program: (in1 boolean_invert_first_then_and integer_lt integer_dup_times print_integer exec_dup_times ())
Lexicase best errors: [0 1 1 1 0 1 0 1 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 8
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_times})
Zero cases best program: (in1 boolean_invert_first_then_and integer_lt integer_dup_times print_integer exec_dup_times ())
Zero cases best errors: [0 1 1 1 0 1 0 1 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 8
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (263 125 82 115 618 83 263 275 263 83)
Population mean number of elite cases: 2.17
Count of perfect (error zero) individuals by case: (263 125 82 115 618 83 263 275 263 83)
Population mean number of perfect (error zero) cases: 2.17
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_empty} {:close 0, :instruction in3} {:close 1, :instruction in4} {:close 0, :instruction boolean_or})
Best program: (in1 print_integer boolean_empty in3 in4 boolean_or)
Errors: [0 1 1 1 0 1 0 1 0 1]
Total: 6
Mean: 0.6
Genome size: 6
Size: 7
Percent parens: 0.143
--- Population Statistics ---
Average total errors in population: 7.83
Median total errors in population: 7
Error averages by case: (0.737 0.875 0.918 0.885 0.382 0.917 0.737 0.725 0.737 0.917)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.668
Average program size in population (points): 48.861
Average percent parens in population: 0.252
Minimum age in population: 4.0
Maximum age in population: 4.0
Average age in population: 4.0
Median age in population: 4.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 9
Genome diversity (% unique genomes):	 0.954
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.954
Total error diversity:				 0.005
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.205
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 1764577
--- Timings ---
Current time: 1559594087188 milliseconds
Total Time:          10.1 seconds
Initialization:       0.1 seconds,  1.0%
Reproduction:         5.6 seconds, 55.9%
Fitness Testing:      3.3 seconds, 32.4%
Report:               1.1 seconds, 10.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 657
Test mean error for best: 0.65700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -83                 | Program output: -83                
Correct output: 4                   | Program output: 4                  
Correct output: -50                 | Program output: 93                 
Correct output: -12                 | Program output: -12                
Correct output: -41                 | Program output: -41                
Correct output: -94                 | Program output: -94                
Correct output: -90                 | Program output: -90                
Correct output: 33                  | Program output: 33                 
Correct output: -77                 | Program output: -77                
Correct output: -60                 | Program output: 11                 
Correct output: 61                  | Program output: 61                 
Correct output: 68                  | Program output: 68                 
Correct output: 64                  | Program output: 64                 
Correct output: 79                  | Program output: 79                 
Correct output: 49                  | Program output: 49                 
Correct output: 18                  | Program output: 58                 
Correct output: 25                  | Program output: 85                 
Correct output: 6                   | Program output: 59                 
Correct output: 9                   | Program output: 15                 
Correct output: 26                  | Program output: 26                 
Correct output: 4                   | Program output: 4                  
Correct output: 14                  | Program output: 71                 
Correct output: 1                   | Program output: 59                 
Correct output: 54                  | Program output: 92                 
Correct output: 50                  | Program output: 77                 
Correct output: 0                   | Program output: 0                  
Correct output: 18                  | Program output: 18                 
Correct output: 1                   | Program output: 24                 
Correct output: 39                  | Program output: 54                 
Correct output: 11                  | Program output: 40                 
Correct output: 3                   | Program output: 57                 
Correct output: 55                  | Program output: 95                 
Correct output: 5                   | Program output: 5                  
Correct output: 10                  | Program output: 10                 
Correct output: 0                   | Program output: 1                  
Correct output: -97                 | Program output: -97                
Correct output: -17                 | Program output: -17                
Correct output: -49                 | Program output: -49                
Correct output: -100                | Program output: -100               
Correct output: -39                 | Program output: 53                 
Correct output: -95                 | Program output: -17                
Correct output: -61                 | Program output: 56                 
Correct output: -65                 | Program output: -24                
Correct output: -31                 | Program output: 39                 
Correct output: -92                 | Program output: -63                
Correct output: 19                  | Program output: 52                 
Correct output: -77                 | Program output: -77                
Correct output: -89                 | Program output: 66                 
Correct output: -87                 | Program output: -11                
Correct output: -25                 | Program output: 35                 
Correct output: -67                 | Program output: 99                 
Correct output: -71                 | Program output: -66                
Correct output: -5                  | Program output: 28                 
Correct output: -95                 | Program output: -20                
Correct output: -76                 | Program output: -76                
Correct output: -60                 | Program output: 84                 
Correct output: -86                 | Program output: -57                
Correct output: -97                 | Program output: -50                
Correct output: -39                 | Program output: -39                
Correct output: -72                 | Program output: 21                 
Correct output: -19                 | Program output: -19                
Correct output: -42                 | Program output: 74                 
Correct output: -75                 | Program output: -74                
Correct output: -70                 | Program output: -4                 
Correct output: -92                 | Program output: -11                
Correct output: 24                  | Program output: 62                 
Correct output: -100                | Program output: 51                 
Correct output: -40                 | Program output: 26                 
Correct output: -60                 | Program output: 3                  
Correct output: -64                 | Program output: -64                
Correct output: 2                   | Program output: 81                 
Correct output: -76                 | Program output: 23                 
Correct output: -73                 | Program output: -12                
Correct output: -100                | Program output: -91                
Correct output: -54                 | Program output: 29                 
Correct output: -66                 | Program output: -1                 
Correct output: -79                 | Program output: -15                
Correct output: -94                 | Program output: -94                
Correct output: -95                 | Program output: -74                
Correct output: -81                 | Program output: -81                
Correct output: -99                 | Program output: 79                 
Correct output: -47                 | Program output: 10                 
Correct output: -98                 | Program output: -17                
Correct output: -44                 | Program output: -44                
Correct output: 48                  | Program output: 48                 
Correct output: -85                 | Program output: 83                 
Correct output: -60                 | Program output: -3                 
Correct output: -54                 | Program output: -52                
Correct output: -96                 | Program output: -96                
Correct output: -75                 | Program output: -26                
Correct output: -91                 | Program output: -12                
Correct output: -65                 | Program output: -65                
Correct output: -64                 | Program output: -64                
Correct output: 33                  | Program output: 90                 
Correct output: -100                | Program output: -67                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction integer_div} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction boolean_rot} {:close 1, :instruction tagged_217} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_div} {:close 2, :instruction exec_k} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_when} {:close 1, :instruction integer_div} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_eq} {:close 0, :instruction tagged_785} {:close 0, :instruction -16} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_when} {:close 0, :instruction exec_while} {:close 1, :instruction exec_k_when_autoconstructing})
Lexicase best program: (integer_mult integer_div exec_rot () (integer_fromboolean boolean_and in4 boolean_rot tagged_217) (integer_dup_times integer_div) exec_k () () boolean_pop exec_pop (boolean_dup_times) exec_do*while (integer_dup boolean_pop exec_when () integer_div) exec_dup_items in2 integer_min boolean_and print_integer exec_yank integer_pop boolean_eq tagged_785 -16 integer_mult boolean_stackdepth integer_fromboolean integer_lt exec_when (exec_while (exec_k_when_autoconstructing () ())))
Lexicase best errors: [0 0 0 1 0 1 0 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 49
Percent parens: 0.265
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction integer_div} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction boolean_rot} {:close 1, :instruction tagged_217} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_div} {:close 2, :instruction exec_k} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_when} {:close 1, :instruction integer_div} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_eq} {:close 0, :instruction tagged_785} {:close 0, :instruction -16} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_when} {:close 0, :instruction exec_while} {:close 1, :instruction exec_k_when_autoconstructing})
Zero cases best program: (integer_mult integer_div exec_rot () (integer_fromboolean boolean_and in4 boolean_rot tagged_217) (integer_dup_times integer_div) exec_k () () boolean_pop exec_pop (boolean_dup_times) exec_do*while (integer_dup boolean_pop exec_when () integer_div) exec_dup_items in2 integer_min boolean_and print_integer exec_yank integer_pop boolean_eq tagged_785 -16 integer_mult boolean_stackdepth integer_fromboolean integer_lt exec_when (exec_while (exec_k_when_autoconstructing () ())))
Zero cases best errors: [0 0 0 1 0 1 0 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 49
Percent parens: 0.265
--- Lexicase Population Statistics ---
Count of elite individuals by case: (157 415 95 243 677 254 678 159 276 248)
Population mean number of elite cases: 3.20
Count of perfect (error zero) individuals by case: (157 415 95 243 677 254 678 159 276 248)
Population mean number of perfect (error zero) cases: 3.20
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction integer_div} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction boolean_rot} {:close 1, :instruction tagged_217} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_div} {:close 2, :instruction exec_k} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_when} {:close 1, :instruction integer_div} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_eq} {:close 0, :instruction tagged_785} {:close 0, :instruction -16} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_when} {:close 0, :instruction exec_while} {:close 1, :instruction exec_k_when_autoconstructing})
Best program: (integer_mult integer_div exec_rot () (integer_fromboolean boolean_and in4 boolean_rot tagged_217) (integer_dup_times integer_div) exec_k () () boolean_pop exec_pop (boolean_dup_times) exec_do*while (integer_dup boolean_pop exec_when () integer_div) exec_dup_items in2 integer_min boolean_and print_integer exec_yank integer_pop boolean_eq tagged_785 -16 integer_mult boolean_stackdepth integer_fromboolean integer_lt exec_when (exec_while (exec_k_when_autoconstructing () ())))
Errors: [0 0 0 1 0 1 0 0 1 0]
Total: 3
Mean: 0.3
Genome size: 36
Size: 49
Percent parens: 0.265
--- Population Statistics ---
Average total errors in population: 6.798
Median total errors in population: 6
Error averages by case: (0.843 0.585 0.905 0.757 0.323 0.746 0.322 0.841 0.724 0.752)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 25.247
Average program size in population (points): 34.399
Average percent parens in population: 0.249
Minimum age in population: 5.0
Maximum age in population: 5.0
Average age in population: 5.0
Median age in population: 5.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 9
Genome diversity (% unique genomes):	 0.903
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.903
Total error diversity:				 0.008
Error (vector) diversity:			 0.024
Behavioral diversity:				 0.148
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 2030262
--- Timings ---
Current time: 1559594088898 milliseconds
Total Time:          11.7 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:         6.8 seconds, 58.0%
Fitness Testing:      3.6 seconds, 30.6%
Report:               1.2 seconds, 10.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 425
Test mean error for best: 0.42500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -83                 | Program output: -83                
Correct output: 4                   | Program output: 4                  
Correct output: -50                 | Program output: -50                
Correct output: -12                 | Program output: -12                
Correct output: -41                 | Program output: -41                
Correct output: -94                 | Program output: -94                
Correct output: -90                 | Program output: -90                
Correct output: 33                  | Program output: 33                 
Correct output: -77                 | Program output: -77                
Correct output: -60                 | Program output: -60                
Correct output: 61                  | Program output: 61                 
Correct output: 68                  | Program output: 68                 
Correct output: 64                  | Program output: 64                 
Correct output: 79                  | Program output: 79                 
Correct output: 49                  | Program output: 49                 
Correct output: 18                  | Program output: 18                 
Correct output: 25                  | Program output: 25                 
Correct output: 6                   | Program output: 25                 
Correct output: 9                   | Program output: 9                  
Correct output: 26                  | Program output: 26                 
Correct output: 4                   | Program output: 4                  
Correct output: 14                  | Program output: 33                 
Correct output: 1                   | Program output: 30                 
Correct output: 54                  | Program output: 69                 
Correct output: 50                  | Program output: 77                 
Correct output: 0                   | Program output: 0                  
Correct output: 18                  | Program output: 18                 
Correct output: 1                   | Program output: 1                  
Correct output: 39                  | Program output: 54                 
Correct output: 11                  | Program output: 16                 
Correct output: 3                   | Program output: 3                  
Correct output: 55                  | Program output: 95                 
Correct output: 5                   | Program output: 5                  
Correct output: 10                  | Program output: 10                 
Correct output: 0                   | Program output: 1                  
Correct output: -97                 | Program output: -97                
Correct output: -17                 | Program output: -17                
Correct output: -49                 | Program output: -49                
Correct output: -100                | Program output: -100               
Correct output: -39                 | Program output: 15                 
Correct output: -95                 | Program output: -35                
Correct output: -61                 | Program output: -16                
Correct output: -65                 | Program output: -59                
Correct output: -31                 | Program output: 39                 
Correct output: -92                 | Program output: -63                
Correct output: 19                  | Program output: 19                 
Correct output: -77                 | Program output: -77                
Correct output: -89                 | Program output: 21                 
Correct output: -87                 | Program output: -87                
Correct output: -25                 | Program output: 17                 
Correct output: -67                 | Program output: -3                 
Correct output: -71                 | Program output: -66                
Correct output: -5                  | Program output: 3                  
Correct output: -95                 | Program output: -95                
Correct output: -76                 | Program output: -76                
Correct output: -60                 | Program output: -54                
Correct output: -86                 | Program output: -57                
Correct output: -97                 | Program output: -50                
Correct output: -39                 | Program output: -39                
Correct output: -72                 | Program output: -72                
Correct output: -19                 | Program output: -19                
Correct output: -42                 | Program output: 74                 
Correct output: -75                 | Program output: -74                
Correct output: -70                 | Program output: -4                 
Correct output: -92                 | Program output: -59                
Correct output: 24                  | Program output: 62                 
Correct output: -100                | Program output: -97                
Correct output: -40                 | Program output: 26                 
Correct output: -60                 | Program output: 3                  
Correct output: -64                 | Program output: -64                
Correct output: 2                   | Program output: 2                  
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: -12                
Correct output: -100                | Program output: -91                
Correct output: -54                 | Program output: 29                 
Correct output: -66                 | Program output: -66                
Correct output: -79                 | Program output: -79                
Correct output: -94                 | Program output: -94                
Correct output: -95                 | Program output: -74                
Correct output: -81                 | Program output: -81                
Correct output: -99                 | Program output: -77                
Correct output: -47                 | Program output: -47                
Correct output: -98                 | Program output: -21                
Correct output: -44                 | Program output: -44                
Correct output: 48                  | Program output: 48                 
Correct output: -85                 | Program output: -58                
Correct output: -60                 | Program output: -60                
Correct output: -54                 | Program output: -54                
Correct output: -96                 | Program output: -96                
Correct output: -75                 | Program output: -26                
Correct output: -91                 | Program output: -12                
Correct output: -65                 | Program output: -65                
Correct output: -64                 | Program output: -64                
Correct output: 33                  | Program output: 33                 
Correct output: -100                | Program output: -67                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 2, :instruction boolean_not} {:close 0, :instruction boolean_rot} {:close 1, :instruction tagged_217} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_div} {:close 2, :instruction exec_k} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_do*while} {:close 1, :instruction tagged_209} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_when} {:close 0, :instruction in1} {:close 1, :instruction integer_div} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_eq} {:close 0, :instruction -16} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_when} {:close 0, :instruction exec_while} {:close 1, :instruction exec_k_when_autoconstructing})
Lexicase best program: (integer_mult integer_div boolean_frominteger exec_rot () (boolean_and in4 boolean_not) () boolean_rot tagged_217 integer_dup_times exec_do*while (integer_div) exec_k () () boolean_pop exec_pop (boolean_dup_times) exec_do*while (tagged_209) integer_dup boolean_pop exec_when () in1 integer_div exec_dup_items in2 integer_min boolean_and print_integer exec_yank integer_pop boolean_eq -16 integer_mult boolean_stackdepth integer_fromboolean integer_lt exec_when (exec_while (exec_k_when_autoconstructing () ())))
Lexicase best errors: [0 1 0 0 0 1 1 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 53
Percent parens: 0.264
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 2, :instruction boolean_not} {:close 0, :instruction boolean_rot} {:close 1, :instruction tagged_217} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_div} {:close 2, :instruction exec_k} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_do*while} {:close 1, :instruction tagged_209} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_when} {:close 0, :instruction in1} {:close 1, :instruction integer_div} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_eq} {:close 0, :instruction -16} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_when} {:close 0, :instruction exec_while} {:close 1, :instruction exec_k_when_autoconstructing})
Zero cases best program: (integer_mult integer_div boolean_frominteger exec_rot () (boolean_and in4 boolean_not) () boolean_rot tagged_217 integer_dup_times exec_do*while (integer_div) exec_k () () boolean_pop exec_pop (boolean_dup_times) exec_do*while (tagged_209) integer_dup boolean_pop exec_when () in1 integer_div exec_dup_items in2 integer_min boolean_and print_integer exec_yank integer_pop boolean_eq -16 integer_mult boolean_stackdepth integer_fromboolean integer_lt exec_when (exec_while (exec_k_when_autoconstructing () ())))
Zero cases best errors: [0 1 0 0 0 1 1 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 53
Percent parens: 0.264
--- Lexicase Population Statistics ---
Count of elite individuals by case: (209 17 284 238 264 158 172 157 207 22)
Population mean number of elite cases: 1.73
Count of perfect (error zero) individuals by case: (209 17 284 238 264 158 172 157 207 22)
Population mean number of perfect (error zero) cases: 1.73
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction integer_div} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction boolean_rot} {:close 1, :instruction tagged_217} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_div} {:close 2, :instruction exec_k} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_when} {:close 1, :instruction exec_dup_times} {:close 1, :instruction integer_div} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_eq} {:close 0, :instruction tagged_785} {:close 0, :instruction -16} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_when} {:close 0, :instruction exec_while} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_k_when_autoconstructing})
Best program: (integer_mult integer_div exec_rot () (integer_fromboolean boolean_and in4 boolean_rot tagged_217) (integer_dup_times integer_div) exec_k () () boolean_shove boolean_pop exec_pop (boolean_dup_times) exec_do*while (integer_dup boolean_pop exec_when () exec_dup_times () integer_div) in2 integer_min boolean_and print_integer exec_swap () (exec_yank integer_pop boolean_eq) tagged_785 -16 integer_mult boolean_stackdepth integer_fromboolean integer_lt exec_when (exec_while (integer_pop exec_k_when_autoconstructing () ())))
Errors: [0 1 0 0 0 1 1 1 0 1]
Total: 5
Mean: 0.5
Genome size: 39
Size: 55
Percent parens: 0.291
--- Population Statistics ---
Average total errors in population: 8.272
Median total errors in population: 8
Error averages by case: (0.791 0.983 0.716 0.762 0.736 0.842 0.828 0.843 0.793 0.978)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 27.972
Average program size in population (points): 37.953
Average percent parens in population: 0.253
Minimum age in population: 6.0
Maximum age in population: 6.0
Average age in population: 6.0
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 7
Genome diversity (% unique genomes):	 0.963
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.963
Total error diversity:				 0.006
Error (vector) diversity:			 0.018
Behavioral diversity:				 0.143
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 2365447
--- Timings ---
Current time: 1559594090678 milliseconds
Total Time:          13.4 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         8.0 seconds, 59.2%
Fitness Testing:      3.9 seconds, 29.2%
Report:               1.5 seconds, 10.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 444
Test mean error for best: 0.44400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -83                 | Program output: -83                
Correct output: 4                   | Program output: 4                  
Correct output: -50                 | Program output: 93                 
Correct output: -12                 | Program output: -12                
Correct output: -41                 | Program output: -41                
Correct output: -94                 | Program output: -94                
Correct output: -90                 | Program output: -90                
Correct output: 33                  | Program output: 33                 
Correct output: -77                 | Program output: -77                
Correct output: -60                 | Program output: 11                 
Correct output: 61                  | Program output: 61                 
Correct output: 68                  | Program output: 68                 
Correct output: 64                  | Program output: 64                 
Correct output: 79                  | Program output: 79                 
Correct output: 49                  | Program output: 49                 
Correct output: 18                  | Program output: 58                 
Correct output: 25                  | Program output: 40                 
Correct output: 6                   | Program output: 53                 
Correct output: 9                   | Program output: 15                 
Correct output: 26                  | Program output: 26                 
Correct output: 4                   | Program output: 4                  
Correct output: 14                  | Program output: 16                 
Correct output: 1                   | Program output: 1                  
Correct output: 54                  | Program output: 87                 
Correct output: 50                  | Program output: 50                 
Correct output: 0                   | Program output: 45                 
Correct output: 18                  | Program output: 18                 
Correct output: 1                   | Program output: 24                 
Correct output: 39                  | Program output: 39                 
Correct output: 11                  | Program output: 40                 
Correct output: 3                   | Program output: 44                 
Correct output: 55                  | Program output: 55                 
Correct output: 5                   | Program output: 5                  
Correct output: 10                  | Program output: 10                 
Correct output: 0                   | Program output: 1                  
Correct output: -97                 | Program output: -97                
Correct output: -17                 | Program output: -17                
Correct output: -49                 | Program output: -49                
Correct output: -100                | Program output: -100               
Correct output: -39                 | Program output: -39                
Correct output: -95                 | Program output: -17                
Correct output: -61                 | Program output: 48                 
Correct output: -65                 | Program output: -65                
Correct output: -31                 | Program output: -31                
Correct output: -92                 | Program output: -63                
Correct output: 19                  | Program output: 52                 
Correct output: -77                 | Program output: -77                
Correct output: -89                 | Program output: 60                 
Correct output: -87                 | Program output: -11                
Correct output: -25                 | Program output: -25                
Correct output: -67                 | Program output: -67                
Correct output: -71                 | Program output: -66                
Correct output: -5                  | Program output: 23                 
Correct output: -95                 | Program output: -66                
Correct output: -76                 | Program output: -76                
Correct output: -60                 | Program output: -60                
Correct output: -86                 | Program output: -57                
Correct output: -97                 | Program output: -50                
Correct output: -39                 | Program output: -39                
Correct output: -72                 | Program output: -58                
Correct output: -19                 | Program output: -19                
Correct output: -42                 | Program output: -21                
Correct output: -75                 | Program output: -75                
Correct output: -70                 | Program output: -70                
Correct output: -92                 | Program output: -92                
Correct output: 24                  | Program output: 24                 
Correct output: -100                | Program output: 23                 
Correct output: -40                 | Program output: -40                
Correct output: -60                 | Program output: -26                
Correct output: -64                 | Program output: -64                
Correct output: 2                   | Program output: 50                 
Correct output: -76                 | Program output: -42                
Correct output: -73                 | Program output: -12                
Correct output: -100                | Program output: -91                
Correct output: -54                 | Program output: 29                 
Correct output: -66                 | Program output: -1                 
Correct output: -79                 | Program output: -15                
Correct output: -94                 | Program output: -94                
Correct output: -95                 | Program output: -74                
Correct output: -81                 | Program output: -81                
Correct output: -99                 | Program output: 58                 
Correct output: -47                 | Program output: -22                
Correct output: -98                 | Program output: -17                
Correct output: -44                 | Program output: -44                
Correct output: 48                  | Program output: 48                 
Correct output: -85                 | Program output: -85                
Correct output: -60                 | Program output: -26                
Correct output: -54                 | Program output: -52                
Correct output: -96                 | Program output: -96                
Correct output: -75                 | Program output: -75                
Correct output: -91                 | Program output: -91                
Correct output: -65                 | Program output: -65                
Correct output: -64                 | Program output: -64                
Correct output: 33                  | Program output: 84                 
Correct output: -100                | Program output: -100               
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 1, :instruction boolean_rot} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_eq} {:close 1, :instruction tag_exec_818} {:close 0, :instruction exec_if} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_div} {:close 0, :instruction exec_while} {:close 0, :instruction print_newline} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_max} {:close 1, :instruction integer_add} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_min} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_gte} {:close 1, :instruction print_newline} {:close 1, :instruction exec_dup_items} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_fromboolean})
Lexicase best program: (integer_shove in3 boolean_invert_first_then_and exec_k (integer_sub integer_mult integer_eq in2 in3 boolean_rot) (boolean_and) exec_do*times (integer_min print_integer integer_rot integer_eq boolean_yank exec_s (integer_yank boolean_or exec_swap (boolean_dup_times) (boolean_empty) exec_dup_times (exec_eq) boolean_frominteger exec_noop boolean_or exec_pop (boolean_not integer_min exec_rot (exec_while (boolean_flush exec_yankdup boolean_frominteger integer_mult) boolean_yank exec_eq) (tag_exec_818 () exec_if (integer_pop integer_mult exec_shove (integer_div exec_while (print_newline exec_do*times (print_boolean boolean_frominteger integer_max integer_add) exec_dup_times (exec_pop (exec_rot (integer_stackdepth exec_swap () (boolean_invert_first_then_and integer_inc) boolean_dup_items exec_dup_times () integer_gte boolean_frominteger) (integer_min) (integer_max in4 in1 boolean_dup integer_lte boolean_dup_items integer_stackdepth) integer_gte print_newline) exec_dup_items) boolean_swap) integer_fromboolean)) ()) ())) () ()))
Lexicase best errors: [0 0 0 1 1 0 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 105
Percent parens: 0.276
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 1, :instruction boolean_rot} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_eq} {:close 1, :instruction tag_exec_818} {:close 0, :instruction exec_if} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_div} {:close 0, :instruction exec_while} {:close 0, :instruction print_newline} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_max} {:close 1, :instruction integer_add} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_min} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_gte} {:close 1, :instruction print_newline} {:close 1, :instruction exec_dup_items} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_fromboolean})
Zero cases best program: (integer_shove in3 boolean_invert_first_then_and exec_k (integer_sub integer_mult integer_eq in2 in3 boolean_rot) (boolean_and) exec_do*times (integer_min print_integer integer_rot integer_eq boolean_yank exec_s (integer_yank boolean_or exec_swap (boolean_dup_times) (boolean_empty) exec_dup_times (exec_eq) boolean_frominteger exec_noop boolean_or exec_pop (boolean_not integer_min exec_rot (exec_while (boolean_flush exec_yankdup boolean_frominteger integer_mult) boolean_yank exec_eq) (tag_exec_818 () exec_if (integer_pop integer_mult exec_shove (integer_div exec_while (print_newline exec_do*times (print_boolean boolean_frominteger integer_max integer_add) exec_dup_times (exec_pop (exec_rot (integer_stackdepth exec_swap () (boolean_invert_first_then_and integer_inc) boolean_dup_items exec_dup_times () integer_gte boolean_frominteger) (integer_min) (integer_max in4 in1 boolean_dup integer_lte boolean_dup_items integer_stackdepth) integer_gte print_newline) exec_dup_items) boolean_swap) integer_fromboolean)) ()) ())) () ()))
Zero cases best errors: [0 0 0 1 1 0 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 105
Percent parens: 0.276
--- Lexicase Population Statistics ---
Count of elite individuals by case: (69 241 345 213 135 38 285 146 561 149)
Population mean number of elite cases: 2.18
Count of perfect (error zero) individuals by case: (69 241 345 213 135 38 285 146 561 149)
Population mean number of perfect (error zero) cases: 2.18
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_div} {:close 2, :instruction exec_k} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_when} {:close 1, :instruction integer_div} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_eq} {:close 0, :instruction tagged_785} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_k} {:close 0, :instruction -16} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_when} {:close 1, :instruction exec_k_when_autoconstructing})
Best program: (integer_min in1 integer_fromboolean boolean_dup_times boolean_and in4 boolean_and boolean_rot integer_dup_times integer_div exec_k () () boolean_dup_times exec_do*while (integer_dup boolean_pop exec_when () integer_div) exec_dup_items in2 in3 integer_min boolean_and print_integer exec_yank exec_empty integer_pop boolean_eq tagged_785 integer_lte exec_k (-16 integer_mult) (integer_fromboolean integer_lt exec_when (exec_k_when_autoconstructing () ())))
Errors: [0 0 0 1 1 0 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 36
Size: 46
Percent parens: 0.217
--- Population Statistics ---
Average total errors in population: 7.818
Median total errors in population: 7
Error averages by case: (0.931 0.759 0.655 0.787 0.865 0.962 0.715 0.854 0.439 0.851)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.11
Average program size in population (points): 54.123
Average percent parens in population: 0.244
Minimum age in population: 7.0
Maximum age in population: 7.0
Average age in population: 7.0
Median age in population: 7.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 3
Genome diversity (% unique genomes):	 0.981
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.981
Total error diversity:				 0.008
Error (vector) diversity:			 0.031
Behavioral diversity:				 0.216
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 2778146
--- Timings ---
Current time: 1559594092592 milliseconds
Total Time:          15.4 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         9.1 seconds, 59.5%
Fitness Testing:      4.4 seconds, 28.7%
Report:               1.7 seconds, 11.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 444
Test mean error for best: 0.44400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -83                 | Program output: -83                
Correct output: 4                   | Program output: 4                  
Correct output: -50                 | Program output: 93                 
Correct output: -12                 | Program output: -12                
Correct output: -41                 | Program output: -41                
Correct output: -94                 | Program output: -94                
Correct output: -90                 | Program output: -90                
Correct output: 33                  | Program output: 33                 
Correct output: -77                 | Program output: -77                
Correct output: -60                 | Program output: 11                 
Correct output: 61                  | Program output: 61                 
Correct output: 68                  | Program output: 68                 
Correct output: 64                  | Program output: 64                 
Correct output: 79                  | Program output: 79                 
Correct output: 49                  | Program output: 49                 
Correct output: 18                  | Program output: 58                 
Correct output: 25                  | Program output: 40                 
Correct output: 6                   | Program output: 53                 
Correct output: 9                   | Program output: 15                 
Correct output: 26                  | Program output: 26                 
Correct output: 4                   | Program output: 4                  
Correct output: 14                  | Program output: 16                 
Correct output: 1                   | Program output: 1                  
Correct output: 54                  | Program output: 87                 
Correct output: 50                  | Program output: 50                 
Correct output: 0                   | Program output: 45                 
Correct output: 18                  | Program output: 18                 
Correct output: 1                   | Program output: 24                 
Correct output: 39                  | Program output: 39                 
Correct output: 11                  | Program output: 40                 
Correct output: 3                   | Program output: 44                 
Correct output: 55                  | Program output: 55                 
Correct output: 5                   | Program output: 5                  
Correct output: 10                  | Program output: 10                 
Correct output: 0                   | Program output: 1                  
Correct output: -97                 | Program output: -97                
Correct output: -17                 | Program output: -17                
Correct output: -49                 | Program output: -49                
Correct output: -100                | Program output: -100               
Correct output: -39                 | Program output: -39                
Correct output: -95                 | Program output: -17                
Correct output: -61                 | Program output: 48                 
Correct output: -65                 | Program output: -65                
Correct output: -31                 | Program output: -31                
Correct output: -92                 | Program output: -63                
Correct output: 19                  | Program output: 52                 
Correct output: -77                 | Program output: -77                
Correct output: -89                 | Program output: 60                 
Correct output: -87                 | Program output: -11                
Correct output: -25                 | Program output: -25                
Correct output: -67                 | Program output: -67                
Correct output: -71                 | Program output: -66                
Correct output: -5                  | Program output: 23                 
Correct output: -95                 | Program output: -66                
Correct output: -76                 | Program output: -76                
Correct output: -60                 | Program output: -60                
Correct output: -86                 | Program output: -57                
Correct output: -97                 | Program output: -50                
Correct output: -39                 | Program output: -39                
Correct output: -72                 | Program output: -58                
Correct output: -19                 | Program output: -19                
Correct output: -42                 | Program output: -21                
Correct output: -75                 | Program output: -75                
Correct output: -70                 | Program output: -70                
Correct output: -92                 | Program output: -92                
Correct output: 24                  | Program output: 24                 
Correct output: -100                | Program output: 23                 
Correct output: -40                 | Program output: -40                
Correct output: -60                 | Program output: -26                
Correct output: -64                 | Program output: -64                
Correct output: 2                   | Program output: 50                 
Correct output: -76                 | Program output: -42                
Correct output: -73                 | Program output: -12                
Correct output: -100                | Program output: -91                
Correct output: -54                 | Program output: 29                 
Correct output: -66                 | Program output: -1                 
Correct output: -79                 | Program output: -15                
Correct output: -94                 | Program output: -94                
Correct output: -95                 | Program output: -74                
Correct output: -81                 | Program output: -81                
Correct output: -99                 | Program output: 58                 
Correct output: -47                 | Program output: -22                
Correct output: -98                 | Program output: -17                
Correct output: -44                 | Program output: -44                
Correct output: 48                  | Program output: 48                 
Correct output: -85                 | Program output: -85                
Correct output: -60                 | Program output: -26                
Correct output: -54                 | Program output: -52                
Correct output: -96                 | Program output: -96                
Correct output: -75                 | Program output: -75                
Correct output: -91                 | Program output: -91                
Correct output: -65                 | Program output: -65                
Correct output: -64                 | Program output: -64                
Correct output: 33                  | Program output: 84                 
Correct output: -100                | Program output: -100               
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 1, :instruction boolean_rot} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_eq} {:close 1, :instruction tag_exec_818} {:close 0, :instruction exec_if} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_div} {:close 0, :instruction exec_while} {:close 0, :instruction print_newline} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_max} {:close 1, :instruction integer_add} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_min} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_gte} {:close 1, :instruction print_newline} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction exec_dup_items} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_fromboolean})
Lexicase best program: (integer_shove in3 boolean_invert_first_then_and exec_k (integer_sub integer_mult boolean_dup_times integer_eq in2 in3 boolean_rot) (boolean_and) exec_do*times (integer_min print_integer integer_rot integer_eq boolean_yank exec_s (integer_yank boolean_or exec_swap (boolean_dup_times) (boolean_empty) exec_dup_times (boolean_frominteger exec_noop boolean_or exec_pop (boolean_not boolean_empty integer_min exec_rot (exec_while (boolean_flush exec_yankdup boolean_frominteger integer_mult) boolean_yank exec_eq) (tag_exec_818 () exec_if (integer_pop integer_mult exec_shove (integer_div exec_while (print_newline exec_do*times (print_boolean boolean_frominteger integer_max integer_add) exec_pop (exec_rot (integer_stackdepth exec_swap () (boolean_invert_first_then_and integer_inc) boolean_dup_items integer_gte boolean_frominteger) (integer_min) (integer_max in4 boolean_dup integer_lte boolean_dup_items boolean_swap integer_stackdepth) integer_gte print_newline) boolean_dup_items) exec_dup_items) boolean_swap) (integer_fromboolean)) ()))) () ()))
Lexicase best errors: [1 0 0 1 0 1 0 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 103
Percent parens: 0.262
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 1, :instruction boolean_rot} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_eq} {:close 1, :instruction tag_exec_818} {:close 0, :instruction exec_if} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_div} {:close 0, :instruction exec_while} {:close 0, :instruction print_newline} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_max} {:close 1, :instruction integer_add} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_min} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_gte} {:close 1, :instruction print_newline} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction exec_dup_items} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_fromboolean})
Zero cases best program: (integer_shove in3 boolean_invert_first_then_and exec_k (integer_sub integer_mult boolean_dup_times integer_eq in2 in3 boolean_rot) (boolean_and) exec_do*times (integer_min print_integer integer_rot integer_eq boolean_yank exec_s (integer_yank boolean_or exec_swap (boolean_dup_times) (boolean_empty) exec_dup_times (boolean_frominteger exec_noop boolean_or exec_pop (boolean_not boolean_empty integer_min exec_rot (exec_while (boolean_flush exec_yankdup boolean_frominteger integer_mult) boolean_yank exec_eq) (tag_exec_818 () exec_if (integer_pop integer_mult exec_shove (integer_div exec_while (print_newline exec_do*times (print_boolean boolean_frominteger integer_max integer_add) exec_pop (exec_rot (integer_stackdepth exec_swap () (boolean_invert_first_then_and integer_inc) boolean_dup_items integer_gte boolean_frominteger) (integer_min) (integer_max in4 boolean_dup integer_lte boolean_dup_items boolean_swap integer_stackdepth) integer_gte print_newline) boolean_dup_items) exec_dup_items) boolean_swap) (integer_fromboolean)) ()))) () ()))
Zero cases best errors: [1 0 0 1 0 1 0 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 103
Percent parens: 0.262
--- Lexicase Population Statistics ---
Count of elite individuals by case: (80 440 458 80 397 44 497 72 370 292)
Population mean number of elite cases: 2.73
Count of perfect (error zero) individuals by case: (80 440 458 80 397 44 497 72 370 292)
Population mean number of perfect (error zero) cases: 2.73
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 1, :instruction boolean_rot} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_s} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_eq} {:close 1, :instruction tag_exec_818} {:close 0, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_newline} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_max} {:close 1, :instruction integer_add} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_min} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_gte} {:close 1, :instruction print_newline} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_dup_items} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_fromboolean})
Best program: (integer_shove in3 boolean_invert_first_then_and integer_sub integer_mult integer_eq in2 in3 boolean_rot boolean_and exec_do*times (integer_min print_integer integer_rot integer_eq boolean_yank exec_s (integer_gt integer_yank boolean_or exec_swap (boolean_dup_times) (exec_dup_times (boolean_frominteger exec_noop boolean_or exec_pop (boolean_not integer_min exec_rot (exec_while (boolean_flush exec_yankdup exec_s_when_autoconstructing (boolean_frominteger boolean_yank exec_eq) (tag_exec_818 () exec_s (exec_if (integer_pop integer_mult exec_shove (integer_div boolean_dup print_newline exec_do*times (print_boolean boolean_frominteger boolean_yank) integer_max integer_add) exec_dup_times (exec_pop (exec_rot (integer_stackdepth exec_swap () (boolean_invert_first_then_and integer_inc) boolean_dup_items exec_dup_times () integer_gte boolean_frominteger) (integer_min) (integer_max in4 in1 boolean_dup integer_lte boolean_dup_items integer_stackdepth) integer_gte print_newline) boolean_yankdup exec_dup_items) boolean_swap) (integer_fromboolean)) () ()) ())) () ())))) () ()))
Errors: [1 0 0 1 0 1 0 1 0 0]
Total: 4
Mean: 0.4
Genome size: 77
Size: 109
Percent parens: 0.294
--- Population Statistics ---
Average total errors in population: 7.27
Median total errors in population: 7
Error averages by case: (0.92 0.56 0.542 0.92 0.603 0.956 0.503 0.928 0.63 0.708)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.288
Average program size in population (points): 67.074
Average percent parens in population: 0.239
Minimum age in population: 8.0
Maximum age in population: 8.0
Average age in population: 8.0
Median age in population: 8.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.007
Error (vector) diversity:			 0.041
Behavioral diversity:				 0.242
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 3325758
--- Timings ---
Current time: 1559594094800 milliseconds
Total Time:          17.4 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:        10.3 seconds, 59.5%
Fitness Testing:      4.9 seconds, 28.5%
Report:               2.0 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 444
Test mean error for best: 0.44400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -83                 | Program output: -83                
Correct output: 4                   | Program output: 4                  
Correct output: -50                 | Program output: 93                 
Correct output: -12                 | Program output: -12                
Correct output: -41                 | Program output: -41                
Correct output: -94                 | Program output: -94                
Correct output: -90                 | Program output: -90                
Correct output: 33                  | Program output: 33                 
Correct output: -77                 | Program output: -77                
Correct output: -60                 | Program output: 11                 
Correct output: 61                  | Program output: 61                 
Correct output: 68                  | Program output: 68                 
Correct output: 64                  | Program output: 64                 
Correct output: 79                  | Program output: 79                 
Correct output: 49                  | Program output: 49                 
Correct output: 18                  | Program output: 58                 
Correct output: 25                  | Program output: 40                 
Correct output: 6                   | Program output: 53                 
Correct output: 9                   | Program output: 15                 
Correct output: 26                  | Program output: 26                 
Correct output: 4                   | Program output: 4                  
Correct output: 14                  | Program output: 16                 
Correct output: 1                   | Program output: 1                  
Correct output: 54                  | Program output: 87                 
Correct output: 50                  | Program output: 50                 
Correct output: 0                   | Program output: 45                 
Correct output: 18                  | Program output: 18                 
Correct output: 1                   | Program output: 24                 
Correct output: 39                  | Program output: 39                 
Correct output: 11                  | Program output: 40                 
Correct output: 3                   | Program output: 44                 
Correct output: 55                  | Program output: 55                 
Correct output: 5                   | Program output: 5                  
Correct output: 10                  | Program output: 10                 
Correct output: 0                   | Program output: 1                  
Correct output: -97                 | Program output: -97                
Correct output: -17                 | Program output: -17                
Correct output: -49                 | Program output: -49                
Correct output: -100                | Program output: -100               
Correct output: -39                 | Program output: -39                
Correct output: -95                 | Program output: -17                
Correct output: -61                 | Program output: 48                 
Correct output: -65                 | Program output: -65                
Correct output: -31                 | Program output: -31                
Correct output: -92                 | Program output: -63                
Correct output: 19                  | Program output: 52                 
Correct output: -77                 | Program output: -77                
Correct output: -89                 | Program output: 60                 
Correct output: -87                 | Program output: -11                
Correct output: -25                 | Program output: -25                
Correct output: -67                 | Program output: -67                
Correct output: -71                 | Program output: -66                
Correct output: -5                  | Program output: 23                 
Correct output: -95                 | Program output: -66                
Correct output: -76                 | Program output: -76                
Correct output: -60                 | Program output: -60                
Correct output: -86                 | Program output: -57                
Correct output: -97                 | Program output: -50                
Correct output: -39                 | Program output: -39                
Correct output: -72                 | Program output: -58                
Correct output: -19                 | Program output: -19                
Correct output: -42                 | Program output: -21                
Correct output: -75                 | Program output: -75                
Correct output: -70                 | Program output: -70                
Correct output: -92                 | Program output: -92                
Correct output: 24                  | Program output: 24                 
Correct output: -100                | Program output: 23                 
Correct output: -40                 | Program output: -40                
Correct output: -60                 | Program output: -26                
Correct output: -64                 | Program output: -64                
Correct output: 2                   | Program output: 50                 
Correct output: -76                 | Program output: -42                
Correct output: -73                 | Program output: -12                
Correct output: -100                | Program output: -91                
Correct output: -54                 | Program output: 29                 
Correct output: -66                 | Program output: -1                 
Correct output: -79                 | Program output: -15                
Correct output: -94                 | Program output: -94                
Correct output: -95                 | Program output: -74                
Correct output: -81                 | Program output: -81                
Correct output: -99                 | Program output: 58                 
Correct output: -47                 | Program output: -22                
Correct output: -98                 | Program output: -17                
Correct output: -44                 | Program output: -44                
Correct output: 48                  | Program output: 48                 
Correct output: -85                 | Program output: -85                
Correct output: -60                 | Program output: -26                
Correct output: -54                 | Program output: -52                
Correct output: -96                 | Program output: -96                
Correct output: -75                 | Program output: -75                
Correct output: -91                 | Program output: -91                
Correct output: -65                 | Program output: -65                
Correct output: -64                 | Program output: -64                
Correct output: 33                  | Program output: 84                 
Correct output: -100                | Program output: -100               
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_div} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_when} {:close 1, :instruction -70} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_div} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_eq} {:close 0, :instruction tagged_785} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_k} {:close 0, :instruction -16} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_lt} {:close 1, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup_items})
Lexicase best program: (integer_min in1 integer_fromboolean boolean_dup_times boolean_and in4 boolean_and integer_dup_times integer_div boolean_dup_times exec_do*while (integer_dup boolean_pop exec_when () -70) boolean_eq integer_div exec_dup_items in2 in3 integer_min boolean_and print_integer integer_fromboolean exec_yank exec_empty integer_pop boolean_eq tagged_785 integer_lte exec_k (-16 boolean_dup integer_mult) (integer_shove integer_lt print_integer) exec_when (boolean_dup_items))
Lexicase best errors: [1 0 0 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 45
Percent parens: 0.133
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_div} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_when} {:close 1, :instruction -70} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_div} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_eq} {:close 0, :instruction tagged_785} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_k} {:close 0, :instruction -16} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_lt} {:close 1, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup_items})
Zero cases best program: (integer_min in1 integer_fromboolean boolean_dup_times boolean_and in4 boolean_and integer_dup_times integer_div boolean_dup_times exec_do*while (integer_dup boolean_pop exec_when () -70) boolean_eq integer_div exec_dup_items in2 in3 integer_min boolean_and print_integer integer_fromboolean exec_yank exec_empty integer_pop boolean_eq tagged_785 integer_lte exec_k (-16 boolean_dup integer_mult) (integer_shove integer_lt print_integer) exec_when (boolean_dup_items))
Zero cases best errors: [1 0 0 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 45
Percent parens: 0.133
--- Lexicase Population Statistics ---
Count of elite individuals by case: (262 198 482 360 352 351 361 83 586 317)
Population mean number of elite cases: 3.35
Count of perfect (error zero) individuals by case: (262 198 482 360 352 351 361 83 586 317)
Population mean number of perfect (error zero) cases: 3.35
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 1, :instruction boolean_rot} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 2, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_s} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_rot} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_while} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_eq} {:close 1, :instruction tag_exec_818} {:close 0, :instruction exec_s} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_if} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_newline} {:close 0, :instruction integer_div} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_max} {:close 1, :instruction integer_add} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_min} {:close 0, :instruction integer_max} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_gte} {:close 1, :instruction print_newline} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_fromboolean})
Best program: (in3 boolean_invert_first_then_and integer_sub integer_eq in2 in3 boolean_rot boolean_and exec_do*times (integer_min print_integer integer_rot integer_dup_items) integer_eq boolean_yank exec_s (integer_gt integer_yank boolean_or exec_swap (boolean_rot) (boolean_dup_times) exec_dup_times (boolean_frominteger exec_noop boolean_or exec_pop (boolean_not exec_rot (exec_while (exec_s_when_autoconstructing (integer_div) (boolean_frominteger boolean_yank exec_eq) (tag_exec_818 () exec_s (exec_eq exec_if (integer_pop integer_mult exec_shove (integer_div boolean_dup print_newline integer_div print_boolean boolean_frominteger integer_max integer_add) integer_dup_times) (exec_dup_times (exec_pop (exec_rot (integer_stackdepth exec_swap () (boolean_invert_first_then_and integer_inc) boolean_dup_items integer_gte boolean_frominteger) (integer_min) (integer_max in4 in1 boolean_dup integer_lte boolean_dup_items integer_stackdepth) integer_gte print_newline) boolean_yankdup boolean_swap) integer_fromboolean)) () ()))) () ()))) () ())
Errors: [1 0 0 0 0 0 0 1 0 0]
Total: 2
Mean: 0.2
Genome size: 74
Size: 104
Percent parens: 0.288
--- Population Statistics ---
Average total errors in population: 6.648
Median total errors in population: 7
Error averages by case: (0.738 0.802 0.518 0.64 0.648 0.649 0.639 0.917 0.414 0.683)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 47.476
Average program size in population (points): 63.102
Average percent parens in population: 0.241
Minimum age in population: 9.0
Maximum age in population: 9.0
Average age in population: 9.0
Median age in population: 9.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.009
Error (vector) diversity:			 0.058
Behavioral diversity:				 0.291
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 3839680
--- Timings ---
Current time: 1559594096922 milliseconds
Total Time:          19.5 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        11.5 seconds, 58.9%
Fitness Testing:      5.5 seconds, 28.0%
Report:               2.5 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 426
Test mean error for best: 0.42600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -83                 | Program output: -83                
Correct output: 4                   | Program output: 4                  
Correct output: -50                 | Program output: 93                 
Correct output: -12                 | Program output: -12                
Correct output: -41                 | Program output: -41                
Correct output: -94                 | Program output: -94                
Correct output: -90                 | Program output: -90                
Correct output: 33                  | Program output: 33                 
Correct output: -77                 | Program output: 43                 
Correct output: -60                 | Program output: 11                 
Correct output: 61                  | Program output: 61                 
Correct output: 68                  | Program output: 68                 
Correct output: 64                  | Program output: 64                 
Correct output: 79                  | Program output: 79                 
Correct output: 49                  | Program output: 49                 
Correct output: 18                  | Program output: 76                 
Correct output: 25                  | Program output: 40                 
Correct output: 6                   | Program output: 6                  
Correct output: 9                   | Program output: 17                 
Correct output: 26                  | Program output: 45                 
Correct output: 4                   | Program output: 33                 
Correct output: 14                  | Program output: 14                 
Correct output: 1                   | Program output: 1                  
Correct output: 54                  | Program output: 54                 
Correct output: 50                  | Program output: 50                 
Correct output: 0                   | Program output: 45                 
Correct output: 18                  | Program output: 59                 
Correct output: 1                   | Program output: 2484               
Correct output: 39                  | Program output: 39                 
Correct output: 11                  | Program output: 11                 
Correct output: 3                   | Program output: 44                 
Correct output: 55                  | Program output: 55                 
Correct output: 5                   | Program output: 12                 
Correct output: 10                  | Program output: 68                 
Correct output: 0                   | Program output: 0                  
Correct output: -97                 | Program output: -97                
Correct output: -17                 | Program output: 56                 
Correct output: -49                 | Program output: -49                
Correct output: -100                | Program output: -100               
Correct output: -39                 | Program output: -39                
Correct output: -95                 | Program output: -17                
Correct output: -61                 | Program output: 48                 
Correct output: -65                 | Program output: -65                
Correct output: -31                 | Program output: -31                
Correct output: -92                 | Program output: -92                
Correct output: 19                  | Program output: 19                 
Correct output: -77                 | Program output: -77                
Correct output: -89                 | Program output: -89                
Correct output: -87                 | Program output: -11                
Correct output: -25                 | Program output: -25                
Correct output: -67                 | Program output: -67                
Correct output: -71                 | Program output: -71                
Correct output: -5                  | Program output: -5                 
Correct output: -95                 | Program output: -66                
Correct output: -76                 | Program output: -76                
Correct output: -60                 | Program output: -60                
Correct output: -86                 | Program output: -86                
Correct output: -97                 | Program output: -50                
Correct output: -39                 | Program output: -6                 
Correct output: -72                 | Program output: -58                
Correct output: -19                 | Program output: 39                 
Correct output: -42                 | Program output: -42                
Correct output: -75                 | Program output: -75                
Correct output: -70                 | Program output: -70                
Correct output: -92                 | Program output: -92                
Correct output: 24                  | Program output: 24                 
Correct output: -100                | Program output: 23                 
Correct output: -40                 | Program output: -40                
Correct output: -60                 | Program output: -60                
Correct output: -64                 | Program output: 20                 
Correct output: 2                   | Program output: 50                 
Correct output: -76                 | Program output: -42                
Correct output: -73                 | Program output: -73                
Correct output: -100                | Program output: -91                
Correct output: -54                 | Program output: -54                
Correct output: -66                 | Program output: -1                 
Correct output: -79                 | Program output: -15                
Correct output: -94                 | Program output: -21                
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: -11                
Correct output: -99                 | Program output: 58                 
Correct output: -47                 | Program output: -22                
Correct output: -98                 | Program output: -17                
Correct output: -44                 | Program output: -44                
Correct output: 48                  | Program output: 71                 
Correct output: -85                 | Program output: -85                
Correct output: -60                 | Program output: -26                
Correct output: -54                 | Program output: -52                
Correct output: -96                 | Program output: -96                
Correct output: -75                 | Program output: -75                
Correct output: -91                 | Program output: -91                
Correct output: -65                 | Program output: -19                
Correct output: -64                 | Program output: -33                
Correct output: 33                  | Program output: 83                 
Correct output: -100                | Program output: -100               
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in4} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_div} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_when} {:close 1, :instruction integer_div} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 0, :instruction integer_gt} {:close 1, :instruction in3} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction tagged_785} {:close 0, :instruction exec_if} {:close 0, :instruction -16} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_k_when_autoconstructing})
Lexicase best program: (integer_min in1 integer_rot integer_min integer_dup_times integer_fromboolean in4 boolean_rot integer_dup_times boolean_yank integer_div boolean_dup_times exec_do*while (integer_dup boolean_pop exec_when () integer_div) exec_dup_items in2 integer_gt in3 integer_min boolean_and print_integer exec_do*while (boolean_invert_second_then_and exec_yank integer_dup_times integer_dup exec_empty integer_pop tagged_785 exec_if (-16 integer_mult) (integer_fromboolean integer_lt exec_k_when_autoconstructing () ())))
Lexicase best errors: [0 0 0 0 0 1 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 46
Percent parens: 0.174
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in4} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_div} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_when} {:close 1, :instruction integer_div} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 0, :instruction integer_gt} {:close 1, :instruction in3} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction tagged_785} {:close 0, :instruction exec_if} {:close 0, :instruction -16} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_k_when_autoconstructing})
Zero cases best program: (integer_min in1 integer_rot integer_min integer_dup_times integer_fromboolean in4 boolean_rot integer_dup_times boolean_yank integer_div boolean_dup_times exec_do*while (integer_dup boolean_pop exec_when () integer_div) exec_dup_items in2 integer_gt in3 integer_min boolean_and print_integer exec_do*while (boolean_invert_second_then_and exec_yank integer_dup_times integer_dup exec_empty integer_pop tagged_785 exec_if (-16 integer_mult) (integer_fromboolean integer_lt exec_k_when_autoconstructing () ())))
Zero cases best errors: [0 0 0 0 0 1 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 46
Percent parens: 0.174
--- Lexicase Population Statistics ---
Count of elite individuals by case: (494 347 621 224 699 57 101 114 321 563)
Population mean number of elite cases: 3.54
Count of perfect (error zero) individuals by case: (494 347 621 224 699 57 101 114 321 563)
Population mean number of perfect (error zero) cases: 3.54
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_dup} {:close 1, :instruction exec_when} {:close 1, :instruction integer_div} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 0, :instruction integer_gt} {:close 1, :instruction in3} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_eq} {:close 0, :instruction tagged_785} {:close 0, :instruction exec_k} {:close 0, :instruction -16} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_lt})
Best program: (integer_min in1 integer_rot boolean_dup_times boolean_and in4 integer_dup_times exec_do*while (boolean_swap boolean_pop boolean_dup) exec_when () integer_div exec_dup_items in2 integer_gt in3 integer_min boolean_and print_integer exec_do*while (boolean_invert_second_then_and exec_yank integer_dup integer_pop boolean_eq) tagged_785 exec_k (-16 integer_mult) (integer_lt))
Errors: [0 0 0 0 0 1 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 31
Size: 37
Percent parens: 0.162
--- Population Statistics ---
Average total errors in population: 6.459
Median total errors in population: 6
Error averages by case: (0.506 0.653 0.379 0.776 0.301 0.943 0.899 0.886 0.679 0.437)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 47.577
Average program size in population (points): 62.976
Average percent parens in population: 0.235
Minimum age in population: 10.0
Maximum age in population: 10.0
Average age in population: 10.0
Median age in population: 10.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.01
Error (vector) diversity:			 0.064
Behavioral diversity:				 0.28
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 4387412
--- Timings ---
Current time: 1559594098920 milliseconds
Total Time:          21.7 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        12.7 seconds, 58.5%
Fitness Testing:      6.0 seconds, 27.6%
Report:               2.9 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 449
Test mean error for best: 0.44900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -83                 | Program output: -83                
Correct output: 4                   | Program output: 4                  
Correct output: -50                 | Program output: 93                 
Correct output: -12                 | Program output: -12                
Correct output: -41                 | Program output: -41                
Correct output: -94                 | Program output: -94                
Correct output: -90                 | Program output: -90                
Correct output: 33                  | Program output: 33                 
Correct output: -77                 | Program output: -77                
Correct output: -60                 | Program output: 11                 
Correct output: 61                  | Program output: 61                 
Correct output: 68                  | Program output: 68                 
Correct output: 64                  | Program output: 64                 
Correct output: 79                  | Program output: 79                 
Correct output: 49                  | Program output: 49                 
Correct output: 18                  | Program output: 58                 
Correct output: 25                  | Program output: 40                 
Correct output: 6                   | Program output: 53                 
Correct output: 9                   | Program output: 15                 
Correct output: 26                  | Program output: 26                 
Correct output: 4                   | Program output: 4                  
Correct output: 14                  | Program output: 16                 
Correct output: 1                   | Program output: 1                  
Correct output: 54                  | Program output: 87                 
Correct output: 50                  | Program output: 50                 
Correct output: 0                   | Program output: 45                 
Correct output: 18                  | Program output: 18                 
Correct output: 1                   | Program output: 24                 
Correct output: 39                  | Program output: 39                 
Correct output: 11                  | Program output: 40                 
Correct output: 3                   | Program output: false44            
Correct output: 55                  | Program output: 55                 
Correct output: 5                   | Program output: 5                  
Correct output: 10                  | Program output: 10                 
Correct output: 0                   | Program output: 1                  
Correct output: -97                 | Program output: -97                
Correct output: -17                 | Program output: -17                
Correct output: -49                 | Program output: -49                
Correct output: -100                | Program output: -100               
Correct output: -39                 | Program output: false-39           
Correct output: -95                 | Program output: -17                
Correct output: -61                 | Program output: 48                 
Correct output: -65                 | Program output: -65                
Correct output: -31                 | Program output: -31                
Correct output: -92                 | Program output: -63                
Correct output: 19                  | Program output: 52                 
Correct output: -77                 | Program output: -77                
Correct output: -89                 | Program output: 60                 
Correct output: -87                 | Program output: -11                
Correct output: -25                 | Program output: -25                
Correct output: -67                 | Program output: -67                
Correct output: -71                 | Program output: -66                
Correct output: -5                  | Program output: false23            
Correct output: -95                 | Program output: -66                
Correct output: -76                 | Program output: -76                
Correct output: -60                 | Program output: -60                
Correct output: -86                 | Program output: -57                
Correct output: -97                 | Program output: -50                
Correct output: -39                 | Program output: -39                
Correct output: -72                 | Program output: -58                
Correct output: -19                 | Program output: -19                
Correct output: -42                 | Program output: -21                
Correct output: -75                 | Program output: -75                
Correct output: -70                 | Program output: -70                
Correct output: -92                 | Program output: -92                
Correct output: 24                  | Program output: 24                 
Correct output: -100                | Program output: 23                 
Correct output: -40                 | Program output: -40                
Correct output: -60                 | Program output: -26                
Correct output: -64                 | Program output: -64                
Correct output: 2                   | Program output: 50                 
Correct output: -76                 | Program output: -42                
Correct output: -73                 | Program output: -12                
Correct output: -100                | Program output: -91                
Correct output: -54                 | Program output: 29                 
Correct output: -66                 | Program output: -1                 
Correct output: -79                 | Program output: -15                
Correct output: -94                 | Program output: -94                
Correct output: -95                 | Program output: -74                
Correct output: -81                 | Program output: -81                
Correct output: -99                 | Program output: 58                 
Correct output: -47                 | Program output: -22                
Correct output: -98                 | Program output: -17                
Correct output: -44                 | Program output: -44                
Correct output: 48                  | Program output: 48                 
Correct output: -85                 | Program output: -85                
Correct output: -60                 | Program output: -26                
Correct output: -54                 | Program output: -52                
Correct output: -96                 | Program output: -96                
Correct output: -75                 | Program output: -75                
Correct output: -91                 | Program output: -91                
Correct output: -65                 | Program output: -65                
Correct output: -64                 | Program output: -64                
Correct output: 33                  | Program output: 84                 
Correct output: -100                | Program output: -100               
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_dup_times} {:close 2, :instruction integer_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_when} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 1, :instruction in3} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_eq} {:close 0, :instruction tagged_785} {:close 0, :instruction exec_k} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_k_when_autoconstructing})
Lexicase best program: (integer_min in1 integer_rot integer_fromboolean boolean_dup_times in4 boolean_rot integer_div boolean_yankdup boolean_dup_times integer_eq exec_do*while (integer_dup boolean_swap boolean_pop exec_when () integer_div) boolean_frominteger exec_dup_items in2 integer_gt boolean_xor in3 integer_min boolean_and print_integer exec_do*while (boolean_invert_second_then_and integer_empty) exec_yank integer_dup exec_empty boolean_eq tagged_785 exec_k (integer_mult) (integer_mult integer_fromboolean integer_lt exec_k_when_autoconstructing () ()))
Lexicase best errors: [1 1 1 1 0 0 0 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 48
Percent parens: 0.167
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_dup_times} {:close 2, :instruction integer_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_when} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 1, :instruction in3} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_eq} {:close 0, :instruction tagged_785} {:close 0, :instruction exec_k} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_k_when_autoconstructing})
Zero cases best program: (integer_min in1 integer_rot integer_fromboolean boolean_dup_times in4 boolean_rot integer_div boolean_yankdup boolean_dup_times integer_eq exec_do*while (integer_dup boolean_swap boolean_pop exec_when () integer_div) boolean_frominteger exec_dup_items in2 integer_gt boolean_xor in3 integer_min boolean_and print_integer exec_do*while (boolean_invert_second_then_and integer_empty) exec_yank integer_dup exec_empty boolean_eq tagged_785 exec_k (integer_mult) (integer_mult integer_fromboolean integer_lt exec_k_when_autoconstructing () ()))
Zero cases best errors: [1 1 1 1 0 0 0 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 48
Percent parens: 0.167
--- Lexicase Population Statistics ---
Count of elite individuals by case: (18 14 315 111 438 361 364 239 550 232)
Population mean number of elite cases: 2.64
Count of perfect (error zero) individuals by case: (18 14 315 111 438 361 364 239 550 232)
Population mean number of perfect (error zero) cases: 2.64
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction tagged_916} {:close 0, :instruction in4} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_dup_times} {:close 2, :instruction exec_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_when} {:close 1, :instruction integer_div} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 0, :instruction integer_gt} {:close 1, :instruction in3} {:close 1, :instruction print_boolean} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_eq} {:close 0, :instruction tagged_785} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k} {:close 0, :instruction -16} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_k_when_autoconstructing})
Best program: (integer_min integer_rot print_integer boolean_yank boolean_dup_times boolean_and tagged_916 in4 boolean_rot integer_dup_times boolean_dup_times exec_yankdup exec_do*while (integer_dup boolean_swap boolean_pop exec_when () integer_div) exec_dup_items in2 integer_gt in3 print_boolean integer_min boolean_and print_integer exec_do*while (boolean_invert_second_then_and exec_yank integer_dup exec_empty integer_pop boolean_eq) tagged_785 integer_inc exec_k (-16 integer_mult) (integer_fromboolean integer_lt exec_k_when_autoconstructing () ()))
Errors: [1 1 1 1 0 0 0 0 0 0]
Total: 4
Mean: 0.4
Genome size: 41
Size: 49
Percent parens: 0.163
--- Population Statistics ---
Average total errors in population: 7.358
Median total errors in population: 7
Error averages by case: (0.982 0.986 0.685 0.889 0.562 0.639 0.636 0.761 0.45 0.768)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.251
Average program size in population (points): 49.708
Average percent parens in population: 0.207
Minimum age in population: 11.0
Maximum age in population: 11.0
Average age in population: 11.0
Median age in population: 11.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.007
Error (vector) diversity:			 0.046
Behavioral diversity:				 0.297
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 4944500
--- Timings ---
Current time: 1559594100915 milliseconds
Total Time:          23.7 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        13.9 seconds, 58.5%
Fitness Testing:      6.5 seconds, 27.6%
Report:               3.2 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 444
Test mean error for best: 0.44400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -83                 | Program output: -83                
Correct output: 4                   | Program output: 4                  
Correct output: -50                 | Program output: 93                 
Correct output: -12                 | Program output: -12                
Correct output: -41                 | Program output: -41                
Correct output: -94                 | Program output: -94                
Correct output: -90                 | Program output: -90                
Correct output: 33                  | Program output: 33                 
Correct output: -77                 | Program output: -77                
Correct output: -60                 | Program output: 11                 
Correct output: 61                  | Program output: 61                 
Correct output: 68                  | Program output: 68                 
Correct output: 64                  | Program output: 64                 
Correct output: 79                  | Program output: 79                 
Correct output: 49                  | Program output: 49                 
Correct output: 18                  | Program output: 58                 
Correct output: 25                  | Program output: 40                 
Correct output: 6                   | Program output: 53                 
Correct output: 9                   | Program output: 15                 
Correct output: 26                  | Program output: 26                 
Correct output: 4                   | Program output: 4                  
Correct output: 14                  | Program output: 16                 
Correct output: 1                   | Program output: 1                  
Correct output: 54                  | Program output: 87                 
Correct output: 50                  | Program output: 50                 
Correct output: 0                   | Program output: 45                 
Correct output: 18                  | Program output: 18                 
Correct output: 1                   | Program output: 24                 
Correct output: 39                  | Program output: 39                 
Correct output: 11                  | Program output: 40                 
Correct output: 3                   | Program output: 44                 
Correct output: 55                  | Program output: 55                 
Correct output: 5                   | Program output: 5                  
Correct output: 10                  | Program output: 10                 
Correct output: 0                   | Program output: 1                  
Correct output: -97                 | Program output: -97                
Correct output: -17                 | Program output: -17                
Correct output: -49                 | Program output: -49                
Correct output: -100                | Program output: -100               
Correct output: -39                 | Program output: -39                
Correct output: -95                 | Program output: -17                
Correct output: -61                 | Program output: 48                 
Correct output: -65                 | Program output: -65                
Correct output: -31                 | Program output: -31                
Correct output: -92                 | Program output: -63                
Correct output: 19                  | Program output: 52                 
Correct output: -77                 | Program output: -77                
Correct output: -89                 | Program output: 60                 
Correct output: -87                 | Program output: -11                
Correct output: -25                 | Program output: -25                
Correct output: -67                 | Program output: -67                
Correct output: -71                 | Program output: -66                
Correct output: -5                  | Program output: 23                 
Correct output: -95                 | Program output: -66                
Correct output: -76                 | Program output: -76                
Correct output: -60                 | Program output: -60                
Correct output: -86                 | Program output: -57                
Correct output: -97                 | Program output: -50                
Correct output: -39                 | Program output: -39                
Correct output: -72                 | Program output: -58                
Correct output: -19                 | Program output: -19                
Correct output: -42                 | Program output: -21                
Correct output: -75                 | Program output: -75                
Correct output: -70                 | Program output: -70                
Correct output: -92                 | Program output: -92                
Correct output: 24                  | Program output: 24                 
Correct output: -100                | Program output: 23                 
Correct output: -40                 | Program output: -40                
Correct output: -60                 | Program output: -26                
Correct output: -64                 | Program output: -64                
Correct output: 2                   | Program output: 50                 
Correct output: -76                 | Program output: -42                
Correct output: -73                 | Program output: -12                
Correct output: -100                | Program output: -91                
Correct output: -54                 | Program output: 29                 
Correct output: -66                 | Program output: -1                 
Correct output: -79                 | Program output: -15                
Correct output: -94                 | Program output: -94                
Correct output: -95                 | Program output: -74                
Correct output: -81                 | Program output: -81                
Correct output: -99                 | Program output: 58                 
Correct output: -47                 | Program output: -22                
Correct output: -98                 | Program output: -17                
Correct output: -44                 | Program output: -44                
Correct output: 48                  | Program output: 48                 
Correct output: -85                 | Program output: -85                
Correct output: -60                 | Program output: -26                
Correct output: -54                 | Program output: -52                
Correct output: -96                 | Program output: -96                
Correct output: -75                 | Program output: -75                
Correct output: -91                 | Program output: -91                
Correct output: -65                 | Program output: -65                
Correct output: -64                 | Program output: -64                
Correct output: 33                  | Program output: 84                 
Correct output: -100                | Program output: -100               
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_pop} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_div} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_div} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction integer_gt} {:close 1, :instruction in3} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_xor} {:close 0, :instruction tagged_785} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_k} {:close 0, :instruction -16} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_lt})
Lexicase best program: (exec_pop (integer_min in1 integer_rot integer_min integer_yankdup integer_fromboolean boolean_dup_times boolean_and in4 boolean_rot integer_dup_times exec_stackdepth boolean_or integer_div) boolean_dup_times exec_do*while (integer_dup boolean_swap boolean_pop integer_div) integer_mult exec_k_when_autoconstructing (in2 integer_gt in3) (integer_min) boolean_and print_integer exec_do*while (boolean_invert_second_then_and exec_yank integer_dup boolean_eq) integer_dec boolean_xor tagged_785 integer_lte exec_k (-16 integer_mult) (integer_fromboolean integer_lt))
Lexicase best errors: [0 0 1 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 51
Percent parens: 0.157
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_pop} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_div} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_div} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction integer_gt} {:close 1, :instruction in3} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_xor} {:close 0, :instruction tagged_785} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_k} {:close 0, :instruction -16} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_lt})
Zero cases best program: (exec_pop (integer_min in1 integer_rot integer_min integer_yankdup integer_fromboolean boolean_dup_times boolean_and in4 boolean_rot integer_dup_times exec_stackdepth boolean_or integer_div) boolean_dup_times exec_do*while (integer_dup boolean_swap boolean_pop integer_div) integer_mult exec_k_when_autoconstructing (in2 integer_gt in3) (integer_min) boolean_and print_integer exec_do*while (boolean_invert_second_then_and exec_yank integer_dup boolean_eq) integer_dec boolean_xor tagged_785 integer_lte exec_k (-16 integer_mult) (integer_fromboolean integer_lt))
Zero cases best errors: [0 0 1 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 51
Percent parens: 0.157
--- Lexicase Population Statistics ---
Count of elite individuals by case: (234 529 144 223 536 323 684 399 406 349)
Population mean number of elite cases: 3.83
Count of perfect (error zero) individuals by case: (234 529 144 223 536 323 684 399 406 349)
Population mean number of perfect (error zero) cases: 3.83
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_div} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_when} {:close 1, :instruction integer_div} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 1, :instruction in3} {:close 1, :instruction integer_min} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_rot} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction tagged_785} {:close 0, :instruction exec_k} {:close 0, :instruction -16} {:close 0, :instruction in4} {:close 0, :instruction exec_while} {:close 1, :instruction exec_k_when_autoconstructing})
Best program: (exec_eq integer_min in1 integer_min integer_mod integer_fromboolean boolean_dup_times boolean_and boolean_rot integer_dup_times integer_div boolean_dup_times boolean_not exec_do*while (exec_yankdup boolean_swap exec_eq boolean_pop exec_when () integer_div) exec_dup_items in2 integer_empty integer_gt boolean_xor in3 integer_min exec_s (exec_s (boolean_and print_integer integer_empty exec_do*while (boolean_invert_second_then_and exec_rot (in4 exec_yank integer_dup exec_empty integer_pop tagged_785 exec_k (-16 in4 exec_while (exec_k_when_autoconstructing () ())) ()) () ())) () ()) () ())
Errors: [0 0 1 0 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 46
Size: 64
Percent parens: 0.281
--- Population Statistics ---
Average total errors in population: 6.173
Median total errors in population: 6
Error averages by case: (0.766 0.471 0.856 0.777 0.464 0.677 0.316 0.601 0.594 0.651)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.682
Average program size in population (points): 51.373
Average percent parens in population: 0.206
Minimum age in population: 12.0
Maximum age in population: 12.0
Average age in population: 12.0
Median age in population: 12.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.01
Error (vector) diversity:			 0.069
Behavioral diversity:				 0.366
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 5545390
--- Timings ---
Current time: 1559594103014 milliseconds
Total Time:          25.7 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        15.0 seconds, 58.4%
Fitness Testing:      7.1 seconds, 27.8%
Report:               3.5 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 373
Test mean error for best: 0.37300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -83                 | Program output: -83                
Correct output: 4                   | Program output: 4                  
Correct output: -50                 | Program output: -50                
Correct output: -12                 | Program output: -12                
Correct output: -41                 | Program output: -41                
Correct output: -94                 | Program output: -94                
Correct output: -90                 | Program output: -90                
Correct output: 33                  | Program output: 33                 
Correct output: -77                 | Program output: -77                
Correct output: -60                 | Program output: -60                
Correct output: 61                  | Program output: 61                 
Correct output: 68                  | Program output: 68                 
Correct output: 64                  | Program output: 64                 
Correct output: 79                  | Program output: 79                 
Correct output: 49                  | Program output: 49                 
Correct output: 18                  | Program output: 18                 
Correct output: 25                  | Program output: 40                 
Correct output: 6                   | Program output: 53                 
Correct output: 9                   | Program output: 0N                 
Correct output: 26                  | Program output: 26                 
Correct output: 4                   | Program output: 4                  
Correct output: 14                  | Program output: 16                 
Correct output: 1                   | Program output: 1                  
Correct output: 54                  | Program output: 87                 
Correct output: 50                  | Program output: 50                 
Correct output: 0                   | Program output: 0                  
Correct output: 18                  | Program output: 18                 
Correct output: 1                   | Program output: 1                  
Correct output: 39                  | Program output: 39                 
Correct output: 11                  | Program output: 40                 
Correct output: 3                   | Program output: 3                  
Correct output: 55                  | Program output: 55                 
Correct output: 5                   | Program output: 5                  
Correct output: 10                  | Program output: 10                 
Correct output: 0                   | Program output: 1                  
Correct output: -97                 | Program output: -6                 
Correct output: -17                 | Program output: 1212               
Correct output: -49                 | Program output: -36                
Correct output: -100                | Program output: -100               
Correct output: -39                 | Program output: -39                
Correct output: -95                 | Program output: -17                
Correct output: -61                 | Program output: 48                 
Correct output: -65                 | Program output: -65                
Correct output: -31                 | Program output: -31                
Correct output: -92                 | Program output: -63                
Correct output: 19                  | Program output: 52                 
Correct output: -77                 | Program output: 76                 
Correct output: -89                 | Program output: 60                 
Correct output: -87                 | Program output: -87                
Correct output: -25                 | Program output: -25                
Correct output: -67                 | Program output: -67                
Correct output: -71                 | Program output: -66                
Correct output: -5                  | Program output: 23                 
Correct output: -95                 | Program output: -95                
Correct output: -76                 | Program output: -49                
Correct output: -60                 | Program output: -60                
Correct output: -86                 | Program output: -57                
Correct output: -97                 | Program output: -50                
Correct output: -39                 | Program output: -39                
Correct output: -72                 | Program output: -72                
Correct output: -19                 | Program output: -19                
Correct output: -42                 | Program output: -21                
Correct output: -75                 | Program output: -75                
Correct output: -70                 | Program output: -70                
Correct output: -92                 | Program output: -92                
Correct output: 24                  | Program output: 24                 
Correct output: -100                | Program output: 23                 
Correct output: -40                 | Program output: -40                
Correct output: -60                 | Program output: -26                
Correct output: -64                 | Program output: -64                
Correct output: 2                   | Program output: 2                  
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: -12                
Correct output: -100                | Program output: -91                
Correct output: -54                 | Program output: 29                 
Correct output: -66                 | Program output: -1                 
Correct output: -79                 | Program output: -15                
Correct output: -94                 | Program output: -94                
Correct output: -95                 | Program output: -74                
Correct output: -81                 | Program output: -81                
Correct output: -99                 | Program output: 58                 
Correct output: -47                 | Program output: -47                
Correct output: -98                 | Program output: -17                
Correct output: -44                 | Program output: -44                
Correct output: 48                  | Program output: 48                 
Correct output: -85                 | Program output: -85                
Correct output: -60                 | Program output: -60                
Correct output: -54                 | Program output: -54                
Correct output: -96                 | Program output: -96                
Correct output: -75                 | Program output: -75                
Correct output: -91                 | Program output: -91                
Correct output: -65                 | Program output: -65                
Correct output: -64                 | Program output: -64                
Correct output: 33                  | Program output: 84                 
Correct output: -100                | Program output: -100               
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_times} {:close 2, :instruction exec_yankdup} {:close 1, :instruction integer_div} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_div} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 0, :instruction integer_gt} {:close 1, :instruction in3} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_785} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_k_when_autoconstructing})
Lexicase best program: (in1 exec_if (boolean_or integer_rot integer_min exec_do*while (integer_fromboolean boolean_dup_times boolean_and in4 boolean_rot exec_s_when_autoconstructing (integer_swap integer_dup_times exec_yankdup) () (integer_div) exec_do*while (boolean_eq) integer_dup exec_noop integer_div) exec_dup_items in2 integer_gt in3) (integer_min) boolean_and print_integer exec_do*while (boolean_invert_second_then_and exec_yank integer_dup integer_pop exec_k_when_autoconstructing (tagged_785 exec_k (exec_y_when_autoconstructing (integer_flush integer_fromboolean integer_lt exec_k_when_autoconstructing () ())) ()) ()))
Lexicase best errors: [0 0 0 0 0 0 0 0 1 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 57
Percent parens: 0.281
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_times} {:close 2, :instruction exec_yankdup} {:close 1, :instruction integer_div} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_div} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 0, :instruction integer_gt} {:close 1, :instruction in3} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_785} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_k_when_autoconstructing})
Zero cases best program: (in1 exec_if (boolean_or integer_rot integer_min exec_do*while (integer_fromboolean boolean_dup_times boolean_and in4 boolean_rot exec_s_when_autoconstructing (integer_swap integer_dup_times exec_yankdup) () (integer_div) exec_do*while (boolean_eq) integer_dup exec_noop integer_div) exec_dup_items in2 integer_gt in3) (integer_min) boolean_and print_integer exec_do*while (boolean_invert_second_then_and exec_yank integer_dup integer_pop exec_k_when_autoconstructing (tagged_785 exec_k (exec_y_when_autoconstructing (integer_flush integer_fromboolean integer_lt exec_k_when_autoconstructing () ())) ()) ()))
Zero cases best errors: [0 0 0 0 0 0 0 0 1 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 57
Percent parens: 0.281
--- Lexicase Population Statistics ---
Count of elite individuals by case: (546 360 509 485 501 453 159 711 22 422)
Population mean number of elite cases: 4.17
Count of perfect (error zero) individuals by case: (546 360 509 485 501 453 159 711 22 422)
Population mean number of perfect (error zero) cases: 4.17
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_times} {:close 2, :instruction exec_yankdup} {:close 1, :instruction integer_div} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_div} {:close 0, :instruction in2} {:close 0, :instruction integer_gt} {:close 1, :instruction in3} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_785} {:close 0, :instruction exec_k} {:close 0, :instruction integer_flush} {:close 0, :instruction tag_exec_556} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_k_when_autoconstructing})
Best program: (in1 exec_if (boolean_or integer_rot exec_do*while (integer_fromboolean boolean_dup_times exec_if (boolean_and in4 boolean_rot integer_swap integer_dup_times exec_yankdup) () integer_div) exec_do*while (boolean_eq) integer_dup exec_noop integer_div) (in2 integer_gt in3) integer_min boolean_and print_integer exec_do*while (boolean_invert_second_then_and exec_yank exec_k (integer_dup exec_empty integer_pop integer_lt) (exec_k_when_autoconstructing (tagged_785 exec_k (integer_flush tag_exec_556 (integer_fromboolean integer_lt exec_k_when_autoconstructing () ())) ()) ())))
Errors: [0 0 0 0 0 0 0 0 1 0]
Total: 1
Mean: 0.1
Genome size: 42
Size: 59
Percent parens: 0.288
--- Population Statistics ---
Average total errors in population: 5.832
Median total errors in population: 6
Error averages by case: (0.454 0.64 0.491 0.515 0.499 0.547 0.841 0.289 0.978 0.578)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.269
Average program size in population (points): 50.423
Average percent parens in population: 0.198
Minimum age in population: 13.0
Maximum age in population: 13.0
Average age in population: 13.0
Median age in population: 13.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.01
Error (vector) diversity:			 0.088
Behavioral diversity:				 0.361
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 6133211
--- Timings ---
Current time: 1559594105025 milliseconds
Total Time:          27.8 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        16.2 seconds, 58.3%
Fitness Testing:      7.7 seconds, 27.7%
Report:               3.8 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 381
Test mean error for best: 0.38100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -83                 | Program output: -83                
Correct output: 4                   | Program output: 4                  
Correct output: -50                 | Program output: -50                
Correct output: -12                 | Program output: -12                
Correct output: -41                 | Program output: -41                
Correct output: -94                 | Program output: -94                
Correct output: -90                 | Program output: -90                
Correct output: 33                  | Program output: 33                 
Correct output: -77                 | Program output: -77                
Correct output: -60                 | Program output: -60                
Correct output: 61                  | Program output: 61                 
Correct output: 68                  | Program output: 68                 
Correct output: 64                  | Program output: 64                 
Correct output: 79                  | Program output: 79                 
Correct output: 49                  | Program output: 49                 
Correct output: 18                  | Program output: 1818               
Correct output: 25                  | Program output: 85                 
Correct output: 6                   | Program output: 59                 
Correct output: 9                   | Program output: 9                  
Correct output: 26                  | Program output: 26                 
Correct output: 4                   | Program output: 4                  
Correct output: 14                  | Program output: 16                 
Correct output: 1                   | Program output: 1                  
Correct output: 54                  | Program output: 87                 
Correct output: 50                  | Program output: 50                 
Correct output: 0                   | Program output: 0                  
Correct output: 18                  | Program output: 18                 
Correct output: 1                   | Program output:                    
Correct output: 39                  | Program output: 39                 
Correct output: 11                  | Program output: 16                 
Correct output: 3                   | Program output: 3                  
Correct output: 55                  | Program output: 55                 
Correct output: 5                   | Program output: 5                  
Correct output: 10                  | Program output: 10                 
Correct output: 0                   | Program output: 1                  
Correct output: -97                 | Program output: -6                 
Correct output: -17                 | Program output: 12                 
Correct output: -49                 | Program output: -36                
Correct output: -100                | Program output: -100               
Correct output: -39                 | Program output: -39                
Correct output: -95                 | Program output: -17                
Correct output: -61                 | Program output: 48                 
Correct output: -65                 | Program output: -65                
Correct output: -31                 | Program output: -31                
Correct output: -92                 | Program output: -63                
Correct output: 19                  | Program output: 19                 
Correct output: -77                 | Program output: -77                
Correct output: -89                 | Program output: 60                 
Correct output: -87                 | Program output: -87                
Correct output: -25                 | Program output: -25                
Correct output: -67                 | Program output: -67                
Correct output: -71                 | Program output: -66                
Correct output: -5                  | Program output: 23                 
Correct output: -95                 | Program output: -95                
Correct output: -76                 | Program output: -49                
Correct output: -60                 | Program output: -60                
Correct output: -86                 | Program output: -57                
Correct output: -97                 | Program output: -50                
Correct output: -39                 | Program output: -39                
Correct output: -72                 | Program output: -72                
Correct output: -19                 | Program output: -19                
Correct output: -42                 | Program output: -21                
Correct output: -75                 | Program output: -75                
Correct output: -70                 | Program output: -70                
Correct output: -92                 | Program output: -92                
Correct output: 24                  | Program output: 24                 
Correct output: -100                | Program output: 23                 
Correct output: -40                 | Program output: -40                
Correct output: -60                 | Program output: -26                
Correct output: -64                 | Program output: -64                
Correct output: 2                   | Program output: 2                  
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: -12                
Correct output: -100                | Program output: -91                
Correct output: -54                 | Program output: 29                 
Correct output: -66                 | Program output: -1                 
Correct output: -79                 | Program output: -15                
Correct output: -94                 | Program output: -94                
Correct output: -95                 | Program output: -74                
Correct output: -81                 | Program output: -81                
Correct output: -99                 | Program output: 58                 
Correct output: -47                 | Program output: -47                
Correct output: -98                 | Program output: -17                
Correct output: -44                 | Program output: -44                
Correct output: 48                  | Program output: 48                 
Correct output: -85                 | Program output: -85                
Correct output: -60                 | Program output: -60                
Correct output: -54                 | Program output: -54                
Correct output: -96                 | Program output: -96                
Correct output: -75                 | Program output: -75                
Correct output: -91                 | Program output: -91                
Correct output: -65                 | Program output: -65                
Correct output: -64                 | Program output: -64                
Correct output: 33                  | Program output: 84                 
Correct output: -100                | Program output: -100               
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in4} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_times} {:close 2, :instruction exec_yankdup} {:close 1, :instruction integer_div} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_div} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_not} {:close 1, :instruction in3} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_k_when_autoconstructing})
Lexicase best program: (in1 exec_if (boolean_or integer_rot integer_min exec_do*while (integer_fromboolean in4 boolean_rot integer_swap integer_dup_times exec_yankdup)) (integer_div) boolean_eq integer_dup exec_noop integer_div exec_dup_items in2 integer_gt boolean_not in3 integer_min boolean_and print_integer exec_do*while (boolean_invert_second_then_and integer_yank exec_yank integer_dup integer_pop exec_k_when_autoconstructing (exec_k (integer_flush integer_fromboolean integer_lt exec_k_when_autoconstructing () ()) ()) ()))
Lexicase best errors: [0 0 0 0 0 1 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 48
Percent parens: 0.229
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in4} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_times} {:close 2, :instruction exec_yankdup} {:close 1, :instruction integer_div} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_div} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_not} {:close 1, :instruction in3} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_k_when_autoconstructing})
Zero cases best program: (in1 exec_if (boolean_or integer_rot integer_min exec_do*while (integer_fromboolean in4 boolean_rot integer_swap integer_dup_times exec_yankdup)) (integer_div) boolean_eq integer_dup exec_noop integer_div exec_dup_items in2 integer_gt boolean_not in3 integer_min boolean_and print_integer exec_do*while (boolean_invert_second_then_and integer_yank exec_yank integer_dup integer_pop exec_k_when_autoconstructing (exec_k (integer_flush integer_fromboolean integer_lt exec_k_when_autoconstructing () ()) ()) ()))
Zero cases best errors: [0 0 0 0 0 1 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 48
Percent parens: 0.229
--- Lexicase Population Statistics ---
Count of elite individuals by case: (139 493 464 135 476 219 541 408 482 652)
Population mean number of elite cases: 4.01
Count of perfect (error zero) individuals by case: (139 493 464 135 476 219 541 408 482 652)
Population mean number of perfect (error zero) cases: 4.01
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_times} {:close 2, :instruction exec_yankdup} {:close 1, :instruction integer_div} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_div} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_not} {:close 1, :instruction in3} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_k_when_autoconstructing})
Best program: (in1 exec_if (boolean_or integer_rot integer_min exec_do*while (integer_fromboolean boolean_dup_times in4 boolean_rot integer_swap integer_dup_times exec_yankdup)) (integer_div) exec_do*while (boolean_eq) integer_dup exec_noop integer_div exec_dup_items in2 exec_k_when_autoconstructing () () integer_gt boolean_not in3 integer_min boolean_and print_integer exec_do*while (boolean_invert_second_then_and integer_yank exec_yank integer_dup integer_pop exec_k_when_autoconstructing (exec_k (integer_flush integer_fromboolean integer_lt exec_k_when_autoconstructing () ()) ()) ()))
Errors: [0 0 0 0 0 1 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 40
Size: 54
Percent parens: 0.259
--- Population Statistics ---
Average total errors in population: 5.991
Median total errors in population: 5
Error averages by case: (0.861 0.507 0.536 0.865 0.524 0.781 0.459 0.592 0.518 0.348)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.767
Average program size in population (points): 51.299
Average percent parens in population: 0.220
Minimum age in population: 14.0
Maximum age in population: 14.0
Average age in population: 14.0
Median age in population: 14.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.01
Error (vector) diversity:			 0.093
Behavioral diversity:				 0.329
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 6556554
--- Timings ---
Current time: 1559594107057 milliseconds
Total Time:          29.7 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        17.4 seconds, 58.5%
Fitness Testing:      8.1 seconds, 27.4%
Report:               4.1 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 214
Test mean error for best: 0.21400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -83                 | Program output: -83                
Correct output: 4                   | Program output: 4                  
Correct output: -50                 | Program output: 93                 
Correct output: -12                 | Program output: -12                
Correct output: -41                 | Program output: -41                
Correct output: -94                 | Program output: -94                
Correct output: -90                 | Program output: -90                
Correct output: 33                  | Program output: 33                 
Correct output: -77                 | Program output: -77                
Correct output: -60                 | Program output: 11                 
Correct output: 61                  | Program output: 61                 
Correct output: 68                  | Program output: 68                 
Correct output: 64                  | Program output: 64                 
Correct output: 79                  | Program output: 79                 
Correct output: 49                  | Program output: 49                 
Correct output: 18                  | Program output: 58                 
Correct output: 25                  | Program output: 40                 
Correct output: 6                   | Program output: 6                  
Correct output: 9                   | Program output: 15                 
Correct output: 26                  | Program output: 26                 
Correct output: 4                   | Program output: 4                  
Correct output: 14                  | Program output: 14                 
Correct output: 1                   | Program output: 1                  
Correct output: 54                  | Program output: 54                 
Correct output: 50                  | Program output: 50                 
Correct output: 0                   | Program output: 45                 
Correct output: 18                  | Program output: 18                 
Correct output: 1                   | Program output: 24                 
Correct output: 39                  | Program output: 39                 
Correct output: 11                  | Program output: 11                 
Correct output: 3                   | Program output: 44                 
Correct output: 55                  | Program output: 55                 
Correct output: 5                   | Program output: 5                  
Correct output: 10                  | Program output: 10                 
Correct output: 0                   | Program output: 0                  
Correct output: -97                 | Program output: -97                
Correct output: -17                 | Program output: -17                
Correct output: -49                 | Program output: -49                
Correct output: -100                | Program output: -100               
Correct output: -39                 | Program output: -39                
Correct output: -95                 | Program output: -95                
Correct output: -61                 | Program output: -61                
Correct output: -65                 | Program output: -65                
Correct output: -31                 | Program output: -31                
Correct output: -92                 | Program output: -92                
Correct output: 19                  | Program output: 19                 
Correct output: -77                 | Program output: -77                
Correct output: -89                 | Program output: -89                
Correct output: -87                 | Program output: -11                
Correct output: -25                 | Program output: -25                
Correct output: -67                 | Program output: -67                
Correct output: -71                 | Program output: -71                
Correct output: -5                  | Program output: -5                 
Correct output: -95                 | Program output: -66                
Correct output: -76                 | Program output: -76                
Correct output: -60                 | Program output: -60                
Correct output: -86                 | Program output: -86                
Correct output: -97                 | Program output: -97                
Correct output: -39                 | Program output: -39                
Correct output: -72                 | Program output: -58                
Correct output: -19                 | Program output: -19                
Correct output: -42                 | Program output: -42                
Correct output: -75                 | Program output: -75                
Correct output: -70                 | Program output: -70                
Correct output: -92                 | Program output: -92                
Correct output: 24                  | Program output: 24                 
Correct output: -100                | Program output: -100               
Correct output: -40                 | Program output: -40                
Correct output: -60                 | Program output: -60                
Correct output: -64                 | Program output: -64                
Correct output: 2                   | Program output: 50                 
Correct output: -76                 | Program output: -42                
Correct output: -73                 | Program output: -73                
Correct output: -100                | Program output: -100               
Correct output: -54                 | Program output: -54                
Correct output: -66                 | Program output: -56                
Correct output: -79                 | Program output: -71                
Correct output: -94                 | Program output: -94                
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: -81                
Correct output: -99                 | Program output: -99                
Correct output: -47                 | Program output: -22                
Correct output: -98                 | Program output: -98                
Correct output: -44                 | Program output: -44                
Correct output: 48                  | Program output: 48                 
Correct output: -85                 | Program output: -85                
Correct output: -60                 | Program output: -26                
Correct output: -54                 | Program output: -52                
Correct output: -96                 | Program output: -96                
Correct output: -75                 | Program output: -75                
Correct output: -91                 | Program output: -91                
Correct output: -65                 | Program output: -65                
Correct output: -64                 | Program output: -64                
Correct output: 33                  | Program output: 83                 
Correct output: -100                | Program output: -100               
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_div} {:close 0, :instruction integer_mult} {:close 2, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gt} {:close 1, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_k} {:close 0, :instruction integer_min} {:close 0, :instruction -16} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_min})
Lexicase best program: (exec_pop (in1 integer_min integer_fromboolean boolean_and in4 boolean_rot integer_dup_times boolean_dup_times) exec_do*while (boolean_swap boolean_pop integer_div) integer_mult in1 exec_k_when_autoconstructing (in2 integer_min integer_gt in3) (boolean_invert_second_then_and integer_min) integer_fromboolean boolean_and print_integer boolean_invert_second_then_and integer_dup exec_empty integer_dec integer_lte exec_pop (exec_k (integer_min -16 integer_mult) (integer_min exec_s_when_autoconstructing (integer_min) () ())))
Lexicase best errors: [0 0 0 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 49
Percent parens: 0.224
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_div} {:close 0, :instruction integer_mult} {:close 2, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gt} {:close 1, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_k} {:close 0, :instruction integer_min} {:close 0, :instruction -16} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_min})
Zero cases best program: (exec_pop (in1 integer_min integer_fromboolean boolean_and in4 boolean_rot integer_dup_times boolean_dup_times) exec_do*while (boolean_swap boolean_pop integer_div) integer_mult in1 exec_k_when_autoconstructing (in2 integer_min integer_gt in3) (boolean_invert_second_then_and integer_min) integer_fromboolean boolean_and print_integer boolean_invert_second_then_and integer_dup exec_empty integer_dec integer_lte exec_pop (exec_k (integer_min -16 integer_mult) (integer_min exec_s_when_autoconstructing (integer_min) () ())))
Zero cases best errors: [0 0 0 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 49
Percent parens: 0.224
--- Lexicase Population Statistics ---
Count of elite individuals by case: (481 352 569 348 170 161 163 230 316 467)
Population mean number of elite cases: 3.26
Count of perfect (error zero) individuals by case: (481 352 569 348 170 161 163 230 316 467)
Population mean number of perfect (error zero) cases: 3.26
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_empty} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_div} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_div} {:close 0, :instruction integer_mult} {:close 2, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gt} {:close 2, :instruction exec_swap} {:close 1, :instruction in3} {:close 1, :instruction integer_min} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_pop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction -16} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min})
Best program: (integer_empty exec_pop (in1 integer_min integer_fromboolean boolean_and in4 boolean_rot integer_dup_times integer_div) boolean_dup_times exec_do*while (boolean_swap boolean_pop integer_div) integer_mult in1 exec_k_when_autoconstructing (in2 integer_min integer_gt exec_swap () () in3) (integer_min) integer_mod integer_fromboolean boolean_and boolean_dup_times print_integer boolean_invert_second_then_and exec_empty integer_dec integer_lte exec_pop (print_integer exec_k (-16 boolean_flush integer_mult) (integer_fromboolean integer_min integer_min)))
Errors: [0 0 0 0 0 0 0 1 0 0]
Total: 1
Mean: 0.1
Genome size: 42
Size: 52
Percent parens: 0.192
--- Population Statistics ---
Average total errors in population: 6.743
Median total errors in population: 7
Error averages by case: (0.519 0.648 0.431 0.652 0.83 0.839 0.837 0.77 0.684 0.533)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.045
Average program size in population (points): 49.997
Average percent parens in population: 0.216
Minimum age in population: 15.0
Maximum age in population: 15.0
Average age in population: 15.0
Median age in population: 15.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.01
Error (vector) diversity:			 0.069
Behavioral diversity:				 0.337
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 6985972
--- Timings ---
Current time: 1559594108884 milliseconds
Total Time:          31.7 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        18.6 seconds, 58.6%
Fitness Testing:      8.6 seconds, 27.0%
Report:               4.5 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 214
Test mean error for best: 0.21400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -83                 | Program output: -83                
Correct output: 4                   | Program output: 4                  
Correct output: -50                 | Program output: 93                 
Correct output: -12                 | Program output: -12                
Correct output: -41                 | Program output: -41                
Correct output: -94                 | Program output: -94                
Correct output: -90                 | Program output: -90                
Correct output: 33                  | Program output: 33                 
Correct output: -77                 | Program output: -77                
Correct output: -60                 | Program output: 11                 
Correct output: 61                  | Program output: 61                 
Correct output: 68                  | Program output: 68                 
Correct output: 64                  | Program output: 64                 
Correct output: 79                  | Program output: 79                 
Correct output: 49                  | Program output: 49                 
Correct output: 18                  | Program output: 58                 
Correct output: 25                  | Program output: 40                 
Correct output: 6                   | Program output: 6                  
Correct output: 9                   | Program output: 15                 
Correct output: 26                  | Program output: 26                 
Correct output: 4                   | Program output: 4                  
Correct output: 14                  | Program output: 14                 
Correct output: 1                   | Program output: 1                  
Correct output: 54                  | Program output: 54                 
Correct output: 50                  | Program output: 50                 
Correct output: 0                   | Program output: 45                 
Correct output: 18                  | Program output: 18                 
Correct output: 1                   | Program output: 24                 
Correct output: 39                  | Program output: 39                 
Correct output: 11                  | Program output: 11                 
Correct output: 3                   | Program output: 44                 
Correct output: 55                  | Program output: 55                 
Correct output: 5                   | Program output: 5                  
Correct output: 10                  | Program output: 10                 
Correct output: 0                   | Program output: 0                  
Correct output: -97                 | Program output: -97                
Correct output: -17                 | Program output: -17                
Correct output: -49                 | Program output: -49                
Correct output: -100                | Program output: -100               
Correct output: -39                 | Program output: -39                
Correct output: -95                 | Program output: -95                
Correct output: -61                 | Program output: -61                
Correct output: -65                 | Program output: -65                
Correct output: -31                 | Program output: -31                
Correct output: -92                 | Program output: -92                
Correct output: 19                  | Program output: 19                 
Correct output: -77                 | Program output: -77                
Correct output: -89                 | Program output: -89                
Correct output: -87                 | Program output: -11                
Correct output: -25                 | Program output: -25                
Correct output: -67                 | Program output: -67                
Correct output: -71                 | Program output: -71                
Correct output: -5                  | Program output: -5                 
Correct output: -95                 | Program output: -66                
Correct output: -76                 | Program output: -76                
Correct output: -60                 | Program output: -60                
Correct output: -86                 | Program output: -86                
Correct output: -97                 | Program output: -97                
Correct output: -39                 | Program output: -39                
Correct output: -72                 | Program output: -58                
Correct output: -19                 | Program output: -19                
Correct output: -42                 | Program output: -42                
Correct output: -75                 | Program output: -75                
Correct output: -70                 | Program output: -70                
Correct output: -92                 | Program output: -92                
Correct output: 24                  | Program output: 24                 
Correct output: -100                | Program output: -100               
Correct output: -40                 | Program output: -40                
Correct output: -60                 | Program output: -60                
Correct output: -64                 | Program output: -64                
Correct output: 2                   | Program output: 50                 
Correct output: -76                 | Program output: -42                
Correct output: -73                 | Program output: -73                
Correct output: -100                | Program output: -100               
Correct output: -54                 | Program output: -54                
Correct output: -66                 | Program output: -56                
Correct output: -79                 | Program output: -71                
Correct output: -94                 | Program output: -94                
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: -81                
Correct output: -99                 | Program output: -99                
Correct output: -47                 | Program output: -22                
Correct output: -98                 | Program output: -98                
Correct output: -44                 | Program output: -44                
Correct output: 48                  | Program output: 48                 
Correct output: -85                 | Program output: -85                
Correct output: -60                 | Program output: -26                
Correct output: -54                 | Program output: -52                
Correct output: -96                 | Program output: -96                
Correct output: -75                 | Program output: -75                
Correct output: -91                 | Program output: -91                
Correct output: -65                 | Program output: -65                
Correct output: -64                 | Program output: -64                
Correct output: 33                  | Program output: 83                 
Correct output: -100                | Program output: -100               
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_min} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_do*times} {:close 0, :instruction in4} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_dup_items} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_div} {:close 0, :instruction integer_mult} {:close 2, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gt} {:close 1, :instruction in3} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_k} {:close 0, :instruction -16} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_min})
Lexicase best program: (exec_pop (in1 integer_flush) integer_min integer_lt boolean_and exec_do*times () in4 integer_inc boolean_rot integer_dup_times integer_dup_items boolean_dup_times integer_eq exec_do*while (boolean_swap boolean_pop integer_div) integer_mult in1 exec_k_when_autoconstructing (in2 integer_min integer_gt in3) (integer_min) boolean_and print_integer boolean_invert_second_then_and integer_dup exec_empty boolean_eq integer_dec integer_lte exec_pop (boolean_swap boolean_eq exec_k (-16 boolean_empty integer_mult) (integer_fromboolean integer_min)))
Lexicase best errors: [0 0 1 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 52
Percent parens: 0.173
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_min} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_do*times} {:close 0, :instruction in4} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_dup_items} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_div} {:close 0, :instruction integer_mult} {:close 2, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gt} {:close 1, :instruction in3} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_k} {:close 0, :instruction -16} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_min})
Zero cases best program: (exec_pop (in1 integer_flush) integer_min integer_lt boolean_and exec_do*times () in4 integer_inc boolean_rot integer_dup_times integer_dup_items boolean_dup_times integer_eq exec_do*while (boolean_swap boolean_pop integer_div) integer_mult in1 exec_k_when_autoconstructing (in2 integer_min integer_gt in3) (integer_min) boolean_and print_integer boolean_invert_second_then_and integer_dup exec_empty boolean_eq integer_dec integer_lte exec_pop (boolean_swap boolean_eq exec_k (-16 boolean_empty integer_mult) (integer_fromboolean integer_min)))
Zero cases best errors: [0 0 1 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 52
Percent parens: 0.173
--- Lexicase Population Statistics ---
Count of elite individuals by case: (505 334 109 336 425 444 317 327 326 451)
Population mean number of elite cases: 3.57
Count of perfect (error zero) individuals by case: (505 334 109 336 425 444 317 327 326 451)
Population mean number of perfect (error zero) cases: 3.57
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_div} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_div} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_sub} {:close 2, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gt} {:close 1, :instruction in3} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_k} {:close 0, :instruction -16} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min})
Best program: (exec_pop (in1 integer_min in2 boolean_and boolean_rot integer_div) boolean_dup_times exec_do*while (boolean_dup) boolean_swap integer_dup boolean_pop integer_div integer_mult integer_sub in1 exec_k_when_autoconstructing (in2 integer_min integer_gt in3) (boolean_flush integer_min) integer_fromboolean boolean_and print_integer boolean_invert_second_then_and exec_empty boolean_eq integer_gt integer_lte exec_pop (exec_y_when_autoconstructing (exec_k (-16 integer_fromboolean integer_min integer_min) ())))
Errors: [0 0 1 0 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 39
Size: 48
Percent parens: 0.188
--- Population Statistics ---
Average total errors in population: 6.426
Median total errors in population: 7
Error averages by case: (0.495 0.666 0.891 0.664 0.575 0.556 0.683 0.673 0.674 0.549)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.003
Average program size in population (points): 48.412
Average percent parens in population: 0.193
Minimum age in population: 16.0
Maximum age in population: 16.0
Average age in population: 16.0
Median age in population: 16.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.01
Error (vector) diversity:			 0.046
Behavioral diversity:				 0.229
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 7327925
--- Timings ---
Current time: 1559594110607 milliseconds
Total Time:          33.4 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        19.8 seconds, 59.1%
Fitness Testing:      8.9 seconds, 26.7%
Report:               4.7 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Smallest problem report - generation 17
Test total error for best: 202
Test mean error for best: 0.20200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -83                 | Program output: -83                
Correct output: 4                   | Program output: 4                  
Correct output: -50                 | Program output: -50                
Correct output: -12                 | Program output: -12                
Correct output: -41                 | Program output: -41                
Correct output: -94                 | Program output: -94                
Correct output: -90                 | Program output: -90                
Correct output: 33                  | Program output: 33                 
Correct output: -77                 | Program output: 43                 
Correct output: -60                 | Program output: -60                
Correct output: 61                  | Program output: 61                 
Correct output: 68                  | Program output: 68                 
Correct output: 64                  | Program output: 64                 
Correct output: 79                  | Program output: 79                 
Correct output: 49                  | Program output: 49                 
Correct output: 18                  | Program output: 18                 
Correct output: 25                  | Program output: 25                 
Correct output: 6                   | Program output: 6                  
Correct output: 9                   | Program output: 9                  
Correct output: 26                  | Program output: 45                 
Correct output: 4                   | Program output: 33                 
Correct output: 14                  | Program output: 14                 
Correct output: 1                   | Program output: 1                  
Correct output: 54                  | Program output: 54                 
Correct output: 50                  | Program output: 50                 
Correct output: 0                   | Program output: 0                  
Correct output: 18                  | Program output: 25                 
Correct output: 1                   | Program output: 1                  
Correct output: 39                  | Program output: 39                 
Correct output: 11                  | Program output: 11                 
Correct output: 3                   | Program output: 3                  
Correct output: 55                  | Program output: 55                 
Correct output: 5                   | Program output: 12                 
Correct output: 10                  | Program output: 68                 
Correct output: 0                   | Program output: 0                  
Correct output: -97                 | Program output: -6                 
Correct output: -17                 | Program output: 12                 
Correct output: -49                 | Program output: -36                
Correct output: -100                | Program output: -90                
Correct output: -39                 | Program output: -39                
Correct output: -95                 | Program output: -95                
Correct output: -61                 | Program output: -61                
Correct output: -65                 | Program output: -65                
Correct output: -31                 | Program output: -31                
Correct output: -92                 | Program output: -92                
Correct output: 19                  | Program output: 19                 
Correct output: -77                 | Program output: -50                
Correct output: -89                 | Program output: -89                
Correct output: -87                 | Program output: -87                
Correct output: -25                 | Program output: -25                
Correct output: -67                 | Program output: -67                
Correct output: -71                 | Program output: -71                
Correct output: -5                  | Program output: -5                 
Correct output: -95                 | Program output: -95                
Correct output: -76                 | Program output: -49                
Correct output: -60                 | Program output: -60                
Correct output: -86                 | Program output: -86                
Correct output: -97                 | Program output: -97                
Correct output: -39                 | Program output: -6                 
Correct output: -72                 | Program output: -72                
Correct output: -19                 | Program output: 30                 
Correct output: -42                 | Program output: -42                
Correct output: -75                 | Program output: -75                
Correct output: -70                 | Program output: -70                
Correct output: -92                 | Program output: -92                
Correct output: 24                  | Program output: 24                 
Correct output: -100                | Program output: -100               
Correct output: -40                 | Program output: -40                
Correct output: -60                 | Program output: -60                
Correct output: -64                 | Program output: 20                 
Correct output: 2                   | Program output: 2                  
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: -73                
Correct output: -100                | Program output: -100               
Correct output: -54                 | Program output: -54                
Correct output: -66                 | Program output: -66                
Correct output: -79                 | Program output: -79                
Correct output: -94                 | Program output: -21                
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: -11                
Correct output: -99                 | Program output: -99                
Correct output: -47                 | Program output: -47                
Correct output: -98                 | Program output: -98                
Correct output: -44                 | Program output: -44                
Correct output: 48                  | Program output: 53                 
Correct output: -85                 | Program output: -85                
Correct output: -60                 | Program output: -60                
Correct output: -54                 | Program output: -54                
Correct output: -96                 | Program output: -50                
Correct output: -75                 | Program output: -75                
Correct output: -91                 | Program output: -91                
Correct output: -65                 | Program output: -19                
Correct output: -64                 | Program output: -33                
Correct output: 33                  | Program output: 33                 
Correct output: -100                | Program output: -100               
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_div} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction tagged_502} {:close 1, :instruction integer_div} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_yank} {:close 2, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_or} {:close 1, :instruction in3} {:close 1, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min})
Lexicase best program: (exec_pop (boolean_stackdepth integer_fromboolean boolean_rot) boolean_and in4 boolean_rot integer_div boolean_dup_times boolean_swap tagged_502 integer_div integer_mult boolean_yank in1 exec_k_when_autoconstructing (integer_min integer_gt boolean_or in3) (integer_min) integer_fromboolean boolean_and print_integer integer_dup exec_pop (integer_fromboolean boolean_dup_times integer_min))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 34
Percent parens: 0.147
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_div} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction tagged_502} {:close 1, :instruction integer_div} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_yank} {:close 2, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_or} {:close 1, :instruction in3} {:close 1, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min})
Zero cases best program: (exec_pop (boolean_stackdepth integer_fromboolean boolean_rot) boolean_and in4 boolean_rot integer_div boolean_dup_times boolean_swap tagged_502 integer_div integer_mult boolean_yank in1 exec_k_when_autoconstructing (integer_min integer_gt boolean_or in3) (integer_min) integer_fromboolean boolean_and print_integer integer_dup exec_pop (integer_fromboolean boolean_dup_times integer_min))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 34
Percent parens: 0.147
--- Lexicase Population Statistics ---
Count of elite individuals by case: (296 244 578 388 387 389 306 243 240 384)
Population mean number of elite cases: 3.45
Count of perfect (error zero) individuals by case: (296 244 578 388 387 389 306 243 240 384)
Population mean number of perfect (error zero) cases: 3.45
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_pop} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_div} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_div} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_yank} {:close 2, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_or} {:close 1, :instruction in3} {:close 1, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_min})
Best program: (exec_pop (exec_do*times () boolean_stackdepth integer_fromboolean boolean_rot) boolean_and in4 boolean_rot integer_div boolean_dup_times boolean_swap integer_div integer_mult boolean_yank in1 exec_k_when_autoconstructing (integer_min integer_gt boolean_or in3) (integer_min) integer_fromboolean boolean_and print_integer boolean_invert_second_then_and integer_dup exec_pop (integer_fromboolean integer_min))
Errors: [0 0 0 0 0 0 0 0 0 1]
Total: 1
Mean: 0.1
Genome size: 29
Size: 35
Percent parens: 0.171
--- Population Statistics ---
Average total errors in population: 6.545
Median total errors in population: 6
Error averages by case: (0.704 0.756 0.422 0.612 0.613 0.611 0.694 0.757 0.76 0.616)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.87
Average program size in population (points): 52.521
Average percent parens in population: 0.216
Minimum age in population: 17.0
Maximum age in population: 17.0
Average age in population: 17.0
Median age in population: 17.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.01
Error (vector) diversity:			 0.04
Behavioral diversity:				 0.226
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 7646194
--- Timings ---
Current time: 1559594112286 milliseconds
Total Time:          35.1 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        20.9 seconds, 59.5%
Fitness Testing:      9.2 seconds, 26.3%
Report:               4.9 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Smallest problem report - generation 18
Test total error for best: 214
Test mean error for best: 0.21400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -83                 | Program output: -83                
Correct output: 4                   | Program output: 4                  
Correct output: -50                 | Program output: 93                 
Correct output: -12                 | Program output: -12                
Correct output: -41                 | Program output: -41                
Correct output: -94                 | Program output: -94                
Correct output: -90                 | Program output: -90                
Correct output: 33                  | Program output: 33                 
Correct output: -77                 | Program output: -77                
Correct output: -60                 | Program output: 11                 
Correct output: 61                  | Program output: 61                 
Correct output: 68                  | Program output: 68                 
Correct output: 64                  | Program output: 64                 
Correct output: 79                  | Program output: 79                 
Correct output: 49                  | Program output: 49                 
Correct output: 18                  | Program output: 58                 
Correct output: 25                  | Program output: 40                 
Correct output: 6                   | Program output: 6                  
Correct output: 9                   | Program output: 15                 
Correct output: 26                  | Program output: 26                 
Correct output: 4                   | Program output: 4                  
Correct output: 14                  | Program output: 14                 
Correct output: 1                   | Program output: 1                  
Correct output: 54                  | Program output: 54                 
Correct output: 50                  | Program output: 50                 
Correct output: 0                   | Program output: 45                 
Correct output: 18                  | Program output: 18                 
Correct output: 1                   | Program output: 24                 
Correct output: 39                  | Program output: 39                 
Correct output: 11                  | Program output: 11                 
Correct output: 3                   | Program output: 44                 
Correct output: 55                  | Program output: 55                 
Correct output: 5                   | Program output: 5                  
Correct output: 10                  | Program output: 10                 
Correct output: 0                   | Program output: 0                  
Correct output: -97                 | Program output: -97                
Correct output: -17                 | Program output: -17                
Correct output: -49                 | Program output: -49                
Correct output: -100                | Program output: -100               
Correct output: -39                 | Program output: -39                
Correct output: -95                 | Program output: -95                
Correct output: -61                 | Program output: -61                
Correct output: -65                 | Program output: -65                
Correct output: -31                 | Program output: -31                
Correct output: -92                 | Program output: -92                
Correct output: 19                  | Program output: 19                 
Correct output: -77                 | Program output: -77                
Correct output: -89                 | Program output: -89                
Correct output: -87                 | Program output: -11                
Correct output: -25                 | Program output: -25                
Correct output: -67                 | Program output: -67                
Correct output: -71                 | Program output: -71                
Correct output: -5                  | Program output: -5                 
Correct output: -95                 | Program output: -66                
Correct output: -76                 | Program output: -76                
Correct output: -60                 | Program output: -60                
Correct output: -86                 | Program output: -86                
Correct output: -97                 | Program output: -97                
Correct output: -39                 | Program output: -39                
Correct output: -72                 | Program output: -58                
Correct output: -19                 | Program output: -19                
Correct output: -42                 | Program output: -42                
Correct output: -75                 | Program output: -75                
Correct output: -70                 | Program output: -70                
Correct output: -92                 | Program output: -92                
Correct output: 24                  | Program output: 24                 
Correct output: -100                | Program output: -100               
Correct output: -40                 | Program output: -40                
Correct output: -60                 | Program output: -60                
Correct output: -64                 | Program output: -64                
Correct output: 2                   | Program output: 50                 
Correct output: -76                 | Program output: -42                
Correct output: -73                 | Program output: -73                
Correct output: -100                | Program output: -100               
Correct output: -54                 | Program output: -54                
Correct output: -66                 | Program output: -56                
Correct output: -79                 | Program output: -71                
Correct output: -94                 | Program output: -94                
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: -81                
Correct output: -99                 | Program output: -99                
Correct output: -47                 | Program output: -22                
Correct output: -98                 | Program output: -98                
Correct output: -44                 | Program output: -44                
Correct output: 48                  | Program output: 48                 
Correct output: -85                 | Program output: -85                
Correct output: -60                 | Program output: -26                
Correct output: -54                 | Program output: -52                
Correct output: -96                 | Program output: -96                
Correct output: -75                 | Program output: -75                
Correct output: -91                 | Program output: -91                
Correct output: -65                 | Program output: -65                
Correct output: -64                 | Program output: -64                
Correct output: 33                  | Program output: 83                 
Correct output: -100                | Program output: -100               
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_div} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_div} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_yank} {:close 2, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_or} {:close 1, :instruction in3} {:close 1, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_min})
Lexicase best program: (exec_pop (boolean_stackdepth integer_fromboolean boolean_rot) boolean_and in4 exec_if () (boolean_rot integer_div) boolean_dup_times boolean_swap integer_div integer_mult boolean_yank in1 exec_k_when_autoconstructing (integer_min integer_gt boolean_or in3) (integer_min) integer_fromboolean boolean_and print_integer boolean_invert_second_then_and integer_dup integer_fromboolean exec_yankdup integer_min)
Lexicase best errors: [1 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 35
Percent parens: 0.171
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_div} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_div} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_yank} {:close 2, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_or} {:close 1, :instruction in3} {:close 1, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_min})
Zero cases best program: (exec_pop (boolean_stackdepth integer_fromboolean boolean_rot) boolean_and in4 exec_if () (boolean_rot integer_div) boolean_dup_times boolean_swap integer_div integer_mult boolean_yank in1 exec_k_when_autoconstructing (integer_min integer_gt boolean_or in3) (integer_min) integer_fromboolean boolean_and print_integer boolean_invert_second_then_and integer_dup integer_fromboolean exec_yankdup integer_min)
Zero cases best errors: [1 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 35
Percent parens: 0.171
--- Lexicase Population Statistics ---
Count of elite individuals by case: (217 404 335 583 417 401 377 435 622 423)
Population mean number of elite cases: 4.21
Count of perfect (error zero) individuals by case: (217 404 335 583 417 401 377 435 622 423)
Population mean number of perfect (error zero) cases: 4.21
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_exec} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_flush} {:close 1, :instruction in3} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_div} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_eq} {:close 1, :instruction integer_dup_times} {:close 1, :instruction integer_div} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_gt} {:close 1, :instruction in3} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_eq} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_eq} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min})
Best program: (exec_pop (exec_do*count (print_exec (integer_min exec_k_when_autoconstructing (in1 integer_min integer_lt integer_fromboolean boolean_and exec_while (boolean_flush) in3) (integer_dup_times integer_div) boolean_dup_times) boolean_yank) exec_do*while (exec_eq) integer_dup_times) integer_div integer_mult exec_y_when_autoconstructing (in1) boolean_invert_second_then_and in2 integer_min integer_sub integer_gt in3 integer_min print_integer integer_fromboolean boolean_and exec_eq print_integer boolean_invert_second_then_and integer_dup exec_empty boolean_eq integer_dec integer_lte boolean_dup exec_eq integer_mult integer_min integer_min)
Errors: [0 0 1 0 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 47
Size: 56
Percent parens: 0.161
--- Population Statistics ---
Average total errors in population: 5.786
Median total errors in population: 5
Error averages by case: (0.783 0.596 0.665 0.417 0.583 0.599 0.623 0.565 0.378 0.577)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 34.799
Average program size in population (points): 43.763
Average percent parens in population: 0.194
Minimum age in population: 18.0
Maximum age in population: 18.0
Average age in population: 18.0
Median age in population: 18.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.999
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.999
Total error diversity:				 0.01
Error (vector) diversity:			 0.049
Behavioral diversity:				 0.222
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 7960435
--- Timings ---
Current time: 1559594113946 milliseconds
Total Time:          36.8 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        22.1 seconds, 59.9%
Fitness Testing:      9.6 seconds, 26.0%
Report:               5.1 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Smallest problem report - generation 19
Test total error for best: 202
Test mean error for best: 0.20200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -83                 | Program output: -83                
Correct output: 4                   | Program output: 4                  
Correct output: -50                 | Program output: -50                
Correct output: -12                 | Program output: -12                
Correct output: -41                 | Program output: -41                
Correct output: -94                 | Program output: -94                
Correct output: -90                 | Program output: -90                
Correct output: 33                  | Program output: 33                 
Correct output: -77                 | Program output: 43                 
Correct output: -60                 | Program output: -60                
Correct output: 61                  | Program output: 61                 
Correct output: 68                  | Program output: 68                 
Correct output: 64                  | Program output: 64                 
Correct output: 79                  | Program output: 79                 
Correct output: 49                  | Program output: 49                 
Correct output: 18                  | Program output: 18                 
Correct output: 25                  | Program output: 25                 
Correct output: 6                   | Program output: 6                  
Correct output: 9                   | Program output: 9                  
Correct output: 26                  | Program output: 45                 
Correct output: 4                   | Program output: 33                 
Correct output: 14                  | Program output: 14                 
Correct output: 1                   | Program output: 1                  
Correct output: 54                  | Program output: 54                 
Correct output: 50                  | Program output: 50                 
Correct output: 0                   | Program output: 0                  
Correct output: 18                  | Program output: 25                 
Correct output: 1                   | Program output: 1                  
Correct output: 39                  | Program output: 39                 
Correct output: 11                  | Program output: 11                 
Correct output: 3                   | Program output: 3                  
Correct output: 55                  | Program output: 55                 
Correct output: 5                   | Program output: 12                 
Correct output: 10                  | Program output: 68                 
Correct output: 0                   | Program output: 0                  
Correct output: -97                 | Program output: -6                 
Correct output: -17                 | Program output: 12                 
Correct output: -49                 | Program output: -36                
Correct output: -100                | Program output: -90                
Correct output: -39                 | Program output: -39                
Correct output: -95                 | Program output: -95                
Correct output: -61                 | Program output: -61                
Correct output: -65                 | Program output: -65                
Correct output: -31                 | Program output: -31                
Correct output: -92                 | Program output: -92                
Correct output: 19                  | Program output: 19                 
Correct output: -77                 | Program output: -50                
Correct output: -89                 | Program output: -89                
Correct output: -87                 | Program output: -87                
Correct output: -25                 | Program output: -25                
Correct output: -67                 | Program output: -67                
Correct output: -71                 | Program output: -71                
Correct output: -5                  | Program output: -5                 
Correct output: -95                 | Program output: -95                
Correct output: -76                 | Program output: -49                
Correct output: -60                 | Program output: -60                
Correct output: -86                 | Program output: -86                
Correct output: -97                 | Program output: -97                
Correct output: -39                 | Program output: -6                 
Correct output: -72                 | Program output: -72                
Correct output: -19                 | Program output: 30                 
Correct output: -42                 | Program output: -42                
Correct output: -75                 | Program output: -75                
Correct output: -70                 | Program output: -70                
Correct output: -92                 | Program output: -92                
Correct output: 24                  | Program output: 24                 
Correct output: -100                | Program output: -100               
Correct output: -40                 | Program output: -40                
Correct output: -60                 | Program output: -60                
Correct output: -64                 | Program output: 20                 
Correct output: 2                   | Program output: 2                  
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: -73                
Correct output: -100                | Program output: -100               
Correct output: -54                 | Program output: -54                
Correct output: -66                 | Program output: -66                
Correct output: -79                 | Program output: -79                
Correct output: -94                 | Program output: -21                
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: -11                
Correct output: -99                 | Program output: -99                
Correct output: -47                 | Program output: -47                
Correct output: -98                 | Program output: -98                
Correct output: -44                 | Program output: -44                
Correct output: 48                  | Program output: 53                 
Correct output: -85                 | Program output: -85                
Correct output: -60                 | Program output: -60                
Correct output: -54                 | Program output: -54                
Correct output: -96                 | Program output: -50                
Correct output: -75                 | Program output: -75                
Correct output: -91                 | Program output: -91                
Correct output: -65                 | Program output: -19                
Correct output: -64                 | Program output: -33                
Correct output: 33                  | Program output: 33                 
Correct output: -100                | Program output: -100               
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_yank} {:close 2, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_or} {:close 1, :instruction in3} {:close 1, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_min})
Lexicase best program: (exec_pop (boolean_stackdepth integer_fromboolean boolean_rot) boolean_and in4 boolean_rot boolean_dup_times boolean_swap integer_mult boolean_yank in1 exec_k_when_autoconstructing (integer_min integer_gt boolean_or in3) (integer_min) integer_fromboolean boolean_and print_integer boolean_invert_second_then_and integer_dup exec_pop (integer_fromboolean exec_yankdup integer_min))
Lexicase best errors: [0 0 1 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 32
Percent parens: 0.156
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_yank} {:close 2, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_or} {:close 1, :instruction in3} {:close 1, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_min})
Zero cases best program: (exec_pop (boolean_stackdepth integer_fromboolean boolean_rot) boolean_and in4 boolean_rot boolean_dup_times boolean_swap integer_mult boolean_yank in1 exec_k_when_autoconstructing (integer_min integer_gt boolean_or in3) (integer_min) integer_fromboolean boolean_and print_integer boolean_invert_second_then_and integer_dup exec_pop (integer_fromboolean exec_yankdup integer_min))
Zero cases best errors: [0 0 1 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 32
Percent parens: 0.156
--- Lexicase Population Statistics ---
Count of elite individuals by case: (277 393 293 564 207 515 402 439 407 510)
Population mean number of elite cases: 4.01
Count of perfect (error zero) individuals by case: (277 393 293 564 207 515 402 439 407 510)
Population mean number of perfect (error zero) cases: 4.01
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_div} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_yank} {:close 2, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_or} {:close 1, :instruction in3} {:close 1, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_min})
Best program: (exec_pop (boolean_stackdepth integer_fromboolean boolean_rot) boolean_and in4 boolean_rot integer_div boolean_dup_times integer_mult boolean_yank in1 exec_k_when_autoconstructing (integer_min integer_gt boolean_or in3) (integer_min) integer_fromboolean boolean_and print_integer boolean_invert_second_then_and integer_dup exec_pop (integer_fromboolean exec_yankdup integer_min))
Errors: [0 0 1 0 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 27
Size: 32
Percent parens: 0.156
--- Population Statistics ---
Average total errors in population: 5.993
Median total errors in population: 6
Error averages by case: (0.723 0.607 0.707 0.436 0.793 0.485 0.598 0.561 0.593 0.49)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 34.146
Average program size in population (points): 42.273
Average percent parens in population: 0.186
Minimum age in population: 19.0
Maximum age in population: 19.0
Average age in population: 19.0
Median age in population: 19.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.01
Error (vector) diversity:			 0.067
Behavioral diversity:				 0.233
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 8297978
--- Timings ---
Current time: 1559594115590 milliseconds
Total Time:          38.5 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        23.2 seconds, 60.3%
Fitness Testing:      9.9 seconds, 25.8%
Report:               5.3 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Smallest problem report - generation 20
Test total error for best: 214
Test mean error for best: 0.21400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -83                 | Program output: -83                
Correct output: 4                   | Program output: 4                  
Correct output: -50                 | Program output: 93                 
Correct output: -12                 | Program output: -12                
Correct output: -41                 | Program output: -41                
Correct output: -94                 | Program output: -94                
Correct output: -90                 | Program output: -90                
Correct output: 33                  | Program output: 33                 
Correct output: -77                 | Program output: -77                
Correct output: -60                 | Program output: 11                 
Correct output: 61                  | Program output: 61                 
Correct output: 68                  | Program output: 68                 
Correct output: 64                  | Program output: 64                 
Correct output: 79                  | Program output: 79                 
Correct output: 49                  | Program output: 49                 
Correct output: 18                  | Program output: 58                 
Correct output: 25                  | Program output: 40                 
Correct output: 6                   | Program output: 6                  
Correct output: 9                   | Program output: 15                 
Correct output: 26                  | Program output: 26                 
Correct output: 4                   | Program output: 4                  
Correct output: 14                  | Program output: 14                 
Correct output: 1                   | Program output: 1                  
Correct output: 54                  | Program output: 54                 
Correct output: 50                  | Program output: 50                 
Correct output: 0                   | Program output: 45                 
Correct output: 18                  | Program output: 18                 
Correct output: 1                   | Program output: 24                 
Correct output: 39                  | Program output: 39                 
Correct output: 11                  | Program output: 11                 
Correct output: 3                   | Program output: 44                 
Correct output: 55                  | Program output: 55                 
Correct output: 5                   | Program output: 5                  
Correct output: 10                  | Program output: 10                 
Correct output: 0                   | Program output: 0                  
Correct output: -97                 | Program output: -97                
Correct output: -17                 | Program output: -17                
Correct output: -49                 | Program output: -49                
Correct output: -100                | Program output: -100               
Correct output: -39                 | Program output: -39                
Correct output: -95                 | Program output: -95                
Correct output: -61                 | Program output: -61                
Correct output: -65                 | Program output: -65                
Correct output: -31                 | Program output: -31                
Correct output: -92                 | Program output: -92                
Correct output: 19                  | Program output: 19                 
Correct output: -77                 | Program output: -77                
Correct output: -89                 | Program output: -89                
Correct output: -87                 | Program output: -11                
Correct output: -25                 | Program output: -25                
Correct output: -67                 | Program output: -67                
Correct output: -71                 | Program output: -71                
Correct output: -5                  | Program output: -5                 
Correct output: -95                 | Program output: -66                
Correct output: -76                 | Program output: -76                
Correct output: -60                 | Program output: -60                
Correct output: -86                 | Program output: -86                
Correct output: -97                 | Program output: -97                
Correct output: -39                 | Program output: -39                
Correct output: -72                 | Program output: -58                
Correct output: -19                 | Program output: -19                
Correct output: -42                 | Program output: -42                
Correct output: -75                 | Program output: -75                
Correct output: -70                 | Program output: -70                
Correct output: -92                 | Program output: -92                
Correct output: 24                  | Program output: 24                 
Correct output: -100                | Program output: -100               
Correct output: -40                 | Program output: -40                
Correct output: -60                 | Program output: -60                
Correct output: -64                 | Program output: -64                
Correct output: 2                   | Program output: 50                 
Correct output: -76                 | Program output: -42                
Correct output: -73                 | Program output: -73                
Correct output: -100                | Program output: -100               
Correct output: -54                 | Program output: -54                
Correct output: -66                 | Program output: -56                
Correct output: -79                 | Program output: -71                
Correct output: -94                 | Program output: -94                
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: -81                
Correct output: -99                 | Program output: -99                
Correct output: -47                 | Program output: -22                
Correct output: -98                 | Program output: -98                
Correct output: -44                 | Program output: -44                
Correct output: 48                  | Program output: 48                 
Correct output: -85                 | Program output: -85                
Correct output: -60                 | Program output: -26                
Correct output: -54                 | Program output: -52                
Correct output: -96                 | Program output: -96                
Correct output: -75                 | Program output: -75                
Correct output: -91                 | Program output: -91                
Correct output: -65                 | Program output: -65                
Correct output: -64                 | Program output: -64                
Correct output: 33                  | Program output: 83                 
Correct output: -100                | Program output: -100               
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_pop} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction in1} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_swap} {:close 2, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_min} {:close 1, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction in4} {:close 0, :instruction exec_k} {:close 1, :instruction integer_mult} {:close 1, :instruction in3} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_min})
Lexicase best program: (exec_pop (exec_yankdup) boolean_empty in1 integer_fromboolean exec_dup_items boolean_and exec_y_when_autoconstructing (in4 boolean_rot boolean_dup_times) integer_dup_times boolean_dup_times boolean_swap in1 exec_k_when_autoconstructing (in2 boolean_pop integer_min in3) (boolean_invert_second_then_and boolean_swap integer_min) integer_fromboolean print_integer boolean_invert_second_then_and integer_dup print_boolean exec_dup (exec_pop (in4 exec_k (integer_mult) (in3) boolean_eq integer_min)))
Lexicase best errors: [0 0 0 0 1 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 45
Percent parens: 0.200
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_pop} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction in1} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_swap} {:close 2, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_min} {:close 1, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction in4} {:close 0, :instruction exec_k} {:close 1, :instruction integer_mult} {:close 1, :instruction in3} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_min})
Zero cases best program: (exec_pop (exec_yankdup) boolean_empty in1 integer_fromboolean exec_dup_items boolean_and exec_y_when_autoconstructing (in4 boolean_rot boolean_dup_times) integer_dup_times boolean_dup_times boolean_swap in1 exec_k_when_autoconstructing (in2 boolean_pop integer_min in3) (boolean_invert_second_then_and boolean_swap integer_min) integer_fromboolean print_integer boolean_invert_second_then_and integer_dup print_boolean exec_dup (exec_pop (in4 exec_k (integer_mult) (in3) boolean_eq integer_min)))
Zero cases best errors: [0 0 0 0 1 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 45
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (467 426 252 607 303 467 439 452 283 480)
Population mean number of elite cases: 4.18
Count of perfect (error zero) individuals by case: (467 426 252 607 303 467 439 452 283 480)
Population mean number of perfect (error zero) cases: 4.18
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_div} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_div} {:close 0, :instruction integer_mult} {:close 2, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction in3} {:close 1, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_lte} {:close 0, :instruction -16} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min})
Best program: (integer_min in4 integer_dup_items boolean_frominteger integer_fromboolean integer_div exec_dup_items exec_do*while (boolean_swap exec_swap (boolean_pop exec_y_when_autoconstructing () integer_div) (integer_mult in1)) in2 integer_min in3 integer_min integer_fromboolean print_integer boolean_invert_second_then_and boolean_not integer_dup exec_empty boolean_eq integer_dec integer_lte -16 integer_stackdepth integer_mult integer_fromboolean integer_min integer_min)
Errors: [0 0 0 0 1 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 34
Size: 39
Percent parens: 0.128
--- Population Statistics ---
Average total errors in population: 5.824
Median total errors in population: 5
Error averages by case: (0.533 0.574 0.748 0.393 0.697 0.533 0.561 0.548 0.717 0.52)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 33.359
Average program size in population (points): 41.538
Average percent parens in population: 0.190
Minimum age in population: 20.0
Maximum age in population: 20.0
Average age in population: 20.0
Median age in population: 20.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.01
Error (vector) diversity:			 0.048
Behavioral diversity:				 0.2
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 8628374
--- Timings ---
Current time: 1559594117294 milliseconds
Total Time:          40.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        24.4 seconds, 60.7%
Fitness Testing:     10.2 seconds, 25.5%
Report:               5.4 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Smallest problem report - generation 21
Test total error for best: 202
Test mean error for best: 0.20200
Test Case    0 | Error: 1
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 1
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 1
Test Case   18 | Error: 1
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 1
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 1
Test Case   54 | Error: 1
Test Case   55 | Error: 1
Test Case   56 | Error: 1
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 1
Test Case   63 | Error: 1
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 1
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 1
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 1
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 1
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 1
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 1
Test Case  254 | Error: 1
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 1
Test Case  262 | Error: 0
Test Case  263 | Error: 1
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 1
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 1
Test Case  278 | Error: 1
Test Case  279 | Error: 0
Test Case  280 | Error: 1
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 1
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 1
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 1
Test Case  299 | Error: 1
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 1
Test Case  307 | Error: 1
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 1
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 1
Test Case  325 | Error: 1
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 1
Test Case  334 | Error: 1
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 1
Test Case  338 | Error: 1
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 1
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 1
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 1
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 1
Test Case  357 | Error: 1
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 1
Test Case  363 | Error: 0
Test Case  364 | Error: 1
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 1
Test Case  372 | Error: 1
Test Case  373 | Error: 0
Test Case  374 | Error: 1
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 1
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 1
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 1
Test Case  392 | Error: 1
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 1
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 1
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 1
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 1
Test Case  418 | Error: 0
Test Case  419 | Error: 1
Test Case  420 | Error: 1
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 1
Test Case  426 | Error: 1
Test Case  427 | Error: 1
Test Case  428 | Error: 1
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 1
Test Case  435 | Error: 0
Test Case  436 | Error: 1
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 1
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 1
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 1
Test Case  459 | Error: 1
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 1
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 1
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 1
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 1
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 1
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 1
Test Case  504 | Error: 0
Test Case  505 | Error: 1
Test Case  506 | Error: 1
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 1
Test Case  511 | Error: 1
Test Case  512 | Error: 1
Test Case  513 | Error: 1
Test Case  514 | Error: 1
Test Case  515 | Error: 1
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 1
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 1
Test Case  530 | Error: 1
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 1
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 1
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 1
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 1
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 1
Test Case  553 | Error: 1
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 1
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 1
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 1
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 1
Test Case  582 | Error: 0
Test Case  583 | Error: 1
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 1
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 1
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 1
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 1
Test Case  617 | Error: 1
Test Case  618 | Error: 1
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 1
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 1
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 1
Test Case  632 | Error: 1
Test Case  633 | Error: 0
Test Case  634 | Error: 1
Test Case  635 | Error: 0
Test Case  636 | Error: 1
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 1
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 1
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 1
Test Case  653 | Error: 1
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 1
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 1
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 1
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 1
Test Case  685 | Error: 1
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 1
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 1
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 1
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 1
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 1
Test Case  727 | Error: 0
Test Case  728 | Error: 1
Test Case  729 | Error: 0
Test Case  730 | Error: 1
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 1
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 1
Test Case  740 | Error: 0
Test Case  741 | Error: 1
Test Case  742 | Error: 0
Test Case  743 | Error: 1
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 1
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 1
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 1
Test Case  761 | Error: 0
Test Case  762 | Error: 1
Test Case  763 | Error: 0
Test Case  764 | Error: 1
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 1
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 1
Test Case  776 | Error: 0
Test Case  777 | Error: 1
Test Case  778 | Error: 1
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 1
Test Case  785 | Error: 1
Test Case  786 | Error: 0
Test Case  787 | Error: 1
Test Case  788 | Error: 1
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 1
Test Case  792 | Error: 1
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 1
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 1
Test Case  799 | Error: 1
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 1
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 1
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 1
Test Case  816 | Error: 0
Test Case  817 | Error: 1
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 1
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 1
Test Case  826 | Error: 1
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 1
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 1
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 1
Test Case  846 | Error: 1
Test Case  847 | Error: 1
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 1
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 1
Test Case  857 | Error: 1
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 1
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 1
Test Case  870 | Error: 1
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 1
Test Case  874 | Error: 0
Test Case  875 | Error: 1
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 1
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 1
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 1
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 1
Test Case  897 | Error: 1
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 1
Test Case  903 | Error: 1
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 1
Test Case  907 | Error: 0
Test Case  908 | Error: 1
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 1
Test Case  913 | Error: 0
Test Case  914 | Error: 1
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 1
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 1
Test Case  926 | Error: 1
Test Case  927 | Error: 1
Test Case  928 | Error: 1
Test Case  929 | Error: 0
Test Case  930 | Error: 1
Test Case  931 | Error: 1
Test Case  932 | Error: 1
Test Case  933 | Error: 1
Test Case  934 | Error: 1
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 1
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 1
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 1
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 1
Test Case  958 | Error: 0
Test Case  959 | Error: 1
Test Case  960 | Error: 1
Test Case  961 | Error: 0
Test Case  962 | Error: 1
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 1
Test Case  968 | Error: 0
Test Case  969 | Error: 1
Test Case  970 | Error: 0
Test Case  971 | Error: 1
Test Case  972 | Error: 1
Test Case  973 | Error: 0
Test Case  974 | Error: 1
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 1
Test Case  982 | Error: 1
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 1
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 1
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -83                 | Program output: -83                
Correct output: 4                   | Program output: 4                  
Correct output: -50                 | Program output: -50                
Correct output: -12                 | Program output: -12                
Correct output: -41                 | Program output: -41                
Correct output: -94                 | Program output: -94                
Correct output: -90                 | Program output: -90                
Correct output: 33                  | Program output: 33                 
Correct output: -77                 | Program output: 43                 
Correct output: -60                 | Program output: -60                
Correct output: 61                  | Program output: 61                 
Correct output: 68                  | Program output: 68                 
Correct output: 64                  | Program output: 64                 
Correct output: 79                  | Program output: 79                 
Correct output: 49                  | Program output: 49                 
Correct output: 18                  | Program output: 18                 
Correct output: 25                  | Program output: 25                 
Correct output: 6                   | Program output: 6                  
Correct output: 9                   | Program output: 9                  
Correct output: 26                  | Program output: 45                 
Correct output: 4                   | Program output: 33                 
Correct output: 14                  | Program output: 14                 
Correct output: 1                   | Program output: 1                  
Correct output: 54                  | Program output: 54                 
Correct output: 50                  | Program output: 50                 
Correct output: 0                   | Program output: 0                  
Correct output: 18                  | Program output: 25                 
Correct output: 1                   | Program output: 1                  
Correct output: 39                  | Program output: 39                 
Correct output: 11                  | Program output: 11                 
Correct output: 3                   | Program output: 3                  
Correct output: 55                  | Program output: 55                 
Correct output: 5                   | Program output: 12                 
Correct output: 10                  | Program output: 68                 
Correct output: 0                   | Program output: 0                  
Correct output: -97                 | Program output: -6                 
Correct output: -17                 | Program output: 12                 
Correct output: -49                 | Program output: -36                
Correct output: -100                | Program output: -90                
Correct output: -39                 | Program output: -39                
Correct output: -95                 | Program output: -95                
Correct output: -61                 | Program output: -61                
Correct output: -65                 | Program output: -65                
Correct output: -31                 | Program output: -31                
Correct output: -92                 | Program output: -92                
Correct output: 19                  | Program output: 19                 
Correct output: -77                 | Program output: -50                
Correct output: -89                 | Program output: -89                
Correct output: -87                 | Program output: -87                
Correct output: -25                 | Program output: -25                
Correct output: -67                 | Program output: -67                
Correct output: -71                 | Program output: -71                
Correct output: -5                  | Program output: -5                 
Correct output: -95                 | Program output: -95                
Correct output: -76                 | Program output: -49                
Correct output: -60                 | Program output: -60                
Correct output: -86                 | Program output: -86                
Correct output: -97                 | Program output: -97                
Correct output: -39                 | Program output: -6                 
Correct output: -72                 | Program output: -72                
Correct output: -19                 | Program output: 30                 
Correct output: -42                 | Program output: -42                
Correct output: -75                 | Program output: -75                
Correct output: -70                 | Program output: -70                
Correct output: -92                 | Program output: -92                
Correct output: 24                  | Program output: 24                 
Correct output: -100                | Program output: -100               
Correct output: -40                 | Program output: -40                
Correct output: -60                 | Program output: -60                
Correct output: -64                 | Program output: 20                 
Correct output: 2                   | Program output: 2                  
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: -73                
Correct output: -100                | Program output: -100               
Correct output: -54                 | Program output: -54                
Correct output: -66                 | Program output: -66                
Correct output: -79                 | Program output: -79                
Correct output: -94                 | Program output: -21                
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: -11                
Correct output: -99                 | Program output: -99                
Correct output: -47                 | Program output: -47                
Correct output: -98                 | Program output: -98                
Correct output: -44                 | Program output: -44                
Correct output: 48                  | Program output: 53                 
Correct output: -85                 | Program output: -85                
Correct output: -60                 | Program output: -60                
Correct output: -54                 | Program output: -54                
Correct output: -96                 | Program output: -50                
Correct output: -75                 | Program output: -75                
Correct output: -91                 | Program output: -91                
Correct output: -65                 | Program output: -19                
Correct output: -64                 | Program output: -33                
Correct output: 33                  | Program output: 33                 
Correct output: -100                | Program output: -100               
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_yank} {:close 2, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 2, :instruction exec_while} {:close 0, :instruction boolean_or} {:close 1, :instruction in3} {:close 1, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_integer} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_min})
Lexicase best program: (exec_pop (boolean_stackdepth integer_fromboolean boolean_rot) boolean_and in4 boolean_not exec_while () boolean_dup_times boolean_invert_first_then_and integer_mult boolean_yank in1 exec_k_when_autoconstructing (integer_min exec_while ()) (boolean_or in3) integer_min integer_fromboolean print_integer exec_dup_items integer_dup exec_pop (boolean_not) integer_min)
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 33
Percent parens: 0.212
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_yank} {:close 2, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 2, :instruction exec_while} {:close 0, :instruction boolean_or} {:close 1, :instruction in3} {:close 1, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_integer} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_min})
Zero cases best program: (exec_pop (boolean_stackdepth integer_fromboolean boolean_rot) boolean_and in4 boolean_not exec_while () boolean_dup_times boolean_invert_first_then_and integer_mult boolean_yank in1 exec_k_when_autoconstructing (integer_min exec_while ()) (boolean_or in3) integer_min integer_fromboolean print_integer exec_dup_items integer_dup exec_pop (boolean_not) integer_min)
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 33
Percent parens: 0.212
--- Lexicase Population Statistics ---
Count of elite individuals by case: (558 191 190 567 387 594 188 189 190 669)
Population mean number of elite cases: 3.72
Count of perfect (error zero) individuals by case: (558 191 190 567 387 594 188 189 190 669)
Population mean number of perfect (error zero) cases: 3.72
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_div} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_yank} {:close 2, :instruction in1} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 1, :instruction in3} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_min})
Best program: (exec_pop (boolean_stackdepth integer_fromboolean boolean_rot) boolean_and in4 boolean_rot integer_div boolean_dup_times boolean_eq boolean_swap integer_mult boolean_yank in1 boolean_rot integer_min boolean_or in3 integer_min boolean_swap boolean_and print_integer boolean_invert_second_then_and integer_dup integer_fromboolean integer_stackdepth integer_min)
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 27
Size: 29
Percent parens: 0.069
--- Population Statistics ---
Average total errors in population: 6.277
Median total errors in population: 6
Error averages by case: (0.442 0.809 0.81 0.433 0.613 0.406 0.812 0.811 0.81 0.331)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 34.925
Average program size in population (points): 43.724
Average percent parens in population: 0.195
Minimum age in population: 21.0
Maximum age in population: 21.0
Average age in population: 21.0
Median age in population: 21.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.999
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.999
Total error diversity:				 0.011
Error (vector) diversity:			 0.041
Behavioral diversity:				 0.228
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 8992699
--- Timings ---
Current time: 1559594119011 milliseconds
Total Time:          41.8 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        25.5 seconds, 61.0%
Fitness Testing:     10.6 seconds, 25.3%
Report:               5.6 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 21
Successful program: (exec_pop (boolean_stackdepth integer_fromboolean boolean_rot) boolean_and in4 boolean_rot integer_div boolean_dup_times boolean_eq boolean_swap integer_mult boolean_yank in1 boolean_rot integer_min boolean_or in3 integer_min boolean_swap boolean_and print_integer boolean_invert_second_then_and integer_dup integer_fromboolean integer_stackdepth integer_min)
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 29


Auto-simplifying with starting size: 29
step: 0
program: (exec_pop (boolean_stackdepth integer_fromboolean boolean_rot) boolean_and in4 boolean_rot integer_div boolean_dup_times boolean_eq boolean_swap integer_mult boolean_yank in1 boolean_rot integer_min boolean_or in3 integer_min boolean_swap boolean_and print_integer boolean_invert_second_then_and integer_dup integer_fromboolean integer_stackdepth integer_min)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 29

step: 500
program: (exec_pop (boolean_stackdepth integer_fromboolean boolean_rot) boolean_and in4 boolean_rot integer_div boolean_dup_times boolean_eq boolean_swap integer_mult boolean_yank in1 boolean_rot integer_min boolean_or in3 integer_min boolean_swap boolean_and print_integer boolean_invert_second_then_and integer_dup integer_fromboolean integer_stackdepth integer_min)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 29

step: 1000
program: (exec_pop (boolean_stackdepth integer_fromboolean boolean_rot) boolean_and in4 boolean_rot integer_div boolean_dup_times boolean_eq boolean_swap integer_mult boolean_yank in1 boolean_rot integer_min boolean_or in3 integer_min boolean_swap boolean_and print_integer boolean_invert_second_then_and integer_dup integer_fromboolean integer_stackdepth integer_min)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 29

step: 1500
program: (exec_pop (boolean_stackdepth integer_fromboolean boolean_rot) boolean_and in4 boolean_rot integer_div boolean_dup_times boolean_eq boolean_swap integer_mult boolean_yank in1 boolean_rot integer_min boolean_or in3 integer_min boolean_swap boolean_and print_integer boolean_invert_second_then_and integer_dup integer_fromboolean integer_stackdepth integer_min)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 29

step: 2000
program: (exec_pop (boolean_stackdepth integer_fromboolean boolean_rot) boolean_and in4 boolean_rot integer_div boolean_dup_times boolean_eq boolean_swap integer_mult boolean_yank in1 boolean_rot integer_min boolean_or in3 integer_min boolean_swap boolean_and print_integer boolean_invert_second_then_and integer_dup integer_fromboolean integer_stackdepth integer_min)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 29

step: 2500
program: (exec_pop (boolean_stackdepth integer_fromboolean boolean_rot) boolean_and in4 boolean_rot integer_div boolean_dup_times boolean_eq boolean_swap integer_mult boolean_yank in1 boolean_rot integer_min boolean_or in3 integer_min boolean_swap boolean_and print_integer boolean_invert_second_then_and integer_dup integer_fromboolean integer_stackdepth integer_min)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 29

step: 3000
program: (exec_pop (boolean_stackdepth integer_fromboolean boolean_rot) boolean_and in4 boolean_rot integer_div boolean_dup_times boolean_eq boolean_swap integer_mult boolean_yank in1 boolean_rot integer_min boolean_or in3 integer_min boolean_swap boolean_and print_integer boolean_invert_second_then_and integer_dup integer_fromboolean integer_stackdepth integer_min)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 29

step: 3500
program: (exec_pop (boolean_stackdepth integer_fromboolean boolean_rot) boolean_and in4 boolean_rot integer_div boolean_dup_times boolean_eq boolean_swap integer_mult boolean_yank in1 boolean_rot integer_min boolean_or in3 integer_min boolean_swap boolean_and print_integer boolean_invert_second_then_and integer_dup integer_fromboolean integer_stackdepth integer_min)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 29

step: 4000
program: (exec_pop (boolean_stackdepth integer_fromboolean boolean_rot) boolean_and in4 boolean_rot integer_div boolean_dup_times boolean_eq boolean_swap integer_mult boolean_yank in1 boolean_rot integer_min boolean_or in3 integer_min boolean_swap boolean_and print_integer boolean_invert_second_then_and integer_dup integer_fromboolean integer_stackdepth integer_min)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 29

step: 4500
program: (exec_pop (boolean_stackdepth integer_fromboolean boolean_rot) boolean_and in4 boolean_rot integer_div boolean_dup_times boolean_eq boolean_swap integer_mult boolean_yank in1 boolean_rot integer_min boolean_or in3 integer_min boolean_swap boolean_and print_integer boolean_invert_second_then_and integer_dup integer_fromboolean integer_stackdepth integer_min)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 29

step: 5000
program: (exec_pop (boolean_stackdepth integer_fromboolean boolean_rot) boolean_and in4 boolean_rot integer_div boolean_dup_times boolean_eq boolean_swap integer_mult boolean_yank in1 boolean_rot integer_min boolean_or in3 integer_min boolean_swap boolean_and print_integer boolean_invert_second_then_and integer_dup integer_fromboolean integer_stackdepth integer_min)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 29

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 21
Test total error for best: 202
Test mean error for best: 0.20200
Test Case    0 | Error: 1
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 1
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 1
Test Case   18 | Error: 1
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 1
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 1
Test Case   54 | Error: 1
Test Case   55 | Error: 1
Test Case   56 | Error: 1
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 1
Test Case   63 | Error: 1
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 1
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 1
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 1
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 1
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 1
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 1
Test Case  254 | Error: 1
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 1
Test Case  262 | Error: 0
Test Case  263 | Error: 1
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 1
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 1
Test Case  278 | Error: 1
Test Case  279 | Error: 0
Test Case  280 | Error: 1
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 1
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 1
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 1
Test Case  299 | Error: 1
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 1
Test Case  307 | Error: 1
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 1
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 1
Test Case  325 | Error: 1
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 1
Test Case  334 | Error: 1
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 1
Test Case  338 | Error: 1
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 1
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 1
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 1
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 1
Test Case  357 | Error: 1
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 1
Test Case  363 | Error: 0
Test Case  364 | Error: 1
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 1
Test Case  372 | Error: 1
Test Case  373 | Error: 0
Test Case  374 | Error: 1
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 1
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 1
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 1
Test Case  392 | Error: 1
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 1
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 1
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 1
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 1
Test Case  418 | Error: 0
Test Case  419 | Error: 1
Test Case  420 | Error: 1
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 1
Test Case  426 | Error: 1
Test Case  427 | Error: 1
Test Case  428 | Error: 1
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 1
Test Case  435 | Error: 0
Test Case  436 | Error: 1
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 1
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 1
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 1
Test Case  459 | Error: 1
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 1
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 1
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 1
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 1
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 1
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 1
Test Case  504 | Error: 0
Test Case  505 | Error: 1
Test Case  506 | Error: 1
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 1
Test Case  511 | Error: 1
Test Case  512 | Error: 1
Test Case  513 | Error: 1
Test Case  514 | Error: 1
Test Case  515 | Error: 1
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 1
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 1
Test Case  530 | Error: 1
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 1
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 1
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 1
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 1
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 1
Test Case  553 | Error: 1
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 1
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 1
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 1
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 1
Test Case  582 | Error: 0
Test Case  583 | Error: 1
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 1
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 1
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 1
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 1
Test Case  617 | Error: 1
Test Case  618 | Error: 1
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 1
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 1
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 1
Test Case  632 | Error: 1
Test Case  633 | Error: 0
Test Case  634 | Error: 1
Test Case  635 | Error: 0
Test Case  636 | Error: 1
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 1
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 1
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 1
Test Case  653 | Error: 1
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 1
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 1
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 1
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 1
Test Case  685 | Error: 1
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 1
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 1
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 1
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 1
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 1
Test Case  727 | Error: 0
Test Case  728 | Error: 1
Test Case  729 | Error: 0
Test Case  730 | Error: 1
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 1
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 1
Test Case  740 | Error: 0
Test Case  741 | Error: 1
Test Case  742 | Error: 0
Test Case  743 | Error: 1
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 1
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 1
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 1
Test Case  761 | Error: 0
Test Case  762 | Error: 1
Test Case  763 | Error: 0
Test Case  764 | Error: 1
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 1
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 1
Test Case  776 | Error: 0
Test Case  777 | Error: 1
Test Case  778 | Error: 1
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 1
Test Case  785 | Error: 1
Test Case  786 | Error: 0
Test Case  787 | Error: 1
Test Case  788 | Error: 1
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 1
Test Case  792 | Error: 1
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 1
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 1
Test Case  799 | Error: 1
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 1
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 1
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 1
Test Case  816 | Error: 0
Test Case  817 | Error: 1
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 1
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 1
Test Case  826 | Error: 1
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 1
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 1
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 1
Test Case  846 | Error: 1
Test Case  847 | Error: 1
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 1
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 1
Test Case  857 | Error: 1
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 1
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 1
Test Case  870 | Error: 1
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 1
Test Case  874 | Error: 0
Test Case  875 | Error: 1
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 1
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 1
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 1
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 1
Test Case  897 | Error: 1
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 1
Test Case  903 | Error: 1
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 1
Test Case  907 | Error: 0
Test Case  908 | Error: 1
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 1
Test Case  913 | Error: 0
Test Case  914 | Error: 1
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 1
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 1
Test Case  926 | Error: 1
Test Case  927 | Error: 1
Test Case  928 | Error: 1
Test Case  929 | Error: 0
Test Case  930 | Error: 1
Test Case  931 | Error: 1
Test Case  932 | Error: 1
Test Case  933 | Error: 1
Test Case  934 | Error: 1
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 1
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 1
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 1
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 1
Test Case  958 | Error: 0
Test Case  959 | Error: 1
Test Case  960 | Error: 1
Test Case  961 | Error: 0
Test Case  962 | Error: 1
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 1
Test Case  968 | Error: 0
Test Case  969 | Error: 1
Test Case  970 | Error: 0
Test Case  971 | Error: 1
Test Case  972 | Error: 1
Test Case  973 | Error: 0
Test Case  974 | Error: 1
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 1
Test Case  982 | Error: 1
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 1
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 1
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -83                 | Program output: -83                
Correct output: 4                   | Program output: 4                  
Correct output: -50                 | Program output: -50                
Correct output: -12                 | Program output: -12                
Correct output: -41                 | Program output: -41                
Correct output: -94                 | Program output: -94                
Correct output: -90                 | Program output: -90                
Correct output: 33                  | Program output: 33                 
Correct output: -77                 | Program output: 43                 
Correct output: -60                 | Program output: -60                
Correct output: 61                  | Program output: 61                 
Correct output: 68                  | Program output: 68                 
Correct output: 64                  | Program output: 64                 
Correct output: 79                  | Program output: 79                 
Correct output: 49                  | Program output: 49                 
Correct output: 18                  | Program output: 18                 
Correct output: 25                  | Program output: 25                 
Correct output: 6                   | Program output: 6                  
Correct output: 9                   | Program output: 9                  
Correct output: 26                  | Program output: 45                 
Correct output: 4                   | Program output: 33                 
Correct output: 14                  | Program output: 14                 
Correct output: 1                   | Program output: 1                  
Correct output: 54                  | Program output: 54                 
Correct output: 50                  | Program output: 50                 
Correct output: 0                   | Program output: 0                  
Correct output: 18                  | Program output: 25                 
Correct output: 1                   | Program output: 1                  
Correct output: 39                  | Program output: 39                 
Correct output: 11                  | Program output: 11                 
Correct output: 3                   | Program output: 3                  
Correct output: 55                  | Program output: 55                 
Correct output: 5                   | Program output: 12                 
Correct output: 10                  | Program output: 68                 
Correct output: 0                   | Program output: 0                  
Correct output: -97                 | Program output: -6                 
Correct output: -17                 | Program output: 12                 
Correct output: -49                 | Program output: -36                
Correct output: -100                | Program output: -90                
Correct output: -39                 | Program output: -39                
Correct output: -95                 | Program output: -95                
Correct output: -61                 | Program output: -61                
Correct output: -65                 | Program output: -65                
Correct output: -31                 | Program output: -31                
Correct output: -92                 | Program output: -92                
Correct output: 19                  | Program output: 19                 
Correct output: -77                 | Program output: -50                
Correct output: -89                 | Program output: -89                
Correct output: -87                 | Program output: -87                
Correct output: -25                 | Program output: -25                
Correct output: -67                 | Program output: -67                
Correct output: -71                 | Program output: -71                
Correct output: -5                  | Program output: -5                 
Correct output: -95                 | Program output: -95                
Correct output: -76                 | Program output: -49                
Correct output: -60                 | Program output: -60                
Correct output: -86                 | Program output: -86                
Correct output: -97                 | Program output: -97                
Correct output: -39                 | Program output: -6                 
Correct output: -72                 | Program output: -72                
Correct output: -19                 | Program output: 30                 
Correct output: -42                 | Program output: -42                
Correct output: -75                 | Program output: -75                
Correct output: -70                 | Program output: -70                
Correct output: -92                 | Program output: -92                
Correct output: 24                  | Program output: 24                 
Correct output: -100                | Program output: -100               
Correct output: -40                 | Program output: -40                
Correct output: -60                 | Program output: -60                
Correct output: -64                 | Program output: 20                 
Correct output: 2                   | Program output: 2                  
Correct output: -76                 | Program output: -76                
Correct output: -73                 | Program output: -73                
Correct output: -100                | Program output: -100               
Correct output: -54                 | Program output: -54                
Correct output: -66                 | Program output: -66                
Correct output: -79                 | Program output: -79                
Correct output: -94                 | Program output: -21                
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: -11                
Correct output: -99                 | Program output: -99                
Correct output: -47                 | Program output: -47                
Correct output: -98                 | Program output: -98                
Correct output: -44                 | Program output: -44                
Correct output: 48                  | Program output: 53                 
Correct output: -85                 | Program output: -85                
Correct output: -60                 | Program output: -60                
Correct output: -54                 | Program output: -54                
Correct output: -96                 | Program output: -50                
Correct output: -75                 | Program output: -75                
Correct output: -91                 | Program output: -91                
Correct output: -65                 | Program output: -19                
Correct output: -64                 | Program output: -33                
Correct output: 33                  | Program output: 33                 
Correct output: -100                | Program output: -100               
;;******************************
