Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 3000 :genetic-operator-probabilities {:uniform-addition-and-deletion,1.0} :uniform-addition-and-deletion-rate 0.09
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:uniform-addition-and-deletion 1.0}
max-error = 1
max-generations = 3000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[7 46 46 46] 7] [[-83 -54 -83 -83] -83] [[-5 78 78 78] -5] [[-24 16 -24 -24] -24] [[-77 -77 -77 -65] -77] [[1 -63 1 1] -63] [[-29 -29 30 -29] -29] [[100 4 100 100] 4] [[-16 -16 43 -16] -16] [[50 0 50 50] 0] [(72 72 72 72) 72] [(53 53 53 53) 53] [(73 73 73 73) 73] [(99 99 99 99) 99] [(76 76 76 76) 76] [(61 69 33 3) 3] [(67 83 80 40) 40] [(99 7 66 28) 7] [(96 2 75 1) 1] [(77 73 96 3) 3] [(9 53 85 44) 9] [(36 56 64 69) 36] [(87 32 88 51) 32] [(5 100 48 43) 5] [(17 51 99 27) 17] [(29 43 61 38) 29] [(96 32 17 75) 17] [(2 99 14 67) 2] [(37 75 86 81) 37] [(60 84 68 11) 11] [(66 62 20 62) 20] [(17 34 14 45) 14] [(92 52 46 80) 46] [(45 27 55 28) 27] [(79 37 81 50) 37] [(90 13 46 -33) -33] [(77 -50 14 40) -50] [(-65 48 -68 62) -68] [(64 -93 45 -43) -93] [(-75 -89 -14 -41) -89] [(27 -53 34 -69) -69] [(-54 85 25 17) -54] [(-72 -95 -31 23) -95] [(-97 36 -15 -10) -97] [(-36 -95 -81 61) -95] [(-62 90 -100 56) -100] [(74 17 7 -73) -73] [(-38 58 -34 -20) -38] [(-18 -93 41 55) -93] [(-64 52 -64 42) -64] [(9 26 55 -59) -59] [(69 61 46 81) 46] [(-87 25 -8 -20) -87] [(-29 -15 3 -74) -74] [(64 73 -94 53) -94] [(-49 -76 19 8) -76] [(13 92 41 96) 13] [(-1 67 -22 -69) -69] [(-37 34 -80 78) -80] [(-45 -59 -19 95) -59] [(46 95 -34 72) -34] [(-79 -68 -8 56) -79] [(-72 -94 13 81) -94] [(-90 55 91 -80) -90] [(-74 42 61 76) -74] [(-89 -69 57 -45) -89] [(-86 78 -19 -34) -86] [(97 14 -75 8) -75] [(62 -44 -45 -19) -45] [(-14 62 91 -87) -87] [(-96 -73 90 66) -96] [(73 -12 -49 56) -49] [(92 17 -96 38) -96] [(83 -23 65 -1) -23] [(22 -59 57 41) -59] [(29 31 -65 40) -65] [(-22 -18 -11 -7) -22] [(30 100 61 30) 30] [(-77 -19 -41 -75) -77] [(-54 -19 -46 -70) -70] [(-85 94 -17 -42) -85] [(73 86 -10 76) -10] [(-54 61 98 85) -54] [(-97 -32 49 -39) -97] [(11 -86 -80 2) -86] [(34 3 88 -4) -4] [(-87 -63 -19 -5) -87] [(99 15 -5 84) -5] [(50 -32 36 27) -32] [(100 -45 9 -31) -45] [(-73 49 40 53) -73] [(76 46 75 46) 46] [(47 76 -13 52) -13] [(-92 -86 60 -29) -92] [(-59 -58 5 -76) -76])
uniform-addition-and-deletion-rate = 0.09
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[7 46 46 46] 7]
Train Case:   6 | Input/Output: [[-83 -54 -83 -83] -83]
Train Case:   7 | Input/Output: [[-5 78 78 78] -5]
Train Case:   8 | Input/Output: [[-24 16 -24 -24] -24]
Train Case:   9 | Input/Output: [[-77 -77 -77 -65] -77]
Train Case:  10 | Input/Output: [[1 -63 1 1] -63]
Train Case:  11 | Input/Output: [[-29 -29 30 -29] -29]
Train Case:  12 | Input/Output: [[100 4 100 100] 4]
Train Case:  13 | Input/Output: [[-16 -16 43 -16] -16]
Train Case:  14 | Input/Output: [[50 0 50 50] 0]
Train Case:  15 | Input/Output: [(72 72 72 72) 72]
Train Case:  16 | Input/Output: [(53 53 53 53) 53]
Train Case:  17 | Input/Output: [(73 73 73 73) 73]
Train Case:  18 | Input/Output: [(99 99 99 99) 99]
Train Case:  19 | Input/Output: [(76 76 76 76) 76]
Train Case:  20 | Input/Output: [(61 69 33 3) 3]
Train Case:  21 | Input/Output: [(67 83 80 40) 40]
Train Case:  22 | Input/Output: [(99 7 66 28) 7]
Train Case:  23 | Input/Output: [(96 2 75 1) 1]
Train Case:  24 | Input/Output: [(77 73 96 3) 3]
Train Case:  25 | Input/Output: [(9 53 85 44) 9]
Train Case:  26 | Input/Output: [(36 56 64 69) 36]
Train Case:  27 | Input/Output: [(87 32 88 51) 32]
Train Case:  28 | Input/Output: [(5 100 48 43) 5]
Train Case:  29 | Input/Output: [(17 51 99 27) 17]
Train Case:  30 | Input/Output: [(29 43 61 38) 29]
Train Case:  31 | Input/Output: [(96 32 17 75) 17]
Train Case:  32 | Input/Output: [(2 99 14 67) 2]
Train Case:  33 | Input/Output: [(37 75 86 81) 37]
Train Case:  34 | Input/Output: [(60 84 68 11) 11]
Train Case:  35 | Input/Output: [(66 62 20 62) 20]
Train Case:  36 | Input/Output: [(17 34 14 45) 14]
Train Case:  37 | Input/Output: [(92 52 46 80) 46]
Train Case:  38 | Input/Output: [(45 27 55 28) 27]
Train Case:  39 | Input/Output: [(79 37 81 50) 37]
Train Case:  40 | Input/Output: [(90 13 46 -33) -33]
Train Case:  41 | Input/Output: [(77 -50 14 40) -50]
Train Case:  42 | Input/Output: [(-65 48 -68 62) -68]
Train Case:  43 | Input/Output: [(64 -93 45 -43) -93]
Train Case:  44 | Input/Output: [(-75 -89 -14 -41) -89]
Train Case:  45 | Input/Output: [(27 -53 34 -69) -69]
Train Case:  46 | Input/Output: [(-54 85 25 17) -54]
Train Case:  47 | Input/Output: [(-72 -95 -31 23) -95]
Train Case:  48 | Input/Output: [(-97 36 -15 -10) -97]
Train Case:  49 | Input/Output: [(-36 -95 -81 61) -95]
Train Case:  50 | Input/Output: [(-62 90 -100 56) -100]
Train Case:  51 | Input/Output: [(74 17 7 -73) -73]
Train Case:  52 | Input/Output: [(-38 58 -34 -20) -38]
Train Case:  53 | Input/Output: [(-18 -93 41 55) -93]
Train Case:  54 | Input/Output: [(-64 52 -64 42) -64]
Train Case:  55 | Input/Output: [(9 26 55 -59) -59]
Train Case:  56 | Input/Output: [(69 61 46 81) 46]
Train Case:  57 | Input/Output: [(-87 25 -8 -20) -87]
Train Case:  58 | Input/Output: [(-29 -15 3 -74) -74]
Train Case:  59 | Input/Output: [(64 73 -94 53) -94]
Train Case:  60 | Input/Output: [(-49 -76 19 8) -76]
Train Case:  61 | Input/Output: [(13 92 41 96) 13]
Train Case:  62 | Input/Output: [(-1 67 -22 -69) -69]
Train Case:  63 | Input/Output: [(-37 34 -80 78) -80]
Train Case:  64 | Input/Output: [(-45 -59 -19 95) -59]
Train Case:  65 | Input/Output: [(46 95 -34 72) -34]
Train Case:  66 | Input/Output: [(-79 -68 -8 56) -79]
Train Case:  67 | Input/Output: [(-72 -94 13 81) -94]
Train Case:  68 | Input/Output: [(-90 55 91 -80) -90]
Train Case:  69 | Input/Output: [(-74 42 61 76) -74]
Train Case:  70 | Input/Output: [(-89 -69 57 -45) -89]
Train Case:  71 | Input/Output: [(-86 78 -19 -34) -86]
Train Case:  72 | Input/Output: [(97 14 -75 8) -75]
Train Case:  73 | Input/Output: [(62 -44 -45 -19) -45]
Train Case:  74 | Input/Output: [(-14 62 91 -87) -87]
Train Case:  75 | Input/Output: [(-96 -73 90 66) -96]
Train Case:  76 | Input/Output: [(73 -12 -49 56) -49]
Train Case:  77 | Input/Output: [(92 17 -96 38) -96]
Train Case:  78 | Input/Output: [(83 -23 65 -1) -23]
Train Case:  79 | Input/Output: [(22 -59 57 41) -59]
Train Case:  80 | Input/Output: [(29 31 -65 40) -65]
Train Case:  81 | Input/Output: [(-22 -18 -11 -7) -22]
Train Case:  82 | Input/Output: [(30 100 61 30) 30]
Train Case:  83 | Input/Output: [(-77 -19 -41 -75) -77]
Train Case:  84 | Input/Output: [(-54 -19 -46 -70) -70]
Train Case:  85 | Input/Output: [(-85 94 -17 -42) -85]
Train Case:  86 | Input/Output: [(73 86 -10 76) -10]
Train Case:  87 | Input/Output: [(-54 61 98 85) -54]
Train Case:  88 | Input/Output: [(-97 -32 49 -39) -97]
Train Case:  89 | Input/Output: [(11 -86 -80 2) -86]
Train Case:  90 | Input/Output: [(34 3 88 -4) -4]
Train Case:  91 | Input/Output: [(-87 -63 -19 -5) -87]
Train Case:  92 | Input/Output: [(99 15 -5 84) -5]
Train Case:  93 | Input/Output: [(50 -32 36 27) -32]
Train Case:  94 | Input/Output: [(100 -45 9 -31) -45]
Train Case:  95 | Input/Output: [(-73 49 40 53) -73]
Train Case:  96 | Input/Output: [(76 46 75 46) 46]
Train Case:  97 | Input/Output: [(47 76 -13 52) -13]
Train Case:  98 | Input/Output: [(-92 -86 60 -29) -92]
Train Case:  99 | Input/Output: [(-59 -58 5 -76) -76]
Test Case:   0 | Input/Output: [[74 74 -66 74] -66]
Test Case:   1 | Input/Output: [[-47 65 65 65] -47]
Test Case:   2 | Input/Output: [[-6 43 -6 -6] -6]
Test Case:   3 | Input/Output: [[-3 -57 -3 -3] -57]
Test Case:   4 | Input/Output: [[-52 78 -52 -52] -52]
Test Case:   5 | Input/Output: [[21 21 21 -86] -86]
Test Case:   6 | Input/Output: [[-79 -79 48 -79] -79]
Test Case:   7 | Input/Output: [[-9 71 71 71] -9]
Test Case:   8 | Input/Output: [[65 -23 65 65] -23]
Test Case:   9 | Input/Output: [[79 -48 -48 -48] -48]
Test Case:  10 | Input/Output: [[66 66 -11 66] -11]
Test Case:  11 | Input/Output: [[18 18 18 55] 18]
Test Case:  12 | Input/Output: [[-41 -41 -41 -21] -41]
Test Case:  13 | Input/Output: [[65 65 65 5] 5]
Test Case:  14 | Input/Output: [[47 47 21 47] 21]
Test Case:  15 | Input/Output: [[-54 -54 -46 -54] -54]
Test Case:  16 | Input/Output: [[91 91 91 -99] -99]
Test Case:  17 | Input/Output: [[-60 3 3 3] -60]
Test Case:  18 | Input/Output: [[90 90 39 90] 39]
Test Case:  19 | Input/Output: [[65 65 28 65] 28]
Test Case:  20 | Input/Output: [[-96 4 4 4] -96]
Test Case:  21 | Input/Output: [[97 80 80 80] 80]
Test Case:  22 | Input/Output: [[67 67 -83 67] -83]
Test Case:  23 | Input/Output: [[-11 -11 -11 -60] -60]
Test Case:  24 | Input/Output: [[67 67 -82 67] -82]
Test Case:  25 | Input/Output: [[62 98 62 62] 62]
Test Case:  26 | Input/Output: [[50 50 7 50] 7]
Test Case:  27 | Input/Output: [[-28 -89 -28 -28] -89]
Test Case:  28 | Input/Output: [[22 33 33 33] 22]
Test Case:  29 | Input/Output: [[-12 -12 11 -12] -12]
Test Case:  30 | Input/Output: [[-96 -78 -78 -78] -96]
Test Case:  31 | Input/Output: [[-19 57 -19 -19] -19]
Test Case:  32 | Input/Output: [[-5 -5 -10 -5] -10]
Test Case:  33 | Input/Output: [[98 -79 -79 -79] -79]
Test Case:  34 | Input/Output: [[-34 -34 -34 -88] -88]
Test Case:  35 | Input/Output: [[-54 81 -54 -54] -54]
Test Case:  36 | Input/Output: [[6 6 6 54] 6]
Test Case:  37 | Input/Output: [[60 60 60 -18] -18]
Test Case:  38 | Input/Output: [[-80 56 -80 -80] -80]
Test Case:  39 | Input/Output: [[51 51 76 51] 51]
Test Case:  40 | Input/Output: [[-53 28 -53 -53] -53]
Test Case:  41 | Input/Output: [[-79 -79 45 -79] -79]
Test Case:  42 | Input/Output: [[98 40 98 98] 40]
Test Case:  43 | Input/Output: [[-26 -26 -26 -19] -26]
Test Case:  44 | Input/Output: [[70 70 -96 70] -96]
Test Case:  45 | Input/Output: [[29 43 29 29] 29]
Test Case:  46 | Input/Output: [[-82 -90 -82 -82] -90]
Test Case:  47 | Input/Output: [[-31 -31 -31 98] -31]
Test Case:  48 | Input/Output: [[28 28 28 74] 28]
Test Case:  49 | Input/Output: [[-79 78 -79 -79] -79]
Test Case:  50 | Input/Output: [[17 69 69 69] 17]
Test Case:  51 | Input/Output: [[75 -71 -71 -71] -71]
Test Case:  52 | Input/Output: [[-34 -34 21 -34] -34]
Test Case:  53 | Input/Output: [[-49 -49 -52 -49] -52]
Test Case:  54 | Input/Output: [[-85 -85 31 -85] -85]
Test Case:  55 | Input/Output: [[83 83 83 -23] -23]
Test Case:  56 | Input/Output: [[-51 -48 -51 -51] -51]
Test Case:  57 | Input/Output: [[-24 -34 -24 -24] -34]
Test Case:  58 | Input/Output: [[-83 -83 -75 -83] -83]
Test Case:  59 | Input/Output: [[-91 -96 -96 -96] -96]
Test Case:  60 | Input/Output: [[8 27 27 27] 8]
Test Case:  61 | Input/Output: [[-98 -98 -98 -29] -98]
Test Case:  62 | Input/Output: [[33 -16 33 33] -16]
Test Case:  63 | Input/Output: [[-54 -59 -54 -54] -59]
Test Case:  64 | Input/Output: [[-80 -80 -80 -99] -99]
Test Case:  65 | Input/Output: [[95 -25 -25 -25] -25]
Test Case:  66 | Input/Output: [[83 83 83 83] 83]
Test Case:  67 | Input/Output: [[-94 -93 -93 -93] -94]
Test Case:  68 | Input/Output: [[46 46 46 11] 11]
Test Case:  69 | Input/Output: [[-18 -18 97 -18] -18]
Test Case:  70 | Input/Output: [[-94 -50 -50 -50] -94]
Test Case:  71 | Input/Output: [[70 -83 70 70] -83]
Test Case:  72 | Input/Output: [[22 22 22 -27] -27]
Test Case:  73 | Input/Output: [[-72 -10 -72 -72] -72]
Test Case:  74 | Input/Output: [[-48 -48 81 -48] -48]
Test Case:  75 | Input/Output: [[-64 -64 51 -64] -64]
Test Case:  76 | Input/Output: [[-28 39 39 39] -28]
Test Case:  77 | Input/Output: [[-80 63 63 63] -80]
Test Case:  78 | Input/Output: [[-33 53 -33 -33] -33]
Test Case:  79 | Input/Output: [[-77 -65 -65 -65] -77]
Test Case:  80 | Input/Output: [[73 -7 73 73] -7]
Test Case:  81 | Input/Output: [[100 9 100 100] 9]
Test Case:  82 | Input/Output: [[-51 -36 -36 -36] -51]
Test Case:  83 | Input/Output: [[85 41 85 85] 41]
Test Case:  84 | Input/Output: [[26 -66 -66 -66] -66]
Test Case:  85 | Input/Output: [[-14 -11 -11 -11] -14]
Test Case:  86 | Input/Output: [[-25 -25 -25 79] -25]
Test Case:  87 | Input/Output: [[-13 -13 52 -13] -13]
Test Case:  88 | Input/Output: [[-38 -38 25 -38] -38]
Test Case:  89 | Input/Output: [[61 61 -4 61] -4]
Test Case:  90 | Input/Output: [[31 86 31 31] 31]
Test Case:  91 | Input/Output: [[-2 -2 -2 -51] -51]
Test Case:  92 | Input/Output: [[-72 -72 -25 -72] -72]
Test Case:  93 | Input/Output: [[-74 30 30 30] -74]
Test Case:  94 | Input/Output: [[-41 -83 -83 -83] -83]
Test Case:  95 | Input/Output: [[-78 -78 78 -78] -78]
Test Case:  96 | Input/Output: [[-60 25 -60 -60] -60]
Test Case:  97 | Input/Output: [[33 33 33 -21] -21]
Test Case:  98 | Input/Output: [[89 -21 89 89] -21]
Test Case:  99 | Input/Output: [[-43 -89 -43 -43] -89]
Test Case: 100 | Input/Output: [(68 68 68 68) 68]
Test Case: 101 | Input/Output: [(-94 -94 -94 -94) -94]
Test Case: 102 | Input/Output: [(16 16 16 16) 16]
Test Case: 103 | Input/Output: [(-15 -15 -15 -15) -15]
Test Case: 104 | Input/Output: [(90 90 90 90) 90]
Test Case: 105 | Input/Output: [(-50 -50 -50 -50) -50]
Test Case: 106 | Input/Output: [(95 95 95 95) 95]
Test Case: 107 | Input/Output: [(-36 -36 -36 -36) -36]
Test Case: 108 | Input/Output: [(48 48 48 48) 48]
Test Case: 109 | Input/Output: [(20 20 20 20) 20]
Test Case: 110 | Input/Output: [(59 59 59 59) 59]
Test Case: 111 | Input/Output: [(-11 -11 -11 -11) -11]
Test Case: 112 | Input/Output: [(93 93 93 93) 93]
Test Case: 113 | Input/Output: [(-81 -81 -81 -81) -81]
Test Case: 114 | Input/Output: [(-35 -35 -35 -35) -35]
Test Case: 115 | Input/Output: [(-40 -40 -40 -40) -40]
Test Case: 116 | Input/Output: [(98 98 98 98) 98]
Test Case: 117 | Input/Output: [(59 59 59 59) 59]
Test Case: 118 | Input/Output: [(59 59 59 59) 59]
Test Case: 119 | Input/Output: [(1 1 1 1) 1]
Test Case: 120 | Input/Output: [(-86 -86 -86 -86) -86]
Test Case: 121 | Input/Output: [(-59 -59 -59 -59) -59]
Test Case: 122 | Input/Output: [(-21 -21 -21 -21) -21]
Test Case: 123 | Input/Output: [(40 40 40 40) 40]
Test Case: 124 | Input/Output: [(-5 -5 -5 -5) -5]
Test Case: 125 | Input/Output: [(9 9 9 9) 9]
Test Case: 126 | Input/Output: [(-60 -60 -60 -60) -60]
Test Case: 127 | Input/Output: [(-52 -52 -52 -52) -52]
Test Case: 128 | Input/Output: [(61 61 61 61) 61]
Test Case: 129 | Input/Output: [(18 18 18 18) 18]
Test Case: 130 | Input/Output: [(-55 -55 -55 -55) -55]
Test Case: 131 | Input/Output: [(-40 -40 -40 -40) -40]
Test Case: 132 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 133 | Input/Output: [(91 91 91 91) 91]
Test Case: 134 | Input/Output: [(21 21 21 21) 21]
Test Case: 135 | Input/Output: [(-65 -65 -65 -65) -65]
Test Case: 136 | Input/Output: [(-96 -96 -96 -96) -96]
Test Case: 137 | Input/Output: [(96 96 96 96) 96]
Test Case: 138 | Input/Output: [(-28 -28 -28 -28) -28]
Test Case: 139 | Input/Output: [(37 37 37 37) 37]
Test Case: 140 | Input/Output: [(49 49 49 49) 49]
Test Case: 141 | Input/Output: [(-89 -89 -89 -89) -89]
Test Case: 142 | Input/Output: [(23 23 23 23) 23]
Test Case: 143 | Input/Output: [(-85 -85 -85 -85) -85]
Test Case: 144 | Input/Output: [(-88 -88 -88 -88) -88]
Test Case: 145 | Input/Output: [(-92 -92 -92 -92) -92]
Test Case: 146 | Input/Output: [(-98 -98 -98 -98) -98]
Test Case: 147 | Input/Output: [(32 32 32 32) 32]
Test Case: 148 | Input/Output: [(59 59 59 59) 59]
Test Case: 149 | Input/Output: [(27 27 27 27) 27]
Test Case: 150 | Input/Output: [(47 47 47 47) 47]
Test Case: 151 | Input/Output: [(2 2 2 2) 2]
Test Case: 152 | Input/Output: [(74 74 74 74) 74]
Test Case: 153 | Input/Output: [(5 5 5 5) 5]
Test Case: 154 | Input/Output: [(52 52 52 52) 52]
Test Case: 155 | Input/Output: [(-92 -92 -92 -92) -92]
Test Case: 156 | Input/Output: [(24 24 24 24) 24]
Test Case: 157 | Input/Output: [(71 71 71 71) 71]
Test Case: 158 | Input/Output: [(-47 -47 -47 -47) -47]
Test Case: 159 | Input/Output: [(79 79 79 79) 79]
Test Case: 160 | Input/Output: [(90 90 90 90) 90]
Test Case: 161 | Input/Output: [(-33 -33 -33 -33) -33]
Test Case: 162 | Input/Output: [(92 92 92 92) 92]
Test Case: 163 | Input/Output: [(-14 -14 -14 -14) -14]
Test Case: 164 | Input/Output: [(31 31 31 31) 31]
Test Case: 165 | Input/Output: [(-61 -61 -61 -61) -61]
Test Case: 166 | Input/Output: [(68 68 68 68) 68]
Test Case: 167 | Input/Output: [(80 80 80 80) 80]
Test Case: 168 | Input/Output: [(40 40 40 40) 40]
Test Case: 169 | Input/Output: [(14 14 14 14) 14]
Test Case: 170 | Input/Output: [(-6 -6 -6 -6) -6]
Test Case: 171 | Input/Output: [(91 91 91 91) 91]
Test Case: 172 | Input/Output: [(-79 -79 -79 -79) -79]
Test Case: 173 | Input/Output: [(27 27 27 27) 27]
Test Case: 174 | Input/Output: [(33 33 33 33) 33]
Test Case: 175 | Input/Output: [(-98 -98 -98 -98) -98]
Test Case: 176 | Input/Output: [(4 4 4 4) 4]
Test Case: 177 | Input/Output: [(-74 -74 -74 -74) -74]
Test Case: 178 | Input/Output: [(13 13 13 13) 13]
Test Case: 179 | Input/Output: [(-8 -8 -8 -8) -8]
Test Case: 180 | Input/Output: [(-3 -3 -3 -3) -3]
Test Case: 181 | Input/Output: [(87 87 87 87) 87]
Test Case: 182 | Input/Output: [(94 94 94 94) 94]
Test Case: 183 | Input/Output: [(-63 -63 -63 -63) -63]
Test Case: 184 | Input/Output: [(75 75 75 75) 75]
Test Case: 185 | Input/Output: [(4 4 4 4) 4]
Test Case: 186 | Input/Output: [(-8 -8 -8 -8) -8]
Test Case: 187 | Input/Output: [(-16 -16 -16 -16) -16]
Test Case: 188 | Input/Output: [(-74 -74 -74 -74) -74]
Test Case: 189 | Input/Output: [(88 88 88 88) 88]
Test Case: 190 | Input/Output: [(-37 -37 -37 -37) -37]
Test Case: 191 | Input/Output: [(-13 -13 -13 -13) -13]
Test Case: 192 | Input/Output: [(19 19 19 19) 19]
Test Case: 193 | Input/Output: [(47 47 47 47) 47]
Test Case: 194 | Input/Output: [(-21 -21 -21 -21) -21]
Test Case: 195 | Input/Output: [(54 54 54 54) 54]
Test Case: 196 | Input/Output: [(-10 -10 -10 -10) -10]
Test Case: 197 | Input/Output: [(76 76 76 76) 76]
Test Case: 198 | Input/Output: [(-67 -67 -67 -67) -67]
Test Case: 199 | Input/Output: [(-28 -28 -28 -28) -28]
Test Case: 200 | Input/Output: [(54 93 57 75) 54]
Test Case: 201 | Input/Output: [(67 84 35 54) 35]
Test Case: 202 | Input/Output: [(88 83 59 17) 17]
Test Case: 203 | Input/Output: [(30 14 82 70) 14]
Test Case: 204 | Input/Output: [(82 24 45 24) 24]
Test Case: 205 | Input/Output: [(46 67 93 20) 20]
Test Case: 206 | Input/Output: [(6 30 10 62) 6]
Test Case: 207 | Input/Output: [(67 100 18 60) 18]
Test Case: 208 | Input/Output: [(6 88 59 36) 6]
Test Case: 209 | Input/Output: [(23 95 73 25) 23]
Test Case: 210 | Input/Output: [(9 99 4 11) 4]
Test Case: 211 | Input/Output: [(22 97 70 91) 22]
Test Case: 212 | Input/Output: [(14 55 33 75) 14]
Test Case: 213 | Input/Output: [(72 56 41 31) 31]
Test Case: 214 | Input/Output: [(17 43 54 49) 17]
Test Case: 215 | Input/Output: [(34 96 77 99) 34]
Test Case: 216 | Input/Output: [(73 24 87 94) 24]
Test Case: 217 | Input/Output: [(2 47 66 85) 2]
Test Case: 218 | Input/Output: [(28 73 89 32) 28]
Test Case: 219 | Input/Output: [(92 94 70 54) 54]
Test Case: 220 | Input/Output: [(96 55 62 57) 55]
Test Case: 221 | Input/Output: [(72 11 28 5) 5]
Test Case: 222 | Input/Output: [(61 65 56 46) 46]
Test Case: 223 | Input/Output: [(77 6 41 33) 6]
Test Case: 224 | Input/Output: [(67 89 18 1) 1]
Test Case: 225 | Input/Output: [(44 49 73 16) 16]
Test Case: 226 | Input/Output: [(32 89 2 76) 2]
Test Case: 227 | Input/Output: [(54 40 61 61) 40]
Test Case: 228 | Input/Output: [(4 54 1 53) 1]
Test Case: 229 | Input/Output: [(92 69 36 81) 36]
Test Case: 230 | Input/Output: [(84 100 91 10) 10]
Test Case: 231 | Input/Output: [(66 97 31 86) 31]
Test Case: 232 | Input/Output: [(32 27 61 100) 27]
Test Case: 233 | Input/Output: [(25 70 35 68) 25]
Test Case: 234 | Input/Output: [(11 65 55 26) 11]
Test Case: 235 | Input/Output: [(87 67 86 78) 67]
Test Case: 236 | Input/Output: [(15 77 36 2) 2]
Test Case: 237 | Input/Output: [(81 73 87 88) 73]
Test Case: 238 | Input/Output: [(100 87 7 6) 6]
Test Case: 239 | Input/Output: [(84 19 17 2) 2]
Test Case: 240 | Input/Output: [(65 9 90 79) 9]
Test Case: 241 | Input/Output: [(18 65 82 40) 18]
Test Case: 242 | Input/Output: [(8 69 63 69) 8]
Test Case: 243 | Input/Output: [(89 22 77 72) 22]
Test Case: 244 | Input/Output: [(10 73 20 86) 10]
Test Case: 245 | Input/Output: [(18 16 62 95) 16]
Test Case: 246 | Input/Output: [(7 60 41 38) 7]
Test Case: 247 | Input/Output: [(9 51 57 0) 0]
Test Case: 248 | Input/Output: [(99 16 72 70) 16]
Test Case: 249 | Input/Output: [(74 64 9 57) 9]
Test Case: 250 | Input/Output: [(12 33 39 22) 12]
Test Case: 251 | Input/Output: [(38 74 65 7) 7]
Test Case: 252 | Input/Output: [(86 31 98 21) 21]
Test Case: 253 | Input/Output: [(27 67 83 80) 27]
Test Case: 254 | Input/Output: [(14 31 71 5) 5]
Test Case: 255 | Input/Output: [(9 38 17 82) 9]
Test Case: 256 | Input/Output: [(9 12 32 92) 9]
Test Case: 257 | Input/Output: [(2 17 53 4) 2]
Test Case: 258 | Input/Output: [(21 26 91 7) 7]
Test Case: 259 | Input/Output: [(75 8 85 62) 8]
Test Case: 260 | Input/Output: [(17 50 28 44) 17]
Test Case: 261 | Input/Output: [(65 68 22 48) 22]
Test Case: 262 | Input/Output: [(49 48 44 11) 11]
Test Case: 263 | Input/Output: [(82 90 73 98) 73]
Test Case: 264 | Input/Output: [(15 40 12 66) 12]
Test Case: 265 | Input/Output: [(15 32 31 78) 15]
Test Case: 266 | Input/Output: [(45 88 38 4) 4]
Test Case: 267 | Input/Output: [(44 80 24 52) 24]
Test Case: 268 | Input/Output: [(34 7 11 32) 7]
Test Case: 269 | Input/Output: [(84 25 9 61) 9]
Test Case: 270 | Input/Output: [(53 54 20 84) 20]
Test Case: 271 | Input/Output: [(63 79 12 53) 12]
Test Case: 272 | Input/Output: [(66 12 80 100) 12]
Test Case: 273 | Input/Output: [(44 84 37 21) 21]
Test Case: 274 | Input/Output: [(62 94 35 34) 34]
Test Case: 275 | Input/Output: [(34 30 54 68) 30]
Test Case: 276 | Input/Output: [(75 65 32 43) 32]
Test Case: 277 | Input/Output: [(100 29 60 43) 29]
Test Case: 278 | Input/Output: [(63 94 13 65) 13]
Test Case: 279 | Input/Output: [(0 37 29 9) 0]
Test Case: 280 | Input/Output: [(61 18 13 97) 13]
Test Case: 281 | Input/Output: [(36 51 41 32) 32]
Test Case: 282 | Input/Output: [(97 56 25 41) 25]
Test Case: 283 | Input/Output: [(65 44 6 100) 6]
Test Case: 284 | Input/Output: [(45 100 13 50) 13]
Test Case: 285 | Input/Output: [(58 97 17 16) 16]
Test Case: 286 | Input/Output: [(27 87 8 48) 8]
Test Case: 287 | Input/Output: [(26 14 8 43) 8]
Test Case: 288 | Input/Output: [(23 48 21 42) 21]
Test Case: 289 | Input/Output: [(100 15 9 7) 7]
Test Case: 290 | Input/Output: [(41 17 20 95) 17]
Test Case: 291 | Input/Output: [(52 73 17 30) 17]
Test Case: 292 | Input/Output: [(79 71 68 67) 67]
Test Case: 293 | Input/Output: [(30 20 27 25) 20]
Test Case: 294 | Input/Output: [(79 58 93 12) 12]
Test Case: 295 | Input/Output: [(89 94 23 7) 7]
Test Case: 296 | Input/Output: [(99 76 24 22) 22]
Test Case: 297 | Input/Output: [(68 43 27 20) 20]
Test Case: 298 | Input/Output: [(15 29 40 1) 1]
Test Case: 299 | Input/Output: [(61 12 75 100) 12]
Test Case: 300 | Input/Output: [(11 66 56 65) 11]
Test Case: 301 | Input/Output: [(80 15 99 97) 15]
Test Case: 302 | Input/Output: [(21 12 45 35) 12]
Test Case: 303 | Input/Output: [(58 98 64 85) 58]
Test Case: 304 | Input/Output: [(97 25 59 21) 21]
Test Case: 305 | Input/Output: [(68 56 2 7) 2]
Test Case: 306 | Input/Output: [(46 41 17 2) 2]
Test Case: 307 | Input/Output: [(24 15 81 90) 15]
Test Case: 308 | Input/Output: [(30 53 94 63) 30]
Test Case: 309 | Input/Output: [(84 97 40 59) 40]
Test Case: 310 | Input/Output: [(51 75 54 60) 51]
Test Case: 311 | Input/Output: [(48 65 10 80) 10]
Test Case: 312 | Input/Output: [(4 8 88 83) 4]
Test Case: 313 | Input/Output: [(73 20 73 46) 20]
Test Case: 314 | Input/Output: [(34 59 35 20) 20]
Test Case: 315 | Input/Output: [(17 41 22 98) 17]
Test Case: 316 | Input/Output: [(35 35 25 26) 25]
Test Case: 317 | Input/Output: [(53 29 99 11) 11]
Test Case: 318 | Input/Output: [(31 6 10 51) 6]
Test Case: 319 | Input/Output: [(65 22 98 98) 22]
Test Case: 320 | Input/Output: [(49 82 58 14) 14]
Test Case: 321 | Input/Output: [(68 5 24 38) 5]
Test Case: 322 | Input/Output: [(30 74 50 3) 3]
Test Case: 323 | Input/Output: [(79 93 40 33) 33]
Test Case: 324 | Input/Output: [(94 47 81 13) 13]
Test Case: 325 | Input/Output: [(26 3 3 3) 3]
Test Case: 326 | Input/Output: [(23 51 68 1) 1]
Test Case: 327 | Input/Output: [(1 17 0 94) 0]
Test Case: 328 | Input/Output: [(57 61 95 77) 57]
Test Case: 329 | Input/Output: [(12 32 32 0) 0]
Test Case: 330 | Input/Output: [(43 98 63 60) 43]
Test Case: 331 | Input/Output: [(90 87 7 66) 7]
Test Case: 332 | Input/Output: [(95 13 92 7) 7]
Test Case: 333 | Input/Output: [(33 73 62 81) 33]
Test Case: 334 | Input/Output: [(90 15 40 58) 15]
Test Case: 335 | Input/Output: [(56 71 96 42) 42]
Test Case: 336 | Input/Output: [(3 82 43 7) 3]
Test Case: 337 | Input/Output: [(82 98 2 78) 2]
Test Case: 338 | Input/Output: [(23 38 75 92) 23]
Test Case: 339 | Input/Output: [(94 70 2 23) 2]
Test Case: 340 | Input/Output: [(15 81 11 8) 8]
Test Case: 341 | Input/Output: [(31 79 27 81) 27]
Test Case: 342 | Input/Output: [(93 17 92 87) 17]
Test Case: 343 | Input/Output: [(21 49 18 72) 18]
Test Case: 344 | Input/Output: [(13 29 38 85) 13]
Test Case: 345 | Input/Output: [(87 88 40 81) 40]
Test Case: 346 | Input/Output: [(2 23 83 6) 2]
Test Case: 347 | Input/Output: [(42 29 100 87) 29]
Test Case: 348 | Input/Output: [(52 32 23 53) 23]
Test Case: 349 | Input/Output: [(4 14 41 84) 4]
Test Case: 350 | Input/Output: [(30 5 89 62) 5]
Test Case: 351 | Input/Output: [(2 51 73 40) 2]
Test Case: 352 | Input/Output: [(27 74 22 24) 22]
Test Case: 353 | Input/Output: [(12 21 54 77) 12]
Test Case: 354 | Input/Output: [(43 72 63 69) 43]
Test Case: 355 | Input/Output: [(66 93 12 81) 12]
Test Case: 356 | Input/Output: [(64 17 39 88) 17]
Test Case: 357 | Input/Output: [(11 92 28 25) 11]
Test Case: 358 | Input/Output: [(21 41 40 84) 21]
Test Case: 359 | Input/Output: [(13 22 30 79) 13]
Test Case: 360 | Input/Output: [(41 12 60 65) 12]
Test Case: 361 | Input/Output: [(37 86 3 87) 3]
Test Case: 362 | Input/Output: [(17 34 28 75) 17]
Test Case: 363 | Input/Output: [(100 46 93 64) 46]
Test Case: 364 | Input/Output: [(84 34 87 49) 34]
Test Case: 365 | Input/Output: [(89 50 57 96) 50]
Test Case: 366 | Input/Output: [(66 31 87 4) 4]
Test Case: 367 | Input/Output: [(23 22 27 17) 17]
Test Case: 368 | Input/Output: [(54 55 59 12) 12]
Test Case: 369 | Input/Output: [(70 31 27 17) 17]
Test Case: 370 | Input/Output: [(68 28 7 52) 7]
Test Case: 371 | Input/Output: [(60 43 68 11) 11]
Test Case: 372 | Input/Output: [(67 2 95 77) 2]
Test Case: 373 | Input/Output: [(75 82 88 99) 75]
Test Case: 374 | Input/Output: [(77 43 94 13) 13]
Test Case: 375 | Input/Output: [(54 17 46 84) 17]
Test Case: 376 | Input/Output: [(10 0 29 79) 0]
Test Case: 377 | Input/Output: [(92 51 10 81) 10]
Test Case: 378 | Input/Output: [(42 21 37 76) 21]
Test Case: 379 | Input/Output: [(81 35 35 97) 35]
Test Case: 380 | Input/Output: [(86 53 27 92) 27]
Test Case: 381 | Input/Output: [(94 2 19 53) 2]
Test Case: 382 | Input/Output: [(30 68 11 90) 11]
Test Case: 383 | Input/Output: [(71 23 71 68) 23]
Test Case: 384 | Input/Output: [(54 81 37 53) 37]
Test Case: 385 | Input/Output: [(18 0 36 94) 0]
Test Case: 386 | Input/Output: [(35 59 84 29) 29]
Test Case: 387 | Input/Output: [(37 67 55 71) 37]
Test Case: 388 | Input/Output: [(62 98 19 47) 19]
Test Case: 389 | Input/Output: [(35 43 97 35) 35]
Test Case: 390 | Input/Output: [(24 5 17 37) 5]
Test Case: 391 | Input/Output: [(42 49 16 78) 16]
Test Case: 392 | Input/Output: [(58 92 34 6) 6]
Test Case: 393 | Input/Output: [(68 83 8 97) 8]
Test Case: 394 | Input/Output: [(65 82 80 2) 2]
Test Case: 395 | Input/Output: [(33 75 41 71) 33]
Test Case: 396 | Input/Output: [(11 50 36 46) 11]
Test Case: 397 | Input/Output: [(100 75 38 48) 38]
Test Case: 398 | Input/Output: [(91 97 63 82) 63]
Test Case: 399 | Input/Output: [(36 81 43 4) 4]
Test Case: 400 | Input/Output: [(-57 -30 35 -76) -76]
Test Case: 401 | Input/Output: [(42 -53 -67 -41) -67]
Test Case: 402 | Input/Output: [(14 26 71 31) 14]
Test Case: 403 | Input/Output: [(-36 -12 90 45) -36]
Test Case: 404 | Input/Output: [(75 -50 -31 -39) -50]
Test Case: 405 | Input/Output: [(88 33 -14 13) -14]
Test Case: 406 | Input/Output: [(23 2 100 64) 2]
Test Case: 407 | Input/Output: [(36 -54 75 78) -54]
Test Case: 408 | Input/Output: [(-57 56 -47 -11) -57]
Test Case: 409 | Input/Output: [(-83 0 -22 -95) -95]
Test Case: 410 | Input/Output: [(-81 -64 -29 98) -81]
Test Case: 411 | Input/Output: [(-24 -77 56 47) -77]
Test Case: 412 | Input/Output: [(-39 -80 -43 57) -80]
Test Case: 413 | Input/Output: [(-41 3 15 -63) -63]
Test Case: 414 | Input/Output: [(-50 76 -50 87) -50]
Test Case: 415 | Input/Output: [(75 -58 -22 -67) -67]
Test Case: 416 | Input/Output: [(90 -17 74 8) -17]
Test Case: 417 | Input/Output: [(69 -51 1 8) -51]
Test Case: 418 | Input/Output: [(1 46 41 -72) -72]
Test Case: 419 | Input/Output: [(0 1 -59 66) -59]
Test Case: 420 | Input/Output: [(46 6 -57 64) -57]
Test Case: 421 | Input/Output: [(-66 73 -60 -20) -66]
Test Case: 422 | Input/Output: [(-32 -80 94 -97) -97]
Test Case: 423 | Input/Output: [(90 -99 18 54) -99]
Test Case: 424 | Input/Output: [(49 -88 8 -82) -88]
Test Case: 425 | Input/Output: [(-54 82 -10 4) -54]
Test Case: 426 | Input/Output: [(-71 11 -17 70) -71]
Test Case: 427 | Input/Output: [(-47 31 -13 93) -47]
Test Case: 428 | Input/Output: [(-53 34 31 -99) -99]
Test Case: 429 | Input/Output: [(-100 -34 -10 23) -100]
Test Case: 430 | Input/Output: [(37 38 45 86) 37]
Test Case: 431 | Input/Output: [(-8 -61 95 -97) -97]
Test Case: 432 | Input/Output: [(-27 -75 -26 100) -75]
Test Case: 433 | Input/Output: [(83 49 -99 48) -99]
Test Case: 434 | Input/Output: [(-78 23 -95 0) -95]
Test Case: 435 | Input/Output: [(-80 -82 38 -68) -82]
Test Case: 436 | Input/Output: [(-79 18 -87 -63) -87]
Test Case: 437 | Input/Output: [(75 -13 -48 76) -48]
Test Case: 438 | Input/Output: [(70 -49 -64 -35) -64]
Test Case: 439 | Input/Output: [(-66 -80 -77 -24) -80]
Test Case: 440 | Input/Output: [(-22 26 -93 49) -93]
Test Case: 441 | Input/Output: [(85 76 38 -41) -41]
Test Case: 442 | Input/Output: [(-23 72 -87 -100) -100]
Test Case: 443 | Input/Output: [(-25 -61 -41 84) -61]
Test Case: 444 | Input/Output: [(72 -69 93 21) -69]
Test Case: 445 | Input/Output: [(-32 -37 83 90) -37]
Test Case: 446 | Input/Output: [(-56 -13 60 52) -56]
Test Case: 447 | Input/Output: [(20 -27 43 94) -27]
Test Case: 448 | Input/Output: [(65 43 -75 -76) -76]
Test Case: 449 | Input/Output: [(-24 52 -95 -78) -95]
Test Case: 450 | Input/Output: [(-72 -58 50 81) -72]
Test Case: 451 | Input/Output: [(48 -32 8 -37) -37]
Test Case: 452 | Input/Output: [(86 76 69 -9) -9]
Test Case: 453 | Input/Output: [(48 -43 -92 -5) -92]
Test Case: 454 | Input/Output: [(22 97 95 -76) -76]
Test Case: 455 | Input/Output: [(-47 9 -82 38) -82]
Test Case: 456 | Input/Output: [(85 -48 14 37) -48]
Test Case: 457 | Input/Output: [(-88 -80 46 -35) -88]
Test Case: 458 | Input/Output: [(95 -20 41 57) -20]
Test Case: 459 | Input/Output: [(-14 -61 94 -66) -66]
Test Case: 460 | Input/Output: [(-7 15 38 51) -7]
Test Case: 461 | Input/Output: [(-68 -24 -89 -35) -89]
Test Case: 462 | Input/Output: [(40 -49 43 88) -49]
Test Case: 463 | Input/Output: [(44 -61 41 -17) -61]
Test Case: 464 | Input/Output: [(87 46 29 -98) -98]
Test Case: 465 | Input/Output: [(-26 17 56 -54) -54]
Test Case: 466 | Input/Output: [(-12 -9 34 99) -12]
Test Case: 467 | Input/Output: [(5 25 -36 -31) -36]
Test Case: 468 | Input/Output: [(55 68 -53 -7) -53]
Test Case: 469 | Input/Output: [(50 72 61 -93) -93]
Test Case: 470 | Input/Output: [(17 -72 -5 47) -72]
Test Case: 471 | Input/Output: [(23 43 -61 66) -61]
Test Case: 472 | Input/Output: [(48 -92 -31 -89) -92]
Test Case: 473 | Input/Output: [(-81 -69 -4 -57) -81]
Test Case: 474 | Input/Output: [(92 -90 -71 37) -90]
Test Case: 475 | Input/Output: [(40 6 56 -67) -67]
Test Case: 476 | Input/Output: [(-13 -3 -68 -48) -68]
Test Case: 477 | Input/Output: [(-51 21 94 -8) -51]
Test Case: 478 | Input/Output: [(63 94 50 19) 19]
Test Case: 479 | Input/Output: [(41 51 4 12) 4]
Test Case: 480 | Input/Output: [(34 40 -3 95) -3]
Test Case: 481 | Input/Output: [(-93 -32 -28 -91) -93]
Test Case: 482 | Input/Output: [(12 -97 78 32) -97]
Test Case: 483 | Input/Output: [(20 -11 94 -22) -22]
Test Case: 484 | Input/Output: [(88 0 32 -2) -2]
Test Case: 485 | Input/Output: [(42 -16 -70 -69) -70]
Test Case: 486 | Input/Output: [(49 -92 74 96) -92]
Test Case: 487 | Input/Output: [(-77 42 95 -80) -80]
Test Case: 488 | Input/Output: [(30 15 56 -34) -34]
Test Case: 489 | Input/Output: [(1 34 89 -57) -57]
Test Case: 490 | Input/Output: [(78 -54 95 20) -54]
Test Case: 491 | Input/Output: [(27 1 -57 11) -57]
Test Case: 492 | Input/Output: [(-35 -12 -89 66) -89]
Test Case: 493 | Input/Output: [(-78 21 28 -58) -78]
Test Case: 494 | Input/Output: [(55 24 28 13) 13]
Test Case: 495 | Input/Output: [(-20 -59 -19 -31) -59]
Test Case: 496 | Input/Output: [(-78 -69 21 -83) -83]
Test Case: 497 | Input/Output: [(61 54 45 80) 45]
Test Case: 498 | Input/Output: [(18 -14 -8 70) -14]
Test Case: 499 | Input/Output: [(-36 22 78 -45) -45]
Test Case: 500 | Input/Output: [(-18 -66 -73 -71) -73]
Test Case: 501 | Input/Output: [(-48 -90 61 87) -90]
Test Case: 502 | Input/Output: [(84 23 -26 82) -26]
Test Case: 503 | Input/Output: [(-56 17 -30 49) -56]
Test Case: 504 | Input/Output: [(-1 19 11 -24) -24]
Test Case: 505 | Input/Output: [(56 -68 54 -62) -68]
Test Case: 506 | Input/Output: [(-57 -47 -75 42) -75]
Test Case: 507 | Input/Output: [(88 63 -63 -84) -84]
Test Case: 508 | Input/Output: [(73 -63 72 -92) -92]
Test Case: 509 | Input/Output: [(70 8 35 -100) -100]
Test Case: 510 | Input/Output: [(26 -53 -58 45) -58]
Test Case: 511 | Input/Output: [(-54 -41 90 88) -54]
Test Case: 512 | Input/Output: [(91 42 -50 -25) -50]
Test Case: 513 | Input/Output: [(-63 -53 37 3) -63]
Test Case: 514 | Input/Output: [(-38 -18 52 -95) -95]
Test Case: 515 | Input/Output: [(91 -59 86 7) -59]
Test Case: 516 | Input/Output: [(82 72 -73 50) -73]
Test Case: 517 | Input/Output: [(19 59 30 -81) -81]
Test Case: 518 | Input/Output: [(-59 38 40 96) -59]
Test Case: 519 | Input/Output: [(-54 -52 96 -33) -54]
Test Case: 520 | Input/Output: [(-15 -63 -98 83) -98]
Test Case: 521 | Input/Output: [(45 -99 88 87) -99]
Test Case: 522 | Input/Output: [(41 55 -18 37) -18]
Test Case: 523 | Input/Output: [(3 18 36 -97) -97]
Test Case: 524 | Input/Output: [(21 -86 -71 -87) -87]
Test Case: 525 | Input/Output: [(-61 -55 -28 44) -61]
Test Case: 526 | Input/Output: [(-10 76 -32 83) -32]
Test Case: 527 | Input/Output: [(59 17 88 -36) -36]
Test Case: 528 | Input/Output: [(95 -20 80 21) -20]
Test Case: 529 | Input/Output: [(8 88 -40 60) -40]
Test Case: 530 | Input/Output: [(57 -24 32 -23) -24]
Test Case: 531 | Input/Output: [(-42 88 75 2) -42]
Test Case: 532 | Input/Output: [(71 18 33 -30) -30]
Test Case: 533 | Input/Output: [(6 95 54 -77) -77]
Test Case: 534 | Input/Output: [(-33 27 4 60) -33]
Test Case: 535 | Input/Output: [(-60 22 18 76) -60]
Test Case: 536 | Input/Output: [(-4 74 -50 -51) -51]
Test Case: 537 | Input/Output: [(97 -69 -15 37) -69]
Test Case: 538 | Input/Output: [(72 80 76 76) 72]
Test Case: 539 | Input/Output: [(-46 -93 -44 33) -93]
Test Case: 540 | Input/Output: [(60 -6 -92 13) -92]
Test Case: 541 | Input/Output: [(-42 63 4 45) -42]
Test Case: 542 | Input/Output: [(91 -71 -59 -78) -78]
Test Case: 543 | Input/Output: [(11 -83 -38 -1) -83]
Test Case: 544 | Input/Output: [(98 -90 -20 -76) -90]
Test Case: 545 | Input/Output: [(83 22 -59 -47) -59]
Test Case: 546 | Input/Output: [(40 9 -47 48) -47]
Test Case: 547 | Input/Output: [(53 -70 -32 -14) -70]
Test Case: 548 | Input/Output: [(-70 14 47 89) -70]
Test Case: 549 | Input/Output: [(43 34 -5 -87) -87]
Test Case: 550 | Input/Output: [(-92 -34 40 87) -92]
Test Case: 551 | Input/Output: [(51 -55 -52 -61) -61]
Test Case: 552 | Input/Output: [(9 2 66 -83) -83]
Test Case: 553 | Input/Output: [(96 89 36 -26) -26]
Test Case: 554 | Input/Output: [(-54 -93 54 -35) -93]
Test Case: 555 | Input/Output: [(-85 91 31 17) -85]
Test Case: 556 | Input/Output: [(-78 78 -57 100) -78]
Test Case: 557 | Input/Output: [(35 -72 72 -26) -72]
Test Case: 558 | Input/Output: [(52 -71 64 -29) -71]
Test Case: 559 | Input/Output: [(-52 -80 50 32) -80]
Test Case: 560 | Input/Output: [(61 81 15 67) 15]
Test Case: 561 | Input/Output: [(100 -5 -88 37) -88]
Test Case: 562 | Input/Output: [(18 -68 37 81) -68]
Test Case: 563 | Input/Output: [(-24 39 75 85) -24]
Test Case: 564 | Input/Output: [(2 46 -74 -20) -74]
Test Case: 565 | Input/Output: [(64 36 -2 -83) -83]
Test Case: 566 | Input/Output: [(-39 29 -68 -9) -68]
Test Case: 567 | Input/Output: [(-29 -41 66 -98) -98]
Test Case: 568 | Input/Output: [(-43 2 -52 -70) -70]
Test Case: 569 | Input/Output: [(85 -42 1 72) -42]
Test Case: 570 | Input/Output: [(3 61 34 34) 3]
Test Case: 571 | Input/Output: [(55 -41 67 81) -41]
Test Case: 572 | Input/Output: [(-42 -53 44 69) -53]
Test Case: 573 | Input/Output: [(-35 73 -1 8) -35]
Test Case: 574 | Input/Output: [(-14 6 -36 -64) -64]
Test Case: 575 | Input/Output: [(-32 5 -62 10) -62]
Test Case: 576 | Input/Output: [(35 -46 -55 -83) -83]
Test Case: 577 | Input/Output: [(-70 99 35 -80) -80]
Test Case: 578 | Input/Output: [(20 72 46 73) 20]
Test Case: 579 | Input/Output: [(86 -43 15 -2) -43]
Test Case: 580 | Input/Output: [(23 59 -2 35) -2]
Test Case: 581 | Input/Output: [(6 32 -46 -90) -90]
Test Case: 582 | Input/Output: [(-41 -30 -28 -62) -62]
Test Case: 583 | Input/Output: [(-47 80 -86 -73) -86]
Test Case: 584 | Input/Output: [(25 20 -56 36) -56]
Test Case: 585 | Input/Output: [(14 -96 -24 -72) -96]
Test Case: 586 | Input/Output: [(-58 -68 -11 -49) -68]
Test Case: 587 | Input/Output: [(34 -89 38 4) -89]
Test Case: 588 | Input/Output: [(64 79 -14 50) -14]
Test Case: 589 | Input/Output: [(66 42 28 -55) -55]
Test Case: 590 | Input/Output: [(-75 88 -10 77) -75]
Test Case: 591 | Input/Output: [(80 90 -33 -14) -33]
Test Case: 592 | Input/Output: [(-33 -95 -35 0) -95]
Test Case: 593 | Input/Output: [(-96 68 9 56) -96]
Test Case: 594 | Input/Output: [(13 16 0 39) 0]
Test Case: 595 | Input/Output: [(30 -26 36 16) -26]
Test Case: 596 | Input/Output: [(-95 -28 76 -39) -95]
Test Case: 597 | Input/Output: [(19 -99 -66 -60) -99]
Test Case: 598 | Input/Output: [(-58 -72 39 -54) -72]
Test Case: 599 | Input/Output: [(-84 -74 -76 100) -84]
Test Case: 600 | Input/Output: [(94 -35 81 5) -35]
Test Case: 601 | Input/Output: [(-100 -48 92 13) -100]
Test Case: 602 | Input/Output: [(52 18 -54 -60) -60]
Test Case: 603 | Input/Output: [(61 97 94 -36) -36]
Test Case: 604 | Input/Output: [(97 -24 15 -7) -24]
Test Case: 605 | Input/Output: [(-17 52 -13 28) -17]
Test Case: 606 | Input/Output: [(-56 -11 -38 87) -56]
Test Case: 607 | Input/Output: [(50 84 25 77) 25]
Test Case: 608 | Input/Output: [(-90 57 -41 70) -90]
Test Case: 609 | Input/Output: [(-64 88 59 69) -64]
Test Case: 610 | Input/Output: [(64 58 -27 29) -27]
Test Case: 611 | Input/Output: [(4 -89 -91 27) -91]
Test Case: 612 | Input/Output: [(79 -8 -76 47) -76]
Test Case: 613 | Input/Output: [(22 71 -18 -40) -40]
Test Case: 614 | Input/Output: [(88 14 -19 98) -19]
Test Case: 615 | Input/Output: [(94 -34 64 27) -34]
Test Case: 616 | Input/Output: [(-86 -10 -39 -19) -86]
Test Case: 617 | Input/Output: [(41 -10 84 -62) -62]
Test Case: 618 | Input/Output: [(28 87 -92 64) -92]
Test Case: 619 | Input/Output: [(69 2 -84 0) -84]
Test Case: 620 | Input/Output: [(-59 52 -38 -49) -59]
Test Case: 621 | Input/Output: [(71 -18 16 -83) -83]
Test Case: 622 | Input/Output: [(60 8 30 48) 8]
Test Case: 623 | Input/Output: [(57 -24 55 75) -24]
Test Case: 624 | Input/Output: [(67 79 13 -51) -51]
Test Case: 625 | Input/Output: [(-42 -62 -29 96) -62]
Test Case: 626 | Input/Output: [(-79 -26 -75 50) -79]
Test Case: 627 | Input/Output: [(59 -70 -71 -33) -71]
Test Case: 628 | Input/Output: [(-76 75 14 50) -76]
Test Case: 629 | Input/Output: [(47 -85 8 -88) -88]
Test Case: 630 | Input/Output: [(-95 98 3 20) -95]
Test Case: 631 | Input/Output: [(87 45 -74 -17) -74]
Test Case: 632 | Input/Output: [(-100 -95 84 -70) -100]
Test Case: 633 | Input/Output: [(69 68 -90 -97) -97]
Test Case: 634 | Input/Output: [(9 -78 -94 8) -94]
Test Case: 635 | Input/Output: [(-1 -16 -10 62) -16]
Test Case: 636 | Input/Output: [(53 -58 61 24) -58]
Test Case: 637 | Input/Output: [(32 76 -51 -43) -51]
Test Case: 638 | Input/Output: [(-95 -19 21 61) -95]
Test Case: 639 | Input/Output: [(77 11 -76 -98) -98]
Test Case: 640 | Input/Output: [(46 -15 85 -52) -52]
Test Case: 641 | Input/Output: [(68 55 -83 73) -83]
Test Case: 642 | Input/Output: [(9 71 10 98) 9]
Test Case: 643 | Input/Output: [(-17 -3 -84 25) -84]
Test Case: 644 | Input/Output: [(8 -59 -32 -10) -59]
Test Case: 645 | Input/Output: [(16 65 -60 -96) -96]
Test Case: 646 | Input/Output: [(-81 8 24 92) -81]
Test Case: 647 | Input/Output: [(30 12 77 31) 12]
Test Case: 648 | Input/Output: [(-55 -38 -38 83) -55]
Test Case: 649 | Input/Output: [(26 99 -61 43) -61]
Test Case: 650 | Input/Output: [(13 44 84 4) 4]
Test Case: 651 | Input/Output: [(30 95 49 37) 30]
Test Case: 652 | Input/Output: [(-82 -89 -4 -67) -89]
Test Case: 653 | Input/Output: [(-57 30 -21 -2) -57]
Test Case: 654 | Input/Output: [(34 71 -5 1) -5]
Test Case: 655 | Input/Output: [(-24 -22 -53 -51) -53]
Test Case: 656 | Input/Output: [(38 -13 0 -65) -65]
Test Case: 657 | Input/Output: [(81 -4 44 -93) -93]
Test Case: 658 | Input/Output: [(-91 -15 -60 -59) -91]
Test Case: 659 | Input/Output: [(-90 74 -74 -57) -90]
Test Case: 660 | Input/Output: [(-22 57 -53 80) -53]
Test Case: 661 | Input/Output: [(54 -64 74 39) -64]
Test Case: 662 | Input/Output: [(-26 -27 -47 98) -47]
Test Case: 663 | Input/Output: [(23 -13 -16 6) -16]
Test Case: 664 | Input/Output: [(-54 -63 23 74) -63]
Test Case: 665 | Input/Output: [(-50 -30 -50 33) -50]
Test Case: 666 | Input/Output: [(-16 -6 10 -32) -32]
Test Case: 667 | Input/Output: [(38 -84 61 -57) -84]
Test Case: 668 | Input/Output: [(-25 86 96 -25) -25]
Test Case: 669 | Input/Output: [(21 -96 -55 -27) -96]
Test Case: 670 | Input/Output: [(-68 38 -85 -22) -85]
Test Case: 671 | Input/Output: [(-92 -14 -29 97) -92]
Test Case: 672 | Input/Output: [(-42 35 38 -14) -42]
Test Case: 673 | Input/Output: [(-52 27 -8 -46) -52]
Test Case: 674 | Input/Output: [(86 -55 66 -24) -55]
Test Case: 675 | Input/Output: [(57 61 36 -8) -8]
Test Case: 676 | Input/Output: [(8 16 -91 33) -91]
Test Case: 677 | Input/Output: [(-59 37 36 19) -59]
Test Case: 678 | Input/Output: [(-10 -5 23 97) -10]
Test Case: 679 | Input/Output: [(-91 79 -27 -95) -95]
Test Case: 680 | Input/Output: [(32 21 -16 -48) -48]
Test Case: 681 | Input/Output: [(13 -53 46 -53) -53]
Test Case: 682 | Input/Output: [(-20 21 58 73) -20]
Test Case: 683 | Input/Output: [(-78 84 -56 6) -78]
Test Case: 684 | Input/Output: [(-62 -61 89 90) -62]
Test Case: 685 | Input/Output: [(-21 62 98 78) -21]
Test Case: 686 | Input/Output: [(-96 12 86 81) -96]
Test Case: 687 | Input/Output: [(53 -4 -23 -34) -34]
Test Case: 688 | Input/Output: [(-95 37 -97 31) -97]
Test Case: 689 | Input/Output: [(2 77 58 80) 2]
Test Case: 690 | Input/Output: [(-37 -67 -39 84) -67]
Test Case: 691 | Input/Output: [(-66 58 -7 -10) -66]
Test Case: 692 | Input/Output: [(-63 46 -40 50) -63]
Test Case: 693 | Input/Output: [(40 86 31 -75) -75]
Test Case: 694 | Input/Output: [(98 -56 52 59) -56]
Test Case: 695 | Input/Output: [(-67 9 88 -51) -67]
Test Case: 696 | Input/Output: [(-42 76 -88 72) -88]
Test Case: 697 | Input/Output: [(10 67 25 25) 10]
Test Case: 698 | Input/Output: [(72 71 66 78) 66]
Test Case: 699 | Input/Output: [(83 -24 2 -23) -24]
Test Case: 700 | Input/Output: [(66 -35 77 -27) -35]
Test Case: 701 | Input/Output: [(99 -22 -29 77) -29]
Test Case: 702 | Input/Output: [(-76 -65 -23 86) -76]
Test Case: 703 | Input/Output: [(29 -40 -77 1) -77]
Test Case: 704 | Input/Output: [(45 -66 -75 -39) -75]
Test Case: 705 | Input/Output: [(91 -5 32 52) -5]
Test Case: 706 | Input/Output: [(56 -17 -5 -90) -90]
Test Case: 707 | Input/Output: [(20 -8 -36 -54) -54]
Test Case: 708 | Input/Output: [(31 -44 -69 60) -69]
Test Case: 709 | Input/Output: [(60 32 -30 -1) -30]
Test Case: 710 | Input/Output: [(36 39 9 -81) -81]
Test Case: 711 | Input/Output: [(-85 57 -48 67) -85]
Test Case: 712 | Input/Output: [(-41 -93 -15 -18) -93]
Test Case: 713 | Input/Output: [(24 65 -45 40) -45]
Test Case: 714 | Input/Output: [(-61 13 74 53) -61]
Test Case: 715 | Input/Output: [(34 -68 -96 -66) -96]
Test Case: 716 | Input/Output: [(0 63 -29 38) -29]
Test Case: 717 | Input/Output: [(44 -11 -9 55) -11]
Test Case: 718 | Input/Output: [(-18 -10 -86 55) -86]
Test Case: 719 | Input/Output: [(-79 -53 5 -65) -79]
Test Case: 720 | Input/Output: [(-41 -86 -74 -79) -86]
Test Case: 721 | Input/Output: [(40 63 -16 -58) -58]
Test Case: 722 | Input/Output: [(39 -66 6 -28) -66]
Test Case: 723 | Input/Output: [(73 -81 38 -13) -81]
Test Case: 724 | Input/Output: [(23 -80 92 -94) -94]
Test Case: 725 | Input/Output: [(75 -27 4 -45) -45]
Test Case: 726 | Input/Output: [(81 70 94 -69) -69]
Test Case: 727 | Input/Output: [(-59 19 -69 -19) -69]
Test Case: 728 | Input/Output: [(15 33 27 -18) -18]
Test Case: 729 | Input/Output: [(65 91 15 -12) -12]
Test Case: 730 | Input/Output: [(65 -87 30 -37) -87]
Test Case: 731 | Input/Output: [(65 81 99 -47) -47]
Test Case: 732 | Input/Output: [(6 26 -50 -79) -79]
Test Case: 733 | Input/Output: [(-84 -46 16 27) -84]
Test Case: 734 | Input/Output: [(93 -35 -99 -19) -99]
Test Case: 735 | Input/Output: [(95 -77 23 70) -77]
Test Case: 736 | Input/Output: [(-93 -89 -76 -25) -93]
Test Case: 737 | Input/Output: [(-100 31 -58 15) -100]
Test Case: 738 | Input/Output: [(60 57 -95 -79) -95]
Test Case: 739 | Input/Output: [(99 50 5 91) 5]
Test Case: 740 | Input/Output: [(2 63 61 -61) -61]
Test Case: 741 | Input/Output: [(36 41 86 59) 36]
Test Case: 742 | Input/Output: [(100 25 -78 -97) -97]
Test Case: 743 | Input/Output: [(-86 -86 -86 -26) -86]
Test Case: 744 | Input/Output: [(89 40 -45 -52) -52]
Test Case: 745 | Input/Output: [(-44 56 16 12) -44]
Test Case: 746 | Input/Output: [(95 28 69 73) 28]
Test Case: 747 | Input/Output: [(-4 26 84 100) -4]
Test Case: 748 | Input/Output: [(-96 76 -44 -27) -96]
Test Case: 749 | Input/Output: [(85 82 -58 -62) -62]
Test Case: 750 | Input/Output: [(22 -44 73 -37) -44]
Test Case: 751 | Input/Output: [(60 -8 17 -67) -67]
Test Case: 752 | Input/Output: [(-55 99 -16 97) -55]
Test Case: 753 | Input/Output: [(-14 80 49 -92) -92]
Test Case: 754 | Input/Output: [(-52 16 91 33) -52]
Test Case: 755 | Input/Output: [(18 -84 -6 -58) -84]
Test Case: 756 | Input/Output: [(70 -74 -17 -50) -74]
Test Case: 757 | Input/Output: [(5 49 88 46) 5]
Test Case: 758 | Input/Output: [(91 99 10 -100) -100]
Test Case: 759 | Input/Output: [(-36 -66 -67 -82) -82]
Test Case: 760 | Input/Output: [(99 -81 79 -84) -84]
Test Case: 761 | Input/Output: [(3 -77 -19 46) -77]
Test Case: 762 | Input/Output: [(66 -52 -91 46) -91]
Test Case: 763 | Input/Output: [(64 33 77 -54) -54]
Test Case: 764 | Input/Output: [(-59 21 53 -86) -86]
Test Case: 765 | Input/Output: [(15 60 -98 -32) -98]
Test Case: 766 | Input/Output: [(24 6 79 62) 6]
Test Case: 767 | Input/Output: [(19 48 81 23) 19]
Test Case: 768 | Input/Output: [(-81 31 89 83) -81]
Test Case: 769 | Input/Output: [(14 -92 -72 -58) -92]
Test Case: 770 | Input/Output: [(-33 -65 76 32) -65]
Test Case: 771 | Input/Output: [(55 -65 -36 40) -65]
Test Case: 772 | Input/Output: [(-62 -23 56 -49) -62]
Test Case: 773 | Input/Output: [(-82 -51 38 84) -82]
Test Case: 774 | Input/Output: [(-50 -29 -89 -12) -89]
Test Case: 775 | Input/Output: [(31 80 -66 11) -66]
Test Case: 776 | Input/Output: [(47 -93 -31 74) -93]
Test Case: 777 | Input/Output: [(99 82 -76 -45) -76]
Test Case: 778 | Input/Output: [(67 87 -54 -22) -54]
Test Case: 779 | Input/Output: [(91 48 -33 88) -33]
Test Case: 780 | Input/Output: [(27 -10 -52 -60) -60]
Test Case: 781 | Input/Output: [(80 60 -29 59) -29]
Test Case: 782 | Input/Output: [(-58 -54 -25 0) -58]
Test Case: 783 | Input/Output: [(96 -81 -44 -71) -81]
Test Case: 784 | Input/Output: [(54 7 -27 27) -27]
Test Case: 785 | Input/Output: [(-91 61 -46 58) -91]
Test Case: 786 | Input/Output: [(94 -76 91 -47) -76]
Test Case: 787 | Input/Output: [(-42 -42 -46 -75) -75]
Test Case: 788 | Input/Output: [(-29 -55 0 -14) -55]
Test Case: 789 | Input/Output: [(-52 -56 61 10) -56]
Test Case: 790 | Input/Output: [(6 -88 -44 54) -88]
Test Case: 791 | Input/Output: [(-72 50 39 82) -72]
Test Case: 792 | Input/Output: [(-21 -5 64 58) -21]
Test Case: 793 | Input/Output: [(18 -63 41 -47) -63]
Test Case: 794 | Input/Output: [(28 39 -91 -38) -91]
Test Case: 795 | Input/Output: [(-55 -24 -78 18) -78]
Test Case: 796 | Input/Output: [(-54 -71 -50 -68) -71]
Test Case: 797 | Input/Output: [(-10 -95 85 -60) -95]
Test Case: 798 | Input/Output: [(-72 -51 5 -23) -72]
Test Case: 799 | Input/Output: [(99 -70 67 21) -70]
Test Case: 800 | Input/Output: [(-37 83 67 -48) -48]
Test Case: 801 | Input/Output: [(47 69 92 -37) -37]
Test Case: 802 | Input/Output: [(3 23 38 100) 3]
Test Case: 803 | Input/Output: [(54 -48 -23 61) -48]
Test Case: 804 | Input/Output: [(21 -11 -84 68) -84]
Test Case: 805 | Input/Output: [(-63 -39 -87 -63) -87]
Test Case: 806 | Input/Output: [(-67 -32 -35 -61) -67]
Test Case: 807 | Input/Output: [(61 -58 6 -52) -58]
Test Case: 808 | Input/Output: [(83 77 -93 15) -93]
Test Case: 809 | Input/Output: [(-76 26 84 99) -76]
Test Case: 810 | Input/Output: [(-99 -47 -61 79) -99]
Test Case: 811 | Input/Output: [(80 -48 -7 98) -48]
Test Case: 812 | Input/Output: [(92 66 19 -100) -100]
Test Case: 813 | Input/Output: [(69 54 -34 74) -34]
Test Case: 814 | Input/Output: [(15 -71 42 -89) -89]
Test Case: 815 | Input/Output: [(55 -65 -42 44) -65]
Test Case: 816 | Input/Output: [(68 0 18 51) 0]
Test Case: 817 | Input/Output: [(8 -67 -61 -10) -67]
Test Case: 818 | Input/Output: [(1 -17 -39 97) -39]
Test Case: 819 | Input/Output: [(38 -64 -3 -68) -68]
Test Case: 820 | Input/Output: [(-86 -94 41 -30) -94]
Test Case: 821 | Input/Output: [(60 -92 -25 -53) -92]
Test Case: 822 | Input/Output: [(45 62 -92 56) -92]
Test Case: 823 | Input/Output: [(-20 26 -17 46) -20]
Test Case: 824 | Input/Output: [(46 8 15 -18) -18]
Test Case: 825 | Input/Output: [(-91 -52 47 61) -91]
Test Case: 826 | Input/Output: [(48 -91 -49 51) -91]
Test Case: 827 | Input/Output: [(26 -85 42 88) -85]
Test Case: 828 | Input/Output: [(12 32 -33 39) -33]
Test Case: 829 | Input/Output: [(71 -77 -58 90) -77]
Test Case: 830 | Input/Output: [(74 14 52 -37) -37]
Test Case: 831 | Input/Output: [(31 24 -64 2) -64]
Test Case: 832 | Input/Output: [(-76 76 100 43) -76]
Test Case: 833 | Input/Output: [(27 -9 -47 94) -47]
Test Case: 834 | Input/Output: [(20 92 70 -78) -78]
Test Case: 835 | Input/Output: [(-32 43 54 95) -32]
Test Case: 836 | Input/Output: [(99 -66 -39 -71) -71]
Test Case: 837 | Input/Output: [(57 -7 78 -39) -39]
Test Case: 838 | Input/Output: [(-32 -79 23 2) -79]
Test Case: 839 | Input/Output: [(-84 -10 82 44) -84]
Test Case: 840 | Input/Output: [(-25 52 -51 21) -51]
Test Case: 841 | Input/Output: [(-95 59 -21 -65) -95]
Test Case: 842 | Input/Output: [(78 -51 22 -46) -51]
Test Case: 843 | Input/Output: [(45 9 89 79) 9]
Test Case: 844 | Input/Output: [(-22 -83 48 -33) -83]
Test Case: 845 | Input/Output: [(-83 -81 -45 -64) -83]
Test Case: 846 | Input/Output: [(-72 -19 -81 -19) -81]
Test Case: 847 | Input/Output: [(-77 -21 36 -36) -77]
Test Case: 848 | Input/Output: [(-48 -86 -50 33) -86]
Test Case: 849 | Input/Output: [(46 -33 -17 -44) -44]
Test Case: 850 | Input/Output: [(10 49 24 -45) -45]
Test Case: 851 | Input/Output: [(-3 -36 -2 14) -36]
Test Case: 852 | Input/Output: [(41 -55 98 -1) -55]
Test Case: 853 | Input/Output: [(-53 63 -31 59) -53]
Test Case: 854 | Input/Output: [(-30 -57 -44 -64) -64]
Test Case: 855 | Input/Output: [(100 -61 -74 56) -74]
Test Case: 856 | Input/Output: [(82 -96 57 79) -96]
Test Case: 857 | Input/Output: [(-61 50 26 -4) -61]
Test Case: 858 | Input/Output: [(59 -35 95 33) -35]
Test Case: 859 | Input/Output: [(86 -94 -2 94) -94]
Test Case: 860 | Input/Output: [(-100 -67 40 6) -100]
Test Case: 861 | Input/Output: [(83 60 58 -68) -68]
Test Case: 862 | Input/Output: [(30 -16 53 98) -16]
Test Case: 863 | Input/Output: [(-58 55 -91 -19) -91]
Test Case: 864 | Input/Output: [(89 -31 -66 94) -66]
Test Case: 865 | Input/Output: [(17 -68 -51 -97) -97]
Test Case: 866 | Input/Output: [(88 -12 65 -41) -41]
Test Case: 867 | Input/Output: [(-29 -64 -84 47) -84]
Test Case: 868 | Input/Output: [(-27 -30 44 80) -30]
Test Case: 869 | Input/Output: [(56 100 -79 82) -79]
Test Case: 870 | Input/Output: [(84 -29 -6 62) -29]
Test Case: 871 | Input/Output: [(49 -73 -55 30) -73]
Test Case: 872 | Input/Output: [(-25 -30 -69 -24) -69]
Test Case: 873 | Input/Output: [(-71 79 -79 -43) -79]
Test Case: 874 | Input/Output: [(46 48 -44 92) -44]
Test Case: 875 | Input/Output: [(20 -58 39 58) -58]
Test Case: 876 | Input/Output: [(-87 -94 12 28) -94]
Test Case: 877 | Input/Output: [(-28 -16 59 45) -28]
Test Case: 878 | Input/Output: [(45 91 -82 -63) -82]
Test Case: 879 | Input/Output: [(-74 -23 -87 16) -87]
Test Case: 880 | Input/Output: [(-8 1 85 5) -8]
Test Case: 881 | Input/Output: [(71 7 97 -39) -39]
Test Case: 882 | Input/Output: [(-89 88 30 -21) -89]
Test Case: 883 | Input/Output: [(-88 -17 72 -36) -88]
Test Case: 884 | Input/Output: [(45 -8 100 0) -8]
Test Case: 885 | Input/Output: [(86 81 77 62) 62]
Test Case: 886 | Input/Output: [(84 -39 -69 85) -69]
Test Case: 887 | Input/Output: [(84 22 -69 -41) -69]
Test Case: 888 | Input/Output: [(-66 20 18 -5) -66]
Test Case: 889 | Input/Output: [(95 22 70 -28) -28]
Test Case: 890 | Input/Output: [(-88 -39 7 39) -88]
Test Case: 891 | Input/Output: [(24 -80 41 -11) -80]
Test Case: 892 | Input/Output: [(72 23 75 -8) -8]
Test Case: 893 | Input/Output: [(-81 65 68 94) -81]
Test Case: 894 | Input/Output: [(-8 -30 65 95) -30]
Test Case: 895 | Input/Output: [(27 92 -23 57) -23]
Test Case: 896 | Input/Output: [(92 -4 38 80) -4]
Test Case: 897 | Input/Output: [(-13 57 31 42) -13]
Test Case: 898 | Input/Output: [(-71 -89 -69 -24) -89]
Test Case: 899 | Input/Output: [(46 -52 62 81) -52]
Test Case: 900 | Input/Output: [(76 -78 -85 -30) -85]
Test Case: 901 | Input/Output: [(-21 90 69 53) -21]
Test Case: 902 | Input/Output: [(29 -3 -81 80) -81]
Test Case: 903 | Input/Output: [(79 -19 -77 98) -77]
Test Case: 904 | Input/Output: [(52 -38 -27 -49) -49]
Test Case: 905 | Input/Output: [(-28 77 -62 -47) -62]
Test Case: 906 | Input/Output: [(-44 -27 -73 -68) -73]
Test Case: 907 | Input/Output: [(-73 51 60 49) -73]
Test Case: 908 | Input/Output: [(77 -12 81 15) -12]
Test Case: 909 | Input/Output: [(30 38 20 50) 20]
Test Case: 910 | Input/Output: [(87 33 -89 9) -89]
Test Case: 911 | Input/Output: [(-91 -23 3 47) -91]
Test Case: 912 | Input/Output: [(59 -12 48 -46) -46]
Test Case: 913 | Input/Output: [(-1 -48 -24 -53) -53]
Test Case: 914 | Input/Output: [(-83 -85 -94 -21) -94]
Test Case: 915 | Input/Output: [(49 -21 37 -40) -40]
Test Case: 916 | Input/Output: [(-81 -69 44 41) -81]
Test Case: 917 | Input/Output: [(-26 34 -49 89) -49]
Test Case: 918 | Input/Output: [(27 59 88 14) 14]
Test Case: 919 | Input/Output: [(21 -92 88 55) -92]
Test Case: 920 | Input/Output: [(-32 -5 -40 -46) -46]
Test Case: 921 | Input/Output: [(79 25 -90 -51) -90]
Test Case: 922 | Input/Output: [(-50 92 1 -61) -61]
Test Case: 923 | Input/Output: [(-70 -37 -11 51) -70]
Test Case: 924 | Input/Output: [(-34 56 -55 -15) -55]
Test Case: 925 | Input/Output: [(97 87 -47 88) -47]
Test Case: 926 | Input/Output: [(-84 -19 -46 64) -84]
Test Case: 927 | Input/Output: [(71 -32 74 -100) -100]
Test Case: 928 | Input/Output: [(-15 -49 -68 -25) -68]
Test Case: 929 | Input/Output: [(59 -28 -48 -17) -48]
Test Case: 930 | Input/Output: [(94 -17 -19 41) -19]
Test Case: 931 | Input/Output: [(61 -35 -77 30) -77]
Test Case: 932 | Input/Output: [(61 18 26 -89) -89]
Test Case: 933 | Input/Output: [(-97 -5 14 88) -97]
Test Case: 934 | Input/Output: [(88 84 95 -92) -92]
Test Case: 935 | Input/Output: [(19 56 -54 83) -54]
Test Case: 936 | Input/Output: [(-83 2 -10 -97) -97]
Test Case: 937 | Input/Output: [(-85 -8 -92 -83) -92]
Test Case: 938 | Input/Output: [(-82 80 -91 -71) -91]
Test Case: 939 | Input/Output: [(-25 -27 8 -35) -35]
Test Case: 940 | Input/Output: [(27 5 69 16) 5]
Test Case: 941 | Input/Output: [(-93 -89 -68 2) -93]
Test Case: 942 | Input/Output: [(59 -73 60 -44) -73]
Test Case: 943 | Input/Output: [(57 60 32 -43) -43]
Test Case: 944 | Input/Output: [(-84 73 -77 83) -84]
Test Case: 945 | Input/Output: [(27 22 79 -45) -45]
Test Case: 946 | Input/Output: [(21 40 5 23) 5]
Test Case: 947 | Input/Output: [(-100 68 -30 2) -100]
Test Case: 948 | Input/Output: [(90 83 -54 -41) -54]
Test Case: 949 | Input/Output: [(-84 31 78 50) -84]
Test Case: 950 | Input/Output: [(-35 -87 21 -24) -87]
Test Case: 951 | Input/Output: [(8 -48 75 -53) -53]
Test Case: 952 | Input/Output: [(-67 13 80 61) -67]
Test Case: 953 | Input/Output: [(3 -95 57 1) -95]
Test Case: 954 | Input/Output: [(8 97 -41 -35) -41]
Test Case: 955 | Input/Output: [(100 -32 49 -59) -59]
Test Case: 956 | Input/Output: [(75 29 16 -35) -35]
Test Case: 957 | Input/Output: [(-24 3 42 54) -24]
Test Case: 958 | Input/Output: [(-74 35 0 -30) -74]
Test Case: 959 | Input/Output: [(88 61 -72 -83) -83]
Test Case: 960 | Input/Output: [(-5 88 -30 13) -30]
Test Case: 961 | Input/Output: [(53 -28 -41 30) -41]
Test Case: 962 | Input/Output: [(24 -55 31 -55) -55]
Test Case: 963 | Input/Output: [(-48 -20 -62 3) -62]
Test Case: 964 | Input/Output: [(29 -95 -43 56) -95]
Test Case: 965 | Input/Output: [(86 40 37 -94) -94]
Test Case: 966 | Input/Output: [(-98 -23 75 49) -98]
Test Case: 967 | Input/Output: [(-56 -78 81 -15) -78]
Test Case: 968 | Input/Output: [(95 -81 20 83) -81]
Test Case: 969 | Input/Output: [(68 -68 -2 -13) -68]
Test Case: 970 | Input/Output: [(25 88 12 -71) -71]
Test Case: 971 | Input/Output: [(15 -14 96 37) -14]
Test Case: 972 | Input/Output: [(53 -77 48 56) -77]
Test Case: 973 | Input/Output: [(-82 79 -100 -60) -100]
Test Case: 974 | Input/Output: [(92 -93 -74 55) -93]
Test Case: 975 | Input/Output: [(-23 -53 -100 -100) -100]
Test Case: 976 | Input/Output: [(64 70 -47 -61) -61]
Test Case: 977 | Input/Output: [(63 -98 57 12) -98]
Test Case: 978 | Input/Output: [(-45 -80 -10 -19) -80]
Test Case: 979 | Input/Output: [(77 40 86 36) 36]
Test Case: 980 | Input/Output: [(81 64 28 -62) -62]
Test Case: 981 | Input/Output: [(99 -82 -60 80) -82]
Test Case: 982 | Input/Output: [(-71 -54 -23 15) -71]
Test Case: 983 | Input/Output: [(-19 -95 38 -10) -95]
Test Case: 984 | Input/Output: [(-50 -41 -47 48) -50]
Test Case: 985 | Input/Output: [(-10 57 -56 31) -56]
Test Case: 986 | Input/Output: [(78 25 -2 79) -2]
Test Case: 987 | Input/Output: [(44 61 -5 33) -5]
Test Case: 988 | Input/Output: [(87 -13 3 -47) -47]
Test Case: 989 | Input/Output: [(-82 70 97 -19) -82]
Test Case: 990 | Input/Output: [(76 -13 39 91) -13]
Test Case: 991 | Input/Output: [(-39 -29 41 -22) -39]
Test Case: 992 | Input/Output: [(60 95 -78 47) -78]
Test Case: 993 | Input/Output: [(-64 -24 -4 53) -64]
Test Case: 994 | Input/Output: [(-57 -53 11 -67) -67]
Test Case: 995 | Input/Output: [(10 -86 -61 74) -86]
Test Case: 996 | Input/Output: [(-28 -58 -32 -89) -89]
Test Case: 997 | Input/Output: [(77 -13 5 20) -13]
Test Case: 998 | Input/Output: [(72 -57 -73 -11) -73]
Test Case: 999 | Input/Output: [(-88 37 -92 -59) -92]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:uniform-addition-and-deletion 1.0}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 3000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
random-screen = false
random-seed = 15 -107 92 118 65 -121 90 116 -77 7 -27 -27 78 -14 106 -123
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[7 46 46 46] 7] [[-83 -54 -83 -83] -83] [[-5 78 78 78] -5] [[-24 16 -24 -24] -24] [[-77 -77 -77 -65] -77] [[1 -63 1 1] -63] [[-29 -29 30 -29] -29] [[100 4 100 100] 4] [[-16 -16 43 -16] -16] [[50 0 50 50] 0] [(72 72 72 72) 72] [(53 53 53 53) 53] [(73 73 73 73) 73] [(99 99 99 99) 99] [(76 76 76 76) 76] [(61 69 33 3) 3] [(67 83 80 40) 40] [(99 7 66 28) 7] [(96 2 75 1) 1] [(77 73 96 3) 3] [(9 53 85 44) 9] [(36 56 64 69) 36] [(87 32 88 51) 32] [(5 100 48 43) 5] [(17 51 99 27) 17] [(29 43 61 38) 29] [(96 32 17 75) 17] [(2 99 14 67) 2] [(37 75 86 81) 37] [(60 84 68 11) 11] [(66 62 20 62) 20] [(17 34 14 45) 14] [(92 52 46 80) 46] [(45 27 55 28) 27] [(79 37 81 50) 37] [(90 13 46 -33) -33] [(77 -50 14 40) -50] [(-65 48 -68 62) -68] [(64 -93 45 -43) -93] [(-75 -89 -14 -41) -89] [(27 -53 34 -69) -69] [(-54 85 25 17) -54] [(-72 -95 -31 23) -95] [(-97 36 -15 -10) -97] [(-36 -95 -81 61) -95] [(-62 90 -100 56) -100] [(74 17 7 -73) -73] [(-38 58 -34 -20) -38] [(-18 -93 41 55) -93] [(-64 52 -64 42) -64] [(9 26 55 -59) -59] [(69 61 46 81) 46] [(-87 25 -8 -20) -87] [(-29 -15 3 -74) -74] [(64 73 -94 53) -94] [(-49 -76 19 8) -76] [(13 92 41 96) 13] [(-1 67 -22 -69) -69] [(-37 34 -80 78) -80] [(-45 -59 -19 95) -59] [(46 95 -34 72) -34] [(-79 -68 -8 56) -79] [(-72 -94 13 81) -94] [(-90 55 91 -80) -90] [(-74 42 61 76) -74] [(-89 -69 57 -45) -89] [(-86 78 -19 -34) -86] [(97 14 -75 8) -75] [(62 -44 -45 -19) -45] [(-14 62 91 -87) -87] [(-96 -73 90 66) -96] [(73 -12 -49 56) -49] [(92 17 -96 38) -96] [(83 -23 65 -1) -23] [(22 -59 57 41) -59] [(29 31 -65 40) -65] [(-22 -18 -11 -7) -22] [(30 100 61 30) 30] [(-77 -19 -41 -75) -77] [(-54 -19 -46 -70) -70] [(-85 94 -17 -42) -85] [(73 86 -10 76) -10] [(-54 61 98 85) -54] [(-97 -32 49 -39) -97] [(11 -86 -80 2) -86] [(34 3 88 -4) -4] [(-87 -63 -19 -5) -87] [(99 15 -5 84) -5] [(50 -32 36 27) -32] [(100 -45 9 -31) -45] [(-73 49 40 53) -73] [(76 46 75 46) 46] [(47 76 -13 52) -13] [(-92 -86 60 -29) -92] [(-59 -58 5 -76) -76])
uniform-addition-and-deletion-rate = 0.09
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 650
Test mean error for best: 0.65000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 7                   | Program output: 7                  
Correct output: -83                 | Program output: -83                
Correct output: -5                  | Program output: -5                 
Correct output: -24                 | Program output: -24                
Correct output: -77                 | Program output: -77                
Correct output: -63                 | Program output: 1                  
Correct output: -29                 | Program output: -29                
Correct output: 4                   | Program output: 100                
Correct output: -16                 | Program output: -16                
Correct output: 0                   | Program output: 50                 
Correct output: 72                  | Program output: 72                 
Correct output: 53                  | Program output: 53                 
Correct output: 73                  | Program output: 73                 
Correct output: 99                  | Program output: 99                 
Correct output: 76                  | Program output: 76                 
Correct output: 3                   | Program output: 61                 
Correct output: 40                  | Program output: 67                 
Correct output: 7                   | Program output: 99                 
Correct output: 1                   | Program output: 96                 
Correct output: 3                   | Program output: 77                 
Correct output: 9                   | Program output: 9                  
Correct output: 36                  | Program output: 36                 
Correct output: 32                  | Program output: 87                 
Correct output: 5                   | Program output: 5                  
Correct output: 17                  | Program output: 17                 
Correct output: 29                  | Program output: 29                 
Correct output: 17                  | Program output: 96                 
Correct output: 2                   | Program output: 2                  
Correct output: 37                  | Program output: 37                 
Correct output: 11                  | Program output: 60                 
Correct output: 20                  | Program output: 66                 
Correct output: 14                  | Program output: 17                 
Correct output: 46                  | Program output: 92                 
Correct output: 27                  | Program output: 45                 
Correct output: 37                  | Program output: 79                 
Correct output: -33                 | Program output: 90                 
Correct output: -50                 | Program output: 77                 
Correct output: -68                 | Program output: -65                
Correct output: -93                 | Program output: 64                 
Correct output: -89                 | Program output: -75                
Correct output: -69                 | Program output: 27                 
Correct output: -54                 | Program output: -54                
Correct output: -95                 | Program output: -72                
Correct output: -97                 | Program output: -97                
Correct output: -95                 | Program output: -36                
Correct output: -100                | Program output: -62                
Correct output: -73                 | Program output: 74                 
Correct output: -38                 | Program output: -38                
Correct output: -93                 | Program output: -18                
Correct output: -64                 | Program output: -64                
Correct output: -59                 | Program output: 9                  
Correct output: 46                  | Program output: 69                 
Correct output: -87                 | Program output: -87                
Correct output: -74                 | Program output: -29                
Correct output: -94                 | Program output: 64                 
Correct output: -76                 | Program output: -49                
Correct output: 13                  | Program output: 13                 
Correct output: -69                 | Program output: -1                 
Correct output: -80                 | Program output: -37                
Correct output: -59                 | Program output: -45                
Correct output: -34                 | Program output: 46                 
Correct output: -79                 | Program output: -79                
Correct output: -94                 | Program output: -72                
Correct output: -90                 | Program output: -90                
Correct output: -74                 | Program output: -74                
Correct output: -89                 | Program output: -89                
Correct output: -86                 | Program output: -86                
Correct output: -75                 | Program output: 97                 
Correct output: -45                 | Program output: 62                 
Correct output: -87                 | Program output: -14                
Correct output: -96                 | Program output: -96                
Correct output: -49                 | Program output: 73                 
Correct output: -96                 | Program output: 92                 
Correct output: -23                 | Program output: 83                 
Correct output: -59                 | Program output: 22                 
Correct output: -65                 | Program output: 29                 
Correct output: -22                 | Program output: -22                
Correct output: 30                  | Program output: 30                 
Correct output: -77                 | Program output: -77                
Correct output: -70                 | Program output: -54                
Correct output: -85                 | Program output: -85                
Correct output: -10                 | Program output: 73                 
Correct output: -54                 | Program output: -54                
Correct output: -97                 | Program output: -97                
Correct output: -86                 | Program output: 11                 
Correct output: -4                  | Program output: 34                 
Correct output: -87                 | Program output: -87                
Correct output: -5                  | Program output: 99                 
Correct output: -32                 | Program output: 50                 
Correct output: -45                 | Program output: 100                
Correct output: -73                 | Program output: -73                
Correct output: 46                  | Program output: 76                 
Correct output: -13                 | Program output: 47                 
Correct output: -92                 | Program output: -92                
Correct output: -76                 | Program output: -59                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_rot} {:close 1, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_when} {:close 1, :instruction exec_k} {:close 0, :instruction exec_k} {:close 0, :instruction integer_inc} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction tag_exec_168} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_yank} {:close 0, :instruction 14} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_mult} {:close 1, :instruction exec_y} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 1, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_rot} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_items} {:close 2, :instruction integer_dup} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_swap} {:close 0, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction in4} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_mod} {:close 0, :instruction tag_boolean_21} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_when})
Lexicase best program: (integer_mult exec_eq boolean_dup_times exec_do*count (exec_y_when_autoconstructing (boolean_invert_first_then_and boolean_pop integer_rot in1) integer_dup_times) boolean_pop integer_mult integer_empty boolean_not exec_when (boolean_flush) print_integer integer_lte boolean_rot exec_if (print_integer integer_stackdepth boolean_yankdup integer_sub exec_when (exec_k () (exec_k (integer_inc print_integer) (boolean_pop integer_sub boolean_yankdup exec_while (tag_exec_168 (exec_when () boolean_empty integer_fromboolean print_exec (boolean_yank 14 integer_inc integer_mult) exec_y () exec_s (integer_mult in3) (exec_do*times (integer_fromboolean exec_swap (exec_if (exec_do*range (exec_do*while (exec_s_when_autoconstructing () (exec_when (in2 boolean_yank integer_mod boolean_rot print_boolean) boolean_swap boolean_pop boolean_invert_first_then_and exec_yankdup boolean_swap) (integer_dup_times integer_lt boolean_dup_items in1 boolean_dup_items integer_dup)) exec_do*count () integer_dup_items integer_div boolean_xor exec_yank exec_when (exec_k (integer_dup boolean_dup_times exec_yankdup boolean_rot exec_swap () (in4 print_integer) exec_y (in4 integer_eq integer_mod tag_boolean_21 integer_dec exec_when ())) ()))) ()) ())) ())))))) ())
Lexicase best errors: [0 0 1 0 1 0 1 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 129
Percent parens: 0.295
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_rot} {:close 1, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_when} {:close 1, :instruction exec_k} {:close 0, :instruction exec_k} {:close 0, :instruction integer_inc} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction tag_exec_168} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_yank} {:close 0, :instruction 14} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_mult} {:close 1, :instruction exec_y} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 1, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_rot} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_items} {:close 2, :instruction integer_dup} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_swap} {:close 0, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction in4} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_mod} {:close 0, :instruction tag_boolean_21} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_when})
Zero cases best program: (integer_mult exec_eq boolean_dup_times exec_do*count (exec_y_when_autoconstructing (boolean_invert_first_then_and boolean_pop integer_rot in1) integer_dup_times) boolean_pop integer_mult integer_empty boolean_not exec_when (boolean_flush) print_integer integer_lte boolean_rot exec_if (print_integer integer_stackdepth boolean_yankdup integer_sub exec_when (exec_k () (exec_k (integer_inc print_integer) (boolean_pop integer_sub boolean_yankdup exec_while (tag_exec_168 (exec_when () boolean_empty integer_fromboolean print_exec (boolean_yank 14 integer_inc integer_mult) exec_y () exec_s (integer_mult in3) (exec_do*times (integer_fromboolean exec_swap (exec_if (exec_do*range (exec_do*while (exec_s_when_autoconstructing () (exec_when (in2 boolean_yank integer_mod boolean_rot print_boolean) boolean_swap boolean_pop boolean_invert_first_then_and exec_yankdup boolean_swap) (integer_dup_times integer_lt boolean_dup_items in1 boolean_dup_items integer_dup)) exec_do*count () integer_dup_items integer_div boolean_xor exec_yank exec_when (exec_k (integer_dup boolean_dup_times exec_yankdup boolean_rot exec_swap () (in4 print_integer) exec_y (in4 integer_eq integer_mod tag_boolean_21 integer_dec exec_when ())) ()))) ()) ())) ())))))) ())
Zero cases best errors: [0 0 1 0 1 0 1 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 129
Percent parens: 0.295
--- Lexicase Population Statistics ---
Count of elite individuals by case: (3 5 1 4 2 3 6 4 10 4)
Population mean number of elite cases: 0.04
Count of perfect (error zero) individuals by case: (3 5 1 4 2 3 6 4 10 4)
Population mean number of perfect (error zero) cases: 0.04
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_shove} {:close 0, :instruction in4} {:close 1, :instruction integer_dup} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*range} {:close 3, :instruction exec_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction print_integer} {:close 0, :instruction integer_add} {:close 1, :instruction exec_rot} {:close 1, :instruction integer_max} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_y} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_add} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction -50} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*count})
Best program: (exec_do*while (boolean_yankdup) exec_y_when_autoconstructing (integer_gte integer_shove in4 integer_dup) boolean_dup_items boolean_rot boolean_yankdup exec_s (exec_y_when_autoconstructing (in1 print_integer exec_do*range (exec_eq))) (boolean_stackdepth print_integer) (integer_add exec_rot () (integer_max) (integer_max boolean_rot exec_yank integer_fromboolean integer_gte) boolean_empty boolean_dup_times integer_dup_items exec_y () integer_add boolean_dup_times exec_s (exec_k_when_autoconstructing (exec_dup_items integer_add) (integer_min boolean_eq) boolean_yankdup integer_gt -50 boolean_dup_items exec_yankdup in2 integer_dec exec_shove (boolean_yankdup) exec_flush integer_fromboolean integer_lte exec_y_when_autoconstructing (boolean_frominteger integer_max integer_min exec_do*count ())) () ()))
Errors: [0 0 1 0 1 0 1 0 0 0]
Total: 3
Mean: 0.3
Genome size: 55
Size: 75
Percent parens: 0.267
--- Population Statistics ---
Average total errors in population: 9.958
Median total errors in population: 10
Error averages by case: (0.997 0.995 0.999 0.996 0.998 0.997 0.994 0.996 0.99 0.996)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 51.318
Average program size in population (points): 70.574
Average percent parens in population: 0.277
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.999
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.999
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.263
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 505514
--- Timings ---
Current time: 1559594106320 milliseconds
Total Time:           2.6 seconds
Initialization:       0.1 seconds,  4.1%
Reproduction:         0.8 seconds, 30.6%
Fitness Testing:      1.7 seconds, 65.3%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 650
Test mean error for best: 0.65000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 7                   | Program output: 7                  
Correct output: -83                 | Program output: -83                
Correct output: -5                  | Program output: -5                 
Correct output: -24                 | Program output: -24                
Correct output: -77                 | Program output: -77                
Correct output: -63                 | Program output: 1                  
Correct output: -29                 | Program output: -29                
Correct output: 4                   | Program output: 100                
Correct output: -16                 | Program output: -16                
Correct output: 0                   | Program output: 50                 
Correct output: 72                  | Program output: 72                 
Correct output: 53                  | Program output: 53                 
Correct output: 73                  | Program output: 73                 
Correct output: 99                  | Program output: 99                 
Correct output: 76                  | Program output: 76                 
Correct output: 3                   | Program output: 61                 
Correct output: 40                  | Program output: 67                 
Correct output: 7                   | Program output: 99                 
Correct output: 1                   | Program output: 96                 
Correct output: 3                   | Program output: 77                 
Correct output: 9                   | Program output: 9                  
Correct output: 36                  | Program output: 36                 
Correct output: 32                  | Program output: 87                 
Correct output: 5                   | Program output: 5                  
Correct output: 17                  | Program output: 17                 
Correct output: 29                  | Program output: 29                 
Correct output: 17                  | Program output: 96                 
Correct output: 2                   | Program output: 2                  
Correct output: 37                  | Program output: 37                 
Correct output: 11                  | Program output: 60                 
Correct output: 20                  | Program output: 66                 
Correct output: 14                  | Program output: 17                 
Correct output: 46                  | Program output: 92                 
Correct output: 27                  | Program output: 45                 
Correct output: 37                  | Program output: 79                 
Correct output: -33                 | Program output: 90                 
Correct output: -50                 | Program output: 77                 
Correct output: -68                 | Program output: -65                
Correct output: -93                 | Program output: 64                 
Correct output: -89                 | Program output: -75                
Correct output: -69                 | Program output: 27                 
Correct output: -54                 | Program output: -54                
Correct output: -95                 | Program output: -72                
Correct output: -97                 | Program output: -97                
Correct output: -95                 | Program output: -36                
Correct output: -100                | Program output: -62                
Correct output: -73                 | Program output: 74                 
Correct output: -38                 | Program output: -38                
Correct output: -93                 | Program output: -18                
Correct output: -64                 | Program output: -64                
Correct output: -59                 | Program output: 9                  
Correct output: 46                  | Program output: 69                 
Correct output: -87                 | Program output: -87                
Correct output: -74                 | Program output: -29                
Correct output: -94                 | Program output: 64                 
Correct output: -76                 | Program output: -49                
Correct output: 13                  | Program output: 13                 
Correct output: -69                 | Program output: -1                 
Correct output: -80                 | Program output: -37                
Correct output: -59                 | Program output: -45                
Correct output: -34                 | Program output: 46                 
Correct output: -79                 | Program output: -79                
Correct output: -94                 | Program output: -72                
Correct output: -90                 | Program output: -90                
Correct output: -74                 | Program output: -74                
Correct output: -89                 | Program output: -89                
Correct output: -86                 | Program output: -86                
Correct output: -75                 | Program output: 97                 
Correct output: -45                 | Program output: 62                 
Correct output: -87                 | Program output: -14                
Correct output: -96                 | Program output: -96                
Correct output: -49                 | Program output: 73                 
Correct output: -96                 | Program output: 92                 
Correct output: -23                 | Program output: 83                 
Correct output: -59                 | Program output: 22                 
Correct output: -65                 | Program output: 29                 
Correct output: -22                 | Program output: -22                
Correct output: 30                  | Program output: 30                 
Correct output: -77                 | Program output: -77                
Correct output: -70                 | Program output: -54                
Correct output: -85                 | Program output: -85                
Correct output: -10                 | Program output: 73                 
Correct output: -54                 | Program output: -54                
Correct output: -97                 | Program output: -97                
Correct output: -86                 | Program output: 11                 
Correct output: -4                  | Program output: 34                 
Correct output: -87                 | Program output: -87                
Correct output: -5                  | Program output: 99                 
Correct output: -32                 | Program output: 50                 
Correct output: -45                 | Program output: 100                
Correct output: -73                 | Program output: -73                
Correct output: 46                  | Program output: 76                 
Correct output: -13                 | Program output: 47                 
Correct output: -92                 | Program output: -92                
Correct output: -76                 | Program output: -59                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_shove} {:close 0, :instruction in4} {:close 1, :instruction integer_dup} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*range} {:close 3, :instruction exec_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction print_integer} {:close 0, :instruction integer_add} {:close 1, :instruction integer_max} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_y} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_add} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_gt} {:close 0, :instruction -50} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*count})
Lexicase best program: (exec_do*while (boolean_yankdup) exec_y_when_autoconstructing (integer_gte integer_shove in4 integer_dup) boolean_dup_items boolean_rot boolean_yankdup exec_s (exec_y_when_autoconstructing (in1 print_integer exec_do*range (exec_eq))) (boolean_stackdepth print_integer) (integer_add integer_max) integer_max boolean_rot integer_swap integer_fromboolean integer_gte boolean_empty boolean_dup_times exec_y () integer_add boolean_dup_times exec_s (exec_k_when_autoconstructing (exec_dup_items integer_add) (integer_min integer_dup_times boolean_eq) boolean_yankdup exec_do*count () integer_gt -50 boolean_dup_items exec_yankdup in2 integer_dec exec_shove (boolean_yankdup) integer_fromboolean integer_lte exec_yank exec_y_when_autoconstructing (boolean_frominteger exec_do*count ())) () ())
Lexicase best errors: [0 0 0 1 1 0 1 0 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 71
Percent parens: 0.254
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_shove} {:close 0, :instruction in4} {:close 1, :instruction integer_dup} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*range} {:close 3, :instruction exec_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction print_integer} {:close 0, :instruction integer_add} {:close 1, :instruction integer_max} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_y} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_add} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_gt} {:close 0, :instruction -50} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*count})
Zero cases best program: (exec_do*while (boolean_yankdup) exec_y_when_autoconstructing (integer_gte integer_shove in4 integer_dup) boolean_dup_items boolean_rot boolean_yankdup exec_s (exec_y_when_autoconstructing (in1 print_integer exec_do*range (exec_eq))) (boolean_stackdepth print_integer) (integer_add integer_max) integer_max boolean_rot integer_swap integer_fromboolean integer_gte boolean_empty boolean_dup_times exec_y () integer_add boolean_dup_times exec_s (exec_k_when_autoconstructing (exec_dup_items integer_add) (integer_min integer_dup_times boolean_eq) boolean_yankdup exec_do*count () integer_gt -50 boolean_dup_items exec_yankdup in2 integer_dec exec_shove (boolean_yankdup) integer_fromboolean integer_lte exec_yank exec_y_when_autoconstructing (boolean_frominteger exec_do*count ())) () ())
Zero cases best errors: [0 0 0 1 1 0 1 0 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 71
Percent parens: 0.254
--- Lexicase Population Statistics ---
Count of elite individuals by case: (649 408 487 110 110 408 50 403 50 50)
Population mean number of elite cases: 2.72
Count of perfect (error zero) individuals by case: (649 408 487 110 110 408 50 403 50 50)
Population mean number of perfect (error zero) cases: 2.72
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_stackdepth} {:close 1, :instruction tag_exec_227} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_shove} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_empty} {:close 0, :instruction in1} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_pop} {:close 0, :instruction in4} {:close 0, :instruction exec_shove} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dec} {:close 1, :instruction exec_do*times} {:close 1, :instruction print_newline} {:close 0, :instruction print_exec} {:close 0, :instruction in1} {:close 2, :instruction integer_gte} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_eq} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_mod} {:close 0, :instruction in1} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gte} {:close 2, :instruction tag_boolean_50} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_gt})
Best program: (boolean_stackdepth tag_exec_227 () boolean_eq boolean_yankdup integer_div boolean_shove in1 print_integer exec_flush integer_empty in1 integer_pop integer_empty integer_fromboolean exec_pop (in4 exec_shove (print_exec (boolean_xor boolean_dup_times) boolean_pop boolean_frominteger) boolean_or exec_flush integer_stackdepth boolean_swap integer_gte) boolean_rot integer_empty boolean_xor exec_swap (integer_add integer_lt integer_mod boolean_pop exec_if (boolean_dup_items) (integer_lte integer_mult boolean_rot) exec_do*times (exec_k (boolean_frominteger integer_pop print_integer integer_dec) (exec_do*times () print_newline) print_exec (in1 integer_gte)) exec_y_when_autoconstructing () exec_eq) (exec_dup () integer_mod in1 boolean_pop integer_gte tag_boolean_50) boolean_or exec_y_when_autoconstructing (boolean_dup integer_gt))
Errors: [0 0 0 1 1 0 1 0 1 1]
Total: 5
Mean: 0.5
Genome size: 63
Size: 80
Percent parens: 0.213
--- Population Statistics ---
Average total errors in population: 7.275
Median total errors in population: 7
Error averages by case: (0.351 0.592 0.513 0.89 0.89 0.592 0.95 0.597 0.95 0.95)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 57.259
Average program size in population (points): 77.26
Average percent parens in population: 0.245
Minimum age in population: 1.0
Maximum age in population: 1.0
Average age in population: 1.0
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 5
Genome diversity (% unique genomes):	 0.994
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.994
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.119
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 825342
--- Timings ---
Current time: 1559594108154 milliseconds
Total Time:           4.5 seconds
Initialization:       0.1 seconds,  2.4%
Reproduction:         2.0 seconds, 42.9%
Fitness Testing:      2.1 seconds, 46.6%
Report:               0.4 seconds,  8.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 650
Test mean error for best: 0.65000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 7                   | Program output: 7                  
Correct output: -83                 | Program output: -83                
Correct output: -5                  | Program output: -5                 
Correct output: -24                 | Program output: -24                
Correct output: -77                 | Program output: -77                
Correct output: -63                 | Program output: 1                  
Correct output: -29                 | Program output: -29                
Correct output: 4                   | Program output: 100                
Correct output: -16                 | Program output: -16                
Correct output: 0                   | Program output: 50                 
Correct output: 72                  | Program output: 72                 
Correct output: 53                  | Program output: 53                 
Correct output: 73                  | Program output: 73                 
Correct output: 99                  | Program output: 99                 
Correct output: 76                  | Program output: 76                 
Correct output: 3                   | Program output: 61                 
Correct output: 40                  | Program output: 67                 
Correct output: 7                   | Program output: 99                 
Correct output: 1                   | Program output: 96                 
Correct output: 3                   | Program output: 77                 
Correct output: 9                   | Program output: 9                  
Correct output: 36                  | Program output: 36                 
Correct output: 32                  | Program output: 87                 
Correct output: 5                   | Program output: 5                  
Correct output: 17                  | Program output: 17                 
Correct output: 29                  | Program output: 29                 
Correct output: 17                  | Program output: 96                 
Correct output: 2                   | Program output: 2                  
Correct output: 37                  | Program output: 37                 
Correct output: 11                  | Program output: 60                 
Correct output: 20                  | Program output: 66                 
Correct output: 14                  | Program output: 17                 
Correct output: 46                  | Program output: 92                 
Correct output: 27                  | Program output: 45                 
Correct output: 37                  | Program output: 79                 
Correct output: -33                 | Program output: 90                 
Correct output: -50                 | Program output: 77                 
Correct output: -68                 | Program output: -65                
Correct output: -93                 | Program output: 64                 
Correct output: -89                 | Program output: -75                
Correct output: -69                 | Program output: 27                 
Correct output: -54                 | Program output: -54                
Correct output: -95                 | Program output: -72                
Correct output: -97                 | Program output: -97                
Correct output: -95                 | Program output: -36                
Correct output: -100                | Program output: -62                
Correct output: -73                 | Program output: 74                 
Correct output: -38                 | Program output: -38                
Correct output: -93                 | Program output: -18                
Correct output: -64                 | Program output: -64                
Correct output: -59                 | Program output: 9                  
Correct output: 46                  | Program output: 69                 
Correct output: -87                 | Program output: -87                
Correct output: -74                 | Program output: -29                
Correct output: -94                 | Program output: 64                 
Correct output: -76                 | Program output: -49                
Correct output: 13                  | Program output: 13                 
Correct output: -69                 | Program output: -1                 
Correct output: -80                 | Program output: -37                
Correct output: -59                 | Program output: -45                
Correct output: -34                 | Program output: 46                 
Correct output: -79                 | Program output: -79                
Correct output: -94                 | Program output: -72                
Correct output: -90                 | Program output: -90                
Correct output: -74                 | Program output: -74                
Correct output: -89                 | Program output: -89                
Correct output: -86                 | Program output: -86                
Correct output: -75                 | Program output: 97                 
Correct output: -45                 | Program output: 62                 
Correct output: -87                 | Program output: -14                
Correct output: -96                 | Program output: -96                
Correct output: -49                 | Program output: 73                 
Correct output: -96                 | Program output: 92                 
Correct output: -23                 | Program output: 83                 
Correct output: -59                 | Program output: 22                 
Correct output: -65                 | Program output: 29                 
Correct output: -22                 | Program output: -22                
Correct output: 30                  | Program output: 30                 
Correct output: -77                 | Program output: -77                
Correct output: -70                 | Program output: -54                
Correct output: -85                 | Program output: -85                
Correct output: -10                 | Program output: 73                 
Correct output: -54                 | Program output: -54                
Correct output: -97                 | Program output: -97                
Correct output: -86                 | Program output: 11                 
Correct output: -4                  | Program output: 34                 
Correct output: -87                 | Program output: -87                
Correct output: -5                  | Program output: 99                 
Correct output: -32                 | Program output: 50                 
Correct output: -45                 | Program output: 100                
Correct output: -73                 | Program output: -73                
Correct output: 46                  | Program output: 76                 
Correct output: -13                 | Program output: 47                 
Correct output: -92                 | Program output: -92                
Correct output: -76                 | Program output: -59                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_pop} {:close 0, :instruction in4} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*range} {:close 3, :instruction exec_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction print_integer} {:close 0, :instruction integer_add} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_max} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_gte} {:close 0, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_y} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_add} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_lt} {:close 0, :instruction -50} {:close 0, :instruction exec_do*range} {:close 0, :instruction in2} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*count})
Lexicase best program: (exec_do*while (boolean_yankdup) exec_y_when_autoconstructing (integer_gte integer_pop in4 boolean_dup_items) boolean_rot boolean_yankdup exec_y_when_autoconstructing (in1 print_integer exec_do*range (exec_eq)) boolean_stackdepth print_integer integer_add exec_rot () (integer_max integer_max) (boolean_rot integer_swap exec_yank integer_fromboolean integer_shove) integer_gte in1 boolean_empty boolean_dup_times integer_dup_items exec_empty exec_y () boolean_invert_first_then_and boolean_dup_times exec_s (exec_dup_items integer_add) (boolean_eq) (boolean_yankdup integer_gt integer_lt) -50 exec_do*range (in2 integer_dec boolean_yankdup) exec_flush integer_fromboolean integer_lte exec_y_when_autoconstructing (boolean_frominteger integer_max integer_min exec_do*count ()))
Lexicase best errors: [0 1 0 1 0 1 0 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 69
Percent parens: 0.217
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_pop} {:close 0, :instruction in4} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*range} {:close 3, :instruction exec_eq} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction print_integer} {:close 0, :instruction integer_add} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_max} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_gte} {:close 0, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_y} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_add} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_lt} {:close 0, :instruction -50} {:close 0, :instruction exec_do*range} {:close 0, :instruction in2} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*count})
Zero cases best program: (exec_do*while (boolean_yankdup) exec_y_when_autoconstructing (integer_gte integer_pop in4 boolean_dup_items) boolean_rot boolean_yankdup exec_y_when_autoconstructing (in1 print_integer exec_do*range (exec_eq)) boolean_stackdepth print_integer integer_add exec_rot () (integer_max integer_max) (boolean_rot integer_swap exec_yank integer_fromboolean integer_shove) integer_gte in1 boolean_empty boolean_dup_times integer_dup_items exec_empty exec_y () boolean_invert_first_then_and boolean_dup_times exec_s (exec_dup_items integer_add) (boolean_eq) (boolean_yankdup integer_gt integer_lt) -50 exec_do*range (in2 integer_dec boolean_yankdup) exec_flush integer_fromboolean integer_lte exec_y_when_autoconstructing (boolean_frominteger integer_max integer_min exec_do*count ()))
Zero cases best errors: [0 1 0 1 0 1 0 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 69
Percent parens: 0.217
--- Lexicase Population Statistics ---
Count of elite individuals by case: (617 179 289 147 617 178 288 283 288 7)
Population mean number of elite cases: 2.89
Count of perfect (error zero) individuals by case: (617 179 289 147 617 178 288 283 288 7)
Population mean number of perfect (error zero) cases: 2.89
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_dup_times} {:close 1, :instruction tag_exec_227} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_shove} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_empty} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction exec_shove} {:close 0, :instruction print_exec} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_newline} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dec} {:close 0, :instruction print_exec} {:close 0, :instruction in1} {:close 2, :instruction integer_gte} {:close 1, :instruction exec_eq} {:close 0, :instruction in1} {:close 0, :instruction integer_gte} {:close 2, :instruction tag_boolean_50} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_gt})
Best program: (integer_dup_times tag_exec_227 () boolean_eq boolean_yankdup integer_div boolean_shove in1 print_integer exec_flush integer_empty exec_stackdepth in1 integer_pop integer_empty print_boolean boolean_invert_second_then_and in4 exec_shove (print_exec (boolean_dup_times) boolean_pop boolean_or exec_flush boolean_swap integer_gte) boolean_rot integer_empty exec_swap (integer_add integer_lt integer_dup_items integer_mod boolean_frominteger boolean_pop exec_if (boolean_dup_items) (exec_yankdup integer_max integer_mult boolean_rot) exec_do*times (exec_k (boolean_frominteger integer_pop boolean_shove print_newline print_integer integer_dec) (print_exec (in1 integer_gte)) exec_eq) in1 integer_gte tag_boolean_50) () exec_do*times (boolean_dup integer_gt))
Errors: [0 1 0 1 0 1 0 0 0 1]
Total: 4
Mean: 0.4
Genome size: 58
Size: 71
Percent parens: 0.183
--- Population Statistics ---
Average total errors in population: 7.107
Median total errors in population: 7
Error averages by case: (0.383 0.821 0.711 0.853 0.383 0.822 0.712 0.717 0.712 0.993)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.278
Average program size in population (points): 67.28
Average percent parens in population: 0.237
Minimum age in population: 2.0
Maximum age in population: 2.0
Average age in population: 2.0
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 4
Genome diversity (% unique genomes):	 0.985
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.985
Total error diversity:				 0.007
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.121
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1231938
--- Timings ---
Current time: 1559594110108 milliseconds
Total Time:           6.6 seconds
Initialization:       0.1 seconds,  1.6%
Reproduction:         3.2 seconds, 49.3%
Fitness Testing:      2.6 seconds, 39.0%
Report:               0.7 seconds, 10.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 650
Test mean error for best: 0.65000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 7                   | Program output: 7                  
Correct output: -83                 | Program output: -83                
Correct output: -5                  | Program output: -5                 
Correct output: -24                 | Program output: -24                
Correct output: -77                 | Program output: -77                
Correct output: -63                 | Program output: 1                  
Correct output: -29                 | Program output: -29                
Correct output: 4                   | Program output: 100                
Correct output: -16                 | Program output: -16                
Correct output: 0                   | Program output: 50                 
Correct output: 72                  | Program output: 72                 
Correct output: 53                  | Program output: 53                 
Correct output: 73                  | Program output: 73                 
Correct output: 99                  | Program output: 99                 
Correct output: 76                  | Program output: 76                 
Correct output: 3                   | Program output: 61                 
Correct output: 40                  | Program output: 67                 
Correct output: 7                   | Program output: 99                 
Correct output: 1                   | Program output: 96                 
Correct output: 3                   | Program output: 77                 
Correct output: 9                   | Program output: 9                  
Correct output: 36                  | Program output: 36                 
Correct output: 32                  | Program output: 87                 
Correct output: 5                   | Program output: 5                  
Correct output: 17                  | Program output: 17                 
Correct output: 29                  | Program output: 29                 
Correct output: 17                  | Program output: 96                 
Correct output: 2                   | Program output: 2                  
Correct output: 37                  | Program output: 37                 
Correct output: 11                  | Program output: 60                 
Correct output: 20                  | Program output: 66                 
Correct output: 14                  | Program output: 17                 
Correct output: 46                  | Program output: 92                 
Correct output: 27                  | Program output: 45                 
Correct output: 37                  | Program output: 79                 
Correct output: -33                 | Program output: 90                 
Correct output: -50                 | Program output: 77                 
Correct output: -68                 | Program output: -65                
Correct output: -93                 | Program output: 64                 
Correct output: -89                 | Program output: -75                
Correct output: -69                 | Program output: 27                 
Correct output: -54                 | Program output: -54                
Correct output: -95                 | Program output: -72                
Correct output: -97                 | Program output: -97                
Correct output: -95                 | Program output: -36                
Correct output: -100                | Program output: -62                
Correct output: -73                 | Program output: 74                 
Correct output: -38                 | Program output: -38                
Correct output: -93                 | Program output: -18                
Correct output: -64                 | Program output: -64                
Correct output: -59                 | Program output: 9                  
Correct output: 46                  | Program output: 69                 
Correct output: -87                 | Program output: -87                
Correct output: -74                 | Program output: -29                
Correct output: -94                 | Program output: 64                 
Correct output: -76                 | Program output: -49                
Correct output: 13                  | Program output: 13                 
Correct output: -69                 | Program output: -1                 
Correct output: -80                 | Program output: -37                
Correct output: -59                 | Program output: -45                
Correct output: -34                 | Program output: 46                 
Correct output: -79                 | Program output: -79                
Correct output: -94                 | Program output: -72                
Correct output: -90                 | Program output: -90                
Correct output: -74                 | Program output: -74                
Correct output: -89                 | Program output: -89                
Correct output: -86                 | Program output: -86                
Correct output: -75                 | Program output: 97                 
Correct output: -45                 | Program output: 62                 
Correct output: -87                 | Program output: -14                
Correct output: -96                 | Program output: -96                
Correct output: -49                 | Program output: 73                 
Correct output: -96                 | Program output: 92                 
Correct output: -23                 | Program output: 83                 
Correct output: -59                 | Program output: 22                 
Correct output: -65                 | Program output: 29                 
Correct output: -22                 | Program output: -22                
Correct output: 30                  | Program output: 30                 
Correct output: -77                 | Program output: -77                
Correct output: -70                 | Program output: -54                
Correct output: -85                 | Program output: -85                
Correct output: -10                 | Program output: 73                 
Correct output: -54                 | Program output: -54                
Correct output: -97                 | Program output: -97                
Correct output: -86                 | Program output: 11                 
Correct output: -4                  | Program output: 34                 
Correct output: -87                 | Program output: -87                
Correct output: -5                  | Program output: 99                 
Correct output: -32                 | Program output: 50                 
Correct output: -45                 | Program output: 100                
Correct output: -73                 | Program output: -73                
Correct output: 46                  | Program output: 76                 
Correct output: -13                 | Program output: 47                 
Correct output: -92                 | Program output: -92                
Correct output: -76                 | Program output: -59                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_shove} {:close 0, :instruction in4} {:close 1, :instruction integer_dup} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 3, :instruction exec_eq} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_rot} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction integer_min} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_do*count})
Lexicase best program: (exec_do*while (exec_y_when_autoconstructing (integer_gte exec_do*count (integer_shove in4 integer_dup) boolean_dup_items) boolean_rot integer_min integer_lt boolean_yankdup exec_s (exec_y_when_autoconstructing (boolean_dup exec_s_when_autoconstructing (in1 print_integer boolean_shove exec_do*range (exec_eq)) () (exec_noop integer_flush exec_rot () (integer_max) (boolean_rot integer_fromboolean exec_s_when_autoconstructing (integer_gte) (boolean_empty boolean_dup_times integer_lt integer_div exec_yank integer_dup_items integer_add boolean_dup_times exec_s (boolean_yank exec_while () boolean_eq) (integer_div boolean_yankdup integer_gt boolean_dup_items exec_yankdup in2 integer_dec exec_shove (boolean_yankdup) print_boolean boolean_shove exec_flush integer_fromboolean integer_lte exec_y_when_autoconstructing (boolean_frominteger integer_max integer_min integer_lte) exec_do*count ()) ()) ())))) () ()))
Lexicase best errors: [0 1 1 0 0 1 0 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 86
Percent parens: 0.291
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_shove} {:close 0, :instruction in4} {:close 1, :instruction integer_dup} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 3, :instruction exec_eq} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_rot} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction integer_min} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_do*count})
Zero cases best program: (exec_do*while (exec_y_when_autoconstructing (integer_gte exec_do*count (integer_shove in4 integer_dup) boolean_dup_items) boolean_rot integer_min integer_lt boolean_yankdup exec_s (exec_y_when_autoconstructing (boolean_dup exec_s_when_autoconstructing (in1 print_integer boolean_shove exec_do*range (exec_eq)) () (exec_noop integer_flush exec_rot () (integer_max) (boolean_rot integer_fromboolean exec_s_when_autoconstructing (integer_gte) (boolean_empty boolean_dup_times integer_lt integer_div exec_yank integer_dup_items integer_add boolean_dup_times exec_s (boolean_yank exec_while () boolean_eq) (integer_div boolean_yankdup integer_gt boolean_dup_items exec_yankdup in2 integer_dec exec_shove (boolean_yankdup) print_boolean boolean_shove exec_flush integer_fromboolean integer_lte exec_y_when_autoconstructing (boolean_frominteger integer_max integer_min integer_lte) exec_do*count ()) ()) ())))) () ()))
Zero cases best errors: [0 1 1 0 0 1 0 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 86
Percent parens: 0.291
--- Lexicase Population Statistics ---
Count of elite individuals by case: (317 141 140 325 317 141 465 96 158 325)
Population mean number of elite cases: 2.42
Count of perfect (error zero) individuals by case: (317 141 140 325 317 141 465 96 158 325)
Population mean number of perfect (error zero) cases: 2.42
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*while} {:close 1, :instruction integer_gt} {:close 0, :instruction in1} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*range} {:close 3, :instruction exec_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_add} {:close 0, :instruction exec_k} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_max} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_y} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 1, :instruction in1} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_add} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction -59} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*count})
Best program: (exec_do*while (integer_gt) in1 exec_y_when_autoconstructing (integer_gte integer_shove integer_add integer_dup) integer_lte boolean_rot boolean_yankdup exec_s (exec_y_when_autoconstructing (in1 print_integer integer_shove exec_do*range (exec_eq))) (boolean_stackdepth exec_do*times (print_integer) exec_k_when_autoconstructing (integer_add exec_k (exec_rot () (integer_sub integer_max) (integer_max boolean_rot exec_pop () exec_yank integer_fromboolean integer_gte) integer_lte boolean_empty boolean_dup_times integer_dup_items exec_y () exec_dup (boolean_dup_times boolean_frominteger exec_pop () boolean_rot in1) boolean_not exec_dup_items integer_add) (integer_min boolean_eq) boolean_yankdup exec_s_when_autoconstructing (integer_gt boolean_dup_items exec_yankdup in2 integer_dec exec_shove (boolean_yankdup) exec_flush boolean_invert_first_then_and integer_fromboolean -59 integer_lte boolean_frominteger integer_max exec_do*count ()) () ()) ()) ())
Errors: [0 1 1 0 0 1 0 1 1 0]
Total: 5
Mean: 0.5
Genome size: 66
Size: 91
Percent parens: 0.275
--- Population Statistics ---
Average total errors in population: 7.575
Median total errors in population: 9
Error averages by case: (0.683 0.859 0.86 0.675 0.683 0.859 0.535 0.904 0.842 0.675)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 52.178
Average program size in population (points): 70.266
Average percent parens in population: 0.246
Minimum age in population: 3.0
Maximum age in population: 3.0
Average age in population: 3.0
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 3
Genome diversity (% unique genomes):	 0.996
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.996
Total error diversity:				 0.006
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.123
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 1637439
--- Timings ---
Current time: 1559594112061 milliseconds
Total Time:           8.4 seconds
Initialization:       0.1 seconds,  1.3%
Reproduction:         4.4 seconds, 52.7%
Fitness Testing:      3.0 seconds, 35.7%
Report:               0.9 seconds, 10.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 650
Test mean error for best: 0.65000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 7                   | Program output: 7                  
Correct output: -83                 | Program output: -83                
Correct output: -5                  | Program output: -5                 
Correct output: -24                 | Program output: -24                
Correct output: -77                 | Program output: -77                
Correct output: -63                 | Program output: 1                  
Correct output: -29                 | Program output: -29                
Correct output: 4                   | Program output: 100                
Correct output: -16                 | Program output: -16                
Correct output: 0                   | Program output: 50                 
Correct output: 72                  | Program output: 72                 
Correct output: 53                  | Program output: 53                 
Correct output: 73                  | Program output: 73                 
Correct output: 99                  | Program output: 99                 
Correct output: 76                  | Program output: 76                 
Correct output: 3                   | Program output: 61                 
Correct output: 40                  | Program output: 67                 
Correct output: 7                   | Program output: 99                 
Correct output: 1                   | Program output: 96                 
Correct output: 3                   | Program output: 77                 
Correct output: 9                   | Program output: 9                  
Correct output: 36                  | Program output: 36                 
Correct output: 32                  | Program output: 87                 
Correct output: 5                   | Program output: 5                  
Correct output: 17                  | Program output: 17                 
Correct output: 29                  | Program output: 29                 
Correct output: 17                  | Program output: 96                 
Correct output: 2                   | Program output: 2                  
Correct output: 37                  | Program output: 37                 
Correct output: 11                  | Program output: 60                 
Correct output: 20                  | Program output: 66                 
Correct output: 14                  | Program output: 17                 
Correct output: 46                  | Program output: 92                 
Correct output: 27                  | Program output: 45                 
Correct output: 37                  | Program output: 79                 
Correct output: -33                 | Program output: 90                 
Correct output: -50                 | Program output: 77                 
Correct output: -68                 | Program output: -65                
Correct output: -93                 | Program output: 64                 
Correct output: -89                 | Program output: -75                
Correct output: -69                 | Program output: 27                 
Correct output: -54                 | Program output: -54                
Correct output: -95                 | Program output: -72                
Correct output: -97                 | Program output: -97                
Correct output: -95                 | Program output: -36                
Correct output: -100                | Program output: -62                
Correct output: -73                 | Program output: 74                 
Correct output: -38                 | Program output: -38                
Correct output: -93                 | Program output: -18                
Correct output: -64                 | Program output: -64                
Correct output: -59                 | Program output: 9                  
Correct output: 46                  | Program output: 69                 
Correct output: -87                 | Program output: -87                
Correct output: -74                 | Program output: -29                
Correct output: -94                 | Program output: 64                 
Correct output: -76                 | Program output: -49                
Correct output: 13                  | Program output: 13                 
Correct output: -69                 | Program output: -1                 
Correct output: -80                 | Program output: -37                
Correct output: -59                 | Program output: -45                
Correct output: -34                 | Program output: 46                 
Correct output: -79                 | Program output: -79                
Correct output: -94                 | Program output: -72                
Correct output: -90                 | Program output: -90                
Correct output: -74                 | Program output: -74                
Correct output: -89                 | Program output: -89                
Correct output: -86                 | Program output: -86                
Correct output: -75                 | Program output: 97                 
Correct output: -45                 | Program output: 62                 
Correct output: -87                 | Program output: -14                
Correct output: -96                 | Program output: -96                
Correct output: -49                 | Program output: 73                 
Correct output: -96                 | Program output: 92                 
Correct output: -23                 | Program output: 83                 
Correct output: -59                 | Program output: 22                 
Correct output: -65                 | Program output: 29                 
Correct output: -22                 | Program output: -22                
Correct output: 30                  | Program output: 30                 
Correct output: -77                 | Program output: -77                
Correct output: -70                 | Program output: -54                
Correct output: -85                 | Program output: -85                
Correct output: -10                 | Program output: 73                 
Correct output: -54                 | Program output: -54                
Correct output: -97                 | Program output: -97                
Correct output: -86                 | Program output: 11                 
Correct output: -4                  | Program output: 34                 
Correct output: -87                 | Program output: -87                
Correct output: -5                  | Program output: 99                 
Correct output: -32                 | Program output: 50                 
Correct output: -45                 | Program output: 100                
Correct output: -73                 | Program output: -73                
Correct output: 46                  | Program output: 76                 
Correct output: -13                 | Program output: 47                 
Correct output: -92                 | Program output: -92                
Correct output: -76                 | Program output: -59                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_shove} {:close 0, :instruction in4} {:close 1, :instruction integer_dup} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*range} {:close 3, :instruction exec_eq} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_add} {:close 1, :instruction integer_max} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_y} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction -50} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_shove} {:close 0, :instruction print_newline} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction integer_min} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*count})
Lexicase best program: (exec_do*while (boolean_yankdup) exec_y_when_autoconstructing (integer_gte integer_shove in4 integer_dup) boolean_dup_items boolean_rot boolean_yankdup exec_s (in1 print_integer exec_do*range (exec_eq)) () (exec_k (boolean_stackdepth print_integer) (boolean_pop boolean_or integer_add integer_max) exec_empty boolean_rot integer_swap exec_yank integer_fromboolean boolean_empty exec_k_when_autoconstructing (boolean_dup_times exec_y () exec_s (exec_k_when_autoconstructing (exec_dup_items integer_min boolean_yankdup exec_pop (integer_gt exec_if (-50 exec_swap (integer_dec exec_yankdup in3 in2 integer_dec exec_shove (print_newline exec_s_when_autoconstructing (exec_flush integer_fromboolean integer_lte exec_y_when_autoconstructing (boolean_frominteger integer_max integer_min integer_flush exec_do*count ())) () ())) ()) ())) ()) () ()) ()))
Lexicase best errors: [0 1 1 0 0 0 1 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 86
Percent parens: 0.326
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_shove} {:close 0, :instruction in4} {:close 1, :instruction integer_dup} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*range} {:close 3, :instruction exec_eq} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_add} {:close 1, :instruction integer_max} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_y} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction -50} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_shove} {:close 0, :instruction print_newline} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction integer_min} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*count})
Zero cases best program: (exec_do*while (boolean_yankdup) exec_y_when_autoconstructing (integer_gte integer_shove in4 integer_dup) boolean_dup_items boolean_rot boolean_yankdup exec_s (in1 print_integer exec_do*range (exec_eq)) () (exec_k (boolean_stackdepth print_integer) (boolean_pop boolean_or integer_add integer_max) exec_empty boolean_rot integer_swap exec_yank integer_fromboolean boolean_empty exec_k_when_autoconstructing (boolean_dup_times exec_y () exec_s (exec_k_when_autoconstructing (exec_dup_items integer_min boolean_yankdup exec_pop (integer_gt exec_if (-50 exec_swap (integer_dec exec_yankdup in3 in2 integer_dec exec_shove (print_newline exec_s_when_autoconstructing (exec_flush integer_fromboolean integer_lte exec_y_when_autoconstructing (boolean_frominteger integer_max integer_min integer_flush exec_do*count ())) () ())) ()) ())) ()) () ()) ()))
Zero cases best errors: [0 1 1 0 0 0 1 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 86
Percent parens: 0.326
--- Lexicase Population Statistics ---
Count of elite individuals by case: (416 257 7 669 322 322 254 587 668 85)
Population mean number of elite cases: 3.59
Count of perfect (error zero) individuals by case: (416 257 7 669 322 322 254 587 668 85)
Population mean number of perfect (error zero) cases: 3.59
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_dup_times} {:close 1, :instruction tag_exec_227} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_shove} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_empty} {:close 0, :instruction in1} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_empty} {:close 0, :instruction in4} {:close 0, :instruction exec_shove} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_or} {:close 0, :instruction 45} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_dec} {:close 1, :instruction print_newline} {:close 0, :instruction print_exec} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_mod} {:close 0, :instruction print_boolean} {:close 0, :instruction in1} {:close 0, :instruction integer_gte} {:close 2, :instruction tag_boolean_50} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_gt})
Best program: (integer_dup_times tag_exec_227 () boolean_pop integer_pop boolean_eq boolean_yankdup integer_div boolean_shove in1 print_integer exec_flush integer_empty in1 integer_pop integer_empty in4 exec_shove (print_exec (boolean_xor boolean_dup_times) boolean_pop boolean_frominteger) boolean_or 45 exec_flush boolean_swap integer_gte integer_empty boolean_xor exec_swap (integer_lt integer_mod boolean_pop boolean_dup_items) (exec_swap (integer_shove boolean_rot) (exec_y_when_autoconstructing (exec_do*times (exec_k (exec_y (boolean_frominteger integer_pop boolean_shove print_integer boolean_flush integer_dec) print_newline) (print_exec (exec_eq) integer_mod print_boolean in1 integer_gte tag_boolean_50)) boolean_or) boolean_dup integer_gt)))
Errors: [0 1 1 0 0 0 1 0 0 1]
Total: 4
Mean: 0.4
Genome size: 58
Size: 72
Percent parens: 0.194
--- Population Statistics ---
Average total errors in population: 6.413
Median total errors in population: 5
Error averages by case: (0.584 0.743 0.993 0.331 0.678 0.678 0.746 0.413 0.332 0.915)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 44.149
Average program size in population (points): 58.476
Average percent parens in population: 0.235
Minimum age in population: 4.0
Maximum age in population: 4.0
Average age in population: 4.0
Median age in population: 4.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 3
Genome diversity (% unique genomes):	 0.995
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.995
Total error diversity:				 0.006
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.116
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 2087384
--- Timings ---
Current time: 1559594114202 milliseconds
Total Time:          10.7 seconds
Initialization:       0.1 seconds,  1.0%
Reproduction:         5.9 seconds, 55.5%
Fitness Testing:      3.5 seconds, 32.4%
Report:               1.2 seconds, 11.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 650
Test mean error for best: 0.65000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 7                   | Program output: 7                  
Correct output: -83                 | Program output: -83                
Correct output: -5                  | Program output: -5                 
Correct output: -24                 | Program output: -24                
Correct output: -77                 | Program output: -77                
Correct output: -63                 | Program output: 1                  
Correct output: -29                 | Program output: -29                
Correct output: 4                   | Program output: 100                
Correct output: -16                 | Program output: -16                
Correct output: 0                   | Program output: 50                 
Correct output: 72                  | Program output: 72                 
Correct output: 53                  | Program output: 53                 
Correct output: 73                  | Program output: 73                 
Correct output: 99                  | Program output: 99                 
Correct output: 76                  | Program output: 76                 
Correct output: 3                   | Program output: 61                 
Correct output: 40                  | Program output: 67                 
Correct output: 7                   | Program output: 99                 
Correct output: 1                   | Program output: 96                 
Correct output: 3                   | Program output: 77                 
Correct output: 9                   | Program output: 9                  
Correct output: 36                  | Program output: 36                 
Correct output: 32                  | Program output: 87                 
Correct output: 5                   | Program output: 5                  
Correct output: 17                  | Program output: 17                 
Correct output: 29                  | Program output: 29                 
Correct output: 17                  | Program output: 96                 
Correct output: 2                   | Program output: 2                  
Correct output: 37                  | Program output: 37                 
Correct output: 11                  | Program output: 60                 
Correct output: 20                  | Program output: 66                 
Correct output: 14                  | Program output: 17                 
Correct output: 46                  | Program output: 92                 
Correct output: 27                  | Program output: 45                 
Correct output: 37                  | Program output: 79                 
Correct output: -33                 | Program output: 90                 
Correct output: -50                 | Program output: 77                 
Correct output: -68                 | Program output: -65                
Correct output: -93                 | Program output: 64                 
Correct output: -89                 | Program output: -75                
Correct output: -69                 | Program output: 27                 
Correct output: -54                 | Program output: -54                
Correct output: -95                 | Program output: -72                
Correct output: -97                 | Program output: -97                
Correct output: -95                 | Program output: -36                
Correct output: -100                | Program output: -62                
Correct output: -73                 | Program output: 74                 
Correct output: -38                 | Program output: -38                
Correct output: -93                 | Program output: -18                
Correct output: -64                 | Program output: -64                
Correct output: -59                 | Program output: 9                  
Correct output: 46                  | Program output: 69                 
Correct output: -87                 | Program output: -87                
Correct output: -74                 | Program output: -29                
Correct output: -94                 | Program output: 64                 
Correct output: -76                 | Program output: -49                
Correct output: 13                  | Program output: 13                 
Correct output: -69                 | Program output: -1                 
Correct output: -80                 | Program output: -37                
Correct output: -59                 | Program output: -45                
Correct output: -34                 | Program output: 46                 
Correct output: -79                 | Program output: -79                
Correct output: -94                 | Program output: -72                
Correct output: -90                 | Program output: -90                
Correct output: -74                 | Program output: -74                
Correct output: -89                 | Program output: -89                
Correct output: -86                 | Program output: -86                
Correct output: -75                 | Program output: 97                 
Correct output: -45                 | Program output: 62                 
Correct output: -87                 | Program output: -14                
Correct output: -96                 | Program output: -96                
Correct output: -49                 | Program output: 73                 
Correct output: -96                 | Program output: 92                 
Correct output: -23                 | Program output: 83                 
Correct output: -59                 | Program output: 22                 
Correct output: -65                 | Program output: 29                 
Correct output: -22                 | Program output: -22                
Correct output: 30                  | Program output: 30                 
Correct output: -77                 | Program output: -77                
Correct output: -70                 | Program output: -54                
Correct output: -85                 | Program output: -85                
Correct output: -10                 | Program output: 73                 
Correct output: -54                 | Program output: -54                
Correct output: -97                 | Program output: -97                
Correct output: -86                 | Program output: 11                 
Correct output: -4                  | Program output: 34                 
Correct output: -87                 | Program output: -87                
Correct output: -5                  | Program output: 99                 
Correct output: -32                 | Program output: 50                 
Correct output: -45                 | Program output: 100                
Correct output: -73                 | Program output: -73                
Correct output: 46                  | Program output: 76                 
Correct output: -13                 | Program output: 47                 
Correct output: -92                 | Program output: -92                
Correct output: -76                 | Program output: -59                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_swap} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_sub} {:close 1, :instruction tag_exec_227} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_shove} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_shove} {:close 0, :instruction print_exec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_div} {:close 0, :instruction in3} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_dec} {:close 1, :instruction print_newline} {:close 0, :instruction print_exec} {:close 0, :instruction in1} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_or})
Lexicase best program: (integer_swap integer_eq integer_dup_times integer_sub tag_exec_227 () boolean_eq boolean_dup boolean_shove in1 print_integer integer_mod integer_yankdup exec_yank integer_empty integer_inc in1 boolean_flush integer_empty exec_flush in4 exec_do*while (exec_shove (print_exec (integer_stackdepth boolean_dup_times) boolean_pop boolean_frominteger) boolean_or boolean_swap integer_gte) boolean_rot integer_empty exec_empty boolean_xor exec_swap (integer_add integer_lt integer_fromboolean) (integer_mod boolean_pop integer_div in3 boolean_dup_items) integer_max exec_yankdup integer_stackdepth integer_mult exec_yankdup boolean_frominteger integer_pop exec_do*times () integer_dec print_newline print_exec (in1 exec_eq) integer_mod boolean_eq boolean_eq integer_gte boolean_or)
Lexicase best errors: [0 1 0 1 1 1 0 1 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 70
Percent parens: 0.129
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_swap} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_sub} {:close 1, :instruction tag_exec_227} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_shove} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_shove} {:close 0, :instruction print_exec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_div} {:close 0, :instruction in3} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_dec} {:close 1, :instruction print_newline} {:close 0, :instruction print_exec} {:close 0, :instruction in1} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_or})
Zero cases best program: (integer_swap integer_eq integer_dup_times integer_sub tag_exec_227 () boolean_eq boolean_dup boolean_shove in1 print_integer integer_mod integer_yankdup exec_yank integer_empty integer_inc in1 boolean_flush integer_empty exec_flush in4 exec_do*while (exec_shove (print_exec (integer_stackdepth boolean_dup_times) boolean_pop boolean_frominteger) boolean_or boolean_swap integer_gte) boolean_rot integer_empty exec_empty boolean_xor exec_swap (integer_add integer_lt integer_fromboolean) (integer_mod boolean_pop integer_div in3 boolean_dup_items) integer_max exec_yankdup integer_stackdepth integer_mult exec_yankdup boolean_frominteger integer_pop exec_do*times () integer_dec print_newline print_exec (in1 exec_eq) integer_mod boolean_eq boolean_eq integer_gte boolean_or)
Zero cases best errors: [0 1 0 1 1 1 0 1 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 70
Percent parens: 0.129
--- Lexicase Population Statistics ---
Count of elite individuals by case: (264 90 260 186 109 90 262 191 261 90)
Population mean number of elite cases: 1.80
Count of perfect (error zero) individuals by case: (264 90 260 186 109 90 262 191 261 90)
Population mean number of perfect (error zero) cases: 1.80
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_pop} {:close 1, :instruction in1} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 2, :instruction exec_y} {:close 1, :instruction in2} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_k} {:close 0, :instruction integer_inc} {:close 1, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_while} {:close 0, :instruction tag_exec_168} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_dup} {:close 1, :instruction exec_when} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_yank} {:close 2, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_y} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_rot} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_gte} {:close 1, :instruction tag_exec_967} {:close 0, :instruction in1} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dec})
Best program: (integer_mult print_integer exec_eq boolean_swap boolean_invert_first_then_and integer_mod exec_do*times (boolean_pop in1) integer_dup_times boolean_pop exec_y_when_autoconstructing (boolean_not exec_k_when_autoconstructing (boolean_flush) (print_integer exec_k_when_autoconstructing (integer_shove exec_do*range (boolean_yankdup integer_lte boolean_frominteger) exec_if (print_integer exec_y ()) (in2) integer_yank) (exec_k () (integer_inc print_integer) integer_gte boolean_pop integer_sub exec_while (tag_exec_168 (exec_flush integer_dup) exec_when () integer_yankdup boolean_empty integer_fromboolean integer_inc boolean_yank integer_inc integer_mult) exec_yank integer_stackdepth)) boolean_invert_first_then_and exec_y () exec_s (integer_mult exec_k_when_autoconstructing () (integer_fromboolean exec_swap (exec_do*while (exec_s_when_autoconstructing () (exec_when (in2 boolean_yank boolean_rot print_boolean) boolean_pop boolean_invert_first_then_and exec_yankdup boolean_swap) (integer_dup_times boolean_yankdup boolean_swap integer_lt integer_gte tag_exec_967 () in1 exec_do*count () integer_dup_items integer_yankdup) boolean_not integer_div boolean_xor exec_when (exec_k (boolean_yankdup integer_dup print_boolean boolean_dup_times exec_yank boolean_rot exec_swap () (integer_eq integer_dec)) ()))) ())) () ()))
Errors: [0 1 0 1 1 1 0 1 0 1]
Total: 6
Mean: 0.6
Genome size: 89
Size: 125
Percent parens: 0.288
--- Population Statistics ---
Average total errors in population: 8.197
Median total errors in population: 8
Error averages by case: (0.736 0.91 0.74 0.814 0.891 0.91 0.738 0.809 0.739 0.91)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 44.452
Average program size in population (points): 59.228
Average percent parens in population: 0.239
Minimum age in population: 5.0
Maximum age in population: 5.0
Average age in population: 5.0
Median age in population: 5.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.997
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.997
Total error diversity:				 0.005
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.121
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 2516798
--- Timings ---
Current time: 1559594116409 milliseconds
Total Time:          12.5 seconds
Initialization:       0.1 seconds,  0.9%
Reproduction:         7.1 seconds, 57.0%
Fitness Testing:      3.9 seconds, 31.0%
Report:               1.4 seconds, 11.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 650
Test mean error for best: 0.65000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 7                   | Program output: 7                  
Correct output: -83                 | Program output: -83                
Correct output: -5                  | Program output: -5                 
Correct output: -24                 | Program output: -24                
Correct output: -77                 | Program output: -77                
Correct output: -63                 | Program output: 1                  
Correct output: -29                 | Program output: -29                
Correct output: 4                   | Program output: 100                
Correct output: -16                 | Program output: -16                
Correct output: 0                   | Program output: 50                 
Correct output: 72                  | Program output: 72                 
Correct output: 53                  | Program output: 53                 
Correct output: 73                  | Program output: 73                 
Correct output: 99                  | Program output: 99                 
Correct output: 76                  | Program output: 76                 
Correct output: 3                   | Program output: 61                 
Correct output: 40                  | Program output: 67                 
Correct output: 7                   | Program output: 99                 
Correct output: 1                   | Program output: 96                 
Correct output: 3                   | Program output: 77                 
Correct output: 9                   | Program output: 9                  
Correct output: 36                  | Program output: 36                 
Correct output: 32                  | Program output: 87                 
Correct output: 5                   | Program output: 5                  
Correct output: 17                  | Program output: 17                 
Correct output: 29                  | Program output: 29                 
Correct output: 17                  | Program output: 96                 
Correct output: 2                   | Program output: 2                  
Correct output: 37                  | Program output: 37                 
Correct output: 11                  | Program output: 60                 
Correct output: 20                  | Program output: 66                 
Correct output: 14                  | Program output: 17                 
Correct output: 46                  | Program output: 92                 
Correct output: 27                  | Program output: 45                 
Correct output: 37                  | Program output: 79                 
Correct output: -33                 | Program output: 90                 
Correct output: -50                 | Program output: 77                 
Correct output: -68                 | Program output: -65                
Correct output: -93                 | Program output: 64                 
Correct output: -89                 | Program output: -75                
Correct output: -69                 | Program output: 27                 
Correct output: -54                 | Program output: -54                
Correct output: -95                 | Program output: -72                
Correct output: -97                 | Program output: -97                
Correct output: -95                 | Program output: -36                
Correct output: -100                | Program output: -62                
Correct output: -73                 | Program output: 74                 
Correct output: -38                 | Program output: -38                
Correct output: -93                 | Program output: -18                
Correct output: -64                 | Program output: -64                
Correct output: -59                 | Program output: 9                  
Correct output: 46                  | Program output: 69                 
Correct output: -87                 | Program output: -87                
Correct output: -74                 | Program output: -29                
Correct output: -94                 | Program output: 64                 
Correct output: -76                 | Program output: -49                
Correct output: 13                  | Program output: 13                 
Correct output: -69                 | Program output: -1                 
Correct output: -80                 | Program output: -37                
Correct output: -59                 | Program output: -45                
Correct output: -34                 | Program output: 46                 
Correct output: -79                 | Program output: -79                
Correct output: -94                 | Program output: -72                
Correct output: -90                 | Program output: -90                
Correct output: -74                 | Program output: -74                
Correct output: -89                 | Program output: -89                
Correct output: -86                 | Program output: -86                
Correct output: -75                 | Program output: 97                 
Correct output: -45                 | Program output: 62                 
Correct output: -87                 | Program output: -14                
Correct output: -96                 | Program output: -96                
Correct output: -49                 | Program output: 73                 
Correct output: -96                 | Program output: 92                 
Correct output: -23                 | Program output: 83                 
Correct output: -59                 | Program output: 22                 
Correct output: -65                 | Program output: 29                 
Correct output: -22                 | Program output: -22                
Correct output: 30                  | Program output: 30                 
Correct output: -77                 | Program output: -77                
Correct output: -70                 | Program output: -54                
Correct output: -85                 | Program output: -85                
Correct output: -10                 | Program output: 73                 
Correct output: -54                 | Program output: -54                
Correct output: -97                 | Program output: -97                
Correct output: -86                 | Program output: 11                 
Correct output: -4                  | Program output: 34                 
Correct output: -87                 | Program output: -87                
Correct output: -5                  | Program output: 99                 
Correct output: -32                 | Program output: 50                 
Correct output: -45                 | Program output: 100                
Correct output: -73                 | Program output: -73                
Correct output: 46                  | Program output: 76                 
Correct output: -13                 | Program output: 47                 
Correct output: -92                 | Program output: -92                
Correct output: -76                 | Program output: -59                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction tag_exec_227} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_empty} {:close 0, :instruction in1} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_flush} {:close 0, :instruction in4} {:close 0, :instruction exec_swap} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_rot} {:close 0, :instruction print_exec} {:close 0, :instruction exec_k} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_dec} {:close 1, :instruction exec_do*times} {:close 1, :instruction print_newline} {:close 0, :instruction print_exec} {:close 0, :instruction in1} {:close 0, :instruction boolean_stackdepth} {:close 2, :instruction integer_gte} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_eq} {:close 1, :instruction exec_eq} {:close 1, :instruction exec_dup_items} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_gte} {:close 0, :instruction in1} {:close 2, :instruction tag_boolean_50} {:close 1, :instruction exec_empty} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_do*range})
Lexicase best program: (tag_exec_227 () exec_swap (boolean_yankdup boolean_shove) (integer_rot boolean_invert_second_then_and in1) boolean_invert_first_then_and print_integer exec_y_when_autoconstructing (exec_flush) integer_empty in1 integer_pop integer_lte integer_flush in4 exec_swap (print_exec (boolean_xor boolean_pop integer_add boolean_or exec_flush boolean_swap boolean_shove boolean_rot boolean_invert_first_then_and) boolean_not) (integer_empty boolean_xor exec_swap (boolean_yankdup exec_noop integer_lt exec_pop (integer_mod boolean_pop exec_if (exec_shove (boolean_dup_items) integer_max integer_dec integer_stackdepth integer_mult exec_flush boolean_rot) (print_exec (exec_k (integer_pop integer_dec) (exec_do*times () print_newline) print_exec (in1 boolean_stackdepth integer_gte)) integer_yankdup exec_eq) exec_eq) exec_dup_items) (boolean_stackdepth) integer_mod integer_gte in1 tag_boolean_50) exec_empty in2 exec_k () (boolean_dup integer_gt) exec_do*range ())
Lexicase best errors: [0 0 0 0 0 1 0 1 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 94
Percent parens: 0.234
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction tag_exec_227} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_empty} {:close 0, :instruction in1} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_flush} {:close 0, :instruction in4} {:close 0, :instruction exec_swap} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_rot} {:close 0, :instruction print_exec} {:close 0, :instruction exec_k} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_dec} {:close 1, :instruction exec_do*times} {:close 1, :instruction print_newline} {:close 0, :instruction print_exec} {:close 0, :instruction in1} {:close 0, :instruction boolean_stackdepth} {:close 2, :instruction integer_gte} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_eq} {:close 1, :instruction exec_eq} {:close 1, :instruction exec_dup_items} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_gte} {:close 0, :instruction in1} {:close 2, :instruction tag_boolean_50} {:close 1, :instruction exec_empty} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_do*range})
Zero cases best program: (tag_exec_227 () exec_swap (boolean_yankdup boolean_shove) (integer_rot boolean_invert_second_then_and in1) boolean_invert_first_then_and print_integer exec_y_when_autoconstructing (exec_flush) integer_empty in1 integer_pop integer_lte integer_flush in4 exec_swap (print_exec (boolean_xor boolean_pop integer_add boolean_or exec_flush boolean_swap boolean_shove boolean_rot boolean_invert_first_then_and) boolean_not) (integer_empty boolean_xor exec_swap (boolean_yankdup exec_noop integer_lt exec_pop (integer_mod boolean_pop exec_if (exec_shove (boolean_dup_items) integer_max integer_dec integer_stackdepth integer_mult exec_flush boolean_rot) (print_exec (exec_k (integer_pop integer_dec) (exec_do*times () print_newline) print_exec (in1 boolean_stackdepth integer_gte)) integer_yankdup exec_eq) exec_eq) exec_dup_items) (boolean_stackdepth) integer_mod integer_gte in1 tag_boolean_50) exec_empty in2 exec_k () (boolean_dup integer_gt) exec_do*range ())
Zero cases best errors: [0 0 0 0 0 1 0 1 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 94
Percent parens: 0.234
--- Lexicase Population Statistics ---
Count of elite individuals by case: (279 279 502 279 276 61 279 225 279 279)
Population mean number of elite cases: 2.74
Count of perfect (error zero) individuals by case: (279 279 502 279 276 61 279 225 279 279)
Population mean number of perfect (error zero) cases: 2.74
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*while} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gte} {:close 2, :instruction exec_yankdup} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_boolean_625} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*range} {:close 3, :instruction exec_eq} {:close 0, :instruction integer_add} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_div} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction tag_integer_122} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_add} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*count})
Best program: (exec_do*while (exec_s_when_autoconstructing () (boolean_yankdup) (exec_y_when_autoconstructing (integer_dup_times integer_gte exec_yankdup)) integer_shove tag_boolean_625 integer_yank boolean_dup_items) boolean_rot boolean_yankdup boolean_dup_times in1 print_integer integer_eq exec_do*range (exec_eq) integer_add exec_rot () (boolean_rot exec_yank boolean_invert_second_then_and boolean_not) (integer_fromboolean exec_swap (exec_noop integer_gte) (boolean_empty boolean_dup_times integer_dup_items integer_div) exec_s_when_autoconstructing (tag_integer_122 boolean_invert_second_then_and integer_add integer_max exec_s (exec_k_when_autoconstructing (integer_min boolean_yankdup integer_gt exec_yank) (integer_dec exec_shove (boolean_yankdup) boolean_swap) integer_lte boolean_yank) (exec_y_when_autoconstructing (boolean_stackdepth boolean_frominteger exec_s (integer_max exec_do*count ()) () ())) ()) () ()))
Errors: [0 0 0 0 0 1 0 1 0 0]
Total: 2
Mean: 0.2
Genome size: 56
Size: 82
Percent parens: 0.317
--- Population Statistics ---
Average total errors in population: 7.262
Median total errors in population: 8
Error averages by case: (0.721 0.721 0.498 0.721 0.724 0.939 0.721 0.775 0.721 0.721)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.535
Average program size in population (points): 52.051
Average percent parens in population: 0.231
Minimum age in population: 6.0
Maximum age in population: 6.0
Average age in population: 6.0
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 3
Genome diversity (% unique genomes):	 0.996
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.996
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.111
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 2887455
--- Timings ---
Current time: 1559594118715 milliseconds
Total Time:          15.0 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         8.7 seconds, 57.8%
Fitness Testing:      4.2 seconds, 28.3%
Report:               2.0 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 424
Test mean error for best: 0.42400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 7                   | Program output: 7                  
Correct output: -83                 | Program output: -83                
Correct output: -5                  | Program output: -5                 
Correct output: -24                 | Program output: -24                
Correct output: -77                 | Program output: -77                
Correct output: -63                 | Program output: -63                
Correct output: -29                 | Program output: -29                
Correct output: 4                   | Program output: 4                  
Correct output: -16                 | Program output: -16                
Correct output: 0                   | Program output: 0                  
Correct output: 72                  | Program output: 72                 
Correct output: 53                  | Program output: 53                 
Correct output: 73                  | Program output: 73                 
Correct output: 99                  | Program output: 99                 
Correct output: 76                  | Program output: 76                 
Correct output: 3                   | Program output: 61                 
Correct output: 40                  | Program output: 67                 
Correct output: 7                   | Program output: 7                  
Correct output: 1                   | Program output: 2                  
Correct output: 3                   | Program output: 73                 
Correct output: 9                   | Program output: 9                  
Correct output: 36                  | Program output: 36                 
Correct output: 32                  | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: 17                  | Program output: 17                 
Correct output: 29                  | Program output: 29                 
Correct output: 17                  | Program output: 32                 
Correct output: 2                   | Program output: 2                  
Correct output: 37                  | Program output: 37                 
Correct output: 11                  | Program output: 60                 
Correct output: 20                  | Program output: 62                 
Correct output: 14                  | Program output: 17                 
Correct output: 46                  | Program output: 52                 
Correct output: 27                  | Program output: 27                 
Correct output: 37                  | Program output: 37                 
Correct output: -33                 | Program output: 13                 
Correct output: -50                 | Program output: -50                
Correct output: -68                 | Program output: -65                
Correct output: -93                 | Program output: -93                
Correct output: -89                 | Program output: -89                
Correct output: -69                 | Program output: -53                
Correct output: -54                 | Program output: -54                
Correct output: -95                 | Program output: -95                
Correct output: -97                 | Program output: -97                
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: -62                
Correct output: -73                 | Program output: 17                 
Correct output: -38                 | Program output: -38                
Correct output: -93                 | Program output: -93                
Correct output: -64                 | Program output: -64                
Correct output: -59                 | Program output: 9                  
Correct output: 46                  | Program output: 61                 
Correct output: -87                 | Program output: -87                
Correct output: -74                 | Program output: -29                
Correct output: -94                 | Program output: 64                 
Correct output: -76                 | Program output: -76                
Correct output: 13                  | Program output: 13                 
Correct output: -69                 | Program output: -1                 
Correct output: -80                 | Program output: -37                
Correct output: -59                 | Program output: -59                
Correct output: -34                 | Program output: 46                 
Correct output: -79                 | Program output: -79                
Correct output: -94                 | Program output: -94                
Correct output: -90                 | Program output: -90                
Correct output: -74                 | Program output: -74                
Correct output: -89                 | Program output: -89                
Correct output: -86                 | Program output: -86                
Correct output: -75                 | Program output: 14                 
Correct output: -45                 | Program output: -44                
Correct output: -87                 | Program output: -14                
Correct output: -96                 | Program output: -96                
Correct output: -49                 | Program output: -12                
Correct output: -96                 | Program output: 17                 
Correct output: -23                 | Program output: -23                
Correct output: -59                 | Program output: -59                
Correct output: -65                 | Program output: 29                 
Correct output: -22                 | Program output: -22                
Correct output: 30                  | Program output: 30                 
Correct output: -77                 | Program output: -77                
Correct output: -70                 | Program output: -54                
Correct output: -85                 | Program output: -85                
Correct output: -10                 | Program output: 73                 
Correct output: -54                 | Program output: -54                
Correct output: -97                 | Program output: -97                
Correct output: -86                 | Program output: -86                
Correct output: -4                  | Program output: 3                  
Correct output: -87                 | Program output: -87                
Correct output: -5                  | Program output: 15                 
Correct output: -32                 | Program output: -32                
Correct output: -45                 | Program output: -45                
Correct output: -73                 | Program output: -73                
Correct output: 46                  | Program output: 46                 
Correct output: -13                 | Program output: 47                 
Correct output: -92                 | Program output: -92                
Correct output: -76                 | Program output: -59                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_mult} {:close 2, :instruction in1} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_lte} {:close 2, :instruction integer_mod} {:close 0, :instruction tagged_575} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in2} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_yank} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction tag_exec_711})
Lexicase best program: (boolean_and print_integer exec_yank boolean_dup integer_mult in1 exec_swap () (boolean_yankdup integer_lte) integer_mod tagged_575 exec_stackdepth boolean_yank boolean_flush boolean_swap boolean_yankdup in2 integer_swap integer_rot in2 boolean_dup_times boolean_shove boolean_invert_second_then_and integer_min boolean_invert_first_then_and exec_y_when_autoconstructing () exec_k (boolean_invert_first_then_and print_integer boolean_frominteger boolean_invert_first_then_and) (boolean_yank) boolean_not boolean_empty integer_gte boolean_empty boolean_xor exec_do*while () exec_y_when_autoconstructing (integer_max tag_exec_711 ()))
Lexicase best errors: [0 0 0 0 0 1 1 1 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 50
Percent parens: 0.180
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_mult} {:close 2, :instruction in1} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_lte} {:close 2, :instruction integer_mod} {:close 0, :instruction tagged_575} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in2} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_yank} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction tag_exec_711})
Zero cases best program: (boolean_and print_integer exec_yank boolean_dup integer_mult in1 exec_swap () (boolean_yankdup integer_lte) integer_mod tagged_575 exec_stackdepth boolean_yank boolean_flush boolean_swap boolean_yankdup in2 integer_swap integer_rot in2 boolean_dup_times boolean_shove boolean_invert_second_then_and integer_min boolean_invert_first_then_and exec_y_when_autoconstructing () exec_k (boolean_invert_first_then_and print_integer boolean_frominteger boolean_invert_first_then_and) (boolean_yank) boolean_not boolean_empty integer_gte boolean_empty boolean_xor exec_do*while () exec_y_when_autoconstructing (integer_max tag_exec_711 ()))
Zero cases best errors: [0 0 0 0 0 1 1 1 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 50
Percent parens: 0.180
--- Lexicase Population Statistics ---
Count of elite individuals by case: (713 7 8 7 561 80 67 67 80 708)
Population mean number of elite cases: 2.30
Count of perfect (error zero) individuals by case: (713 7 8 7 561 80 67 67 80 708)
Population mean number of perfect (error zero) cases: 2.30
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_mult} {:close 2, :instruction in1} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_lte} {:close 2, :instruction integer_mod} {:close 0, :instruction tagged_575} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in2} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_yank} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction tag_exec_711})
Best program: (boolean_and print_integer exec_yank boolean_dup integer_mult in1 exec_swap () (boolean_yankdup integer_lte) integer_mod tagged_575 exec_stackdepth boolean_yank boolean_flush boolean_swap boolean_yankdup in2 integer_swap integer_rot in2 boolean_dup_times boolean_shove boolean_invert_second_then_and integer_min boolean_invert_first_then_and exec_y_when_autoconstructing () exec_k (boolean_invert_first_then_and print_integer boolean_frominteger boolean_invert_first_then_and) (boolean_yank) boolean_not boolean_empty integer_gte boolean_empty boolean_xor exec_do*while () exec_y_when_autoconstructing (integer_max tag_exec_711 ()))
Errors: [0 0 0 0 0 1 1 1 1 0]
Total: 4
Mean: 0.4
Genome size: 41
Size: 50
Percent parens: 0.180
--- Population Statistics ---
Average total errors in population: 7.702
Median total errors in population: 7
Error averages by case: (0.287 0.993 0.992 0.993 0.439 0.92 0.933 0.933 0.92 0.292)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 56.659
Average program size in population (points): 75.168
Average percent parens in population: 0.239
Minimum age in population: 7.0
Maximum age in population: 7.0
Average age in population: 7.0
Median age in population: 7.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.999
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.999
Total error diversity:				 0.007
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.12
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 3211330
--- Timings ---
Current time: 1559594120561 milliseconds
Total Time:          16.9 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         9.8 seconds, 58.1%
Fitness Testing:      4.6 seconds, 27.1%
Report:               2.4 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 432
Test mean error for best: 0.43200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 7                   | Program output: 46                 
Correct output: -83                 | Program output: -83                
Correct output: -5                  | Program output: 78                 
Correct output: -24                 | Program output: -24                
Correct output: -77                 | Program output: -77                
Correct output: -63                 | Program output: -63                
Correct output: -29                 | Program output: -29                
Correct output: 4                   | Program output: 4                  
Correct output: -16                 | Program output: -16                
Correct output: 0                   | Program output: 0                  
Correct output: 72                  | Program output: 72                 
Correct output: 53                  | Program output: 53                 
Correct output: 73                  | Program output: 73                 
Correct output: 99                  | Program output: 99                 
Correct output: 76                  | Program output: 76                 
Correct output: 3                   | Program output: 3                  
Correct output: 40                  | Program output: 40                 
Correct output: 7                   | Program output: 7                  
Correct output: 1                   | Program output: 1                  
Correct output: 3                   | Program output: 3                  
Correct output: 9                   | Program output: 44                 
Correct output: 36                  | Program output: 56                 
Correct output: 32                  | Program output: 32                 
Correct output: 5                   | Program output: 43                 
Correct output: 17                  | Program output: 27                 
Correct output: 29                  | Program output: 38                 
Correct output: 17                  | Program output: 32                 
Correct output: 2                   | Program output: 67                 
Correct output: 37                  | Program output: 75                 
Correct output: 11                  | Program output: 11                 
Correct output: 20                  | Program output: 62                 
Correct output: 14                  | Program output: 45                 
Correct output: 46                  | Program output: 52                 
Correct output: 27                  | Program output: 27                 
Correct output: 37                  | Program output: 37                 
Correct output: -33                 | Program output: -33                
Correct output: -50                 | Program output: -50                
Correct output: -68                 | Program output: 48                 
Correct output: -93                 | Program output: -93                
Correct output: -89                 | Program output: -89                
Correct output: -69                 | Program output: -69                
Correct output: -54                 | Program output: 17                 
Correct output: -95                 | Program output: -95                
Correct output: -97                 | Program output: -10                
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: 56                 
Correct output: -73                 | Program output: -73                
Correct output: -38                 | Program output: -20                
Correct output: -93                 | Program output: -93                
Correct output: -64                 | Program output: 42                 
Correct output: -59                 | Program output: -59                
Correct output: 46                  | Program output: 61                 
Correct output: -87                 | Program output: -20                
Correct output: -74                 | Program output: -74                
Correct output: -94                 | Program output: 53                 
Correct output: -76                 | Program output: -76                
Correct output: 13                  | Program output: 0N                 
Correct output: -69                 | Program output: -69                
Correct output: -80                 | Program output: 34                 
Correct output: -59                 | Program output: -59                
Correct output: -34                 | Program output: 72                 
Correct output: -79                 | Program output: -68                
Correct output: -94                 | Program output: -94                
Correct output: -90                 | Program output: -80                
Correct output: -74                 | Program output: 42                 
Correct output: -89                 | Program output: -69                
Correct output: -86                 | Program output: -34                
Correct output: -75                 | Program output: 8                  
Correct output: -45                 | Program output: -44                
Correct output: -87                 | Program output: -87                
Correct output: -96                 | Program output: -73                
Correct output: -49                 | Program output: -12                
Correct output: -96                 | Program output: 17                 
Correct output: -23                 | Program output: -23                
Correct output: -59                 | Program output: -59                
Correct output: -65                 | Program output: 31                 
Correct output: -22                 | Program output: -18                
Correct output: 30                  | Program output: 30                 
Correct output: -77                 | Program output: -75                
Correct output: -70                 | Program output: -70                
Correct output: -85                 | Program output: -42                
Correct output: -10                 | Program output: 76                 
Correct output: -54                 | Program output: 61                 
Correct output: -97                 | Program output: -39                
Correct output: -86                 | Program output: -86                
Correct output: -4                  | Program output: -4                 
Correct output: -87                 | Program output: -63                
Correct output: -5                  | Program output: 15                 
Correct output: -32                 | Program output: -32                
Correct output: -45                 | Program output: -45                
Correct output: -73                 | Program output: 49                 
Correct output: 46                  | Program output: 46                 
Correct output: -13                 | Program output: 52                 
Correct output: -92                 | Program output: -86                
Correct output: -76                 | Program output: -76                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_lte} {:close 2, :instruction integer_mod} {:close 0, :instruction tagged_575} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction in3} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in2} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_yank} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction tag_exec_711})
Lexicase best program: (boolean_not boolean_and print_integer exec_yank boolean_dup integer_mult exec_swap () (boolean_yankdup integer_lte) integer_mod tagged_575 exec_stackdepth boolean_yank boolean_flush in3 boolean_swap boolean_yankdup in2 integer_swap in2 boolean_dup_times boolean_shove boolean_invert_second_then_and integer_min boolean_invert_first_then_and exec_y_when_autoconstructing () exec_k (boolean_invert_first_then_and print_integer boolean_frominteger boolean_invert_first_then_and) (boolean_yank) boolean_not boolean_empty integer_gte boolean_empty boolean_xor exec_do*while () exec_y_when_autoconstructing (integer_max tag_exec_711 ()))
Lexicase best errors: [0 1 0 0 0 1 0 1 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 50
Percent parens: 0.180
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_lte} {:close 2, :instruction integer_mod} {:close 0, :instruction tagged_575} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction in3} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in2} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_yank} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction tag_exec_711})
Zero cases best program: (boolean_not boolean_and print_integer exec_yank boolean_dup integer_mult exec_swap () (boolean_yankdup integer_lte) integer_mod tagged_575 exec_stackdepth boolean_yank boolean_flush in3 boolean_swap boolean_yankdup in2 integer_swap in2 boolean_dup_times boolean_shove boolean_invert_second_then_and integer_min boolean_invert_first_then_and exec_y_when_autoconstructing () exec_k (boolean_invert_first_then_and print_integer boolean_frominteger boolean_invert_first_then_and) (boolean_yank) boolean_not boolean_empty integer_gte boolean_empty boolean_xor exec_do*while () exec_y_when_autoconstructing (integer_max tag_exec_711 ()))
Zero cases best errors: [0 1 0 0 0 1 0 1 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 50
Percent parens: 0.180
--- Lexicase Population Statistics ---
Count of elite individuals by case: (178 158 208 180 219 155 178 154 225 281)
Population mean number of elite cases: 1.94
Count of perfect (error zero) individuals by case: (178 158 208 180 219 155 178 154 225 281)
Population mean number of perfect (error zero) cases: 1.94
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_mult} {:close 2, :instruction in1} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_yank} {:close 2, :instruction integer_mod} {:close 0, :instruction tagged_575} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in2} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction in2} {:close 1, :instruction in4} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_yank} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction tag_exec_711})
Best program: (exec_do*times (boolean_and print_integer exec_yank) boolean_dup integer_mult in1 exec_swap () (boolean_yankdup integer_lte) exec_yank integer_mod tagged_575 exec_stackdepth boolean_yank boolean_flush boolean_swap integer_max boolean_yankdup in2 integer_swap integer_div integer_rot in2 in4 boolean_rot boolean_dup_times boolean_shove integer_min boolean_not boolean_invert_first_then_and exec_y_when_autoconstructing () exec_k (boolean_invert_first_then_and print_integer boolean_frominteger boolean_invert_first_then_and) (boolean_yank) boolean_not boolean_empty integer_gte boolean_empty exec_do*while () exec_y_when_autoconstructing (integer_max tag_exec_711 ()))
Errors: [1 0 0 1 0 0 1 0 0 1]
Total: 4
Mean: 0.4
Genome size: 46
Size: 56
Percent parens: 0.179
--- Population Statistics ---
Average total errors in population: 8.064
Median total errors in population: 7
Error averages by case: (0.822 0.842 0.792 0.82 0.781 0.845 0.822 0.846 0.775 0.719)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 41.665
Average program size in population (points): 54.203
Average percent parens in population: 0.219
Minimum age in population: 8.0
Maximum age in population: 8.0
Average age in population: 8.0
Median age in population: 8.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.999
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.999
Total error diversity:				 0.006
Error (vector) diversity:			 0.021
Behavioral diversity:				 0.209
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 3738956
--- Timings ---
Current time: 1559594122508 milliseconds
Total Time:          18.8 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:        10.9 seconds, 58.0%
Fitness Testing:      5.1 seconds, 26.9%
Report:               2.7 seconds, 14.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 214
Test mean error for best: 0.21400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 7                   | Program output: 7                  
Correct output: -83                 | Program output: -83                
Correct output: -5                  | Program output: -5                 
Correct output: -24                 | Program output: -24                
Correct output: -77                 | Program output: -77                
Correct output: -63                 | Program output: -63                
Correct output: -29                 | Program output: -29                
Correct output: 4                   | Program output: 4                  
Correct output: -16                 | Program output: -16                
Correct output: 0                   | Program output: 0                  
Correct output: 72                  | Program output: 72                 
Correct output: 53                  | Program output: 53                 
Correct output: 73                  | Program output: 73                 
Correct output: 99                  | Program output: 99                 
Correct output: 76                  | Program output: 76                 
Correct output: 3                   | Program output: 3                  
Correct output: 40                  | Program output: 40                 
Correct output: 7                   | Program output: 7                  
Correct output: 1                   | Program output: 1                  
Correct output: 3                   | Program output: 3                  
Correct output: 9                   | Program output: 9                  
Correct output: 36                  | Program output: 36                 
Correct output: 32                  | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: 17                  | Program output: 17                 
Correct output: 29                  | Program output: 29                 
Correct output: 17                  | Program output: 32                 
Correct output: 2                   | Program output: 2                  
Correct output: 37                  | Program output: 37                 
Correct output: 11                  | Program output: 11                 
Correct output: 20                  | Program output: 62                 
Correct output: 14                  | Program output: 17                 
Correct output: 46                  | Program output: 52                 
Correct output: 27                  | Program output: 27                 
Correct output: 37                  | Program output: 37                 
Correct output: -33                 | Program output: -33                
Correct output: -50                 | Program output: -50                
Correct output: -68                 | Program output: -65                
Correct output: -93                 | Program output: -93                
Correct output: -89                 | Program output: -89                
Correct output: -69                 | Program output: -69                
Correct output: -54                 | Program output: -54                
Correct output: -95                 | Program output: -95                
Correct output: -97                 | Program output: -97                
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: -62                
Correct output: -73                 | Program output: -73                
Correct output: -38                 | Program output: -38                
Correct output: -93                 | Program output: -93                
Correct output: -64                 | Program output: -64                
Correct output: -59                 | Program output: -59                
Correct output: 46                  | Program output: 61                 
Correct output: -87                 | Program output: -87                
Correct output: -74                 | Program output: -74                
Correct output: -94                 | Program output: 53                 
Correct output: -76                 | Program output: -76                
Correct output: 13                  | Program output: 13                 
Correct output: -69                 | Program output: -69                
Correct output: -80                 | Program output: -37                
Correct output: -59                 | Program output: -59                
Correct output: -34                 | Program output: 46                 
Correct output: -79                 | Program output: -79                
Correct output: -94                 | Program output: -94                
Correct output: -90                 | Program output: -90                
Correct output: -74                 | Program output: -74                
Correct output: -89                 | Program output: -89                
Correct output: -86                 | Program output: -86                
Correct output: -75                 | Program output: 8                  
Correct output: -45                 | Program output: -44                
Correct output: -87                 | Program output: -87                
Correct output: -96                 | Program output: -96                
Correct output: -49                 | Program output: -12                
Correct output: -96                 | Program output: 17                 
Correct output: -23                 | Program output: -23                
Correct output: -59                 | Program output: -59                
Correct output: -65                 | Program output: 29                 
Correct output: -22                 | Program output: -22                
Correct output: 30                  | Program output: 30                 
Correct output: -77                 | Program output: -77                
Correct output: -70                 | Program output: -70                
Correct output: -85                 | Program output: -85                
Correct output: -10                 | Program output: 73                 
Correct output: -54                 | Program output: -54                
Correct output: -97                 | Program output: -97                
Correct output: -86                 | Program output: -86                
Correct output: -4                  | Program output: -4                 
Correct output: -87                 | Program output: -87                
Correct output: -5                  | Program output: 15                 
Correct output: -32                 | Program output: -32                
Correct output: -45                 | Program output: -45                
Correct output: -73                 | Program output: -73                
Correct output: 46                  | Program output: 46                 
Correct output: -13                 | Program output: 47                 
Correct output: -92                 | Program output: -92                
Correct output: -76                 | Program output: -76                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_mult} {:close 2, :instruction in1} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction integer_mod} {:close 0, :instruction tagged_575} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_swap} {:close 1, :instruction in2} {:close 0, :instruction integer_rot} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_shove} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_yank} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tag_exec_711})
Lexicase best program: (boolean_and print_integer exec_if (exec_yank) (boolean_dup integer_mult in1) exec_swap () (boolean_yankdup integer_mod) tagged_575 integer_lte exec_stackdepth boolean_yank boolean_flush boolean_swap in2 integer_rot in2 boolean_dup_times integer_min boolean_shove in4 boolean_invert_second_then_and integer_min boolean_invert_first_then_and exec_y_when_autoconstructing () exec_k (boolean_invert_first_then_and print_integer boolean_yankdup) (boolean_frominteger boolean_invert_first_then_and) boolean_yank boolean_not boolean_empty integer_gte boolean_xor exec_do*while () exec_y_when_autoconstructing (tag_exec_711 ()))
Lexicase best errors: [0 0 0 0 0 0 1 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 52
Percent parens: 0.212
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_mult} {:close 2, :instruction in1} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction integer_mod} {:close 0, :instruction tagged_575} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_swap} {:close 1, :instruction in2} {:close 0, :instruction integer_rot} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_shove} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_yank} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tag_exec_711})
Zero cases best program: (boolean_and print_integer exec_if (exec_yank) (boolean_dup integer_mult in1) exec_swap () (boolean_yankdup integer_mod) tagged_575 integer_lte exec_stackdepth boolean_yank boolean_flush boolean_swap in2 integer_rot in2 boolean_dup_times integer_min boolean_shove in4 boolean_invert_second_then_and integer_min boolean_invert_first_then_and exec_y_when_autoconstructing () exec_k (boolean_invert_first_then_and print_integer boolean_yankdup) (boolean_frominteger boolean_invert_first_then_and) boolean_yank boolean_not boolean_empty integer_gte boolean_xor exec_do*while () exec_y_when_autoconstructing (tag_exec_711 ()))
Zero cases best errors: [0 0 0 0 0 0 1 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 52
Percent parens: 0.212
--- Lexicase Population Statistics ---
Count of elite individuals by case: (451 430 112 450 463 464 125 455 252 517)
Population mean number of elite cases: 3.72
Count of perfect (error zero) individuals by case: (451 430 112 450 463 464 125 455 252 517)
Population mean number of perfect (error zero) cases: 3.72
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_mult} {:close 2, :instruction in1} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction integer_mod} {:close 0, :instruction tagged_575} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_swap} {:close 1, :instruction in2} {:close 0, :instruction integer_rot} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_shove} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_yank} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tag_exec_711})
Best program: (boolean_and print_integer exec_if (exec_yank) (boolean_dup integer_mult in1) exec_swap () (boolean_yankdup integer_mod) tagged_575 integer_lte exec_stackdepth boolean_yank boolean_flush boolean_swap in2 integer_rot in2 boolean_dup_times integer_min boolean_shove in4 boolean_invert_second_then_and integer_min boolean_invert_first_then_and exec_y_when_autoconstructing () exec_k (boolean_invert_first_then_and print_integer boolean_yankdup) (boolean_frominteger boolean_invert_first_then_and) boolean_yank boolean_not boolean_empty integer_gte boolean_xor exec_do*while () exec_y_when_autoconstructing (tag_exec_711 ()))
Errors: [0 0 0 0 0 0 1 0 0 0]
Total: 1
Mean: 0.1
Genome size: 41
Size: 52
Percent parens: 0.212
--- Population Statistics ---
Average total errors in population: 6.281
Median total errors in population: 6
Error averages by case: (0.549 0.57 0.888 0.55 0.537 0.536 0.875 0.545 0.748 0.483)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 45.469
Average program size in population (points): 58.376
Average percent parens in population: 0.213
Minimum age in population: 9.0
Maximum age in population: 9.0
Average age in population: 9.0
Median age in population: 9.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.01
Error (vector) diversity:			 0.046
Behavioral diversity:				 0.239
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 4300727
--- Timings ---
Current time: 1559594124429 milliseconds
Total Time:          20.8 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        12.0 seconds, 57.8%
Fitness Testing:      5.6 seconds, 26.7%
Report:               3.1 seconds, 14.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 214
Test mean error for best: 0.21400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 7                   | Program output: 7                  
Correct output: -83                 | Program output: -83                
Correct output: -5                  | Program output: -5                 
Correct output: -24                 | Program output: -24                
Correct output: -77                 | Program output: -77                
Correct output: -63                 | Program output: -63                
Correct output: -29                 | Program output: -29                
Correct output: 4                   | Program output: 4                  
Correct output: -16                 | Program output: -16                
Correct output: 0                   | Program output: 0                  
Correct output: 72                  | Program output: 72                 
Correct output: 53                  | Program output: 53                 
Correct output: 73                  | Program output: 73                 
Correct output: 99                  | Program output: 99                 
Correct output: 76                  | Program output: 76                 
Correct output: 3                   | Program output: 3                  
Correct output: 40                  | Program output: 40                 
Correct output: 7                   | Program output: 7                  
Correct output: 1                   | Program output: 1                  
Correct output: 3                   | Program output: 3                  
Correct output: 9                   | Program output: 9                  
Correct output: 36                  | Program output: 36                 
Correct output: 32                  | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: 17                  | Program output: 17                 
Correct output: 29                  | Program output: 29                 
Correct output: 17                  | Program output: 32                 
Correct output: 2                   | Program output: 2                  
Correct output: 37                  | Program output: 37                 
Correct output: 11                  | Program output: 11                 
Correct output: 20                  | Program output: 62                 
Correct output: 14                  | Program output: 17                 
Correct output: 46                  | Program output: 52                 
Correct output: 27                  | Program output: 27                 
Correct output: 37                  | Program output: 37                 
Correct output: -33                 | Program output: -33                
Correct output: -50                 | Program output: -50                
Correct output: -68                 | Program output: -65                
Correct output: -93                 | Program output: -93                
Correct output: -89                 | Program output: -89                
Correct output: -69                 | Program output: -69                
Correct output: -54                 | Program output: -54                
Correct output: -95                 | Program output: -95                
Correct output: -97                 | Program output: -97                
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: -62                
Correct output: -73                 | Program output: -73                
Correct output: -38                 | Program output: -38                
Correct output: -93                 | Program output: -93                
Correct output: -64                 | Program output: -64                
Correct output: -59                 | Program output: -59                
Correct output: 46                  | Program output: 61                 
Correct output: -87                 | Program output: -87                
Correct output: -74                 | Program output: -74                
Correct output: -94                 | Program output: 53                 
Correct output: -76                 | Program output: -76                
Correct output: 13                  | Program output: 13                 
Correct output: -69                 | Program output: -69                
Correct output: -80                 | Program output: -37                
Correct output: -59                 | Program output: -59                
Correct output: -34                 | Program output: 46                 
Correct output: -79                 | Program output: -79                
Correct output: -94                 | Program output: -94                
Correct output: -90                 | Program output: -90                
Correct output: -74                 | Program output: -74                
Correct output: -89                 | Program output: -89                
Correct output: -86                 | Program output: -86                
Correct output: -75                 | Program output: 8                  
Correct output: -45                 | Program output: -44                
Correct output: -87                 | Program output: -87                
Correct output: -96                 | Program output: -96                
Correct output: -49                 | Program output: -12                
Correct output: -96                 | Program output: 17                 
Correct output: -23                 | Program output: -23                
Correct output: -59                 | Program output: -59                
Correct output: -65                 | Program output: 29                 
Correct output: -22                 | Program output: -22                
Correct output: 30                  | Program output: 30                 
Correct output: -77                 | Program output: -77                
Correct output: -70                 | Program output: -70                
Correct output: -85                 | Program output: -85                
Correct output: -10                 | Program output: 73                 
Correct output: -54                 | Program output: -54                
Correct output: -97                 | Program output: -97                
Correct output: -86                 | Program output: -86                
Correct output: -4                  | Program output: -4                 
Correct output: -87                 | Program output: -87                
Correct output: -5                  | Program output: 15                 
Correct output: -32                 | Program output: -32                
Correct output: -45                 | Program output: -45                
Correct output: -73                 | Program output: -73                
Correct output: 46                  | Program output: 46                 
Correct output: -13                 | Program output: 47                 
Correct output: -92                 | Program output: -92                
Correct output: -76                 | Program output: -76                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_if} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_mult} {:close 2, :instruction in1} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lt} {:close 2, :instruction integer_mod} {:close 0, :instruction tagged_575} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_swap} {:close 1, :instruction in2} {:close 0, :instruction integer_rot} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_shove} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_yank} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tag_exec_711})
Lexicase best program: (boolean_and print_integer boolean_xor exec_if (exec_yank) (boolean_dup integer_mult in1) exec_swap () (boolean_yankdup integer_lt integer_mod) tagged_575 integer_lte exec_stackdepth boolean_yank boolean_flush boolean_swap in2 integer_rot in2 exec_s_when_autoconstructing (boolean_dup_times integer_min) (boolean_shove in4 boolean_invert_second_then_and integer_min boolean_invert_first_then_and exec_y_when_autoconstructing () exec_k (boolean_invert_first_then_and print_integer boolean_yankdup) (boolean_frominteger boolean_invert_first_then_and) boolean_yank) (boolean_not) boolean_empty integer_gte boolean_xor exec_do*while () exec_y_when_autoconstructing (tag_exec_711 ()))
Lexicase best errors: [0 0 0 0 1 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 58
Percent parens: 0.241
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_if} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_mult} {:close 2, :instruction in1} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lt} {:close 2, :instruction integer_mod} {:close 0, :instruction tagged_575} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_swap} {:close 1, :instruction in2} {:close 0, :instruction integer_rot} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_shove} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_yank} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tag_exec_711})
Zero cases best program: (boolean_and print_integer boolean_xor exec_if (exec_yank) (boolean_dup integer_mult in1) exec_swap () (boolean_yankdup integer_lt integer_mod) tagged_575 integer_lte exec_stackdepth boolean_yank boolean_flush boolean_swap in2 integer_rot in2 exec_s_when_autoconstructing (boolean_dup_times integer_min) (boolean_shove in4 boolean_invert_second_then_and integer_min boolean_invert_first_then_and exec_y_when_autoconstructing () exec_k (boolean_invert_first_then_and print_integer boolean_yankdup) (boolean_frominteger boolean_invert_first_then_and) boolean_yank) (boolean_not) boolean_empty integer_gte boolean_xor exec_do*while () exec_y_when_autoconstructing (tag_exec_711 ()))
Zero cases best errors: [0 0 0 0 1 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 58
Percent parens: 0.241
--- Lexicase Population Statistics ---
Count of elite individuals by case: (523 354 141 534 104 145 529 141 141 285)
Population mean number of elite cases: 2.90
Count of perfect (error zero) individuals by case: (523 354 141 534 104 145 529 141 141 285)
Population mean number of perfect (error zero) cases: 2.90
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_mult} {:close 2, :instruction in1} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction integer_mod} {:close 0, :instruction tagged_575} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_swap} {:close 1, :instruction in2} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_shove} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_yank} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tag_exec_711})
Best program: (boolean_and print_integer exec_if (exec_yank) (boolean_dup integer_mult in1) exec_swap () (boolean_yankdup integer_mod) tagged_575 integer_lte exec_stackdepth boolean_yank boolean_flush boolean_dup_items boolean_swap in2 integer_rot boolean_dup_times integer_min boolean_shove in4 boolean_invert_second_then_and integer_min boolean_invert_first_then_and exec_y_when_autoconstructing () exec_k (boolean_invert_first_then_and print_integer boolean_yankdup) (boolean_frominteger boolean_invert_first_then_and) boolean_yank boolean_not boolean_empty integer_gte boolean_xor exec_do*while () exec_y_when_autoconstructing (tag_exec_711 ()))
Errors: [0 0 0 0 1 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 41
Size: 52
Percent parens: 0.212
--- Population Statistics ---
Average total errors in population: 7.103
Median total errors in population: 7
Error averages by case: (0.477 0.646 0.859 0.466 0.896 0.855 0.471 0.859 0.859 0.715)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.519
Average program size in population (points): 51.736
Average percent parens in population: 0.216
Minimum age in population: 10.0
Maximum age in population: 10.0
Average age in population: 10.0
Median age in population: 10.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.01
Error (vector) diversity:			 0.039
Behavioral diversity:				 0.337
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 4815376
--- Timings ---
Current time: 1559594126266 milliseconds
Total Time:          22.6 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        13.1 seconds, 57.9%
Fitness Testing:      6.0 seconds, 26.5%
Report:               3.4 seconds, 15.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 214
Test mean error for best: 0.21400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 7                   | Program output: 7                  
Correct output: -83                 | Program output: -83                
Correct output: -5                  | Program output: -5                 
Correct output: -24                 | Program output: -24                
Correct output: -77                 | Program output: -77                
Correct output: -63                 | Program output: -63                
Correct output: -29                 | Program output: -29                
Correct output: 4                   | Program output: 4                  
Correct output: -16                 | Program output: -16                
Correct output: 0                   | Program output: 0                  
Correct output: 72                  | Program output: 72                 
Correct output: 53                  | Program output: 53                 
Correct output: 73                  | Program output: 73                 
Correct output: 99                  | Program output: 99                 
Correct output: 76                  | Program output: 76                 
Correct output: 3                   | Program output: 3                  
Correct output: 40                  | Program output: 40                 
Correct output: 7                   | Program output: 7                  
Correct output: 1                   | Program output: 1                  
Correct output: 3                   | Program output: 3                  
Correct output: 9                   | Program output: 9                  
Correct output: 36                  | Program output: 36                 
Correct output: 32                  | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: 17                  | Program output: 17                 
Correct output: 29                  | Program output: 29                 
Correct output: 17                  | Program output: 32                 
Correct output: 2                   | Program output: 2                  
Correct output: 37                  | Program output: 37                 
Correct output: 11                  | Program output: 11                 
Correct output: 20                  | Program output: 62                 
Correct output: 14                  | Program output: 17                 
Correct output: 46                  | Program output: 52                 
Correct output: 27                  | Program output: 27                 
Correct output: 37                  | Program output: 37                 
Correct output: -33                 | Program output: -33                
Correct output: -50                 | Program output: -50                
Correct output: -68                 | Program output: -65                
Correct output: -93                 | Program output: -93                
Correct output: -89                 | Program output: -89                
Correct output: -69                 | Program output: -69                
Correct output: -54                 | Program output: -54                
Correct output: -95                 | Program output: -95                
Correct output: -97                 | Program output: -97                
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: -62                
Correct output: -73                 | Program output: -73                
Correct output: -38                 | Program output: -38                
Correct output: -93                 | Program output: -93                
Correct output: -64                 | Program output: -64                
Correct output: -59                 | Program output: -59                
Correct output: 46                  | Program output: 61                 
Correct output: -87                 | Program output: -87                
Correct output: -74                 | Program output: -74                
Correct output: -94                 | Program output: 53                 
Correct output: -76                 | Program output: -76                
Correct output: 13                  | Program output: 13                 
Correct output: -69                 | Program output: -69                
Correct output: -80                 | Program output: -37                
Correct output: -59                 | Program output: -59                
Correct output: -34                 | Program output: 46                 
Correct output: -79                 | Program output: -79                
Correct output: -94                 | Program output: -94                
Correct output: -90                 | Program output: -90                
Correct output: -74                 | Program output: -74                
Correct output: -89                 | Program output: -89                
Correct output: -86                 | Program output: -86                
Correct output: -75                 | Program output: 8                  
Correct output: -45                 | Program output: -44                
Correct output: -87                 | Program output: -87                
Correct output: -96                 | Program output: -96                
Correct output: -49                 | Program output: -12                
Correct output: -96                 | Program output: 17                 
Correct output: -23                 | Program output: -23                
Correct output: -59                 | Program output: -59                
Correct output: -65                 | Program output: 29                 
Correct output: -22                 | Program output: -22                
Correct output: 30                  | Program output: 30                 
Correct output: -77                 | Program output: -77                
Correct output: -70                 | Program output: -70                
Correct output: -85                 | Program output: -85                
Correct output: -10                 | Program output: 73                 
Correct output: -54                 | Program output: -54                
Correct output: -97                 | Program output: -97                
Correct output: -86                 | Program output: -86                
Correct output: -4                  | Program output: -4                 
Correct output: -87                 | Program output: -87                
Correct output: -5                  | Program output: 15                 
Correct output: -32                 | Program output: -32                
Correct output: -45                 | Program output: -45                
Correct output: -73                 | Program output: -73                
Correct output: 46                  | Program output: 46                 
Correct output: -13                 | Program output: 47                 
Correct output: -92                 | Program output: -92                
Correct output: -76                 | Program output: -76                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_mult} {:close 2, :instruction in1} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction integer_mod} {:close 0, :instruction tagged_575} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_swap} {:close 1, :instruction in2} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_shove} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_yank} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tag_exec_711})
Lexicase best program: (boolean_and print_integer exec_if (exec_yank) (boolean_dup integer_mult in1) exec_swap () (boolean_yankdup integer_mod) tagged_575 integer_lte exec_stackdepth boolean_yank boolean_flush boolean_swap in2 integer_rot boolean_dup_times integer_min boolean_shove in4 boolean_invert_second_then_and integer_min boolean_invert_first_then_and exec_y_when_autoconstructing () exec_k (boolean_invert_first_then_and print_integer boolean_yankdup) (boolean_frominteger boolean_invert_first_then_and) boolean_yank boolean_not boolean_empty integer_gte boolean_xor exec_do*while () exec_y_when_autoconstructing (tag_exec_711 ()))
Lexicase best errors: [0 0 1 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 51
Percent parens: 0.216
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_mult} {:close 2, :instruction in1} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction integer_mod} {:close 0, :instruction tagged_575} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_swap} {:close 1, :instruction in2} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_shove} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_yank} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tag_exec_711})
Zero cases best program: (boolean_and print_integer exec_if (exec_yank) (boolean_dup integer_mult in1) exec_swap () (boolean_yankdup integer_mod) tagged_575 integer_lte exec_stackdepth boolean_yank boolean_flush boolean_swap in2 integer_rot boolean_dup_times integer_min boolean_shove in4 boolean_invert_second_then_and integer_min boolean_invert_first_then_and exec_y_when_autoconstructing () exec_k (boolean_invert_first_then_and print_integer boolean_yankdup) (boolean_frominteger boolean_invert_first_then_and) boolean_yank boolean_not boolean_empty integer_gte boolean_xor exec_do*while () exec_y_when_autoconstructing (tag_exec_711 ()))
Zero cases best errors: [0 0 1 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 51
Percent parens: 0.216
--- Lexicase Population Statistics ---
Count of elite individuals by case: (383 446 111 481 250 472 455 673 456 247)
Population mean number of elite cases: 3.97
Count of perfect (error zero) individuals by case: (383 446 111 481 250 472 455 673 456 247)
Population mean number of perfect (error zero) cases: 3.97
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction exec_if} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_mult} {:close 2, :instruction in1} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction integer_mod} {:close 0, :instruction tagged_575} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 1, :instruction in3} {:close 0, :instruction boolean_swap} {:close 1, :instruction in2} {:close 0, :instruction integer_rot} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_shove} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_k} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_yank} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tag_exec_711})
Best program: (boolean_and exec_if (exec_yank) (boolean_dup integer_mult in1) exec_swap () (boolean_yankdup integer_mod) tagged_575 exec_stackdepth boolean_yank exec_y_when_autoconstructing (integer_yankdup in3) boolean_swap in2 integer_rot in2 boolean_dup_times integer_min boolean_shove in4 boolean_invert_second_then_and integer_min exec_s (boolean_invert_first_then_and exec_y_when_autoconstructing () exec_k (print_integer boolean_yankdup) (boolean_frominteger boolean_invert_first_then_and) exec_do*count (boolean_yank) boolean_not) (integer_gte exec_do*while () exec_y_when_autoconstructing (tag_exec_711 ())) ())
Errors: [0 0 1 0 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 40
Size: 56
Percent parens: 0.286
--- Population Statistics ---
Average total errors in population: 6.026
Median total errors in population: 6
Error averages by case: (0.617 0.554 0.889 0.519 0.75 0.528 0.545 0.327 0.544 0.753)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.199
Average program size in population (points): 52.264
Average percent parens in population: 0.230
Minimum age in population: 11.0
Maximum age in population: 11.0
Average age in population: 11.0
Median age in population: 11.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.01
Error (vector) diversity:			 0.086
Behavioral diversity:				 0.339
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 5314026
--- Timings ---
Current time: 1559594128240 milliseconds
Total Time:          24.5 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        14.2 seconds, 58.1%
Fitness Testing:      6.4 seconds, 26.2%
Report:               3.7 seconds, 15.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 0
Test mean error for best: 0.00000
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 7                   | Program output: 7                  
Correct output: -83                 | Program output: -83                
Correct output: -5                  | Program output: -5                 
Correct output: -24                 | Program output: -24                
Correct output: -77                 | Program output: -77                
Correct output: -63                 | Program output: -63                
Correct output: -29                 | Program output: -29                
Correct output: 4                   | Program output: 4                  
Correct output: -16                 | Program output: -16                
Correct output: 0                   | Program output: 0                  
Correct output: 72                  | Program output: 72                 
Correct output: 53                  | Program output: 53                 
Correct output: 73                  | Program output: 73                 
Correct output: 99                  | Program output: 99                 
Correct output: 76                  | Program output: 76                 
Correct output: 3                   | Program output: 3                  
Correct output: 40                  | Program output: 40                 
Correct output: 7                   | Program output: 7                  
Correct output: 1                   | Program output: 1                  
Correct output: 3                   | Program output: 3                  
Correct output: 9                   | Program output: 9                  
Correct output: 36                  | Program output: 36                 
Correct output: 32                  | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: 17                  | Program output: 17                 
Correct output: 29                  | Program output: 29                 
Correct output: 17                  | Program output: 17                 
Correct output: 2                   | Program output: 2                  
Correct output: 37                  | Program output: 37                 
Correct output: 11                  | Program output: 11                 
Correct output: 20                  | Program output: 20                 
Correct output: 14                  | Program output: 14                 
Correct output: 46                  | Program output: 46                 
Correct output: 27                  | Program output: 27                 
Correct output: 37                  | Program output: 37                 
Correct output: -33                 | Program output: -33                
Correct output: -50                 | Program output: -50                
Correct output: -68                 | Program output: -68                
Correct output: -93                 | Program output: -93                
Correct output: -89                 | Program output: -89                
Correct output: -69                 | Program output: -69                
Correct output: -54                 | Program output: -54                
Correct output: -95                 | Program output: -95                
Correct output: -97                 | Program output: -97                
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: -100               
Correct output: -73                 | Program output: -73                
Correct output: -38                 | Program output: -38                
Correct output: -93                 | Program output: -93                
Correct output: -64                 | Program output: -64                
Correct output: -59                 | Program output: -59                
Correct output: 46                  | Program output: 46                 
Correct output: -87                 | Program output: -87                
Correct output: -74                 | Program output: -74                
Correct output: -94                 | Program output: -94                
Correct output: -76                 | Program output: -76                
Correct output: 13                  | Program output: 13                 
Correct output: -69                 | Program output: -69                
Correct output: -80                 | Program output: -80                
Correct output: -59                 | Program output: -59                
Correct output: -34                 | Program output: -34                
Correct output: -79                 | Program output: -79                
Correct output: -94                 | Program output: -94                
Correct output: -90                 | Program output: -90                
Correct output: -74                 | Program output: -74                
Correct output: -89                 | Program output: -89                
Correct output: -86                 | Program output: -86                
Correct output: -75                 | Program output: -75                
Correct output: -45                 | Program output: -45                
Correct output: -87                 | Program output: -87                
Correct output: -96                 | Program output: -96                
Correct output: -49                 | Program output: -49                
Correct output: -96                 | Program output: -96                
Correct output: -23                 | Program output: -23                
Correct output: -59                 | Program output: -59                
Correct output: -65                 | Program output: -65                
Correct output: -22                 | Program output: -22                
Correct output: 30                  | Program output: 30                 
Correct output: -77                 | Program output: -77                
Correct output: -70                 | Program output: -70                
Correct output: -85                 | Program output: -85                
Correct output: -10                 | Program output: -10                
Correct output: -54                 | Program output: -54                
Correct output: -97                 | Program output: -97                
Correct output: -86                 | Program output: -86                
Correct output: -4                  | Program output: -4                 
Correct output: -87                 | Program output: -87                
Correct output: -5                  | Program output: -5                 
Correct output: -32                 | Program output: -32                
Correct output: -45                 | Program output: -45                
Correct output: -73                 | Program output: -73                
Correct output: 46                  | Program output: 46                 
Correct output: -13                 | Program output: -13                
Correct output: -92                 | Program output: -92                
Correct output: -76                 | Program output: -76                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_mult} {:close 2, :instruction in1} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 2, :instruction integer_mod} {:close 0, :instruction tagged_575} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_flush} {:close 1, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction in2} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_min} {:close 0, :instruction print_boolean} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_yank} {:close 1, :instruction integer_max} {:close 1, :instruction exec_dup_times} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_do*while} {:close 0, :instruction tag_exec_711})
Lexicase best program: (boolean_and print_integer exec_if (exec_yank) (boolean_dup integer_mult in1) exec_swap () (boolean_yankdup boolean_invert_first_then_and integer_mod) tagged_575 exec_pop (integer_lte exec_stackdepth boolean_yank boolean_flush in2) in3 in2 boolean_pop boolean_dup_times exec_dup (integer_min) print_boolean in4 boolean_invert_second_then_and integer_min boolean_invert_first_then_and exec_y_when_autoconstructing () exec_k (boolean_shove boolean_invert_first_then_and print_integer boolean_xor boolean_yankdup) (exec_s_when_autoconstructing (boolean_frominteger boolean_invert_first_then_and) (boolean_yank) (integer_max) exec_dup_times () boolean_not) boolean_empty integer_gte boolean_xor exec_do*while () tag_exec_711 ())
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 64
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_mult} {:close 2, :instruction in1} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 2, :instruction integer_mod} {:close 0, :instruction tagged_575} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_flush} {:close 1, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction in2} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_min} {:close 0, :instruction print_boolean} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_yank} {:close 1, :instruction integer_max} {:close 1, :instruction exec_dup_times} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_do*while} {:close 0, :instruction tag_exec_711})
Zero cases best program: (boolean_and print_integer exec_if (exec_yank) (boolean_dup integer_mult in1) exec_swap () (boolean_yankdup boolean_invert_first_then_and integer_mod) tagged_575 exec_pop (integer_lte exec_stackdepth boolean_yank boolean_flush in2) in3 in2 boolean_pop boolean_dup_times exec_dup (integer_min) print_boolean in4 boolean_invert_second_then_and integer_min boolean_invert_first_then_and exec_y_when_autoconstructing () exec_k (boolean_shove boolean_invert_first_then_and print_integer boolean_xor boolean_yankdup) (exec_s_when_autoconstructing (boolean_frominteger boolean_invert_first_then_and) (boolean_yank) (integer_max) exec_dup_times () boolean_not) boolean_empty integer_gte boolean_xor exec_do*while () tag_exec_711 ())
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 64
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (225 460 218 600 473 209 416 431 216 478)
Population mean number of elite cases: 3.73
Count of perfect (error zero) individuals by case: (225 460 218 600 473 209 416 431 216 478)
Population mean number of perfect (error zero) cases: 3.73
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_mult} {:close 2, :instruction in1} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 2, :instruction integer_mod} {:close 0, :instruction tagged_575} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_flush} {:close 1, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction in2} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_min} {:close 0, :instruction print_boolean} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_yank} {:close 1, :instruction integer_max} {:close 1, :instruction exec_dup_times} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_do*while} {:close 0, :instruction tag_exec_711})
Best program: (boolean_and print_integer exec_if (exec_yank) (boolean_dup integer_mult in1) exec_swap () (boolean_yankdup boolean_invert_first_then_and integer_mod) tagged_575 exec_pop (integer_lte exec_stackdepth boolean_yank boolean_flush in2) in3 in2 boolean_pop boolean_dup_times exec_dup (integer_min) print_boolean in4 boolean_invert_second_then_and integer_min boolean_invert_first_then_and exec_y_when_autoconstructing () exec_k (boolean_shove boolean_invert_first_then_and print_integer boolean_xor boolean_yankdup) (exec_s_when_autoconstructing (boolean_frominteger boolean_invert_first_then_and) (boolean_yank) (integer_max) exec_dup_times () boolean_not) boolean_empty integer_gte boolean_xor exec_do*while () tag_exec_711 ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 48
Size: 64
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 6.274
Median total errors in population: 6
Error averages by case: (0.775 0.54 0.782 0.4 0.527 0.791 0.584 0.569 0.784 0.522)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.234
Average program size in population (points): 51.047
Average percent parens in population: 0.230
Minimum age in population: 12.0
Maximum age in population: 12.0
Average age in population: 12.0
Median age in population: 12.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.011
Error (vector) diversity:			 0.054
Behavioral diversity:				 0.284
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 5753170
--- Timings ---
Current time: 1559594130055 milliseconds
Total Time:          26.4 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        15.3 seconds, 58.0%
Fitness Testing:      6.8 seconds, 25.7%
Report:               4.2 seconds, 15.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 12
Successful program: (boolean_and print_integer exec_if (exec_yank) (boolean_dup integer_mult in1) exec_swap () (boolean_yankdup boolean_invert_first_then_and integer_mod) tagged_575 exec_pop (integer_lte exec_stackdepth boolean_yank boolean_flush in2) in3 in2 boolean_pop boolean_dup_times exec_dup (integer_min) print_boolean in4 boolean_invert_second_then_and integer_min boolean_invert_first_then_and exec_y_when_autoconstructing () exec_k (boolean_shove boolean_invert_first_then_and print_integer boolean_xor boolean_yankdup) (exec_s_when_autoconstructing (boolean_frominteger boolean_invert_first_then_and) (boolean_yank) (integer_max) exec_dup_times () boolean_not) boolean_empty integer_gte boolean_xor exec_do*while () tag_exec_711 ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 64


Auto-simplifying with starting size: 64
step: 0
program: (boolean_and print_integer exec_if (exec_yank) (boolean_dup integer_mult in1) exec_swap () (boolean_yankdup boolean_invert_first_then_and integer_mod) tagged_575 exec_pop (integer_lte exec_stackdepth boolean_yank boolean_flush in2) in3 in2 boolean_pop boolean_dup_times exec_dup (integer_min) print_boolean in4 boolean_invert_second_then_and integer_min boolean_invert_first_then_and exec_y_when_autoconstructing () exec_k (boolean_shove boolean_invert_first_then_and print_integer boolean_xor boolean_yankdup) (exec_s_when_autoconstructing (boolean_frominteger boolean_invert_first_then_and) (boolean_yank) (integer_max) exec_dup_times () boolean_not) boolean_empty integer_gte boolean_xor exec_do*while () tag_exec_711 ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 64

step: 500
program: (boolean_and print_integer exec_if (exec_yank) (boolean_dup integer_mult in1) exec_swap () (boolean_yankdup boolean_invert_first_then_and integer_mod) tagged_575 exec_pop (integer_lte exec_stackdepth boolean_yank boolean_flush in2) in3 in2 boolean_pop boolean_dup_times exec_dup (integer_min) print_boolean in4 boolean_invert_second_then_and integer_min boolean_invert_first_then_and exec_y_when_autoconstructing () exec_k (boolean_shove boolean_invert_first_then_and print_integer boolean_xor boolean_yankdup) (exec_s_when_autoconstructing (boolean_frominteger boolean_invert_first_then_and) (boolean_yank) (integer_max) exec_dup_times () boolean_not) boolean_empty integer_gte boolean_xor exec_do*while () tag_exec_711 ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 64

step: 1000
program: (boolean_and print_integer exec_if (exec_yank) (boolean_dup integer_mult in1) exec_swap () (boolean_yankdup boolean_invert_first_then_and integer_mod) tagged_575 exec_pop (integer_lte exec_stackdepth boolean_yank boolean_flush in2) in3 in2 boolean_pop boolean_dup_times exec_dup (integer_min) print_boolean in4 boolean_invert_second_then_and integer_min boolean_invert_first_then_and exec_y_when_autoconstructing () exec_k (boolean_shove boolean_invert_first_then_and print_integer boolean_xor boolean_yankdup) (exec_s_when_autoconstructing (boolean_frominteger boolean_invert_first_then_and) (boolean_yank) (integer_max) exec_dup_times () boolean_not) boolean_empty integer_gte boolean_xor exec_do*while () tag_exec_711 ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 64

step: 1500
program: (boolean_and print_integer exec_if (exec_yank) (boolean_dup integer_mult in1) exec_swap () (boolean_yankdup boolean_invert_first_then_and integer_mod) tagged_575 exec_pop (integer_lte exec_stackdepth boolean_yank boolean_flush in2) in3 in2 boolean_pop boolean_dup_times exec_dup (integer_min) print_boolean in4 boolean_invert_second_then_and integer_min boolean_invert_first_then_and exec_y_when_autoconstructing () exec_k (boolean_shove boolean_invert_first_then_and print_integer boolean_xor boolean_yankdup) (exec_s_when_autoconstructing (boolean_frominteger boolean_invert_first_then_and) (boolean_yank) (integer_max) exec_dup_times () boolean_not) boolean_empty integer_gte boolean_xor exec_do*while () tag_exec_711 ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 64

step: 2000
program: (boolean_and print_integer exec_if (exec_yank) (boolean_dup integer_mult in1) exec_swap () (boolean_yankdup boolean_invert_first_then_and integer_mod) tagged_575 exec_pop (integer_lte exec_stackdepth boolean_yank boolean_flush in2) in3 in2 boolean_pop boolean_dup_times exec_dup (integer_min) print_boolean in4 boolean_invert_second_then_and integer_min boolean_invert_first_then_and exec_y_when_autoconstructing () exec_k (boolean_shove boolean_invert_first_then_and print_integer boolean_xor boolean_yankdup) (exec_s_when_autoconstructing (boolean_frominteger boolean_invert_first_then_and) (boolean_yank) (integer_max) exec_dup_times () boolean_not) boolean_empty integer_gte boolean_xor exec_do*while () tag_exec_711 ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 64

step: 2500
program: (boolean_and print_integer exec_if (exec_yank) (boolean_dup integer_mult in1) exec_swap () (boolean_yankdup boolean_invert_first_then_and integer_mod) tagged_575 exec_pop (integer_lte exec_stackdepth boolean_yank boolean_flush in2) in3 in2 boolean_pop boolean_dup_times exec_dup (integer_min) print_boolean in4 boolean_invert_second_then_and integer_min boolean_invert_first_then_and exec_y_when_autoconstructing () exec_k (boolean_shove boolean_invert_first_then_and print_integer boolean_xor boolean_yankdup) (exec_s_when_autoconstructing (boolean_frominteger boolean_invert_first_then_and) (boolean_yank) (integer_max) exec_dup_times () boolean_not) boolean_empty integer_gte boolean_xor exec_do*while () tag_exec_711 ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 64

step: 3000
program: (boolean_and print_integer exec_if (exec_yank) (boolean_dup integer_mult in1) exec_swap () (boolean_yankdup boolean_invert_first_then_and integer_mod) tagged_575 exec_pop (integer_lte exec_stackdepth boolean_yank boolean_flush in2) in3 in2 boolean_pop boolean_dup_times exec_dup (integer_min) print_boolean in4 boolean_invert_second_then_and integer_min boolean_invert_first_then_and exec_y_when_autoconstructing () exec_k (boolean_shove boolean_invert_first_then_and print_integer boolean_xor boolean_yankdup) (exec_s_when_autoconstructing (boolean_frominteger boolean_invert_first_then_and) (boolean_yank) (integer_max) exec_dup_times () boolean_not) boolean_empty integer_gte boolean_xor exec_do*while () tag_exec_711 ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 64

step: 3500
program: (boolean_and print_integer exec_if (exec_yank) (boolean_dup integer_mult in1) exec_swap () (boolean_yankdup boolean_invert_first_then_and integer_mod) tagged_575 exec_pop (integer_lte exec_stackdepth boolean_yank boolean_flush in2) in3 in2 boolean_pop boolean_dup_times exec_dup (integer_min) print_boolean in4 boolean_invert_second_then_and integer_min boolean_invert_first_then_and exec_y_when_autoconstructing () exec_k (boolean_shove boolean_invert_first_then_and print_integer boolean_xor boolean_yankdup) (exec_s_when_autoconstructing (boolean_frominteger boolean_invert_first_then_and) (boolean_yank) (integer_max) exec_dup_times () boolean_not) boolean_empty integer_gte boolean_xor exec_do*while () tag_exec_711 ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 64

step: 4000
program: (boolean_and print_integer exec_if (exec_yank) (boolean_dup integer_mult in1) exec_swap () (boolean_yankdup boolean_invert_first_then_and integer_mod) tagged_575 exec_pop (integer_lte exec_stackdepth boolean_yank boolean_flush in2) in3 in2 boolean_pop boolean_dup_times exec_dup (integer_min) print_boolean in4 boolean_invert_second_then_and integer_min boolean_invert_first_then_and exec_y_when_autoconstructing () exec_k (boolean_shove boolean_invert_first_then_and print_integer boolean_xor boolean_yankdup) (exec_s_when_autoconstructing (boolean_frominteger boolean_invert_first_then_and) (boolean_yank) (integer_max) exec_dup_times () boolean_not) boolean_empty integer_gte boolean_xor exec_do*while () tag_exec_711 ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 64

step: 4500
program: (boolean_and print_integer exec_if (exec_yank) (boolean_dup integer_mult in1) exec_swap () (boolean_yankdup boolean_invert_first_then_and integer_mod) tagged_575 exec_pop (integer_lte exec_stackdepth boolean_yank boolean_flush in2) in3 in2 boolean_pop boolean_dup_times exec_dup (integer_min) print_boolean in4 boolean_invert_second_then_and integer_min boolean_invert_first_then_and exec_y_when_autoconstructing () exec_k (boolean_shove boolean_invert_first_then_and print_integer boolean_xor boolean_yankdup) (exec_s_when_autoconstructing (boolean_frominteger boolean_invert_first_then_and) (boolean_yank) (integer_max) exec_dup_times () boolean_not) boolean_empty integer_gte boolean_xor exec_do*while () tag_exec_711 ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 64

step: 5000
program: (boolean_and print_integer exec_if (exec_yank) (boolean_dup integer_mult in1) exec_swap () (boolean_yankdup boolean_invert_first_then_and integer_mod) tagged_575 exec_pop (integer_lte exec_stackdepth boolean_yank boolean_flush in2) in3 in2 boolean_pop boolean_dup_times exec_dup (integer_min) print_boolean in4 boolean_invert_second_then_and integer_min boolean_invert_first_then_and exec_y_when_autoconstructing () exec_k (boolean_shove boolean_invert_first_then_and print_integer boolean_xor boolean_yankdup) (exec_s_when_autoconstructing (boolean_frominteger boolean_invert_first_then_and) (boolean_yank) (integer_max) exec_dup_times () boolean_not) boolean_empty integer_gte boolean_xor exec_do*while () tag_exec_711 ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 64

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 0
Test mean error for best: 0.00000
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 7                   | Program output: 7                  
Correct output: -83                 | Program output: -83                
Correct output: -5                  | Program output: -5                 
Correct output: -24                 | Program output: -24                
Correct output: -77                 | Program output: -77                
Correct output: -63                 | Program output: -63                
Correct output: -29                 | Program output: -29                
Correct output: 4                   | Program output: 4                  
Correct output: -16                 | Program output: -16                
Correct output: 0                   | Program output: 0                  
Correct output: 72                  | Program output: 72                 
Correct output: 53                  | Program output: 53                 
Correct output: 73                  | Program output: 73                 
Correct output: 99                  | Program output: 99                 
Correct output: 76                  | Program output: 76                 
Correct output: 3                   | Program output: 3                  
Correct output: 40                  | Program output: 40                 
Correct output: 7                   | Program output: 7                  
Correct output: 1                   | Program output: 1                  
Correct output: 3                   | Program output: 3                  
Correct output: 9                   | Program output: 9                  
Correct output: 36                  | Program output: 36                 
Correct output: 32                  | Program output: 32                 
Correct output: 5                   | Program output: 5                  
Correct output: 17                  | Program output: 17                 
Correct output: 29                  | Program output: 29                 
Correct output: 17                  | Program output: 17                 
Correct output: 2                   | Program output: 2                  
Correct output: 37                  | Program output: 37                 
Correct output: 11                  | Program output: 11                 
Correct output: 20                  | Program output: 20                 
Correct output: 14                  | Program output: 14                 
Correct output: 46                  | Program output: 46                 
Correct output: 27                  | Program output: 27                 
Correct output: 37                  | Program output: 37                 
Correct output: -33                 | Program output: -33                
Correct output: -50                 | Program output: -50                
Correct output: -68                 | Program output: -68                
Correct output: -93                 | Program output: -93                
Correct output: -89                 | Program output: -89                
Correct output: -69                 | Program output: -69                
Correct output: -54                 | Program output: -54                
Correct output: -95                 | Program output: -95                
Correct output: -97                 | Program output: -97                
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: -100               
Correct output: -73                 | Program output: -73                
Correct output: -38                 | Program output: -38                
Correct output: -93                 | Program output: -93                
Correct output: -64                 | Program output: -64                
Correct output: -59                 | Program output: -59                
Correct output: 46                  | Program output: 46                 
Correct output: -87                 | Program output: -87                
Correct output: -74                 | Program output: -74                
Correct output: -94                 | Program output: -94                
Correct output: -76                 | Program output: -76                
Correct output: 13                  | Program output: 13                 
Correct output: -69                 | Program output: -69                
Correct output: -80                 | Program output: -80                
Correct output: -59                 | Program output: -59                
Correct output: -34                 | Program output: -34                
Correct output: -79                 | Program output: -79                
Correct output: -94                 | Program output: -94                
Correct output: -90                 | Program output: -90                
Correct output: -74                 | Program output: -74                
Correct output: -89                 | Program output: -89                
Correct output: -86                 | Program output: -86                
Correct output: -75                 | Program output: -75                
Correct output: -45                 | Program output: -45                
Correct output: -87                 | Program output: -87                
Correct output: -96                 | Program output: -96                
Correct output: -49                 | Program output: -49                
Correct output: -96                 | Program output: -96                
Correct output: -23                 | Program output: -23                
Correct output: -59                 | Program output: -59                
Correct output: -65                 | Program output: -65                
Correct output: -22                 | Program output: -22                
Correct output: 30                  | Program output: 30                 
Correct output: -77                 | Program output: -77                
Correct output: -70                 | Program output: -70                
Correct output: -85                 | Program output: -85                
Correct output: -10                 | Program output: -10                
Correct output: -54                 | Program output: -54                
Correct output: -97                 | Program output: -97                
Correct output: -86                 | Program output: -86                
Correct output: -4                  | Program output: -4                 
Correct output: -87                 | Program output: -87                
Correct output: -5                  | Program output: -5                 
Correct output: -32                 | Program output: -32                
Correct output: -45                 | Program output: -45                
Correct output: -73                 | Program output: -73                
Correct output: 46                  | Program output: 46                 
Correct output: -13                 | Program output: -13                
Correct output: -92                 | Program output: -92                
Correct output: -76                 | Program output: -76                
;;******************************
