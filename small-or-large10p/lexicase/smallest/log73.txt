Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 3000 :genetic-operator-probabilities {:uniform-addition-and-deletion,1.0} :uniform-addition-and-deletion-rate 0.09
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x579dde54 clojush.problems.software.smallest$fn__7461@579dde54] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x6b899971 clojush.instructions.tag$tag_instruction_erc$fn__2160@6b899971] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x7cec3975 clojush.instructions.tag$tagged_instruction_erc$fn__2166@7cec3975] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x7e2a76be clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@7e2a76be]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:uniform-addition-and-deletion 1.0}
max-error = 1
max-generations = 3000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x417bfebd clojush.problems.software.smallest$smallest_initial_report@417bfebd]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_report@2a4cb8ae]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[68 49 49 49] 49] [[-44 -54 -44 -44] -54] [[13 13 -14 13] -14] [[96 96 96 59] 59] [[47 -81 47 47] -81] [[-26 77 -26 -26] -26] [[-72 -9 -9 -9] -72] [[29 29 -11 29] -11] [[9 92 9 9] 9] [[69 -91 69 69] -91] [(-97 -97 -97 -97) -97] [(17 17 17 17) 17] [(-62 -62 -62 -62) -62] [(-95 -95 -95 -95) -95] [(0 0 0 0) 0] [(23 85 92 13) 13] [(97 83 77 100) 77] [(67 17 47 82) 17] [(52 18 89 24) 18] [(9 91 54 50) 9] [(38 53 14 80) 14] [(11 87 2 3) 2] [(91 34 36 4) 4] [(70 65 83 8) 8] [(75 92 72 77) 72] [(56 14 77 70) 14] [(11 93 9 73) 9] [(87 82 82 82) 82] [(99 22 38 34) 22] [(75 20 15 38) 15] [(14 37 100 32) 14] [(45 97 100 56) 45] [(63 46 67 90) 46] [(19 32 46 1) 1] [(67 86 75 20) 20] [(32 -68 -50 65) -68] [(38 -53 -87 82) -87] [(-71 -11 73 51) -71] [(72 -47 -87 -9) -87] [(-73 8 -92 71) -92] [(54 73 -68 28) -68] [(-13 26 20 49) -13] [(-50 9 14 28) -50] [(66 8 77 -91) -91] [(-88 0 -59 54) -88] [(85 5 -72 -6) -72] [(-91 -10 -1 -68) -91] [(-39 -45 8 13) -45] [(-51 15 -50 -37) -51] [(-28 81 67 61) -28] [(-57 -17 -16 -35) -57] [(-40 99 99 -46) -46] [(-12 -73 -4 53) -73] [(-2 -24 -91 11) -91] [(78 -28 -84 -46) -84] [(60 99 -63 96) -63] [(-25 83 -36 -8) -36] [(-73 40 -67 -84) -84] [(4 -12 -13 84) -13] [(-5 -41 85 25) -41] [(29 83 52 -77) -77] [(-80 -45 -39 43) -80] [(78 50 44 57) 44] [(56 89 -3 -68) -68] [(40 3 -53 -97) -97] [(71 -95 68 39) -95] [(10 16 31 36) 10] [(-54 -76 -63 -62) -76] [(-33 -49 -33 92) -49] [(47 23 86 81) 23] [(10 11 -96 -69) -96] [(39 93 80 -11) -11] [(-96 24 -46 -84) -96] [(19 -94 -50 -33) -94] [(-28 69 -17 66) -28] [(-48 89 34 -33) -48] [(-85 -76 95 98) -85] [(-23 -7 87 -27) -27] [(-21 94 51 22) -21] [(81 -58 -69 -86) -86] [(89 89 50 94) 50] [(17 -34 -43 -76) -76] [(15 57 11 71) 11] [(-18 -30 20 60) -30] [(59 -63 -34 -74) -74] [(-47 44 15 42) -47] [(68 -8 61 3) -8] [(28 13 -74 10) -74] [(-6 40 91 64) -6] [(-80 59 -28 -46) -80] [(87 -13 19 -49) -49] [(88 -28 61 99) -28] [(71 33 92 93) 33] [(58 9 35 52) 9] [(67 66 75 48) 48])
uniform-addition-and-deletion-rate = 0.09
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[68 49 49 49] 49]
Train Case:   6 | Input/Output: [[-44 -54 -44 -44] -54]
Train Case:   7 | Input/Output: [[13 13 -14 13] -14]
Train Case:   8 | Input/Output: [[96 96 96 59] 59]
Train Case:   9 | Input/Output: [[47 -81 47 47] -81]
Train Case:  10 | Input/Output: [[-26 77 -26 -26] -26]
Train Case:  11 | Input/Output: [[-72 -9 -9 -9] -72]
Train Case:  12 | Input/Output: [[29 29 -11 29] -11]
Train Case:  13 | Input/Output: [[9 92 9 9] 9]
Train Case:  14 | Input/Output: [[69 -91 69 69] -91]
Train Case:  15 | Input/Output: [(-97 -97 -97 -97) -97]
Train Case:  16 | Input/Output: [(17 17 17 17) 17]
Train Case:  17 | Input/Output: [(-62 -62 -62 -62) -62]
Train Case:  18 | Input/Output: [(-95 -95 -95 -95) -95]
Train Case:  19 | Input/Output: [(0 0 0 0) 0]
Train Case:  20 | Input/Output: [(23 85 92 13) 13]
Train Case:  21 | Input/Output: [(97 83 77 100) 77]
Train Case:  22 | Input/Output: [(67 17 47 82) 17]
Train Case:  23 | Input/Output: [(52 18 89 24) 18]
Train Case:  24 | Input/Output: [(9 91 54 50) 9]
Train Case:  25 | Input/Output: [(38 53 14 80) 14]
Train Case:  26 | Input/Output: [(11 87 2 3) 2]
Train Case:  27 | Input/Output: [(91 34 36 4) 4]
Train Case:  28 | Input/Output: [(70 65 83 8) 8]
Train Case:  29 | Input/Output: [(75 92 72 77) 72]
Train Case:  30 | Input/Output: [(56 14 77 70) 14]
Train Case:  31 | Input/Output: [(11 93 9 73) 9]
Train Case:  32 | Input/Output: [(87 82 82 82) 82]
Train Case:  33 | Input/Output: [(99 22 38 34) 22]
Train Case:  34 | Input/Output: [(75 20 15 38) 15]
Train Case:  35 | Input/Output: [(14 37 100 32) 14]
Train Case:  36 | Input/Output: [(45 97 100 56) 45]
Train Case:  37 | Input/Output: [(63 46 67 90) 46]
Train Case:  38 | Input/Output: [(19 32 46 1) 1]
Train Case:  39 | Input/Output: [(67 86 75 20) 20]
Train Case:  40 | Input/Output: [(32 -68 -50 65) -68]
Train Case:  41 | Input/Output: [(38 -53 -87 82) -87]
Train Case:  42 | Input/Output: [(-71 -11 73 51) -71]
Train Case:  43 | Input/Output: [(72 -47 -87 -9) -87]
Train Case:  44 | Input/Output: [(-73 8 -92 71) -92]
Train Case:  45 | Input/Output: [(54 73 -68 28) -68]
Train Case:  46 | Input/Output: [(-13 26 20 49) -13]
Train Case:  47 | Input/Output: [(-50 9 14 28) -50]
Train Case:  48 | Input/Output: [(66 8 77 -91) -91]
Train Case:  49 | Input/Output: [(-88 0 -59 54) -88]
Train Case:  50 | Input/Output: [(85 5 -72 -6) -72]
Train Case:  51 | Input/Output: [(-91 -10 -1 -68) -91]
Train Case:  52 | Input/Output: [(-39 -45 8 13) -45]
Train Case:  53 | Input/Output: [(-51 15 -50 -37) -51]
Train Case:  54 | Input/Output: [(-28 81 67 61) -28]
Train Case:  55 | Input/Output: [(-57 -17 -16 -35) -57]
Train Case:  56 | Input/Output: [(-40 99 99 -46) -46]
Train Case:  57 | Input/Output: [(-12 -73 -4 53) -73]
Train Case:  58 | Input/Output: [(-2 -24 -91 11) -91]
Train Case:  59 | Input/Output: [(78 -28 -84 -46) -84]
Train Case:  60 | Input/Output: [(60 99 -63 96) -63]
Train Case:  61 | Input/Output: [(-25 83 -36 -8) -36]
Train Case:  62 | Input/Output: [(-73 40 -67 -84) -84]
Train Case:  63 | Input/Output: [(4 -12 -13 84) -13]
Train Case:  64 | Input/Output: [(-5 -41 85 25) -41]
Train Case:  65 | Input/Output: [(29 83 52 -77) -77]
Train Case:  66 | Input/Output: [(-80 -45 -39 43) -80]
Train Case:  67 | Input/Output: [(78 50 44 57) 44]
Train Case:  68 | Input/Output: [(56 89 -3 -68) -68]
Train Case:  69 | Input/Output: [(40 3 -53 -97) -97]
Train Case:  70 | Input/Output: [(71 -95 68 39) -95]
Train Case:  71 | Input/Output: [(10 16 31 36) 10]
Train Case:  72 | Input/Output: [(-54 -76 -63 -62) -76]
Train Case:  73 | Input/Output: [(-33 -49 -33 92) -49]
Train Case:  74 | Input/Output: [(47 23 86 81) 23]
Train Case:  75 | Input/Output: [(10 11 -96 -69) -96]
Train Case:  76 | Input/Output: [(39 93 80 -11) -11]
Train Case:  77 | Input/Output: [(-96 24 -46 -84) -96]
Train Case:  78 | Input/Output: [(19 -94 -50 -33) -94]
Train Case:  79 | Input/Output: [(-28 69 -17 66) -28]
Train Case:  80 | Input/Output: [(-48 89 34 -33) -48]
Train Case:  81 | Input/Output: [(-85 -76 95 98) -85]
Train Case:  82 | Input/Output: [(-23 -7 87 -27) -27]
Train Case:  83 | Input/Output: [(-21 94 51 22) -21]
Train Case:  84 | Input/Output: [(81 -58 -69 -86) -86]
Train Case:  85 | Input/Output: [(89 89 50 94) 50]
Train Case:  86 | Input/Output: [(17 -34 -43 -76) -76]
Train Case:  87 | Input/Output: [(15 57 11 71) 11]
Train Case:  88 | Input/Output: [(-18 -30 20 60) -30]
Train Case:  89 | Input/Output: [(59 -63 -34 -74) -74]
Train Case:  90 | Input/Output: [(-47 44 15 42) -47]
Train Case:  91 | Input/Output: [(68 -8 61 3) -8]
Train Case:  92 | Input/Output: [(28 13 -74 10) -74]
Train Case:  93 | Input/Output: [(-6 40 91 64) -6]
Train Case:  94 | Input/Output: [(-80 59 -28 -46) -80]
Train Case:  95 | Input/Output: [(87 -13 19 -49) -49]
Train Case:  96 | Input/Output: [(88 -28 61 99) -28]
Train Case:  97 | Input/Output: [(71 33 92 93) 33]
Train Case:  98 | Input/Output: [(58 9 35 52) 9]
Train Case:  99 | Input/Output: [(67 66 75 48) 48]
Test Case:   0 | Input/Output: [[-90 -69 -90 -90] -90]
Test Case:   1 | Input/Output: [[-13 -13 58 -13] -13]
Test Case:   2 | Input/Output: [[39 39 -6 39] -6]
Test Case:   3 | Input/Output: [[56 -44 -44 -44] -44]
Test Case:   4 | Input/Output: [[-81 -81 -81 -4] -81]
Test Case:   5 | Input/Output: [[31 0 31 31] 0]
Test Case:   6 | Input/Output: [[-73 -73 -73 -44] -73]
Test Case:   7 | Input/Output: [[-78 -78 55 -78] -78]
Test Case:   8 | Input/Output: [[-61 61 61 61] -61]
Test Case:   9 | Input/Output: [[-27 68 -27 -27] -27]
Test Case:  10 | Input/Output: [[-31 68 -31 -31] -31]
Test Case:  11 | Input/Output: [[-74 -74 -33 -74] -74]
Test Case:  12 | Input/Output: [[-45 -45 -73 -45] -73]
Test Case:  13 | Input/Output: [[-98 -88 -98 -98] -98]
Test Case:  14 | Input/Output: [[-41 -41 -41 -75] -75]
Test Case:  15 | Input/Output: [[41 41 41 62] 41]
Test Case:  16 | Input/Output: [[92 92 92 28] 28]
Test Case:  17 | Input/Output: [[19 19 19 -26] -26]
Test Case:  18 | Input/Output: [[93 93 48 93] 48]
Test Case:  19 | Input/Output: [[82 82 77 82] 77]
Test Case:  20 | Input/Output: [[92 -44 92 92] -44]
Test Case:  21 | Input/Output: [[-62 -62 61 -62] -62]
Test Case:  22 | Input/Output: [[67 -4 67 67] -4]
Test Case:  23 | Input/Output: [[32 32 -48 32] -48]
Test Case:  24 | Input/Output: [[73 73 73 -56] -56]
Test Case:  25 | Input/Output: [[-94 65 65 65] -94]
Test Case:  26 | Input/Output: [[-83 -83 -83 65] -83]
Test Case:  27 | Input/Output: [[-99 -99 -63 -99] -99]
Test Case:  28 | Input/Output: [[-32 87 87 87] -32]
Test Case:  29 | Input/Output: [[76 76 76 -32] -32]
Test Case:  30 | Input/Output: [[1 1 93 1] 1]
Test Case:  31 | Input/Output: [[19 19 -41 19] -41]
Test Case:  32 | Input/Output: [[85 -22 85 85] -22]
Test Case:  33 | Input/Output: [[37 37 -66 37] -66]
Test Case:  34 | Input/Output: [[52 52 76 52] 52]
Test Case:  35 | Input/Output: [[-90 44 44 44] -90]
Test Case:  36 | Input/Output: [[-70 -70 -70 -72] -72]
Test Case:  37 | Input/Output: [[-46 -46 -46 47] -46]
Test Case:  38 | Input/Output: [[-74 60 -74 -74] -74]
Test Case:  39 | Input/Output: [[-71 -71 63 -71] -71]
Test Case:  40 | Input/Output: [[-28 -28 -28 34] -28]
Test Case:  41 | Input/Output: [[-17 -17 -17 -9] -17]
Test Case:  42 | Input/Output: [[-44 -44 -44 23] -44]
Test Case:  43 | Input/Output: [[65 99 99 99] 65]
Test Case:  44 | Input/Output: [[92 92 92 -98] -98]
Test Case:  45 | Input/Output: [[39 39 -74 39] -74]
Test Case:  46 | Input/Output: [[-75 45 -75 -75] -75]
Test Case:  47 | Input/Output: [[73 73 73 -99] -99]
Test Case:  48 | Input/Output: [[-57 -57 -57 -7] -57]
Test Case:  49 | Input/Output: [[-65 -65 -65 53] -65]
Test Case:  50 | Input/Output: [[-27 21 21 21] -27]
Test Case:  51 | Input/Output: [[-95 -84 -95 -95] -95]
Test Case:  52 | Input/Output: [[-60 54 54 54] -60]
Test Case:  53 | Input/Output: [[81 -30 81 81] -30]
Test Case:  54 | Input/Output: [[-14 26 -14 -14] -14]
Test Case:  55 | Input/Output: [[9 47 9 9] 9]
Test Case:  56 | Input/Output: [[-67 -67 -3 -67] -67]
Test Case:  57 | Input/Output: [[28 28 55 28] 28]
Test Case:  58 | Input/Output: [[-59 -59 -59 -36] -59]
Test Case:  59 | Input/Output: [[12 12 97 12] 12]
Test Case:  60 | Input/Output: [[-73 -73 -73 29] -73]
Test Case:  61 | Input/Output: [[-16 -67 -67 -67] -67]
Test Case:  62 | Input/Output: [[-14 29 29 29] -14]
Test Case:  63 | Input/Output: [[-69 -69 -79 -69] -79]
Test Case:  64 | Input/Output: [[-14 -18 -14 -14] -18]
Test Case:  65 | Input/Output: [[85 -96 -96 -96] -96]
Test Case:  66 | Input/Output: [[-3 -71 -3 -3] -71]
Test Case:  67 | Input/Output: [[-62 2 2 2] -62]
Test Case:  68 | Input/Output: [[-19 -19 -83 -19] -83]
Test Case:  69 | Input/Output: [[84 -55 84 84] -55]
Test Case:  70 | Input/Output: [[-41 7 7 7] -41]
Test Case:  71 | Input/Output: [[-40 -87 -87 -87] -87]
Test Case:  72 | Input/Output: [[90 90 -1 90] -1]
Test Case:  73 | Input/Output: [[-84 -84 62 -84] -84]
Test Case:  74 | Input/Output: [[-47 -27 -47 -47] -47]
Test Case:  75 | Input/Output: [[98 98 98 72] 72]
Test Case:  76 | Input/Output: [[-46 46 -46 -46] -46]
Test Case:  77 | Input/Output: [[39 39 73 39] 39]
Test Case:  78 | Input/Output: [[86 94 86 86] 86]
Test Case:  79 | Input/Output: [[-49 -49 -1 -49] -49]
Test Case:  80 | Input/Output: [[12 12 12 -74] -74]
Test Case:  81 | Input/Output: [[88 88 88 -8] -8]
Test Case:  82 | Input/Output: [[-46 95 -46 -46] -46]
Test Case:  83 | Input/Output: [[72 -95 72 72] -95]
Test Case:  84 | Input/Output: [[-84 -94 -94 -94] -94]
Test Case:  85 | Input/Output: [[-96 -36 -96 -96] -96]
Test Case:  86 | Input/Output: [[84 -75 84 84] -75]
Test Case:  87 | Input/Output: [[-94 -13 -94 -94] -94]
Test Case:  88 | Input/Output: [[-4 88 -4 -4] -4]
Test Case:  89 | Input/Output: [[-75 -75 4 -75] -75]
Test Case:  90 | Input/Output: [[0 11 11 11] 0]
Test Case:  91 | Input/Output: [[-77 -77 -77 7] -77]
Test Case:  92 | Input/Output: [[-35 -35 -35 58] -35]
Test Case:  93 | Input/Output: [[64 64 64 73] 64]
Test Case:  94 | Input/Output: [[-37 -37 -32 -37] -37]
Test Case:  95 | Input/Output: [[-32 -32 -91 -32] -91]
Test Case:  96 | Input/Output: [[-22 -57 -57 -57] -57]
Test Case:  97 | Input/Output: [[44 44 -31 44] -31]
Test Case:  98 | Input/Output: [[-49 -49 59 -49] -49]
Test Case:  99 | Input/Output: [[5 45 45 45] 5]
Test Case: 100 | Input/Output: [(-53 -53 -53 -53) -53]
Test Case: 101 | Input/Output: [(58 58 58 58) 58]
Test Case: 102 | Input/Output: [(-28 -28 -28 -28) -28]
Test Case: 103 | Input/Output: [(-44 -44 -44 -44) -44]
Test Case: 104 | Input/Output: [(12 12 12 12) 12]
Test Case: 105 | Input/Output: [(28 28 28 28) 28]
Test Case: 106 | Input/Output: [(10 10 10 10) 10]
Test Case: 107 | Input/Output: [(99 99 99 99) 99]
Test Case: 108 | Input/Output: [(-47 -47 -47 -47) -47]
Test Case: 109 | Input/Output: [(49 49 49 49) 49]
Test Case: 110 | Input/Output: [(-3 -3 -3 -3) -3]
Test Case: 111 | Input/Output: [(-41 -41 -41 -41) -41]
Test Case: 112 | Input/Output: [(-72 -72 -72 -72) -72]
Test Case: 113 | Input/Output: [(-20 -20 -20 -20) -20]
Test Case: 114 | Input/Output: [(-72 -72 -72 -72) -72]
Test Case: 115 | Input/Output: [(-31 -31 -31 -31) -31]
Test Case: 116 | Input/Output: [(-73 -73 -73 -73) -73]
Test Case: 117 | Input/Output: [(-94 -94 -94 -94) -94]
Test Case: 118 | Input/Output: [(81 81 81 81) 81]
Test Case: 119 | Input/Output: [(87 87 87 87) 87]
Test Case: 120 | Input/Output: [(93 93 93 93) 93]
Test Case: 121 | Input/Output: [(43 43 43 43) 43]
Test Case: 122 | Input/Output: [(-59 -59 -59 -59) -59]
Test Case: 123 | Input/Output: [(46 46 46 46) 46]
Test Case: 124 | Input/Output: [(-87 -87 -87 -87) -87]
Test Case: 125 | Input/Output: [(34 34 34 34) 34]
Test Case: 126 | Input/Output: [(10 10 10 10) 10]
Test Case: 127 | Input/Output: [(66 66 66 66) 66]
Test Case: 128 | Input/Output: [(-2 -2 -2 -2) -2]
Test Case: 129 | Input/Output: [(-47 -47 -47 -47) -47]
Test Case: 130 | Input/Output: [(-24 -24 -24 -24) -24]
Test Case: 131 | Input/Output: [(45 45 45 45) 45]
Test Case: 132 | Input/Output: [(-82 -82 -82 -82) -82]
Test Case: 133 | Input/Output: [(-93 -93 -93 -93) -93]
Test Case: 134 | Input/Output: [(-37 -37 -37 -37) -37]
Test Case: 135 | Input/Output: [(-12 -12 -12 -12) -12]
Test Case: 136 | Input/Output: [(31 31 31 31) 31]
Test Case: 137 | Input/Output: [(-54 -54 -54 -54) -54]
Test Case: 138 | Input/Output: [(-88 -88 -88 -88) -88]
Test Case: 139 | Input/Output: [(17 17 17 17) 17]
Test Case: 140 | Input/Output: [(-58 -58 -58 -58) -58]
Test Case: 141 | Input/Output: [(7 7 7 7) 7]
Test Case: 142 | Input/Output: [(-23 -23 -23 -23) -23]
Test Case: 143 | Input/Output: [(39 39 39 39) 39]
Test Case: 144 | Input/Output: [(71 71 71 71) 71]
Test Case: 145 | Input/Output: [(20 20 20 20) 20]
Test Case: 146 | Input/Output: [(-45 -45 -45 -45) -45]
Test Case: 147 | Input/Output: [(53 53 53 53) 53]
Test Case: 148 | Input/Output: [(24 24 24 24) 24]
Test Case: 149 | Input/Output: [(2 2 2 2) 2]
Test Case: 150 | Input/Output: [(57 57 57 57) 57]
Test Case: 151 | Input/Output: [(13 13 13 13) 13]
Test Case: 152 | Input/Output: [(7 7 7 7) 7]
Test Case: 153 | Input/Output: [(-77 -77 -77 -77) -77]
Test Case: 154 | Input/Output: [(-25 -25 -25 -25) -25]
Test Case: 155 | Input/Output: [(61 61 61 61) 61]
Test Case: 156 | Input/Output: [(-18 -18 -18 -18) -18]
Test Case: 157 | Input/Output: [(-27 -27 -27 -27) -27]
Test Case: 158 | Input/Output: [(12 12 12 12) 12]
Test Case: 159 | Input/Output: [(-91 -91 -91 -91) -91]
Test Case: 160 | Input/Output: [(52 52 52 52) 52]
Test Case: 161 | Input/Output: [(32 32 32 32) 32]
Test Case: 162 | Input/Output: [(46 46 46 46) 46]
Test Case: 163 | Input/Output: [(77 77 77 77) 77]
Test Case: 164 | Input/Output: [(-84 -84 -84 -84) -84]
Test Case: 165 | Input/Output: [(-59 -59 -59 -59) -59]
Test Case: 166 | Input/Output: [(-31 -31 -31 -31) -31]
Test Case: 167 | Input/Output: [(75 75 75 75) 75]
Test Case: 168 | Input/Output: [(16 16 16 16) 16]
Test Case: 169 | Input/Output: [(-3 -3 -3 -3) -3]
Test Case: 170 | Input/Output: [(83 83 83 83) 83]
Test Case: 171 | Input/Output: [(21 21 21 21) 21]
Test Case: 172 | Input/Output: [(17 17 17 17) 17]
Test Case: 173 | Input/Output: [(46 46 46 46) 46]
Test Case: 174 | Input/Output: [(75 75 75 75) 75]
Test Case: 175 | Input/Output: [(-70 -70 -70 -70) -70]
Test Case: 176 | Input/Output: [(96 96 96 96) 96]
Test Case: 177 | Input/Output: [(-95 -95 -95 -95) -95]
Test Case: 178 | Input/Output: [(-15 -15 -15 -15) -15]
Test Case: 179 | Input/Output: [(-68 -68 -68 -68) -68]
Test Case: 180 | Input/Output: [(19 19 19 19) 19]
Test Case: 181 | Input/Output: [(-29 -29 -29 -29) -29]
Test Case: 182 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 183 | Input/Output: [(63 63 63 63) 63]
Test Case: 184 | Input/Output: [(100 100 100 100) 100]
Test Case: 185 | Input/Output: [(-38 -38 -38 -38) -38]
Test Case: 186 | Input/Output: [(16 16 16 16) 16]
Test Case: 187 | Input/Output: [(-21 -21 -21 -21) -21]
Test Case: 188 | Input/Output: [(-36 -36 -36 -36) -36]
Test Case: 189 | Input/Output: [(-59 -59 -59 -59) -59]
Test Case: 190 | Input/Output: [(-92 -92 -92 -92) -92]
Test Case: 191 | Input/Output: [(22 22 22 22) 22]
Test Case: 192 | Input/Output: [(-23 -23 -23 -23) -23]
Test Case: 193 | Input/Output: [(-12 -12 -12 -12) -12]
Test Case: 194 | Input/Output: [(93 93 93 93) 93]
Test Case: 195 | Input/Output: [(-76 -76 -76 -76) -76]
Test Case: 196 | Input/Output: [(-85 -85 -85 -85) -85]
Test Case: 197 | Input/Output: [(-84 -84 -84 -84) -84]
Test Case: 198 | Input/Output: [(-56 -56 -56 -56) -56]
Test Case: 199 | Input/Output: [(-13 -13 -13 -13) -13]
Test Case: 200 | Input/Output: [(84 63 69 96) 63]
Test Case: 201 | Input/Output: [(0 77 38 0) 0]
Test Case: 202 | Input/Output: [(71 32 17 37) 17]
Test Case: 203 | Input/Output: [(48 6 16 15) 6]
Test Case: 204 | Input/Output: [(10 100 27 37) 10]
Test Case: 205 | Input/Output: [(0 41 35 48) 0]
Test Case: 206 | Input/Output: [(12 8 91 8) 8]
Test Case: 207 | Input/Output: [(41 86 63 60) 41]
Test Case: 208 | Input/Output: [(13 69 41 45) 13]
Test Case: 209 | Input/Output: [(38 99 41 22) 22]
Test Case: 210 | Input/Output: [(46 26 27 60) 26]
Test Case: 211 | Input/Output: [(53 1 69 25) 1]
Test Case: 212 | Input/Output: [(47 89 91 57) 47]
Test Case: 213 | Input/Output: [(66 85 45 54) 45]
Test Case: 214 | Input/Output: [(82 95 1 57) 1]
Test Case: 215 | Input/Output: [(61 64 65 94) 61]
Test Case: 216 | Input/Output: [(56 70 59 79) 56]
Test Case: 217 | Input/Output: [(0 69 99 38) 0]
Test Case: 218 | Input/Output: [(83 19 7 13) 7]
Test Case: 219 | Input/Output: [(21 14 19 16) 14]
Test Case: 220 | Input/Output: [(70 38 50 1) 1]
Test Case: 221 | Input/Output: [(34 66 33 18) 18]
Test Case: 222 | Input/Output: [(21 47 85 44) 21]
Test Case: 223 | Input/Output: [(3 3 32 23) 3]
Test Case: 224 | Input/Output: [(21 27 40 56) 21]
Test Case: 225 | Input/Output: [(46 6 80 77) 6]
Test Case: 226 | Input/Output: [(87 100 86 11) 11]
Test Case: 227 | Input/Output: [(49 94 20 72) 20]
Test Case: 228 | Input/Output: [(39 52 39 54) 39]
Test Case: 229 | Input/Output: [(20 4 79 37) 4]
Test Case: 230 | Input/Output: [(27 0 64 44) 0]
Test Case: 231 | Input/Output: [(29 47 37 30) 29]
Test Case: 232 | Input/Output: [(12 6 11 99) 6]
Test Case: 233 | Input/Output: [(3 91 3 73) 3]
Test Case: 234 | Input/Output: [(84 25 0 76) 0]
Test Case: 235 | Input/Output: [(3 43 19 78) 3]
Test Case: 236 | Input/Output: [(73 83 88 1) 1]
Test Case: 237 | Input/Output: [(21 39 74 10) 10]
Test Case: 238 | Input/Output: [(93 51 16 33) 16]
Test Case: 239 | Input/Output: [(36 38 68 66) 36]
Test Case: 240 | Input/Output: [(68 57 79 94) 57]
Test Case: 241 | Input/Output: [(56 16 61 32) 16]
Test Case: 242 | Input/Output: [(47 5 47 44) 5]
Test Case: 243 | Input/Output: [(57 70 76 56) 56]
Test Case: 244 | Input/Output: [(51 44 42 54) 42]
Test Case: 245 | Input/Output: [(40 58 24 86) 24]
Test Case: 246 | Input/Output: [(2 45 54 80) 2]
Test Case: 247 | Input/Output: [(9 99 69 66) 9]
Test Case: 248 | Input/Output: [(56 87 71 9) 9]
Test Case: 249 | Input/Output: [(86 97 22 44) 22]
Test Case: 250 | Input/Output: [(14 86 26 48) 14]
Test Case: 251 | Input/Output: [(36 82 93 60) 36]
Test Case: 252 | Input/Output: [(85 6 92 26) 6]
Test Case: 253 | Input/Output: [(73 56 39 42) 39]
Test Case: 254 | Input/Output: [(57 11 75 67) 11]
Test Case: 255 | Input/Output: [(76 4 39 52) 4]
Test Case: 256 | Input/Output: [(14 53 22 43) 14]
Test Case: 257 | Input/Output: [(17 81 74 73) 17]
Test Case: 258 | Input/Output: [(1 45 37 59) 1]
Test Case: 259 | Input/Output: [(66 45 36 70) 36]
Test Case: 260 | Input/Output: [(38 51 91 43) 38]
Test Case: 261 | Input/Output: [(77 21 92 58) 21]
Test Case: 262 | Input/Output: [(39 87 52 22) 22]
Test Case: 263 | Input/Output: [(93 98 70 30) 30]
Test Case: 264 | Input/Output: [(54 39 5 69) 5]
Test Case: 265 | Input/Output: [(1 64 3 77) 1]
Test Case: 266 | Input/Output: [(73 42 70 19) 19]
Test Case: 267 | Input/Output: [(63 88 99 59) 59]
Test Case: 268 | Input/Output: [(68 75 34 30) 30]
Test Case: 269 | Input/Output: [(69 69 65 67) 65]
Test Case: 270 | Input/Output: [(54 12 65 90) 12]
Test Case: 271 | Input/Output: [(97 39 90 48) 39]
Test Case: 272 | Input/Output: [(32 20 83 86) 20]
Test Case: 273 | Input/Output: [(52 71 62 73) 52]
Test Case: 274 | Input/Output: [(51 6 66 2) 2]
Test Case: 275 | Input/Output: [(62 75 1 8) 1]
Test Case: 276 | Input/Output: [(89 10 37 42) 10]
Test Case: 277 | Input/Output: [(58 19 85 29) 19]
Test Case: 278 | Input/Output: [(27 73 39 80) 27]
Test Case: 279 | Input/Output: [(78 25 100 98) 25]
Test Case: 280 | Input/Output: [(96 100 82 72) 72]
Test Case: 281 | Input/Output: [(74 4 94 89) 4]
Test Case: 282 | Input/Output: [(92 40 78 39) 39]
Test Case: 283 | Input/Output: [(0 49 47 8) 0]
Test Case: 284 | Input/Output: [(96 78 43 10) 10]
Test Case: 285 | Input/Output: [(75 37 90 69) 37]
Test Case: 286 | Input/Output: [(79 86 100 76) 76]
Test Case: 287 | Input/Output: [(29 7 49 48) 7]
Test Case: 288 | Input/Output: [(70 1 11 71) 1]
Test Case: 289 | Input/Output: [(87 86 79 99) 79]
Test Case: 290 | Input/Output: [(43 45 3 57) 3]
Test Case: 291 | Input/Output: [(7 48 26 96) 7]
Test Case: 292 | Input/Output: [(99 74 75 51) 51]
Test Case: 293 | Input/Output: [(35 26 0 61) 0]
Test Case: 294 | Input/Output: [(49 69 82 31) 31]
Test Case: 295 | Input/Output: [(27 86 92 9) 9]
Test Case: 296 | Input/Output: [(54 38 54 11) 11]
Test Case: 297 | Input/Output: [(15 42 17 66) 15]
Test Case: 298 | Input/Output: [(99 92 63 65) 63]
Test Case: 299 | Input/Output: [(74 15 50 33) 15]
Test Case: 300 | Input/Output: [(18 42 38 18) 18]
Test Case: 301 | Input/Output: [(13 92 93 89) 13]
Test Case: 302 | Input/Output: [(85 65 9 4) 4]
Test Case: 303 | Input/Output: [(17 15 16 67) 15]
Test Case: 304 | Input/Output: [(2 79 26 16) 2]
Test Case: 305 | Input/Output: [(46 4 28 53) 4]
Test Case: 306 | Input/Output: [(52 83 79 87) 52]
Test Case: 307 | Input/Output: [(91 67 8 85) 8]
Test Case: 308 | Input/Output: [(66 68 40 94) 40]
Test Case: 309 | Input/Output: [(49 54 36 35) 35]
Test Case: 310 | Input/Output: [(54 22 68 88) 22]
Test Case: 311 | Input/Output: [(81 76 21 30) 21]
Test Case: 312 | Input/Output: [(17 26 24 90) 17]
Test Case: 313 | Input/Output: [(77 95 35 99) 35]
Test Case: 314 | Input/Output: [(32 59 92 8) 8]
Test Case: 315 | Input/Output: [(31 70 93 95) 31]
Test Case: 316 | Input/Output: [(73 63 90 47) 47]
Test Case: 317 | Input/Output: [(85 25 48 35) 25]
Test Case: 318 | Input/Output: [(89 50 0 75) 0]
Test Case: 319 | Input/Output: [(75 35 84 85) 35]
Test Case: 320 | Input/Output: [(96 29 74 75) 29]
Test Case: 321 | Input/Output: [(92 53 54 40) 40]
Test Case: 322 | Input/Output: [(17 32 65 41) 17]
Test Case: 323 | Input/Output: [(55 56 82 40) 40]
Test Case: 324 | Input/Output: [(39 60 42 11) 11]
Test Case: 325 | Input/Output: [(74 88 49 49) 49]
Test Case: 326 | Input/Output: [(4 29 40 26) 4]
Test Case: 327 | Input/Output: [(50 19 36 67) 19]
Test Case: 328 | Input/Output: [(52 36 20 41) 20]
Test Case: 329 | Input/Output: [(4 12 0 72) 0]
Test Case: 330 | Input/Output: [(30 49 57 78) 30]
Test Case: 331 | Input/Output: [(10 95 4 94) 4]
Test Case: 332 | Input/Output: [(47 23 30 5) 5]
Test Case: 333 | Input/Output: [(32 8 51 32) 8]
Test Case: 334 | Input/Output: [(26 1 41 36) 1]
Test Case: 335 | Input/Output: [(34 21 94 19) 19]
Test Case: 336 | Input/Output: [(70 53 74 19) 19]
Test Case: 337 | Input/Output: [(69 41 97 68) 41]
Test Case: 338 | Input/Output: [(14 74 88 9) 9]
Test Case: 339 | Input/Output: [(54 25 72 85) 25]
Test Case: 340 | Input/Output: [(70 22 66 64) 22]
Test Case: 341 | Input/Output: [(91 99 80 46) 46]
Test Case: 342 | Input/Output: [(19 87 22 83) 19]
Test Case: 343 | Input/Output: [(62 57 96 37) 37]
Test Case: 344 | Input/Output: [(73 97 18 32) 18]
Test Case: 345 | Input/Output: [(43 95 46 67) 43]
Test Case: 346 | Input/Output: [(93 93 0 56) 0]
Test Case: 347 | Input/Output: [(41 25 37 10) 10]
Test Case: 348 | Input/Output: [(40 8 63 79) 8]
Test Case: 349 | Input/Output: [(82 89 29 22) 22]
Test Case: 350 | Input/Output: [(53 51 76 91) 51]
Test Case: 351 | Input/Output: [(78 70 50 29) 29]
Test Case: 352 | Input/Output: [(77 21 82 72) 21]
Test Case: 353 | Input/Output: [(45 19 33 69) 19]
Test Case: 354 | Input/Output: [(18 78 81 77) 18]
Test Case: 355 | Input/Output: [(95 67 37 15) 15]
Test Case: 356 | Input/Output: [(0 38 33 71) 0]
Test Case: 357 | Input/Output: [(93 81 66 31) 31]
Test Case: 358 | Input/Output: [(35 51 37 16) 16]
Test Case: 359 | Input/Output: [(49 43 75 53) 43]
Test Case: 360 | Input/Output: [(70 25 36 83) 25]
Test Case: 361 | Input/Output: [(84 6 23 53) 6]
Test Case: 362 | Input/Output: [(24 21 16 43) 16]
Test Case: 363 | Input/Output: [(70 31 50 77) 31]
Test Case: 364 | Input/Output: [(55 66 17 80) 17]
Test Case: 365 | Input/Output: [(60 4 31 35) 4]
Test Case: 366 | Input/Output: [(12 13 73 84) 12]
Test Case: 367 | Input/Output: [(40 65 43 37) 37]
Test Case: 368 | Input/Output: [(52 32 29 78) 29]
Test Case: 369 | Input/Output: [(52 24 81 3) 3]
Test Case: 370 | Input/Output: [(26 77 29 43) 26]
Test Case: 371 | Input/Output: [(55 17 53 4) 4]
Test Case: 372 | Input/Output: [(71 58 63 45) 45]
Test Case: 373 | Input/Output: [(37 99 56 47) 37]
Test Case: 374 | Input/Output: [(72 82 87 27) 27]
Test Case: 375 | Input/Output: [(25 92 77 48) 25]
Test Case: 376 | Input/Output: [(83 79 77 40) 40]
Test Case: 377 | Input/Output: [(26 61 42 100) 26]
Test Case: 378 | Input/Output: [(31 82 74 34) 31]
Test Case: 379 | Input/Output: [(43 3 7 92) 3]
Test Case: 380 | Input/Output: [(30 53 34 83) 30]
Test Case: 381 | Input/Output: [(25 28 68 23) 23]
Test Case: 382 | Input/Output: [(7 23 52 39) 7]
Test Case: 383 | Input/Output: [(58 59 66 10) 10]
Test Case: 384 | Input/Output: [(80 32 35 53) 32]
Test Case: 385 | Input/Output: [(76 48 71 79) 48]
Test Case: 386 | Input/Output: [(98 80 10 55) 10]
Test Case: 387 | Input/Output: [(84 9 60 4) 4]
Test Case: 388 | Input/Output: [(12 16 36 82) 12]
Test Case: 389 | Input/Output: [(91 34 33 57) 33]
Test Case: 390 | Input/Output: [(33 16 96 88) 16]
Test Case: 391 | Input/Output: [(100 67 66 80) 66]
Test Case: 392 | Input/Output: [(58 76 99 13) 13]
Test Case: 393 | Input/Output: [(85 7 57 58) 7]
Test Case: 394 | Input/Output: [(78 16 83 39) 16]
Test Case: 395 | Input/Output: [(3 94 62 96) 3]
Test Case: 396 | Input/Output: [(11 19 38 90) 11]
Test Case: 397 | Input/Output: [(5 77 14 22) 5]
Test Case: 398 | Input/Output: [(63 62 23 94) 23]
Test Case: 399 | Input/Output: [(72 94 7 70) 7]
Test Case: 400 | Input/Output: [(87 75 -92 66) -92]
Test Case: 401 | Input/Output: [(-3 -99 -15 72) -99]
Test Case: 402 | Input/Output: [(24 32 95 70) 24]
Test Case: 403 | Input/Output: [(-44 -82 -2 31) -82]
Test Case: 404 | Input/Output: [(-56 11 -64 6) -64]
Test Case: 405 | Input/Output: [(47 9 78 -91) -91]
Test Case: 406 | Input/Output: [(-36 -97 -7 65) -97]
Test Case: 407 | Input/Output: [(21 13 48 77) 13]
Test Case: 408 | Input/Output: [(8 2 47 82) 2]
Test Case: 409 | Input/Output: [(-8 -11 36 46) -11]
Test Case: 410 | Input/Output: [(-96 -70 -67 -49) -96]
Test Case: 411 | Input/Output: [(-14 -71 80 -18) -71]
Test Case: 412 | Input/Output: [(33 -89 -81 -82) -89]
Test Case: 413 | Input/Output: [(-9 -13 27 -29) -29]
Test Case: 414 | Input/Output: [(24 -14 86 57) -14]
Test Case: 415 | Input/Output: [(63 48 60 24) 24]
Test Case: 416 | Input/Output: [(-67 40 -41 78) -67]
Test Case: 417 | Input/Output: [(-36 3 -19 100) -36]
Test Case: 418 | Input/Output: [(-60 -74 -81 -10) -81]
Test Case: 419 | Input/Output: [(87 -65 -69 73) -69]
Test Case: 420 | Input/Output: [(-22 -23 -12 -3) -23]
Test Case: 421 | Input/Output: [(-67 -91 -56 51) -91]
Test Case: 422 | Input/Output: [(-27 -61 -40 31) -61]
Test Case: 423 | Input/Output: [(-81 27 -99 -44) -99]
Test Case: 424 | Input/Output: [(-87 -90 -26 -32) -90]
Test Case: 425 | Input/Output: [(-73 -63 -46 -36) -73]
Test Case: 426 | Input/Output: [(-20 71 -9 32) -20]
Test Case: 427 | Input/Output: [(-30 -52 15 -26) -52]
Test Case: 428 | Input/Output: [(-98 -17 -53 47) -98]
Test Case: 429 | Input/Output: [(-13 49 1 9) -13]
Test Case: 430 | Input/Output: [(81 -21 -66 12) -66]
Test Case: 431 | Input/Output: [(69 43 -88 -68) -88]
Test Case: 432 | Input/Output: [(-8 46 31 -55) -55]
Test Case: 433 | Input/Output: [(70 -71 -56 -64) -71]
Test Case: 434 | Input/Output: [(-38 99 82 41) -38]
Test Case: 435 | Input/Output: [(74 9 36 69) 9]
Test Case: 436 | Input/Output: [(-51 -32 -100 77) -100]
Test Case: 437 | Input/Output: [(-54 27 66 -73) -73]
Test Case: 438 | Input/Output: [(-84 -9 77 61) -84]
Test Case: 439 | Input/Output: [(1 -40 -17 -85) -85]
Test Case: 440 | Input/Output: [(17 89 46 -98) -98]
Test Case: 441 | Input/Output: [(0 1 -93 -13) -93]
Test Case: 442 | Input/Output: [(-98 28 -73 35) -98]
Test Case: 443 | Input/Output: [(41 -28 58 -52) -52]
Test Case: 444 | Input/Output: [(-90 -7 30 43) -90]
Test Case: 445 | Input/Output: [(96 3 70 -34) -34]
Test Case: 446 | Input/Output: [(98 -84 98 82) -84]
Test Case: 447 | Input/Output: [(36 30 -46 -46) -46]
Test Case: 448 | Input/Output: [(38 19 -59 79) -59]
Test Case: 449 | Input/Output: [(-96 68 49 -65) -96]
Test Case: 450 | Input/Output: [(-64 16 -54 100) -64]
Test Case: 451 | Input/Output: [(63 -75 -76 -33) -76]
Test Case: 452 | Input/Output: [(-21 -52 -29 91) -52]
Test Case: 453 | Input/Output: [(18 -91 -96 39) -96]
Test Case: 454 | Input/Output: [(-11 -78 -66 61) -78]
Test Case: 455 | Input/Output: [(-23 100 -78 49) -78]
Test Case: 456 | Input/Output: [(-63 62 -53 -4) -63]
Test Case: 457 | Input/Output: [(76 -2 -4 -84) -84]
Test Case: 458 | Input/Output: [(-87 80 5 -57) -87]
Test Case: 459 | Input/Output: [(80 -26 -48 -96) -96]
Test Case: 460 | Input/Output: [(-98 -19 43 32) -98]
Test Case: 461 | Input/Output: [(-68 -60 -55 4) -68]
Test Case: 462 | Input/Output: [(63 -65 -100 55) -100]
Test Case: 463 | Input/Output: [(-29 -36 36 -60) -60]
Test Case: 464 | Input/Output: [(22 86 -3 10) -3]
Test Case: 465 | Input/Output: [(-64 -91 -71 10) -91]
Test Case: 466 | Input/Output: [(4 -34 -22 -49) -49]
Test Case: 467 | Input/Output: [(-56 17 -82 25) -82]
Test Case: 468 | Input/Output: [(-83 -60 86 -13) -83]
Test Case: 469 | Input/Output: [(-62 -72 -42 57) -72]
Test Case: 470 | Input/Output: [(-59 87 77 40) -59]
Test Case: 471 | Input/Output: [(-63 47 26 31) -63]
Test Case: 472 | Input/Output: [(-2 38 -28 86) -28]
Test Case: 473 | Input/Output: [(55 16 39 -71) -71]
Test Case: 474 | Input/Output: [(-38 45 -73 61) -73]
Test Case: 475 | Input/Output: [(-21 9 -96 -38) -96]
Test Case: 476 | Input/Output: [(-32 -27 32 45) -32]
Test Case: 477 | Input/Output: [(90 -5 -56 96) -56]
Test Case: 478 | Input/Output: [(-12 14 57 84) -12]
Test Case: 479 | Input/Output: [(5 4 3 74) 3]
Test Case: 480 | Input/Output: [(-28 -74 35 -76) -76]
Test Case: 481 | Input/Output: [(31 66 -79 18) -79]
Test Case: 482 | Input/Output: [(-7 -9 -85 -50) -85]
Test Case: 483 | Input/Output: [(-53 -31 23 23) -53]
Test Case: 484 | Input/Output: [(58 52 -55 74) -55]
Test Case: 485 | Input/Output: [(57 75 38 78) 38]
Test Case: 486 | Input/Output: [(9 89 92 7) 7]
Test Case: 487 | Input/Output: [(-25 94 55 -100) -100]
Test Case: 488 | Input/Output: [(15 66 92 -36) -36]
Test Case: 489 | Input/Output: [(-12 73 -81 20) -81]
Test Case: 490 | Input/Output: [(87 47 65 -57) -57]
Test Case: 491 | Input/Output: [(-21 28 23 77) -21]
Test Case: 492 | Input/Output: [(69 40 -96 62) -96]
Test Case: 493 | Input/Output: [(41 -30 0 58) -30]
Test Case: 494 | Input/Output: [(-96 -43 92 83) -96]
Test Case: 495 | Input/Output: [(23 56 -2 -81) -81]
Test Case: 496 | Input/Output: [(-36 81 -36 96) -36]
Test Case: 497 | Input/Output: [(65 60 -58 24) -58]
Test Case: 498 | Input/Output: [(94 -14 44 64) -14]
Test Case: 499 | Input/Output: [(-63 -67 80 -6) -67]
Test Case: 500 | Input/Output: [(-8 0 21 21) -8]
Test Case: 501 | Input/Output: [(7 -21 2 94) -21]
Test Case: 502 | Input/Output: [(79 -35 16 -89) -89]
Test Case: 503 | Input/Output: [(17 86 -69 36) -69]
Test Case: 504 | Input/Output: [(-7 97 -29 87) -29]
Test Case: 505 | Input/Output: [(54 12 -95 46) -95]
Test Case: 506 | Input/Output: [(-58 -25 7 -64) -64]
Test Case: 507 | Input/Output: [(71 -86 -9 60) -86]
Test Case: 508 | Input/Output: [(38 -38 -56 40) -56]
Test Case: 509 | Input/Output: [(-80 51 100 -69) -80]
Test Case: 510 | Input/Output: [(75 81 -24 54) -24]
Test Case: 511 | Input/Output: [(-87 -78 -2 99) -87]
Test Case: 512 | Input/Output: [(-37 -44 72 -77) -77]
Test Case: 513 | Input/Output: [(-31 -9 -60 33) -60]
Test Case: 514 | Input/Output: [(-99 -80 69 -31) -99]
Test Case: 515 | Input/Output: [(7 73 -48 -63) -63]
Test Case: 516 | Input/Output: [(47 -6 68 -8) -8]
Test Case: 517 | Input/Output: [(-24 -92 15 -1) -92]
Test Case: 518 | Input/Output: [(-33 -31 -9 -58) -58]
Test Case: 519 | Input/Output: [(-2 21 85 -55) -55]
Test Case: 520 | Input/Output: [(75 83 24 85) 24]
Test Case: 521 | Input/Output: [(82 91 56 -20) -20]
Test Case: 522 | Input/Output: [(-86 9 13 -83) -86]
Test Case: 523 | Input/Output: [(38 75 12 92) 12]
Test Case: 524 | Input/Output: [(20 -37 -13 68) -37]
Test Case: 525 | Input/Output: [(27 13 -46 -89) -89]
Test Case: 526 | Input/Output: [(9 11 -62 44) -62]
Test Case: 527 | Input/Output: [(5 32 56 -71) -71]
Test Case: 528 | Input/Output: [(-21 100 8 31) -21]
Test Case: 529 | Input/Output: [(11 63 56 -31) -31]
Test Case: 530 | Input/Output: [(10 -13 -6 41) -13]
Test Case: 531 | Input/Output: [(68 87 -56 -2) -56]
Test Case: 532 | Input/Output: [(-37 47 -41 15) -41]
Test Case: 533 | Input/Output: [(85 -44 -19 26) -44]
Test Case: 534 | Input/Output: [(-57 -25 -43 -29) -57]
Test Case: 535 | Input/Output: [(-91 -16 98 41) -91]
Test Case: 536 | Input/Output: [(-59 33 -15 -48) -59]
Test Case: 537 | Input/Output: [(63 -96 -28 21) -96]
Test Case: 538 | Input/Output: [(64 -19 -96 73) -96]
Test Case: 539 | Input/Output: [(-1 79 74 -74) -74]
Test Case: 540 | Input/Output: [(79 -15 5 -46) -46]
Test Case: 541 | Input/Output: [(32 -37 -42 -45) -45]
Test Case: 542 | Input/Output: [(-70 -5 26 -68) -70]
Test Case: 543 | Input/Output: [(-61 -64 87 62) -64]
Test Case: 544 | Input/Output: [(52 73 24 -98) -98]
Test Case: 545 | Input/Output: [(75 87 -36 9) -36]
Test Case: 546 | Input/Output: [(82 -81 -94 -56) -94]
Test Case: 547 | Input/Output: [(-28 36 -28 77) -28]
Test Case: 548 | Input/Output: [(-11 -38 98 39) -38]
Test Case: 549 | Input/Output: [(-96 3 -61 -99) -99]
Test Case: 550 | Input/Output: [(-9 47 -10 -51) -51]
Test Case: 551 | Input/Output: [(65 9 21 82) 9]
Test Case: 552 | Input/Output: [(-14 9 17 23) -14]
Test Case: 553 | Input/Output: [(35 -7 -84 58) -84]
Test Case: 554 | Input/Output: [(-69 83 -82 -9) -82]
Test Case: 555 | Input/Output: [(70 23 84 -48) -48]
Test Case: 556 | Input/Output: [(-79 -30 -59 -15) -79]
Test Case: 557 | Input/Output: [(19 44 24 -18) -18]
Test Case: 558 | Input/Output: [(85 -10 18 -38) -38]
Test Case: 559 | Input/Output: [(76 -76 47 -13) -76]
Test Case: 560 | Input/Output: [(62 -24 -100 37) -100]
Test Case: 561 | Input/Output: [(-57 68 -88 -75) -88]
Test Case: 562 | Input/Output: [(50 -28 36 -8) -28]
Test Case: 563 | Input/Output: [(85 63 61 -2) -2]
Test Case: 564 | Input/Output: [(-14 13 -79 -9) -79]
Test Case: 565 | Input/Output: [(-51 -95 -24 -45) -95]
Test Case: 566 | Input/Output: [(-84 53 -4 -16) -84]
Test Case: 567 | Input/Output: [(79 -61 18 58) -61]
Test Case: 568 | Input/Output: [(-6 -60 -60 -57) -60]
Test Case: 569 | Input/Output: [(25 23 82 2) 2]
Test Case: 570 | Input/Output: [(-84 -96 -53 -48) -96]
Test Case: 571 | Input/Output: [(3 3 10 47) 3]
Test Case: 572 | Input/Output: [(-84 39 -23 -79) -84]
Test Case: 573 | Input/Output: [(-88 -86 -50 -52) -88]
Test Case: 574 | Input/Output: [(82 59 -93 -97) -97]
Test Case: 575 | Input/Output: [(0 91 -22 50) -22]
Test Case: 576 | Input/Output: [(-3 16 -41 -72) -72]
Test Case: 577 | Input/Output: [(77 -10 -50 9) -50]
Test Case: 578 | Input/Output: [(83 100 -53 48) -53]
Test Case: 579 | Input/Output: [(77 -35 45 92) -35]
Test Case: 580 | Input/Output: [(71 -67 -96 -48) -96]
Test Case: 581 | Input/Output: [(19 24 12 45) 12]
Test Case: 582 | Input/Output: [(-96 91 5 51) -96]
Test Case: 583 | Input/Output: [(-55 -94 -96 4) -96]
Test Case: 584 | Input/Output: [(-13 -84 -83 -72) -84]
Test Case: 585 | Input/Output: [(-51 -56 10 89) -56]
Test Case: 586 | Input/Output: [(61 -40 -79 73) -79]
Test Case: 587 | Input/Output: [(97 13 -58 -69) -69]
Test Case: 588 | Input/Output: [(-94 66 97 37) -94]
Test Case: 589 | Input/Output: [(83 49 -9 62) -9]
Test Case: 590 | Input/Output: [(84 -6 23 -32) -32]
Test Case: 591 | Input/Output: [(-25 -40 3 -70) -70]
Test Case: 592 | Input/Output: [(-39 85 -63 91) -63]
Test Case: 593 | Input/Output: [(17 94 -98 -85) -98]
Test Case: 594 | Input/Output: [(99 -60 -23 -97) -97]
Test Case: 595 | Input/Output: [(96 39 -71 -77) -77]
Test Case: 596 | Input/Output: [(53 -81 0 16) -81]
Test Case: 597 | Input/Output: [(85 -78 50 -16) -78]
Test Case: 598 | Input/Output: [(69 -44 10 18) -44]
Test Case: 599 | Input/Output: [(-29 -56 -86 76) -86]
Test Case: 600 | Input/Output: [(-21 -60 -80 1) -80]
Test Case: 601 | Input/Output: [(-44 75 24 -62) -62]
Test Case: 602 | Input/Output: [(79 67 65 -48) -48]
Test Case: 603 | Input/Output: [(-92 -60 64 30) -92]
Test Case: 604 | Input/Output: [(92 -68 64 -68) -68]
Test Case: 605 | Input/Output: [(0 -18 -83 -33) -83]
Test Case: 606 | Input/Output: [(-13 40 -51 -38) -51]
Test Case: 607 | Input/Output: [(-23 -2 -57 -97) -97]
Test Case: 608 | Input/Output: [(65 -86 -43 63) -86]
Test Case: 609 | Input/Output: [(30 -21 -52 76) -52]
Test Case: 610 | Input/Output: [(28 -33 61 32) -33]
Test Case: 611 | Input/Output: [(0 -31 26 -7) -31]
Test Case: 612 | Input/Output: [(89 15 -58 95) -58]
Test Case: 613 | Input/Output: [(12 -30 -66 95) -66]
Test Case: 614 | Input/Output: [(70 41 51 50) 41]
Test Case: 615 | Input/Output: [(4 -31 -67 -11) -67]
Test Case: 616 | Input/Output: [(98 39 -38 -6) -38]
Test Case: 617 | Input/Output: [(-59 6 32 -97) -97]
Test Case: 618 | Input/Output: [(57 59 -41 34) -41]
Test Case: 619 | Input/Output: [(66 -2 -92 80) -92]
Test Case: 620 | Input/Output: [(-7 92 -95 85) -95]
Test Case: 621 | Input/Output: [(25 -1 -48 14) -48]
Test Case: 622 | Input/Output: [(64 -19 -79 72) -79]
Test Case: 623 | Input/Output: [(-94 58 -36 100) -94]
Test Case: 624 | Input/Output: [(-5 66 88 -39) -39]
Test Case: 625 | Input/Output: [(-87 39 25 -100) -100]
Test Case: 626 | Input/Output: [(-88 -11 79 52) -88]
Test Case: 627 | Input/Output: [(68 -71 -65 -77) -77]
Test Case: 628 | Input/Output: [(73 -56 99 45) -56]
Test Case: 629 | Input/Output: [(19 -8 20 -73) -73]
Test Case: 630 | Input/Output: [(87 -58 -36 54) -58]
Test Case: 631 | Input/Output: [(-14 45 52 -84) -84]
Test Case: 632 | Input/Output: [(-39 -52 -41 83) -52]
Test Case: 633 | Input/Output: [(-75 84 71 -5) -75]
Test Case: 634 | Input/Output: [(-52 -8 -81 -58) -81]
Test Case: 635 | Input/Output: [(70 -90 63 -25) -90]
Test Case: 636 | Input/Output: [(-33 51 82 0) -33]
Test Case: 637 | Input/Output: [(-23 -75 22 -71) -75]
Test Case: 638 | Input/Output: [(81 -2 -92 -36) -92]
Test Case: 639 | Input/Output: [(25 -36 -67 -65) -67]
Test Case: 640 | Input/Output: [(-46 -64 7 -59) -64]
Test Case: 641 | Input/Output: [(-31 -41 -33 -45) -45]
Test Case: 642 | Input/Output: [(-61 29 43 -69) -69]
Test Case: 643 | Input/Output: [(-41 15 -79 56) -79]
Test Case: 644 | Input/Output: [(-7 -47 -41 62) -47]
Test Case: 645 | Input/Output: [(-6 32 88 80) -6]
Test Case: 646 | Input/Output: [(-99 73 -13 33) -99]
Test Case: 647 | Input/Output: [(5 -56 -23 -31) -56]
Test Case: 648 | Input/Output: [(83 73 56 16) 16]
Test Case: 649 | Input/Output: [(96 34 3 59) 3]
Test Case: 650 | Input/Output: [(0 15 -74 94) -74]
Test Case: 651 | Input/Output: [(-54 31 98 -37) -54]
Test Case: 652 | Input/Output: [(-12 -90 44 -95) -95]
Test Case: 653 | Input/Output: [(57 15 25 44) 15]
Test Case: 654 | Input/Output: [(-34 54 -10 -90) -90]
Test Case: 655 | Input/Output: [(28 8 0 18) 0]
Test Case: 656 | Input/Output: [(94 5 -25 20) -25]
Test Case: 657 | Input/Output: [(-43 -5 73 15) -43]
Test Case: 658 | Input/Output: [(-83 16 -36 -25) -83]
Test Case: 659 | Input/Output: [(77 44 -15 -54) -54]
Test Case: 660 | Input/Output: [(-6 0 69 -41) -41]
Test Case: 661 | Input/Output: [(18 47 -94 -46) -94]
Test Case: 662 | Input/Output: [(-62 -77 55 -8) -77]
Test Case: 663 | Input/Output: [(68 -46 47 -12) -46]
Test Case: 664 | Input/Output: [(5 57 57 83) 5]
Test Case: 665 | Input/Output: [(-8 69 98 95) -8]
Test Case: 666 | Input/Output: [(-83 -86 -35 54) -86]
Test Case: 667 | Input/Output: [(-3 -54 -35 -52) -54]
Test Case: 668 | Input/Output: [(45 -100 -33 -8) -100]
Test Case: 669 | Input/Output: [(8 34 49 74) 8]
Test Case: 670 | Input/Output: [(-51 -84 -4 77) -84]
Test Case: 671 | Input/Output: [(-93 -8 95 74) -93]
Test Case: 672 | Input/Output: [(-46 21 -40 21) -46]
Test Case: 673 | Input/Output: [(53 -51 -68 14) -68]
Test Case: 674 | Input/Output: [(95 -100 75 -63) -100]
Test Case: 675 | Input/Output: [(93 81 -28 90) -28]
Test Case: 676 | Input/Output: [(-59 93 21 45) -59]
Test Case: 677 | Input/Output: [(-75 -89 51 -71) -89]
Test Case: 678 | Input/Output: [(54 -58 -4 37) -58]
Test Case: 679 | Input/Output: [(-91 -26 -75 31) -91]
Test Case: 680 | Input/Output: [(48 18 26 61) 18]
Test Case: 681 | Input/Output: [(-59 -32 -98 45) -98]
Test Case: 682 | Input/Output: [(71 51 -99 -77) -99]
Test Case: 683 | Input/Output: [(37 73 70 -19) -19]
Test Case: 684 | Input/Output: [(61 -79 -69 94) -79]
Test Case: 685 | Input/Output: [(94 58 -69 48) -69]
Test Case: 686 | Input/Output: [(-10 -72 -23 -75) -75]
Test Case: 687 | Input/Output: [(70 3 -87 -47) -87]
Test Case: 688 | Input/Output: [(91 -65 8 -55) -65]
Test Case: 689 | Input/Output: [(-21 90 48 24) -21]
Test Case: 690 | Input/Output: [(89 -47 24 -46) -47]
Test Case: 691 | Input/Output: [(90 -16 89 36) -16]
Test Case: 692 | Input/Output: [(-40 97 -32 -70) -70]
Test Case: 693 | Input/Output: [(35 50 80 70) 35]
Test Case: 694 | Input/Output: [(86 -44 27 -37) -44]
Test Case: 695 | Input/Output: [(-84 -18 -87 -16) -87]
Test Case: 696 | Input/Output: [(-43 -24 -34 -1) -43]
Test Case: 697 | Input/Output: [(-61 -44 -4 -87) -87]
Test Case: 698 | Input/Output: [(-88 -33 -5 6) -88]
Test Case: 699 | Input/Output: [(-85 -21 90 -43) -85]
Test Case: 700 | Input/Output: [(83 87 -71 12) -71]
Test Case: 701 | Input/Output: [(-14 41 -79 -78) -79]
Test Case: 702 | Input/Output: [(-53 -83 32 -34) -83]
Test Case: 703 | Input/Output: [(-91 -87 -71 -2) -91]
Test Case: 704 | Input/Output: [(-34 -28 9 23) -34]
Test Case: 705 | Input/Output: [(-76 -32 36 -90) -90]
Test Case: 706 | Input/Output: [(-14 4 -83 -71) -83]
Test Case: 707 | Input/Output: [(86 -29 -8 14) -29]
Test Case: 708 | Input/Output: [(35 16 -51 -58) -58]
Test Case: 709 | Input/Output: [(61 -29 3 -76) -76]
Test Case: 710 | Input/Output: [(-77 74 -12 -64) -77]
Test Case: 711 | Input/Output: [(-89 -39 -31 31) -89]
Test Case: 712 | Input/Output: [(46 -87 34 -62) -87]
Test Case: 713 | Input/Output: [(82 -93 -13 38) -93]
Test Case: 714 | Input/Output: [(22 54 70 -87) -87]
Test Case: 715 | Input/Output: [(25 96 -97 -61) -97]
Test Case: 716 | Input/Output: [(36 60 -38 32) -38]
Test Case: 717 | Input/Output: [(31 -82 -85 -25) -85]
Test Case: 718 | Input/Output: [(62 15 71 -50) -50]
Test Case: 719 | Input/Output: [(-74 84 10 -87) -87]
Test Case: 720 | Input/Output: [(9 28 90 -80) -80]
Test Case: 721 | Input/Output: [(22 38 -38 -85) -85]
Test Case: 722 | Input/Output: [(-99 -28 5 28) -99]
Test Case: 723 | Input/Output: [(-51 66 72 -52) -52]
Test Case: 724 | Input/Output: [(63 52 43 79) 43]
Test Case: 725 | Input/Output: [(62 -70 -4 3) -70]
Test Case: 726 | Input/Output: [(27 -40 83 -33) -40]
Test Case: 727 | Input/Output: [(2 -90 -84 -85) -90]
Test Case: 728 | Input/Output: [(48 71 -44 -29) -44]
Test Case: 729 | Input/Output: [(20 -15 -11 70) -15]
Test Case: 730 | Input/Output: [(-61 -40 -38 -47) -61]
Test Case: 731 | Input/Output: [(-47 -100 11 -83) -100]
Test Case: 732 | Input/Output: [(24 -92 -74 54) -92]
Test Case: 733 | Input/Output: [(-65 48 13 49) -65]
Test Case: 734 | Input/Output: [(25 -7 11 -15) -15]
Test Case: 735 | Input/Output: [(-40 -12 29 -62) -62]
Test Case: 736 | Input/Output: [(61 12 46 56) 12]
Test Case: 737 | Input/Output: [(55 43 100 78) 43]
Test Case: 738 | Input/Output: [(73 -7 -92 -36) -92]
Test Case: 739 | Input/Output: [(-25 17 30 4) -25]
Test Case: 740 | Input/Output: [(-54 45 -38 -67) -67]
Test Case: 741 | Input/Output: [(-78 81 20 -82) -82]
Test Case: 742 | Input/Output: [(16 19 -85 -39) -85]
Test Case: 743 | Input/Output: [(-97 -36 -4 -13) -97]
Test Case: 744 | Input/Output: [(-45 -100 74 -24) -100]
Test Case: 745 | Input/Output: [(42 6 18 84) 6]
Test Case: 746 | Input/Output: [(-35 -46 -68 37) -68]
Test Case: 747 | Input/Output: [(-69 -68 -3 0) -69]
Test Case: 748 | Input/Output: [(59 -42 -43 -70) -70]
Test Case: 749 | Input/Output: [(-20 82 -68 73) -68]
Test Case: 750 | Input/Output: [(-45 6 38 -100) -100]
Test Case: 751 | Input/Output: [(-86 88 72 79) -86]
Test Case: 752 | Input/Output: [(90 3 37 8) 3]
Test Case: 753 | Input/Output: [(-93 -60 55 61) -93]
Test Case: 754 | Input/Output: [(84 -59 -79 -5) -79]
Test Case: 755 | Input/Output: [(76 9 -54 93) -54]
Test Case: 756 | Input/Output: [(-90 94 10 -64) -90]
Test Case: 757 | Input/Output: [(41 -38 -37 -22) -38]
Test Case: 758 | Input/Output: [(56 -86 84 -48) -86]
Test Case: 759 | Input/Output: [(-26 75 -83 -72) -83]
Test Case: 760 | Input/Output: [(-17 26 -53 89) -53]
Test Case: 761 | Input/Output: [(-19 32 76 23) -19]
Test Case: 762 | Input/Output: [(3 25 32 20) 3]
Test Case: 763 | Input/Output: [(5 -40 -91 51) -91]
Test Case: 764 | Input/Output: [(77 99 -41 -8) -41]
Test Case: 765 | Input/Output: [(61 95 -2 -2) -2]
Test Case: 766 | Input/Output: [(2 3 -8 36) -8]
Test Case: 767 | Input/Output: [(82 -91 7 -28) -91]
Test Case: 768 | Input/Output: [(13 11 -85 -24) -85]
Test Case: 769 | Input/Output: [(-1 -43 -63 -15) -63]
Test Case: 770 | Input/Output: [(-34 -57 77 -42) -57]
Test Case: 771 | Input/Output: [(100 88 -10 39) -10]
Test Case: 772 | Input/Output: [(21 92 -14 -100) -100]
Test Case: 773 | Input/Output: [(86 -80 -60 -90) -90]
Test Case: 774 | Input/Output: [(-47 -71 22 -95) -95]
Test Case: 775 | Input/Output: [(24 43 -73 44) -73]
Test Case: 776 | Input/Output: [(-13 -36 -16 58) -36]
Test Case: 777 | Input/Output: [(-12 -40 93 96) -40]
Test Case: 778 | Input/Output: [(-2 -67 9 80) -67]
Test Case: 779 | Input/Output: [(20 -72 -88 -92) -92]
Test Case: 780 | Input/Output: [(-21 95 -23 -26) -26]
Test Case: 781 | Input/Output: [(-39 15 -94 100) -94]
Test Case: 782 | Input/Output: [(58 51 -18 -97) -97]
Test Case: 783 | Input/Output: [(-38 -44 58 12) -44]
Test Case: 784 | Input/Output: [(31 -68 40 34) -68]
Test Case: 785 | Input/Output: [(61 -51 80 -92) -92]
Test Case: 786 | Input/Output: [(72 -2 -11 63) -11]
Test Case: 787 | Input/Output: [(-57 -92 93 36) -92]
Test Case: 788 | Input/Output: [(8 -7 55 -96) -96]
Test Case: 789 | Input/Output: [(-64 -77 -20 58) -77]
Test Case: 790 | Input/Output: [(-70 -66 -65 80) -70]
Test Case: 791 | Input/Output: [(-28 -65 77 -41) -65]
Test Case: 792 | Input/Output: [(-55 0 -23 35) -55]
Test Case: 793 | Input/Output: [(-58 73 -63 -96) -96]
Test Case: 794 | Input/Output: [(59 -31 8 -5) -31]
Test Case: 795 | Input/Output: [(-94 -10 20 -88) -94]
Test Case: 796 | Input/Output: [(97 -14 -100 -33) -100]
Test Case: 797 | Input/Output: [(35 12 87 100) 12]
Test Case: 798 | Input/Output: [(35 68 40 -51) -51]
Test Case: 799 | Input/Output: [(87 19 -36 -62) -62]
Test Case: 800 | Input/Output: [(34 -95 -15 12) -95]
Test Case: 801 | Input/Output: [(90 -41 35 -34) -41]
Test Case: 802 | Input/Output: [(45 -26 91 1) -26]
Test Case: 803 | Input/Output: [(44 23 -11 -57) -57]
Test Case: 804 | Input/Output: [(-30 22 -9 74) -30]
Test Case: 805 | Input/Output: [(52 -10 -89 -88) -89]
Test Case: 806 | Input/Output: [(-98 47 92 -50) -98]
Test Case: 807 | Input/Output: [(41 -58 75 63) -58]
Test Case: 808 | Input/Output: [(26 48 0 -65) -65]
Test Case: 809 | Input/Output: [(-19 -94 -58 -52) -94]
Test Case: 810 | Input/Output: [(-79 -23 0 -81) -81]
Test Case: 811 | Input/Output: [(77 -37 5 42) -37]
Test Case: 812 | Input/Output: [(-49 -55 -8 30) -55]
Test Case: 813 | Input/Output: [(-68 78 42 -22) -68]
Test Case: 814 | Input/Output: [(25 -88 -22 72) -88]
Test Case: 815 | Input/Output: [(-11 -32 59 14) -32]
Test Case: 816 | Input/Output: [(18 -26 -67 6) -67]
Test Case: 817 | Input/Output: [(85 -75 -75 72) -75]
Test Case: 818 | Input/Output: [(21 94 94 61) 21]
Test Case: 819 | Input/Output: [(-88 47 50 56) -88]
Test Case: 820 | Input/Output: [(17 44 -91 -51) -91]
Test Case: 821 | Input/Output: [(-5 39 62 -79) -79]
Test Case: 822 | Input/Output: [(-10 54 84 -35) -35]
Test Case: 823 | Input/Output: [(10 94 -90 5) -90]
Test Case: 824 | Input/Output: [(-3 -66 12 11) -66]
Test Case: 825 | Input/Output: [(-60 16 59 -50) -60]
Test Case: 826 | Input/Output: [(-7 -78 -22 -67) -78]
Test Case: 827 | Input/Output: [(-75 81 40 6) -75]
Test Case: 828 | Input/Output: [(12 21 24 97) 12]
Test Case: 829 | Input/Output: [(-9 35 6 -36) -36]
Test Case: 830 | Input/Output: [(84 -72 -18 -69) -72]
Test Case: 831 | Input/Output: [(-49 8 -3 28) -49]
Test Case: 832 | Input/Output: [(72 -20 -2 82) -20]
Test Case: 833 | Input/Output: [(-76 43 70 36) -76]
Test Case: 834 | Input/Output: [(-45 -14 -34 100) -45]
Test Case: 835 | Input/Output: [(-58 -44 -77 -84) -84]
Test Case: 836 | Input/Output: [(76 -18 -66 -91) -91]
Test Case: 837 | Input/Output: [(72 82 2 75) 2]
Test Case: 838 | Input/Output: [(67 -51 23 32) -51]
Test Case: 839 | Input/Output: [(17 15 90 34) 15]
Test Case: 840 | Input/Output: [(-56 12 23 -93) -93]
Test Case: 841 | Input/Output: [(-3 7 -56 1) -56]
Test Case: 842 | Input/Output: [(-26 42 -3 80) -26]
Test Case: 843 | Input/Output: [(-22 36 0 -90) -90]
Test Case: 844 | Input/Output: [(2 -57 16 14) -57]
Test Case: 845 | Input/Output: [(3 2 25 -70) -70]
Test Case: 846 | Input/Output: [(-72 -15 -26 -83) -83]
Test Case: 847 | Input/Output: [(37 13 -54 -79) -79]
Test Case: 848 | Input/Output: [(87 -78 5 -68) -78]
Test Case: 849 | Input/Output: [(-74 -99 31 -31) -99]
Test Case: 850 | Input/Output: [(54 -19 26 56) -19]
Test Case: 851 | Input/Output: [(17 -84 -59 -40) -84]
Test Case: 852 | Input/Output: [(-7 13 -36 -54) -54]
Test Case: 853 | Input/Output: [(78 52 -47 27) -47]
Test Case: 854 | Input/Output: [(14 39 -45 43) -45]
Test Case: 855 | Input/Output: [(-47 22 -25 -1) -47]
Test Case: 856 | Input/Output: [(-65 -8 -21 47) -65]
Test Case: 857 | Input/Output: [(-15 -54 28 -85) -85]
Test Case: 858 | Input/Output: [(-19 37 -71 97) -71]
Test Case: 859 | Input/Output: [(73 -69 47 84) -69]
Test Case: 860 | Input/Output: [(64 82 40 -60) -60]
Test Case: 861 | Input/Output: [(86 -79 33 -27) -79]
Test Case: 862 | Input/Output: [(-71 64 -31 -99) -99]
Test Case: 863 | Input/Output: [(-3 44 82 -87) -87]
Test Case: 864 | Input/Output: [(-50 37 -10 -38) -50]
Test Case: 865 | Input/Output: [(-80 -93 92 68) -93]
Test Case: 866 | Input/Output: [(-84 -86 -44 3) -86]
Test Case: 867 | Input/Output: [(-54 -79 55 -89) -89]
Test Case: 868 | Input/Output: [(-41 87 -53 78) -53]
Test Case: 869 | Input/Output: [(-20 -92 82 58) -92]
Test Case: 870 | Input/Output: [(-31 97 5 -76) -76]
Test Case: 871 | Input/Output: [(93 -52 61 -9) -52]
Test Case: 872 | Input/Output: [(75 -14 29 -82) -82]
Test Case: 873 | Input/Output: [(78 44 13 -23) -23]
Test Case: 874 | Input/Output: [(-79 36 3 86) -79]
Test Case: 875 | Input/Output: [(-70 -96 -81 20) -96]
Test Case: 876 | Input/Output: [(-100 -64 -62 -18) -100]
Test Case: 877 | Input/Output: [(-31 14 -40 -62) -62]
Test Case: 878 | Input/Output: [(80 28 13 -19) -19]
Test Case: 879 | Input/Output: [(65 -27 14 98) -27]
Test Case: 880 | Input/Output: [(-49 -37 49 -80) -80]
Test Case: 881 | Input/Output: [(20 20 12 14) 12]
Test Case: 882 | Input/Output: [(81 19 -68 50) -68]
Test Case: 883 | Input/Output: [(-83 85 77 42) -83]
Test Case: 884 | Input/Output: [(-58 52 40 -47) -58]
Test Case: 885 | Input/Output: [(-24 -47 -32 36) -47]
Test Case: 886 | Input/Output: [(18 68 -37 25) -37]
Test Case: 887 | Input/Output: [(-59 -35 5 45) -59]
Test Case: 888 | Input/Output: [(-55 33 -40 30) -55]
Test Case: 889 | Input/Output: [(0 -27 79 -5) -27]
Test Case: 890 | Input/Output: [(-3 -20 -79 85) -79]
Test Case: 891 | Input/Output: [(-97 -25 -92 23) -97]
Test Case: 892 | Input/Output: [(30 -68 -89 -26) -89]
Test Case: 893 | Input/Output: [(18 1 -6 84) -6]
Test Case: 894 | Input/Output: [(94 -12 -89 -98) -98]
Test Case: 895 | Input/Output: [(74 95 -71 36) -71]
Test Case: 896 | Input/Output: [(-70 -92 -72 -31) -92]
Test Case: 897 | Input/Output: [(-90 58 -20 73) -90]
Test Case: 898 | Input/Output: [(52 -62 26 8) -62]
Test Case: 899 | Input/Output: [(17 -63 70 -70) -70]
Test Case: 900 | Input/Output: [(17 26 51 -33) -33]
Test Case: 901 | Input/Output: [(56 25 93 -34) -34]
Test Case: 902 | Input/Output: [(73 12 12 88) 12]
Test Case: 903 | Input/Output: [(51 62 72 97) 51]
Test Case: 904 | Input/Output: [(-14 -86 69 -75) -86]
Test Case: 905 | Input/Output: [(-54 61 32 -6) -54]
Test Case: 906 | Input/Output: [(-92 48 -68 -83) -92]
Test Case: 907 | Input/Output: [(-99 -99 48 -53) -99]
Test Case: 908 | Input/Output: [(95 -2 21 -11) -11]
Test Case: 909 | Input/Output: [(-74 11 -21 -94) -94]
Test Case: 910 | Input/Output: [(-14 -37 27 -45) -45]
Test Case: 911 | Input/Output: [(-4 84 -22 -94) -94]
Test Case: 912 | Input/Output: [(76 28 37 7) 7]
Test Case: 913 | Input/Output: [(68 98 -61 -72) -72]
Test Case: 914 | Input/Output: [(97 17 -43 55) -43]
Test Case: 915 | Input/Output: [(99 9 -97 49) -97]
Test Case: 916 | Input/Output: [(84 52 -90 77) -90]
Test Case: 917 | Input/Output: [(-17 -28 -72 -10) -72]
Test Case: 918 | Input/Output: [(5 -69 -69 -37) -69]
Test Case: 919 | Input/Output: [(-72 83 53 9) -72]
Test Case: 920 | Input/Output: [(-55 -5 -58 77) -58]
Test Case: 921 | Input/Output: [(-41 30 62 53) -41]
Test Case: 922 | Input/Output: [(19 -60 18 93) -60]
Test Case: 923 | Input/Output: [(60 48 -86 -43) -86]
Test Case: 924 | Input/Output: [(-56 -89 86 -32) -89]
Test Case: 925 | Input/Output: [(-67 -48 -96 79) -96]
Test Case: 926 | Input/Output: [(12 -46 68 -87) -87]
Test Case: 927 | Input/Output: [(16 58 63 56) 16]
Test Case: 928 | Input/Output: [(63 82 27 22) 22]
Test Case: 929 | Input/Output: [(50 0 -35 -54) -54]
Test Case: 930 | Input/Output: [(-61 94 -56 67) -61]
Test Case: 931 | Input/Output: [(-16 70 -39 -37) -39]
Test Case: 932 | Input/Output: [(100 -37 -28 -45) -45]
Test Case: 933 | Input/Output: [(-2 10 39 -47) -47]
Test Case: 934 | Input/Output: [(82 -71 30 -41) -71]
Test Case: 935 | Input/Output: [(22 97 -83 56) -83]
Test Case: 936 | Input/Output: [(-19 -77 35 72) -77]
Test Case: 937 | Input/Output: [(78 20 98 40) 20]
Test Case: 938 | Input/Output: [(75 -49 -10 91) -49]
Test Case: 939 | Input/Output: [(-70 8 4 84) -70]
Test Case: 940 | Input/Output: [(-95 15 13 74) -95]
Test Case: 941 | Input/Output: [(-17 62 -80 -16) -80]
Test Case: 942 | Input/Output: [(73 -71 50 25) -71]
Test Case: 943 | Input/Output: [(-9 -60 3 24) -60]
Test Case: 944 | Input/Output: [(-34 26 85 7) -34]
Test Case: 945 | Input/Output: [(-43 70 19 -59) -59]
Test Case: 946 | Input/Output: [(-75 -69 -52 67) -75]
Test Case: 947 | Input/Output: [(71 -52 -63 -93) -93]
Test Case: 948 | Input/Output: [(51 100 -73 -40) -73]
Test Case: 949 | Input/Output: [(4 -75 -26 -63) -75]
Test Case: 950 | Input/Output: [(-86 43 91 -50) -86]
Test Case: 951 | Input/Output: [(16 -26 95 24) -26]
Test Case: 952 | Input/Output: [(98 69 49 39) 39]
Test Case: 953 | Input/Output: [(-42 47 -57 13) -57]
Test Case: 954 | Input/Output: [(7 97 12 60) 7]
Test Case: 955 | Input/Output: [(-92 -71 -63 -39) -92]
Test Case: 956 | Input/Output: [(28 14 -88 35) -88]
Test Case: 957 | Input/Output: [(-95 -100 -74 -61) -100]
Test Case: 958 | Input/Output: [(-6 24 98 -64) -64]
Test Case: 959 | Input/Output: [(-85 13 -92 33) -92]
Test Case: 960 | Input/Output: [(-60 23 -9 100) -60]
Test Case: 961 | Input/Output: [(-27 91 69 74) -27]
Test Case: 962 | Input/Output: [(-49 -55 -98 -84) -98]
Test Case: 963 | Input/Output: [(60 -55 -16 -33) -55]
Test Case: 964 | Input/Output: [(64 -61 81 -45) -61]
Test Case: 965 | Input/Output: [(-28 94 -27 16) -28]
Test Case: 966 | Input/Output: [(46 -58 5 34) -58]
Test Case: 967 | Input/Output: [(25 -53 -27 -51) -53]
Test Case: 968 | Input/Output: [(95 21 -98 -84) -98]
Test Case: 969 | Input/Output: [(52 -40 50 11) -40]
Test Case: 970 | Input/Output: [(11 93 -29 56) -29]
Test Case: 971 | Input/Output: [(-52 -62 12 6) -62]
Test Case: 972 | Input/Output: [(27 -50 -44 -31) -50]
Test Case: 973 | Input/Output: [(65 48 -2 -2) -2]
Test Case: 974 | Input/Output: [(-86 1 44 -12) -86]
Test Case: 975 | Input/Output: [(2 -8 -99 -24) -99]
Test Case: 976 | Input/Output: [(-8 -81 -48 46) -81]
Test Case: 977 | Input/Output: [(8 3 -55 -80) -80]
Test Case: 978 | Input/Output: [(-56 89 91 -6) -56]
Test Case: 979 | Input/Output: [(-55 -78 -58 75) -78]
Test Case: 980 | Input/Output: [(-31 10 -23 38) -31]
Test Case: 981 | Input/Output: [(6 47 97 94) 6]
Test Case: 982 | Input/Output: [(23 -4 98 -24) -24]
Test Case: 983 | Input/Output: [(71 -92 -72 -55) -92]
Test Case: 984 | Input/Output: [(81 -45 58 17) -45]
Test Case: 985 | Input/Output: [(-31 95 -87 -46) -87]
Test Case: 986 | Input/Output: [(-28 -20 93 -6) -28]
Test Case: 987 | Input/Output: [(-99 5 -73 31) -99]
Test Case: 988 | Input/Output: [(-79 24 -96 73) -96]
Test Case: 989 | Input/Output: [(19 -85 -44 -28) -85]
Test Case: 990 | Input/Output: [(3 -7 -7 61) -7]
Test Case: 991 | Input/Output: [(68 -65 66 46) -65]
Test Case: 992 | Input/Output: [(-33 93 -57 -68) -68]
Test Case: 993 | Input/Output: [(-64 -81 3 82) -81]
Test Case: 994 | Input/Output: [(41 13 -82 39) -82]
Test Case: 995 | Input/Output: [(31 90 -99 36) -99]
Test Case: 996 | Input/Output: [(-49 -39 -66 69) -66]
Test Case: 997 | Input/Output: [(43 -58 100 88) -58]
Test Case: 998 | Input/Output: [(36 38 24 41) 24]
Test Case: 999 | Input/Output: [(-7 -82 73 -62) -82]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x579dde54 clojush.problems.software.smallest$fn__7461@579dde54] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x6b899971 clojush.instructions.tag$tag_instruction_erc$fn__2160@6b899971] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x7cec3975 clojush.instructions.tag$tagged_instruction_erc$fn__2166@7cec3975] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x7e2a76be clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@7e2a76be]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:uniform-addition-and-deletion 1.0}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 3000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x417bfebd clojush.problems.software.smallest$smallest_initial_report@417bfebd]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_report@2a4cb8ae]
random-screen = false
random-seed = -93 37 27 -1 25 -24 -24 -99 -98 106 -71 -47 -69 22 71 125
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[68 49 49 49] 49] [[-44 -54 -44 -44] -54] [[13 13 -14 13] -14] [[96 96 96 59] 59] [[47 -81 47 47] -81] [[-26 77 -26 -26] -26] [[-72 -9 -9 -9] -72] [[29 29 -11 29] -11] [[9 92 9 9] 9] [[69 -91 69 69] -91] [(-97 -97 -97 -97) -97] [(17 17 17 17) 17] [(-62 -62 -62 -62) -62] [(-95 -95 -95 -95) -95] [(0 0 0 0) 0] [(23 85 92 13) 13] [(97 83 77 100) 77] [(67 17 47 82) 17] [(52 18 89 24) 18] [(9 91 54 50) 9] [(38 53 14 80) 14] [(11 87 2 3) 2] [(91 34 36 4) 4] [(70 65 83 8) 8] [(75 92 72 77) 72] [(56 14 77 70) 14] [(11 93 9 73) 9] [(87 82 82 82) 82] [(99 22 38 34) 22] [(75 20 15 38) 15] [(14 37 100 32) 14] [(45 97 100 56) 45] [(63 46 67 90) 46] [(19 32 46 1) 1] [(67 86 75 20) 20] [(32 -68 -50 65) -68] [(38 -53 -87 82) -87] [(-71 -11 73 51) -71] [(72 -47 -87 -9) -87] [(-73 8 -92 71) -92] [(54 73 -68 28) -68] [(-13 26 20 49) -13] [(-50 9 14 28) -50] [(66 8 77 -91) -91] [(-88 0 -59 54) -88] [(85 5 -72 -6) -72] [(-91 -10 -1 -68) -91] [(-39 -45 8 13) -45] [(-51 15 -50 -37) -51] [(-28 81 67 61) -28] [(-57 -17 -16 -35) -57] [(-40 99 99 -46) -46] [(-12 -73 -4 53) -73] [(-2 -24 -91 11) -91] [(78 -28 -84 -46) -84] [(60 99 -63 96) -63] [(-25 83 -36 -8) -36] [(-73 40 -67 -84) -84] [(4 -12 -13 84) -13] [(-5 -41 85 25) -41] [(29 83 52 -77) -77] [(-80 -45 -39 43) -80] [(78 50 44 57) 44] [(56 89 -3 -68) -68] [(40 3 -53 -97) -97] [(71 -95 68 39) -95] [(10 16 31 36) 10] [(-54 -76 -63 -62) -76] [(-33 -49 -33 92) -49] [(47 23 86 81) 23] [(10 11 -96 -69) -96] [(39 93 80 -11) -11] [(-96 24 -46 -84) -96] [(19 -94 -50 -33) -94] [(-28 69 -17 66) -28] [(-48 89 34 -33) -48] [(-85 -76 95 98) -85] [(-23 -7 87 -27) -27] [(-21 94 51 22) -21] [(81 -58 -69 -86) -86] [(89 89 50 94) 50] [(17 -34 -43 -76) -76] [(15 57 11 71) 11] [(-18 -30 20 60) -30] [(59 -63 -34 -74) -74] [(-47 44 15 42) -47] [(68 -8 61 3) -8] [(28 13 -74 10) -74] [(-6 40 91 64) -6] [(-80 59 -28 -46) -80] [(87 -13 19 -49) -49] [(88 -28 61 99) -28] [(71 33 92 93) 33] [(58 9 35 52) 9] [(67 66 75 48) 48])
uniform-addition-and-deletion-rate = 0.09
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 649
Test mean error for best: 0.64900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 49                  | Program output: 49                 
Correct output: -54                 | Program output: -44                
Correct output: -14                 | Program output: 13                 
Correct output: 59                  | Program output: 59                 
Correct output: -81                 | Program output: 47                 
Correct output: -26                 | Program output: -26                
Correct output: -72                 | Program output: -9                 
Correct output: -11                 | Program output: 29                 
Correct output: 9                   | Program output: 9                  
Correct output: -91                 | Program output: 69                 
Correct output: -97                 | Program output: -97                
Correct output: 17                  | Program output: 17                 
Correct output: -62                 | Program output: -62                
Correct output: -95                 | Program output: -95                
Correct output: 0                   | Program output: 0                  
Correct output: 13                  | Program output: 13                 
Correct output: 77                  | Program output: 100                
Correct output: 17                  | Program output: 82                 
Correct output: 18                  | Program output: 24                 
Correct output: 9                   | Program output: 50                 
Correct output: 14                  | Program output: 80                 
Correct output: 2                   | Program output: 3                  
Correct output: 4                   | Program output: 4                  
Correct output: 8                   | Program output: 8                  
Correct output: 72                  | Program output: 77                 
Correct output: 14                  | Program output: 70                 
Correct output: 9                   | Program output: 73                 
Correct output: 82                  | Program output: 82                 
Correct output: 22                  | Program output: 34                 
Correct output: 15                  | Program output: 38                 
Correct output: 14                  | Program output: 32                 
Correct output: 45                  | Program output: 56                 
Correct output: 46                  | Program output: 90                 
Correct output: 1                   | Program output: 1                  
Correct output: 20                  | Program output: 20                 
Correct output: -68                 | Program output: 65                 
Correct output: -87                 | Program output: 82                 
Correct output: -71                 | Program output: 51                 
Correct output: -87                 | Program output: -9                 
Correct output: -92                 | Program output: 71                 
Correct output: -68                 | Program output: 28                 
Correct output: -13                 | Program output: 49                 
Correct output: -50                 | Program output: 28                 
Correct output: -91                 | Program output: -91                
Correct output: -88                 | Program output: 54                 
Correct output: -72                 | Program output: -6                 
Correct output: -91                 | Program output: -68                
Correct output: -45                 | Program output: 13                 
Correct output: -51                 | Program output: -37                
Correct output: -28                 | Program output: 61                 
Correct output: -57                 | Program output: -35                
Correct output: -46                 | Program output: -46                
Correct output: -73                 | Program output: 53                 
Correct output: -91                 | Program output: 11                 
Correct output: -84                 | Program output: -46                
Correct output: -63                 | Program output: 96                 
Correct output: -36                 | Program output: -8                 
Correct output: -84                 | Program output: -84                
Correct output: -13                 | Program output: 84                 
Correct output: -41                 | Program output: 25                 
Correct output: -77                 | Program output: -77                
Correct output: -80                 | Program output: 43                 
Correct output: 44                  | Program output: 57                 
Correct output: -68                 | Program output: -68                
Correct output: -97                 | Program output: -97                
Correct output: -95                 | Program output: 39                 
Correct output: 10                  | Program output: 36                 
Correct output: -76                 | Program output: -62                
Correct output: -49                 | Program output: 92                 
Correct output: 23                  | Program output: 81                 
Correct output: -96                 | Program output: -69                
Correct output: -11                 | Program output: -11                
Correct output: -96                 | Program output: -84                
Correct output: -94                 | Program output: -33                
Correct output: -28                 | Program output: 66                 
Correct output: -48                 | Program output: -33                
Correct output: -85                 | Program output: 98                 
Correct output: -27                 | Program output: -27                
Correct output: -21                 | Program output: 22                 
Correct output: -86                 | Program output: -86                
Correct output: 50                  | Program output: 94                 
Correct output: -76                 | Program output: -76                
Correct output: 11                  | Program output: 71                 
Correct output: -30                 | Program output: 60                 
Correct output: -74                 | Program output: -74                
Correct output: -47                 | Program output: 42                 
Correct output: -8                  | Program output: 3                  
Correct output: -74                 | Program output: 10                 
Correct output: -6                  | Program output: 64                 
Correct output: -80                 | Program output: -46                
Correct output: -49                 | Program output: -49                
Correct output: -28                 | Program output: 99                 
Correct output: 33                  | Program output: 93                 
Correct output: 9                   | Program output: 52                 
Correct output: 48                  | Program output: 48                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_swap} {:close 1, :instruction boolean_flush} {:close 1, :instruction tag_integer_450} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_not} {:close 1, :instruction in4} {:close 1, :instruction integer_div} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in4} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 2, :instruction boolean_and} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup} {:close 1, :instruction in3} {:close 1, :instruction integer_eq} {:close 1, :instruction tagged_612} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_do*while} {:close 0, :instruction 41} {:close 2, :instruction boolean_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_k} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup})
Lexicase best program: (boolean_empty integer_dup_items integer_swap boolean_flush tag_integer_450 integer_lte integer_flush integer_dup_times boolean_and exec_dup (exec_dup_items print_boolean boolean_not in4) integer_div print_integer integer_lte boolean_pop exec_swap (print_integer integer_inc integer_dup_items boolean_empty exec_do*range (boolean_not exec_rot (exec_flush boolean_dup integer_lt integer_fromboolean in4 exec_shove (exec_k_when_autoconstructing (boolean_yankdup boolean_stackdepth exec_when (in2 boolean_and)) (integer_dup_times) boolean_swap integer_dup in3) integer_eq) (tagged_612) (boolean_not boolean_frominteger exec_do*while () 41 boolean_dup_items)) exec_y_when_autoconstructing (exec_k (exec_k_when_autoconstructing (boolean_dup) ()) ())) ())
Lexicase best errors: [0 0 1 1 1 1 0 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 71
Percent parens: 0.254
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_swap} {:close 1, :instruction boolean_flush} {:close 1, :instruction tag_integer_450} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_not} {:close 1, :instruction in4} {:close 1, :instruction integer_div} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in4} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 2, :instruction boolean_and} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup} {:close 1, :instruction in3} {:close 1, :instruction integer_eq} {:close 1, :instruction tagged_612} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_do*while} {:close 0, :instruction 41} {:close 2, :instruction boolean_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_k} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup})
Zero cases best program: (boolean_empty integer_dup_items integer_swap boolean_flush tag_integer_450 integer_lte integer_flush integer_dup_times boolean_and exec_dup (exec_dup_items print_boolean boolean_not in4) integer_div print_integer integer_lte boolean_pop exec_swap (print_integer integer_inc integer_dup_items boolean_empty exec_do*range (boolean_not exec_rot (exec_flush boolean_dup integer_lt integer_fromboolean in4 exec_shove (exec_k_when_autoconstructing (boolean_yankdup boolean_stackdepth exec_when (in2 boolean_and)) (integer_dup_times) boolean_swap integer_dup in3) integer_eq) (tagged_612) (boolean_not boolean_frominteger exec_do*while () 41 boolean_dup_items)) exec_y_when_autoconstructing (exec_k (exec_k_when_autoconstructing (boolean_dup) ()) ())) ())
Zero cases best errors: [0 0 1 1 1 1 0 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 71
Percent parens: 0.254
--- Lexicase Population Statistics ---
Count of elite individuals by case: (2 2 5 5 7 3 2 2 2 5)
Population mean number of elite cases: 0.04
Count of perfect (error zero) individuals by case: (2 2 5 5 7 3 2 2 2 5)
Population mean number of perfect (error zero) cases: 0.04
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*count} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_max} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_while} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_dup} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_or} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_eq} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_y} {:close 1, :instruction integer_min} {:close 0, :instruction print_exec} {:close 0, :instruction print_exec} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction in3} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_k} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_when} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in1})
Best program: (exec_do*count (exec_s_when_autoconstructing (boolean_rot exec_if (boolean_invert_first_then_and integer_lte integer_max) (exec_s (boolean_stackdepth exec_do*times (boolean_rot integer_dup_times exec_while () integer_eq in3 integer_swap boolean_dup) exec_dup_items) (exec_k_when_autoconstructing (boolean_or in4 boolean_or integer_min) (boolean_yankdup exec_k (integer_dup_items exec_pop (boolean_or) integer_pop) (exec_shove (boolean_yankdup) integer_min boolean_flush boolean_dup boolean_eq) exec_pop () integer_flush integer_flush in4 print_integer integer_min integer_shove integer_yank) exec_y (integer_min) print_exec (print_exec (integer_add boolean_rot in3 exec_yankdup exec_do*times (exec_swap () (exec_do*times (exec_shove (integer_flush print_exec (boolean_invert_first_then_and exec_pop (integer_fromboolean integer_shove) exec_k (exec_yankdup) (exec_dup (in3 exec_shove (exec_stackdepth integer_pop exec_noop integer_inc exec_when (in3) in4 integer_dup_times boolean_shove) boolean_eq in3 exec_dup_times (boolean_frominteger integer_dup_items) in1)))))))))) ())) () ()))
Errors: [0 0 1 1 1 1 0 0 0 1]
Total: 5
Mean: 0.5
Genome size: 81
Size: 116
Percent parens: 0.302
--- Population Statistics ---
Average total errors in population: 9.965
Median total errors in population: 10
Error averages by case: (0.998 0.998 0.995 0.995 0.993 0.997 0.998 0.998 0.998 0.995)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 51.696
Average program size in population (points): 71.208
Average percent parens in population: 0.280
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.267
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 476770
--- Timings ---
Current time: 1559594060274 milliseconds
Total Time:           2.7 seconds
Initialization:       0.1 seconds,  3.8%
Reproduction:         0.7 seconds, 27.7%
Fitness Testing:      1.8 seconds, 68.5%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 646
Test mean error for best: 0.64600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 49                  | Program output: 49                 
Correct output: -54                 | Program output: -44                
Correct output: -14                 | Program output: -14                
Correct output: 59                  | Program output: 96                 
Correct output: -81                 | Program output: 47                 
Correct output: -26                 | Program output: -26                
Correct output: -72                 | Program output: -9                 
Correct output: -11                 | Program output: -11                
Correct output: 9                   | Program output: 9                  
Correct output: -91                 | Program output: 69                 
Correct output: -97                 | Program output: -97                
Correct output: 17                  | Program output: 17                 
Correct output: -62                 | Program output: -62                
Correct output: -95                 | Program output: -95                
Correct output: 0                   | Program output: 0                  
Correct output: 13                  | Program output: 92                 
Correct output: 77                  | Program output: 77                 
Correct output: 17                  | Program output: 47                 
Correct output: 18                  | Program output: 89                 
Correct output: 9                   | Program output: 54                 
Correct output: 14                  | Program output: 14                 
Correct output: 2                   | Program output: 2                  
Correct output: 4                   | Program output: 36                 
Correct output: 8                   | Program output: 83                 
Correct output: 72                  | Program output: 72                 
Correct output: 14                  | Program output: 77                 
Correct output: 9                   | Program output: 9                  
Correct output: 82                  | Program output: 82                 
Correct output: 22                  | Program output: 38                 
Correct output: 15                  | Program output: 15                 
Correct output: 14                  | Program output: 100                
Correct output: 45                  | Program output: 100                
Correct output: 46                  | Program output: 67                 
Correct output: 1                   | Program output: 46                 
Correct output: 20                  | Program output: 75                 
Correct output: -68                 | Program output: -50                
Correct output: -87                 | Program output: -87                
Correct output: -71                 | Program output: 73                 
Correct output: -87                 | Program output: -87                
Correct output: -92                 | Program output: -92                
Correct output: -68                 | Program output: -68                
Correct output: -13                 | Program output: 20                 
Correct output: -50                 | Program output: 14                 
Correct output: -91                 | Program output: 77                 
Correct output: -88                 | Program output: -59                
Correct output: -72                 | Program output: -72                
Correct output: -91                 | Program output: -1                 
Correct output: -45                 | Program output: 8                  
Correct output: -51                 | Program output: -50                
Correct output: -28                 | Program output: 67                 
Correct output: -57                 | Program output: -16                
Correct output: -46                 | Program output: 99                 
Correct output: -73                 | Program output: -4                 
Correct output: -91                 | Program output: -91                
Correct output: -84                 | Program output: -84                
Correct output: -63                 | Program output: -63                
Correct output: -36                 | Program output: -36                
Correct output: -84                 | Program output: -67                
Correct output: -13                 | Program output: -13                
Correct output: -41                 | Program output: 85                 
Correct output: -77                 | Program output: 52                 
Correct output: -80                 | Program output: -39                
Correct output: 44                  | Program output: 44                 
Correct output: -68                 | Program output: -3                 
Correct output: -97                 | Program output: -53                
Correct output: -95                 | Program output: 68                 
Correct output: 10                  | Program output: 31                 
Correct output: -76                 | Program output: -63                
Correct output: -49                 | Program output: -33                
Correct output: 23                  | Program output: 86                 
Correct output: -96                 | Program output: -96                
Correct output: -11                 | Program output: 80                 
Correct output: -96                 | Program output: -46                
Correct output: -94                 | Program output: -50                
Correct output: -28                 | Program output: -17                
Correct output: -48                 | Program output: 34                 
Correct output: -85                 | Program output: 95                 
Correct output: -27                 | Program output: 87                 
Correct output: -21                 | Program output: 51                 
Correct output: -86                 | Program output: -69                
Correct output: 50                  | Program output: 50                 
Correct output: -76                 | Program output: -43                
Correct output: 11                  | Program output: 11                 
Correct output: -30                 | Program output: 20                 
Correct output: -74                 | Program output: -34                
Correct output: -47                 | Program output: 15                 
Correct output: -8                  | Program output: 61                 
Correct output: -74                 | Program output: -74                
Correct output: -6                  | Program output: 91                 
Correct output: -80                 | Program output: -28                
Correct output: -49                 | Program output: 19                 
Correct output: -28                 | Program output: 61                 
Correct output: 33                  | Program output: 92                 
Correct output: 9                   | Program output: 35                 
Correct output: 48                  | Program output: 75                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction print_boolean} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_dup} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_830} {:close 0, :instruction exec_yank} {:close 2, :instruction exec_eq} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 1, :instruction in3} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_empty} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mult} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_dup_times} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction tag_exec_664})
Lexicase best program: (print_boolean exec_when (exec_k_when_autoconstructing (boolean_yankdup) (exec_dup (in3) print_integer tag_exec_830 (exec_yank exec_eq)) exec_do*count () integer_pop in3) integer_gt boolean_dup_items integer_dup exec_do*while (boolean_invert_first_then_and exec_when (boolean_xor boolean_invert_second_then_and integer_sub exec_k (boolean_shove integer_mod integer_pop boolean_dup_times integer_eq exec_empty) (exec_rot () (boolean_flush integer_mult print_boolean) (integer_yank integer_div boolean_swap boolean_invert_second_then_and in2 integer_gt) exec_dup_times () boolean_invert_first_then_and) tag_exec_664 ())))
Lexicase best errors: [1 0 0 1 0 0 1 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 58
Percent parens: 0.276
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction print_boolean} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_dup} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_830} {:close 0, :instruction exec_yank} {:close 2, :instruction exec_eq} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 1, :instruction in3} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_empty} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mult} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_dup_times} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction tag_exec_664})
Zero cases best program: (print_boolean exec_when (exec_k_when_autoconstructing (boolean_yankdup) (exec_dup (in3) print_integer tag_exec_830 (exec_yank exec_eq)) exec_do*count () integer_pop in3) integer_gt boolean_dup_items integer_dup exec_do*while (boolean_invert_first_then_and exec_when (boolean_xor boolean_invert_second_then_and integer_sub exec_k (boolean_shove integer_mod integer_pop boolean_dup_times integer_eq exec_empty) (exec_rot () (boolean_flush integer_mult print_boolean) (integer_yank integer_div boolean_swap boolean_invert_second_then_and in2 integer_gt) exec_dup_times () boolean_invert_first_then_and) tag_exec_664 ())))
Zero cases best errors: [1 0 0 1 0 0 1 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 58
Percent parens: 0.276
--- Lexicase Population Statistics ---
Count of elite individuals by case: (65 220 158 228 157 404 68 152 158 68)
Population mean number of elite cases: 1.68
Count of perfect (error zero) individuals by case: (65 220 158 228 157 404 68 152 158 68)
Population mean number of perfect (error zero) cases: 1.68
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_y} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_while} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_while} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction tagged_361} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction -86} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_lt} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_when} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_s} {:close 2, :instruction integer_pop} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_max} {:close 1, :instruction exec_do*count} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_shove} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 2, :instruction exec_while} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_k} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_newline} {:close 0, :instruction exec_eq} {:close 0, :instruction print_exec} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_exec})
Best program: (boolean_yankdup integer_dup boolean_rot exec_y (exec_empty in3 integer_yank exec_noop boolean_and boolean_rot print_integer exec_k_when_autoconstructing (boolean_or) (integer_swap exec_k (boolean_yank exec_y (boolean_swap exec_while () integer_mod) integer_dup_times exec_noop) (boolean_shove exec_while (integer_rot integer_pop boolean_dup tagged_361) boolean_frominteger -86 integer_yankdup exec_stackdepth exec_eq exec_yank integer_mult exec_y (exec_dup_items integer_lt print_newline boolean_dup integer_pop integer_yank integer_dup_times boolean_yankdup boolean_frominteger integer_yank integer_flush) exec_if (boolean_empty exec_flush boolean_frominteger exec_when (integer_mult) exec_s (integer_pop) () (boolean_eq integer_max) exec_do*count () exec_rot () (boolean_swap boolean_rot exec_shove () exec_s_when_autoconstructing () () (boolean_dup_items exec_noop integer_min exec_while ()) boolean_shove boolean_invert_second_then_and exec_empty boolean_dup_times integer_dup_items exec_do*while (exec_k (exec_empty boolean_invert_second_then_and exec_dup_items integer_max integer_mod integer_yank integer_stackdepth boolean_dup) (boolean_shove boolean_and boolean_dup in1 boolean_stackdepth boolean_swap boolean_rot integer_mult integer_rot exec_dup () integer_yankdup print_newline exec_eq print_exec (exec_do*count (exec_dup_times (boolean_dup print_exec ())))))) ()) ()))))
Errors: [1 0 0 1 0 0 1 0 0 1]
Total: 4
Mean: 0.4
Genome size: 100
Size: 133
Percent parens: 0.248
--- Population Statistics ---
Average total errors in population: 8.322
Median total errors in population: 10
Error averages by case: (0.935 0.78 0.842 0.772 0.843 0.596 0.932 0.848 0.842 0.932)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 67.882
Average program size in population (points): 92.017
Average percent parens in population: 0.257
Minimum age in population: 1.0
Maximum age in population: 1.0
Average age in population: 1.0
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.007
Error (vector) diversity:			 0.02
Behavioral diversity:				 0.21
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 1254577
--- Timings ---
Current time: 1559594063390 milliseconds
Total Time:           5.9 seconds
Initialization:       0.1 seconds,  1.7%
Reproduction:         1.9 seconds, 31.5%
Fitness Testing:      3.0 seconds, 51.1%
Report:               0.9 seconds, 15.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 563
Test mean error for best: 0.56300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 49                  | Program output: 49                 
Correct output: -54                 | Program output: -44                
Correct output: -14                 | Program output: -14                
Correct output: 59                  | Program output: 96                 
Correct output: -81                 | Program output: 47                 
Correct output: -26                 | Program output: -26                
Correct output: -72                 | Program output: -72                
Correct output: -11                 | Program output: -11                
Correct output: 9                   | Program output: 9                  
Correct output: -91                 | Program output: 69                 
Correct output: -97                 | Program output: -97                
Correct output: 17                  | Program output: 17                 
Correct output: -62                 | Program output: -62                
Correct output: -95                 | Program output: -95                
Correct output: 0                   | Program output: 0                  
Correct output: 13                  | Program output: 92                 
Correct output: 77                  | Program output: 77                 
Correct output: 17                  | Program output: 47                 
Correct output: 18                  | Program output: 89                 
Correct output: 9                   | Program output: 54                 
Correct output: 14                  | Program output: 14                 
Correct output: 2                   | Program output: 2                  
Correct output: 4                   | Program output: 36                 
Correct output: 8                   | Program output: 83                 
Correct output: 72                  | Program output: 72                 
Correct output: 14                  | Program output: 77                 
Correct output: 9                   | Program output: 9                  
Correct output: 82                  | Program output: 82                 
Correct output: 22                  | Program output: 38                 
Correct output: 15                  | Program output: 15                 
Correct output: 14                  | Program output: 100                
Correct output: 45                  | Program output: 100                
Correct output: 46                  | Program output: 67                 
Correct output: 1                   | Program output: 46                 
Correct output: 20                  | Program output: 75                 
Correct output: -68                 | Program output: -50                
Correct output: -87                 | Program output: -87                
Correct output: -71                 | Program output: -71                
Correct output: -87                 | Program output: -87                
Correct output: -92                 | Program output: -73                
Correct output: -68                 | Program output: -68                
Correct output: -13                 | Program output: -13                
Correct output: -50                 | Program output: -50                
Correct output: -91                 | Program output: 77                 
Correct output: -88                 | Program output: -88                
Correct output: -72                 | Program output: -72                
Correct output: -91                 | Program output: -91                
Correct output: -45                 | Program output: -39                
Correct output: -51                 | Program output: -51                
Correct output: -28                 | Program output: -28                
Correct output: -57                 | Program output: -57                
Correct output: -46                 | Program output: -40                
Correct output: -73                 | Program output: -12                
Correct output: -91                 | Program output: -2                 
Correct output: -84                 | Program output: -84                
Correct output: -63                 | Program output: -63                
Correct output: -36                 | Program output: -25                
Correct output: -84                 | Program output: -73                
Correct output: -13                 | Program output: -13                
Correct output: -41                 | Program output: -5                 
Correct output: -77                 | Program output: 52                 
Correct output: -80                 | Program output: -80                
Correct output: 44                  | Program output: 44                 
Correct output: -68                 | Program output: -3                 
Correct output: -97                 | Program output: -53                
Correct output: -95                 | Program output: 68                 
Correct output: 10                  | Program output: 31                 
Correct output: -76                 | Program output: -54                
Correct output: -49                 | Program output: -33                
Correct output: 23                  | Program output: 86                 
Correct output: -96                 | Program output: -96                
Correct output: -11                 | Program output: 80                 
Correct output: -96                 | Program output: -96                
Correct output: -94                 | Program output: -50                
Correct output: -28                 | Program output: -28                
Correct output: -48                 | Program output: -48                
Correct output: -85                 | Program output: -85                
Correct output: -27                 | Program output: -23                
Correct output: -21                 | Program output: -21                
Correct output: -86                 | Program output: -69                
Correct output: 50                  | Program output: 50                 
Correct output: -76                 | Program output: -43                
Correct output: 11                  | Program output: 11                 
Correct output: -30                 | Program output: -18                
Correct output: -74                 | Program output: -34                
Correct output: -47                 | Program output: -47                
Correct output: -8                  | Program output: 61                 
Correct output: -74                 | Program output: -74                
Correct output: -6                  | Program output: -6                 
Correct output: -80                 | Program output: -80                
Correct output: -49                 | Program output: 19                 
Correct output: -28                 | Program output: 61                 
Correct output: 33                  | Program output: 92                 
Correct output: 9                   | Program output: 35                 
Correct output: 48                  | Program output: 75                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_xor} {:close 1, :instruction in1} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_pop} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_do*times} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_eq} {:close 1, :instruction print_newline} {:close 0, :instruction tagged_58} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_if} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction -94} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_empty} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_rot} {:close 1, :instruction exec_empty} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 1, :instruction tagged_295} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_empty} {:close 2, :instruction integer_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_yank} {:close 0, :instruction tagged_699})
Lexicase best program: (integer_shove boolean_yankdup integer_inc integer_rot integer_rot boolean_xor in1 boolean_dup_times boolean_swap integer_yankdup exec_while (exec_k () (boolean_pop boolean_dup_times) exec_pop () exec_noop) exec_do*times (in3 boolean_yankdup exec_eq print_newline) tagged_58 integer_shove print_integer integer_mult exec_if (exec_s_when_autoconstructing (integer_empty boolean_stackdepth) (-94 exec_do*count (integer_yank integer_empty in3 exec_swap (boolean_dup_items integer_eq integer_swap exec_stackdepth boolean_and boolean_yankdup exec_s (boolean_rot) (exec_empty) (integer_mod) exec_dup_items) (exec_k_when_autoconstructing (exec_shove (in1) boolean_flush tagged_295) (exec_swap (integer_empty integer_empty integer_yankdup) () integer_lte integer_yank exec_stackdepth integer_eq integer_yank) tagged_699))) ()) ())
Lexicase best errors: [0 1 0 0 0 0 0 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 83
Percent parens: 0.265
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_xor} {:close 1, :instruction in1} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_pop} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_do*times} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_eq} {:close 1, :instruction print_newline} {:close 0, :instruction tagged_58} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_if} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction -94} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_empty} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_rot} {:close 1, :instruction exec_empty} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 1, :instruction tagged_295} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_empty} {:close 2, :instruction integer_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_yank} {:close 0, :instruction tagged_699})
Zero cases best program: (integer_shove boolean_yankdup integer_inc integer_rot integer_rot boolean_xor in1 boolean_dup_times boolean_swap integer_yankdup exec_while (exec_k () (boolean_pop boolean_dup_times) exec_pop () exec_noop) exec_do*times (in3 boolean_yankdup exec_eq print_newline) tagged_58 integer_shove print_integer integer_mult exec_if (exec_s_when_autoconstructing (integer_empty boolean_stackdepth) (-94 exec_do*count (integer_yank integer_empty in3 exec_swap (boolean_dup_items integer_eq integer_swap exec_stackdepth boolean_and boolean_yankdup exec_s (boolean_rot) (exec_empty) (integer_mod) exec_dup_items) (exec_k_when_autoconstructing (exec_shove (in1) boolean_flush tagged_295) (exec_swap (integer_empty integer_empty integer_yankdup) () integer_lte integer_yank exec_stackdepth integer_eq integer_yank) tagged_699))) ()) ())
Zero cases best errors: [0 1 0 0 0 0 0 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 83
Percent parens: 0.265
--- Lexicase Population Statistics ---
Count of elite individuals by case: (332 4 331 332 165 330 331 330 551 69)
Population mean number of elite cases: 2.78
Count of perfect (error zero) individuals by case: (332 4 331 332 165 330 331 330 551 69)
Population mean number of perfect (error zero) cases: 2.78
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_xor} {:close 1, :instruction in1} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_pop} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_do*times} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_eq} {:close 1, :instruction print_newline} {:close 0, :instruction tagged_58} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_if} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction -94} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_empty} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_rot} {:close 1, :instruction exec_empty} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 1, :instruction tagged_295} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_empty} {:close 2, :instruction integer_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_yank} {:close 0, :instruction tagged_699})
Best program: (integer_shove boolean_yankdup integer_inc integer_rot integer_rot boolean_xor in1 boolean_dup_times boolean_swap integer_yankdup exec_while (exec_k () (boolean_pop boolean_dup_times) exec_pop () exec_noop) exec_do*times (in3 boolean_yankdup exec_eq print_newline) tagged_58 integer_shove print_integer integer_mult exec_if (exec_s_when_autoconstructing (integer_empty boolean_stackdepth) (-94 exec_do*count (integer_yank integer_empty in3 exec_swap (boolean_dup_items integer_eq integer_swap exec_stackdepth boolean_and boolean_yankdup exec_s (boolean_rot) (exec_empty) (integer_mod) exec_dup_items) (exec_k_when_autoconstructing (exec_shove (in1) boolean_flush tagged_295) (exec_swap (integer_empty integer_empty integer_yankdup) () integer_lte integer_yank exec_stackdepth integer_eq integer_yank) tagged_699))) ()) ())
Errors: [0 1 0 0 0 0 0 0 0 1]
Total: 2
Mean: 0.2
Genome size: 61
Size: 83
Percent parens: 0.265
--- Population Statistics ---
Average total errors in population: 7.225
Median total errors in population: 8
Error averages by case: (0.668 0.996 0.669 0.668 0.835 0.67 0.669 0.67 0.449 0.931)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 61.95
Average program size in population (points): 82.932
Average percent parens in population: 0.249
Minimum age in population: 2.0
Maximum age in population: 2.0
Average age in population: 2.0
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.009
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.163
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 2033772
--- Timings ---
Current time: 1559594065945 milliseconds
Total Time:           9.0 seconds
Initialization:       0.1 seconds,  1.1%
Reproduction:         3.2 seconds, 35.1%
Fitness Testing:      4.0 seconds, 44.2%
Report:               1.8 seconds, 19.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 432
Test mean error for best: 0.43200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 49                  | Program output: 49                 
Correct output: -54                 | Program output: -44                
Correct output: -14                 | Program output: -14                
Correct output: 59                  | Program output: 96                 
Correct output: -81                 | Program output: 47                 
Correct output: -26                 | Program output: -26                
Correct output: -72                 | Program output: -72                
Correct output: -11                 | Program output: -11                
Correct output: 9                   | Program output: 9                  
Correct output: -91                 | Program output: 69                 
Correct output: -97                 | Program output: -97                
Correct output: 17                  | Program output: 17                 
Correct output: -62                 | Program output: -62                
Correct output: -95                 | Program output: -95                
Correct output: 0                   | Program output: 0                  
Correct output: 13                  | Program output: 23                 
Correct output: 77                  | Program output: 77                 
Correct output: 17                  | Program output: 47                 
Correct output: 18                  | Program output: 52                 
Correct output: 9                   | Program output: 9                  
Correct output: 14                  | Program output: 14                 
Correct output: 2                   | Program output: 2                  
Correct output: 4                   | Program output: 36                 
Correct output: 8                   | Program output: 70                 
Correct output: 72                  | Program output: 72                 
Correct output: 14                  | Program output: 56                 
Correct output: 9                   | Program output: 9                  
Correct output: 82                  | Program output: 82                 
Correct output: 22                  | Program output: 38                 
Correct output: 15                  | Program output: 15                 
Correct output: 14                  | Program output: 14                 
Correct output: 45                  | Program output: 45                 
Correct output: 46                  | Program output: 63                 
Correct output: 1                   | Program output: 19                 
Correct output: 20                  | Program output: 67                 
Correct output: -68                 | Program output: -50                
Correct output: -87                 | Program output: -87                
Correct output: -71                 | Program output: -71                
Correct output: -87                 | Program output: -87                
Correct output: -92                 | Program output: -92                
Correct output: -68                 | Program output: -68                
Correct output: -13                 | Program output: -13                
Correct output: -50                 | Program output: -50                
Correct output: -91                 | Program output: 66                 
Correct output: -88                 | Program output: -88                
Correct output: -72                 | Program output: -72                
Correct output: -91                 | Program output: -91                
Correct output: -45                 | Program output: -39                
Correct output: -51                 | Program output: -51                
Correct output: -28                 | Program output: -28                
Correct output: -57                 | Program output: -57                
Correct output: -46                 | Program output: -40                
Correct output: -73                 | Program output: -12                
Correct output: -91                 | Program output: -91                
Correct output: -84                 | Program output: -84                
Correct output: -63                 | Program output: -63                
Correct output: -36                 | Program output: -36                
Correct output: -84                 | Program output: -73                
Correct output: -13                 | Program output: -13                
Correct output: -41                 | Program output: -5                 
Correct output: -77                 | Program output: 29                 
Correct output: -80                 | Program output: -80                
Correct output: 44                  | Program output: 44                 
Correct output: -68                 | Program output: -3                 
Correct output: -97                 | Program output: -53                
Correct output: -95                 | Program output: 68                 
Correct output: 10                  | Program output: 10                 
Correct output: -76                 | Program output: -63                
Correct output: -49                 | Program output: -33                
Correct output: 23                  | Program output: 47                 
Correct output: -96                 | Program output: -96                
Correct output: -11                 | Program output: 39                 
Correct output: -96                 | Program output: -96                
Correct output: -94                 | Program output: -50                
Correct output: -28                 | Program output: -28                
Correct output: -48                 | Program output: -48                
Correct output: -85                 | Program output: -85                
Correct output: -27                 | Program output: -23                
Correct output: -21                 | Program output: -21                
Correct output: -86                 | Program output: -69                
Correct output: 50                  | Program output: 50                 
Correct output: -76                 | Program output: -43                
Correct output: 11                  | Program output: 11                 
Correct output: -30                 | Program output: -18                
Correct output: -74                 | Program output: -34                
Correct output: -47                 | Program output: -47                
Correct output: -8                  | Program output: 61                 
Correct output: -74                 | Program output: -74                
Correct output: -6                  | Program output: -6                 
Correct output: -80                 | Program output: -80                
Correct output: -49                 | Program output: 19                 
Correct output: -28                 | Program output: 61                 
Correct output: 33                  | Program output: 71                 
Correct output: 9                   | Program output: 35                 
Correct output: 48                  | Program output: 67                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_xor} {:close 1, :instruction in1} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction exec_k} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_pop} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_noop} {:close 0, :instruction in3} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_eq} {:close 1, :instruction print_newline} {:close 0, :instruction tagged_58} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_if} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction -94} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_yank} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_rot} {:close 1, :instruction exec_empty} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 1, :instruction tagged_295} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_empty} {:close 2, :instruction integer_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_yank} {:close 0, :instruction tagged_699})
Lexicase best program: (integer_shove boolean_yankdup integer_inc integer_rot integer_rot boolean_xor in1 boolean_dup_times boolean_swap integer_yankdup exec_while (exec_k () (boolean_dup_times) exec_pop () exec_y_when_autoconstructing () exec_noop) in3 integer_min boolean_yankdup exec_eq print_newline tagged_58 integer_shove print_integer integer_mult exec_if (exec_s_when_autoconstructing (integer_empty boolean_stackdepth) (-94 exec_do*count (integer_yank in3 exec_swap (boolean_dup_items integer_eq integer_swap exec_stackdepth boolean_and boolean_yankdup boolean_rot) (exec_empty) integer_mod) exec_dup_items) (boolean_swap exec_k_when_autoconstructing (exec_shove (in1) boolean_flush tagged_295) (exec_swap (integer_empty exec_do*while (integer_empty integer_yankdup)) (exec_stackdepth integer_eq integer_yank) tagged_699))) ())
Lexicase best errors: [0 0 0 0 1 1 0 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 79
Percent parens: 0.253
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_xor} {:close 1, :instruction in1} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction exec_k} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_pop} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_noop} {:close 0, :instruction in3} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_eq} {:close 1, :instruction print_newline} {:close 0, :instruction tagged_58} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_if} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction -94} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_yank} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_rot} {:close 1, :instruction exec_empty} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 1, :instruction tagged_295} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_empty} {:close 2, :instruction integer_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_yank} {:close 0, :instruction tagged_699})
Zero cases best program: (integer_shove boolean_yankdup integer_inc integer_rot integer_rot boolean_xor in1 boolean_dup_times boolean_swap integer_yankdup exec_while (exec_k () (boolean_dup_times) exec_pop () exec_y_when_autoconstructing () exec_noop) in3 integer_min boolean_yankdup exec_eq print_newline tagged_58 integer_shove print_integer integer_mult exec_if (exec_s_when_autoconstructing (integer_empty boolean_stackdepth) (-94 exec_do*count (integer_yank in3 exec_swap (boolean_dup_items integer_eq integer_swap exec_stackdepth boolean_and boolean_yankdup boolean_rot) (exec_empty) integer_mod) exec_dup_items) (boolean_swap exec_k_when_autoconstructing (exec_shove (in1) boolean_flush tagged_295) (exec_swap (integer_empty exec_do*while (integer_empty integer_yankdup)) (exec_stackdepth integer_eq integer_yank) tagged_699))) ())
Zero cases best errors: [0 0 0 0 1 1 0 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 79
Percent parens: 0.253
--- Lexicase Population Statistics ---
Count of elite individuals by case: (343 138 90 294 61 58 92 287 347 66)
Population mean number of elite cases: 1.78
Count of perfect (error zero) individuals by case: (343 138 90 294 61 58 92 287 347 66)
Population mean number of perfect (error zero) cases: 1.78
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_xor} {:close 1, :instruction in1} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction exec_k} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_pop} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_noop} {:close 0, :instruction in3} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_eq} {:close 1, :instruction print_newline} {:close 0, :instruction tagged_58} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_if} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction -94} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_yank} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_rot} {:close 1, :instruction exec_empty} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 1, :instruction tagged_295} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_empty} {:close 2, :instruction integer_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_yank} {:close 0, :instruction tagged_699})
Best program: (integer_shove boolean_yankdup integer_inc integer_rot integer_rot boolean_xor in1 boolean_dup_times boolean_swap integer_yankdup exec_while (exec_k () (boolean_dup_times) exec_pop () exec_y_when_autoconstructing () exec_noop) in3 integer_min boolean_yankdup exec_eq print_newline tagged_58 integer_shove print_integer integer_mult exec_if (exec_s_when_autoconstructing (integer_empty boolean_stackdepth) (-94 exec_do*count (integer_yank in3 exec_swap (boolean_dup_items integer_eq integer_swap exec_stackdepth boolean_and boolean_yankdup boolean_rot) (exec_empty) integer_mod) exec_dup_items) (boolean_swap exec_k_when_autoconstructing (exec_shove (in1) boolean_flush tagged_295) (exec_swap (integer_empty exec_do*while (integer_empty integer_yankdup)) (exec_stackdepth integer_eq integer_yank) tagged_699))) ())
Errors: [0 0 0 0 1 1 0 0 0 1]
Total: 3
Mean: 0.3
Genome size: 59
Size: 79
Percent parens: 0.253
--- Population Statistics ---
Average total errors in population: 8.224
Median total errors in population: 9
Error averages by case: (0.657 0.862 0.91 0.706 0.939 0.942 0.908 0.713 0.653 0.934)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 61.957
Average program size in population (points): 84.396
Average percent parens in population: 0.265
Minimum age in population: 3.0
Maximum age in population: 3.0
Average age in population: 3.0
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.008
Error (vector) diversity:			 0.026
Behavioral diversity:				 0.194
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 2600756
--- Timings ---
Current time: 1559594068053 milliseconds
Total Time:          11.2 seconds
Initialization:       0.1 seconds,  0.9%
Reproduction:         4.5 seconds, 39.9%
Fitness Testing:      4.6 seconds, 41.2%
Report:               2.0 seconds, 18.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 398
Test mean error for best: 0.39800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 49                  | Program output: 49                 
Correct output: -54                 | Program output: -54                
Correct output: -14                 | Program output: -14                
Correct output: 59                  | Program output: 96                 
Correct output: -81                 | Program output: -81                
Correct output: -26                 | Program output: -26                
Correct output: -72                 | Program output: -9                 
Correct output: -11                 | Program output: -11                
Correct output: 9                   | Program output: 9                  
Correct output: -91                 | Program output: -91                
Correct output: -97                 | Program output: -97                
Correct output: 17                  | Program output: 17                 
Correct output: -62                 | Program output: -62                
Correct output: -95                 | Program output: -95                
Correct output: 0                   | Program output: 0                  
Correct output: 13                  | Program output: 85                 
Correct output: 77                  | Program output: 77                 
Correct output: 17                  | Program output: 17                 
Correct output: 18                  | Program output: 18                 
Correct output: 9                   | Program output: 54                 
Correct output: 14                  | Program output: 14                 
Correct output: 2                   | Program output: 2                  
Correct output: 4                   | Program output: 34                 
Correct output: 8                   | Program output: 65                 
Correct output: 72                  | Program output: 72                 
Correct output: 14                  | Program output: 14                 
Correct output: 9                   | Program output: 9                  
Correct output: 82                  | Program output: 82                 
Correct output: 22                  | Program output: 22                 
Correct output: 15                  | Program output: 15                 
Correct output: 14                  | Program output: 37                 
Correct output: 45                  | Program output: 97                 
Correct output: 46                  | Program output: 46                 
Correct output: 1                   | Program output: 32                 
Correct output: 20                  | Program output: 75                 
Correct output: -68                 | Program output: -68                
Correct output: -87                 | Program output: -87                
Correct output: -71                 | Program output: -11                
Correct output: -87                 | Program output: -87                
Correct output: -92                 | Program output: -92                
Correct output: -68                 | Program output: -68                
Correct output: -13                 | Program output: 20                 
Correct output: -50                 | Program output: 9                  
Correct output: -91                 | Program output: 8                  
Correct output: -88                 | Program output: -59                
Correct output: -72                 | Program output: -72                
Correct output: -91                 | Program output: -10                
Correct output: -45                 | Program output: -45                
Correct output: -51                 | Program output: -50                
Correct output: -28                 | Program output: 67                 
Correct output: -57                 | Program output: -17                
Correct output: -46                 | Program output: 99                 
Correct output: -73                 | Program output: -73                
Correct output: -91                 | Program output: -91                
Correct output: -84                 | Program output: -84                
Correct output: -63                 | Program output: -63                
Correct output: -36                 | Program output: -36                
Correct output: -84                 | Program output: -67                
Correct output: -13                 | Program output: -13                
Correct output: -41                 | Program output: -41                
Correct output: -77                 | Program output: 52                 
Correct output: -80                 | Program output: -45                
Correct output: 44                  | Program output: 44                 
Correct output: -68                 | Program output: -3                 
Correct output: -97                 | Program output: -53                
Correct output: -95                 | Program output: -95                
Correct output: 10                  | Program output: 16                 
Correct output: -76                 | Program output: -76                
Correct output: -49                 | Program output: -49                
Correct output: 23                  | Program output: 23                 
Correct output: -96                 | Program output: -96                
Correct output: -11                 | Program output: 80                 
Correct output: -96                 | Program output: -46                
Correct output: -94                 | Program output: -94                
Correct output: -28                 | Program output: -17                
Correct output: -48                 | Program output: 34                 
Correct output: -85                 | Program output: -76                
Correct output: -27                 | Program output: -7                 
Correct output: -21                 | Program output: 51                 
Correct output: -86                 | Program output: -69                
Correct output: 50                  | Program output: 50                 
Correct output: -76                 | Program output: -43                
Correct output: 11                  | Program output: 11                 
Correct output: -30                 | Program output: -30                
Correct output: -74                 | Program output: -63                
Correct output: -47                 | Program output: 15                 
Correct output: -8                  | Program output: -8                 
Correct output: -74                 | Program output: -74                
Correct output: -6                  | Program output: 40                 
Correct output: -80                 | Program output: -28                
Correct output: -49                 | Program output: -13                
Correct output: -28                 | Program output: -28                
Correct output: 33                  | Program output: 33                 
Correct output: 9                   | Program output: 9                  
Correct output: 48                  | Program output: 66                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_while} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction tagged_361} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction -86} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in1} {:close 0, :instruction integer_lt} {:close 0, :instruction print_newline} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_add} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 2, :instruction integer_pop} {:close 1, :instruction exec_do*count} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_shove} {:close 0, :instruction print_newline} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_k} {:close 0, :instruction integer_max} {:close 2, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_227} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_newline} {:close 0, :instruction exec_eq} {:close 0, :instruction print_exec} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup})
Lexicase best program: (boolean_yankdup in2 integer_dup exec_shove (integer_shove in3 integer_min integer_yank boolean_rot exec_s (print_integer exec_k_when_autoconstructing (exec_do*while (boolean_and) exec_k (exec_y (boolean_swap exec_while () exec_noop) boolean_shove integer_rot integer_pop boolean_dup tagged_361) (boolean_frominteger -86 integer_yankdup exec_eq exec_yank integer_mult exec_dup_items in1) integer_lt print_newline exec_pop (integer_pop integer_yank boolean_yankdup integer_mod boolean_frominteger boolean_invert_first_then_and integer_add) integer_yank integer_mod exec_dup (exec_flush exec_s (in4 integer_pop) () (exec_do*count () exec_rot () (integer_gt integer_inc boolean_swap boolean_rot exec_shove () print_newline exec_s_when_autoconstructing () () (integer_lt exec_noop integer_yankdup integer_min exec_do*while (exec_k (integer_max integer_swap) () integer_yank integer_stackdepth boolean_dup) boolean_shove boolean_dup boolean_swap boolean_rot integer_mult boolean_xor) integer_rot tagged_227 exec_dup () integer_yankdup print_newline exec_eq print_exec (exec_do*count (exec_dup_times (boolean_dup)))) ()))) ()) () ()))
Lexicase best errors: [0 0 0 0 0 1 0 1 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 117
Percent parens: 0.274
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_while} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction tagged_361} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction -86} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in1} {:close 0, :instruction integer_lt} {:close 0, :instruction print_newline} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_add} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 2, :instruction integer_pop} {:close 1, :instruction exec_do*count} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_shove} {:close 0, :instruction print_newline} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_k} {:close 0, :instruction integer_max} {:close 2, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_227} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_newline} {:close 0, :instruction exec_eq} {:close 0, :instruction print_exec} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup})
Zero cases best program: (boolean_yankdup in2 integer_dup exec_shove (integer_shove in3 integer_min integer_yank boolean_rot exec_s (print_integer exec_k_when_autoconstructing (exec_do*while (boolean_and) exec_k (exec_y (boolean_swap exec_while () exec_noop) boolean_shove integer_rot integer_pop boolean_dup tagged_361) (boolean_frominteger -86 integer_yankdup exec_eq exec_yank integer_mult exec_dup_items in1) integer_lt print_newline exec_pop (integer_pop integer_yank boolean_yankdup integer_mod boolean_frominteger boolean_invert_first_then_and integer_add) integer_yank integer_mod exec_dup (exec_flush exec_s (in4 integer_pop) () (exec_do*count () exec_rot () (integer_gt integer_inc boolean_swap boolean_rot exec_shove () print_newline exec_s_when_autoconstructing () () (integer_lt exec_noop integer_yankdup integer_min exec_do*while (exec_k (integer_max integer_swap) () integer_yank integer_stackdepth boolean_dup) boolean_shove boolean_dup boolean_swap boolean_rot integer_mult boolean_xor) integer_rot tagged_227 exec_dup () integer_yankdup print_newline exec_eq print_exec (exec_do*count (exec_dup_times (boolean_dup)))) ()))) ()) () ()))
Zero cases best errors: [0 0 0 0 0 1 0 1 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 117
Percent parens: 0.274
--- Lexicase Population Statistics ---
Count of elite individuals by case: (212 620 202 371 213 278 212 279 19 498)
Population mean number of elite cases: 2.90
Count of perfect (error zero) individuals by case: (212 620 202 371 213 278 212 279 19 498)
Population mean number of perfect (error zero) cases: 2.90
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_div} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_while} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction tagged_361} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction -86} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in1} {:close 0, :instruction integer_lt} {:close 0, :instruction print_newline} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 2, :instruction integer_pop} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_do*count} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction print_newline} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 2, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_dup} {:close 0, :instruction print_newline} {:close 0, :instruction exec_eq} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup})
Best program: (boolean_yankdup in2 integer_dup exec_shove (in3 integer_min integer_yank boolean_and boolean_rot exec_s (print_integer exec_k_when_autoconstructing (boolean_or) (exec_do*while (integer_div exec_k (exec_y (boolean_swap exec_while () exec_noop) boolean_shove integer_rot integer_pop boolean_dup tagged_361) (boolean_frominteger -86 integer_yankdup exec_stackdepth exec_rot (exec_eq exec_yank integer_mult exec_dup_items in1) (integer_lt print_newline exec_pop (boolean_dup integer_yank boolean_yankdup integer_mod boolean_frominteger boolean_invert_first_then_and exec_flush integer_yank integer_pop integer_mod exec_dup (boolean_eq) exec_flush exec_s (in4 integer_pop) () (boolean_eq exec_do*count () exec_rot () (integer_gt integer_inc boolean_swap integer_dup) (boolean_rot boolean_stackdepth) print_newline integer_lt integer_gt) exec_y_when_autoconstructing (integer_yankdup integer_min boolean_invert_second_then_and exec_do*while (exec_k (exec_dup_items integer_max integer_swap) () integer_yank integer_eq integer_stackdepth boolean_dup) boolean_shove boolean_dup boolean_swap boolean_rot integer_mult boolean_xor) integer_rot exec_dup () print_newline exec_eq print_exec (exec_dup_times (boolean_dup)))) ())))) () ()))
Errors: [0 0 0 0 0 1 0 1 1 0]
Total: 3
Mean: 0.3
Genome size: 92
Size: 123
Percent parens: 0.252
--- Population Statistics ---
Average total errors in population: 7.096
Median total errors in population: 7
Error averages by case: (0.788 0.38 0.798 0.629 0.787 0.722 0.788 0.721 0.981 0.502)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 70.624
Average program size in population (points): 95.343
Average percent parens in population: 0.257
Minimum age in population: 4.0
Maximum age in population: 4.0
Average age in population: 4.0
Median age in population: 4.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.008
Error (vector) diversity:			 0.03
Behavioral diversity:				 0.19
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 3372916
--- Timings ---
Current time: 1559594070801 milliseconds
Total Time:          13.4 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:         5.7 seconds, 42.3%
Fitness Testing:      5.4 seconds, 40.2%
Report:               2.2 seconds, 16.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 412
Test mean error for best: 0.41200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 49                  | Program output: 49                 
Correct output: -54                 | Program output: -54                
Correct output: -14                 | Program output: 13                 
Correct output: 59                  | Program output: 96                 
Correct output: -81                 | Program output: -81                
Correct output: -26                 | Program output: -26                
Correct output: -72                 | Program output: -72                
Correct output: -11                 | Program output: 29                 
Correct output: 9                   | Program output: 9                  
Correct output: -91                 | Program output: -91                
Correct output: -97                 | Program output: -97                
Correct output: 17                  | Program output: 17                 
Correct output: -62                 | Program output: -62                
Correct output: -95                 | Program output: -95                
Correct output: 0                   | Program output: 0                  
Correct output: 13                  | Program output: 23                 
Correct output: 77                  | Program output: 83                 
Correct output: 17                  | Program output: 17                 
Correct output: 18                  | Program output: 18                 
Correct output: 9                   | Program output: 9                  
Correct output: 14                  | Program output: 38                 
Correct output: 2                   | Program output: 11                 
Correct output: 4                   | Program output: 34                 
Correct output: 8                   | Program output: 65                 
Correct output: 72                  | Program output: 75                 
Correct output: 14                  | Program output: 14                 
Correct output: 9                   | Program output: 11                 
Correct output: 82                  | Program output: 82                 
Correct output: 22                  | Program output: 22                 
Correct output: 15                  | Program output: 20                 
Correct output: 14                  | Program output: 14                 
Correct output: 45                  | Program output: 45                 
Correct output: 46                  | Program output: 46                 
Correct output: 1                   | Program output: 19                 
Correct output: 20                  | Program output: 67                 
Correct output: -68                 | Program output: -68                
Correct output: -87                 | Program output: -53                
Correct output: -71                 | Program output: -71                
Correct output: -87                 | Program output: -47                
Correct output: -92                 | Program output: -73                
Correct output: -68                 | Program output: 54                 
Correct output: -13                 | Program output: -13                
Correct output: -50                 | Program output: -50                
Correct output: -91                 | Program output: 8                  
Correct output: -88                 | Program output: -88                
Correct output: -72                 | Program output: 5                  
Correct output: -91                 | Program output: -91                
Correct output: -45                 | Program output: -45                
Correct output: -51                 | Program output: -51                
Correct output: -28                 | Program output: -28                
Correct output: -57                 | Program output: -57                
Correct output: -46                 | Program output: -40                
Correct output: -73                 | Program output: -73                
Correct output: -91                 | Program output: -24                
Correct output: -84                 | Program output: -28                
Correct output: -63                 | Program output: 60                 
Correct output: -36                 | Program output: -25                
Correct output: -84                 | Program output: -73                
Correct output: -13                 | Program output: -12                
Correct output: -41                 | Program output: -41                
Correct output: -77                 | Program output: 29                 
Correct output: -80                 | Program output: -80                
Correct output: 44                  | Program output: 50                 
Correct output: -68                 | Program output: 56                 
Correct output: -97                 | Program output: 3                  
Correct output: -95                 | Program output: -95                
Correct output: 10                  | Program output: 10                 
Correct output: -76                 | Program output: -76                
Correct output: -49                 | Program output: -49                
Correct output: 23                  | Program output: 23                 
Correct output: -96                 | Program output: 10                 
Correct output: -11                 | Program output: 39                 
Correct output: -96                 | Program output: -96                
Correct output: -94                 | Program output: -94                
Correct output: -28                 | Program output: -28                
Correct output: -48                 | Program output: -48                
Correct output: -85                 | Program output: -85                
Correct output: -27                 | Program output: -23                
Correct output: -21                 | Program output: -21                
Correct output: -86                 | Program output: -58                
Correct output: 50                  | Program output: 89                 
Correct output: -76                 | Program output: -34                
Correct output: 11                  | Program output: 15                 
Correct output: -30                 | Program output: -30                
Correct output: -74                 | Program output: -63                
Correct output: -47                 | Program output: -47                
Correct output: -8                  | Program output: -8                 
Correct output: -74                 | Program output: 13                 
Correct output: -6                  | Program output: -6                 
Correct output: -80                 | Program output: -80                
Correct output: -49                 | Program output: -13                
Correct output: -28                 | Program output: -28                
Correct output: 33                  | Program output: 33                 
Correct output: 9                   | Program output: 9                  
Correct output: 48                  | Program output: 66                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*count} {:close 1, :instruction in2} {:close 0, :instruction boolean_xor} {:close 1, :instruction in1} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_while} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_noop} {:close 1, :instruction print_newline} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction tagged_58} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction integer_div} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_s} {:close 0, :instruction tag_exec_855} {:close 1, :instruction exec_k} {:close 1, :instruction boolean_rot} {:close 1, :instruction exec_empty} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_flush} {:close 1, :instruction tagged_295} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_add} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_pop})
Lexicase best program: (integer_shove integer_gte exec_do*count (in2) boolean_xor in1 boolean_swap exec_while (exec_k () (exec_do*count (exec_y (boolean_dup_times) exec_noop) print_newline) integer_dup_items) integer_min tagged_58 integer_shove print_integer exec_if (integer_div in1 exec_s_when_autoconstructing (exec_s_when_autoconstructing (exec_empty boolean_invert_first_then_and) (boolean_stackdepth) (exec_do*count (integer_empty boolean_dup_times integer_swap exec_swap (boolean_dup_items integer_swap boolean_and exec_stackdepth boolean_shove boolean_and boolean_yankdup exec_s (boolean_pop exec_s (tag_exec_855 (exec_k () (boolean_rot) exec_empty) integer_mod) (integer_dup boolean_invert_second_then_and exec_dup_items) (integer_gt exec_shove (integer_dup_items integer_gt boolean_flush boolean_flush tagged_295) integer_empty integer_mod integer_yank exec_stackdepth integer_eq integer_add) exec_dup_items exec_pop ()) () ()) ()))) () ()) ())
Lexicase best errors: [0 0 1 0 0 0 0 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 94
Percent parens: 0.309
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*count} {:close 1, :instruction in2} {:close 0, :instruction boolean_xor} {:close 1, :instruction in1} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_while} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_noop} {:close 1, :instruction print_newline} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction tagged_58} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction integer_div} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_s} {:close 0, :instruction tag_exec_855} {:close 1, :instruction exec_k} {:close 1, :instruction boolean_rot} {:close 1, :instruction exec_empty} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_flush} {:close 1, :instruction tagged_295} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_add} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_pop})
Zero cases best program: (integer_shove integer_gte exec_do*count (in2) boolean_xor in1 boolean_swap exec_while (exec_k () (exec_do*count (exec_y (boolean_dup_times) exec_noop) print_newline) integer_dup_items) integer_min tagged_58 integer_shove print_integer exec_if (integer_div in1 exec_s_when_autoconstructing (exec_s_when_autoconstructing (exec_empty boolean_invert_first_then_and) (boolean_stackdepth) (exec_do*count (integer_empty boolean_dup_times integer_swap exec_swap (boolean_dup_items integer_swap boolean_and exec_stackdepth boolean_shove boolean_and boolean_yankdup exec_s (boolean_pop exec_s (tag_exec_855 (exec_k () (boolean_rot) exec_empty) integer_mod) (integer_dup boolean_invert_second_then_and exec_dup_items) (integer_gt exec_shove (integer_dup_items integer_gt boolean_flush boolean_flush tagged_295) integer_empty integer_mod integer_yank exec_stackdepth integer_eq integer_add) exec_dup_items exec_pop ()) () ()) ()))) () ()) ())
Zero cases best errors: [0 0 1 0 0 0 0 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 94
Percent parens: 0.309
--- Lexicase Population Statistics ---
Count of elite individuals by case: (357 113 14 216 146 357 352 145 239 15)
Population mean number of elite cases: 1.95
Count of perfect (error zero) individuals by case: (357 113 14 216 146 357 352 145 239 15)
Population mean number of perfect (error zero) cases: 1.95
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction tagged_959} {:close 1, :instruction in2} {:close 0, :instruction boolean_rot} {:close 1, :instruction in1} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction exec_while} {:close 1, :instruction exec_k} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_pop} {:close 1, :instruction exec_noop} {:close 1, :instruction print_newline} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_shove} {:close 1, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_if} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_s} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_empty} {:close 0, :instruction in3} {:close 0, :instruction -72} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction tag_exec_855} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_if} {:close 1, :instruction exec_k} {:close 1, :instruction boolean_rot} {:close 1, :instruction exec_empty} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_pop} {:close 1, :instruction tagged_295} {:close 0, :instruction integer_empty} {:close 2, :instruction integer_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_pop})
Best program: (integer_shove integer_gte tagged_959 in2 boolean_rot in1 boolean_swap exec_s (exec_while (exec_k () (print_integer exec_do*count (exec_y (boolean_dup_times) exec_pop () exec_noop) print_newline) integer_dup_items) integer_min integer_rot integer_shove) (boolean_rot) (print_integer integer_yank exec_if (exec_s_when_autoconstructing (exec_dup (integer_empty boolean_stackdepth) boolean_flush integer_div exec_do*count (exec_s (exec_shove (integer_empty in3 -72 exec_swap (boolean_dup_items integer_swap exec_dup_items integer_rot boolean_and exec_stackdepth boolean_and boolean_yankdup exec_s (exec_s (tag_exec_855 (boolean_xor exec_if (exec_k () (boolean_rot) exec_empty) (integer_mod) boolean_invert_second_then_and exec_dup_items) exec_shove (boolean_pop tagged_295) integer_empty integer_yankdup) () (integer_yank print_integer exec_s_when_autoconstructing (exec_dup_items exec_pop ()) () ())) () ()) ())) () ())) () ()) ()))
Errors: [0 0 1 0 0 0 0 0 0 1]
Total: 2
Mean: 0.2
Genome size: 67
Size: 106
Percent parens: 0.368
--- Population Statistics ---
Average total errors in population: 8.046
Median total errors in population: 8
Error averages by case: (0.643 0.887 0.986 0.784 0.854 0.643 0.648 0.855 0.761 0.985)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 76.054
Average program size in population (points): 103.632
Average percent parens in population: 0.263
Minimum age in population: 5.0
Maximum age in population: 5.0
Average age in population: 5.0
Median age in population: 5.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.008
Error (vector) diversity:			 0.028
Behavioral diversity:				 0.246
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 4432974
--- Timings ---
Current time: 1559594073921 milliseconds
Total Time:          16.4 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         6.9 seconds, 42.1%
Fitness Testing:      6.4 seconds, 39.2%
Report:               3.0 seconds, 18.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 720
Test mean error for best: 0.72000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output:                    
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output:                    
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 49                  | Program output: 49                 
Correct output: -54                 | Program output: -44                
Correct output: -14                 | Program output: -14                
Correct output: 59                  | Program output: 96                 
Correct output: -81                 | Program output: 47                 
Correct output: -26                 | Program output: -26                
Correct output: -72                 | Program output: -9                 
Correct output: -11                 | Program output: -11                
Correct output: 9                   | Program output: 9                  
Correct output: -91                 | Program output: 69                 
Correct output: -97                 | Program output: -97                
Correct output: 17                  | Program output: 17                 
Correct output: -62                 | Program output: -62                
Correct output: -95                 | Program output: -95                
Correct output: 0                   | Program output:                    
Correct output: 13                  | Program output: 92                 
Correct output: 77                  | Program output: 77                 
Correct output: 17                  | Program output: 47                 
Correct output: 18                  | Program output: 89                 
Correct output: 9                   | Program output: 54                 
Correct output: 14                  | Program output: 14                 
Correct output: 2                   | Program output: 2                  
Correct output: 4                   | Program output: 36                 
Correct output: 8                   | Program output: 83                 
Correct output: 72                  | Program output: 72                 
Correct output: 14                  | Program output: 77                 
Correct output: 9                   | Program output: 9                  
Correct output: 82                  | Program output: 82                 
Correct output: 22                  | Program output: 38                 
Correct output: 15                  | Program output: 15                 
Correct output: 14                  | Program output: 100                
Correct output: 45                  | Program output: 100                
Correct output: 46                  | Program output: 67                 
Correct output: 1                   | Program output: 46                 
Correct output: 20                  | Program output: 75                 
Correct output: -68                 | Program output: -50                
Correct output: -87                 | Program output: -87                
Correct output: -71                 | Program output: -3621              
Correct output: -87                 | Program output:                    
Correct output: -92                 | Program output:                    
Correct output: -68                 | Program output: -68                
Correct output: -13                 | Program output: -637               
Correct output: -50                 | Program output: -1400              
Correct output: -91                 | Program output: -6006              
Correct output: -88                 | Program output:                    
Correct output: -72                 | Program output:                    
Correct output: -91                 | Program output: -1                 
Correct output: -45                 | Program output: -507               
Correct output: -51                 | Program output: -50                
Correct output: -28                 | Program output: -1708              
Correct output: -57                 | Program output: -16                
Correct output: -46                 | Program output: 99                 
Correct output: -73                 | Program output:                    
Correct output: -91                 | Program output:                    
Correct output: -84                 | Program output:                    
Correct output: -63                 | Program output: -63                
Correct output: -36                 | Program output: -36                
Correct output: -84                 | Program output: -67                
Correct output: -13                 | Program output: -13                
Correct output: -41                 | Program output: -125               
Correct output: -77                 | Program output: -2233              
Correct output: -80                 | Program output:                    
Correct output: 44                  | Program output: 44                 
Correct output: -68                 | Program output:                    
Correct output: -97                 | Program output:                    
Correct output: -95                 | Program output: 68                 
Correct output: 10                  | Program output: 31                 
Correct output: -76                 | Program output: -63                
Correct output: -49                 | Program output:                    
Correct output: 23                  | Program output: 86                 
Correct output: -96                 | Program output:                    
Correct output: -11                 | Program output: -429               
Correct output: -96                 | Program output: -46                
Correct output: -94                 | Program output:                    
Correct output: -28                 | Program output:                    
Correct output: -48                 | Program output: 34                 
Correct output: -85                 | Program output: -8330              
Correct output: -27                 | Program output: 87                 
Correct output: -21                 | Program output: -462               
Correct output: -86                 | Program output:                    
Correct output: 50                  | Program output: 50                 
Correct output: -76                 | Program output:                    
Correct output: 11                  | Program output: 11                 
Correct output: -30                 | Program output: -1080              
Correct output: -74                 | Program output:                    
Correct output: -47                 | Program output: -1974              
Correct output: -8                  | Program output: 61                 
Correct output: -74                 | Program output: -74                
Correct output: -6                  | Program output: -384               
Correct output: -80                 | Program output: -28                
Correct output: -49                 | Program output: -4263              
Correct output: -28                 | Program output: 61                 
Correct output: 33                  | Program output: 92                 
Correct output: 9                   | Program output: 35                 
Correct output: 48                  | Program output: 75                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction exec_while} {:close 1, :instruction exec_k} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_noop} {:close 1, :instruction print_newline} {:close 0, :instruction integer_min} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_if} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_s} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_empty} {:close 0, :instruction in3} {:close 0, :instruction -72} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction tag_exec_855} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_if} {:close 1, :instruction exec_k} {:close 1, :instruction boolean_rot} {:close 1, :instruction exec_empty} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_pop} {:close 1, :instruction tagged_295} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_pop})
Lexicase best program: (integer_shove integer_gte in2 in1 boolean_swap exec_s (exec_while (exec_k () (print_integer exec_do*count (boolean_dup_times) exec_noop) print_newline) integer_min integer_rot integer_shove) (in3 print_integer integer_yank exec_if (exec_s_when_autoconstructing (exec_dup (integer_empty boolean_stackdepth) boolean_flush integer_div exec_do*count (exec_s (exec_shove (integer_empty in3 -72 exec_swap (boolean_dup_items integer_swap exec_dup_items integer_rot boolean_and exec_stackdepth boolean_yankdup exec_s (exec_s (tag_exec_855 (integer_gt boolean_xor exec_if (exec_k () (boolean_rot) exec_empty) (integer_mod) exec_dup_items) exec_shove (boolean_pop tagged_295) integer_empty integer_yank print_integer exec_s_when_autoconstructing (exec_dup_items exec_pop ()) () ()) () ()) () ()) ())) () ())) () ()) ()) ())
Lexicase best errors: [1 0 0 0 1 0 0 0 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 97
Percent parens: 0.381
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction exec_while} {:close 1, :instruction exec_k} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_noop} {:close 1, :instruction print_newline} {:close 0, :instruction integer_min} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_if} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_s} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_empty} {:close 0, :instruction in3} {:close 0, :instruction -72} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction tag_exec_855} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_if} {:close 1, :instruction exec_k} {:close 1, :instruction boolean_rot} {:close 1, :instruction exec_empty} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_pop} {:close 1, :instruction tagged_295} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_pop})
Zero cases best program: (integer_shove integer_gte in2 in1 boolean_swap exec_s (exec_while (exec_k () (print_integer exec_do*count (boolean_dup_times) exec_noop) print_newline) integer_min integer_rot integer_shove) (in3 print_integer integer_yank exec_if (exec_s_when_autoconstructing (exec_dup (integer_empty boolean_stackdepth) boolean_flush integer_div exec_do*count (exec_s (exec_shove (integer_empty in3 -72 exec_swap (boolean_dup_items integer_swap exec_dup_items integer_rot boolean_and exec_stackdepth boolean_yankdup exec_s (exec_s (tag_exec_855 (integer_gt boolean_xor exec_if (exec_k () (boolean_rot) exec_empty) (integer_mod) exec_dup_items) exec_shove (boolean_pop tagged_295) integer_empty integer_yank print_integer exec_s_when_autoconstructing (exec_dup_items exec_pop ()) () ()) () ()) () ()) ())) () ())) () ()) ()) ())
Zero cases best errors: [1 0 0 0 1 0 0 0 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 97
Percent parens: 0.381
--- Lexicase Population Statistics ---
Count of elite individuals by case: (297 12 23 19 392 19 19 22 89 295)
Population mean number of elite cases: 1.19
Count of perfect (error zero) individuals by case: (297 12 23 19 392 19 19 22 89 295)
Population mean number of perfect (error zero) cases: 1.19
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_shove} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_pop} {:close 2, :instruction integer_lt} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_pop} {:close 0, :instruction in4} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*times} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_eq} {:close 1, :instruction print_newline} {:close 0, :instruction tagged_58} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_min} {:close 1, :instruction in2} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_stackdepth} {:close 2, :instruction integer_yankdup} {:close 0, :instruction -94} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_add} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 1, :instruction in1} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_empty} {:close 2, :instruction integer_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_pop} {:close 0, :instruction in2})
Best program: (integer_shove exec_y_when_autoconstructing () integer_inc integer_rot boolean_yank integer_rot boolean_xor boolean_swap exec_dup () boolean_pop integer_lt boolean_dup_times exec_pop () in4 exec_noop in1 integer_mult exec_do*times (in3 boolean_yankdup integer_dup_times exec_eq print_newline) tagged_58 integer_shove print_integer integer_mult exec_if (boolean_invert_first_then_and integer_min in2) (integer_empty boolean_invert_second_then_and) boolean_stackdepth integer_yankdup -94 integer_yank integer_empty integer_add in3 exec_shove (boolean_shove exec_do*times () boolean_dup_items exec_dup_items integer_swap integer_sub exec_pop (boolean_and exec_s (boolean_rot) (exec_do*count (exec_stackdepth integer_mod) exec_dup_items) (exec_k_when_autoconstructing (exec_shove (in1) boolean_yankdup boolean_flush exec_noop exec_y_when_autoconstructing () exec_swap (integer_empty integer_yankdup) () integer_yank exec_stackdepth boolean_eq integer_eq boolean_pop in2) ()))))
Errors: [1 0 0 0 1 0 0 0 1 1]
Total: 4
Mean: 0.4
Genome size: 71
Size: 91
Percent parens: 0.220
--- Population Statistics ---
Average total errors in population: 8.813
Median total errors in population: 9
Error averages by case: (0.703 0.988 0.977 0.981 0.608 0.981 0.981 0.978 0.911 0.705)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 66.745
Average program size in population (points): 95.271
Average percent parens in population: 0.296
Minimum age in population: 6.0
Maximum age in population: 6.0
Average age in population: 6.0
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.007
Error (vector) diversity:			 0.018
Behavioral diversity:				 0.244
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 5373373
--- Timings ---
Current time: 1559594076566 milliseconds
Total Time:          19.5 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:         8.2 seconds, 41.9%
Fitness Testing:      7.4 seconds, 38.1%
Report:               3.8 seconds, 19.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 412
Test mean error for best: 0.41200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 49                  | Program output: 49                 
Correct output: -54                 | Program output: -54                
Correct output: -14                 | Program output: 13                 
Correct output: 59                  | Program output: 96                 
Correct output: -81                 | Program output: -81                
Correct output: -26                 | Program output: -26                
Correct output: -72                 | Program output: -72                
Correct output: -11                 | Program output: 29                 
Correct output: 9                   | Program output: 9                  
Correct output: -91                 | Program output: -91                
Correct output: -97                 | Program output: -97                
Correct output: 17                  | Program output: 17                 
Correct output: -62                 | Program output: -62                
Correct output: -95                 | Program output: -95                
Correct output: 0                   | Program output: 0                  
Correct output: 13                  | Program output: 23                 
Correct output: 77                  | Program output: 83                 
Correct output: 17                  | Program output: 17                 
Correct output: 18                  | Program output: 18                 
Correct output: 9                   | Program output: 9                  
Correct output: 14                  | Program output: 38                 
Correct output: 2                   | Program output: 11                 
Correct output: 4                   | Program output: 34                 
Correct output: 8                   | Program output: 65                 
Correct output: 72                  | Program output: 75                 
Correct output: 14                  | Program output: 14                 
Correct output: 9                   | Program output: 11                 
Correct output: 82                  | Program output: 82                 
Correct output: 22                  | Program output: 22                 
Correct output: 15                  | Program output: 20                 
Correct output: 14                  | Program output: 14                 
Correct output: 45                  | Program output: 45                 
Correct output: 46                  | Program output: 46                 
Correct output: 1                   | Program output: 19                 
Correct output: 20                  | Program output: 67                 
Correct output: -68                 | Program output: -68                
Correct output: -87                 | Program output: -53                
Correct output: -71                 | Program output: -71                
Correct output: -87                 | Program output: -47                
Correct output: -92                 | Program output: -73                
Correct output: -68                 | Program output: 54                 
Correct output: -13                 | Program output: -13                
Correct output: -50                 | Program output: -50                
Correct output: -91                 | Program output: 8                  
Correct output: -88                 | Program output: -88                
Correct output: -72                 | Program output: 5                  
Correct output: -91                 | Program output: -91                
Correct output: -45                 | Program output: -45                
Correct output: -51                 | Program output: -51                
Correct output: -28                 | Program output: -28                
Correct output: -57                 | Program output: -57                
Correct output: -46                 | Program output: -40                
Correct output: -73                 | Program output: -73                
Correct output: -91                 | Program output: -24                
Correct output: -84                 | Program output: -28                
Correct output: -63                 | Program output: 60                 
Correct output: -36                 | Program output: -25                
Correct output: -84                 | Program output: -73                
Correct output: -13                 | Program output: -12                
Correct output: -41                 | Program output: -41                
Correct output: -77                 | Program output: 29                 
Correct output: -80                 | Program output: -80                
Correct output: 44                  | Program output: 50                 
Correct output: -68                 | Program output: 56                 
Correct output: -97                 | Program output: 3                  
Correct output: -95                 | Program output: -95                
Correct output: 10                  | Program output: 10                 
Correct output: -76                 | Program output: -76                
Correct output: -49                 | Program output: -49                
Correct output: 23                  | Program output: 23                 
Correct output: -96                 | Program output: 10                 
Correct output: -11                 | Program output: 39                 
Correct output: -96                 | Program output: -96                
Correct output: -94                 | Program output: -94                
Correct output: -28                 | Program output: -28                
Correct output: -48                 | Program output: -48                
Correct output: -85                 | Program output: -85                
Correct output: -27                 | Program output: -23                
Correct output: -21                 | Program output: -21                
Correct output: -86                 | Program output: -58                
Correct output: 50                  | Program output: 89                 
Correct output: -76                 | Program output: -34                
Correct output: 11                  | Program output: 15                 
Correct output: -30                 | Program output: -30                
Correct output: -74                 | Program output: -63                
Correct output: -47                 | Program output: -47                
Correct output: -8                  | Program output: -8                 
Correct output: -74                 | Program output: 13                 
Correct output: -6                  | Program output: -6                 
Correct output: -80                 | Program output: -80                
Correct output: -49                 | Program output: -13                
Correct output: -28                 | Program output: -28                
Correct output: 33                  | Program output: 33                 
Correct output: 9                   | Program output: 9                  
Correct output: 48                  | Program output: 66                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_shove} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 1, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_swap} {:close 2, :instruction integer_lt} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction in2} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction exec_pop} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_eq} {:close 1, :instruction print_newline} {:close 0, :instruction tagged_58} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction in2} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_stackdepth} {:close 2, :instruction integer_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_empty} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_do*times} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_shove} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 1, :instruction tagged_111} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_yank})
Lexicase best program: (integer_shove boolean_yankdup exec_y_when_autoconstructing () integer_inc print_integer integer_rot boolean_xor integer_dup boolean_swap integer_lt boolean_dup_times in2 boolean_yankdup exec_pop () in4 in1 exec_do*times (in3 boolean_yankdup exec_eq print_newline) tagged_58 integer_shove print_integer integer_mult exec_if (boolean_invert_first_then_and in2) (integer_empty boolean_invert_second_then_and) boolean_stackdepth integer_yankdup integer_yank integer_empty in3 exec_shove (exec_swap (exec_dup () boolean_xor exec_do*times () integer_rot) (boolean_dup_items integer_swap integer_sub exec_stackdepth integer_lt boolean_and integer_gte boolean_rot) exec_stackdepth integer_mod) exec_dup_items boolean_swap exec_shove (in1) boolean_flush tagged_111 exec_swap (integer_empty integer_yank) (integer_empty boolean_invert_second_then_and integer_yank exec_stackdepth boolean_eq boolean_dup_times integer_eq boolean_pop integer_yank))
Lexicase best errors: [1 0 0 0 1 0 0 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 83
Percent parens: 0.169
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_shove} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 1, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_swap} {:close 2, :instruction integer_lt} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction in2} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction exec_pop} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_eq} {:close 1, :instruction print_newline} {:close 0, :instruction tagged_58} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction in2} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_stackdepth} {:close 2, :instruction integer_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_empty} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_do*times} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_shove} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 1, :instruction tagged_111} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_yank})
Zero cases best program: (integer_shove boolean_yankdup exec_y_when_autoconstructing () integer_inc print_integer integer_rot boolean_xor integer_dup boolean_swap integer_lt boolean_dup_times in2 boolean_yankdup exec_pop () in4 in1 exec_do*times (in3 boolean_yankdup exec_eq print_newline) tagged_58 integer_shove print_integer integer_mult exec_if (boolean_invert_first_then_and in2) (integer_empty boolean_invert_second_then_and) boolean_stackdepth integer_yankdup integer_yank integer_empty in3 exec_shove (exec_swap (exec_dup () boolean_xor exec_do*times () integer_rot) (boolean_dup_items integer_swap integer_sub exec_stackdepth integer_lt boolean_and integer_gte boolean_rot) exec_stackdepth integer_mod) exec_dup_items boolean_swap exec_shove (in1) boolean_flush tagged_111 exec_swap (integer_empty integer_yank) (integer_empty boolean_invert_second_then_and integer_yank exec_stackdepth boolean_eq boolean_dup_times integer_eq boolean_pop integer_yank))
Zero cases best errors: [1 0 0 0 1 0 0 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 83
Percent parens: 0.169
--- Lexicase Population Statistics ---
Count of elite individuals by case: (79 158 446 82 309 33 159 257 161 446)
Population mean number of elite cases: 2.13
Count of perfect (error zero) individuals by case: (79 158 446 82 309 33 159 257 161 446)
Population mean number of perfect (error zero) cases: 2.13
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*count} {:close 1, :instruction in2} {:close 0, :instruction boolean_xor} {:close 1, :instruction in1} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_while} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_noop} {:close 1, :instruction print_newline} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_min} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_div} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction in2} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_swap} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_fromboolean} {:close 2, :instruction boolean_dup} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_s} {:close 0, :instruction tag_exec_855} {:close 1, :instruction boolean_rot} {:close 1, :instruction exec_empty} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_empty} {:close 2, :instruction integer_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tag_exec_740} {:close 0, :instruction exec_pop})
Best program: (boolean_yankdup exec_do*count (in2) boolean_xor in1 boolean_swap exec_while (exec_k () (exec_do*count (exec_y (boolean_dup_times) exec_noop) print_newline) integer_dup_items) integer_min integer_shove print_integer integer_gte integer_div integer_dup_times exec_s_when_autoconstructing (integer_stackdepth in2) (exec_empty integer_empty exec_swap () (boolean_stackdepth) exec_do*range (integer_div boolean_dup_times) exec_do*count (integer_empty integer_swap exec_swap (boolean_dup_items integer_swap integer_rot boolean_and exec_stackdepth integer_dup boolean_yankdup integer_fromboolean) (boolean_dup)) exec_s (boolean_frominteger) (boolean_pop exec_s (tag_exec_855 (boolean_rot) exec_empty) (integer_mod) (integer_dup integer_gte boolean_invert_second_then_and exec_dup_items) exec_k_when_autoconstructing (integer_gt boolean_flush integer_empty integer_yankdup) () integer_yank exec_stackdepth integer_eq boolean_yankdup exec_dup_items tag_exec_740 (exec_pop ())) ()) ())
Errors: [1 0 0 0 0 1 0 1 0 0]
Total: 3
Mean: 0.3
Genome size: 67
Size: 94
Percent parens: 0.287
--- Population Statistics ---
Average total errors in population: 7.87
Median total errors in population: 8
Error averages by case: (0.921 0.842 0.554 0.918 0.691 0.967 0.841 0.743 0.839 0.554)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 67.877
Average program size in population (points): 90.396
Average percent parens in population: 0.246
Minimum age in population: 7.0
Maximum age in population: 7.0
Average age in population: 7.0
Median age in population: 7.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.008
Error (vector) diversity:			 0.038
Behavioral diversity:				 0.342
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 6322427
--- Timings ---
Current time: 1559594079896 milliseconds
Total Time:          22.1 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:         9.4 seconds, 42.6%
Fitness Testing:      8.4 seconds, 37.9%
Report:               4.2 seconds, 19.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 412
Test mean error for best: 0.41200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 49                  | Program output: 49                 
Correct output: -54                 | Program output: -54                
Correct output: -14                 | Program output: 13                 
Correct output: 59                  | Program output: 96                 
Correct output: -81                 | Program output: -81                
Correct output: -26                 | Program output: -26                
Correct output: -72                 | Program output: -72                
Correct output: -11                 | Program output: 29                 
Correct output: 9                   | Program output: 9                  
Correct output: -91                 | Program output: -91                
Correct output: -97                 | Program output: -97                
Correct output: 17                  | Program output: 17                 
Correct output: -62                 | Program output: -62                
Correct output: -95                 | Program output: -95                
Correct output: 0                   | Program output: 0                  
Correct output: 13                  | Program output: 23                 
Correct output: 77                  | Program output: 83                 
Correct output: 17                  | Program output: 17                 
Correct output: 18                  | Program output: 18                 
Correct output: 9                   | Program output: 9                  
Correct output: 14                  | Program output: 38                 
Correct output: 2                   | Program output: 11                 
Correct output: 4                   | Program output: 34                 
Correct output: 8                   | Program output: 65                 
Correct output: 72                  | Program output: 75                 
Correct output: 14                  | Program output: 14                 
Correct output: 9                   | Program output: 11                 
Correct output: 82                  | Program output: 82                 
Correct output: 22                  | Program output: 22                 
Correct output: 15                  | Program output: 20                 
Correct output: 14                  | Program output: 14                 
Correct output: 45                  | Program output: 45                 
Correct output: 46                  | Program output: 46                 
Correct output: 1                   | Program output: 19                 
Correct output: 20                  | Program output: 67                 
Correct output: -68                 | Program output: -68                
Correct output: -87                 | Program output: -53                
Correct output: -71                 | Program output: -71                
Correct output: -87                 | Program output: -47                
Correct output: -92                 | Program output: -73                
Correct output: -68                 | Program output: 54                 
Correct output: -13                 | Program output: -13                
Correct output: -50                 | Program output: -50                
Correct output: -91                 | Program output: 8                  
Correct output: -88                 | Program output: -88                
Correct output: -72                 | Program output: 5                  
Correct output: -91                 | Program output: -91                
Correct output: -45                 | Program output: -45                
Correct output: -51                 | Program output: -51                
Correct output: -28                 | Program output: -28                
Correct output: -57                 | Program output: -57                
Correct output: -46                 | Program output: -40                
Correct output: -73                 | Program output: -73                
Correct output: -91                 | Program output: -24                
Correct output: -84                 | Program output: -28                
Correct output: -63                 | Program output: 60                 
Correct output: -36                 | Program output: -25                
Correct output: -84                 | Program output: -73                
Correct output: -13                 | Program output: -12                
Correct output: -41                 | Program output: -41                
Correct output: -77                 | Program output: 29                 
Correct output: -80                 | Program output: -80                
Correct output: 44                  | Program output: 50                 
Correct output: -68                 | Program output: 56                 
Correct output: -97                 | Program output: 3                  
Correct output: -95                 | Program output: -95                
Correct output: 10                  | Program output: 10                 
Correct output: -76                 | Program output: -76                
Correct output: -49                 | Program output: -49                
Correct output: 23                  | Program output: 23                 
Correct output: -96                 | Program output: 10                 
Correct output: -11                 | Program output: 39                 
Correct output: -96                 | Program output: -96                
Correct output: -94                 | Program output: -94                
Correct output: -28                 | Program output: -28                
Correct output: -48                 | Program output: -48                
Correct output: -85                 | Program output: -85                
Correct output: -27                 | Program output: -23                
Correct output: -21                 | Program output: -21                
Correct output: -86                 | Program output: -58                
Correct output: 50                  | Program output: 89                 
Correct output: -76                 | Program output: -34                
Correct output: 11                  | Program output: 15                 
Correct output: -30                 | Program output: -30                
Correct output: -74                 | Program output: -63                
Correct output: -47                 | Program output: -47                
Correct output: -8                  | Program output: -8                 
Correct output: -74                 | Program output: 13                 
Correct output: -6                  | Program output: -6                 
Correct output: -80                 | Program output: -80                
Correct output: -49                 | Program output: -13                
Correct output: -28                 | Program output: -28                
Correct output: 33                  | Program output: 33                 
Correct output: 9                   | Program output: 9                  
Correct output: 48                  | Program output: 66                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*count} {:close 1, :instruction in2} {:close 0, :instruction boolean_xor} {:close 1, :instruction in1} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_while} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_noop} {:close 1, :instruction print_newline} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction tagged_58} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 2, :instruction integer_lt} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_s} {:close 1, :instruction exec_k} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_flush} {:close 1, :instruction tagged_295} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_add} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_pop})
Lexicase best program: (integer_shove integer_gte exec_do*count (in2) boolean_xor in1 boolean_swap exec_while (exec_k () (exec_do*count (exec_y (boolean_dup_times) exec_noop) print_newline) integer_dup_items) integer_min tagged_58 integer_shove print_integer exec_if (in1 integer_lt) () exec_k_when_autoconstructing (exec_do*count () exec_s_when_autoconstructing (exec_s_when_autoconstructing (boolean_invert_first_then_and) (boolean_stackdepth) (exec_do*count (exec_dup_times (boolean_dup_times integer_swap exec_swap (integer_swap boolean_and exec_stackdepth boolean_shove integer_dup_times boolean_and boolean_yankdup exec_s (boolean_pop integer_eq exec_s (exec_k () (boolean_rot) integer_dup boolean_invert_second_then_and integer_gt exec_dup_items) (integer_gt integer_gt boolean_flush boolean_flush tagged_295) (integer_gte integer_empty integer_mod integer_yank exec_stackdepth integer_add) exec_dup_items exec_dup_items exec_pop ()) () ()) ())))) () ()) ())
Lexicase best errors: [1 1 0 1 0 1 1 0 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 95
Percent parens: 0.326
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*count} {:close 1, :instruction in2} {:close 0, :instruction boolean_xor} {:close 1, :instruction in1} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_while} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_noop} {:close 1, :instruction print_newline} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction tagged_58} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 2, :instruction integer_lt} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_s} {:close 1, :instruction exec_k} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_flush} {:close 1, :instruction tagged_295} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_add} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_pop})
Zero cases best program: (integer_shove integer_gte exec_do*count (in2) boolean_xor in1 boolean_swap exec_while (exec_k () (exec_do*count (exec_y (boolean_dup_times) exec_noop) print_newline) integer_dup_items) integer_min tagged_58 integer_shove print_integer exec_if (in1 integer_lt) () exec_k_when_autoconstructing (exec_do*count () exec_s_when_autoconstructing (exec_s_when_autoconstructing (boolean_invert_first_then_and) (boolean_stackdepth) (exec_do*count (exec_dup_times (boolean_dup_times integer_swap exec_swap (integer_swap boolean_and exec_stackdepth boolean_shove integer_dup_times boolean_and boolean_yankdup exec_s (boolean_pop integer_eq exec_s (exec_k () (boolean_rot) integer_dup boolean_invert_second_then_and integer_gt exec_dup_items) (integer_gt integer_gt boolean_flush boolean_flush tagged_295) (integer_gte integer_empty integer_mod integer_yank exec_stackdepth integer_add) exec_dup_items exec_dup_items exec_pop ()) () ()) ())))) () ()) ())
Zero cases best errors: [1 1 0 1 0 1 1 0 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 95
Percent parens: 0.326
--- Lexicase Population Statistics ---
Count of elite individuals by case: (130 177 85 106 143 106 115 142 91 146)
Population mean number of elite cases: 1.24
Count of perfect (error zero) individuals by case: (130 177 85 106 143 106 115 142 91 146)
Population mean number of perfect (error zero) cases: 1.24
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction tagged_959} {:close 1, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction exec_s} {:close 0, :instruction exec_while} {:close 1, :instruction exec_k} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_pop} {:close 1, :instruction exec_noop} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_min} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction -72} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_s} {:close 0, :instruction tag_exec_855} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction in1} {:close 1, :instruction exec_k} {:close 0, :instruction in4} {:close 1, :instruction boolean_rot} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_shove} {:close 0, :instruction in1} {:close 1, :instruction tagged_295} {:close 0, :instruction integer_empty} {:close 2, :instruction integer_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_pop})
Best program: (integer_shove integer_gte tagged_959 in2 in1 exec_s (exec_while (exec_k () (print_integer boolean_dup) exec_do*count (exec_y (boolean_dup_times) exec_pop () exec_noop) integer_dup_items) integer_min integer_shove) (integer_mult exec_empty print_integer exec_if (exec_s_when_autoconstructing (integer_empty integer_yankdup boolean_stackdepth) (exec_swap (boolean_flush exec_do*count (exec_pop (boolean_and boolean_swap -72 exec_swap (integer_swap exec_dup_items integer_rot boolean_and exec_stackdepth exec_stackdepth) (exec_s (boolean_shove exec_s (tag_exec_855 (boolean_xor exec_if (integer_yank in1 exec_k () (in4 boolean_rot) exec_empty) (boolean_stackdepth integer_mod) integer_pop boolean_invert_second_then_and boolean_pop exec_shove (in1 tagged_295) integer_empty integer_yankdup)) (integer_yank print_integer exec_s_when_autoconstructing (exec_pop ()) () ()) ()) () ())))) ()) ()) ()) ())
Errors: [1 1 0 1 0 1 1 0 0 0]
Total: 5
Mean: 0.5
Genome size: 66
Size: 103
Percent parens: 0.359
--- Population Statistics ---
Average total errors in population: 8.759
Median total errors in population: 9
Error averages by case: (0.87 0.823 0.915 0.894 0.857 0.894 0.885 0.858 0.909 0.854)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 67.74
Average program size in population (points): 88.044
Average percent parens in population: 0.228
Minimum age in population: 8.0
Maximum age in population: 8.0
Average age in population: 8.0
Median age in population: 8.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.006
Error (vector) diversity:			 0.033
Behavioral diversity:				 0.364
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 7363146
--- Timings ---
Current time: 1559594082403 milliseconds
Total Time:          25.5 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        10.7 seconds, 41.9%
Fitness Testing:      9.4 seconds, 36.8%
Report:               5.3 seconds, 20.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 352
Test mean error for best: 0.35200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 49                  | Program output: 49                 
Correct output: -54                 | Program output: -44                
Correct output: -14                 | Program output: -14                
Correct output: 59                  | Program output: 59                 
Correct output: -81                 | Program output: -81                
Correct output: -26                 | Program output: -26                
Correct output: -72                 | Program output: -72                
Correct output: -11                 | Program output: -11                
Correct output: 9                   | Program output: 9                  
Correct output: -91                 | Program output: -91                
Correct output: -97                 | Program output: -97                
Correct output: 17                  | Program output: 17                 
Correct output: -62                 | Program output: -62                
Correct output: -95                 | Program output: -95                
Correct output: 0                   | Program output: 0                  
Correct output: 13                  | Program output: 13                 
Correct output: 77                  | Program output: 97                 
Correct output: 17                  | Program output: 67                 
Correct output: 18                  | Program output: 24                 
Correct output: 9                   | Program output: 9                  
Correct output: 14                  | Program output: 38                 
Correct output: 2                   | Program output: 3                  
Correct output: 4                   | Program output: 4                  
Correct output: 8                   | Program output: 8                  
Correct output: 72                  | Program output: 75                 
Correct output: 14                  | Program output: 56                 
Correct output: 9                   | Program output: 11                 
Correct output: 82                  | Program output: 82                 
Correct output: 22                  | Program output: 34                 
Correct output: 15                  | Program output: 38                 
Correct output: 14                  | Program output: 14                 
Correct output: 45                  | Program output: 45                 
Correct output: 46                  | Program output: 63                 
Correct output: 1                   | Program output: 1                  
Correct output: 20                  | Program output: 20                 
Correct output: -68                 | Program output: 32                 
Correct output: -87                 | Program output: 38                 
Correct output: -71                 | Program output: -11                
Correct output: -87                 | Program output: -9                 
Correct output: -92                 | Program output: -92                
Correct output: -68                 | Program output: -68                
Correct output: -13                 | Program output: -13                
Correct output: -50                 | Program output: -50                
Correct output: -91                 | Program output: -91                
Correct output: -88                 | Program output: -88                
Correct output: -72                 | Program output: -72                
Correct output: -91                 | Program output: -91                
Correct output: -45                 | Program output: -45                
Correct output: -51                 | Program output: -50                
Correct output: -28                 | Program output: -28                
Correct output: -57                 | Program output: -57                
Correct output: -46                 | Program output: -46                
Correct output: -73                 | Program output: -12                
Correct output: -91                 | Program output: -2                 
Correct output: -84                 | Program output: -46                
Correct output: -63                 | Program output: -63                
Correct output: -36                 | Program output: -36                
Correct output: -84                 | Program output: -67                
Correct output: -13                 | Program output: 4                  
Correct output: -41                 | Program output: -41                
Correct output: -77                 | Program output: -77                
Correct output: -80                 | Program output: -80                
Correct output: 44                  | Program output: 57                 
Correct output: -68                 | Program output: -3                 
Correct output: -97                 | Program output: -53                
Correct output: -95                 | Program output: -95                
Correct output: 10                  | Program output: 10                 
Correct output: -76                 | Program output: -62                
Correct output: -49                 | Program output: -33                
Correct output: 23                  | Program output: 47                 
Correct output: -96                 | Program output: -96                
Correct output: -11                 | Program output: -11                
Correct output: -96                 | Program output: -46                
Correct output: -94                 | Program output: -33                
Correct output: -28                 | Program output: -17                
Correct output: -48                 | Program output: -48                
Correct output: -85                 | Program output: -76                
Correct output: -27                 | Program output: -7                 
Correct output: -21                 | Program output: -21                
Correct output: -86                 | Program output: -86                
Correct output: 50                  | Program output: 89                 
Correct output: -76                 | Program output: -76                
Correct output: 11                  | Program output: 15                 
Correct output: -30                 | Program output: -30                
Correct output: -74                 | Program output: -74                
Correct output: -47                 | Program output: -47                
Correct output: -8                  | Program output: -8                 
Correct output: -74                 | Program output: -74                
Correct output: -6                  | Program output: -6                 
Correct output: -80                 | Program output: -28                
Correct output: -49                 | Program output: -13                
Correct output: -28                 | Program output: -28                
Correct output: 33                  | Program output: 71                 
Correct output: 9                   | Program output: 52                 
Correct output: 48                  | Program output: 48                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_shove} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_dup} {:close 2, :instruction integer_lt} {:close 0, :instruction integer_add} {:close 0, :instruction in3} {:close 0, :instruction integer_lte} {:close 1, :instruction in4} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_pop} {:close 0, :instruction in4} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction in2} {:close 1, :instruction print_boolean} {:close 0, :instruction tagged_134} {:close 0, :instruction exec_do*times} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_eq} {:close 1, :instruction print_newline} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 2, :instruction integer_yankdup} {:close 0, :instruction -94} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_dup_items} {:close 1, :instruction tagged_567} {:close 0, :instruction exec_shove} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_empty} {:close 2, :instruction integer_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_yank})
Lexicase best program: (integer_shove exec_y_when_autoconstructing () integer_inc integer_rot boolean_xor boolean_swap exec_dup () integer_lt integer_add in3 integer_lte in4 boolean_dup_times exec_pop () in4 exec_noop in1 integer_min in2 print_boolean tagged_134 exec_do*times (in3 integer_dup_times exec_eq print_newline) integer_shove print_integer integer_mult exec_if (boolean_invert_first_then_and exec_shove (integer_empty boolean_invert_second_then_and) integer_yankdup) () -94 integer_yank integer_add in4 in3 exec_swap (boolean_dup_items integer_div exec_eq integer_sub exec_stackdepth exec_s (exec_dup_times (integer_mod) exec_dup_items) (tagged_567) (exec_shove (in1) boolean_flush exec_noop integer_empty boolean_dup_times integer_empty integer_yankdup)) (integer_yank boolean_eq exec_dup_items integer_eq boolean_pop integer_yank))
Lexicase best errors: [0 0 1 1 0 0 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 80
Percent parens: 0.188
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_shove} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_dup} {:close 2, :instruction integer_lt} {:close 0, :instruction integer_add} {:close 0, :instruction in3} {:close 0, :instruction integer_lte} {:close 1, :instruction in4} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_pop} {:close 0, :instruction in4} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction in2} {:close 1, :instruction print_boolean} {:close 0, :instruction tagged_134} {:close 0, :instruction exec_do*times} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_eq} {:close 1, :instruction print_newline} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 2, :instruction integer_yankdup} {:close 0, :instruction -94} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_dup_items} {:close 1, :instruction tagged_567} {:close 0, :instruction exec_shove} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_empty} {:close 2, :instruction integer_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_yank})
Zero cases best program: (integer_shove exec_y_when_autoconstructing () integer_inc integer_rot boolean_xor boolean_swap exec_dup () integer_lt integer_add in3 integer_lte in4 boolean_dup_times exec_pop () in4 exec_noop in1 integer_min in2 print_boolean tagged_134 exec_do*times (in3 integer_dup_times exec_eq print_newline) integer_shove print_integer integer_mult exec_if (boolean_invert_first_then_and exec_shove (integer_empty boolean_invert_second_then_and) integer_yankdup) () -94 integer_yank integer_add in4 in3 exec_swap (boolean_dup_items integer_div exec_eq integer_sub exec_stackdepth exec_s (exec_dup_times (integer_mod) exec_dup_items) (tagged_567) (exec_shove (in1) boolean_flush exec_noop integer_empty boolean_dup_times integer_empty integer_yankdup)) (integer_yank boolean_eq exec_dup_items integer_eq boolean_pop integer_yank))
Zero cases best errors: [0 0 1 1 0 0 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 80
Percent parens: 0.188
--- Lexicase Population Statistics ---
Count of elite individuals by case: (236 252 186 79 293 245 444 210 191 125)
Population mean number of elite cases: 2.26
Count of perfect (error zero) individuals by case: (236 252 186 79 293 245 444 210 191 125)
Population mean number of perfect (error zero) cases: 2.26
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_shove} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_dup} {:close 2, :instruction integer_lt} {:close 0, :instruction integer_add} {:close 0, :instruction in3} {:close 0, :instruction integer_lte} {:close 1, :instruction in4} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_pop} {:close 0, :instruction in4} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction in2} {:close 1, :instruction print_boolean} {:close 0, :instruction tagged_134} {:close 0, :instruction exec_do*times} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_eq} {:close 1, :instruction print_newline} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 2, :instruction integer_yankdup} {:close 0, :instruction -94} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_dup_items} {:close 1, :instruction tagged_567} {:close 0, :instruction exec_shove} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_empty} {:close 2, :instruction integer_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_yank})
Best program: (integer_shove exec_y_when_autoconstructing () integer_inc integer_rot boolean_xor boolean_swap exec_dup () integer_lt integer_add in3 integer_lte in4 boolean_dup_times exec_pop () in4 exec_noop in1 integer_min in2 print_boolean tagged_134 exec_do*times (in3 integer_dup_times exec_eq print_newline) integer_shove print_integer integer_mult exec_if (boolean_invert_first_then_and exec_shove (integer_empty boolean_invert_second_then_and) integer_yankdup) () -94 integer_yank integer_add in4 in3 exec_swap (boolean_dup_items integer_div exec_eq integer_sub exec_stackdepth exec_s (exec_dup_times (integer_mod) exec_dup_items) (tagged_567) (exec_shove (in1) boolean_flush exec_noop integer_empty boolean_dup_times integer_empty integer_yankdup)) (integer_yank boolean_eq exec_dup_items integer_eq boolean_pop integer_yank))
Errors: [0 0 1 1 0 0 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 65
Size: 80
Percent parens: 0.188
--- Population Statistics ---
Average total errors in population: 7.739
Median total errors in population: 8
Error averages by case: (0.764 0.748 0.814 0.921 0.707 0.755 0.556 0.79 0.809 0.875)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 66.989
Average program size in population (points): 85.732
Average percent parens in population: 0.216
Minimum age in population: 9.0
Maximum age in population: 9.0
Average age in population: 9.0
Median age in population: 9.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.009
Error (vector) diversity:			 0.055
Behavioral diversity:				 0.385
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 8255503
--- Timings ---
Current time: 1559594085153 milliseconds
Total Time:          27.9 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        11.9 seconds, 42.8%
Fitness Testing:     10.2 seconds, 36.7%
Report:               5.6 seconds, 20.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 352
Test mean error for best: 0.35200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 49                  | Program output: 49                 
Correct output: -54                 | Program output: -44                
Correct output: -14                 | Program output: -14                
Correct output: 59                  | Program output: 59                 
Correct output: -81                 | Program output: -81                
Correct output: -26                 | Program output: -26                
Correct output: -72                 | Program output: -72                
Correct output: -11                 | Program output: -11                
Correct output: 9                   | Program output: 9                  
Correct output: -91                 | Program output: -91                
Correct output: -97                 | Program output: -97                
Correct output: 17                  | Program output: 17                 
Correct output: -62                 | Program output: -62                
Correct output: -95                 | Program output: -95                
Correct output: 0                   | Program output: 0                  
Correct output: 13                  | Program output: 13                 
Correct output: 77                  | Program output: 97                 
Correct output: 17                  | Program output: 67                 
Correct output: 18                  | Program output: 24                 
Correct output: 9                   | Program output: 9                  
Correct output: 14                  | Program output: 38                 
Correct output: 2                   | Program output: 3                  
Correct output: 4                   | Program output: 4                  
Correct output: 8                   | Program output: 8                  
Correct output: 72                  | Program output: 75                 
Correct output: 14                  | Program output: 56                 
Correct output: 9                   | Program output: 11                 
Correct output: 82                  | Program output: 82                 
Correct output: 22                  | Program output: 34                 
Correct output: 15                  | Program output: 38                 
Correct output: 14                  | Program output: 14                 
Correct output: 45                  | Program output: 45                 
Correct output: 46                  | Program output: 63                 
Correct output: 1                   | Program output: 1                  
Correct output: 20                  | Program output: 20                 
Correct output: -68                 | Program output: 32                 
Correct output: -87                 | Program output: 38                 
Correct output: -71                 | Program output: -11                
Correct output: -87                 | Program output: -9                 
Correct output: -92                 | Program output: -92                
Correct output: -68                 | Program output: -68                
Correct output: -13                 | Program output: -13                
Correct output: -50                 | Program output: -50                
Correct output: -91                 | Program output: -91                
Correct output: -88                 | Program output: -88                
Correct output: -72                 | Program output: -72                
Correct output: -91                 | Program output: -91                
Correct output: -45                 | Program output: -45                
Correct output: -51                 | Program output: -50                
Correct output: -28                 | Program output: -28                
Correct output: -57                 | Program output: -57                
Correct output: -46                 | Program output: -46                
Correct output: -73                 | Program output: -12                
Correct output: -91                 | Program output: -2                 
Correct output: -84                 | Program output: -46                
Correct output: -63                 | Program output: -63                
Correct output: -36                 | Program output: -36                
Correct output: -84                 | Program output: -67                
Correct output: -13                 | Program output: 4                  
Correct output: -41                 | Program output: -41                
Correct output: -77                 | Program output: -77                
Correct output: -80                 | Program output: -80                
Correct output: 44                  | Program output: 57                 
Correct output: -68                 | Program output: -3                 
Correct output: -97                 | Program output: -53                
Correct output: -95                 | Program output: -95                
Correct output: 10                  | Program output: 10                 
Correct output: -76                 | Program output: -62                
Correct output: -49                 | Program output: -33                
Correct output: 23                  | Program output: 47                 
Correct output: -96                 | Program output: -96                
Correct output: -11                 | Program output: -11                
Correct output: -96                 | Program output: -46                
Correct output: -94                 | Program output: -33                
Correct output: -28                 | Program output: -17                
Correct output: -48                 | Program output: -48                
Correct output: -85                 | Program output: -76                
Correct output: -27                 | Program output: -7                 
Correct output: -21                 | Program output: -21                
Correct output: -86                 | Program output: -86                
Correct output: 50                  | Program output: 89                 
Correct output: -76                 | Program output: -76                
Correct output: 11                  | Program output: 15                 
Correct output: -30                 | Program output: -30                
Correct output: -74                 | Program output: -74                
Correct output: -47                 | Program output: -47                
Correct output: -8                  | Program output: -8                 
Correct output: -74                 | Program output: -74                
Correct output: -6                  | Program output: -6                 
Correct output: -80                 | Program output: -28                
Correct output: -49                 | Program output: -13                
Correct output: -28                 | Program output: -28                
Correct output: 33                  | Program output: 71                 
Correct output: 9                   | Program output: 52                 
Correct output: 48                  | Program output: 48                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_shove} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_dup} {:close 2, :instruction integer_lt} {:close 0, :instruction integer_add} {:close 0, :instruction in3} {:close 0, :instruction integer_lte} {:close 1, :instruction in4} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_pop} {:close 0, :instruction in4} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction tagged_684} {:close 1, :instruction print_boolean} {:close 0, :instruction tagged_134} {:close 0, :instruction exec_do*times} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_eq} {:close 1, :instruction print_newline} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 2, :instruction integer_yankdup} {:close 0, :instruction -94} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_dup_items} {:close 1, :instruction tagged_567} {:close 0, :instruction exec_shove} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_empty} {:close 2, :instruction integer_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_yank})
Lexicase best program: (integer_shove exec_y_when_autoconstructing () integer_inc boolean_xor boolean_swap exec_dup () integer_lt integer_add in3 integer_lte in4 boolean_dup_times exec_pop () in4 exec_noop in1 integer_min in2 tagged_684 print_boolean tagged_134 exec_do*times (in3 integer_dup_times exec_eq print_newline) integer_shove print_integer integer_mult exec_if (boolean_invert_first_then_and exec_shove (integer_empty boolean_invert_second_then_and) integer_yankdup) () -94 integer_yank integer_add in4 in3 exec_swap (boolean_dup_items integer_div exec_eq integer_sub exec_stackdepth exec_s (integer_mod) (exec_dup_items) (tagged_567) exec_shove (in1) boolean_flush exec_noop integer_empty boolean_yankdup boolean_dup_times integer_empty integer_yankdup) () integer_yank boolean_eq integer_eq integer_yank)
Lexicase best errors: [0 0 0 0 0 0 1 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 77
Percent parens: 0.182
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_shove} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_dup} {:close 2, :instruction integer_lt} {:close 0, :instruction integer_add} {:close 0, :instruction in3} {:close 0, :instruction integer_lte} {:close 1, :instruction in4} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_pop} {:close 0, :instruction in4} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction tagged_684} {:close 1, :instruction print_boolean} {:close 0, :instruction tagged_134} {:close 0, :instruction exec_do*times} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_eq} {:close 1, :instruction print_newline} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 2, :instruction integer_yankdup} {:close 0, :instruction -94} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_dup_items} {:close 1, :instruction tagged_567} {:close 0, :instruction exec_shove} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_empty} {:close 2, :instruction integer_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_yank})
Zero cases best program: (integer_shove exec_y_when_autoconstructing () integer_inc boolean_xor boolean_swap exec_dup () integer_lt integer_add in3 integer_lte in4 boolean_dup_times exec_pop () in4 exec_noop in1 integer_min in2 tagged_684 print_boolean tagged_134 exec_do*times (in3 integer_dup_times exec_eq print_newline) integer_shove print_integer integer_mult exec_if (boolean_invert_first_then_and exec_shove (integer_empty boolean_invert_second_then_and) integer_yankdup) () -94 integer_yank integer_add in4 in3 exec_swap (boolean_dup_items integer_div exec_eq integer_sub exec_stackdepth exec_s (integer_mod) (exec_dup_items) (tagged_567) exec_shove (in1) boolean_flush exec_noop integer_empty boolean_yankdup boolean_dup_times integer_empty integer_yankdup) () integer_yank boolean_eq integer_eq integer_yank)
Zero cases best errors: [0 0 0 0 0 0 1 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 77
Percent parens: 0.182
--- Lexicase Population Statistics ---
Count of elite individuals by case: (495 261 211 207 236 254 110 286 230 224)
Population mean number of elite cases: 2.51
Count of perfect (error zero) individuals by case: (495 261 211 207 236 254 110 286 230 224)
Population mean number of perfect (error zero) cases: 2.51
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_shove} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_dup} {:close 2, :instruction integer_lt} {:close 0, :instruction integer_add} {:close 0, :instruction in3} {:close 0, :instruction integer_lte} {:close 1, :instruction in4} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_pop} {:close 0, :instruction in4} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction boolean_or} {:close 1, :instruction print_boolean} {:close 0, :instruction tagged_134} {:close 0, :instruction exec_do*times} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_eq} {:close 1, :instruction print_newline} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_pop} {:close 2, :instruction integer_yankdup} {:close 0, :instruction -94} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_dup_items} {:close 1, :instruction tagged_567} {:close 0, :instruction exec_shove} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_yank})
Best program: (integer_shove exec_y_when_autoconstructing () integer_inc integer_rot boolean_xor boolean_swap exec_dup () integer_lt integer_add in3 integer_lte in4 boolean_dup_times exec_pop () in4 exec_noop in1 integer_min in2 boolean_or print_boolean tagged_134 exec_do*times (in3 integer_dup_times exec_eq print_newline) integer_shove print_integer integer_mult exec_if (boolean_invert_first_then_and exec_shove (integer_dec integer_empty boolean_invert_second_then_and) boolean_pop integer_yankdup) () -94 integer_yank integer_add in4 exec_swap (boolean_dup_items integer_div exec_eq exec_stackdepth exec_s (exec_dup (exec_dup_times (integer_mod) exec_dup_items) tagged_567) (exec_shove (in1) boolean_flush exec_noop integer_empty integer_empty integer_yank boolean_eq exec_dup_items integer_eq boolean_pop integer_yank) ()) ())
Errors: [0 0 0 0 0 0 1 0 0 0]
Total: 1
Mean: 0.1
Genome size: 65
Size: 81
Percent parens: 0.198
--- Population Statistics ---
Average total errors in population: 7.486
Median total errors in population: 17/2
Error averages by case: (0.505 0.739 0.789 0.793 0.764 0.746 0.89 0.714 0.77 0.776)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 65.001
Average program size in population (points): 82.589
Average percent parens in population: 0.210
Minimum age in population: 10.0
Maximum age in population: 10.0
Average age in population: 10.0
Median age in population: 10.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.01
Error (vector) diversity:			 0.074
Behavioral diversity:				 0.452
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 9124087
--- Timings ---
Current time: 1559594087926 milliseconds
Total Time:          30.7 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        13.2 seconds, 42.9%
Fitness Testing:     11.2 seconds, 36.4%
Report:               6.2 seconds, 20.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 508
Test mean error for best: 0.50800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output:                    
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 49                  | Program output: 49                 
Correct output: -54                 | Program output: -44                
Correct output: -14                 | Program output:                    
Correct output: 59                  | Program output: 59                 
Correct output: -81                 | Program output: -81                
Correct output: -26                 | Program output:                    
Correct output: -72                 | Program output: -9                 
Correct output: -11                 | Program output:                    
Correct output: 9                   | Program output: 9                  
Correct output: -91                 | Program output: -91                
Correct output: -97                 | Program output: -97                
Correct output: 17                  | Program output: 17                 
Correct output: -62                 | Program output: -62                
Correct output: -95                 | Program output: -95                
Correct output: 0                   | Program output: 0                  
Correct output: 13                  | Program output: 13                 
Correct output: 77                  | Program output: 77                 
Correct output: 17                  | Program output: 47                 
Correct output: 18                  | Program output: 24                 
Correct output: 9                   | Program output: 50                 
Correct output: 14                  | Program output: 14                 
Correct output: 2                   | Program output: 2                  
Correct output: 4                   | Program output: 4                  
Correct output: 8                   | Program output: 8                  
Correct output: 72                  | Program output: 72                 
Correct output: 14                  | Program output: 70                 
Correct output: 9                   | Program output: 9                  
Correct output: 82                  | Program output: 82                 
Correct output: 22                  | Program output: 34                 
Correct output: 15                  | Program output: 15                 
Correct output: 14                  | Program output: 32                 
Correct output: 45                  | Program output: 56                 
Correct output: 46                  | Program output: 67                 
Correct output: 1                   | Program output: 1                  
Correct output: 20                  | Program output: 20                 
Correct output: -68                 | Program output: -50                
Correct output: -87                 | Program output: -87                
Correct output: -71                 | Program output: -11                
Correct output: -87                 | Program output: -87                
Correct output: -92                 | Program output:                    
Correct output: -68                 | Program output:                    
Correct output: -13                 | Program output: 20                 
Correct output: -50                 | Program output: 14                 
Correct output: -91                 | Program output: -91                
Correct output: -88                 | Program output: -59                
Correct output: -72                 | Program output:                    
Correct output: -91                 | Program output: -68                
Correct output: -45                 | Program output: -45                
Correct output: -51                 | Program output:                    
Correct output: -28                 | Program output: 61                 
Correct output: -57                 | Program output: -35                
Correct output: -46                 | Program output: -46                
Correct output: -73                 | Program output: -4                 
Correct output: -91                 | Program output: -91                
Correct output: -84                 | Program output: -84                
Correct output: -63                 | Program output:                    
Correct output: -36                 | Program output:                    
Correct output: -84                 | Program output:                    
Correct output: -13                 | Program output: -13                
Correct output: -41                 | Program output: -41                
Correct output: -77                 | Program output: -77                
Correct output: -80                 | Program output: -39                
Correct output: 44                  | Program output: 44                 
Correct output: -68                 | Program output:                    
Correct output: -97                 | Program output:                    
Correct output: -95                 | Program output: -95                
Correct output: 10                  | Program output: 31                 
Correct output: -76                 | Program output: -63                
Correct output: -49                 | Program output: -33                
Correct output: 23                  | Program output: 81                 
Correct output: -96                 | Program output:                    
Correct output: -11                 | Program output: -11                
Correct output: -96                 | Program output:                    
Correct output: -94                 | Program output: -50                
Correct output: -28                 | Program output:                    
Correct output: -48                 | Program output: -33                
Correct output: -85                 | Program output: -76                
Correct output: -27                 | Program output: -7                 
Correct output: -21                 | Program output: 22                 
Correct output: -86                 | Program output: -86                
Correct output: 50                  | Program output: 50                 
Correct output: -76                 | Program output: -76                
Correct output: 11                  | Program output: 11                 
Correct output: -30                 | Program output: -30                
Correct output: -74                 | Program output: -74                
Correct output: -47                 | Program output: 15                 
Correct output: -8                  | Program output: -8                 
Correct output: -74                 | Program output:                    
Correct output: -6                  | Program output: 64                 
Correct output: -80                 | Program output:                    
Correct output: -49                 | Program output: -13                
Correct output: -28                 | Program output: -28                
Correct output: 33                  | Program output: 92                 
Correct output: 9                   | Program output: 35                 
Correct output: 48                  | Program output: 48                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_shove} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_if} {:close 1, :instruction exec_dup} {:close 2, :instruction integer_lt} {:close 0, :instruction integer_add} {:close 0, :instruction in3} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_lte} {:close 1, :instruction in4} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_pop} {:close 0, :instruction in4} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_do*times} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_eq} {:close 1, :instruction print_newline} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_if} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_while} {:close 2, :instruction integer_yankdup} {:close 0, :instruction -94} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_dup_items} {:close 1, :instruction tagged_567} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_empty} {:close 2, :instruction integer_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_yank})
Lexicase best program: (integer_shove exec_y_when_autoconstructing () integer_rot boolean_xor exec_if () (exec_dup () integer_lt) integer_add in3 integer_eq integer_lte in4 boolean_rot boolean_dup_times exec_pop () in4 exec_noop in1 integer_min print_boolean exec_do*times (in3 integer_dup_times exec_eq print_newline) integer_shove print_integer integer_mult exec_if (exec_do*times () boolean_invert_first_then_and print_integer exec_shove (integer_empty integer_gt print_boolean exec_while (integer_yankdup)) -94 integer_yank integer_add) (in4 in3 exec_flush boolean_dup_items integer_div exec_eq integer_sub exec_stackdepth exec_s (exec_dup_times (integer_mod) exec_dup_items) (tagged_567) (exec_shove (boolean_pop in1) boolean_flush boolean_rot boolean_dup_times integer_empty integer_yankdup)) integer_yank boolean_eq exec_dup_items integer_eq integer_yank)
Lexicase best errors: [0 0 0 0 0 1 0 1 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 84
Percent parens: 0.202
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_shove} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_if} {:close 1, :instruction exec_dup} {:close 2, :instruction integer_lt} {:close 0, :instruction integer_add} {:close 0, :instruction in3} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_lte} {:close 1, :instruction in4} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction exec_pop} {:close 0, :instruction in4} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_do*times} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_eq} {:close 1, :instruction print_newline} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_if} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_while} {:close 2, :instruction integer_yankdup} {:close 0, :instruction -94} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_dup_items} {:close 1, :instruction tagged_567} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_empty} {:close 2, :instruction integer_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_yank})
Zero cases best program: (integer_shove exec_y_when_autoconstructing () integer_rot boolean_xor exec_if () (exec_dup () integer_lt) integer_add in3 integer_eq integer_lte in4 boolean_rot boolean_dup_times exec_pop () in4 exec_noop in1 integer_min print_boolean exec_do*times (in3 integer_dup_times exec_eq print_newline) integer_shove print_integer integer_mult exec_if (exec_do*times () boolean_invert_first_then_and print_integer exec_shove (integer_empty integer_gt print_boolean exec_while (integer_yankdup)) -94 integer_yank integer_add) (in4 in3 exec_flush boolean_dup_items integer_div exec_eq integer_sub exec_stackdepth exec_s (exec_dup_times (integer_mod) exec_dup_items) (tagged_567) (exec_shove (boolean_pop in1) boolean_flush boolean_rot boolean_dup_times integer_empty integer_yankdup)) integer_yank boolean_eq exec_dup_items integer_eq integer_yank)
Zero cases best errors: [0 0 0 0 0 1 0 1 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 84
Percent parens: 0.202
--- Lexicase Population Statistics ---
Count of elite individuals by case: (433 363 321 103 99 60 358 60 196 326)
Population mean number of elite cases: 2.32
Count of perfect (error zero) individuals by case: (433 363 321 103 99 60 358 60 196 326)
Population mean number of perfect (error zero) cases: 2.32
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_shove} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_dup} {:close 2, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_pop} {:close 0, :instruction in4} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction in2} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_do*times} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_eq} {:close 1, :instruction print_newline} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_empty} {:close 2, :instruction integer_yankdup} {:close 0, :instruction -94} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_div} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction tag_exec_494} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_dup_items} {:close 1, :instruction tagged_567} {:close 1, :instruction boolean_eq} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_swap} {:close 2, :instruction integer_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_yank})
Best program: (integer_shove exec_y_when_autoconstructing () exec_k (boolean_xor boolean_swap exec_dup () integer_lt) () in3 integer_lte integer_min boolean_dup_times boolean_yankdup exec_pop () in4 exec_noop in1 boolean_dup_items integer_min in2 print_boolean exec_do*times (in3 integer_dup_times exec_eq print_newline) integer_shove print_integer integer_mult exec_if (boolean_invert_first_then_and exec_shove (integer_empty integer_yankdup)) (-94 in4 in3 exec_swap (boolean_dup_items integer_flush integer_div integer_sub exec_stackdepth exec_s (tag_exec_494 (exec_dup_times (integer_mod) exec_dup_items) tagged_567) (boolean_eq) (in1) boolean_flush exec_noop integer_empty boolean_dup_times integer_empty boolean_swap integer_yankdup) () integer_yank boolean_eq exec_dup_items boolean_pop integer_yank))
Errors: [1 0 0 0 1 0 0 0 1 0]
Total: 3
Mean: 0.3
Genome size: 62
Size: 79
Percent parens: 0.215
--- Population Statistics ---
Average total errors in population: 7.681
Median total errors in population: 9
Error averages by case: (0.567 0.637 0.679 0.897 0.901 0.94 0.642 0.94 0.804 0.674)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 64.716
Average program size in population (points): 82.461
Average percent parens in population: 0.214
Minimum age in population: 11.0
Maximum age in population: 11.0
Average age in population: 11.0
Median age in population: 11.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.008
Error (vector) diversity:			 0.064
Behavioral diversity:				 0.497
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 10130875
--- Timings ---
Current time: 1559594090666 milliseconds
Total Time:          33.5 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        14.4 seconds, 43.0%
Fitness Testing:     12.1 seconds, 36.2%
Report:               6.8 seconds, 20.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 355
Test mean error for best: 0.35500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 49                  | Program output: 49                 
Correct output: -54                 | Program output: -44                
Correct output: -14                 | Program output: -14                
Correct output: 59                  | Program output: 96                 
Correct output: -81                 | Program output: 47                 
Correct output: -26                 | Program output: -26                
Correct output: -72                 | Program output: -72                
Correct output: -11                 | Program output: -11                
Correct output: 9                   | Program output: 9                  
Correct output: -91                 | Program output: 69                 
Correct output: -97                 | Program output: -97                
Correct output: 17                  | Program output: 17                 
Correct output: -62                 | Program output: -62                
Correct output: -95                 | Program output: -95                
Correct output: 0                   | Program output: 0                  
Correct output: 13                  | Program output: 92                 
Correct output: 77                  | Program output: 77                 
Correct output: 17                  | Program output: 47                 
Correct output: 18                  | Program output: 89                 
Correct output: 9                   | Program output: 54                 
Correct output: 14                  | Program output: 14                 
Correct output: 2                   | Program output: 2                  
Correct output: 4                   | Program output: 36                 
Correct output: 8                   | Program output: 83                 
Correct output: 72                  | Program output: 72                 
Correct output: 14                  | Program output: 77                 
Correct output: 9                   | Program output: 9                  
Correct output: 82                  | Program output: 82                 
Correct output: 22                  | Program output: 38                 
Correct output: 15                  | Program output: 15                 
Correct output: 14                  | Program output: 100                
Correct output: 45                  | Program output: 100                
Correct output: 46                  | Program output: 67                 
Correct output: 1                   | Program output: 46                 
Correct output: 20                  | Program output: 75                 
Correct output: -68                 | Program output: -50                
Correct output: -87                 | Program output: -87                
Correct output: -71                 | Program output: -71                
Correct output: -87                 | Program output: -87                
Correct output: -92                 | Program output: -92                
Correct output: -68                 | Program output: -68                
Correct output: -13                 | Program output: -13                
Correct output: -50                 | Program output: -50                
Correct output: -91                 | Program output: -91                
Correct output: -88                 | Program output: -88                
Correct output: -72                 | Program output: -72                
Correct output: -91                 | Program output: -91                
Correct output: -45                 | Program output: -39                
Correct output: -51                 | Program output: -51                
Correct output: -28                 | Program output: -28                
Correct output: -57                 | Program output: -57                
Correct output: -46                 | Program output: -46                
Correct output: -73                 | Program output: -12                
Correct output: -91                 | Program output: -91                
Correct output: -84                 | Program output: -84                
Correct output: -63                 | Program output: -63                
Correct output: -36                 | Program output: -36                
Correct output: -84                 | Program output: -84                
Correct output: -13                 | Program output: -13                
Correct output: -41                 | Program output: -5                 
Correct output: -77                 | Program output: -77                
Correct output: -80                 | Program output: -80                
Correct output: 44                  | Program output: 44                 
Correct output: -68                 | Program output: -68                
Correct output: -97                 | Program output: -97                
Correct output: -95                 | Program output: 68                 
Correct output: 10                  | Program output: 31                 
Correct output: -76                 | Program output: -63                
Correct output: -49                 | Program output: -33                
Correct output: 23                  | Program output: 86                 
Correct output: -96                 | Program output: -96                
Correct output: -11                 | Program output: -11                
Correct output: -96                 | Program output: -96                
Correct output: -94                 | Program output: -50                
Correct output: -28                 | Program output: -28                
Correct output: -48                 | Program output: -48                
Correct output: -85                 | Program output: -85                
Correct output: -27                 | Program output: -27                
Correct output: -21                 | Program output: -21                
Correct output: -86                 | Program output: -86                
Correct output: 50                  | Program output: 50                 
Correct output: -76                 | Program output: -76                
Correct output: 11                  | Program output: 11                 
Correct output: -30                 | Program output: -18                
Correct output: -74                 | Program output: -74                
Correct output: -47                 | Program output: -47                
Correct output: -8                  | Program output: 61                 
Correct output: -74                 | Program output: -74                
Correct output: -6                  | Program output: -6                 
Correct output: -80                 | Program output: -80                
Correct output: -49                 | Program output: -49                
Correct output: -28                 | Program output: 61                 
Correct output: 33                  | Program output: 92                 
Correct output: 9                   | Program output: 35                 
Correct output: 48                  | Program output: 75                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_while} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 2, :instruction integer_lt} {:close 0, :instruction in4} {:close 0, :instruction boolean_not} {:close 0, :instruction in1} {:close 1, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 1, :instruction print_newline} {:close 0, :instruction tagged_58} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in2} {:close 2, :instruction integer_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_shove} {:close 1, :instruction in1} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*count} {:close 1, :instruction tagged_111} {:close 0, :instruction exec_swap} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_yank} {:close 2, :instruction integer_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 0, :instruction integer_eq})
Lexicase best program: (integer_shove boolean_yankdup integer_empty integer_inc boolean_not integer_rot exec_while (integer_shove) integer_dup integer_lt in4 boolean_not in1 in2 in3 exec_eq print_newline tagged_58 exec_s_when_autoconstructing (integer_yank) (integer_min print_integer integer_mult) (exec_if (exec_dup (exec_do*count () boolean_invert_first_then_and exec_when (exec_dup_items in2) integer_yankdup)) (integer_yank exec_swap (boolean_xor integer_mult integer_rot) (integer_inc boolean_dup_items integer_swap integer_dup_times boolean_empty integer_dup_items integer_empty boolean_dup_items boolean_and boolean_rot) exec_stackdepth integer_mod) exec_dup_items) exec_shove (in1) exec_flush exec_flush boolean_flush integer_rot exec_do*count (tagged_111) exec_swap (exec_y_when_autoconstructing ()) (integer_max integer_empty integer_yank) integer_yankdup exec_stackdepth boolean_eq exec_y (integer_eq))
Lexicase best errors: [0 0 0 0 1 1 0 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 85
Percent parens: 0.212
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_while} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 2, :instruction integer_lt} {:close 0, :instruction in4} {:close 0, :instruction boolean_not} {:close 0, :instruction in1} {:close 1, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 1, :instruction print_newline} {:close 0, :instruction tagged_58} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in2} {:close 2, :instruction integer_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_shove} {:close 1, :instruction in1} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*count} {:close 1, :instruction tagged_111} {:close 0, :instruction exec_swap} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_yank} {:close 2, :instruction integer_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 0, :instruction integer_eq})
Zero cases best program: (integer_shove boolean_yankdup integer_empty integer_inc boolean_not integer_rot exec_while (integer_shove) integer_dup integer_lt in4 boolean_not in1 in2 in3 exec_eq print_newline tagged_58 exec_s_when_autoconstructing (integer_yank) (integer_min print_integer integer_mult) (exec_if (exec_dup (exec_do*count () boolean_invert_first_then_and exec_when (exec_dup_items in2) integer_yankdup)) (integer_yank exec_swap (boolean_xor integer_mult integer_rot) (integer_inc boolean_dup_items integer_swap integer_dup_times boolean_empty integer_dup_items integer_empty boolean_dup_items boolean_and boolean_rot) exec_stackdepth integer_mod) exec_dup_items) exec_shove (in1) exec_flush exec_flush boolean_flush integer_rot exec_do*count (tagged_111) exec_swap (exec_y_when_autoconstructing ()) (integer_max integer_empty integer_yank) integer_yankdup exec_stackdepth boolean_eq exec_y (integer_eq))
Zero cases best errors: [0 0 0 0 1 1 0 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 85
Percent parens: 0.212
--- Lexicase Population Statistics ---
Count of elite individuals by case: (67 90 86 158 187 233 254 85 260 67)
Population mean number of elite cases: 1.49
Count of perfect (error zero) individuals by case: (67 90 86 158 187 233 254 85 260 67)
Population mean number of perfect (error zero) cases: 1.49
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_shove} {:close 0, :instruction exec_k} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_dup} {:close 0, :instruction in4} {:close 2, :instruction integer_lt} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_gte} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 1, :instruction print_boolean} {:close 0, :instruction tagged_134} {:close 0, :instruction exec_do*times} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_eq} {:close 1, :instruction print_newline} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 2, :instruction integer_yankdup} {:close 0, :instruction -94} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_shove} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_empty} {:close 2, :instruction integer_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_pop})
Best program: (integer_shove exec_k (exec_y_when_autoconstructing ()) (integer_inc integer_rot exec_swap (boolean_swap exec_y_when_autoconstructing (exec_dup () in4 integer_lt)) (boolean_yank) integer_add boolean_dup_times) boolean_dup_times in4 integer_gte in1 integer_min print_boolean tagged_134 exec_do*times (in3 integer_min integer_dup_times exec_eq print_newline) integer_eq integer_shove print_integer integer_mult exec_if (boolean_yank exec_shove (integer_empty boolean_invert_second_then_and) integer_yankdup) () -94 in4 in3 boolean_dup_items exec_eq integer_sub exec_s (exec_dup () exec_dup_times (integer_mod) exec_dup_items) (exec_shove (in1) boolean_flush integer_empty boolean_dup_times integer_empty integer_yankdup) () exec_do*times (integer_yank boolean_eq exec_dup_items integer_eq boolean_invert_first_then_and exec_k_when_autoconstructing () (boolean_pop)))
Errors: [1 0 0 1 0 0 0 0 0 1]
Total: 3
Mean: 0.3
Genome size: 63
Size: 84
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 8.513
Median total errors in population: 9
Error averages by case: (0.933 0.91 0.914 0.842 0.813 0.767 0.746 0.915 0.74 0.933)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 63.767
Average program size in population (points): 81.555
Average percent parens in population: 0.217
Minimum age in population: 12.0
Maximum age in population: 12.0
Average age in population: 12.0
Median age in population: 12.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.008
Error (vector) diversity:			 0.093
Behavioral diversity:				 0.618
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 11023441
--- Timings ---
Current time: 1559594093321 milliseconds
Total Time:          36.2 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        15.6 seconds, 43.2%
Fitness Testing:     13.1 seconds, 36.2%
Report:               7.4 seconds, 20.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 412
Test mean error for best: 0.41200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 49                  | Program output: 49                 
Correct output: -54                 | Program output: -54                
Correct output: -14                 | Program output: 13                 
Correct output: 59                  | Program output: 96                 
Correct output: -81                 | Program output: -81                
Correct output: -26                 | Program output: -26                
Correct output: -72                 | Program output: -72                
Correct output: -11                 | Program output: 29                 
Correct output: 9                   | Program output: 9                  
Correct output: -91                 | Program output: -91                
Correct output: -97                 | Program output: -97                
Correct output: 17                  | Program output: 17                 
Correct output: -62                 | Program output: -62                
Correct output: -95                 | Program output: -95                
Correct output: 0                   | Program output: 0                  
Correct output: 13                  | Program output: 23                 
Correct output: 77                  | Program output: 83                 
Correct output: 17                  | Program output: 17                 
Correct output: 18                  | Program output: 18                 
Correct output: 9                   | Program output: 9                  
Correct output: 14                  | Program output: 38                 
Correct output: 2                   | Program output: 11                 
Correct output: 4                   | Program output: 34                 
Correct output: 8                   | Program output: 65                 
Correct output: 72                  | Program output: 75                 
Correct output: 14                  | Program output: 14                 
Correct output: 9                   | Program output: 11                 
Correct output: 82                  | Program output: 82                 
Correct output: 22                  | Program output: 22                 
Correct output: 15                  | Program output: 20                 
Correct output: 14                  | Program output: 14                 
Correct output: 45                  | Program output: 45                 
Correct output: 46                  | Program output: 46                 
Correct output: 1                   | Program output: 19                 
Correct output: 20                  | Program output: 67                 
Correct output: -68                 | Program output: -68                
Correct output: -87                 | Program output: -53                
Correct output: -71                 | Program output: -71                
Correct output: -87                 | Program output: -47                
Correct output: -92                 | Program output: -73                
Correct output: -68                 | Program output: 54                 
Correct output: -13                 | Program output: -13                
Correct output: -50                 | Program output: -50                
Correct output: -91                 | Program output: 8                  
Correct output: -88                 | Program output: -88                
Correct output: -72                 | Program output: 5                  
Correct output: -91                 | Program output: -91                
Correct output: -45                 | Program output: -45                
Correct output: -51                 | Program output: -51                
Correct output: -28                 | Program output: -28                
Correct output: -57                 | Program output: -57                
Correct output: -46                 | Program output: -40                
Correct output: -73                 | Program output: -73                
Correct output: -91                 | Program output: -24                
Correct output: -84                 | Program output: -28                
Correct output: -63                 | Program output: 60                 
Correct output: -36                 | Program output: -25                
Correct output: -84                 | Program output: -73                
Correct output: -13                 | Program output: -12                
Correct output: -41                 | Program output: -41                
Correct output: -77                 | Program output: 29                 
Correct output: -80                 | Program output: -80                
Correct output: 44                  | Program output: 50                 
Correct output: -68                 | Program output: 56                 
Correct output: -97                 | Program output: 3                  
Correct output: -95                 | Program output: -95                
Correct output: 10                  | Program output: 10                 
Correct output: -76                 | Program output: -76                
Correct output: -49                 | Program output: -49                
Correct output: 23                  | Program output: 23                 
Correct output: -96                 | Program output: 10                 
Correct output: -11                 | Program output: 39                 
Correct output: -96                 | Program output: -96                
Correct output: -94                 | Program output: -94                
Correct output: -28                 | Program output: -28                
Correct output: -48                 | Program output: -48                
Correct output: -85                 | Program output: -85                
Correct output: -27                 | Program output: -23                
Correct output: -21                 | Program output: -21                
Correct output: -86                 | Program output: -58                
Correct output: 50                  | Program output: 89                 
Correct output: -76                 | Program output: -34                
Correct output: 11                  | Program output: 15                 
Correct output: -30                 | Program output: -30                
Correct output: -74                 | Program output: -63                
Correct output: -47                 | Program output: -47                
Correct output: -8                  | Program output: -8                 
Correct output: -74                 | Program output: 13                 
Correct output: -6                  | Program output: -6                 
Correct output: -80                 | Program output: -80                
Correct output: -49                 | Program output: -13                
Correct output: -28                 | Program output: -28                
Correct output: 33                  | Program output: 33                 
Correct output: 9                   | Program output: 9                  
Correct output: 48                  | Program output: 66                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 2, :instruction integer_lt} {:close 0, :instruction boolean_not} {:close 0, :instruction in1} {:close 1, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 1, :instruction print_newline} {:close 0, :instruction tagged_58} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in2} {:close 2, :instruction integer_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup} {:close 1, :instruction in1} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*count} {:close 1, :instruction tagged_111} {:close 0, :instruction exec_swap} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_yank} {:close 2, :instruction integer_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 0, :instruction integer_eq})
Lexicase best program: (integer_shove boolean_yankdup integer_empty integer_inc boolean_not exec_while (integer_dup integer_shove) integer_dup integer_lt boolean_not in1 in2 in3 exec_eq print_newline tagged_58 integer_yank integer_min print_integer integer_mult exec_if (exec_dup (exec_do*count () boolean_invert_first_then_and exec_when (exec_dup_items in2) integer_yankdup)) (integer_yank exec_swap (boolean_xor integer_mult integer_gt integer_rot) (integer_inc boolean_dup_items integer_swap integer_pop) integer_dup_times boolean_empty boolean_invert_second_then_and integer_dup_items integer_empty boolean_dup_items boolean_and boolean_rot) exec_swap (exec_shove (boolean_dup in1) exec_flush exec_flush boolean_flush integer_rot exec_do*count (tagged_111) exec_swap (exec_y_when_autoconstructing ()) (integer_max integer_empty integer_yank) integer_yankdup) () exec_stackdepth boolean_eq exec_y (integer_eq))
Lexicase best errors: [0 0 0 1 0 1 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 84
Percent parens: 0.202
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 2, :instruction integer_lt} {:close 0, :instruction boolean_not} {:close 0, :instruction in1} {:close 1, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 1, :instruction print_newline} {:close 0, :instruction tagged_58} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in2} {:close 2, :instruction integer_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup} {:close 1, :instruction in1} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*count} {:close 1, :instruction tagged_111} {:close 0, :instruction exec_swap} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_yank} {:close 2, :instruction integer_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 0, :instruction integer_eq})
Zero cases best program: (integer_shove boolean_yankdup integer_empty integer_inc boolean_not exec_while (integer_dup integer_shove) integer_dup integer_lt boolean_not in1 in2 in3 exec_eq print_newline tagged_58 integer_yank integer_min print_integer integer_mult exec_if (exec_dup (exec_do*count () boolean_invert_first_then_and exec_when (exec_dup_items in2) integer_yankdup)) (integer_yank exec_swap (boolean_xor integer_mult integer_gt integer_rot) (integer_inc boolean_dup_items integer_swap integer_pop) integer_dup_times boolean_empty boolean_invert_second_then_and integer_dup_items integer_empty boolean_dup_items boolean_and boolean_rot) exec_swap (exec_shove (boolean_dup in1) exec_flush exec_flush boolean_flush integer_rot exec_do*count (tagged_111) exec_swap (exec_y_when_autoconstructing ()) (integer_max integer_empty integer_yank) integer_yankdup) () exec_stackdepth boolean_eq exec_y (integer_eq))
Zero cases best errors: [0 0 0 1 0 1 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 84
Percent parens: 0.202
--- Lexicase Population Statistics ---
Count of elite individuals by case: (183 201 220 294 175 261 473 183 492 256)
Population mean number of elite cases: 2.74
Count of perfect (error zero) individuals by case: (183 201 220 294 175 261 473 183 492 256)
Population mean number of perfect (error zero) cases: 2.74
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_while} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_shove} {:close 2, :instruction integer_lt} {:close 0, :instruction boolean_not} {:close 0, :instruction in1} {:close 1, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 1, :instruction print_newline} {:close 0, :instruction tagged_58} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in2} {:close 2, :instruction integer_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_shove} {:close 1, :instruction in1} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*count} {:close 1, :instruction tagged_111} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_yank} {:close 2, :instruction integer_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 0, :instruction integer_eq})
Best program: (boolean_yankdup boolean_stackdepth integer_empty boolean_not integer_inc boolean_not exec_while (integer_shove) exec_shove (integer_lt) boolean_not in1 in2 in3 exec_eq print_newline tagged_58 exec_s_when_autoconstructing (integer_yank) (integer_min print_integer integer_mult) (exec_if (exec_dup (integer_lt exec_do*count () boolean_invert_first_then_and exec_when (exec_dup_items in2) integer_yankdup)) (integer_yank exec_swap (boolean_xor exec_s (integer_mult integer_rot) (integer_inc boolean_dup_items integer_swap integer_dup_times boolean_empty integer_dup_items integer_empty boolean_dup_items boolean_and exec_stackdepth integer_mod) (exec_dup_items) exec_shove (in1) exec_flush integer_yank exec_flush boolean_flush integer_rot exec_do*count (tagged_111) exec_yankdup exec_swap (integer_max integer_empty integer_yank) (integer_yankdup)) (exec_stackdepth boolean_eq exec_y (integer_eq)))))
Errors: [0 0 0 1 0 1 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 68
Size: 89
Percent parens: 0.236
--- Population Statistics ---
Average total errors in population: 7.262
Median total errors in population: 8
Error averages by case: (0.817 0.799 0.78 0.706 0.825 0.739 0.527 0.817 0.508 0.744)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 65.281
Average program size in population (points): 83.827
Average percent parens in population: 0.220
Minimum age in population: 13.0
Maximum age in population: 13.0
Average age in population: 13.0
Median age in population: 13.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.009
Error (vector) diversity:			 0.079
Behavioral diversity:				 0.422
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 11724890
--- Timings ---
Current time: 1559594095915 milliseconds
Total Time:          38.6 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        16.8 seconds, 43.6%
Fitness Testing:     13.8 seconds, 35.8%
Report:               7.8 seconds, 20.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 226
Test mean error for best: 0.22600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 49                  | Program output: 49                 
Correct output: -54                 | Program output: -44                
Correct output: -14                 | Program output: -14                
Correct output: 59                  | Program output: 59                 
Correct output: -81                 | Program output: 47                 
Correct output: -26                 | Program output: -26                
Correct output: -72                 | Program output: -72                
Correct output: -11                 | Program output: -11                
Correct output: 9                   | Program output: 9                  
Correct output: -91                 | Program output: 69                 
Correct output: -97                 | Program output: -97                
Correct output: 17                  | Program output: 17                 
Correct output: -62                 | Program output: -62                
Correct output: -95                 | Program output: -95                
Correct output: 0                   | Program output: 0                  
Correct output: 13                  | Program output: 13                 
Correct output: 77                  | Program output: 77                 
Correct output: 17                  | Program output: 47                 
Correct output: 18                  | Program output: 24                 
Correct output: 9                   | Program output: 9                  
Correct output: 14                  | Program output: 14                 
Correct output: 2                   | Program output: 2                  
Correct output: 4                   | Program output: 4                  
Correct output: 8                   | Program output: 8                  
Correct output: 72                  | Program output: 72                 
Correct output: 14                  | Program output: 56                 
Correct output: 9                   | Program output: 9                  
Correct output: 82                  | Program output: 82                 
Correct output: 22                  | Program output: 34                 
Correct output: 15                  | Program output: 15                 
Correct output: 14                  | Program output: 14                 
Correct output: 45                  | Program output: 45                 
Correct output: 46                  | Program output: 63                 
Correct output: 1                   | Program output: 1                  
Correct output: 20                  | Program output: 20                 
Correct output: -68                 | Program output: -50                
Correct output: -87                 | Program output: -87                
Correct output: -71                 | Program output: -71                
Correct output: -87                 | Program output: -87                
Correct output: -92                 | Program output: -92                
Correct output: -68                 | Program output: -68                
Correct output: -13                 | Program output: -13                
Correct output: -50                 | Program output: -50                
Correct output: -91                 | Program output: -91                
Correct output: -88                 | Program output: -88                
Correct output: -72                 | Program output: -72                
Correct output: -91                 | Program output: -91                
Correct output: -45                 | Program output: -39                
Correct output: -51                 | Program output: -51                
Correct output: -28                 | Program output: -28                
Correct output: -57                 | Program output: -57                
Correct output: -46                 | Program output: -46                
Correct output: -73                 | Program output: -12                
Correct output: -91                 | Program output: -91                
Correct output: -84                 | Program output: -84                
Correct output: -63                 | Program output: -63                
Correct output: -36                 | Program output: -36                
Correct output: -84                 | Program output: -84                
Correct output: -13                 | Program output: -13                
Correct output: -41                 | Program output: -5                 
Correct output: -77                 | Program output: -77                
Correct output: -80                 | Program output: -80                
Correct output: 44                  | Program output: 44                 
Correct output: -68                 | Program output: -68                
Correct output: -97                 | Program output: -97                
Correct output: -95                 | Program output: 39                 
Correct output: 10                  | Program output: 10                 
Correct output: -76                 | Program output: -63                
Correct output: -49                 | Program output: -33                
Correct output: 23                  | Program output: 47                 
Correct output: -96                 | Program output: -96                
Correct output: -11                 | Program output: -11                
Correct output: -96                 | Program output: -96                
Correct output: -94                 | Program output: -50                
Correct output: -28                 | Program output: -28                
Correct output: -48                 | Program output: -48                
Correct output: -85                 | Program output: -85                
Correct output: -27                 | Program output: -27                
Correct output: -21                 | Program output: -21                
Correct output: -86                 | Program output: -86                
Correct output: 50                  | Program output: 50                 
Correct output: -76                 | Program output: -76                
Correct output: 11                  | Program output: 11                 
Correct output: -30                 | Program output: -18                
Correct output: -74                 | Program output: -74                
Correct output: -47                 | Program output: -47                
Correct output: -8                  | Program output: 3                  
Correct output: -74                 | Program output: -74                
Correct output: -6                  | Program output: -6                 
Correct output: -80                 | Program output: -80                
Correct output: -49                 | Program output: -49                
Correct output: -28                 | Program output: 61                 
Correct output: 33                  | Program output: 71                 
Correct output: 9                   | Program output: 35                 
Correct output: 48                  | Program output: 48                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_shove} {:close 0, :instruction exec_k} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_exec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_dup} {:close 0, :instruction in4} {:close 2, :instruction integer_lt} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_gte} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 1, :instruction print_boolean} {:close 1, :instruction in3} {:close 0, :instruction tagged_134} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_eq} {:close 1, :instruction print_newline} {:close 1, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 2, :instruction integer_yankdup} {:close 0, :instruction -94} {:close 0, :instruction in4} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_dup_items} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_empty} {:close 2, :instruction integer_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_while} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_k_when_autoconstructing})
Lexicase best program: (integer_shove exec_k (exec_y_when_autoconstructing ()) (print_exec (exec_swap (boolean_swap exec_empty exec_y_when_autoconstructing (exec_empty exec_dup () in4 integer_lt)) (boolean_yank) boolean_yankdup boolean_and) integer_add boolean_dup_times) boolean_dup_times in4 integer_gte in1 integer_min print_boolean in3 tagged_134 in3 integer_min integer_min integer_dup_times exec_eq print_newline integer_eq print_integer integer_mult integer_shove exec_if (boolean_stackdepth boolean_yank exec_shove (exec_yankdup) integer_empty boolean_invert_second_then_and) (integer_yankdup) -94 in4 integer_lt in3 boolean_dup_items exec_eq integer_sub exec_s (exec_dup () exec_dup_times (exec_when (integer_mod) exec_dup_items) in1) (boolean_flush integer_empty boolean_dup_times integer_empty integer_yankdup) () exec_do*times (integer_yank exec_while () integer_stackdepth integer_eq boolean_invert_first_then_and exec_k_when_autoconstructing () ()))
Lexicase best errors: [0 0 0 0 0 0 1 1 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 91
Percent parens: 0.242
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_shove} {:close 0, :instruction exec_k} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_exec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_dup} {:close 0, :instruction in4} {:close 2, :instruction integer_lt} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_gte} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 1, :instruction print_boolean} {:close 1, :instruction in3} {:close 0, :instruction tagged_134} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_eq} {:close 1, :instruction print_newline} {:close 1, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 2, :instruction integer_yankdup} {:close 0, :instruction -94} {:close 0, :instruction in4} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_dup_items} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_empty} {:close 2, :instruction integer_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_while} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_k_when_autoconstructing})
Zero cases best program: (integer_shove exec_k (exec_y_when_autoconstructing ()) (print_exec (exec_swap (boolean_swap exec_empty exec_y_when_autoconstructing (exec_empty exec_dup () in4 integer_lt)) (boolean_yank) boolean_yankdup boolean_and) integer_add boolean_dup_times) boolean_dup_times in4 integer_gte in1 integer_min print_boolean in3 tagged_134 in3 integer_min integer_min integer_dup_times exec_eq print_newline integer_eq print_integer integer_mult integer_shove exec_if (boolean_stackdepth boolean_yank exec_shove (exec_yankdup) integer_empty boolean_invert_second_then_and) (integer_yankdup) -94 in4 integer_lt in3 boolean_dup_items exec_eq integer_sub exec_s (exec_dup () exec_dup_times (exec_when (integer_mod) exec_dup_items) in1) (boolean_flush integer_empty boolean_dup_times integer_empty integer_yankdup) () exec_do*times (integer_yank exec_while () integer_stackdepth integer_eq boolean_invert_first_then_and exec_k_when_autoconstructing () ()))
Zero cases best errors: [0 0 0 0 0 0 1 1 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 91
Percent parens: 0.242
--- Lexicase Population Statistics ---
Count of elite individuals by case: (289 94 139 320 125 295 285 284 244 321)
Population mean number of elite cases: 2.40
Count of perfect (error zero) individuals by case: (289 94 139 320 125 295 285 284 244 321)
Population mean number of perfect (error zero) cases: 2.40
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_shove} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_k} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_dup} {:close 0, :instruction in4} {:close 2, :instruction integer_lt} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction in4} {:close 0, :instruction integer_gte} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 1, :instruction print_boolean} {:close 0, :instruction tagged_134} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 1, :instruction print_newline} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mult} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_invert_second_then_and} {:close 2, :instruction integer_yankdup} {:close 0, :instruction -94} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_shove} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_empty} {:close 2, :instruction integer_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_dup} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction 10} {:close 0, :instruction boolean_pop})
Best program: (integer_shove integer_dec exec_k (exec_y_when_autoconstructing ()) (integer_rot exec_swap (boolean_swap exec_y_when_autoconstructing (exec_dup () in4 integer_lt)) (boolean_yank) integer_add boolean_dup_times) boolean_dup_times print_boolean in4 integer_gte in1 integer_min print_boolean tagged_134 exec_y_when_autoconstructing (in3 integer_min exec_eq print_newline) integer_eq integer_shove print_integer integer_mult boolean_frominteger boolean_yank integer_empty integer_flush boolean_invert_second_then_and integer_yankdup -94 in4 in3 exec_eq integer_sub integer_sub exec_s (exec_dup () exec_dup_times (integer_gte integer_mod) boolean_rot exec_dup_items) (exec_shove (in1) boolean_flush integer_empty boolean_dup_times integer_empty integer_yankdup) () exec_do*times (integer_yank boolean_dup) integer_gt exec_dup_items integer_gte boolean_invert_first_then_and 10 boolean_pop)
Errors: [0 0 0 0 0 0 1 1 0 0]
Total: 2
Mean: 0.2
Genome size: 66
Size: 82
Percent parens: 0.195
--- Population Statistics ---
Average total errors in population: 7.604
Median total errors in population: 8
Error averages by case: (0.711 0.906 0.861 0.68 0.875 0.705 0.715 0.716 0.756 0.679)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 66.764
Average program size in population (points): 85.429
Average percent parens in population: 0.217
Minimum age in population: 14.0
Maximum age in population: 14.0
Average age in population: 14.0
Median age in population: 14.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.009
Error (vector) diversity:			 0.08
Behavioral diversity:				 0.369
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 12474602
--- Timings ---
Current time: 1559594098421 milliseconds
Total Time:          41.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        18.1 seconds, 43.8%
Fitness Testing:     14.5 seconds, 35.3%
Report:               8.5 seconds, 20.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 192
Test mean error for best: 0.19200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 49                  | Program output: 49                 
Correct output: -54                 | Program output: -54                
Correct output: -14                 | Program output: -14                
Correct output: 59                  | Program output: 59                 
Correct output: -81                 | Program output: -81                
Correct output: -26                 | Program output: -26                
Correct output: -72                 | Program output: -9                 
Correct output: -11                 | Program output: -11                
Correct output: 9                   | Program output: 9                  
Correct output: -91                 | Program output: -91                
Correct output: -97                 | Program output: -97                
Correct output: 17                  | Program output: 17                 
Correct output: -62                 | Program output: -62                
Correct output: -95                 | Program output: -95                
Correct output: 0                   | Program output: 0                  
Correct output: 13                  | Program output: 13                 
Correct output: 77                  | Program output: 77                 
Correct output: 17                  | Program output: 17                 
Correct output: 18                  | Program output: 18                 
Correct output: 9                   | Program output: 50                 
Correct output: 14                  | Program output: 14                 
Correct output: 2                   | Program output: 2                  
Correct output: 4                   | Program output: 4                  
Correct output: 8                   | Program output: 8                  
Correct output: 72                  | Program output: 72                 
Correct output: 14                  | Program output: 14                 
Correct output: 9                   | Program output: 9                  
Correct output: 82                  | Program output: 82                 
Correct output: 22                  | Program output: 22                 
Correct output: 15                  | Program output: 15                 
Correct output: 14                  | Program output: 32                 
Correct output: 45                  | Program output: 56                 
Correct output: 46                  | Program output: 46                 
Correct output: 1                   | Program output: 1                  
Correct output: 20                  | Program output: 20                 
Correct output: -68                 | Program output: -68                
Correct output: -87                 | Program output: -87                
Correct output: -71                 | Program output: -11                
Correct output: -87                 | Program output: -87                
Correct output: -92                 | Program output: -92                
Correct output: -68                 | Program output: -68                
Correct output: -13                 | Program output: 20                 
Correct output: -50                 | Program output: 9                  
Correct output: -91                 | Program output: -91                
Correct output: -88                 | Program output: -59                
Correct output: -72                 | Program output: -72                
Correct output: -91                 | Program output: -68                
Correct output: -45                 | Program output: -45                
Correct output: -51                 | Program output: -50                
Correct output: -28                 | Program output: 61                 
Correct output: -57                 | Program output: -35                
Correct output: -46                 | Program output: -46                
Correct output: -73                 | Program output: -73                
Correct output: -91                 | Program output: -91                
Correct output: -84                 | Program output: -84                
Correct output: -63                 | Program output: -63                
Correct output: -36                 | Program output: -36                
Correct output: -84                 | Program output: -84                
Correct output: -13                 | Program output: -13                
Correct output: -41                 | Program output: -41                
Correct output: -77                 | Program output: -77                
Correct output: -80                 | Program output: -45                
Correct output: 44                  | Program output: 44                 
Correct output: -68                 | Program output: -68                
Correct output: -97                 | Program output: -97                
Correct output: -95                 | Program output: -95                
Correct output: 10                  | Program output: 16                 
Correct output: -76                 | Program output: -76                
Correct output: -49                 | Program output: -49                
Correct output: 23                  | Program output: 23                 
Correct output: -96                 | Program output: -96                
Correct output: -11                 | Program output: -11                
Correct output: -96                 | Program output: -84                
Correct output: -94                 | Program output: -94                
Correct output: -28                 | Program output: -17                
Correct output: -48                 | Program output: -33                
Correct output: -85                 | Program output: -76                
Correct output: -27                 | Program output: -27                
Correct output: -21                 | Program output: 22                 
Correct output: -86                 | Program output: -86                
Correct output: 50                  | Program output: 50                 
Correct output: -76                 | Program output: -76                
Correct output: 11                  | Program output: 11                 
Correct output: -30                 | Program output: -30                
Correct output: -74                 | Program output: -74                
Correct output: -47                 | Program output: 15                 
Correct output: -8                  | Program output: -8                 
Correct output: -74                 | Program output: -74                
Correct output: -6                  | Program output: 40                 
Correct output: -80                 | Program output: -46                
Correct output: -49                 | Program output: -49                
Correct output: -28                 | Program output: -28                
Correct output: 33                  | Program output: 33                 
Correct output: 9                   | Program output: 9                  
Correct output: 48                  | Program output: 48                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_shove} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in4} {:close 2, :instruction integer_lt} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_gte} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_max} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction print_integer} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mult} {:close 0, :instruction in4} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction -94} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in2} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_empty} {:close 2, :instruction integer_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_pop})
Lexicase best program: (integer_swap exec_k (integer_shove exec_y_when_autoconstructing ()) (integer_inc integer_rot boolean_swap exec_y_when_autoconstructing (in4 integer_lt)) boolean_yank integer_add boolean_dup_times in4 integer_gte in2 integer_min integer_max in3 integer_min integer_dup_times exec_eq print_integer integer_shove exec_rot (print_integer integer_mult) (in4 exec_if (boolean_yank exec_stackdepth exec_shove (exec_do*times (boolean_invert_second_then_and) -94 in4 in3 boolean_dup_items in2 integer_sub exec_s (exec_dup_times (integer_mod) integer_pop print_boolean exec_dup_items) (exec_yankdup exec_shove (boolean_flush exec_k_when_autoconstructing (integer_empty boolean_dup_times integer_empty integer_yankdup) () exec_yankdup integer_eq boolean_invert_first_then_and exec_k_when_autoconstructing () (exec_empty) boolean_pop)) ())) ()) ())
Lexicase best errors: [0 1 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 81
Percent parens: 0.259
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_shove} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in4} {:close 2, :instruction integer_lt} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_gte} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_max} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction print_integer} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mult} {:close 0, :instruction in4} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction -94} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in2} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_empty} {:close 2, :instruction integer_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_pop})
Zero cases best program: (integer_swap exec_k (integer_shove exec_y_when_autoconstructing ()) (integer_inc integer_rot boolean_swap exec_y_when_autoconstructing (in4 integer_lt)) boolean_yank integer_add boolean_dup_times in4 integer_gte in2 integer_min integer_max in3 integer_min integer_dup_times exec_eq print_integer integer_shove exec_rot (print_integer integer_mult) (in4 exec_if (boolean_yank exec_stackdepth exec_shove (exec_do*times (boolean_invert_second_then_and) -94 in4 in3 boolean_dup_items in2 integer_sub exec_s (exec_dup_times (integer_mod) integer_pop print_boolean exec_dup_items) (exec_yankdup exec_shove (boolean_flush exec_k_when_autoconstructing (integer_empty boolean_dup_times integer_empty integer_yankdup) () exec_yankdup integer_eq boolean_invert_first_then_and exec_k_when_autoconstructing () (exec_empty) boolean_pop)) ())) ()) ())
Zero cases best errors: [0 1 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 81
Percent parens: 0.259
--- Lexicase Population Statistics ---
Count of elite individuals by case: (180 211 281 241 256 426 261 195 416 263)
Population mean number of elite cases: 2.73
Count of perfect (error zero) individuals by case: (180 211 281 241 256 426 261 195 416 263)
Population mean number of perfect (error zero) cases: 2.73
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_shove} {:close 0, :instruction exec_k} {:close 0, :instruction integer_shove} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction integer_lt} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_gte} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_max} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mult} {:close 0, :instruction in4} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 0, :instruction -94} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in2} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_empty} {:close 2, :instruction integer_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_pop})
Best program: (integer_shove exec_k (integer_shove exec_y_when_autoconstructing ()) (integer_inc integer_rot exec_y_when_autoconstructing (integer_lt)) integer_gte boolean_yank integer_add boolean_dup_times in4 integer_gte in2 integer_min integer_max in3 integer_min integer_dup_times integer_shove exec_rot (print_integer integer_mult) (in4 exec_if (boolean_yank exec_shove (integer_empty boolean_invert_second_then_and) exec_s (-94 in4 in3 boolean_dup_items in2 integer_sub exec_s (exec_dup () exec_dup_times (integer_mod) integer_pop exec_dup_items) (exec_yankdup exec_k_when_autoconstructing (integer_empty boolean_dup_times integer_empty integer_yankdup) () integer_yank boolean_eq exec_yankdup integer_eq boolean_invert_first_then_and exec_k_when_autoconstructing () (exec_empty) boolean_pop) ()) () ()) ()) ())
Errors: [0 1 0 0 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 57
Size: 80
Percent parens: 0.288
--- Population Statistics ---
Average total errors in population: 7.27
Median total errors in population: 8
Error averages by case: (0.82 0.789 0.719 0.759 0.744 0.574 0.739 0.805 0.584 0.737)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 65.741
Average program size in population (points): 86.843
Average percent parens in population: 0.243
Minimum age in population: 15.0
Maximum age in population: 15.0
Average age in population: 15.0
Median age in population: 15.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.01
Error (vector) diversity:			 0.062
Behavioral diversity:				 0.293
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 13008742
--- Timings ---
Current time: 1559594100704 milliseconds
Total Time:          43.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        19.3 seconds, 44.3%
Fitness Testing:     15.1 seconds, 34.6%
Report:               9.1 seconds, 20.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 192
Test mean error for best: 0.19200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 49                  | Program output: 49                 
Correct output: -54                 | Program output: -54                
Correct output: -14                 | Program output: -14                
Correct output: 59                  | Program output: 59                 
Correct output: -81                 | Program output: -81                
Correct output: -26                 | Program output: -26                
Correct output: -72                 | Program output: -9                 
Correct output: -11                 | Program output: -11                
Correct output: 9                   | Program output: 9                  
Correct output: -91                 | Program output: -91                
Correct output: -97                 | Program output: -97                
Correct output: 17                  | Program output: 17                 
Correct output: -62                 | Program output: -62                
Correct output: -95                 | Program output: -95                
Correct output: 0                   | Program output: 0                  
Correct output: 13                  | Program output: 13                 
Correct output: 77                  | Program output: 77                 
Correct output: 17                  | Program output: 17                 
Correct output: 18                  | Program output: 18                 
Correct output: 9                   | Program output: 50                 
Correct output: 14                  | Program output: 14                 
Correct output: 2                   | Program output: 2                  
Correct output: 4                   | Program output: 4                  
Correct output: 8                   | Program output: 8                  
Correct output: 72                  | Program output: 72                 
Correct output: 14                  | Program output: 14                 
Correct output: 9                   | Program output: 9                  
Correct output: 82                  | Program output: 82                 
Correct output: 22                  | Program output: 22                 
Correct output: 15                  | Program output: 15                 
Correct output: 14                  | Program output: 32                 
Correct output: 45                  | Program output: 56                 
Correct output: 46                  | Program output: 46                 
Correct output: 1                   | Program output: 1                  
Correct output: 20                  | Program output: 20                 
Correct output: -68                 | Program output: -68                
Correct output: -87                 | Program output: -87                
Correct output: -71                 | Program output: -11                
Correct output: -87                 | Program output: -87                
Correct output: -92                 | Program output: -92                
Correct output: -68                 | Program output: -68                
Correct output: -13                 | Program output: 20                 
Correct output: -50                 | Program output: 9                  
Correct output: -91                 | Program output: -91                
Correct output: -88                 | Program output: -59                
Correct output: -72                 | Program output: -72                
Correct output: -91                 | Program output: -68                
Correct output: -45                 | Program output: -45                
Correct output: -51                 | Program output: -50                
Correct output: -28                 | Program output: 61                 
Correct output: -57                 | Program output: -35                
Correct output: -46                 | Program output: -46                
Correct output: -73                 | Program output: -73                
Correct output: -91                 | Program output: -91                
Correct output: -84                 | Program output: -84                
Correct output: -63                 | Program output: -63                
Correct output: -36                 | Program output: -36                
Correct output: -84                 | Program output: -84                
Correct output: -13                 | Program output: -13                
Correct output: -41                 | Program output: -41                
Correct output: -77                 | Program output: -77                
Correct output: -80                 | Program output: -45                
Correct output: 44                  | Program output: 44                 
Correct output: -68                 | Program output: -68                
Correct output: -97                 | Program output: -97                
Correct output: -95                 | Program output: -95                
Correct output: 10                  | Program output: 16                 
Correct output: -76                 | Program output: -76                
Correct output: -49                 | Program output: -49                
Correct output: 23                  | Program output: 23                 
Correct output: -96                 | Program output: -96                
Correct output: -11                 | Program output: -11                
Correct output: -96                 | Program output: -84                
Correct output: -94                 | Program output: -94                
Correct output: -28                 | Program output: -17                
Correct output: -48                 | Program output: -33                
Correct output: -85                 | Program output: -76                
Correct output: -27                 | Program output: -27                
Correct output: -21                 | Program output: 22                 
Correct output: -86                 | Program output: -86                
Correct output: 50                  | Program output: 50                 
Correct output: -76                 | Program output: -76                
Correct output: 11                  | Program output: 11                 
Correct output: -30                 | Program output: -30                
Correct output: -74                 | Program output: -74                
Correct output: -47                 | Program output: 15                 
Correct output: -8                  | Program output: -8                 
Correct output: -74                 | Program output: -74                
Correct output: -6                  | Program output: 40                 
Correct output: -80                 | Program output: -46                
Correct output: -49                 | Program output: -49                
Correct output: -28                 | Program output: -28                
Correct output: 33                  | Program output: 33                 
Correct output: 9                   | Program output: 9                  
Correct output: 48                  | Program output: 48                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_k} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 2, :instruction integer_lt} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction integer_gte} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction tagged_134} {:close 0, :instruction integer_max} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mult} {:close 0, :instruction in4} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_s} {:close 0, :instruction -94} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_s} {:close 1, :instruction exec_dup} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_empty} {:close 2, :instruction integer_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_exec} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_pop})
Lexicase best program: (exec_k (exec_y_when_autoconstructing ()) (integer_rot integer_lte exec_y_when_autoconstructing (in4 integer_dup integer_lt)) boolean_yank integer_add in4 integer_gte in2 integer_min tagged_134 integer_max in3 integer_min exec_eq integer_shove exec_rot (print_integer integer_mult) (in4 exec_if (boolean_yank integer_swap exec_shove (boolean_invert_second_then_and) integer_eq exec_s (-94 in3 boolean_dup_items exec_s (exec_dup () integer_rot) (exec_dup_times (integer_pop exec_dup_items) exec_yankdup exec_shove (boolean_flush exec_k_when_autoconstructing (integer_empty boolean_dup_times integer_empty integer_yankdup) () print_boolean integer_yank boolean_eq exec_yankdup print_exec (integer_eq boolean_invert_first_then_and exec_eq exec_k_when_autoconstructing () (exec_empty) boolean_pop))) ()) () ()) ()) ())
Lexicase best errors: [0 0 0 0 1 0 0 1 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 84
Percent parens: 0.298
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_k} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 2, :instruction integer_lt} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction integer_gte} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction tagged_134} {:close 0, :instruction integer_max} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mult} {:close 0, :instruction in4} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_s} {:close 0, :instruction -94} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_s} {:close 1, :instruction exec_dup} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_empty} {:close 2, :instruction integer_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_exec} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_pop})
Zero cases best program: (exec_k (exec_y_when_autoconstructing ()) (integer_rot integer_lte exec_y_when_autoconstructing (in4 integer_dup integer_lt)) boolean_yank integer_add in4 integer_gte in2 integer_min tagged_134 integer_max in3 integer_min exec_eq integer_shove exec_rot (print_integer integer_mult) (in4 exec_if (boolean_yank integer_swap exec_shove (boolean_invert_second_then_and) integer_eq exec_s (-94 in3 boolean_dup_items exec_s (exec_dup () integer_rot) (exec_dup_times (integer_pop exec_dup_items) exec_yankdup exec_shove (boolean_flush exec_k_when_autoconstructing (integer_empty boolean_dup_times integer_empty integer_yankdup) () print_boolean integer_yank boolean_eq exec_yankdup print_exec (integer_eq boolean_invert_first_then_and exec_eq exec_k_when_autoconstructing () (exec_empty) boolean_pop))) ()) () ()) ()) ())
Zero cases best errors: [0 0 0 0 1 0 0 1 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 84
Percent parens: 0.298
--- Lexicase Population Statistics ---
Count of elite individuals by case: (280 269 317 317 108 321 369 111 320 508)
Population mean number of elite cases: 2.92
Count of perfect (error zero) individuals by case: (280 269 317 317 108 321 369 111 320 508)
Population mean number of perfect (error zero) cases: 2.92
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_shove} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_dup} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_swap} {:close 2, :instruction integer_lt} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_add} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction integer_gte} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction tagged_134} {:close 0, :instruction integer_max} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_s} {:close 0, :instruction -94} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_empty} {:close 2, :instruction integer_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_sub})
Best program: (integer_shove exec_y_when_autoconstructing () integer_inc integer_rot boolean_frominteger boolean_dup_times integer_dup boolean_invert_first_then_and boolean_swap integer_lt boolean_yank integer_add exec_y_when_autoconstructing () exec_s (in4 integer_gte in2 integer_min tagged_134 integer_max in3 integer_min integer_dup_times exec_eq in2 exec_rot (print_integer in1 exec_dup (exec_if (boolean_yank boolean_flush exec_shove (integer_empty exec_s (-94 in4 in3 in2 exec_k_when_autoconstructing (integer_sub exec_s (exec_dup () exec_dup_items integer_mod) (integer_pop exec_dup_items) (exec_yankdup boolean_eq) exec_shove (boolean_flush exec_k_when_autoconstructing (boolean_dup_times boolean_or integer_empty integer_yankdup) () boolean_eq integer_mult exec_yankdup integer_eq boolean_invert_first_then_and integer_sub)) ()) () ())) ())) () ()) () ())
Errors: [0 0 0 0 1 0 0 1 0 0]
Total: 2
Mean: 0.2
Genome size: 62
Size: 87
Percent parens: 0.287
--- Population Statistics ---
Average total errors in population: 7.08
Median total errors in population: 9
Error averages by case: (0.72 0.731 0.683 0.683 0.892 0.679 0.631 0.889 0.68 0.492)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 64.505
Average program size in population (points): 87.139
Average percent parens in population: 0.259
Minimum age in population: 16.0
Maximum age in population: 16.0
Average age in population: 16.0
Median age in population: 16.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.009
Error (vector) diversity:			 0.048
Behavioral diversity:				 0.283
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 13588630
--- Timings ---
Current time: 1559594103006 milliseconds
Total Time:          45.8 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        20.5 seconds, 44.7%
Fitness Testing:     15.7 seconds, 34.2%
Report:               9.6 seconds, 21.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Smallest problem report - generation 17
Test total error for best: 0
Test mean error for best: 0.00000
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 49                  | Program output: 49                 
Correct output: -54                 | Program output: -54                
Correct output: -14                 | Program output: -14                
Correct output: 59                  | Program output: 59                 
Correct output: -81                 | Program output: -81                
Correct output: -26                 | Program output: -26                
Correct output: -72                 | Program output: -72                
Correct output: -11                 | Program output: -11                
Correct output: 9                   | Program output: 9                  
Correct output: -91                 | Program output: -91                
Correct output: -97                 | Program output: -97                
Correct output: 17                  | Program output: 17                 
Correct output: -62                 | Program output: -62                
Correct output: -95                 | Program output: -95                
Correct output: 0                   | Program output: 0                  
Correct output: 13                  | Program output: 13                 
Correct output: 77                  | Program output: 77                 
Correct output: 17                  | Program output: 17                 
Correct output: 18                  | Program output: 18                 
Correct output: 9                   | Program output: 9                  
Correct output: 14                  | Program output: 14                 
Correct output: 2                   | Program output: 2                  
Correct output: 4                   | Program output: 4                  
Correct output: 8                   | Program output: 8                  
Correct output: 72                  | Program output: 72                 
Correct output: 14                  | Program output: 14                 
Correct output: 9                   | Program output: 9                  
Correct output: 82                  | Program output: 82                 
Correct output: 22                  | Program output: 22                 
Correct output: 15                  | Program output: 15                 
Correct output: 14                  | Program output: 14                 
Correct output: 45                  | Program output: 45                 
Correct output: 46                  | Program output: 46                 
Correct output: 1                   | Program output: 1                  
Correct output: 20                  | Program output: 20                 
Correct output: -68                 | Program output: -68                
Correct output: -87                 | Program output: -87                
Correct output: -71                 | Program output: -71                
Correct output: -87                 | Program output: -87                
Correct output: -92                 | Program output: -92                
Correct output: -68                 | Program output: -68                
Correct output: -13                 | Program output: -13                
Correct output: -50                 | Program output: -50                
Correct output: -91                 | Program output: -91                
Correct output: -88                 | Program output: -88                
Correct output: -72                 | Program output: -72                
Correct output: -91                 | Program output: -91                
Correct output: -45                 | Program output: -45                
Correct output: -51                 | Program output: -51                
Correct output: -28                 | Program output: -28                
Correct output: -57                 | Program output: -57                
Correct output: -46                 | Program output: -46                
Correct output: -73                 | Program output: -73                
Correct output: -91                 | Program output: -91                
Correct output: -84                 | Program output: -84                
Correct output: -63                 | Program output: -63                
Correct output: -36                 | Program output: -36                
Correct output: -84                 | Program output: -84                
Correct output: -13                 | Program output: -13                
Correct output: -41                 | Program output: -41                
Correct output: -77                 | Program output: -77                
Correct output: -80                 | Program output: -80                
Correct output: 44                  | Program output: 44                 
Correct output: -68                 | Program output: -68                
Correct output: -97                 | Program output: -97                
Correct output: -95                 | Program output: -95                
Correct output: 10                  | Program output: 10                 
Correct output: -76                 | Program output: -76                
Correct output: -49                 | Program output: -49                
Correct output: 23                  | Program output: 23                 
Correct output: -96                 | Program output: -96                
Correct output: -11                 | Program output: -11                
Correct output: -96                 | Program output: -96                
Correct output: -94                 | Program output: -94                
Correct output: -28                 | Program output: -28                
Correct output: -48                 | Program output: -48                
Correct output: -85                 | Program output: -85                
Correct output: -27                 | Program output: -27                
Correct output: -21                 | Program output: -21                
Correct output: -86                 | Program output: -86                
Correct output: 50                  | Program output: 50                 
Correct output: -76                 | Program output: -76                
Correct output: 11                  | Program output: 11                 
Correct output: -30                 | Program output: -30                
Correct output: -74                 | Program output: -74                
Correct output: -47                 | Program output: -47                
Correct output: -8                  | Program output: -8                 
Correct output: -74                 | Program output: -74                
Correct output: -6                  | Program output: -6                 
Correct output: -80                 | Program output: -80                
Correct output: -49                 | Program output: -49                
Correct output: -28                 | Program output: -28                
Correct output: 33                  | Program output: 33                 
Correct output: 9                   | Program output: 9                  
Correct output: 48                  | Program output: 48                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup} {:close 2, :instruction integer_lt} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in4} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_mult} {:close 0, :instruction in1} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_min} {:close 1, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_rot} {:close 1, :instruction in2} {:close 1, :instruction boolean_eq} {:close 1, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in3} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_eq} {:close 1, :instruction print_newline} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_if} {:close 1, :instruction exec_do*count} {:close 1, :instruction boolean_eq} {:close 1, :instruction in2} {:close 2, :instruction integer_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_561} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_do*times} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_rot} {:close 2, :instruction in4} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tagged_111} {:close 0, :instruction exec_swap} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction integer_yankdup} {:close 2, :instruction integer_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction exec_do*range})
Lexicase best program: (integer_max integer_shove integer_inc exec_yank boolean_xor integer_dup integer_lt boolean_invert_first_then_and in4 boolean_not integer_mult in1 exec_dup_times () integer_rot integer_min in1 integer_min integer_gt integer_rot in2 boolean_eq in4 integer_dup_times integer_yankdup in3 integer_empty exec_eq print_newline exec_yankdup exec_s_when_autoconstructing (integer_min print_integer boolean_pop integer_pop integer_mult) (exec_if (exec_do*count () boolean_eq) (in2) integer_yankdup) () boolean_invert_second_then_and tagged_561 exec_swap (boolean_xor integer_empty exec_do*times () integer_rot) (exec_if () (integer_inc boolean_yank print_boolean exec_flush) boolean_rot in4) integer_max boolean_empty integer_empty print_exec (boolean_and boolean_rot) exec_stackdepth integer_mod exec_dup_items exec_shove (boolean_flush integer_stackdepth tagged_111) exec_swap (exec_y_when_autoconstructing ()) (integer_max integer_yankdup integer_yankdup) exec_stackdepth in4 exec_do*range ())
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 94
Percent parens: 0.202
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup} {:close 2, :instruction integer_lt} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in4} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_mult} {:close 0, :instruction in1} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_min} {:close 1, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_rot} {:close 1, :instruction in2} {:close 1, :instruction boolean_eq} {:close 1, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in3} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_eq} {:close 1, :instruction print_newline} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_if} {:close 1, :instruction exec_do*count} {:close 1, :instruction boolean_eq} {:close 1, :instruction in2} {:close 2, :instruction integer_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_561} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_do*times} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_rot} {:close 2, :instruction in4} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tagged_111} {:close 0, :instruction exec_swap} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction integer_yankdup} {:close 2, :instruction integer_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction exec_do*range})
Zero cases best program: (integer_max integer_shove integer_inc exec_yank boolean_xor integer_dup integer_lt boolean_invert_first_then_and in4 boolean_not integer_mult in1 exec_dup_times () integer_rot integer_min in1 integer_min integer_gt integer_rot in2 boolean_eq in4 integer_dup_times integer_yankdup in3 integer_empty exec_eq print_newline exec_yankdup exec_s_when_autoconstructing (integer_min print_integer boolean_pop integer_pop integer_mult) (exec_if (exec_do*count () boolean_eq) (in2) integer_yankdup) () boolean_invert_second_then_and tagged_561 exec_swap (boolean_xor integer_empty exec_do*times () integer_rot) (exec_if () (integer_inc boolean_yank print_boolean exec_flush) boolean_rot in4) integer_max boolean_empty integer_empty print_exec (boolean_and boolean_rot) exec_stackdepth integer_mod exec_dup_items exec_shove (boolean_flush integer_stackdepth tagged_111) exec_swap (exec_y_when_autoconstructing ()) (integer_max integer_yankdup integer_yankdup) exec_stackdepth in4 exec_do*range ())
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 94
Percent parens: 0.202
--- Lexicase Population Statistics ---
Count of elite individuals by case: (359 259 185 139 352 479 355 355 337 339)
Population mean number of elite cases: 3.16
Count of perfect (error zero) individuals by case: (359 259 185 139 352 479 355 355 337 339)
Population mean number of perfect (error zero) cases: 3.16
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_while} {:close 2, :instruction integer_lt} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dec} {:close 0, :instruction in4} {:close 0, :instruction boolean_not} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 1, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction integer_dup_times} {:close 1, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_lte} {:close 1, :instruction print_newline} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_if} {:close 1, :instruction exec_do*count} {:close 1, :instruction boolean_eq} {:close 1, :instruction in2} {:close 2, :instruction integer_yankdup} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction tagged_561} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_rot} {:close 2, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction in3} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_shove} {:close 1, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tagged_111} {:close 0, :instruction exec_swap} {:close 2, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_max} {:close 2, :instruction integer_yankdup} {:close 0, :instruction in4} {:close 0, :instruction exec_do*range})
Best program: (integer_shove integer_inc boolean_frominteger exec_yank boolean_not exec_while () integer_lt boolean_invert_first_then_and integer_dec in4 boolean_not in1 integer_min in2 integer_min integer_dup_times integer_gt in3 integer_empty exec_eq integer_lte print_newline integer_min print_integer integer_inc boolean_pop integer_mult integer_inc exec_if (exec_do*count () boolean_eq) (in2) integer_yankdup boolean_yankdup tagged_561 exec_do*range () exec_swap (boolean_xor integer_empty exec_do*times () exec_if () (boolean_yank exec_flush) boolean_rot in4) () exec_stackdepth boolean_empty integer_empty print_exec (boolean_and boolean_rot) exec_stackdepth in3 integer_mod exec_dup_items exec_shove (in1) boolean_flush integer_stackdepth tagged_111 exec_swap (exec_y_when_autoconstructing ()) (boolean_stackdepth) integer_max integer_yankdup in4 exec_do*range ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 67
Size: 84
Percent parens: 0.202
--- Population Statistics ---
Average total errors in population: 6.841
Median total errors in population: 8
Error averages by case: (0.641 0.741 0.815 0.861 0.648 0.521 0.645 0.645 0.663 0.661)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 67.865
Average program size in population (points): 88.03
Average percent parens in population: 0.229
Minimum age in population: 17.0
Maximum age in population: 17.0
Average age in population: 17.0
Median age in population: 17.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.011
Error (vector) diversity:			 0.064
Behavioral diversity:				 0.376
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 14335583
--- Timings ---
Current time: 1559594105448 milliseconds
Total Time:          48.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        21.7 seconds, 44.9%
Fitness Testing:     16.4 seconds, 34.0%
Report:              10.1 seconds, 20.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 17
Successful program: (integer_shove integer_inc boolean_frominteger exec_yank boolean_not exec_while () integer_lt boolean_invert_first_then_and integer_dec in4 boolean_not in1 integer_min in2 integer_min integer_dup_times integer_gt in3 integer_empty exec_eq integer_lte print_newline integer_min print_integer integer_inc boolean_pop integer_mult integer_inc exec_if (exec_do*count () boolean_eq) (in2) integer_yankdup boolean_yankdup tagged_561 exec_do*range () exec_swap (boolean_xor integer_empty exec_do*times () exec_if () (boolean_yank exec_flush) boolean_rot in4) () exec_stackdepth boolean_empty integer_empty print_exec (boolean_and boolean_rot) exec_stackdepth in3 integer_mod exec_dup_items exec_shove (in1) boolean_flush integer_stackdepth tagged_111 exec_swap (exec_y_when_autoconstructing ()) (boolean_stackdepth) integer_max integer_yankdup in4 exec_do*range ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 84


Auto-simplifying with starting size: 84
step: 0
program: (integer_shove integer_inc boolean_frominteger exec_yank boolean_not exec_while () integer_lt boolean_invert_first_then_and integer_dec in4 boolean_not in1 integer_min in2 integer_min integer_dup_times integer_gt in3 integer_empty exec_eq integer_lte print_newline integer_min print_integer integer_inc boolean_pop integer_mult integer_inc exec_if (exec_do*count () boolean_eq) (in2) integer_yankdup boolean_yankdup tagged_561 exec_do*range () exec_swap (boolean_xor integer_empty exec_do*times () exec_if () (boolean_yank exec_flush) boolean_rot in4) () exec_stackdepth boolean_empty integer_empty print_exec (boolean_and boolean_rot) exec_stackdepth in3 integer_mod exec_dup_items exec_shove (in1) boolean_flush integer_stackdepth tagged_111 exec_swap (exec_y_when_autoconstructing ()) (boolean_stackdepth) integer_max integer_yankdup in4 exec_do*range ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 84

step: 500
program: (integer_shove integer_inc boolean_frominteger exec_yank boolean_not exec_while () integer_lt boolean_invert_first_then_and integer_dec in4 boolean_not in1 integer_min in2 integer_min integer_dup_times integer_gt in3 integer_empty exec_eq integer_lte print_newline integer_min print_integer integer_inc boolean_pop integer_mult integer_inc exec_if (exec_do*count () boolean_eq) (in2) integer_yankdup boolean_yankdup tagged_561 exec_do*range () exec_swap (boolean_xor integer_empty exec_do*times () exec_if () (boolean_yank exec_flush) boolean_rot in4) () exec_stackdepth boolean_empty integer_empty print_exec (boolean_and boolean_rot) exec_stackdepth in3 integer_mod exec_dup_items exec_shove (in1) boolean_flush integer_stackdepth tagged_111 exec_swap (exec_y_when_autoconstructing ()) (boolean_stackdepth) integer_max integer_yankdup in4 exec_do*range ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 84

step: 1000
program: (integer_shove integer_inc boolean_frominteger exec_yank boolean_not exec_while () integer_lt boolean_invert_first_then_and integer_dec in4 boolean_not in1 integer_min in2 integer_min integer_dup_times integer_gt in3 integer_empty exec_eq integer_lte print_newline integer_min print_integer integer_inc boolean_pop integer_mult integer_inc exec_if (exec_do*count () boolean_eq) (in2) integer_yankdup boolean_yankdup tagged_561 exec_do*range () exec_swap (boolean_xor integer_empty exec_do*times () exec_if () (boolean_yank exec_flush) boolean_rot in4) () exec_stackdepth boolean_empty integer_empty print_exec (boolean_and boolean_rot) exec_stackdepth in3 integer_mod exec_dup_items exec_shove (in1) boolean_flush integer_stackdepth tagged_111 exec_swap (exec_y_when_autoconstructing ()) (boolean_stackdepth) integer_max integer_yankdup in4 exec_do*range ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 84

step: 1500
program: (integer_shove integer_inc boolean_frominteger exec_yank boolean_not exec_while () integer_lt boolean_invert_first_then_and integer_dec in4 boolean_not in1 integer_min in2 integer_min integer_dup_times integer_gt in3 integer_empty exec_eq integer_lte print_newline integer_min print_integer integer_inc boolean_pop integer_mult integer_inc exec_if (exec_do*count () boolean_eq) (in2) integer_yankdup boolean_yankdup tagged_561 exec_do*range () exec_swap (boolean_xor integer_empty exec_do*times () exec_if () (boolean_yank exec_flush) boolean_rot in4) () exec_stackdepth boolean_empty integer_empty print_exec (boolean_and boolean_rot) exec_stackdepth in3 integer_mod exec_dup_items exec_shove (in1) boolean_flush integer_stackdepth tagged_111 exec_swap (exec_y_when_autoconstructing ()) (boolean_stackdepth) integer_max integer_yankdup in4 exec_do*range ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 84

step: 2000
program: (integer_shove integer_inc boolean_frominteger exec_yank boolean_not exec_while () integer_lt boolean_invert_first_then_and integer_dec in4 boolean_not in1 integer_min in2 integer_min integer_dup_times integer_gt in3 integer_empty exec_eq integer_lte print_newline integer_min print_integer integer_inc boolean_pop integer_mult integer_inc exec_if (exec_do*count () boolean_eq) (in2) integer_yankdup boolean_yankdup tagged_561 exec_do*range () exec_swap (boolean_xor integer_empty exec_do*times () exec_if () (boolean_yank exec_flush) boolean_rot in4) () exec_stackdepth boolean_empty integer_empty print_exec (boolean_and boolean_rot) exec_stackdepth in3 integer_mod exec_dup_items exec_shove (in1) boolean_flush integer_stackdepth tagged_111 exec_swap (exec_y_when_autoconstructing ()) (boolean_stackdepth) integer_max integer_yankdup in4 exec_do*range ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 84

step: 2500
program: (integer_shove integer_inc boolean_frominteger exec_yank boolean_not exec_while () integer_lt boolean_invert_first_then_and integer_dec in4 boolean_not in1 integer_min in2 integer_min integer_dup_times integer_gt in3 integer_empty exec_eq integer_lte print_newline integer_min print_integer integer_inc boolean_pop integer_mult integer_inc exec_if (exec_do*count () boolean_eq) (in2) integer_yankdup boolean_yankdup tagged_561 exec_do*range () exec_swap (boolean_xor integer_empty exec_do*times () exec_if () (boolean_yank exec_flush) boolean_rot in4) () exec_stackdepth boolean_empty integer_empty print_exec (boolean_and boolean_rot) exec_stackdepth in3 integer_mod exec_dup_items exec_shove (in1) boolean_flush integer_stackdepth tagged_111 exec_swap (exec_y_when_autoconstructing ()) (boolean_stackdepth) integer_max integer_yankdup in4 exec_do*range ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 84

step: 3000
program: (integer_shove integer_inc boolean_frominteger exec_yank boolean_not exec_while () integer_lt boolean_invert_first_then_and integer_dec in4 boolean_not in1 integer_min in2 integer_min integer_dup_times integer_gt in3 integer_empty exec_eq integer_lte print_newline integer_min print_integer integer_inc boolean_pop integer_mult integer_inc exec_if (exec_do*count () boolean_eq) (in2) integer_yankdup boolean_yankdup tagged_561 exec_do*range () exec_swap (boolean_xor integer_empty exec_do*times () exec_if () (boolean_yank exec_flush) boolean_rot in4) () exec_stackdepth boolean_empty integer_empty print_exec (boolean_and boolean_rot) exec_stackdepth in3 integer_mod exec_dup_items exec_shove (in1) boolean_flush integer_stackdepth tagged_111 exec_swap (exec_y_when_autoconstructing ()) (boolean_stackdepth) integer_max integer_yankdup in4 exec_do*range ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 84

step: 3500
program: (integer_shove integer_inc boolean_frominteger exec_yank boolean_not exec_while () integer_lt boolean_invert_first_then_and integer_dec in4 boolean_not in1 integer_min in2 integer_min integer_dup_times integer_gt in3 integer_empty exec_eq integer_lte print_newline integer_min print_integer integer_inc boolean_pop integer_mult integer_inc exec_if (exec_do*count () boolean_eq) (in2) integer_yankdup boolean_yankdup tagged_561 exec_do*range () exec_swap (boolean_xor integer_empty exec_do*times () exec_if () (boolean_yank exec_flush) boolean_rot in4) () exec_stackdepth boolean_empty integer_empty print_exec (boolean_and boolean_rot) exec_stackdepth in3 integer_mod exec_dup_items exec_shove (in1) boolean_flush integer_stackdepth tagged_111 exec_swap (exec_y_when_autoconstructing ()) (boolean_stackdepth) integer_max integer_yankdup in4 exec_do*range ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 84

step: 4000
program: (integer_shove integer_inc boolean_frominteger exec_yank boolean_not exec_while () integer_lt boolean_invert_first_then_and integer_dec in4 boolean_not in1 integer_min in2 integer_min integer_dup_times integer_gt in3 integer_empty exec_eq integer_lte print_newline integer_min print_integer integer_inc boolean_pop integer_mult integer_inc exec_if (exec_do*count () boolean_eq) (in2) integer_yankdup boolean_yankdup tagged_561 exec_do*range () exec_swap (boolean_xor integer_empty exec_do*times () exec_if () (boolean_yank exec_flush) boolean_rot in4) () exec_stackdepth boolean_empty integer_empty print_exec (boolean_and boolean_rot) exec_stackdepth in3 integer_mod exec_dup_items exec_shove (in1) boolean_flush integer_stackdepth tagged_111 exec_swap (exec_y_when_autoconstructing ()) (boolean_stackdepth) integer_max integer_yankdup in4 exec_do*range ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 84

step: 4500
program: (integer_shove integer_inc boolean_frominteger exec_yank boolean_not exec_while () integer_lt boolean_invert_first_then_and integer_dec in4 boolean_not in1 integer_min in2 integer_min integer_dup_times integer_gt in3 integer_empty exec_eq integer_lte print_newline integer_min print_integer integer_inc boolean_pop integer_mult integer_inc exec_if (exec_do*count () boolean_eq) (in2) integer_yankdup boolean_yankdup tagged_561 exec_do*range () exec_swap (boolean_xor integer_empty exec_do*times () exec_if () (boolean_yank exec_flush) boolean_rot in4) () exec_stackdepth boolean_empty integer_empty print_exec (boolean_and boolean_rot) exec_stackdepth in3 integer_mod exec_dup_items exec_shove (in1) boolean_flush integer_stackdepth tagged_111 exec_swap (exec_y_when_autoconstructing ()) (boolean_stackdepth) integer_max integer_yankdup in4 exec_do*range ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 84

step: 5000
program: (integer_shove integer_inc boolean_frominteger exec_yank boolean_not exec_while () integer_lt boolean_invert_first_then_and integer_dec in4 boolean_not in1 integer_min in2 integer_min integer_dup_times integer_gt in3 integer_empty exec_eq integer_lte print_newline integer_min print_integer integer_inc boolean_pop integer_mult integer_inc exec_if (exec_do*count () boolean_eq) (in2) integer_yankdup boolean_yankdup tagged_561 exec_do*range () exec_swap (boolean_xor integer_empty exec_do*times () exec_if () (boolean_yank exec_flush) boolean_rot in4) () exec_stackdepth boolean_empty integer_empty print_exec (boolean_and boolean_rot) exec_stackdepth in3 integer_mod exec_dup_items exec_shove (in1) boolean_flush integer_stackdepth tagged_111 exec_swap (exec_y_when_autoconstructing ()) (boolean_stackdepth) integer_max integer_yankdup in4 exec_do*range ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 84

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 17
Test total error for best: 0
Test mean error for best: 0.00000
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 49                  | Program output: 49                 
Correct output: -54                 | Program output: -54                
Correct output: -14                 | Program output: -14                
Correct output: 59                  | Program output: 59                 
Correct output: -81                 | Program output: -81                
Correct output: -26                 | Program output: -26                
Correct output: -72                 | Program output: -72                
Correct output: -11                 | Program output: -11                
Correct output: 9                   | Program output: 9                  
Correct output: -91                 | Program output: -91                
Correct output: -97                 | Program output: -97                
Correct output: 17                  | Program output: 17                 
Correct output: -62                 | Program output: -62                
Correct output: -95                 | Program output: -95                
Correct output: 0                   | Program output: 0                  
Correct output: 13                  | Program output: 13                 
Correct output: 77                  | Program output: 77                 
Correct output: 17                  | Program output: 17                 
Correct output: 18                  | Program output: 18                 
Correct output: 9                   | Program output: 9                  
Correct output: 14                  | Program output: 14                 
Correct output: 2                   | Program output: 2                  
Correct output: 4                   | Program output: 4                  
Correct output: 8                   | Program output: 8                  
Correct output: 72                  | Program output: 72                 
Correct output: 14                  | Program output: 14                 
Correct output: 9                   | Program output: 9                  
Correct output: 82                  | Program output: 82                 
Correct output: 22                  | Program output: 22                 
Correct output: 15                  | Program output: 15                 
Correct output: 14                  | Program output: 14                 
Correct output: 45                  | Program output: 45                 
Correct output: 46                  | Program output: 46                 
Correct output: 1                   | Program output: 1                  
Correct output: 20                  | Program output: 20                 
Correct output: -68                 | Program output: -68                
Correct output: -87                 | Program output: -87                
Correct output: -71                 | Program output: -71                
Correct output: -87                 | Program output: -87                
Correct output: -92                 | Program output: -92                
Correct output: -68                 | Program output: -68                
Correct output: -13                 | Program output: -13                
Correct output: -50                 | Program output: -50                
Correct output: -91                 | Program output: -91                
Correct output: -88                 | Program output: -88                
Correct output: -72                 | Program output: -72                
Correct output: -91                 | Program output: -91                
Correct output: -45                 | Program output: -45                
Correct output: -51                 | Program output: -51                
Correct output: -28                 | Program output: -28                
Correct output: -57                 | Program output: -57                
Correct output: -46                 | Program output: -46                
Correct output: -73                 | Program output: -73                
Correct output: -91                 | Program output: -91                
Correct output: -84                 | Program output: -84                
Correct output: -63                 | Program output: -63                
Correct output: -36                 | Program output: -36                
Correct output: -84                 | Program output: -84                
Correct output: -13                 | Program output: -13                
Correct output: -41                 | Program output: -41                
Correct output: -77                 | Program output: -77                
Correct output: -80                 | Program output: -80                
Correct output: 44                  | Program output: 44                 
Correct output: -68                 | Program output: -68                
Correct output: -97                 | Program output: -97                
Correct output: -95                 | Program output: -95                
Correct output: 10                  | Program output: 10                 
Correct output: -76                 | Program output: -76                
Correct output: -49                 | Program output: -49                
Correct output: 23                  | Program output: 23                 
Correct output: -96                 | Program output: -96                
Correct output: -11                 | Program output: -11                
Correct output: -96                 | Program output: -96                
Correct output: -94                 | Program output: -94                
Correct output: -28                 | Program output: -28                
Correct output: -48                 | Program output: -48                
Correct output: -85                 | Program output: -85                
Correct output: -27                 | Program output: -27                
Correct output: -21                 | Program output: -21                
Correct output: -86                 | Program output: -86                
Correct output: 50                  | Program output: 50                 
Correct output: -76                 | Program output: -76                
Correct output: 11                  | Program output: 11                 
Correct output: -30                 | Program output: -30                
Correct output: -74                 | Program output: -74                
Correct output: -47                 | Program output: -47                
Correct output: -8                  | Program output: -8                 
Correct output: -74                 | Program output: -74                
Correct output: -6                  | Program output: -6                 
Correct output: -80                 | Program output: -80                
Correct output: -49                 | Program output: -49                
Correct output: -28                 | Program output: -28                
Correct output: 33                  | Program output: 33                 
Correct output: 9                   | Program output: 9                  
Correct output: 48                  | Program output: 48                 
;;******************************
