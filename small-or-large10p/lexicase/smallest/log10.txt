Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 3000 :genetic-operator-probabilities {:uniform-addition-and-deletion,1.0} :uniform-addition-and-deletion-rate 0.09
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x17e6b7e4 clojush.problems.software.smallest$fn__7461@17e6b7e4] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0xb842275 clojush.instructions.tag$tag_instruction_erc$fn__2160@b842275] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x11c25846 clojush.instructions.tag$tagged_instruction_erc$fn__2166@11c25846] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0xdd9de63 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@dd9de63]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:uniform-addition-and-deletion 1.0}
max-error = 1
max-generations = 3000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x98712fa clojush.problems.software.smallest$smallest_initial_report@98712fa]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x3b8d2abe clojush.problems.software.smallest$smallest_report@3b8d2abe]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[30 -65 30 30] -65] [[-43 35 35 35] -43] [[41 -45 41 41] -45] [[63 64 63 63] 63] [[-85 -85 -85 0] -85] [[81 81 42 81] 42] [[-50 -50 60 -50] -50] [[-68 -3 -68 -68] -68] [[-68 -60 -60 -60] -68] [[86 45 45 45] 45] [(8 8 8 8) 8] [(86 86 86 86) 86] [(-81 -81 -81 -81) -81] [(-100 -100 -100 -100) -100] [(-10 -10 -10 -10) -10] [(18 73 52 78) 18] [(67 97 49 8) 8] [(89 91 75 2) 2] [(99 98 96 27) 27] [(97 4 86 37) 4] [(32 4 62 26) 4] [(53 0 16 96) 0] [(49 96 95 4) 4] [(27 21 38 16) 16] [(53 40 88 7) 7] [(0 18 54 67) 0] [(24 100 4 100) 4] [(7 6 63 47) 6] [(59 18 92 35) 18] [(22 38 16 46) 16] [(55 34 62 99) 34] [(69 3 66 90) 3] [(48 21 31 87) 21] [(38 79 6 33) 6] [(34 7 62 37) 7] [(-55 -54 58 62) -55] [(-16 50 -84 -9) -84] [(32 -35 -96 -87) -96] [(95 -87 -28 -36) -87] [(-70 -64 76 34) -70] [(78 -11 73 -88) -88] [(-51 -58 -5 66) -58] [(-25 38 24 2) -25] [(-32 91 -27 -62) -62] [(100 33 66 -96) -96] [(86 -88 20 91) -88] [(67 52 -71 35) -71] [(70 51 -88 32) -88] [(4 -74 95 95) -74] [(36 87 -57 60) -57] [(48 -7 8 -58) -58] [(-63 -29 -93 70) -93] [(-70 -11 95 35) -70] [(76 34 48 72) 34] [(70 12 -31 87) -31] [(-47 53 -79 23) -79] [(-55 -45 -73 -24) -73] [(2 -40 -15 -61) -61] [(-2 26 47 99) -2] [(31 -61 -90 -35) -90] [(53 -25 -71 8) -71] [(23 -74 -71 -46) -74] [(58 -26 -58 39) -58] [(-19 -74 -68 25) -74] [(-52 -24 -75 86) -75] [(-11 92 -12 3) -12] [(34 53 56 79) 34] [(59 55 -17 34) -17] [(-19 -99 -73 -46) -99] [(-88 -88 -74 -53) -88] [(-49 -19 66 43) -49] [(-33 -42 21 11) -42] [(-61 14 -5 -29) -61] [(81 33 -26 -23) -26] [(-66 -90 3 -92) -92] [(60 -40 -25 -34) -40] [(-60 -54 10 -33) -60] [(31 8 59 73) 8] [(16 -3 -79 -85) -85] [(89 -83 -98 -58) -98] [(70 61 68 71) 61] [(-67 61 62 5) -67] [(9 25 21 -48) -48] [(27 -27 -78 66) -78] [(-76 -17 59 58) -76] [(-37 -83 99 98) -83] [(34 -12 60 55) -12] [(74 -92 82 42) -92] [(-23 92 13 22) -23] [(-70 13 -47 36) -70] [(-47 14 -67 -39) -67] [(98 60 34 -18) -18] [(41 1 -81 -39) -81] [(86 16 -92 -10) -92] [(-81 50 82 29) -81])
uniform-addition-and-deletion-rate = 0.09
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[30 -65 30 30] -65]
Train Case:   6 | Input/Output: [[-43 35 35 35] -43]
Train Case:   7 | Input/Output: [[41 -45 41 41] -45]
Train Case:   8 | Input/Output: [[63 64 63 63] 63]
Train Case:   9 | Input/Output: [[-85 -85 -85 0] -85]
Train Case:  10 | Input/Output: [[81 81 42 81] 42]
Train Case:  11 | Input/Output: [[-50 -50 60 -50] -50]
Train Case:  12 | Input/Output: [[-68 -3 -68 -68] -68]
Train Case:  13 | Input/Output: [[-68 -60 -60 -60] -68]
Train Case:  14 | Input/Output: [[86 45 45 45] 45]
Train Case:  15 | Input/Output: [(8 8 8 8) 8]
Train Case:  16 | Input/Output: [(86 86 86 86) 86]
Train Case:  17 | Input/Output: [(-81 -81 -81 -81) -81]
Train Case:  18 | Input/Output: [(-100 -100 -100 -100) -100]
Train Case:  19 | Input/Output: [(-10 -10 -10 -10) -10]
Train Case:  20 | Input/Output: [(18 73 52 78) 18]
Train Case:  21 | Input/Output: [(67 97 49 8) 8]
Train Case:  22 | Input/Output: [(89 91 75 2) 2]
Train Case:  23 | Input/Output: [(99 98 96 27) 27]
Train Case:  24 | Input/Output: [(97 4 86 37) 4]
Train Case:  25 | Input/Output: [(32 4 62 26) 4]
Train Case:  26 | Input/Output: [(53 0 16 96) 0]
Train Case:  27 | Input/Output: [(49 96 95 4) 4]
Train Case:  28 | Input/Output: [(27 21 38 16) 16]
Train Case:  29 | Input/Output: [(53 40 88 7) 7]
Train Case:  30 | Input/Output: [(0 18 54 67) 0]
Train Case:  31 | Input/Output: [(24 100 4 100) 4]
Train Case:  32 | Input/Output: [(7 6 63 47) 6]
Train Case:  33 | Input/Output: [(59 18 92 35) 18]
Train Case:  34 | Input/Output: [(22 38 16 46) 16]
Train Case:  35 | Input/Output: [(55 34 62 99) 34]
Train Case:  36 | Input/Output: [(69 3 66 90) 3]
Train Case:  37 | Input/Output: [(48 21 31 87) 21]
Train Case:  38 | Input/Output: [(38 79 6 33) 6]
Train Case:  39 | Input/Output: [(34 7 62 37) 7]
Train Case:  40 | Input/Output: [(-55 -54 58 62) -55]
Train Case:  41 | Input/Output: [(-16 50 -84 -9) -84]
Train Case:  42 | Input/Output: [(32 -35 -96 -87) -96]
Train Case:  43 | Input/Output: [(95 -87 -28 -36) -87]
Train Case:  44 | Input/Output: [(-70 -64 76 34) -70]
Train Case:  45 | Input/Output: [(78 -11 73 -88) -88]
Train Case:  46 | Input/Output: [(-51 -58 -5 66) -58]
Train Case:  47 | Input/Output: [(-25 38 24 2) -25]
Train Case:  48 | Input/Output: [(-32 91 -27 -62) -62]
Train Case:  49 | Input/Output: [(100 33 66 -96) -96]
Train Case:  50 | Input/Output: [(86 -88 20 91) -88]
Train Case:  51 | Input/Output: [(67 52 -71 35) -71]
Train Case:  52 | Input/Output: [(70 51 -88 32) -88]
Train Case:  53 | Input/Output: [(4 -74 95 95) -74]
Train Case:  54 | Input/Output: [(36 87 -57 60) -57]
Train Case:  55 | Input/Output: [(48 -7 8 -58) -58]
Train Case:  56 | Input/Output: [(-63 -29 -93 70) -93]
Train Case:  57 | Input/Output: [(-70 -11 95 35) -70]
Train Case:  58 | Input/Output: [(76 34 48 72) 34]
Train Case:  59 | Input/Output: [(70 12 -31 87) -31]
Train Case:  60 | Input/Output: [(-47 53 -79 23) -79]
Train Case:  61 | Input/Output: [(-55 -45 -73 -24) -73]
Train Case:  62 | Input/Output: [(2 -40 -15 -61) -61]
Train Case:  63 | Input/Output: [(-2 26 47 99) -2]
Train Case:  64 | Input/Output: [(31 -61 -90 -35) -90]
Train Case:  65 | Input/Output: [(53 -25 -71 8) -71]
Train Case:  66 | Input/Output: [(23 -74 -71 -46) -74]
Train Case:  67 | Input/Output: [(58 -26 -58 39) -58]
Train Case:  68 | Input/Output: [(-19 -74 -68 25) -74]
Train Case:  69 | Input/Output: [(-52 -24 -75 86) -75]
Train Case:  70 | Input/Output: [(-11 92 -12 3) -12]
Train Case:  71 | Input/Output: [(34 53 56 79) 34]
Train Case:  72 | Input/Output: [(59 55 -17 34) -17]
Train Case:  73 | Input/Output: [(-19 -99 -73 -46) -99]
Train Case:  74 | Input/Output: [(-88 -88 -74 -53) -88]
Train Case:  75 | Input/Output: [(-49 -19 66 43) -49]
Train Case:  76 | Input/Output: [(-33 -42 21 11) -42]
Train Case:  77 | Input/Output: [(-61 14 -5 -29) -61]
Train Case:  78 | Input/Output: [(81 33 -26 -23) -26]
Train Case:  79 | Input/Output: [(-66 -90 3 -92) -92]
Train Case:  80 | Input/Output: [(60 -40 -25 -34) -40]
Train Case:  81 | Input/Output: [(-60 -54 10 -33) -60]
Train Case:  82 | Input/Output: [(31 8 59 73) 8]
Train Case:  83 | Input/Output: [(16 -3 -79 -85) -85]
Train Case:  84 | Input/Output: [(89 -83 -98 -58) -98]
Train Case:  85 | Input/Output: [(70 61 68 71) 61]
Train Case:  86 | Input/Output: [(-67 61 62 5) -67]
Train Case:  87 | Input/Output: [(9 25 21 -48) -48]
Train Case:  88 | Input/Output: [(27 -27 -78 66) -78]
Train Case:  89 | Input/Output: [(-76 -17 59 58) -76]
Train Case:  90 | Input/Output: [(-37 -83 99 98) -83]
Train Case:  91 | Input/Output: [(34 -12 60 55) -12]
Train Case:  92 | Input/Output: [(74 -92 82 42) -92]
Train Case:  93 | Input/Output: [(-23 92 13 22) -23]
Train Case:  94 | Input/Output: [(-70 13 -47 36) -70]
Train Case:  95 | Input/Output: [(-47 14 -67 -39) -67]
Train Case:  96 | Input/Output: [(98 60 34 -18) -18]
Train Case:  97 | Input/Output: [(41 1 -81 -39) -81]
Train Case:  98 | Input/Output: [(86 16 -92 -10) -92]
Train Case:  99 | Input/Output: [(-81 50 82 29) -81]
Test Case:   0 | Input/Output: [[81 24 24 24] 24]
Test Case:   1 | Input/Output: [[84 84 84 -22] -22]
Test Case:   2 | Input/Output: [[52 52 52 81] 52]
Test Case:   3 | Input/Output: [[33 45 45 45] 33]
Test Case:   4 | Input/Output: [[-1 9 -1 -1] -1]
Test Case:   5 | Input/Output: [[-11 55 -11 -11] -11]
Test Case:   6 | Input/Output: [[-27 -27 -27 37] -27]
Test Case:   7 | Input/Output: [[-6 -6 -20 -6] -20]
Test Case:   8 | Input/Output: [[96 -45 96 96] -45]
Test Case:   9 | Input/Output: [[-64 -64 -64 -9] -64]
Test Case:  10 | Input/Output: [[-21 -18 -21 -21] -21]
Test Case:  11 | Input/Output: [[-66 -2 -66 -66] -66]
Test Case:  12 | Input/Output: [[-80 -80 -80 -8] -80]
Test Case:  13 | Input/Output: [[63 43 63 63] 43]
Test Case:  14 | Input/Output: [[-35 50 50 50] -35]
Test Case:  15 | Input/Output: [[28 80 28 28] 28]
Test Case:  16 | Input/Output: [[25 -63 -63 -63] -63]
Test Case:  17 | Input/Output: [[-44 -44 -44 93] -44]
Test Case:  18 | Input/Output: [[-62 84 -62 -62] -62]
Test Case:  19 | Input/Output: [[34 -77 -77 -77] -77]
Test Case:  20 | Input/Output: [[-51 -82 -82 -82] -82]
Test Case:  21 | Input/Output: [[36 66 66 66] 36]
Test Case:  22 | Input/Output: [[-17 17 -17 -17] -17]
Test Case:  23 | Input/Output: [[-89 -89 -89 -92] -92]
Test Case:  24 | Input/Output: [[22 -15 -15 -15] -15]
Test Case:  25 | Input/Output: [[44 44 66 44] 44]
Test Case:  26 | Input/Output: [[0 0 95 0] 0]
Test Case:  27 | Input/Output: [[-52 -64 -64 -64] -64]
Test Case:  28 | Input/Output: [[24 24 16 24] 16]
Test Case:  29 | Input/Output: [[39 -18 39 39] -18]
Test Case:  30 | Input/Output: [[50 50 50 51] 50]
Test Case:  31 | Input/Output: [[88 88 88 -34] -34]
Test Case:  32 | Input/Output: [[-24 -20 -20 -20] -24]
Test Case:  33 | Input/Output: [[-64 -64 -64 -28] -64]
Test Case:  34 | Input/Output: [[21 -90 -90 -90] -90]
Test Case:  35 | Input/Output: [[96 -59 -59 -59] -59]
Test Case:  36 | Input/Output: [[85 14 14 14] 14]
Test Case:  37 | Input/Output: [[83 83 -85 83] -85]
Test Case:  38 | Input/Output: [[-88 -88 -88 35] -88]
Test Case:  39 | Input/Output: [[-51 -51 62 -51] -51]
Test Case:  40 | Input/Output: [[-75 66 -75 -75] -75]
Test Case:  41 | Input/Output: [[42 42 42 98] 42]
Test Case:  42 | Input/Output: [[-78 -32 -32 -32] -78]
Test Case:  43 | Input/Output: [[84 84 84 8] 8]
Test Case:  44 | Input/Output: [[-49 -37 -49 -49] -49]
Test Case:  45 | Input/Output: [[-1 -1 -1 1] -1]
Test Case:  46 | Input/Output: [[79 5 79 79] 5]
Test Case:  47 | Input/Output: [[-59 -31 -59 -59] -59]
Test Case:  48 | Input/Output: [[29 -44 29 29] -44]
Test Case:  49 | Input/Output: [[-91 -67 -67 -67] -91]
Test Case:  50 | Input/Output: [[-80 -40 -80 -80] -80]
Test Case:  51 | Input/Output: [[49 49 -34 49] -34]
Test Case:  52 | Input/Output: [[7 99 99 99] 7]
Test Case:  53 | Input/Output: [[-46 -93 -46 -46] -93]
Test Case:  54 | Input/Output: [[-62 -62 -62 29] -62]
Test Case:  55 | Input/Output: [[14 14 78 14] 14]
Test Case:  56 | Input/Output: [[15 15 15 -11] -11]
Test Case:  57 | Input/Output: [[59 59 59 -18] -18]
Test Case:  58 | Input/Output: [[90 -23 90 90] -23]
Test Case:  59 | Input/Output: [[-8 -8 -11 -8] -11]
Test Case:  60 | Input/Output: [[-23 -48 -23 -23] -48]
Test Case:  61 | Input/Output: [[-100 -100 -100 75] -100]
Test Case:  62 | Input/Output: [[30 -16 -16 -16] -16]
Test Case:  63 | Input/Output: [[83 69 69 69] 69]
Test Case:  64 | Input/Output: [[55 33 33 33] 33]
Test Case:  65 | Input/Output: [[4 4 87 4] 4]
Test Case:  66 | Input/Output: [[-67 -13 -13 -13] -67]
Test Case:  67 | Input/Output: [[23 -87 23 23] -87]
Test Case:  68 | Input/Output: [[46 20 20 20] 20]
Test Case:  69 | Input/Output: [[59 59 75 59] 59]
Test Case:  70 | Input/Output: [[10 10 18 10] 10]
Test Case:  71 | Input/Output: [[-27 -27 -12 -27] -27]
Test Case:  72 | Input/Output: [[-50 -50 -50 4] -50]
Test Case:  73 | Input/Output: [[70 -3 -3 -3] -3]
Test Case:  74 | Input/Output: [[-45 3 3 3] -45]
Test Case:  75 | Input/Output: [[-30 -30 -30 -75] -75]
Test Case:  76 | Input/Output: [[97 97 97 -24] -24]
Test Case:  77 | Input/Output: [[25 25 25 32] 25]
Test Case:  78 | Input/Output: [[51 51 51 25] 25]
Test Case:  79 | Input/Output: [[100 100 0 100] 0]
Test Case:  80 | Input/Output: [[100 100 100 -39] -39]
Test Case:  81 | Input/Output: [[64 -43 -43 -43] -43]
Test Case:  82 | Input/Output: [[33 -60 -60 -60] -60]
Test Case:  83 | Input/Output: [[-87 -87 -74 -87] -87]
Test Case:  84 | Input/Output: [[-30 -30 69 -30] -30]
Test Case:  85 | Input/Output: [[29 29 29 -32] -32]
Test Case:  86 | Input/Output: [[84 84 99 84] 84]
Test Case:  87 | Input/Output: [[-25 -25 -25 82] -25]
Test Case:  88 | Input/Output: [[-44 43 -44 -44] -44]
Test Case:  89 | Input/Output: [[-48 45 -48 -48] -48]
Test Case:  90 | Input/Output: [[84 -5 84 84] -5]
Test Case:  91 | Input/Output: [[-18 83 -18 -18] -18]
Test Case:  92 | Input/Output: [[-78 -78 50 -78] -78]
Test Case:  93 | Input/Output: [[5 5 5 -88] -88]
Test Case:  94 | Input/Output: [[-6 -31 -31 -31] -31]
Test Case:  95 | Input/Output: [[44 44 -76 44] -76]
Test Case:  96 | Input/Output: [[98 98 -69 98] -69]
Test Case:  97 | Input/Output: [[54 54 -76 54] -76]
Test Case:  98 | Input/Output: [[14 -20 -20 -20] -20]
Test Case:  99 | Input/Output: [[51 -34 51 51] -34]
Test Case: 100 | Input/Output: [(-44 -44 -44 -44) -44]
Test Case: 101 | Input/Output: [(-55 -55 -55 -55) -55]
Test Case: 102 | Input/Output: [(-8 -8 -8 -8) -8]
Test Case: 103 | Input/Output: [(59 59 59 59) 59]
Test Case: 104 | Input/Output: [(-48 -48 -48 -48) -48]
Test Case: 105 | Input/Output: [(-98 -98 -98 -98) -98]
Test Case: 106 | Input/Output: [(-89 -89 -89 -89) -89]
Test Case: 107 | Input/Output: [(11 11 11 11) 11]
Test Case: 108 | Input/Output: [(88 88 88 88) 88]
Test Case: 109 | Input/Output: [(-73 -73 -73 -73) -73]
Test Case: 110 | Input/Output: [(42 42 42 42) 42]
Test Case: 111 | Input/Output: [(-75 -75 -75 -75) -75]
Test Case: 112 | Input/Output: [(84 84 84 84) 84]
Test Case: 113 | Input/Output: [(-12 -12 -12 -12) -12]
Test Case: 114 | Input/Output: [(-84 -84 -84 -84) -84]
Test Case: 115 | Input/Output: [(-18 -18 -18 -18) -18]
Test Case: 116 | Input/Output: [(60 60 60 60) 60]
Test Case: 117 | Input/Output: [(85 85 85 85) 85]
Test Case: 118 | Input/Output: [(5 5 5 5) 5]
Test Case: 119 | Input/Output: [(-35 -35 -35 -35) -35]
Test Case: 120 | Input/Output: [(28 28 28 28) 28]
Test Case: 121 | Input/Output: [(82 82 82 82) 82]
Test Case: 122 | Input/Output: [(-10 -10 -10 -10) -10]
Test Case: 123 | Input/Output: [(77 77 77 77) 77]
Test Case: 124 | Input/Output: [(90 90 90 90) 90]
Test Case: 125 | Input/Output: [(84 84 84 84) 84]
Test Case: 126 | Input/Output: [(-84 -84 -84 -84) -84]
Test Case: 127 | Input/Output: [(94 94 94 94) 94]
Test Case: 128 | Input/Output: [(43 43 43 43) 43]
Test Case: 129 | Input/Output: [(-87 -87 -87 -87) -87]
Test Case: 130 | Input/Output: [(-20 -20 -20 -20) -20]
Test Case: 131 | Input/Output: [(2 2 2 2) 2]
Test Case: 132 | Input/Output: [(-73 -73 -73 -73) -73]
Test Case: 133 | Input/Output: [(19 19 19 19) 19]
Test Case: 134 | Input/Output: [(61 61 61 61) 61]
Test Case: 135 | Input/Output: [(31 31 31 31) 31]
Test Case: 136 | Input/Output: [(70 70 70 70) 70]
Test Case: 137 | Input/Output: [(50 50 50 50) 50]
Test Case: 138 | Input/Output: [(75 75 75 75) 75]
Test Case: 139 | Input/Output: [(16 16 16 16) 16]
Test Case: 140 | Input/Output: [(94 94 94 94) 94]
Test Case: 141 | Input/Output: [(49 49 49 49) 49]
Test Case: 142 | Input/Output: [(60 60 60 60) 60]
Test Case: 143 | Input/Output: [(-37 -37 -37 -37) -37]
Test Case: 144 | Input/Output: [(-66 -66 -66 -66) -66]
Test Case: 145 | Input/Output: [(-48 -48 -48 -48) -48]
Test Case: 146 | Input/Output: [(-13 -13 -13 -13) -13]
Test Case: 147 | Input/Output: [(69 69 69 69) 69]
Test Case: 148 | Input/Output: [(37 37 37 37) 37]
Test Case: 149 | Input/Output: [(98 98 98 98) 98]
Test Case: 150 | Input/Output: [(59 59 59 59) 59]
Test Case: 151 | Input/Output: [(-78 -78 -78 -78) -78]
Test Case: 152 | Input/Output: [(61 61 61 61) 61]
Test Case: 153 | Input/Output: [(99 99 99 99) 99]
Test Case: 154 | Input/Output: [(-15 -15 -15 -15) -15]
Test Case: 155 | Input/Output: [(84 84 84 84) 84]
Test Case: 156 | Input/Output: [(-18 -18 -18 -18) -18]
Test Case: 157 | Input/Output: [(-44 -44 -44 -44) -44]
Test Case: 158 | Input/Output: [(-53 -53 -53 -53) -53]
Test Case: 159 | Input/Output: [(-18 -18 -18 -18) -18]
Test Case: 160 | Input/Output: [(45 45 45 45) 45]
Test Case: 161 | Input/Output: [(68 68 68 68) 68]
Test Case: 162 | Input/Output: [(13 13 13 13) 13]
Test Case: 163 | Input/Output: [(-99 -99 -99 -99) -99]
Test Case: 164 | Input/Output: [(-96 -96 -96 -96) -96]
Test Case: 165 | Input/Output: [(-9 -9 -9 -9) -9]
Test Case: 166 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 167 | Input/Output: [(-18 -18 -18 -18) -18]
Test Case: 168 | Input/Output: [(12 12 12 12) 12]
Test Case: 169 | Input/Output: [(99 99 99 99) 99]
Test Case: 170 | Input/Output: [(7 7 7 7) 7]
Test Case: 171 | Input/Output: [(-84 -84 -84 -84) -84]
Test Case: 172 | Input/Output: [(-90 -90 -90 -90) -90]
Test Case: 173 | Input/Output: [(98 98 98 98) 98]
Test Case: 174 | Input/Output: [(22 22 22 22) 22]
Test Case: 175 | Input/Output: [(-35 -35 -35 -35) -35]
Test Case: 176 | Input/Output: [(43 43 43 43) 43]
Test Case: 177 | Input/Output: [(-8 -8 -8 -8) -8]
Test Case: 178 | Input/Output: [(76 76 76 76) 76]
Test Case: 179 | Input/Output: [(-40 -40 -40 -40) -40]
Test Case: 180 | Input/Output: [(93 93 93 93) 93]
Test Case: 181 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 182 | Input/Output: [(71 71 71 71) 71]
Test Case: 183 | Input/Output: [(-73 -73 -73 -73) -73]
Test Case: 184 | Input/Output: [(-85 -85 -85 -85) -85]
Test Case: 185 | Input/Output: [(17 17 17 17) 17]
Test Case: 186 | Input/Output: [(100 100 100 100) 100]
Test Case: 187 | Input/Output: [(10 10 10 10) 10]
Test Case: 188 | Input/Output: [(-11 -11 -11 -11) -11]
Test Case: 189 | Input/Output: [(-31 -31 -31 -31) -31]
Test Case: 190 | Input/Output: [(78 78 78 78) 78]
Test Case: 191 | Input/Output: [(-92 -92 -92 -92) -92]
Test Case: 192 | Input/Output: [(-18 -18 -18 -18) -18]
Test Case: 193 | Input/Output: [(99 99 99 99) 99]
Test Case: 194 | Input/Output: [(-87 -87 -87 -87) -87]
Test Case: 195 | Input/Output: [(-28 -28 -28 -28) -28]
Test Case: 196 | Input/Output: [(18 18 18 18) 18]
Test Case: 197 | Input/Output: [(47 47 47 47) 47]
Test Case: 198 | Input/Output: [(67 67 67 67) 67]
Test Case: 199 | Input/Output: [(87 87 87 87) 87]
Test Case: 200 | Input/Output: [(12 19 47 61) 12]
Test Case: 201 | Input/Output: [(40 91 100 63) 40]
Test Case: 202 | Input/Output: [(74 56 0 87) 0]
Test Case: 203 | Input/Output: [(43 96 54 58) 43]
Test Case: 204 | Input/Output: [(13 18 7 97) 7]
Test Case: 205 | Input/Output: [(30 39 100 93) 30]
Test Case: 206 | Input/Output: [(21 59 88 99) 21]
Test Case: 207 | Input/Output: [(54 59 48 11) 11]
Test Case: 208 | Input/Output: [(73 27 37 47) 27]
Test Case: 209 | Input/Output: [(25 79 46 35) 25]
Test Case: 210 | Input/Output: [(75 58 68 41) 41]
Test Case: 211 | Input/Output: [(12 72 26 74) 12]
Test Case: 212 | Input/Output: [(76 48 76 70) 48]
Test Case: 213 | Input/Output: [(15 64 71 61) 15]
Test Case: 214 | Input/Output: [(93 53 1 87) 1]
Test Case: 215 | Input/Output: [(9 85 99 49) 9]
Test Case: 216 | Input/Output: [(66 12 58 98) 12]
Test Case: 217 | Input/Output: [(96 85 62 90) 62]
Test Case: 218 | Input/Output: [(0 54 7 1) 0]
Test Case: 219 | Input/Output: [(58 35 31 39) 31]
Test Case: 220 | Input/Output: [(79 1 11 30) 1]
Test Case: 221 | Input/Output: [(82 62 58 95) 58]
Test Case: 222 | Input/Output: [(8 14 61 99) 8]
Test Case: 223 | Input/Output: [(84 68 7 55) 7]
Test Case: 224 | Input/Output: [(12 35 28 15) 12]
Test Case: 225 | Input/Output: [(25 11 87 65) 11]
Test Case: 226 | Input/Output: [(69 88 42 7) 7]
Test Case: 227 | Input/Output: [(99 40 88 2) 2]
Test Case: 228 | Input/Output: [(16 81 5 57) 5]
Test Case: 229 | Input/Output: [(9 59 9 16) 9]
Test Case: 230 | Input/Output: [(37 93 68 8) 8]
Test Case: 231 | Input/Output: [(16 95 23 69) 16]
Test Case: 232 | Input/Output: [(14 42 22 26) 14]
Test Case: 233 | Input/Output: [(58 1 50 44) 1]
Test Case: 234 | Input/Output: [(77 21 35 47) 21]
Test Case: 235 | Input/Output: [(36 28 7 0) 0]
Test Case: 236 | Input/Output: [(98 22 42 21) 21]
Test Case: 237 | Input/Output: [(12 19 36 73) 12]
Test Case: 238 | Input/Output: [(75 72 25 80) 25]
Test Case: 239 | Input/Output: [(11 29 4 38) 4]
Test Case: 240 | Input/Output: [(70 14 95 2) 2]
Test Case: 241 | Input/Output: [(37 4 41 23) 4]
Test Case: 242 | Input/Output: [(7 12 20 44) 7]
Test Case: 243 | Input/Output: [(26 23 6 89) 6]
Test Case: 244 | Input/Output: [(70 75 56 20) 20]
Test Case: 245 | Input/Output: [(81 4 79 6) 4]
Test Case: 246 | Input/Output: [(20 44 13 0) 0]
Test Case: 247 | Input/Output: [(56 80 44 49) 44]
Test Case: 248 | Input/Output: [(76 71 40 71) 40]
Test Case: 249 | Input/Output: [(29 40 36 44) 29]
Test Case: 250 | Input/Output: [(65 82 0 78) 0]
Test Case: 251 | Input/Output: [(15 25 89 27) 15]
Test Case: 252 | Input/Output: [(4 48 85 50) 4]
Test Case: 253 | Input/Output: [(80 9 48 3) 3]
Test Case: 254 | Input/Output: [(9 37 73 71) 9]
Test Case: 255 | Input/Output: [(6 61 30 41) 6]
Test Case: 256 | Input/Output: [(36 91 99 81) 36]
Test Case: 257 | Input/Output: [(18 77 80 97) 18]
Test Case: 258 | Input/Output: [(85 1 83 88) 1]
Test Case: 259 | Input/Output: [(53 75 60 36) 36]
Test Case: 260 | Input/Output: [(66 79 72 14) 14]
Test Case: 261 | Input/Output: [(35 9 88 48) 9]
Test Case: 262 | Input/Output: [(56 48 62 69) 48]
Test Case: 263 | Input/Output: [(30 47 49 58) 30]
Test Case: 264 | Input/Output: [(43 66 8 28) 8]
Test Case: 265 | Input/Output: [(43 24 95 21) 21]
Test Case: 266 | Input/Output: [(54 79 18 100) 18]
Test Case: 267 | Input/Output: [(27 78 17 64) 17]
Test Case: 268 | Input/Output: [(25 12 76 32) 12]
Test Case: 269 | Input/Output: [(85 20 32 51) 20]
Test Case: 270 | Input/Output: [(29 83 63 52) 29]
Test Case: 271 | Input/Output: [(21 61 10 93) 10]
Test Case: 272 | Input/Output: [(84 40 40 46) 40]
Test Case: 273 | Input/Output: [(44 66 93 28) 28]
Test Case: 274 | Input/Output: [(12 13 10 90) 10]
Test Case: 275 | Input/Output: [(38 20 4 63) 4]
Test Case: 276 | Input/Output: [(35 3 90 77) 3]
Test Case: 277 | Input/Output: [(36 94 79 84) 36]
Test Case: 278 | Input/Output: [(26 81 41 57) 26]
Test Case: 279 | Input/Output: [(95 74 0 94) 0]
Test Case: 280 | Input/Output: [(51 44 68 91) 44]
Test Case: 281 | Input/Output: [(27 6 16 52) 6]
Test Case: 282 | Input/Output: [(83 75 88 23) 23]
Test Case: 283 | Input/Output: [(85 12 90 7) 7]
Test Case: 284 | Input/Output: [(17 94 84 67) 17]
Test Case: 285 | Input/Output: [(17 91 68 66) 17]
Test Case: 286 | Input/Output: [(12 16 39 81) 12]
Test Case: 287 | Input/Output: [(77 33 25 88) 25]
Test Case: 288 | Input/Output: [(12 55 57 16) 12]
Test Case: 289 | Input/Output: [(92 58 38 66) 38]
Test Case: 290 | Input/Output: [(58 75 57 95) 57]
Test Case: 291 | Input/Output: [(62 3 80 93) 3]
Test Case: 292 | Input/Output: [(2 81 70 91) 2]
Test Case: 293 | Input/Output: [(15 42 62 81) 15]
Test Case: 294 | Input/Output: [(60 28 93 68) 28]
Test Case: 295 | Input/Output: [(47 34 98 76) 34]
Test Case: 296 | Input/Output: [(35 78 62 66) 35]
Test Case: 297 | Input/Output: [(44 75 1 0) 0]
Test Case: 298 | Input/Output: [(69 99 69 13) 13]
Test Case: 299 | Input/Output: [(49 19 66 6) 6]
Test Case: 300 | Input/Output: [(27 43 0 100) 0]
Test Case: 301 | Input/Output: [(74 2 58 96) 2]
Test Case: 302 | Input/Output: [(12 64 90 60) 12]
Test Case: 303 | Input/Output: [(67 73 35 99) 35]
Test Case: 304 | Input/Output: [(57 92 54 6) 6]
Test Case: 305 | Input/Output: [(29 57 39 47) 29]
Test Case: 306 | Input/Output: [(57 9 60 49) 9]
Test Case: 307 | Input/Output: [(11 77 66 73) 11]
Test Case: 308 | Input/Output: [(87 97 69 55) 55]
Test Case: 309 | Input/Output: [(57 79 41 34) 34]
Test Case: 310 | Input/Output: [(48 61 17 73) 17]
Test Case: 311 | Input/Output: [(40 0 9 94) 0]
Test Case: 312 | Input/Output: [(43 49 19 22) 19]
Test Case: 313 | Input/Output: [(77 68 23 33) 23]
Test Case: 314 | Input/Output: [(56 30 31 27) 27]
Test Case: 315 | Input/Output: [(68 50 64 13) 13]
Test Case: 316 | Input/Output: [(100 43 50 18) 18]
Test Case: 317 | Input/Output: [(89 53 43 48) 43]
Test Case: 318 | Input/Output: [(21 30 78 16) 16]
Test Case: 319 | Input/Output: [(12 80 67 26) 12]
Test Case: 320 | Input/Output: [(94 100 32 89) 32]
Test Case: 321 | Input/Output: [(30 14 43 82) 14]
Test Case: 322 | Input/Output: [(14 71 22 21) 14]
Test Case: 323 | Input/Output: [(26 34 18 45) 18]
Test Case: 324 | Input/Output: [(80 2 78 32) 2]
Test Case: 325 | Input/Output: [(62 53 89 44) 44]
Test Case: 326 | Input/Output: [(43 77 23 64) 23]
Test Case: 327 | Input/Output: [(51 42 89 1) 1]
Test Case: 328 | Input/Output: [(96 11 50 31) 11]
Test Case: 329 | Input/Output: [(43 18 88 42) 18]
Test Case: 330 | Input/Output: [(99 39 15 96) 15]
Test Case: 331 | Input/Output: [(8 53 3 74) 3]
Test Case: 332 | Input/Output: [(92 16 27 3) 3]
Test Case: 333 | Input/Output: [(78 76 54 50) 50]
Test Case: 334 | Input/Output: [(62 54 32 24) 24]
Test Case: 335 | Input/Output: [(78 81 79 88) 78]
Test Case: 336 | Input/Output: [(39 70 31 62) 31]
Test Case: 337 | Input/Output: [(15 63 52 53) 15]
Test Case: 338 | Input/Output: [(45 29 42 98) 29]
Test Case: 339 | Input/Output: [(29 87 53 63) 29]
Test Case: 340 | Input/Output: [(11 97 31 26) 11]
Test Case: 341 | Input/Output: [(1 55 90 9) 1]
Test Case: 342 | Input/Output: [(93 9 98 79) 9]
Test Case: 343 | Input/Output: [(0 98 97 82) 0]
Test Case: 344 | Input/Output: [(75 14 29 70) 14]
Test Case: 345 | Input/Output: [(9 54 95 26) 9]
Test Case: 346 | Input/Output: [(97 48 77 58) 48]
Test Case: 347 | Input/Output: [(64 32 82 37) 32]
Test Case: 348 | Input/Output: [(2 68 4 13) 2]
Test Case: 349 | Input/Output: [(58 27 30 1) 1]
Test Case: 350 | Input/Output: [(76 72 12 21) 12]
Test Case: 351 | Input/Output: [(51 8 15 72) 8]
Test Case: 352 | Input/Output: [(45 41 78 84) 41]
Test Case: 353 | Input/Output: [(100 63 98 61) 61]
Test Case: 354 | Input/Output: [(22 89 42 95) 22]
Test Case: 355 | Input/Output: [(51 72 96 65) 51]
Test Case: 356 | Input/Output: [(48 10 71 41) 10]
Test Case: 357 | Input/Output: [(82 39 65 80) 39]
Test Case: 358 | Input/Output: [(58 93 70 50) 50]
Test Case: 359 | Input/Output: [(50 18 77 45) 18]
Test Case: 360 | Input/Output: [(30 56 87 82) 30]
Test Case: 361 | Input/Output: [(69 84 54 64) 54]
Test Case: 362 | Input/Output: [(49 99 54 100) 49]
Test Case: 363 | Input/Output: [(86 17 13 64) 13]
Test Case: 364 | Input/Output: [(32 10 88 29) 10]
Test Case: 365 | Input/Output: [(53 21 96 66) 21]
Test Case: 366 | Input/Output: [(32 27 14 46) 14]
Test Case: 367 | Input/Output: [(11 99 27 56) 11]
Test Case: 368 | Input/Output: [(44 66 55 97) 44]
Test Case: 369 | Input/Output: [(32 71 9 32) 9]
Test Case: 370 | Input/Output: [(45 52 56 1) 1]
Test Case: 371 | Input/Output: [(31 41 30 83) 30]
Test Case: 372 | Input/Output: [(25 43 69 46) 25]
Test Case: 373 | Input/Output: [(8 96 61 89) 8]
Test Case: 374 | Input/Output: [(76 81 62 62) 62]
Test Case: 375 | Input/Output: [(74 37 15 77) 15]
Test Case: 376 | Input/Output: [(3 86 87 87) 3]
Test Case: 377 | Input/Output: [(59 63 68 21) 21]
Test Case: 378 | Input/Output: [(27 76 60 76) 27]
Test Case: 379 | Input/Output: [(22 30 29 57) 22]
Test Case: 380 | Input/Output: [(9 6 37 6) 6]
Test Case: 381 | Input/Output: [(14 92 52 63) 14]
Test Case: 382 | Input/Output: [(99 98 46 17) 17]
Test Case: 383 | Input/Output: [(17 46 50 77) 17]
Test Case: 384 | Input/Output: [(4 3 5 59) 3]
Test Case: 385 | Input/Output: [(75 46 33 52) 33]
Test Case: 386 | Input/Output: [(37 5 97 6) 5]
Test Case: 387 | Input/Output: [(15 84 92 71) 15]
Test Case: 388 | Input/Output: [(49 91 52 12) 12]
Test Case: 389 | Input/Output: [(94 98 78 35) 35]
Test Case: 390 | Input/Output: [(32 70 63 18) 18]
Test Case: 391 | Input/Output: [(18 47 90 0) 0]
Test Case: 392 | Input/Output: [(86 50 18 54) 18]
Test Case: 393 | Input/Output: [(86 66 8 58) 8]
Test Case: 394 | Input/Output: [(21 82 9 20) 9]
Test Case: 395 | Input/Output: [(47 61 79 58) 47]
Test Case: 396 | Input/Output: [(59 89 70 62) 59]
Test Case: 397 | Input/Output: [(46 69 38 50) 38]
Test Case: 398 | Input/Output: [(16 14 21 26) 14]
Test Case: 399 | Input/Output: [(51 24 95 37) 24]
Test Case: 400 | Input/Output: [(-85 -53 0 4) -85]
Test Case: 401 | Input/Output: [(-67 73 14 -68) -68]
Test Case: 402 | Input/Output: [(76 -6 -7 -86) -86]
Test Case: 403 | Input/Output: [(66 -5 49 61) -5]
Test Case: 404 | Input/Output: [(-18 -56 53 4) -56]
Test Case: 405 | Input/Output: [(72 21 -42 42) -42]
Test Case: 406 | Input/Output: [(-49 -40 23 -47) -49]
Test Case: 407 | Input/Output: [(-16 82 8 -33) -33]
Test Case: 408 | Input/Output: [(-85 -64 50 -81) -85]
Test Case: 409 | Input/Output: [(15 71 97 76) 15]
Test Case: 410 | Input/Output: [(9 -90 91 89) -90]
Test Case: 411 | Input/Output: [(42 -70 -27 91) -70]
Test Case: 412 | Input/Output: [(-92 55 -57 61) -92]
Test Case: 413 | Input/Output: [(28 -19 -46 32) -46]
Test Case: 414 | Input/Output: [(7 27 -6 -56) -56]
Test Case: 415 | Input/Output: [(12 45 90 -51) -51]
Test Case: 416 | Input/Output: [(-71 -20 71 51) -71]
Test Case: 417 | Input/Output: [(9 -11 40 -50) -50]
Test Case: 418 | Input/Output: [(-100 -30 -99 27) -100]
Test Case: 419 | Input/Output: [(74 -79 30 7) -79]
Test Case: 420 | Input/Output: [(9 -30 35 5) -30]
Test Case: 421 | Input/Output: [(-31 -38 64 -26) -38]
Test Case: 422 | Input/Output: [(-57 -67 88 37) -67]
Test Case: 423 | Input/Output: [(77 22 -70 64) -70]
Test Case: 424 | Input/Output: [(64 -74 -87 36) -87]
Test Case: 425 | Input/Output: [(58 11 94 -26) -26]
Test Case: 426 | Input/Output: [(-60 -48 87 58) -60]
Test Case: 427 | Input/Output: [(67 65 -69 -71) -71]
Test Case: 428 | Input/Output: [(-86 -80 -18 -22) -86]
Test Case: 429 | Input/Output: [(35 43 -33 67) -33]
Test Case: 430 | Input/Output: [(16 -56 95 4) -56]
Test Case: 431 | Input/Output: [(-91 12 -49 10) -91]
Test Case: 432 | Input/Output: [(-37 -84 44 65) -84]
Test Case: 433 | Input/Output: [(-71 -51 -69 24) -71]
Test Case: 434 | Input/Output: [(6 -89 50 31) -89]
Test Case: 435 | Input/Output: [(94 -88 -68 -64) -88]
Test Case: 436 | Input/Output: [(-78 -86 -1 -90) -90]
Test Case: 437 | Input/Output: [(42 -85 60 59) -85]
Test Case: 438 | Input/Output: [(27 32 65 1) 1]
Test Case: 439 | Input/Output: [(44 53 31 93) 31]
Test Case: 440 | Input/Output: [(36 -21 77 18) -21]
Test Case: 441 | Input/Output: [(-46 40 21 34) -46]
Test Case: 442 | Input/Output: [(62 -94 -77 -97) -97]
Test Case: 443 | Input/Output: [(94 42 44 52) 42]
Test Case: 444 | Input/Output: [(64 50 -86 -55) -86]
Test Case: 445 | Input/Output: [(-96 2 80 70) -96]
Test Case: 446 | Input/Output: [(83 -3 18 69) -3]
Test Case: 447 | Input/Output: [(-34 -7 14 17) -34]
Test Case: 448 | Input/Output: [(51 -41 -3 25) -41]
Test Case: 449 | Input/Output: [(-59 11 18 31) -59]
Test Case: 450 | Input/Output: [(38 58 -97 77) -97]
Test Case: 451 | Input/Output: [(80 -8 58 41) -8]
Test Case: 452 | Input/Output: [(-12 41 -91 58) -91]
Test Case: 453 | Input/Output: [(-4 -59 -87 -38) -87]
Test Case: 454 | Input/Output: [(90 -100 -96 81) -100]
Test Case: 455 | Input/Output: [(-26 87 35 10) -26]
Test Case: 456 | Input/Output: [(14 -8 52 -79) -79]
Test Case: 457 | Input/Output: [(29 81 -69 57) -69]
Test Case: 458 | Input/Output: [(98 75 67 -88) -88]
Test Case: 459 | Input/Output: [(21 -62 -95 94) -95]
Test Case: 460 | Input/Output: [(99 80 -48 -41) -48]
Test Case: 461 | Input/Output: [(56 -71 67 -73) -73]
Test Case: 462 | Input/Output: [(86 -48 -48 -94) -94]
Test Case: 463 | Input/Output: [(-39 -39 10 39) -39]
Test Case: 464 | Input/Output: [(69 63 66 -26) -26]
Test Case: 465 | Input/Output: [(-45 -97 24 -65) -97]
Test Case: 466 | Input/Output: [(30 -49 6 71) -49]
Test Case: 467 | Input/Output: [(-3 88 99 -77) -77]
Test Case: 468 | Input/Output: [(-82 79 77 10) -82]
Test Case: 469 | Input/Output: [(47 -50 9 56) -50]
Test Case: 470 | Input/Output: [(29 6 -19 97) -19]
Test Case: 471 | Input/Output: [(90 -92 -70 47) -92]
Test Case: 472 | Input/Output: [(65 62 26 7) 7]
Test Case: 473 | Input/Output: [(-48 17 -51 91) -51]
Test Case: 474 | Input/Output: [(97 -96 -94 -39) -96]
Test Case: 475 | Input/Output: [(-20 46 99 54) -20]
Test Case: 476 | Input/Output: [(-91 73 -1 16) -91]
Test Case: 477 | Input/Output: [(-95 99 42 -23) -95]
Test Case: 478 | Input/Output: [(44 70 -27 42) -27]
Test Case: 479 | Input/Output: [(-42 -11 -85 -91) -91]
Test Case: 480 | Input/Output: [(24 -29 57 64) -29]
Test Case: 481 | Input/Output: [(-78 -78 100 25) -78]
Test Case: 482 | Input/Output: [(-1 -15 3 43) -15]
Test Case: 483 | Input/Output: [(-24 75 -82 -34) -82]
Test Case: 484 | Input/Output: [(-83 14 31 -24) -83]
Test Case: 485 | Input/Output: [(-38 -72 82 -51) -72]
Test Case: 486 | Input/Output: [(82 -2 -90 -42) -90]
Test Case: 487 | Input/Output: [(90 92 31 -43) -43]
Test Case: 488 | Input/Output: [(-86 69 -38 -93) -93]
Test Case: 489 | Input/Output: [(-31 6 28 -5) -31]
Test Case: 490 | Input/Output: [(96 68 -36 -89) -89]
Test Case: 491 | Input/Output: [(-58 30 -100 16) -100]
Test Case: 492 | Input/Output: [(-80 -96 -93 31) -96]
Test Case: 493 | Input/Output: [(38 96 84 -76) -76]
Test Case: 494 | Input/Output: [(-56 77 -100 55) -100]
Test Case: 495 | Input/Output: [(-4 -19 -23 -55) -55]
Test Case: 496 | Input/Output: [(-100 -28 -28 -13) -100]
Test Case: 497 | Input/Output: [(63 -8 57 98) -8]
Test Case: 498 | Input/Output: [(14 73 27 -28) -28]
Test Case: 499 | Input/Output: [(44 23 80 11) 11]
Test Case: 500 | Input/Output: [(42 51 81 6) 6]
Test Case: 501 | Input/Output: [(99 -4 -24 -47) -47]
Test Case: 502 | Input/Output: [(87 -28 43 -22) -28]
Test Case: 503 | Input/Output: [(-33 39 -99 -74) -99]
Test Case: 504 | Input/Output: [(-21 73 -70 -28) -70]
Test Case: 505 | Input/Output: [(-14 12 -99 -29) -99]
Test Case: 506 | Input/Output: [(4 80 83 9) 4]
Test Case: 507 | Input/Output: [(43 -38 -87 70) -87]
Test Case: 508 | Input/Output: [(-4 57 19 -55) -55]
Test Case: 509 | Input/Output: [(97 -84 69 36) -84]
Test Case: 510 | Input/Output: [(-20 69 24 -6) -20]
Test Case: 511 | Input/Output: [(95 9 -96 97) -96]
Test Case: 512 | Input/Output: [(76 23 -23 -59) -59]
Test Case: 513 | Input/Output: [(60 23 53 -26) -26]
Test Case: 514 | Input/Output: [(41 -71 -64 -17) -71]
Test Case: 515 | Input/Output: [(77 -47 14 -68) -68]
Test Case: 516 | Input/Output: [(39 93 -36 37) -36]
Test Case: 517 | Input/Output: [(94 3 -7 -82) -82]
Test Case: 518 | Input/Output: [(-83 -87 58 99) -87]
Test Case: 519 | Input/Output: [(96 -19 57 -54) -54]
Test Case: 520 | Input/Output: [(27 -2 -60 -45) -60]
Test Case: 521 | Input/Output: [(77 40 24 63) 24]
Test Case: 522 | Input/Output: [(-23 -85 79 -77) -85]
Test Case: 523 | Input/Output: [(-2 37 53 4) -2]
Test Case: 524 | Input/Output: [(46 76 14 -92) -92]
Test Case: 525 | Input/Output: [(61 -79 -67 10) -79]
Test Case: 526 | Input/Output: [(24 79 -37 -78) -78]
Test Case: 527 | Input/Output: [(94 -72 18 53) -72]
Test Case: 528 | Input/Output: [(-86 61 -76 -60) -86]
Test Case: 529 | Input/Output: [(-41 96 -51 -26) -51]
Test Case: 530 | Input/Output: [(74 -49 87 34) -49]
Test Case: 531 | Input/Output: [(-89 -82 84 31) -89]
Test Case: 532 | Input/Output: [(44 -7 -88 -68) -88]
Test Case: 533 | Input/Output: [(-75 14 44 85) -75]
Test Case: 534 | Input/Output: [(22 -84 2 83) -84]
Test Case: 535 | Input/Output: [(20 60 -40 -15) -40]
Test Case: 536 | Input/Output: [(-65 -83 64 53) -83]
Test Case: 537 | Input/Output: [(49 43 61 -4) -4]
Test Case: 538 | Input/Output: [(97 4 24 57) 4]
Test Case: 539 | Input/Output: [(-46 84 -79 70) -79]
Test Case: 540 | Input/Output: [(33 5 -47 -57) -57]
Test Case: 541 | Input/Output: [(97 -19 22 -94) -94]
Test Case: 542 | Input/Output: [(-21 75 -44 -15) -44]
Test Case: 543 | Input/Output: [(-63 -49 87 20) -63]
Test Case: 544 | Input/Output: [(-91 45 86 33) -91]
Test Case: 545 | Input/Output: [(69 -93 62 -61) -93]
Test Case: 546 | Input/Output: [(60 -30 16 52) -30]
Test Case: 547 | Input/Output: [(-72 93 -26 3) -72]
Test Case: 548 | Input/Output: [(31 67 -58 -67) -67]
Test Case: 549 | Input/Output: [(71 -91 4 -99) -99]
Test Case: 550 | Input/Output: [(3 66 14 -44) -44]
Test Case: 551 | Input/Output: [(-84 -11 25 -9) -84]
Test Case: 552 | Input/Output: [(46 61 18 43) 18]
Test Case: 553 | Input/Output: [(-99 86 63 22) -99]
Test Case: 554 | Input/Output: [(7 -25 92 -89) -89]
Test Case: 555 | Input/Output: [(2 79 13 77) 2]
Test Case: 556 | Input/Output: [(-11 -29 37 -54) -54]
Test Case: 557 | Input/Output: [(-78 71 -10 52) -78]
Test Case: 558 | Input/Output: [(-68 -48 82 -14) -68]
Test Case: 559 | Input/Output: [(-10 -73 -39 21) -73]
Test Case: 560 | Input/Output: [(33 -84 -72 -77) -84]
Test Case: 561 | Input/Output: [(-46 28 -24 47) -46]
Test Case: 562 | Input/Output: [(-45 -46 -20 21) -46]
Test Case: 563 | Input/Output: [(-4 -35 -41 2) -41]
Test Case: 564 | Input/Output: [(-32 -28 -23 -35) -35]
Test Case: 565 | Input/Output: [(9 -30 65 -23) -30]
Test Case: 566 | Input/Output: [(96 84 80 66) 66]
Test Case: 567 | Input/Output: [(53 70 -59 32) -59]
Test Case: 568 | Input/Output: [(-96 -2 34 91) -96]
Test Case: 569 | Input/Output: [(97 -26 -69 -73) -73]
Test Case: 570 | Input/Output: [(2 67 -20 83) -20]
Test Case: 571 | Input/Output: [(30 -85 -40 68) -85]
Test Case: 572 | Input/Output: [(49 -72 99 1) -72]
Test Case: 573 | Input/Output: [(67 -23 -45 40) -45]
Test Case: 574 | Input/Output: [(45 -79 -99 -37) -99]
Test Case: 575 | Input/Output: [(65 28 97 -36) -36]
Test Case: 576 | Input/Output: [(86 -39 -58 -19) -58]
Test Case: 577 | Input/Output: [(-6 -91 43 -89) -91]
Test Case: 578 | Input/Output: [(-2 -4 -10 -32) -32]
Test Case: 579 | Input/Output: [(19 -52 69 52) -52]
Test Case: 580 | Input/Output: [(87 -55 59 71) -55]
Test Case: 581 | Input/Output: [(42 43 -13 -24) -24]
Test Case: 582 | Input/Output: [(91 -64 -64 55) -64]
Test Case: 583 | Input/Output: [(-12 -70 4 48) -70]
Test Case: 584 | Input/Output: [(-93 74 -74 28) -93]
Test Case: 585 | Input/Output: [(36 77 -94 1) -94]
Test Case: 586 | Input/Output: [(54 32 -86 1) -86]
Test Case: 587 | Input/Output: [(88 45 32 77) 32]
Test Case: 588 | Input/Output: [(13 34 59 76) 13]
Test Case: 589 | Input/Output: [(-65 -16 21 92) -65]
Test Case: 590 | Input/Output: [(91 23 29 2) 2]
Test Case: 591 | Input/Output: [(35 -92 71 -7) -92]
Test Case: 592 | Input/Output: [(-50 -22 -8 72) -50]
Test Case: 593 | Input/Output: [(19 -6 71 -28) -28]
Test Case: 594 | Input/Output: [(61 -4 -42 -34) -42]
Test Case: 595 | Input/Output: [(47 -54 -74 75) -74]
Test Case: 596 | Input/Output: [(-56 -59 -64 11) -64]
Test Case: 597 | Input/Output: [(31 -45 -92 -38) -92]
Test Case: 598 | Input/Output: [(27 -4 -43 -43) -43]
Test Case: 599 | Input/Output: [(17 -48 -37 76) -48]
Test Case: 600 | Input/Output: [(-76 -31 23 -51) -76]
Test Case: 601 | Input/Output: [(-36 64 -14 81) -36]
Test Case: 602 | Input/Output: [(6 -1 29 -4) -4]
Test Case: 603 | Input/Output: [(-23 -63 98 53) -63]
Test Case: 604 | Input/Output: [(86 -88 73 -99) -99]
Test Case: 605 | Input/Output: [(66 -51 -40 72) -51]
Test Case: 606 | Input/Output: [(-10 -34 42 49) -34]
Test Case: 607 | Input/Output: [(-18 56 14 99) -18]
Test Case: 608 | Input/Output: [(-65 -1 -54 -67) -67]
Test Case: 609 | Input/Output: [(-51 -76 55 -65) -76]
Test Case: 610 | Input/Output: [(-13 -11 3 90) -13]
Test Case: 611 | Input/Output: [(9 15 23 -86) -86]
Test Case: 612 | Input/Output: [(60 96 98 22) 22]
Test Case: 613 | Input/Output: [(90 -74 46 99) -74]
Test Case: 614 | Input/Output: [(-1 89 13 35) -1]
Test Case: 615 | Input/Output: [(85 67 -93 -19) -93]
Test Case: 616 | Input/Output: [(92 95 48 -48) -48]
Test Case: 617 | Input/Output: [(81 74 -86 81) -86]
Test Case: 618 | Input/Output: [(-88 -43 2 -87) -88]
Test Case: 619 | Input/Output: [(7 -38 55 -66) -66]
Test Case: 620 | Input/Output: [(-84 86 10 -8) -84]
Test Case: 621 | Input/Output: [(-93 -66 -83 -17) -93]
Test Case: 622 | Input/Output: [(3 85 -56 43) -56]
Test Case: 623 | Input/Output: [(90 -77 66 -54) -77]
Test Case: 624 | Input/Output: [(17 45 88 96) 17]
Test Case: 625 | Input/Output: [(-38 86 -29 52) -38]
Test Case: 626 | Input/Output: [(69 -48 28 57) -48]
Test Case: 627 | Input/Output: [(-57 81 62 39) -57]
Test Case: 628 | Input/Output: [(21 -26 26 0) -26]
Test Case: 629 | Input/Output: [(-36 -85 66 -53) -85]
Test Case: 630 | Input/Output: [(-5 -35 -64 -63) -64]
Test Case: 631 | Input/Output: [(3 -9 -94 65) -94]
Test Case: 632 | Input/Output: [(-12 9 -4 -80) -80]
Test Case: 633 | Input/Output: [(9 73 3 -71) -71]
Test Case: 634 | Input/Output: [(87 49 62 94) 49]
Test Case: 635 | Input/Output: [(-22 -49 -91 -69) -91]
Test Case: 636 | Input/Output: [(95 -64 42 -41) -64]
Test Case: 637 | Input/Output: [(81 64 -67 -30) -67]
Test Case: 638 | Input/Output: [(37 38 62 -40) -40]
Test Case: 639 | Input/Output: [(-60 -37 84 88) -60]
Test Case: 640 | Input/Output: [(43 25 -80 -85) -85]
Test Case: 641 | Input/Output: [(-61 -14 74 -92) -92]
Test Case: 642 | Input/Output: [(16 -63 85 -11) -63]
Test Case: 643 | Input/Output: [(-68 99 76 -63) -68]
Test Case: 644 | Input/Output: [(18 -64 45 37) -64]
Test Case: 645 | Input/Output: [(-66 -4 56 -6) -66]
Test Case: 646 | Input/Output: [(55 -83 61 69) -83]
Test Case: 647 | Input/Output: [(-29 -84 23 -7) -84]
Test Case: 648 | Input/Output: [(99 -31 -37 -78) -78]
Test Case: 649 | Input/Output: [(62 -47 -60 -12) -60]
Test Case: 650 | Input/Output: [(21 -62 -86 -87) -87]
Test Case: 651 | Input/Output: [(-100 -51 -16 -86) -100]
Test Case: 652 | Input/Output: [(65 -20 -8 48) -20]
Test Case: 653 | Input/Output: [(31 24 -35 -13) -35]
Test Case: 654 | Input/Output: [(-78 99 81 -67) -78]
Test Case: 655 | Input/Output: [(-81 -21 62 -16) -81]
Test Case: 656 | Input/Output: [(-83 -14 -20 -19) -83]
Test Case: 657 | Input/Output: [(-86 99 -50 56) -86]
Test Case: 658 | Input/Output: [(-3 22 88 -58) -58]
Test Case: 659 | Input/Output: [(15 -38 98 -80) -80]
Test Case: 660 | Input/Output: [(68 -57 -78 43) -78]
Test Case: 661 | Input/Output: [(38 89 -28 94) -28]
Test Case: 662 | Input/Output: [(24 48 -99 -10) -99]
Test Case: 663 | Input/Output: [(-41 39 94 6) -41]
Test Case: 664 | Input/Output: [(-51 -53 -28 77) -53]
Test Case: 665 | Input/Output: [(-45 72 5 24) -45]
Test Case: 666 | Input/Output: [(50 68 -96 -20) -96]
Test Case: 667 | Input/Output: [(89 88 -18 86) -18]
Test Case: 668 | Input/Output: [(-52 76 -15 64) -52]
Test Case: 669 | Input/Output: [(-49 1 83 -25) -49]
Test Case: 670 | Input/Output: [(-78 -3 -34 13) -78]
Test Case: 671 | Input/Output: [(39 10 -10 74) -10]
Test Case: 672 | Input/Output: [(-24 -42 -77 84) -77]
Test Case: 673 | Input/Output: [(-37 -19 65 54) -37]
Test Case: 674 | Input/Output: [(-80 -61 93 -45) -80]
Test Case: 675 | Input/Output: [(-85 -74 -88 -95) -95]
Test Case: 676 | Input/Output: [(-51 -77 -85 44) -85]
Test Case: 677 | Input/Output: [(-43 79 13 -18) -43]
Test Case: 678 | Input/Output: [(95 -29 56 15) -29]
Test Case: 679 | Input/Output: [(12 15 47 17) 12]
Test Case: 680 | Input/Output: [(-19 -76 -27 -55) -76]
Test Case: 681 | Input/Output: [(24 34 92 62) 24]
Test Case: 682 | Input/Output: [(-27 -77 75 -10) -77]
Test Case: 683 | Input/Output: [(-14 46 -26 -68) -68]
Test Case: 684 | Input/Output: [(-33 88 31 87) -33]
Test Case: 685 | Input/Output: [(88 0 44 -34) -34]
Test Case: 686 | Input/Output: [(-9 39 -38 -90) -90]
Test Case: 687 | Input/Output: [(-77 7 90 29) -77]
Test Case: 688 | Input/Output: [(30 24 81 44) 24]
Test Case: 689 | Input/Output: [(17 49 -35 -86) -86]
Test Case: 690 | Input/Output: [(70 55 0 64) 0]
Test Case: 691 | Input/Output: [(99 58 -82 -82) -82]
Test Case: 692 | Input/Output: [(-12 73 -2 79) -12]
Test Case: 693 | Input/Output: [(37 -61 11 64) -61]
Test Case: 694 | Input/Output: [(-95 57 -76 -40) -95]
Test Case: 695 | Input/Output: [(91 42 -26 -1) -26]
Test Case: 696 | Input/Output: [(-34 6 -7 98) -34]
Test Case: 697 | Input/Output: [(-55 45 13 -45) -55]
Test Case: 698 | Input/Output: [(-46 27 28 -8) -46]
Test Case: 699 | Input/Output: [(38 86 -85 -26) -85]
Test Case: 700 | Input/Output: [(26 -84 -37 -95) -95]
Test Case: 701 | Input/Output: [(-64 -89 -81 38) -89]
Test Case: 702 | Input/Output: [(-52 98 -31 95) -52]
Test Case: 703 | Input/Output: [(-15 -82 84 31) -82]
Test Case: 704 | Input/Output: [(61 -41 -20 -57) -57]
Test Case: 705 | Input/Output: [(27 39 -18 52) -18]
Test Case: 706 | Input/Output: [(81 5 84 -22) -22]
Test Case: 707 | Input/Output: [(-13 59 10 52) -13]
Test Case: 708 | Input/Output: [(-93 14 31 -16) -93]
Test Case: 709 | Input/Output: [(-26 -58 -62 -49) -62]
Test Case: 710 | Input/Output: [(-63 -92 56 -17) -92]
Test Case: 711 | Input/Output: [(-90 -92 -66 91) -92]
Test Case: 712 | Input/Output: [(-72 93 66 34) -72]
Test Case: 713 | Input/Output: [(-65 -59 11 -47) -65]
Test Case: 714 | Input/Output: [(13 -22 -82 -5) -82]
Test Case: 715 | Input/Output: [(-98 54 -26 45) -98]
Test Case: 716 | Input/Output: [(100 31 -62 -27) -62]
Test Case: 717 | Input/Output: [(-26 0 -77 22) -77]
Test Case: 718 | Input/Output: [(-59 -3 -92 -62) -92]
Test Case: 719 | Input/Output: [(-92 100 -23 -64) -92]
Test Case: 720 | Input/Output: [(-37 -65 -27 -42) -65]
Test Case: 721 | Input/Output: [(62 -67 -43 17) -67]
Test Case: 722 | Input/Output: [(-85 22 -56 -40) -85]
Test Case: 723 | Input/Output: [(98 -68 16 -12) -68]
Test Case: 724 | Input/Output: [(-50 -59 57 -22) -59]
Test Case: 725 | Input/Output: [(63 66 -96 30) -96]
Test Case: 726 | Input/Output: [(-78 32 -54 29) -78]
Test Case: 727 | Input/Output: [(-19 93 -7 19) -19]
Test Case: 728 | Input/Output: [(-86 74 17 -47) -86]
Test Case: 729 | Input/Output: [(-44 33 2 -58) -58]
Test Case: 730 | Input/Output: [(68 -67 -12 83) -67]
Test Case: 731 | Input/Output: [(6 -62 81 -24) -62]
Test Case: 732 | Input/Output: [(-35 23 -99 -57) -99]
Test Case: 733 | Input/Output: [(20 -43 71 -28) -43]
Test Case: 734 | Input/Output: [(-78 -10 21 -52) -78]
Test Case: 735 | Input/Output: [(-14 36 -30 -4) -30]
Test Case: 736 | Input/Output: [(63 41 -76 -56) -76]
Test Case: 737 | Input/Output: [(84 -100 -35 -15) -100]
Test Case: 738 | Input/Output: [(-26 38 76 75) -26]
Test Case: 739 | Input/Output: [(57 -9 71 96) -9]
Test Case: 740 | Input/Output: [(-5 -65 -30 -37) -65]
Test Case: 741 | Input/Output: [(-31 -55 -55 95) -55]
Test Case: 742 | Input/Output: [(-92 -93 8 -96) -96]
Test Case: 743 | Input/Output: [(58 -90 80 -48) -90]
Test Case: 744 | Input/Output: [(50 87 29 19) 19]
Test Case: 745 | Input/Output: [(75 70 -8 -16) -16]
Test Case: 746 | Input/Output: [(-22 6 -7 1) -22]
Test Case: 747 | Input/Output: [(-90 84 -68 35) -90]
Test Case: 748 | Input/Output: [(-22 -87 55 68) -87]
Test Case: 749 | Input/Output: [(77 -94 28 15) -94]
Test Case: 750 | Input/Output: [(-26 -63 23 -6) -63]
Test Case: 751 | Input/Output: [(19 55 17 96) 17]
Test Case: 752 | Input/Output: [(55 -10 -73 87) -73]
Test Case: 753 | Input/Output: [(-8 34 -64 39) -64]
Test Case: 754 | Input/Output: [(-48 2 56 -96) -96]
Test Case: 755 | Input/Output: [(70 5 -80 -31) -80]
Test Case: 756 | Input/Output: [(-70 71 96 -18) -70]
Test Case: 757 | Input/Output: [(86 -25 -91 5) -91]
Test Case: 758 | Input/Output: [(81 45 63 0) 0]
Test Case: 759 | Input/Output: [(-67 -66 -80 -16) -80]
Test Case: 760 | Input/Output: [(60 81 -43 5) -43]
Test Case: 761 | Input/Output: [(-25 -16 21 -87) -87]
Test Case: 762 | Input/Output: [(22 74 -55 -22) -55]
Test Case: 763 | Input/Output: [(47 -40 -6 90) -40]
Test Case: 764 | Input/Output: [(-71 -60 -69 -82) -82]
Test Case: 765 | Input/Output: [(-30 -20 -80 98) -80]
Test Case: 766 | Input/Output: [(-81 61 44 99) -81]
Test Case: 767 | Input/Output: [(-94 60 -83 -48) -94]
Test Case: 768 | Input/Output: [(35 80 97 51) 35]
Test Case: 769 | Input/Output: [(49 -87 45 68) -87]
Test Case: 770 | Input/Output: [(-89 -17 66 13) -89]
Test Case: 771 | Input/Output: [(25 21 -35 48) -35]
Test Case: 772 | Input/Output: [(40 -65 -100 -18) -100]
Test Case: 773 | Input/Output: [(-9 62 84 90) -9]
Test Case: 774 | Input/Output: [(-85 -51 -54 67) -85]
Test Case: 775 | Input/Output: [(34 58 -10 95) -10]
Test Case: 776 | Input/Output: [(64 46 4 44) 4]
Test Case: 777 | Input/Output: [(-79 -100 23 32) -100]
Test Case: 778 | Input/Output: [(89 18 -91 -55) -91]
Test Case: 779 | Input/Output: [(66 66 -56 -25) -56]
Test Case: 780 | Input/Output: [(-29 -87 -21 1) -87]
Test Case: 781 | Input/Output: [(-3 -67 -67 29) -67]
Test Case: 782 | Input/Output: [(16 25 18 -50) -50]
Test Case: 783 | Input/Output: [(-17 -70 -24 -53) -70]
Test Case: 784 | Input/Output: [(-94 32 -54 77) -94]
Test Case: 785 | Input/Output: [(-38 -49 -47 -98) -98]
Test Case: 786 | Input/Output: [(-26 50 -53 53) -53]
Test Case: 787 | Input/Output: [(21 43 33 44) 21]
Test Case: 788 | Input/Output: [(-3 -32 73 -77) -77]
Test Case: 789 | Input/Output: [(-60 77 21 49) -60]
Test Case: 790 | Input/Output: [(15 -51 -74 0) -74]
Test Case: 791 | Input/Output: [(17 72 33 66) 17]
Test Case: 792 | Input/Output: [(62 -99 69 -79) -99]
Test Case: 793 | Input/Output: [(7 59 83 53) 7]
Test Case: 794 | Input/Output: [(-99 36 -25 28) -99]
Test Case: 795 | Input/Output: [(34 32 47 58) 32]
Test Case: 796 | Input/Output: [(88 52 -57 -46) -57]
Test Case: 797 | Input/Output: [(-47 -6 -96 19) -96]
Test Case: 798 | Input/Output: [(-46 -97 75 -76) -97]
Test Case: 799 | Input/Output: [(81 48 -71 19) -71]
Test Case: 800 | Input/Output: [(-50 70 -23 -94) -94]
Test Case: 801 | Input/Output: [(10 24 18 6) 6]
Test Case: 802 | Input/Output: [(77 -82 -12 70) -82]
Test Case: 803 | Input/Output: [(33 -1 -34 -70) -70]
Test Case: 804 | Input/Output: [(94 22 -94 6) -94]
Test Case: 805 | Input/Output: [(13 97 51 -64) -64]
Test Case: 806 | Input/Output: [(-43 -90 -55 91) -90]
Test Case: 807 | Input/Output: [(61 11 48 -94) -94]
Test Case: 808 | Input/Output: [(-95 -73 -88 78) -95]
Test Case: 809 | Input/Output: [(-97 -67 97 -89) -97]
Test Case: 810 | Input/Output: [(46 -90 2 11) -90]
Test Case: 811 | Input/Output: [(1 10 68 -59) -59]
Test Case: 812 | Input/Output: [(1 -99 -54 73) -99]
Test Case: 813 | Input/Output: [(-7 24 -89 -99) -99]
Test Case: 814 | Input/Output: [(-2 6 -34 96) -34]
Test Case: 815 | Input/Output: [(-52 60 34 -95) -95]
Test Case: 816 | Input/Output: [(50 -15 -52 -83) -83]
Test Case: 817 | Input/Output: [(-31 64 -56 56) -56]
Test Case: 818 | Input/Output: [(55 1 9 -52) -52]
Test Case: 819 | Input/Output: [(-83 68 -18 -76) -83]
Test Case: 820 | Input/Output: [(-19 -54 56 98) -54]
Test Case: 821 | Input/Output: [(-42 9 -49 8) -49]
Test Case: 822 | Input/Output: [(-26 46 -18 71) -26]
Test Case: 823 | Input/Output: [(86 92 -96 76) -96]
Test Case: 824 | Input/Output: [(-25 -18 19 42) -25]
Test Case: 825 | Input/Output: [(-46 -65 82 14) -65]
Test Case: 826 | Input/Output: [(38 -96 22 1) -96]
Test Case: 827 | Input/Output: [(26 72 -25 29) -25]
Test Case: 828 | Input/Output: [(-61 -21 64 92) -61]
Test Case: 829 | Input/Output: [(-8 93 19 -65) -65]
Test Case: 830 | Input/Output: [(54 -68 22 -83) -83]
Test Case: 831 | Input/Output: [(-55 68 -52 -13) -55]
Test Case: 832 | Input/Output: [(9 -90 -70 -100) -100]
Test Case: 833 | Input/Output: [(79 -7 -50 60) -50]
Test Case: 834 | Input/Output: [(-92 63 -66 -20) -92]
Test Case: 835 | Input/Output: [(-21 -28 50 2) -28]
Test Case: 836 | Input/Output: [(34 -56 10 -21) -56]
Test Case: 837 | Input/Output: [(-11 9 -45 -45) -45]
Test Case: 838 | Input/Output: [(21 71 19 -84) -84]
Test Case: 839 | Input/Output: [(-4 67 -52 6) -52]
Test Case: 840 | Input/Output: [(94 -82 41 49) -82]
Test Case: 841 | Input/Output: [(27 30 -42 -79) -79]
Test Case: 842 | Input/Output: [(89 -53 -74 -64) -74]
Test Case: 843 | Input/Output: [(-60 100 -69 15) -69]
Test Case: 844 | Input/Output: [(79 -30 31 42) -30]
Test Case: 845 | Input/Output: [(-88 -73 -3 11) -88]
Test Case: 846 | Input/Output: [(44 99 99 -78) -78]
Test Case: 847 | Input/Output: [(-11 95 21 -11) -11]
Test Case: 848 | Input/Output: [(-21 65 -55 54) -55]
Test Case: 849 | Input/Output: [(-24 -33 -62 -3) -62]
Test Case: 850 | Input/Output: [(-42 -64 -30 66) -64]
Test Case: 851 | Input/Output: [(74 96 14 -75) -75]
Test Case: 852 | Input/Output: [(-78 0 -54 -12) -78]
Test Case: 853 | Input/Output: [(10 -84 26 81) -84]
Test Case: 854 | Input/Output: [(-22 88 -38 61) -38]
Test Case: 855 | Input/Output: [(-13 27 -25 39) -25]
Test Case: 856 | Input/Output: [(25 52 17 5) 5]
Test Case: 857 | Input/Output: [(-100 -99 -87 89) -100]
Test Case: 858 | Input/Output: [(-88 97 28 11) -88]
Test Case: 859 | Input/Output: [(-56 27 99 -85) -85]
Test Case: 860 | Input/Output: [(-88 29 -49 16) -88]
Test Case: 861 | Input/Output: [(-52 92 30 1) -52]
Test Case: 862 | Input/Output: [(-80 50 5 74) -80]
Test Case: 863 | Input/Output: [(-74 18 -63 -63) -74]
Test Case: 864 | Input/Output: [(55 -21 4 -19) -21]
Test Case: 865 | Input/Output: [(20 -87 -11 -63) -87]
Test Case: 866 | Input/Output: [(-72 79 67 73) -72]
Test Case: 867 | Input/Output: [(-82 -56 -62 -2) -82]
Test Case: 868 | Input/Output: [(11 -21 84 88) -21]
Test Case: 869 | Input/Output: [(37 62 -33 57) -33]
Test Case: 870 | Input/Output: [(-67 39 -45 9) -67]
Test Case: 871 | Input/Output: [(-70 -35 -4 -71) -71]
Test Case: 872 | Input/Output: [(-46 26 50 -39) -46]
Test Case: 873 | Input/Output: [(15 -77 -42 92) -77]
Test Case: 874 | Input/Output: [(-98 39 -51 68) -98]
Test Case: 875 | Input/Output: [(14 83 -51 -87) -87]
Test Case: 876 | Input/Output: [(87 -93 92 -78) -93]
Test Case: 877 | Input/Output: [(44 23 48 36) 23]
Test Case: 878 | Input/Output: [(72 77 70 42) 42]
Test Case: 879 | Input/Output: [(-9 39 53 -40) -40]
Test Case: 880 | Input/Output: [(24 12 -10 53) -10]
Test Case: 881 | Input/Output: [(41 51 63 23) 23]
Test Case: 882 | Input/Output: [(-83 -25 62 -5) -83]
Test Case: 883 | Input/Output: [(71 29 -34 -52) -52]
Test Case: 884 | Input/Output: [(-90 -68 -92 52) -92]
Test Case: 885 | Input/Output: [(91 13 -21 92) -21]
Test Case: 886 | Input/Output: [(-14 -31 -4 80) -31]
Test Case: 887 | Input/Output: [(-59 -99 -43 -69) -99]
Test Case: 888 | Input/Output: [(-95 94 -29 48) -95]
Test Case: 889 | Input/Output: [(86 -46 88 -36) -46]
Test Case: 890 | Input/Output: [(76 -97 -71 -4) -97]
Test Case: 891 | Input/Output: [(-27 -14 35 -9) -27]
Test Case: 892 | Input/Output: [(-41 94 85 -93) -93]
Test Case: 893 | Input/Output: [(86 -97 -79 -15) -97]
Test Case: 894 | Input/Output: [(-23 18 60 -60) -60]
Test Case: 895 | Input/Output: [(21 -88 -76 -30) -88]
Test Case: 896 | Input/Output: [(13 23 -9 71) -9]
Test Case: 897 | Input/Output: [(-5 -43 20 -65) -65]
Test Case: 898 | Input/Output: [(-13 43 -29 42) -29]
Test Case: 899 | Input/Output: [(30 -89 -84 -84) -89]
Test Case: 900 | Input/Output: [(-71 0 -30 -27) -71]
Test Case: 901 | Input/Output: [(34 -71 -96 -31) -96]
Test Case: 902 | Input/Output: [(1 99 -17 20) -17]
Test Case: 903 | Input/Output: [(64 -90 -4 -45) -90]
Test Case: 904 | Input/Output: [(-9 -48 87 11) -48]
Test Case: 905 | Input/Output: [(52 68 88 -93) -93]
Test Case: 906 | Input/Output: [(16 88 -88 99) -88]
Test Case: 907 | Input/Output: [(22 -10 4 50) -10]
Test Case: 908 | Input/Output: [(76 32 72 42) 32]
Test Case: 909 | Input/Output: [(46 1 33 -7) -7]
Test Case: 910 | Input/Output: [(-94 94 -58 -49) -94]
Test Case: 911 | Input/Output: [(22 69 -73 -59) -73]
Test Case: 912 | Input/Output: [(-64 -19 -42 78) -64]
Test Case: 913 | Input/Output: [(31 64 -36 90) -36]
Test Case: 914 | Input/Output: [(-64 -84 47 54) -84]
Test Case: 915 | Input/Output: [(-13 -14 100 -39) -39]
Test Case: 916 | Input/Output: [(-39 -1 -25 -63) -63]
Test Case: 917 | Input/Output: [(35 39 34 -92) -92]
Test Case: 918 | Input/Output: [(-55 58 -73 44) -73]
Test Case: 919 | Input/Output: [(-54 -60 -1 92) -60]
Test Case: 920 | Input/Output: [(55 16 -61 -98) -98]
Test Case: 921 | Input/Output: [(54 -90 -42 -19) -90]
Test Case: 922 | Input/Output: [(24 -17 98 -99) -99]
Test Case: 923 | Input/Output: [(23 38 -96 -64) -96]
Test Case: 924 | Input/Output: [(33 68 -37 -8) -37]
Test Case: 925 | Input/Output: [(-55 17 -14 8) -55]
Test Case: 926 | Input/Output: [(15 -13 -56 2) -56]
Test Case: 927 | Input/Output: [(99 91 32 12) 12]
Test Case: 928 | Input/Output: [(47 -47 90 -91) -91]
Test Case: 929 | Input/Output: [(85 90 78 -74) -74]
Test Case: 930 | Input/Output: [(49 -48 74 -21) -48]
Test Case: 931 | Input/Output: [(41 -36 -80 96) -80]
Test Case: 932 | Input/Output: [(-42 78 -32 -99) -99]
Test Case: 933 | Input/Output: [(3 -51 79 -58) -58]
Test Case: 934 | Input/Output: [(37 22 50 28) 22]
Test Case: 935 | Input/Output: [(92 83 18 -78) -78]
Test Case: 936 | Input/Output: [(9 -23 84 68) -23]
Test Case: 937 | Input/Output: [(-98 10 -31 88) -98]
Test Case: 938 | Input/Output: [(21 82 -75 -30) -75]
Test Case: 939 | Input/Output: [(32 -54 -78 3) -78]
Test Case: 940 | Input/Output: [(25 78 43 -91) -91]
Test Case: 941 | Input/Output: [(39 16 -2 100) -2]
Test Case: 942 | Input/Output: [(-49 53 37 95) -49]
Test Case: 943 | Input/Output: [(-10 57 16 2) -10]
Test Case: 944 | Input/Output: [(50 7 98 -8) -8]
Test Case: 945 | Input/Output: [(-4 -45 -2 -66) -66]
Test Case: 946 | Input/Output: [(59 -100 54 -80) -100]
Test Case: 947 | Input/Output: [(17 -30 -62 -99) -99]
Test Case: 948 | Input/Output: [(42 -43 -69 78) -69]
Test Case: 949 | Input/Output: [(-80 -59 -37 -84) -84]
Test Case: 950 | Input/Output: [(3 -50 92 24) -50]
Test Case: 951 | Input/Output: [(-72 85 -88 68) -88]
Test Case: 952 | Input/Output: [(-79 -51 -22 -66) -79]
Test Case: 953 | Input/Output: [(64 -38 63 -88) -88]
Test Case: 954 | Input/Output: [(36 -98 -78 46) -98]
Test Case: 955 | Input/Output: [(-30 -38 -7 -92) -92]
Test Case: 956 | Input/Output: [(3 -92 55 -32) -92]
Test Case: 957 | Input/Output: [(-100 41 -15 -32) -100]
Test Case: 958 | Input/Output: [(-84 84 -22 88) -84]
Test Case: 959 | Input/Output: [(-58 8 -82 -79) -82]
Test Case: 960 | Input/Output: [(-74 -72 19 25) -74]
Test Case: 961 | Input/Output: [(-84 94 -48 26) -84]
Test Case: 962 | Input/Output: [(85 21 65 -100) -100]
Test Case: 963 | Input/Output: [(-45 -71 -88 -93) -93]
Test Case: 964 | Input/Output: [(-45 72 -93 0) -93]
Test Case: 965 | Input/Output: [(50 55 -21 -82) -82]
Test Case: 966 | Input/Output: [(-70 -74 -6 -78) -78]
Test Case: 967 | Input/Output: [(20 -24 -90 -5) -90]
Test Case: 968 | Input/Output: [(-4 21 66 -41) -41]
Test Case: 969 | Input/Output: [(-24 32 77 99) -24]
Test Case: 970 | Input/Output: [(9 -37 96 -48) -48]
Test Case: 971 | Input/Output: [(-68 6 -14 -88) -88]
Test Case: 972 | Input/Output: [(75 -53 22 24) -53]
Test Case: 973 | Input/Output: [(-18 -16 5 53) -18]
Test Case: 974 | Input/Output: [(-80 29 -54 57) -80]
Test Case: 975 | Input/Output: [(55 -25 -4 67) -25]
Test Case: 976 | Input/Output: [(-30 -96 36 -63) -96]
Test Case: 977 | Input/Output: [(18 -10 35 -28) -28]
Test Case: 978 | Input/Output: [(82 42 -11 -55) -55]
Test Case: 979 | Input/Output: [(29 -38 -75 -88) -88]
Test Case: 980 | Input/Output: [(-31 -53 -49 -99) -99]
Test Case: 981 | Input/Output: [(78 -45 -49 30) -49]
Test Case: 982 | Input/Output: [(10 -52 -5 -34) -52]
Test Case: 983 | Input/Output: [(51 99 82 48) 48]
Test Case: 984 | Input/Output: [(50 -5 -30 -3) -30]
Test Case: 985 | Input/Output: [(6 -55 22 75) -55]
Test Case: 986 | Input/Output: [(-14 29 -28 55) -28]
Test Case: 987 | Input/Output: [(-57 -34 -94 66) -94]
Test Case: 988 | Input/Output: [(67 52 37 -10) -10]
Test Case: 989 | Input/Output: [(42 75 -53 55) -53]
Test Case: 990 | Input/Output: [(45 -6 -10 -68) -68]
Test Case: 991 | Input/Output: [(-73 -86 -1 70) -86]
Test Case: 992 | Input/Output: [(89 -46 52 -41) -46]
Test Case: 993 | Input/Output: [(-53 -70 -68 32) -70]
Test Case: 994 | Input/Output: [(28 51 69 -9) -9]
Test Case: 995 | Input/Output: [(4 -70 100 -91) -91]
Test Case: 996 | Input/Output: [(-100 -74 -57 45) -100]
Test Case: 997 | Input/Output: [(68 26 -53 -76) -76]
Test Case: 998 | Input/Output: [(79 90 -81 -16) -81]
Test Case: 999 | Input/Output: [(55 -64 -15 88) -64]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x17e6b7e4 clojush.problems.software.smallest$fn__7461@17e6b7e4] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0xb842275 clojush.instructions.tag$tag_instruction_erc$fn__2160@b842275] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x11c25846 clojush.instructions.tag$tagged_instruction_erc$fn__2166@11c25846] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0xdd9de63 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@dd9de63]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:uniform-addition-and-deletion 1.0}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 3000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x98712fa clojush.problems.software.smallest$smallest_initial_report@98712fa]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x3b8d2abe clojush.problems.software.smallest$smallest_report@3b8d2abe]
random-screen = false
random-seed = 44 -116 -44 51 -2 41 60 12 86 39 99 2 102 94 11 46
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[30 -65 30 30] -65] [[-43 35 35 35] -43] [[41 -45 41 41] -45] [[63 64 63 63] 63] [[-85 -85 -85 0] -85] [[81 81 42 81] 42] [[-50 -50 60 -50] -50] [[-68 -3 -68 -68] -68] [[-68 -60 -60 -60] -68] [[86 45 45 45] 45] [(8 8 8 8) 8] [(86 86 86 86) 86] [(-81 -81 -81 -81) -81] [(-100 -100 -100 -100) -100] [(-10 -10 -10 -10) -10] [(18 73 52 78) 18] [(67 97 49 8) 8] [(89 91 75 2) 2] [(99 98 96 27) 27] [(97 4 86 37) 4] [(32 4 62 26) 4] [(53 0 16 96) 0] [(49 96 95 4) 4] [(27 21 38 16) 16] [(53 40 88 7) 7] [(0 18 54 67) 0] [(24 100 4 100) 4] [(7 6 63 47) 6] [(59 18 92 35) 18] [(22 38 16 46) 16] [(55 34 62 99) 34] [(69 3 66 90) 3] [(48 21 31 87) 21] [(38 79 6 33) 6] [(34 7 62 37) 7] [(-55 -54 58 62) -55] [(-16 50 -84 -9) -84] [(32 -35 -96 -87) -96] [(95 -87 -28 -36) -87] [(-70 -64 76 34) -70] [(78 -11 73 -88) -88] [(-51 -58 -5 66) -58] [(-25 38 24 2) -25] [(-32 91 -27 -62) -62] [(100 33 66 -96) -96] [(86 -88 20 91) -88] [(67 52 -71 35) -71] [(70 51 -88 32) -88] [(4 -74 95 95) -74] [(36 87 -57 60) -57] [(48 -7 8 -58) -58] [(-63 -29 -93 70) -93] [(-70 -11 95 35) -70] [(76 34 48 72) 34] [(70 12 -31 87) -31] [(-47 53 -79 23) -79] [(-55 -45 -73 -24) -73] [(2 -40 -15 -61) -61] [(-2 26 47 99) -2] [(31 -61 -90 -35) -90] [(53 -25 -71 8) -71] [(23 -74 -71 -46) -74] [(58 -26 -58 39) -58] [(-19 -74 -68 25) -74] [(-52 -24 -75 86) -75] [(-11 92 -12 3) -12] [(34 53 56 79) 34] [(59 55 -17 34) -17] [(-19 -99 -73 -46) -99] [(-88 -88 -74 -53) -88] [(-49 -19 66 43) -49] [(-33 -42 21 11) -42] [(-61 14 -5 -29) -61] [(81 33 -26 -23) -26] [(-66 -90 3 -92) -92] [(60 -40 -25 -34) -40] [(-60 -54 10 -33) -60] [(31 8 59 73) 8] [(16 -3 -79 -85) -85] [(89 -83 -98 -58) -98] [(70 61 68 71) 61] [(-67 61 62 5) -67] [(9 25 21 -48) -48] [(27 -27 -78 66) -78] [(-76 -17 59 58) -76] [(-37 -83 99 98) -83] [(34 -12 60 55) -12] [(74 -92 82 42) -92] [(-23 92 13 22) -23] [(-70 13 -47 36) -70] [(-47 14 -67 -39) -67] [(98 60 34 -18) -18] [(41 1 -81 -39) -81] [(86 16 -92 -10) -92] [(-81 50 82 29) -81])
uniform-addition-and-deletion-rate = 0.09
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 646
Test mean error for best: 0.64600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -65                 | Program output: 30                 
Correct output: -43                 | Program output: 35                 
Correct output: -45                 | Program output: 41                 
Correct output: 63                  | Program output: 63                 
Correct output: -85                 | Program output: -85                
Correct output: 42                  | Program output: 42                 
Correct output: -50                 | Program output: 60                 
Correct output: -68                 | Program output: -68                
Correct output: -68                 | Program output: -60                
Correct output: 45                  | Program output: 45                 
Correct output: 8                   | Program output: 8                  
Correct output: 86                  | Program output: 86                 
Correct output: -81                 | Program output: -81                
Correct output: -100                | Program output: -100               
Correct output: -10                 | Program output: -10                
Correct output: 18                  | Program output: 52                 
Correct output: 8                   | Program output: 49                 
Correct output: 2                   | Program output: 75                 
Correct output: 27                  | Program output: 96                 
Correct output: 4                   | Program output: 86                 
Correct output: 4                   | Program output: 62                 
Correct output: 0                   | Program output: 16                 
Correct output: 4                   | Program output: 95                 
Correct output: 16                  | Program output: 38                 
Correct output: 7                   | Program output: 88                 
Correct output: 0                   | Program output: 54                 
Correct output: 4                   | Program output: 4                  
Correct output: 6                   | Program output: 63                 
Correct output: 18                  | Program output: 92                 
Correct output: 16                  | Program output: 16                 
Correct output: 34                  | Program output: 62                 
Correct output: 3                   | Program output: 66                 
Correct output: 21                  | Program output: 31                 
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 62                 
Correct output: -55                 | Program output: 58                 
Correct output: -84                 | Program output: -84                
Correct output: -96                 | Program output: -96                
Correct output: -87                 | Program output: -28                
Correct output: -70                 | Program output: 76                 
Correct output: -88                 | Program output: 73                 
Correct output: -58                 | Program output: -5                 
Correct output: -25                 | Program output: 24                 
Correct output: -62                 | Program output: -27                
Correct output: -96                 | Program output: 66                 
Correct output: -88                 | Program output: 20                 
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: -88                
Correct output: -74                 | Program output: 95                 
Correct output: -57                 | Program output: -57                
Correct output: -58                 | Program output: 8                  
Correct output: -93                 | Program output: -93                
Correct output: -70                 | Program output: 95                 
Correct output: 34                  | Program output: 48                 
Correct output: -31                 | Program output: -31                
Correct output: -79                 | Program output: -79                
Correct output: -73                 | Program output: -73                
Correct output: -61                 | Program output: -15                
Correct output: -2                  | Program output: 47                 
Correct output: -90                 | Program output: -90                
Correct output: -71                 | Program output: -71                
Correct output: -74                 | Program output: -71                
Correct output: -58                 | Program output: -58                
Correct output: -74                 | Program output: -68                
Correct output: -75                 | Program output: -75                
Correct output: -12                 | Program output: -12                
Correct output: 34                  | Program output: 56                 
Correct output: -17                 | Program output: -17                
Correct output: -99                 | Program output: -73                
Correct output: -88                 | Program output: -74                
Correct output: -49                 | Program output: 66                 
Correct output: -42                 | Program output: 21                 
Correct output: -61                 | Program output: -5                 
Correct output: -26                 | Program output: -26                
Correct output: -92                 | Program output: 3                  
Correct output: -40                 | Program output: -25                
Correct output: -60                 | Program output: 10                 
Correct output: 8                   | Program output: 59                 
Correct output: -85                 | Program output: -79                
Correct output: -98                 | Program output: -98                
Correct output: 61                  | Program output: 68                 
Correct output: -67                 | Program output: 62                 
Correct output: -48                 | Program output: 21                 
Correct output: -78                 | Program output: -78                
Correct output: -76                 | Program output: 59                 
Correct output: -83                 | Program output: 99                 
Correct output: -12                 | Program output: 60                 
Correct output: -92                 | Program output: 82                 
Correct output: -23                 | Program output: 13                 
Correct output: -70                 | Program output: -47                
Correct output: -67                 | Program output: -67                
Correct output: -18                 | Program output: 34                 
Correct output: -81                 | Program output: -81                
Correct output: -92                 | Program output: -92                
Correct output: -81                 | Program output: 82                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_k} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 2, :instruction exec_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_flush} {:close 1, :instruction in3} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_dup_times} {:close 0, :instruction tag_integer_273} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while})
Lexicase best program: (exec_s_when_autoconstructing (integer_yankdup boolean_shove boolean_and boolean_yank) (exec_dup (exec_yankdup integer_stackdepth integer_empty exec_yank) exec_s_when_autoconstructing (boolean_not exec_dup (exec_s (integer_swap) (exec_k (exec_shove (integer_yankdup) exec_do*while (exec_y_when_autoconstructing (boolean_or exec_dup ()) integer_yank boolean_eq in3 print_integer boolean_empty) boolean_dup boolean_invert_second_then_and integer_eq boolean_dup_times exec_dup_times (boolean_flush integer_gte exec_s () (boolean_xor integer_pop exec_y (integer_yankdup) integer_mult boolean_flush) (in3) exec_empty exec_dup_times () tag_integer_273 integer_stackdepth exec_do*while ())) ()) ())) () ()) ())
Lexicase best errors: [1 1 0 1 0 1 0 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 72
Percent parens: 0.347
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_k} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 2, :instruction exec_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_flush} {:close 1, :instruction in3} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_dup_times} {:close 0, :instruction tag_integer_273} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while})
Zero cases best program: (exec_s_when_autoconstructing (integer_yankdup boolean_shove boolean_and boolean_yank) (exec_dup (exec_yankdup integer_stackdepth integer_empty exec_yank) exec_s_when_autoconstructing (boolean_not exec_dup (exec_s (integer_swap) (exec_k (exec_shove (integer_yankdup) exec_do*while (exec_y_when_autoconstructing (boolean_or exec_dup ()) integer_yank boolean_eq in3 print_integer boolean_empty) boolean_dup boolean_invert_second_then_and integer_eq boolean_dup_times exec_dup_times (boolean_flush integer_gte exec_s () (boolean_xor integer_pop exec_y (integer_yankdup) integer_mult boolean_flush) (in3) exec_empty exec_dup_times () tag_integer_273 integer_stackdepth exec_do*while ())) ()) ())) () ()) ())
Zero cases best errors: [1 1 0 1 0 1 0 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 72
Percent parens: 0.347
--- Lexicase Population Statistics ---
Count of elite individuals by case: (3 1 3 11 3 1 3 3 3 2)
Population mean number of elite cases: 0.03
Count of perfect (error zero) individuals by case: (3 1 3 11 3 1 3 3 3 2)
Population mean number of perfect (error zero) cases: 0.03
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*count} {:close 0, :instruction in3} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_375} {:close 0, :instruction integer_yankdup} {:close 2, :instruction integer_gte} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction print_newline} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_y} {:close 1, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_swap} {:close 1, :instruction tag_exec_522} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_exec} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_if} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_pop} {:close 1, :instruction in3} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_while} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction in4})
Best program: (exec_do*count (in3 integer_div boolean_yank) integer_sub integer_shove exec_k (exec_dup (exec_rot (exec_s (boolean_invert_first_then_and) (exec_pop (exec_dup (exec_k_when_autoconstructing () (tagged_375 integer_yankdup integer_gte)) boolean_frominteger boolean_frominteger boolean_dup_times integer_shove print_newline) print_integer exec_s (exec_empty exec_y (in3) in3 in4 boolean_swap boolean_and integer_gt) (exec_dup (boolean_swap tag_exec_522 () exec_swap (boolean_pop exec_s_when_autoconstructing () (integer_stackdepth integer_fromboolean) (integer_dup_times in2 boolean_pop exec_dup_items integer_flush) exec_flush integer_dup boolean_dup) (print_exec (integer_gt integer_eq exec_eq) integer_mult boolean_yankdup) exec_if (integer_eq boolean_pop in3) (integer_empty) boolean_empty exec_noop boolean_empty exec_yank exec_while (exec_yank exec_empty integer_stackdepth integer_inc in2 exec_pop () exec_swap (exec_k_when_autoconstructing (boolean_or) (integer_empty boolean_shove) integer_rot integer_gte boolean_dup_times in4) ()))) ()) ()) () ())) ())
Errors: [1 1 0 1 0 1 0 0 0 1]
Total: 5
Mean: 0.5
Genome size: 79
Size: 114
Percent parens: 0.307
--- Population Statistics ---
Average total errors in population: 9.967
Median total errors in population: 10
Error averages by case: (0.997 0.999 0.997 0.989 0.997 0.999 0.997 0.997 0.997 0.998)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.757
Average program size in population (points): 69.617
Average percent parens in population: 0.276
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.297
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 489997
--- Timings ---
Current time: 1559593945129 milliseconds
Total Time:           2.7 seconds
Initialization:       0.1 seconds,  4.2%
Reproduction:         0.8 seconds, 30.3%
Fitness Testing:      1.8 seconds, 65.5%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 646
Test mean error for best: 0.64600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -65                 | Program output: 30                 
Correct output: -43                 | Program output: 35                 
Correct output: -45                 | Program output: 41                 
Correct output: 63                  | Program output: 63                 
Correct output: -85                 | Program output: -85                
Correct output: 42                  | Program output: 42                 
Correct output: -50                 | Program output: 60                 
Correct output: -68                 | Program output: -68                
Correct output: -68                 | Program output: -60                
Correct output: 45                  | Program output: 45                 
Correct output: 8                   | Program output: 8                  
Correct output: 86                  | Program output: 86                 
Correct output: -81                 | Program output: -81                
Correct output: -100                | Program output: -100               
Correct output: -10                 | Program output: -10                
Correct output: 18                  | Program output: 52                 
Correct output: 8                   | Program output: 49                 
Correct output: 2                   | Program output: 75                 
Correct output: 27                  | Program output: 96                 
Correct output: 4                   | Program output: 86                 
Correct output: 4                   | Program output: 62                 
Correct output: 0                   | Program output: 16                 
Correct output: 4                   | Program output: 95                 
Correct output: 16                  | Program output: 38                 
Correct output: 7                   | Program output: 88                 
Correct output: 0                   | Program output: 54                 
Correct output: 4                   | Program output: 4                  
Correct output: 6                   | Program output: 63                 
Correct output: 18                  | Program output: 92                 
Correct output: 16                  | Program output: 16                 
Correct output: 34                  | Program output: 62                 
Correct output: 3                   | Program output: 66                 
Correct output: 21                  | Program output: 31                 
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 62                 
Correct output: -55                 | Program output: 58                 
Correct output: -84                 | Program output: -84                
Correct output: -96                 | Program output: -96                
Correct output: -87                 | Program output: -28                
Correct output: -70                 | Program output: 76                 
Correct output: -88                 | Program output: 73                 
Correct output: -58                 | Program output: -5                 
Correct output: -25                 | Program output: 24                 
Correct output: -62                 | Program output: -27                
Correct output: -96                 | Program output: 66                 
Correct output: -88                 | Program output: 20                 
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: -88                
Correct output: -74                 | Program output: 95                 
Correct output: -57                 | Program output: -57                
Correct output: -58                 | Program output: 8                  
Correct output: -93                 | Program output: -93                
Correct output: -70                 | Program output: 95                 
Correct output: 34                  | Program output: 48                 
Correct output: -31                 | Program output: -31                
Correct output: -79                 | Program output: -79                
Correct output: -73                 | Program output: -73                
Correct output: -61                 | Program output: -15                
Correct output: -2                  | Program output: 47                 
Correct output: -90                 | Program output: -90                
Correct output: -71                 | Program output: -71                
Correct output: -74                 | Program output: -71                
Correct output: -58                 | Program output: -58                
Correct output: -74                 | Program output: -68                
Correct output: -75                 | Program output: -75                
Correct output: -12                 | Program output: -12                
Correct output: 34                  | Program output: 56                 
Correct output: -17                 | Program output: -17                
Correct output: -99                 | Program output: -73                
Correct output: -88                 | Program output: -74                
Correct output: -49                 | Program output: 66                 
Correct output: -42                 | Program output: 21                 
Correct output: -61                 | Program output: -5                 
Correct output: -26                 | Program output: -26                
Correct output: -92                 | Program output: 3                  
Correct output: -40                 | Program output: -25                
Correct output: -60                 | Program output: 10                 
Correct output: 8                   | Program output: 59                 
Correct output: -85                 | Program output: -79                
Correct output: -98                 | Program output: -98                
Correct output: 61                  | Program output: 68                 
Correct output: -67                 | Program output: 62                 
Correct output: -48                 | Program output: 21                 
Correct output: -78                 | Program output: -78                
Correct output: -76                 | Program output: 59                 
Correct output: -83                 | Program output: 99                 
Correct output: -12                 | Program output: 60                 
Correct output: -92                 | Program output: 82                 
Correct output: -23                 | Program output: 13                 
Correct output: -70                 | Program output: -47                
Correct output: -67                 | Program output: -67                
Correct output: -18                 | Program output: 34                 
Correct output: -81                 | Program output: -81                
Correct output: -92                 | Program output: -92                
Correct output: -81                 | Program output: 82                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_while} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_while} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction tag_integer_740} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_when} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_yankdup} {:close 0, :instruction tagged_103} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_items} {:close 0, :instruction 44} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_gt} {:close 0, :instruction print_newline} {:close 1, :instruction integer_dup_times} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction -57} {:close 2, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_dup} {:close 0, :instruction tag_integer_863} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_yank} {:close 3, :instruction integer_swap} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_if} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_eq} {:close 1, :instruction in1} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_yankdup})
Lexicase best program: (exec_while () boolean_pop integer_lte exec_dup_times (exec_eq exec_pop (integer_mod boolean_invert_second_then_and) integer_min integer_swap) integer_mult exec_while (integer_yank boolean_xor boolean_xor integer_dup_times boolean_yank boolean_yankdup exec_dup (integer_inc tag_integer_740 boolean_or boolean_flush exec_empty boolean_frominteger integer_min integer_inc boolean_stackdepth) exec_y_when_autoconstructing (exec_when () exec_dup_items integer_dec integer_yank exec_yankdup tagged_103 exec_do*while (in1 integer_stackdepth exec_dup_items 44 boolean_dup exec_noop exec_dup_times (integer_dup_items integer_inc boolean_invert_first_then_and integer_swap integer_gt print_newline integer_dup_times) integer_lte) exec_yank exec_yank integer_lt -57 exec_swap () () exec_k_when_autoconstructing (boolean_dup) (tag_integer_863 exec_dup_items) boolean_stackdepth exec_yank exec_while () boolean_yank) integer_swap) boolean_shove integer_max exec_do*range (exec_eq exec_if (print_boolean integer_lt) (exec_s_when_autoconstructing (in3 exec_pop (boolean_eq in1) integer_gt exec_empty) (print_integer boolean_eq exec_flush boolean_yank boolean_and integer_flush) (print_boolean boolean_rot integer_dec integer_gt) integer_gt) boolean_rot exec_dup_items boolean_or exec_do*times (exec_yankdup boolean_flush integer_yank) exec_yank integer_shove integer_max boolean_dup integer_flush boolean_yankdup))
Lexicase best errors: [0 0 0 0 1 1 1 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 126
Percent parens: 0.183
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_while} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_while} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction tag_integer_740} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_when} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_yankdup} {:close 0, :instruction tagged_103} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_items} {:close 0, :instruction 44} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_gt} {:close 0, :instruction print_newline} {:close 1, :instruction integer_dup_times} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction -57} {:close 2, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_dup} {:close 0, :instruction tag_integer_863} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_yank} {:close 3, :instruction integer_swap} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_if} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_eq} {:close 1, :instruction in1} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_yankdup})
Zero cases best program: (exec_while () boolean_pop integer_lte exec_dup_times (exec_eq exec_pop (integer_mod boolean_invert_second_then_and) integer_min integer_swap) integer_mult exec_while (integer_yank boolean_xor boolean_xor integer_dup_times boolean_yank boolean_yankdup exec_dup (integer_inc tag_integer_740 boolean_or boolean_flush exec_empty boolean_frominteger integer_min integer_inc boolean_stackdepth) exec_y_when_autoconstructing (exec_when () exec_dup_items integer_dec integer_yank exec_yankdup tagged_103 exec_do*while (in1 integer_stackdepth exec_dup_items 44 boolean_dup exec_noop exec_dup_times (integer_dup_items integer_inc boolean_invert_first_then_and integer_swap integer_gt print_newline integer_dup_times) integer_lte) exec_yank exec_yank integer_lt -57 exec_swap () () exec_k_when_autoconstructing (boolean_dup) (tag_integer_863 exec_dup_items) boolean_stackdepth exec_yank exec_while () boolean_yank) integer_swap) boolean_shove integer_max exec_do*range (exec_eq exec_if (print_boolean integer_lt) (exec_s_when_autoconstructing (in3 exec_pop (boolean_eq in1) integer_gt exec_empty) (print_integer boolean_eq exec_flush boolean_yank boolean_and integer_flush) (print_boolean boolean_rot integer_dec integer_gt) integer_gt) boolean_rot exec_dup_items boolean_or exec_do*times (exec_yankdup boolean_flush integer_yank) exec_yank integer_shove integer_max boolean_dup integer_flush boolean_yankdup))
Zero cases best errors: [0 0 0 0 1 1 1 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 126
Percent parens: 0.183
--- Lexicase Population Statistics ---
Count of elite individuals by case: (174 176 176 465 141 23 22 149 466 118)
Population mean number of elite cases: 1.91
Count of perfect (error zero) individuals by case: (174 176 176 465 141 23 22 149 466 118)
Population mean number of perfect (error zero) cases: 1.91
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*count} {:close 0, :instruction in3} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tagged_375} {:close 0, :instruction integer_yankdup} {:close 2, :instruction integer_gte} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_shove} {:close 1, :instruction print_newline} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_rot} {:close 0, :instruction in3} {:close 0, :instruction integer_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_swap} {:close 1, :instruction tag_exec_522} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction print_exec} {:close 0, :instruction integer_gt} {:close 2, :instruction integer_empty} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_if} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_pop} {:close 1, :instruction in3} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_while} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction in4})
Best program: (exec_do*count (in3 integer_div boolean_yank) integer_sub integer_shove exec_k (exec_dup (exec_rot (boolean_invert_first_then_and) (exec_pop (exec_dup (exec_k_when_autoconstructing () (tagged_375 integer_yankdup integer_gte)) integer_swap boolean_frominteger boolean_frominteger integer_shove print_newline) print_integer exec_s (exec_empty exec_y (boolean_rot in3 integer_pop in4 boolean_swap boolean_and integer_gt) exec_dup (boolean_swap tag_exec_522 () exec_swap (boolean_pop exec_s_when_autoconstructing () (integer_stackdepth integer_fromboolean) (integer_dup_times in2 boolean_pop exec_dup_items integer_flush) exec_flush integer_dup print_exec (integer_gt integer_empty)) (exec_eq) integer_mult boolean_yankdup) exec_if (integer_eq boolean_pop in3) (integer_empty) boolean_empty exec_noop boolean_empty exec_yank exec_while (exec_yank exec_empty exec_pop (integer_inc in2 exec_pop () exec_swap (exec_k_when_autoconstructing (boolean_or) (integer_empty boolean_shove) integer_rot integer_gte boolean_dup_times in4) ()))) () ()) ())) ())
Errors: [0 0 0 0 1 1 1 1 0 1]
Total: 5
Mean: 0.5
Genome size: 78
Size: 111
Percent parens: 0.297
--- Population Statistics ---
Average total errors in population: 8.09
Median total errors in population: 10
Error averages by case: (0.826 0.824 0.824 0.535 0.859 0.977 0.978 0.851 0.534 0.882)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 66.827
Average program size in population (points): 91.824
Average percent parens in population: 0.280
Minimum age in population: 1.0
Maximum age in population: 1.0
Average age in population: 1.0
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 19
Genome diversity (% unique genomes):	 0.96
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 19
Syntactic diversity (% unique Push programs):	 0.96
Total error diversity:				 0.006
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.167
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 1073559
--- Timings ---
Current time: 1559593947826 milliseconds
Total Time:           5.3 seconds
Initialization:       0.1 seconds,  2.1%
Reproduction:         1.8 seconds, 33.8%
Fitness Testing:      2.4 seconds, 45.1%
Report:               1.0 seconds, 18.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 636
Test mean error for best: 0.63600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -65                 | Program output: 30                 
Correct output: -43                 | Program output: -43                
Correct output: -45                 | Program output: 41                 
Correct output: 63                  | Program output: 63                 
Correct output: -85                 | Program output: -85                
Correct output: 42                  | Program output: 81                 
Correct output: -50                 | Program output: -50                
Correct output: -68                 | Program output: -68                
Correct output: -68                 | Program output: -68                
Correct output: 45                  | Program output: 86                 
Correct output: 8                   | Program output: 8                  
Correct output: 86                  | Program output: 86                 
Correct output: -81                 | Program output: -81                
Correct output: -100                | Program output: -100               
Correct output: -10                 | Program output: -10                
Correct output: 18                  | Program output: 18                 
Correct output: 8                   | Program output: 67                 
Correct output: 2                   | Program output: 89                 
Correct output: 27                  | Program output: 99                 
Correct output: 4                   | Program output: 97                 
Correct output: 4                   | Program output: 32                 
Correct output: 0                   | Program output: 53                 
Correct output: 4                   | Program output: 49                 
Correct output: 16                  | Program output: 27                 
Correct output: 7                   | Program output: 53                 
Correct output: 0                   | Program output: 0                  
Correct output: 4                   | Program output: 24                 
Correct output: 6                   | Program output: 7                  
Correct output: 18                  | Program output: 59                 
Correct output: 16                  | Program output: 22                 
Correct output: 34                  | Program output: 55                 
Correct output: 3                   | Program output: 69                 
Correct output: 21                  | Program output: 48                 
Correct output: 6                   | Program output: 38                 
Correct output: 7                   | Program output: 34                 
Correct output: -55                 | Program output: -55                
Correct output: -84                 | Program output: -16                
Correct output: -96                 | Program output: 32                 
Correct output: -87                 | Program output: 95                 
Correct output: -70                 | Program output: -70                
Correct output: -88                 | Program output: 78                 
Correct output: -58                 | Program output: -51                
Correct output: -25                 | Program output: -25                
Correct output: -62                 | Program output: -32                
Correct output: -96                 | Program output: 100                
Correct output: -88                 | Program output: 86                 
Correct output: -71                 | Program output: 67                 
Correct output: -88                 | Program output: 70                 
Correct output: -74                 | Program output: 4                  
Correct output: -57                 | Program output: 36                 
Correct output: -58                 | Program output: 48                 
Correct output: -93                 | Program output: -63                
Correct output: -70                 | Program output: -70                
Correct output: 34                  | Program output: 76                 
Correct output: -31                 | Program output: 70                 
Correct output: -79                 | Program output: -47                
Correct output: -73                 | Program output: -55                
Correct output: -61                 | Program output: 2                  
Correct output: -2                  | Program output: -2                 
Correct output: -90                 | Program output: 31                 
Correct output: -71                 | Program output: 53                 
Correct output: -74                 | Program output: 23                 
Correct output: -58                 | Program output: 58                 
Correct output: -74                 | Program output: -19                
Correct output: -75                 | Program output: -52                
Correct output: -12                 | Program output: -11                
Correct output: 34                  | Program output: 34                 
Correct output: -17                 | Program output: 59                 
Correct output: -99                 | Program output: -19                
Correct output: -88                 | Program output: -88                
Correct output: -49                 | Program output: -49                
Correct output: -42                 | Program output: -33                
Correct output: -61                 | Program output: -61                
Correct output: -26                 | Program output: 81                 
Correct output: -92                 | Program output: -66                
Correct output: -40                 | Program output: 60                 
Correct output: -60                 | Program output: -60                
Correct output: 8                   | Program output: 31                 
Correct output: -85                 | Program output: 16                 
Correct output: -98                 | Program output: 89                 
Correct output: 61                  | Program output: 70                 
Correct output: -67                 | Program output: -67                
Correct output: -48                 | Program output: 9                  
Correct output: -78                 | Program output: 27                 
Correct output: -76                 | Program output: -76                
Correct output: -83                 | Program output: -37                
Correct output: -12                 | Program output: 34                 
Correct output: -92                 | Program output: 74                 
Correct output: -23                 | Program output: -23                
Correct output: -70                 | Program output: -70                
Correct output: -67                 | Program output: -47                
Correct output: -18                 | Program output: 98                 
Correct output: -81                 | Program output: 41                 
Correct output: -92                 | Program output: 86                 
Correct output: -81                 | Program output: -81                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_k} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_flush} {:close 1, :instruction in3} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_dup_times} {:close 0, :instruction tag_integer_273} {:close 0, :instruction integer_stackdepth})
Lexicase best program: (exec_s_when_autoconstructing (integer_yankdup boolean_shove boolean_and exec_when (boolean_yank) exec_dup (exec_do*count (integer_stackdepth integer_empty exec_yank) exec_s_when_autoconstructing (boolean_frominteger) (boolean_not exec_dup (integer_min exec_s (integer_swap) (exec_k (exec_shove (integer_yankdup) exec_do*while (exec_y_when_autoconstructing (exec_dup ()) integer_yank boolean_eq in3 in1 exec_s_when_autoconstructing (print_integer boolean_empty) (boolean_dup boolean_invert_second_then_and integer_eq boolean_dup_times exec_dup_times (boolean_flush integer_gte exec_s () (boolean_xor integer_pop exec_y (integer_yankdup) integer_mult boolean_rot boolean_flush) (in3) exec_empty exec_dup_times () tag_integer_273 integer_stackdepth)) ())) ()) ())) ())) () ())
Lexicase best errors: [0 0 1 1 1 0 1 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 80
Percent parens: 0.363
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_k} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_flush} {:close 1, :instruction in3} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_dup_times} {:close 0, :instruction tag_integer_273} {:close 0, :instruction integer_stackdepth})
Zero cases best program: (exec_s_when_autoconstructing (integer_yankdup boolean_shove boolean_and exec_when (boolean_yank) exec_dup (exec_do*count (integer_stackdepth integer_empty exec_yank) exec_s_when_autoconstructing (boolean_frominteger) (boolean_not exec_dup (integer_min exec_s (integer_swap) (exec_k (exec_shove (integer_yankdup) exec_do*while (exec_y_when_autoconstructing (exec_dup ()) integer_yank boolean_eq in3 in1 exec_s_when_autoconstructing (print_integer boolean_empty) (boolean_dup boolean_invert_second_then_and integer_eq boolean_dup_times exec_dup_times (boolean_flush integer_gte exec_s () (boolean_xor integer_pop exec_y (integer_yankdup) integer_mult boolean_rot boolean_flush) (in3) exec_empty exec_dup_times () tag_integer_273 integer_stackdepth)) ())) ()) ())) ())) () ())
Zero cases best errors: [0 0 1 1 1 0 1 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 80
Percent parens: 0.363
--- Lexicase Population Statistics ---
Count of elite individuals by case: (281 237 137 90 137 122 112 475 90 54)
Population mean number of elite cases: 1.74
Count of perfect (error zero) individuals by case: (281 237 137 90 137 122 112 475 90 54)
Population mean number of perfect (error zero) cases: 1.74
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction tagged_42} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_when} {:close 0, :instruction exec_while} {:close 0, :instruction print_newline} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_when} {:close 0, :instruction in1} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction tag_boolean_635} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_lt} {:close 1, :instruction exec_rot} {:close 0, :instruction -15} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_dup_items} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s} {:close 1, :instruction exec_eq} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_yank} {:close 0, :instruction tag_integer_898} {:close 1, :instruction exec_pop} {:close 1, :instruction integer_min} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing})
Best program: (exec_s_when_autoconstructing () (boolean_stackdepth exec_stackdepth) (integer_mult exec_noop boolean_dup_items exec_stackdepth exec_do*times (integer_pop integer_empty integer_fromboolean tagged_42 boolean_eq exec_when (exec_while (print_newline integer_yank) exec_s_when_autoconstructing () (exec_when () in1 boolean_rot integer_yankdup integer_inc) (integer_shove boolean_invert_second_then_and exec_y_when_autoconstructing () boolean_and tag_boolean_635 boolean_invert_second_then_and boolean_dup_items) in1 print_boolean integer_empty integer_min) exec_s_when_autoconstructing (print_integer) (integer_div exec_s (boolean_dup_items boolean_eq exec_flush) (boolean_yankdup integer_fromboolean boolean_invert_second_then_and integer_gte exec_pop (integer_lt) exec_rot () (-15 exec_dup_items integer_dup) (integer_mult) integer_rot exec_dup_items) (in4 integer_sub boolean_frominteger exec_s (exec_eq) (print_newline boolean_dup_times integer_dup_items exec_dup_times (integer_flush boolean_pop exec_yank) tag_integer_898 exec_pop () integer_min) (integer_stackdepth exec_k_when_autoconstructing () ()))) ())))
Errors: [0 0 1 1 1 0 1 0 1 0]
Total: 5
Mean: 0.5
Genome size: 71
Size: 100
Percent parens: 0.290
--- Population Statistics ---
Average total errors in population: 8.265
Median total errors in population: 10
Error averages by case: (0.719 0.763 0.863 0.91 0.863 0.878 0.888 0.525 0.91 0.946)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 65.628
Average program size in population (points): 93.179
Average percent parens in population: 0.297
Minimum age in population: 2.0
Maximum age in population: 2.0
Average age in population: 2.0
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 6
Genome diversity (% unique genomes):	 0.988
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.988
Total error diversity:				 0.006
Error (vector) diversity:			 0.02
Behavioral diversity:				 0.223
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1752657
--- Timings ---
Current time: 1559593950196 milliseconds
Total Time:           8.3 seconds
Initialization:       0.1 seconds,  1.4%
Reproduction:         3.0 seconds, 36.5%
Fitness Testing:      3.1 seconds, 37.3%
Report:               2.1 seconds, 24.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 408
Test mean error for best: 0.40800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -65                 | Program output: -65                
Correct output: -43                 | Program output: -43                
Correct output: -45                 | Program output: -45                
Correct output: 63                  | Program output: 63                 
Correct output: -85                 | Program output: -85                
Correct output: 42                  | Program output: 81                 
Correct output: -50                 | Program output: -50                
Correct output: -68                 | Program output: -68                
Correct output: -68                 | Program output: -68                
Correct output: 45                  | Program output: 45                 
Correct output: 8                   | Program output: 8                  
Correct output: 86                  | Program output: 86                 
Correct output: -81                 | Program output: -81                
Correct output: -100                | Program output: -100               
Correct output: -10                 | Program output: -10                
Correct output: 18                  | Program output: 18                 
Correct output: 8                   | Program output: 67                 
Correct output: 2                   | Program output: 89                 
Correct output: 27                  | Program output: 98                 
Correct output: 4                   | Program output: 4                  
Correct output: 4                   | Program output: 4                  
Correct output: 0                   | Program output: 0                  
Correct output: 4                   | Program output: 49                 
Correct output: 16                  | Program output: 21                 
Correct output: 7                   | Program output: 40                 
Correct output: 0                   | Program output: 0                  
Correct output: 4                   | Program output: 24                 
Correct output: 6                   | Program output: 6                  
Correct output: 18                  | Program output: 18                 
Correct output: 16                  | Program output: 22                 
Correct output: 34                  | Program output: 34                 
Correct output: 3                   | Program output: 3                  
Correct output: 21                  | Program output: 21                 
Correct output: 6                   | Program output: 38                 
Correct output: 7                   | Program output: 7                  
Correct output: -55                 | Program output: -55                
Correct output: -84                 | Program output: -16                
Correct output: -96                 | Program output: -35                
Correct output: -87                 | Program output: -87                
Correct output: -70                 | Program output: -70                
Correct output: -88                 | Program output: -11                
Correct output: -58                 | Program output: -58                
Correct output: -25                 | Program output: -25                
Correct output: -62                 | Program output: -32                
Correct output: -96                 | Program output: 33                 
Correct output: -88                 | Program output: -88                
Correct output: -71                 | Program output: 52                 
Correct output: -88                 | Program output: 51                 
Correct output: -74                 | Program output: -74                
Correct output: -57                 | Program output: 36                 
Correct output: -58                 | Program output: -7                 
Correct output: -93                 | Program output: -63                
Correct output: -70                 | Program output: -70                
Correct output: 34                  | Program output: 34                 
Correct output: -31                 | Program output: 12                 
Correct output: -79                 | Program output: -47                
Correct output: -73                 | Program output: -55                
Correct output: -61                 | Program output: -40                
Correct output: -2                  | Program output: -2                 
Correct output: -90                 | Program output: -61                
Correct output: -71                 | Program output: -25                
Correct output: -74                 | Program output: -74                
Correct output: -58                 | Program output: -26                
Correct output: -74                 | Program output: -74                
Correct output: -75                 | Program output: -52                
Correct output: -12                 | Program output: -11                
Correct output: 34                  | Program output: 34                 
Correct output: -17                 | Program output: 55                 
Correct output: -99                 | Program output: -99                
Correct output: -88                 | Program output: -88                
Correct output: -49                 | Program output: -49                
Correct output: -42                 | Program output: -42                
Correct output: -61                 | Program output: -61                
Correct output: -26                 | Program output: 33                 
Correct output: -92                 | Program output: -90                
Correct output: -40                 | Program output: -40                
Correct output: -60                 | Program output: -60                
Correct output: 8                   | Program output: 8                  
Correct output: -85                 | Program output: -3                 
Correct output: -98                 | Program output: -83                
Correct output: 61                  | Program output: 61                 
Correct output: -67                 | Program output: -67                
Correct output: -48                 | Program output: 9                  
Correct output: -78                 | Program output: -27                
Correct output: -76                 | Program output: -76                
Correct output: -83                 | Program output: -83                
Correct output: -12                 | Program output: -12                
Correct output: -92                 | Program output: -92                
Correct output: -23                 | Program output: -23                
Correct output: -70                 | Program output: -70                
Correct output: -67                 | Program output: -47                
Correct output: -18                 | Program output: 60                 
Correct output: -81                 | Program output: 1                  
Correct output: -92                 | Program output: 16                 
Correct output: -81                 | Program output: -81                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction tagged_468} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_s} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_items} {:close 0, :instruction tagged_42} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_when} {:close 0, :instruction exec_while} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_when} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_360} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_swap} {:close 1, :instruction print_exec} {:close 0, :instruction -15} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_yank} {:close 0, :instruction tag_integer_898} {:close 1, :instruction exec_pop} {:close 1, :instruction integer_min} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*range})
Lexicase best program: (exec_s_when_autoconstructing () (tagged_468 boolean_stackdepth exec_stackdepth) (integer_mult exec_do*range () exec_noop exec_stackdepth exec_do*times (boolean_eq integer_pop exec_s () (integer_empty integer_fromboolean integer_dup_items tagged_42 boolean_eq exec_when (exec_while (exec_noop integer_yank) exec_when () exec_pop (in1 exec_when (boolean_invert_second_then_and boolean_rot integer_inc) integer_dup exec_yankdup boolean_stackdepth boolean_invert_second_then_and tagged_360 integer_swap exec_y_when_autoconstructing () integer_fromboolean boolean_dup_items) in1 in2 integer_empty integer_min) exec_s_when_autoconstructing (print_integer) (boolean_eq exec_flush) (boolean_yankdup exec_yankdup integer_rot) integer_fromboolean boolean_invert_second_then_and exec_noop boolean_or exec_k_when_autoconstructing () (boolean_or) boolean_swap print_exec () -15 exec_dup_items integer_dup) (integer_gt exec_y_when_autoconstructing (exec_dup_items) exec_eq in4 integer_sub exec_dup_times () boolean_frominteger integer_div exec_s (exec_y (exec_eq) integer_dup_items boolean_pop exec_yank) (tag_integer_898 exec_pop () integer_min) (integer_stackdepth integer_empty exec_k_when_autoconstructing (boolean_flush exec_do*range ()) ())))))
Lexicase best errors: [0 1 0 0 0 1 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 113
Percent parens: 0.274
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction tagged_468} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_s} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_items} {:close 0, :instruction tagged_42} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_when} {:close 0, :instruction exec_while} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_when} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_360} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_swap} {:close 1, :instruction print_exec} {:close 0, :instruction -15} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_yank} {:close 0, :instruction tag_integer_898} {:close 1, :instruction exec_pop} {:close 1, :instruction integer_min} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*range})
Zero cases best program: (exec_s_when_autoconstructing () (tagged_468 boolean_stackdepth exec_stackdepth) (integer_mult exec_do*range () exec_noop exec_stackdepth exec_do*times (boolean_eq integer_pop exec_s () (integer_empty integer_fromboolean integer_dup_items tagged_42 boolean_eq exec_when (exec_while (exec_noop integer_yank) exec_when () exec_pop (in1 exec_when (boolean_invert_second_then_and boolean_rot integer_inc) integer_dup exec_yankdup boolean_stackdepth boolean_invert_second_then_and tagged_360 integer_swap exec_y_when_autoconstructing () integer_fromboolean boolean_dup_items) in1 in2 integer_empty integer_min) exec_s_when_autoconstructing (print_integer) (boolean_eq exec_flush) (boolean_yankdup exec_yankdup integer_rot) integer_fromboolean boolean_invert_second_then_and exec_noop boolean_or exec_k_when_autoconstructing () (boolean_or) boolean_swap print_exec () -15 exec_dup_items integer_dup) (integer_gt exec_y_when_autoconstructing (exec_dup_items) exec_eq in4 integer_sub exec_dup_times () boolean_frominteger integer_div exec_s (exec_y (exec_eq) integer_dup_items boolean_pop exec_yank) (tag_integer_898 exec_pop () integer_min) (integer_stackdepth integer_empty exec_k_when_autoconstructing (boolean_flush exec_do*range ()) ())))))
Zero cases best errors: [0 1 0 0 0 1 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 113
Percent parens: 0.274
--- Lexicase Population Statistics ---
Count of elite individuals by case: (560 213 113 113 115 102 560 116 115 132)
Population mean number of elite cases: 2.14
Count of perfect (error zero) individuals by case: (560 213 113 113 115 102 560 116 115 132)
Population mean number of perfect (error zero) cases: 2.14
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction exec_while} {:close 1, :instruction integer_yank} {:close 0, :instruction in2} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_when} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction exec_s} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_flush} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_flush} {:close 0, :instruction in1} {:close 1, :instruction exec_yank} {:close 0, :instruction tag_integer_898} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_min} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer})
Best program: (exec_s_when_autoconstructing () (boolean_stackdepth exec_stackdepth) (integer_mult exec_noop boolean_dup_times boolean_dup_items exec_do*times (integer_div boolean_eq integer_empty integer_fromboolean boolean_eq exec_dup_times () exec_when (exec_while (integer_yank) in2 exec_s_when_autoconstructing () (exec_when () exec_pop (in1 boolean_rot integer_yankdup integer_inc) integer_shove integer_dup integer_swap integer_fromboolean in1 boolean_invert_second_then_and in1 in1 print_boolean integer_gt) (integer_min) exec_s_when_autoconstructing (print_integer) (exec_s (exec_flush) (boolean_yankdup exec_yankdup boolean_invert_second_then_and integer_flush) (integer_lt) exec_s_when_autoconstructing (boolean_swap exec_dup_items integer_dup) (exec_y_when_autoconstructing (integer_rot exec_dup_items) integer_yank in4 integer_sub exec_s (exec_stackdepth boolean_dup_times integer_flush in1 exec_yank) (tag_integer_898 exec_pop () boolean_invert_second_then_and integer_min) (integer_empty integer_sub print_integer)) ()) ()))))
Errors: [0 1 0 0 0 1 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 68
Size: 95
Percent parens: 0.284
--- Population Statistics ---
Average total errors in population: 7.861
Median total errors in population: 7
Error averages by case: (0.44 0.787 0.887 0.887 0.885 0.898 0.44 0.884 0.885 0.868)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 59.644
Average program size in population (points): 84.132
Average percent parens in population: 0.292
Minimum age in population: 3.0
Maximum age in population: 3.0
Average age in population: 3.0
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 3
Genome diversity (% unique genomes):	 0.988
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.988
Total error diversity:				 0.009
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.167
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 2352773
--- Timings ---
Current time: 1559593952302 milliseconds
Total Time:          10.5 seconds
Initialization:       0.1 seconds,  1.1%
Reproduction:         4.2 seconds, 39.7%
Fitness Testing:      3.7 seconds, 35.4%
Report:               2.5 seconds, 23.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 412
Test mean error for best: 0.41200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -65                 | Program output: 30                 
Correct output: -43                 | Program output: -43                
Correct output: -45                 | Program output: 41                 
Correct output: 63                  | Program output: 63                 
Correct output: -85                 | Program output: -85                
Correct output: 42                  | Program output: 42                 
Correct output: -50                 | Program output: -50                
Correct output: -68                 | Program output: -68                
Correct output: -68                 | Program output: -68                
Correct output: 45                  | Program output: 45                 
Correct output: 8                   | Program output: 8                  
Correct output: 86                  | Program output: 86                 
Correct output: -81                 | Program output: -81                
Correct output: -100                | Program output: -100               
Correct output: -10                 | Program output: -10                
Correct output: 18                  | Program output: 18                 
Correct output: 8                   | Program output: 49                 
Correct output: 2                   | Program output: 75                 
Correct output: 27                  | Program output: 96                 
Correct output: 4                   | Program output: 86                 
Correct output: 4                   | Program output: 32                 
Correct output: 0                   | Program output: 16                 
Correct output: 4                   | Program output: 49                 
Correct output: 16                  | Program output: 27                 
Correct output: 7                   | Program output: 53                 
Correct output: 0                   | Program output: 0                  
Correct output: 4                   | Program output: 4                  
Correct output: 6                   | Program output: 7                  
Correct output: 18                  | Program output: 59                 
Correct output: 16                  | Program output: 16                 
Correct output: 34                  | Program output: 55                 
Correct output: 3                   | Program output: 66                 
Correct output: 21                  | Program output: 31                 
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 34                 
Correct output: -55                 | Program output: -55                
Correct output: -84                 | Program output: -84                
Correct output: -96                 | Program output: -96                
Correct output: -87                 | Program output: -28                
Correct output: -70                 | Program output: -70                
Correct output: -88                 | Program output: 73                 
Correct output: -58                 | Program output: -51                
Correct output: -25                 | Program output: -25                
Correct output: -62                 | Program output: -32                
Correct output: -96                 | Program output: 66                 
Correct output: -88                 | Program output: 20                 
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: -88                
Correct output: -74                 | Program output: 4                  
Correct output: -57                 | Program output: -57                
Correct output: -58                 | Program output: 8                  
Correct output: -93                 | Program output: -93                
Correct output: -70                 | Program output: -70                
Correct output: 34                  | Program output: 48                 
Correct output: -31                 | Program output: -31                
Correct output: -79                 | Program output: -79                
Correct output: -73                 | Program output: -73                
Correct output: -61                 | Program output: -15                
Correct output: -2                  | Program output: -2                 
Correct output: -90                 | Program output: -90                
Correct output: -71                 | Program output: -71                
Correct output: -74                 | Program output: -71                
Correct output: -58                 | Program output: -58                
Correct output: -74                 | Program output: -68                
Correct output: -75                 | Program output: -75                
Correct output: -12                 | Program output: -12                
Correct output: 34                  | Program output: 34                 
Correct output: -17                 | Program output: -17                
Correct output: -99                 | Program output: -73                
Correct output: -88                 | Program output: -88                
Correct output: -49                 | Program output: -49                
Correct output: -42                 | Program output: -33                
Correct output: -61                 | Program output: -61                
Correct output: -26                 | Program output: -26                
Correct output: -92                 | Program output: -66                
Correct output: -40                 | Program output: -25                
Correct output: -60                 | Program output: -60                
Correct output: 8                   | Program output: 31                 
Correct output: -85                 | Program output: -79                
Correct output: -98                 | Program output: -98                
Correct output: 61                  | Program output: 68                 
Correct output: -67                 | Program output: -67                
Correct output: -48                 | Program output: 9                  
Correct output: -78                 | Program output: -78                
Correct output: -76                 | Program output: -76                
Correct output: -83                 | Program output: -37                
Correct output: -12                 | Program output: 34                 
Correct output: -92                 | Program output: 74                 
Correct output: -23                 | Program output: -23                
Correct output: -70                 | Program output: -70                
Correct output: -67                 | Program output: -67                
Correct output: -18                 | Program output: 34                 
Correct output: -81                 | Program output: -81                
Correct output: -92                 | Program output: -92                
Correct output: -81                 | Program output: -81                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction tagged_42} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_when} {:close 0, :instruction exec_while} {:close 0, :instruction print_newline} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_when} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction print_boolean} {:close 0, :instruction in3} {:close 1, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction -15} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_s} {:close 0, :instruction exec_while} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_min} {:close 0, :instruction print_exec} {:close 1, :instruction exec_s} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_k_when_autoconstructing})
Lexicase best program: (boolean_stackdepth exec_stackdepth integer_mult exec_noop boolean_dup_items integer_dup_items exec_do*times (boolean_eq integer_pop tagged_42 boolean_eq exec_when (exec_while (print_newline integer_yank) exec_s_when_autoconstructing () (exec_when () exec_pop (exec_when (integer_yankdup integer_inc) integer_shove integer_dup boolean_invert_second_then_and boolean_dup_items) in1 print_boolean in3 integer_min) (exec_s_when_autoconstructing (print_integer) (exec_rot (boolean_eq boolean_frominteger exec_flush) (exec_pop (boolean_yankdup exec_yankdup integer_fromboolean integer_lt boolean_invert_second_then_and integer_pop boolean_or -15 exec_dup_items exec_pop (integer_dup) integer_rot exec_dup_items) integer_gte in4 integer_sub boolean_frominteger boolean_pop exec_s (exec_while (integer_stackdepth integer_min) print_exec (exec_s () (integer_empty exec_k_when_autoconstructing () ()) ())) () ()) ()) ()))))
Lexicase best errors: [0 0 0 0 0 0 1 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 90
Percent parens: 0.311
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction tagged_42} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_when} {:close 0, :instruction exec_while} {:close 0, :instruction print_newline} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_when} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction print_boolean} {:close 0, :instruction in3} {:close 1, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction -15} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_s} {:close 0, :instruction exec_while} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_min} {:close 0, :instruction print_exec} {:close 1, :instruction exec_s} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_k_when_autoconstructing})
Zero cases best program: (boolean_stackdepth exec_stackdepth integer_mult exec_noop boolean_dup_items integer_dup_items exec_do*times (boolean_eq integer_pop tagged_42 boolean_eq exec_when (exec_while (print_newline integer_yank) exec_s_when_autoconstructing () (exec_when () exec_pop (exec_when (integer_yankdup integer_inc) integer_shove integer_dup boolean_invert_second_then_and boolean_dup_items) in1 print_boolean in3 integer_min) (exec_s_when_autoconstructing (print_integer) (exec_rot (boolean_eq boolean_frominteger exec_flush) (exec_pop (boolean_yankdup exec_yankdup integer_fromboolean integer_lt boolean_invert_second_then_and integer_pop boolean_or -15 exec_dup_items exec_pop (integer_dup) integer_rot exec_dup_items) integer_gte in4 integer_sub boolean_frominteger boolean_pop exec_s (exec_while (integer_stackdepth integer_min) print_exec (exec_s () (integer_empty exec_k_when_autoconstructing () ()) ())) () ()) ()) ()))))
Zero cases best errors: [0 0 0 0 0 0 1 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 90
Percent parens: 0.311
--- Lexicase Population Statistics ---
Count of elite individuals by case: (375 45 45 227 46 45 182 227 45 45)
Population mean number of elite cases: 1.28
Count of perfect (error zero) individuals by case: (375 45 45 227 46 45 182 227 45 45)
Population mean number of perfect (error zero) cases: 1.28
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction tagged_42} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_when} {:close 0, :instruction exec_while} {:close 0, :instruction print_newline} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction print_boolean} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 1, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_dup_items} {:close 0, :instruction -15} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction in4} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_while} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_min} {:close 1, :instruction exec_s} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_k_when_autoconstructing})
Best program: (exec_s_when_autoconstructing () (boolean_stackdepth exec_stackdepth) (integer_mult exec_noop boolean_dup_items integer_dup_items) exec_do*times (boolean_eq integer_pop tagged_42 boolean_eq exec_when (exec_while (print_newline integer_yank) exec_s_when_autoconstructing () (exec_when () boolean_dup exec_pop (exec_when (integer_yankdup integer_inc) integer_shove integer_dup boolean_invert_second_then_and boolean_invert_second_then_and boolean_dup_items) in1 print_boolean in1) (in3 integer_min) exec_s_when_autoconstructing (print_integer) (exec_rot (boolean_eq exec_y_when_autoconstructing (exec_flush) exec_pop (boolean_yankdup exec_yankdup integer_fromboolean boolean_invert_second_then_and boolean_or boolean_swap boolean_frominteger exec_dup_items -15 exec_dup_items exec_pop (integer_dup) integer_rot exec_dup_items) integer_gte in4 boolean_frominteger boolean_pop exec_while (integer_stackdepth integer_min) exec_s () (integer_empty exec_k_when_autoconstructing () ()) ()) () ()) ())))
Errors: [0 0 0 0 0 0 1 0 0 0]
Total: 1
Mean: 0.1
Genome size: 64
Size: 92
Percent parens: 0.304
--- Population Statistics ---
Average total errors in population: 8.718
Median total errors in population: 10
Error averages by case: (0.625 0.955 0.955 0.773 0.954 0.955 0.818 0.773 0.955 0.955)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 72.792
Average program size in population (points): 100.627
Average percent parens in population: 0.276
Minimum age in population: 4.0
Maximum age in population: 4.0
Average age in population: 4.0
Median age in population: 4.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.008
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.187
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 2825510
--- Timings ---
Current time: 1559593954179 milliseconds
Total Time:          12.4 seconds
Initialization:       0.1 seconds,  0.9%
Reproduction:         5.3 seconds, 42.6%
Fitness Testing:      4.2 seconds, 33.6%
Report:               2.8 seconds, 22.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 206
Test mean error for best: 0.20600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -65                 | Program output: -65                
Correct output: -43                 | Program output: -43                
Correct output: -45                 | Program output: -45                
Correct output: 63                  | Program output: 63                 
Correct output: -85                 | Program output: -85                
Correct output: 42                  | Program output: 42                 
Correct output: -50                 | Program output: -50                
Correct output: -68                 | Program output: -68                
Correct output: -68                 | Program output: -68                
Correct output: 45                  | Program output: 45                 
Correct output: 8                   | Program output: 8                  
Correct output: 86                  | Program output: 86                 
Correct output: -81                 | Program output: -81                
Correct output: -100                | Program output: -100               
Correct output: -10                 | Program output: -10                
Correct output: 18                  | Program output: 18                 
Correct output: 8                   | Program output: 49                 
Correct output: 2                   | Program output: 75                 
Correct output: 27                  | Program output: 96                 
Correct output: 4                   | Program output: 4                  
Correct output: 4                   | Program output: 4                  
Correct output: 0                   | Program output: 0                  
Correct output: 4                   | Program output: 49                 
Correct output: 16                  | Program output: 21                 
Correct output: 7                   | Program output: 40                 
Correct output: 0                   | Program output: 0                  
Correct output: 4                   | Program output: 4                  
Correct output: 6                   | Program output: 6                  
Correct output: 18                  | Program output: 18                 
Correct output: 16                  | Program output: 16                 
Correct output: 34                  | Program output: 34                 
Correct output: 3                   | Program output: 3                  
Correct output: 21                  | Program output: 21                 
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 7                  
Correct output: -55                 | Program output: -55                
Correct output: -84                 | Program output: -84                
Correct output: -96                 | Program output: -96                
Correct output: -87                 | Program output: -87                
Correct output: -70                 | Program output: -70                
Correct output: -88                 | Program output: -11                
Correct output: -58                 | Program output: -58                
Correct output: -25                 | Program output: -25                
Correct output: -62                 | Program output: -32                
Correct output: -96                 | Program output: 33                 
Correct output: -88                 | Program output: -88                
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: -88                
Correct output: -74                 | Program output: -74                
Correct output: -57                 | Program output: -57                
Correct output: -58                 | Program output: -7                 
Correct output: -93                 | Program output: -93                
Correct output: -70                 | Program output: -70                
Correct output: 34                  | Program output: 34                 
Correct output: -31                 | Program output: -31                
Correct output: -79                 | Program output: -79                
Correct output: -73                 | Program output: -73                
Correct output: -61                 | Program output: -40                
Correct output: -2                  | Program output: -2                 
Correct output: -90                 | Program output: -90                
Correct output: -71                 | Program output: -71                
Correct output: -74                 | Program output: -74                
Correct output: -58                 | Program output: -58                
Correct output: -74                 | Program output: -74                
Correct output: -75                 | Program output: -75                
Correct output: -12                 | Program output: -12                
Correct output: 34                  | Program output: 34                 
Correct output: -17                 | Program output: -17                
Correct output: -99                 | Program output: -99                
Correct output: -88                 | Program output: -88                
Correct output: -49                 | Program output: -49                
Correct output: -42                 | Program output: -42                
Correct output: -61                 | Program output: -61                
Correct output: -26                 | Program output: -26                
Correct output: -92                 | Program output: -90                
Correct output: -40                 | Program output: -40                
Correct output: -60                 | Program output: -60                
Correct output: 8                   | Program output: 8                  
Correct output: -85                 | Program output: -79                
Correct output: -98                 | Program output: -98                
Correct output: 61                  | Program output: 61                 
Correct output: -67                 | Program output: -67                
Correct output: -48                 | Program output: 9                  
Correct output: -78                 | Program output: -78                
Correct output: -76                 | Program output: -76                
Correct output: -83                 | Program output: -83                
Correct output: -12                 | Program output: -12                
Correct output: -92                 | Program output: -92                
Correct output: -23                 | Program output: -23                
Correct output: -70                 | Program output: -70                
Correct output: -67                 | Program output: -67                
Correct output: -18                 | Program output: 34                 
Correct output: -81                 | Program output: -81                
Correct output: -92                 | Program output: -92                
Correct output: -81                 | Program output: -81                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_pop} {:close 0, :instruction tagged_42} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_when} {:close 0, :instruction exec_while} {:close 0, :instruction print_newline} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_when} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction print_boolean} {:close 0, :instruction in3} {:close 1, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction integer_min} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_swap} {:close 0, :instruction -15} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_while} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_min} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_k_when_autoconstructing})
Lexicase best program: (boolean_stackdepth exec_stackdepth integer_mult boolean_yankdup boolean_dup_items exec_do*times (integer_pop tagged_42 boolean_eq exec_when (exec_while (print_newline integer_yank) exec_when () exec_pop (exec_when (integer_yankdup integer_inc) integer_shove integer_dup exec_empty in3 boolean_invert_second_then_and boolean_yank boolean_invert_second_then_and boolean_dup_items) in1 print_boolean in3 in2) integer_min integer_min) exec_do*while (exec_s_when_autoconstructing (print_integer) (exec_rot (boolean_eq exec_flush) (exec_pop (boolean_yankdup boolean_dup_times boolean_eq) exec_yankdup boolean_invert_second_then_and integer_pop boolean_or boolean_swap -15 exec_dup_items integer_pop exec_pop (integer_dup) integer_rot exec_dup_items) (integer_gte integer_sub boolean_frominteger boolean_pop exec_while (integer_stackdepth integer_min) integer_empty boolean_swap) exec_k_when_autoconstructing () ()) ()))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 83
Percent parens: 0.229
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_pop} {:close 0, :instruction tagged_42} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_when} {:close 0, :instruction exec_while} {:close 0, :instruction print_newline} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_when} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction print_boolean} {:close 0, :instruction in3} {:close 1, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction integer_min} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_swap} {:close 0, :instruction -15} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_while} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_min} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_k_when_autoconstructing})
Zero cases best program: (boolean_stackdepth exec_stackdepth integer_mult boolean_yankdup boolean_dup_items exec_do*times (integer_pop tagged_42 boolean_eq exec_when (exec_while (print_newline integer_yank) exec_when () exec_pop (exec_when (integer_yankdup integer_inc) integer_shove integer_dup exec_empty in3 boolean_invert_second_then_and boolean_yank boolean_invert_second_then_and boolean_dup_items) in1 print_boolean in3 in2) integer_min integer_min) exec_do*while (exec_s_when_autoconstructing (print_integer) (exec_rot (boolean_eq exec_flush) (exec_pop (boolean_yankdup boolean_dup_times boolean_eq) exec_yankdup boolean_invert_second_then_and integer_pop boolean_or boolean_swap -15 exec_dup_items integer_pop exec_pop (integer_dup) integer_rot exec_dup_items) (integer_gte integer_sub boolean_frominteger boolean_pop exec_while (integer_stackdepth integer_min) integer_empty boolean_swap) exec_k_when_autoconstructing () ()) ()))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 83
Percent parens: 0.229
--- Lexicase Population Statistics ---
Count of elite individuals by case: (134 338 457 456 255 133 326 134 134 3)
Population mean number of elite cases: 2.37
Count of perfect (error zero) individuals by case: (134 338 457 456 255 133 326 134 134 3)
Population mean number of perfect (error zero) cases: 2.37
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_pop} {:close 0, :instruction tagged_42} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_when} {:close 0, :instruction exec_while} {:close 0, :instruction print_newline} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_when} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction print_boolean} {:close 0, :instruction in3} {:close 1, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction integer_min} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_swap} {:close 0, :instruction -15} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_while} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_min} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_k_when_autoconstructing})
Best program: (boolean_stackdepth exec_stackdepth integer_mult boolean_yankdup boolean_dup_items exec_do*times (integer_pop tagged_42 boolean_eq exec_when (exec_while (print_newline integer_yank) exec_when () exec_pop (exec_when (integer_yankdup integer_inc) integer_shove integer_dup exec_empty in3 boolean_invert_second_then_and boolean_yank boolean_invert_second_then_and boolean_dup_items) in1 print_boolean in3 in2) integer_min integer_min) exec_do*while (exec_s_when_autoconstructing (print_integer) (exec_rot (boolean_eq exec_flush) (exec_pop (boolean_yankdup boolean_dup_times boolean_eq) exec_yankdup boolean_invert_second_then_and integer_pop boolean_or boolean_swap -15 exec_dup_items integer_pop exec_pop (integer_dup) integer_rot exec_dup_items) (integer_gte integer_sub boolean_frominteger boolean_pop exec_while (integer_stackdepth integer_min) integer_empty boolean_swap) exec_k_when_autoconstructing () ()) ()))
Errors: [0 0 0 0 0 0 0 0 0 1]
Total: 1
Mean: 0.1
Genome size: 64
Size: 83
Percent parens: 0.229
--- Population Statistics ---
Average total errors in population: 7.63
Median total errors in population: 10
Error averages by case: (0.866 0.662 0.543 0.544 0.745 0.867 0.674 0.866 0.866 0.997)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 65.899
Average program size in population (points): 92.993
Average percent parens in population: 0.291
Minimum age in population: 5.0
Maximum age in population: 5.0
Average age in population: 5.0
Median age in population: 5.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.01
Error (vector) diversity:			 0.021
Behavioral diversity:				 0.148
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 3225281
--- Timings ---
Current time: 1559593956075 milliseconds
Total Time:          14.3 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:         6.5 seconds, 45.4%
Fitness Testing:      4.5 seconds, 31.5%
Report:               3.2 seconds, 22.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 0
Test mean error for best: 0.00000
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -65                 | Program output: -65                
Correct output: -43                 | Program output: -43                
Correct output: -45                 | Program output: -45                
Correct output: 63                  | Program output: 63                 
Correct output: -85                 | Program output: -85                
Correct output: 42                  | Program output: 42                 
Correct output: -50                 | Program output: -50                
Correct output: -68                 | Program output: -68                
Correct output: -68                 | Program output: -68                
Correct output: 45                  | Program output: 45                 
Correct output: 8                   | Program output: 8                  
Correct output: 86                  | Program output: 86                 
Correct output: -81                 | Program output: -81                
Correct output: -100                | Program output: -100               
Correct output: -10                 | Program output: -10                
Correct output: 18                  | Program output: 18                 
Correct output: 8                   | Program output: 8                  
Correct output: 2                   | Program output: 2                  
Correct output: 27                  | Program output: 27                 
Correct output: 4                   | Program output: 4                  
Correct output: 4                   | Program output: 4                  
Correct output: 0                   | Program output: 0                  
Correct output: 4                   | Program output: 4                  
Correct output: 16                  | Program output: 16                 
Correct output: 7                   | Program output: 7                  
Correct output: 0                   | Program output: 0                  
Correct output: 4                   | Program output: 4                  
Correct output: 6                   | Program output: 6                  
Correct output: 18                  | Program output: 18                 
Correct output: 16                  | Program output: 16                 
Correct output: 34                  | Program output: 34                 
Correct output: 3                   | Program output: 3                  
Correct output: 21                  | Program output: 21                 
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 7                  
Correct output: -55                 | Program output: -55                
Correct output: -84                 | Program output: -84                
Correct output: -96                 | Program output: -96                
Correct output: -87                 | Program output: -87                
Correct output: -70                 | Program output: -70                
Correct output: -88                 | Program output: -88                
Correct output: -58                 | Program output: -58                
Correct output: -25                 | Program output: -25                
Correct output: -62                 | Program output: -62                
Correct output: -96                 | Program output: -96                
Correct output: -88                 | Program output: -88                
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: -88                
Correct output: -74                 | Program output: -74                
Correct output: -57                 | Program output: -57                
Correct output: -58                 | Program output: -58                
Correct output: -93                 | Program output: -93                
Correct output: -70                 | Program output: -70                
Correct output: 34                  | Program output: 34                 
Correct output: -31                 | Program output: -31                
Correct output: -79                 | Program output: -79                
Correct output: -73                 | Program output: -73                
Correct output: -61                 | Program output: -61                
Correct output: -2                  | Program output: -2                 
Correct output: -90                 | Program output: -90                
Correct output: -71                 | Program output: -71                
Correct output: -74                 | Program output: -74                
Correct output: -58                 | Program output: -58                
Correct output: -74                 | Program output: -74                
Correct output: -75                 | Program output: -75                
Correct output: -12                 | Program output: -12                
Correct output: 34                  | Program output: 34                 
Correct output: -17                 | Program output: -17                
Correct output: -99                 | Program output: -99                
Correct output: -88                 | Program output: -88                
Correct output: -49                 | Program output: -49                
Correct output: -42                 | Program output: -42                
Correct output: -61                 | Program output: -61                
Correct output: -26                 | Program output: -26                
Correct output: -92                 | Program output: -92                
Correct output: -40                 | Program output: -40                
Correct output: -60                 | Program output: -60                
Correct output: 8                   | Program output: 8                  
Correct output: -85                 | Program output: -85                
Correct output: -98                 | Program output: -98                
Correct output: 61                  | Program output: 61                 
Correct output: -67                 | Program output: -67                
Correct output: -48                 | Program output: -48                
Correct output: -78                 | Program output: -78                
Correct output: -76                 | Program output: -76                
Correct output: -83                 | Program output: -83                
Correct output: -12                 | Program output: -12                
Correct output: -92                 | Program output: -92                
Correct output: -23                 | Program output: -23                
Correct output: -70                 | Program output: -70                
Correct output: -67                 | Program output: -67                
Correct output: -18                 | Program output: -18                
Correct output: -81                 | Program output: -81                
Correct output: -92                 | Program output: -92                
Correct output: -81                 | Program output: -81                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_pop} {:close 0, :instruction tagged_42} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_when} {:close 0, :instruction exec_while} {:close 0, :instruction print_newline} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_when} {:close 0, :instruction exec_s} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 1, :instruction in4} {:close 0, :instruction print_boolean} {:close 0, :instruction in3} {:close 1, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction integer_min} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_swap} {:close 0, :instruction -15} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_dup} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_while} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_min} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_k_when_autoconstructing})
Lexicase best program: (boolean_stackdepth exec_stackdepth integer_mult boolean_yankdup boolean_dup_items exec_do*times (integer_pop tagged_42 boolean_eq exec_when (exec_while (print_newline integer_yank) exec_when () exec_s (exec_pop (exec_when (integer_yankdup integer_inc) integer_shove integer_swap integer_dup exec_empty in3 boolean_and boolean_invert_second_then_and boolean_yank boolean_invert_second_then_and boolean_dup_items) in1 in4) (print_boolean in3 in2) (integer_min integer_min) exec_do*while (exec_s_when_autoconstructing (print_integer) (exec_rot (boolean_eq exec_flush) (exec_pop (boolean_yankdup boolean_dup_times boolean_eq) exec_yankdup boolean_invert_second_then_and integer_pop boolean_or boolean_swap -15 boolean_flush exec_dup_items integer_pop exec_pop (integer_dup) exec_dup_items) (integer_gte integer_sub boolean_frominteger boolean_pop exec_while (integer_stackdepth integer_min) integer_empty boolean_swap) exec_k_when_autoconstructing () ()) ()))))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 90
Percent parens: 0.244
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_pop} {:close 0, :instruction tagged_42} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_when} {:close 0, :instruction exec_while} {:close 0, :instruction print_newline} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_when} {:close 0, :instruction exec_s} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 1, :instruction in4} {:close 0, :instruction print_boolean} {:close 0, :instruction in3} {:close 1, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction integer_min} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_swap} {:close 0, :instruction -15} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_dup} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_while} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_min} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_k_when_autoconstructing})
Zero cases best program: (boolean_stackdepth exec_stackdepth integer_mult boolean_yankdup boolean_dup_items exec_do*times (integer_pop tagged_42 boolean_eq exec_when (exec_while (print_newline integer_yank) exec_when () exec_s (exec_pop (exec_when (integer_yankdup integer_inc) integer_shove integer_swap integer_dup exec_empty in3 boolean_and boolean_invert_second_then_and boolean_yank boolean_invert_second_then_and boolean_dup_items) in1 in4) (print_boolean in3 in2) (integer_min integer_min) exec_do*while (exec_s_when_autoconstructing (print_integer) (exec_rot (boolean_eq exec_flush) (exec_pop (boolean_yankdup boolean_dup_times boolean_eq) exec_yankdup boolean_invert_second_then_and integer_pop boolean_or boolean_swap -15 boolean_flush exec_dup_items integer_pop exec_pop (integer_dup) exec_dup_items) (integer_gte integer_sub boolean_frominteger boolean_pop exec_while (integer_stackdepth integer_min) integer_empty boolean_swap) exec_k_when_autoconstructing () ()) ()))))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 90
Percent parens: 0.244
--- Lexicase Population Statistics ---
Count of elite individuals by case: (301 301 301 421 370 300 299 51 392 238)
Population mean number of elite cases: 2.97
Count of perfect (error zero) individuals by case: (301 301 301 421 370 300 299 51 392 238)
Population mean number of perfect (error zero) cases: 2.97
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_pop} {:close 0, :instruction tagged_42} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_when} {:close 0, :instruction exec_while} {:close 0, :instruction print_newline} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_when} {:close 0, :instruction exec_s} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 1, :instruction in4} {:close 0, :instruction print_boolean} {:close 0, :instruction in3} {:close 1, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction integer_min} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_swap} {:close 0, :instruction -15} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_dup} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_while} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_min} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_k_when_autoconstructing})
Best program: (boolean_stackdepth exec_stackdepth integer_mult boolean_yankdup boolean_dup_items exec_do*times (integer_pop tagged_42 boolean_eq exec_when (exec_while (print_newline integer_yank) exec_when () exec_s (exec_pop (exec_when (integer_yankdup integer_inc) integer_shove integer_swap integer_dup exec_empty in3 boolean_and boolean_invert_second_then_and boolean_yank boolean_invert_second_then_and boolean_dup_items) in1 in4) (print_boolean in3 in2) (integer_min integer_min) exec_do*while (exec_s_when_autoconstructing (print_integer) (exec_rot (boolean_eq exec_flush) (exec_pop (boolean_yankdup boolean_dup_times boolean_eq) exec_yankdup boolean_invert_second_then_and integer_pop boolean_or boolean_swap -15 boolean_flush exec_dup_items integer_pop exec_pop (integer_dup) exec_dup_items) (integer_gte integer_sub boolean_frominteger boolean_pop exec_while (integer_stackdepth integer_min) integer_empty boolean_swap) exec_k_when_autoconstructing () ()) ()))))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 68
Size: 90
Percent parens: 0.244
--- Population Statistics ---
Average total errors in population: 7.026
Median total errors in population: 10
Error averages by case: (0.699 0.699 0.699 0.579 0.63 0.7 0.701 0.949 0.608 0.762)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 64.292
Average program size in population (points): 84.578
Average percent parens in population: 0.239
Minimum age in population: 6.0
Maximum age in population: 6.0
Average age in population: 6.0
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.01
Error (vector) diversity:			 0.03
Behavioral diversity:				 0.168
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 3603686
--- Timings ---
Current time: 1559593957901 milliseconds
Total Time:          16.1 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         7.6 seconds, 47.4%
Fitness Testing:      4.8 seconds, 30.0%
Report:               3.5 seconds, 21.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 6
Successful program: (boolean_stackdepth exec_stackdepth integer_mult boolean_yankdup boolean_dup_items exec_do*times (integer_pop tagged_42 boolean_eq exec_when (exec_while (print_newline integer_yank) exec_when () exec_s (exec_pop (exec_when (integer_yankdup integer_inc) integer_shove integer_swap integer_dup exec_empty in3 boolean_and boolean_invert_second_then_and boolean_yank boolean_invert_second_then_and boolean_dup_items) in1 in4) (print_boolean in3 in2) (integer_min integer_min) exec_do*while (exec_s_when_autoconstructing (print_integer) (exec_rot (boolean_eq exec_flush) (exec_pop (boolean_yankdup boolean_dup_times boolean_eq) exec_yankdup boolean_invert_second_then_and integer_pop boolean_or boolean_swap -15 boolean_flush exec_dup_items integer_pop exec_pop (integer_dup) exec_dup_items) (integer_gte integer_sub boolean_frominteger boolean_pop exec_while (integer_stackdepth integer_min) integer_empty boolean_swap) exec_k_when_autoconstructing () ()) ()))))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 90


Auto-simplifying with starting size: 90
step: 0
program: (boolean_stackdepth exec_stackdepth integer_mult boolean_yankdup boolean_dup_items exec_do*times (integer_pop tagged_42 boolean_eq exec_when (exec_while (print_newline integer_yank) exec_when () exec_s (exec_pop (exec_when (integer_yankdup integer_inc) integer_shove integer_swap integer_dup exec_empty in3 boolean_and boolean_invert_second_then_and boolean_yank boolean_invert_second_then_and boolean_dup_items) in1 in4) (print_boolean in3 in2) (integer_min integer_min) exec_do*while (exec_s_when_autoconstructing (print_integer) (exec_rot (boolean_eq exec_flush) (exec_pop (boolean_yankdup boolean_dup_times boolean_eq) exec_yankdup boolean_invert_second_then_and integer_pop boolean_or boolean_swap -15 boolean_flush exec_dup_items integer_pop exec_pop (integer_dup) exec_dup_items) (integer_gte integer_sub boolean_frominteger boolean_pop exec_while (integer_stackdepth integer_min) integer_empty boolean_swap) exec_k_when_autoconstructing () ()) ()))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 90

step: 500
program: (boolean_stackdepth exec_stackdepth integer_mult boolean_yankdup boolean_dup_items exec_do*times (integer_pop tagged_42 boolean_eq exec_when (exec_while (print_newline integer_yank) exec_when () exec_s (exec_pop (exec_when (integer_yankdup integer_inc) integer_shove integer_swap integer_dup exec_empty in3 boolean_and boolean_invert_second_then_and boolean_yank boolean_invert_second_then_and boolean_dup_items) in1 in4) (print_boolean in3 in2) (integer_min integer_min) exec_do*while (exec_s_when_autoconstructing (print_integer) (exec_rot (boolean_eq exec_flush) (exec_pop (boolean_yankdup boolean_dup_times boolean_eq) exec_yankdup boolean_invert_second_then_and integer_pop boolean_or boolean_swap -15 boolean_flush exec_dup_items integer_pop exec_pop (integer_dup) exec_dup_items) (integer_gte integer_sub boolean_frominteger boolean_pop exec_while (integer_stackdepth integer_min) integer_empty boolean_swap) exec_k_when_autoconstructing () ()) ()))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 90

step: 1000
program: (boolean_stackdepth exec_stackdepth integer_mult boolean_yankdup boolean_dup_items exec_do*times (integer_pop tagged_42 boolean_eq exec_when (exec_while (print_newline integer_yank) exec_when () exec_s (exec_pop (exec_when (integer_yankdup integer_inc) integer_shove integer_swap integer_dup exec_empty in3 boolean_and boolean_invert_second_then_and boolean_yank boolean_invert_second_then_and boolean_dup_items) in1 in4) (print_boolean in3 in2) (integer_min integer_min) exec_do*while (exec_s_when_autoconstructing (print_integer) (exec_rot (boolean_eq exec_flush) (exec_pop (boolean_yankdup boolean_dup_times boolean_eq) exec_yankdup boolean_invert_second_then_and integer_pop boolean_or boolean_swap -15 boolean_flush exec_dup_items integer_pop exec_pop (integer_dup) exec_dup_items) (integer_gte integer_sub boolean_frominteger boolean_pop exec_while (integer_stackdepth integer_min) integer_empty boolean_swap) exec_k_when_autoconstructing () ()) ()))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 90

step: 1500
program: (boolean_stackdepth exec_stackdepth integer_mult boolean_yankdup boolean_dup_items exec_do*times (integer_pop tagged_42 boolean_eq exec_when (exec_while (print_newline integer_yank) exec_when () exec_s (exec_pop (exec_when (integer_yankdup integer_inc) integer_shove integer_swap integer_dup exec_empty in3 boolean_and boolean_invert_second_then_and boolean_yank boolean_invert_second_then_and boolean_dup_items) in1 in4) (print_boolean in3 in2) (integer_min integer_min) exec_do*while (exec_s_when_autoconstructing (print_integer) (exec_rot (boolean_eq exec_flush) (exec_pop (boolean_yankdup boolean_dup_times boolean_eq) exec_yankdup boolean_invert_second_then_and integer_pop boolean_or boolean_swap -15 boolean_flush exec_dup_items integer_pop exec_pop (integer_dup) exec_dup_items) (integer_gte integer_sub boolean_frominteger boolean_pop exec_while (integer_stackdepth integer_min) integer_empty boolean_swap) exec_k_when_autoconstructing () ()) ()))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 90

step: 2000
program: (boolean_stackdepth exec_stackdepth integer_mult boolean_yankdup boolean_dup_items exec_do*times (integer_pop tagged_42 boolean_eq exec_when (exec_while (print_newline integer_yank) exec_when () exec_s (exec_pop (exec_when (integer_yankdup integer_inc) integer_shove integer_swap integer_dup exec_empty in3 boolean_and boolean_invert_second_then_and boolean_yank boolean_invert_second_then_and boolean_dup_items) in1 in4) (print_boolean in3 in2) (integer_min integer_min) exec_do*while (exec_s_when_autoconstructing (print_integer) (exec_rot (boolean_eq exec_flush) (exec_pop (boolean_yankdup boolean_dup_times boolean_eq) exec_yankdup boolean_invert_second_then_and integer_pop boolean_or boolean_swap -15 boolean_flush exec_dup_items integer_pop exec_pop (integer_dup) exec_dup_items) (integer_gte integer_sub boolean_frominteger boolean_pop exec_while (integer_stackdepth integer_min) integer_empty boolean_swap) exec_k_when_autoconstructing () ()) ()))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 90

step: 2500
program: (boolean_stackdepth exec_stackdepth integer_mult boolean_yankdup boolean_dup_items exec_do*times (integer_pop tagged_42 boolean_eq exec_when (exec_while (print_newline integer_yank) exec_when () exec_s (exec_pop (exec_when (integer_yankdup integer_inc) integer_shove integer_swap integer_dup exec_empty in3 boolean_and boolean_invert_second_then_and boolean_yank boolean_invert_second_then_and boolean_dup_items) in1 in4) (print_boolean in3 in2) (integer_min integer_min) exec_do*while (exec_s_when_autoconstructing (print_integer) (exec_rot (boolean_eq exec_flush) (exec_pop (boolean_yankdup boolean_dup_times boolean_eq) exec_yankdup boolean_invert_second_then_and integer_pop boolean_or boolean_swap -15 boolean_flush exec_dup_items integer_pop exec_pop (integer_dup) exec_dup_items) (integer_gte integer_sub boolean_frominteger boolean_pop exec_while (integer_stackdepth integer_min) integer_empty boolean_swap) exec_k_when_autoconstructing () ()) ()))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 90

step: 3000
program: (boolean_stackdepth exec_stackdepth integer_mult boolean_yankdup boolean_dup_items exec_do*times (integer_pop tagged_42 boolean_eq exec_when (exec_while (print_newline integer_yank) exec_when () exec_s (exec_pop (exec_when (integer_yankdup integer_inc) integer_shove integer_swap integer_dup exec_empty in3 boolean_and boolean_invert_second_then_and boolean_yank boolean_invert_second_then_and boolean_dup_items) in1 in4) (print_boolean in3 in2) (integer_min integer_min) exec_do*while (exec_s_when_autoconstructing (print_integer) (exec_rot (boolean_eq exec_flush) (exec_pop (boolean_yankdup boolean_dup_times boolean_eq) exec_yankdup boolean_invert_second_then_and integer_pop boolean_or boolean_swap -15 boolean_flush exec_dup_items integer_pop exec_pop (integer_dup) exec_dup_items) (integer_gte integer_sub boolean_frominteger boolean_pop exec_while (integer_stackdepth integer_min) integer_empty boolean_swap) exec_k_when_autoconstructing () ()) ()))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 90

step: 3500
program: (boolean_stackdepth exec_stackdepth integer_mult boolean_yankdup boolean_dup_items exec_do*times (integer_pop tagged_42 boolean_eq exec_when (exec_while (print_newline integer_yank) exec_when () exec_s (exec_pop (exec_when (integer_yankdup integer_inc) integer_shove integer_swap integer_dup exec_empty in3 boolean_and boolean_invert_second_then_and boolean_yank boolean_invert_second_then_and boolean_dup_items) in1 in4) (print_boolean in3 in2) (integer_min integer_min) exec_do*while (exec_s_when_autoconstructing (print_integer) (exec_rot (boolean_eq exec_flush) (exec_pop (boolean_yankdup boolean_dup_times boolean_eq) exec_yankdup boolean_invert_second_then_and integer_pop boolean_or boolean_swap -15 boolean_flush exec_dup_items integer_pop exec_pop (integer_dup) exec_dup_items) (integer_gte integer_sub boolean_frominteger boolean_pop exec_while (integer_stackdepth integer_min) integer_empty boolean_swap) exec_k_when_autoconstructing () ()) ()))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 90

step: 4000
program: (boolean_stackdepth exec_stackdepth integer_mult boolean_yankdup boolean_dup_items exec_do*times (integer_pop tagged_42 boolean_eq exec_when (exec_while (print_newline integer_yank) exec_when () exec_s (exec_pop (exec_when (integer_yankdup integer_inc) integer_shove integer_swap integer_dup exec_empty in3 boolean_and boolean_invert_second_then_and boolean_yank boolean_invert_second_then_and boolean_dup_items) in1 in4) (print_boolean in3 in2) (integer_min integer_min) exec_do*while (exec_s_when_autoconstructing (print_integer) (exec_rot (boolean_eq exec_flush) (exec_pop (boolean_yankdup boolean_dup_times boolean_eq) exec_yankdup boolean_invert_second_then_and integer_pop boolean_or boolean_swap -15 boolean_flush exec_dup_items integer_pop exec_pop (integer_dup) exec_dup_items) (integer_gte integer_sub boolean_frominteger boolean_pop exec_while (integer_stackdepth integer_min) integer_empty boolean_swap) exec_k_when_autoconstructing () ()) ()))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 90

step: 4500
program: (boolean_stackdepth exec_stackdepth integer_mult boolean_yankdup boolean_dup_items exec_do*times (integer_pop tagged_42 boolean_eq exec_when (exec_while (print_newline integer_yank) exec_when () exec_s (exec_pop (exec_when (integer_yankdup integer_inc) integer_shove integer_swap integer_dup exec_empty in3 boolean_and boolean_invert_second_then_and boolean_yank boolean_invert_second_then_and boolean_dup_items) in1 in4) (print_boolean in3 in2) (integer_min integer_min) exec_do*while (exec_s_when_autoconstructing (print_integer) (exec_rot (boolean_eq exec_flush) (exec_pop (boolean_yankdup boolean_dup_times boolean_eq) exec_yankdup boolean_invert_second_then_and integer_pop boolean_or boolean_swap -15 boolean_flush exec_dup_items integer_pop exec_pop (integer_dup) exec_dup_items) (integer_gte integer_sub boolean_frominteger boolean_pop exec_while (integer_stackdepth integer_min) integer_empty boolean_swap) exec_k_when_autoconstructing () ()) ()))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 90

step: 5000
program: (boolean_stackdepth exec_stackdepth integer_mult boolean_yankdup boolean_dup_items exec_do*times (integer_pop tagged_42 boolean_eq exec_when (exec_while (print_newline integer_yank) exec_when () exec_s (exec_pop (exec_when (integer_yankdup integer_inc) integer_shove integer_swap integer_dup exec_empty in3 boolean_and boolean_invert_second_then_and boolean_yank boolean_invert_second_then_and boolean_dup_items) in1 in4) (print_boolean in3 in2) (integer_min integer_min) exec_do*while (exec_s_when_autoconstructing (print_integer) (exec_rot (boolean_eq exec_flush) (exec_pop (boolean_yankdup boolean_dup_times boolean_eq) exec_yankdup boolean_invert_second_then_and integer_pop boolean_or boolean_swap -15 boolean_flush exec_dup_items integer_pop exec_pop (integer_dup) exec_dup_items) (integer_gte integer_sub boolean_frominteger boolean_pop exec_while (integer_stackdepth integer_min) integer_empty boolean_swap) exec_k_when_autoconstructing () ()) ()))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 90

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 0
Test mean error for best: 0.00000
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -65                 | Program output: -65                
Correct output: -43                 | Program output: -43                
Correct output: -45                 | Program output: -45                
Correct output: 63                  | Program output: 63                 
Correct output: -85                 | Program output: -85                
Correct output: 42                  | Program output: 42                 
Correct output: -50                 | Program output: -50                
Correct output: -68                 | Program output: -68                
Correct output: -68                 | Program output: -68                
Correct output: 45                  | Program output: 45                 
Correct output: 8                   | Program output: 8                  
Correct output: 86                  | Program output: 86                 
Correct output: -81                 | Program output: -81                
Correct output: -100                | Program output: -100               
Correct output: -10                 | Program output: -10                
Correct output: 18                  | Program output: 18                 
Correct output: 8                   | Program output: 8                  
Correct output: 2                   | Program output: 2                  
Correct output: 27                  | Program output: 27                 
Correct output: 4                   | Program output: 4                  
Correct output: 4                   | Program output: 4                  
Correct output: 0                   | Program output: 0                  
Correct output: 4                   | Program output: 4                  
Correct output: 16                  | Program output: 16                 
Correct output: 7                   | Program output: 7                  
Correct output: 0                   | Program output: 0                  
Correct output: 4                   | Program output: 4                  
Correct output: 6                   | Program output: 6                  
Correct output: 18                  | Program output: 18                 
Correct output: 16                  | Program output: 16                 
Correct output: 34                  | Program output: 34                 
Correct output: 3                   | Program output: 3                  
Correct output: 21                  | Program output: 21                 
Correct output: 6                   | Program output: 6                  
Correct output: 7                   | Program output: 7                  
Correct output: -55                 | Program output: -55                
Correct output: -84                 | Program output: -84                
Correct output: -96                 | Program output: -96                
Correct output: -87                 | Program output: -87                
Correct output: -70                 | Program output: -70                
Correct output: -88                 | Program output: -88                
Correct output: -58                 | Program output: -58                
Correct output: -25                 | Program output: -25                
Correct output: -62                 | Program output: -62                
Correct output: -96                 | Program output: -96                
Correct output: -88                 | Program output: -88                
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: -88                
Correct output: -74                 | Program output: -74                
Correct output: -57                 | Program output: -57                
Correct output: -58                 | Program output: -58                
Correct output: -93                 | Program output: -93                
Correct output: -70                 | Program output: -70                
Correct output: 34                  | Program output: 34                 
Correct output: -31                 | Program output: -31                
Correct output: -79                 | Program output: -79                
Correct output: -73                 | Program output: -73                
Correct output: -61                 | Program output: -61                
Correct output: -2                  | Program output: -2                 
Correct output: -90                 | Program output: -90                
Correct output: -71                 | Program output: -71                
Correct output: -74                 | Program output: -74                
Correct output: -58                 | Program output: -58                
Correct output: -74                 | Program output: -74                
Correct output: -75                 | Program output: -75                
Correct output: -12                 | Program output: -12                
Correct output: 34                  | Program output: 34                 
Correct output: -17                 | Program output: -17                
Correct output: -99                 | Program output: -99                
Correct output: -88                 | Program output: -88                
Correct output: -49                 | Program output: -49                
Correct output: -42                 | Program output: -42                
Correct output: -61                 | Program output: -61                
Correct output: -26                 | Program output: -26                
Correct output: -92                 | Program output: -92                
Correct output: -40                 | Program output: -40                
Correct output: -60                 | Program output: -60                
Correct output: 8                   | Program output: 8                  
Correct output: -85                 | Program output: -85                
Correct output: -98                 | Program output: -98                
Correct output: 61                  | Program output: 61                 
Correct output: -67                 | Program output: -67                
Correct output: -48                 | Program output: -48                
Correct output: -78                 | Program output: -78                
Correct output: -76                 | Program output: -76                
Correct output: -83                 | Program output: -83                
Correct output: -12                 | Program output: -12                
Correct output: -92                 | Program output: -92                
Correct output: -23                 | Program output: -23                
Correct output: -70                 | Program output: -70                
Correct output: -67                 | Program output: -67                
Correct output: -18                 | Program output: -18                
Correct output: -81                 | Program output: -81                
Correct output: -92                 | Program output: -92                
Correct output: -81                 | Program output: -81                
;;******************************
