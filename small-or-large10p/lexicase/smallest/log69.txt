Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 3000 :genetic-operator-probabilities {:uniform-addition-and-deletion,1.0} :uniform-addition-and-deletion-rate 0.09
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x44c27b8b clojush.problems.software.smallest$fn__7461@44c27b8b] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x33399052 clojush.instructions.tag$tag_instruction_erc$fn__2160@33399052] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x460b77d6 clojush.instructions.tag$tagged_instruction_erc$fn__2166@460b77d6] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x52a75c12 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@52a75c12]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:uniform-addition-and-deletion 1.0}
max-error = 1
max-generations = 3000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x61288814 clojush.problems.software.smallest$smallest_initial_report@61288814]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x6669cba clojush.problems.software.smallest$smallest_report@6669cba]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[47 47 -75 47] -75] [[76 76 76 56] 56] [[6 6 12 6] 6] [[-88 -88 -62 -88] -88] [[39 39 96 39] 39] [[-88 -88 -48 -88] -88] [[37 37 -87 37] -87] [[83 83 83 -86] -86] [[-96 -5 -96 -96] -96] [[97 22 22 22] 22] [(20 20 20 20) 20] [(10 10 10 10) 10] [(-22 -22 -22 -22) -22] [(-54 -54 -54 -54) -54] [(-23 -23 -23 -23) -23] [(7 72 72 12) 7] [(14 91 61 74) 14] [(64 55 36 50) 36] [(19 96 89 19) 19] [(45 42 52 59) 42] [(60 48 45 25) 25] [(38 74 84 91) 38] [(57 77 96 14) 14] [(2 72 50 12) 2] [(83 35 72 52) 35] [(33 16 73 45) 16] [(29 74 10 54) 10] [(12 72 58 97) 12] [(26 94 73 87) 26] [(93 57 86 63) 57] [(100 71 18 13) 13] [(66 26 59 23) 23] [(39 19 2 69) 2] [(100 36 50 72) 36] [(13 37 9 32) 9] [(91 -98 36 -31) -98] [(93 -44 -53 -35) -53] [(-39 18 -16 -72) -72] [(22 -69 95 -94) -94] [(-41 -53 -22 43) -53] [(90 -70 -88 9) -88] [(79 -27 58 92) -27] [(17 -47 -91 -83) -91] [(-47 -90 -5 65) -90] [(19 -89 22 50) -89] [(91 27 -90 20) -90] [(-46 90 -49 -36) -49] [(-69 -52 -35 -87) -87] [(-74 95 -41 -80) -80] [(51 -78 -82 -17) -82] [(-80 -31 57 71) -80] [(-52 -47 -40 7) -52] [(93 4 42 -55) -55] [(26 -28 84 60) -28] [(40 -88 36 34) -88] [(-43 -5 -5 42) -43] [(-48 -64 -70 12) -70] [(84 56 100 78) 56] [(38 30 78 58) 30] [(-95 -88 18 66) -95] [(37 -100 32 -21) -100] [(-8 -19 -72 80) -72] [(-48 -78 99 33) -78] [(-47 -50 51 98) -50] [(-43 -25 49 -72) -72] [(-32 13 25 -82) -82] [(-4 55 -18 -55) -55] [(-100 10 -4 -98) -100] [(-48 -68 33 87) -68] [(62 -20 18 13) -20] [(-44 50 -14 64) -44] [(75 74 5 42) 5] [(73 -1 -71 -63) -71] [(71 -20 71 44) -20] [(68 36 86 -35) -35] [(-87 -8 -55 9) -87] [(89 -56 -63 78) -63] [(68 93 -23 79) -23] [(-71 -42 -31 86) -71] [(0 83 -64 35) -64] [(-22 54 -52 68) -52] [(-4 29 24 -92) -92] [(-34 31 24 -35) -35] [(-51 -21 -78 97) -78] [(81 -70 -80 100) -80] [(-54 47 -26 -12) -54] [(-71 -24 -10 57) -71] [(-83 -61 -87 36) -87] [(47 -42 -85 -39) -85] [(96 -51 90 -58) -58] [(17 -2 -85 92) -85] [(-69 42 4 -45) -69] [(-19 -30 -11 91) -30] [(-61 -82 74 -85) -85] [(84 -29 -94 51) -94])
uniform-addition-and-deletion-rate = 0.09
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[47 47 -75 47] -75]
Train Case:   6 | Input/Output: [[76 76 76 56] 56]
Train Case:   7 | Input/Output: [[6 6 12 6] 6]
Train Case:   8 | Input/Output: [[-88 -88 -62 -88] -88]
Train Case:   9 | Input/Output: [[39 39 96 39] 39]
Train Case:  10 | Input/Output: [[-88 -88 -48 -88] -88]
Train Case:  11 | Input/Output: [[37 37 -87 37] -87]
Train Case:  12 | Input/Output: [[83 83 83 -86] -86]
Train Case:  13 | Input/Output: [[-96 -5 -96 -96] -96]
Train Case:  14 | Input/Output: [[97 22 22 22] 22]
Train Case:  15 | Input/Output: [(20 20 20 20) 20]
Train Case:  16 | Input/Output: [(10 10 10 10) 10]
Train Case:  17 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:  18 | Input/Output: [(-54 -54 -54 -54) -54]
Train Case:  19 | Input/Output: [(-23 -23 -23 -23) -23]
Train Case:  20 | Input/Output: [(7 72 72 12) 7]
Train Case:  21 | Input/Output: [(14 91 61 74) 14]
Train Case:  22 | Input/Output: [(64 55 36 50) 36]
Train Case:  23 | Input/Output: [(19 96 89 19) 19]
Train Case:  24 | Input/Output: [(45 42 52 59) 42]
Train Case:  25 | Input/Output: [(60 48 45 25) 25]
Train Case:  26 | Input/Output: [(38 74 84 91) 38]
Train Case:  27 | Input/Output: [(57 77 96 14) 14]
Train Case:  28 | Input/Output: [(2 72 50 12) 2]
Train Case:  29 | Input/Output: [(83 35 72 52) 35]
Train Case:  30 | Input/Output: [(33 16 73 45) 16]
Train Case:  31 | Input/Output: [(29 74 10 54) 10]
Train Case:  32 | Input/Output: [(12 72 58 97) 12]
Train Case:  33 | Input/Output: [(26 94 73 87) 26]
Train Case:  34 | Input/Output: [(93 57 86 63) 57]
Train Case:  35 | Input/Output: [(100 71 18 13) 13]
Train Case:  36 | Input/Output: [(66 26 59 23) 23]
Train Case:  37 | Input/Output: [(39 19 2 69) 2]
Train Case:  38 | Input/Output: [(100 36 50 72) 36]
Train Case:  39 | Input/Output: [(13 37 9 32) 9]
Train Case:  40 | Input/Output: [(91 -98 36 -31) -98]
Train Case:  41 | Input/Output: [(93 -44 -53 -35) -53]
Train Case:  42 | Input/Output: [(-39 18 -16 -72) -72]
Train Case:  43 | Input/Output: [(22 -69 95 -94) -94]
Train Case:  44 | Input/Output: [(-41 -53 -22 43) -53]
Train Case:  45 | Input/Output: [(90 -70 -88 9) -88]
Train Case:  46 | Input/Output: [(79 -27 58 92) -27]
Train Case:  47 | Input/Output: [(17 -47 -91 -83) -91]
Train Case:  48 | Input/Output: [(-47 -90 -5 65) -90]
Train Case:  49 | Input/Output: [(19 -89 22 50) -89]
Train Case:  50 | Input/Output: [(91 27 -90 20) -90]
Train Case:  51 | Input/Output: [(-46 90 -49 -36) -49]
Train Case:  52 | Input/Output: [(-69 -52 -35 -87) -87]
Train Case:  53 | Input/Output: [(-74 95 -41 -80) -80]
Train Case:  54 | Input/Output: [(51 -78 -82 -17) -82]
Train Case:  55 | Input/Output: [(-80 -31 57 71) -80]
Train Case:  56 | Input/Output: [(-52 -47 -40 7) -52]
Train Case:  57 | Input/Output: [(93 4 42 -55) -55]
Train Case:  58 | Input/Output: [(26 -28 84 60) -28]
Train Case:  59 | Input/Output: [(40 -88 36 34) -88]
Train Case:  60 | Input/Output: [(-43 -5 -5 42) -43]
Train Case:  61 | Input/Output: [(-48 -64 -70 12) -70]
Train Case:  62 | Input/Output: [(84 56 100 78) 56]
Train Case:  63 | Input/Output: [(38 30 78 58) 30]
Train Case:  64 | Input/Output: [(-95 -88 18 66) -95]
Train Case:  65 | Input/Output: [(37 -100 32 -21) -100]
Train Case:  66 | Input/Output: [(-8 -19 -72 80) -72]
Train Case:  67 | Input/Output: [(-48 -78 99 33) -78]
Train Case:  68 | Input/Output: [(-47 -50 51 98) -50]
Train Case:  69 | Input/Output: [(-43 -25 49 -72) -72]
Train Case:  70 | Input/Output: [(-32 13 25 -82) -82]
Train Case:  71 | Input/Output: [(-4 55 -18 -55) -55]
Train Case:  72 | Input/Output: [(-100 10 -4 -98) -100]
Train Case:  73 | Input/Output: [(-48 -68 33 87) -68]
Train Case:  74 | Input/Output: [(62 -20 18 13) -20]
Train Case:  75 | Input/Output: [(-44 50 -14 64) -44]
Train Case:  76 | Input/Output: [(75 74 5 42) 5]
Train Case:  77 | Input/Output: [(73 -1 -71 -63) -71]
Train Case:  78 | Input/Output: [(71 -20 71 44) -20]
Train Case:  79 | Input/Output: [(68 36 86 -35) -35]
Train Case:  80 | Input/Output: [(-87 -8 -55 9) -87]
Train Case:  81 | Input/Output: [(89 -56 -63 78) -63]
Train Case:  82 | Input/Output: [(68 93 -23 79) -23]
Train Case:  83 | Input/Output: [(-71 -42 -31 86) -71]
Train Case:  84 | Input/Output: [(0 83 -64 35) -64]
Train Case:  85 | Input/Output: [(-22 54 -52 68) -52]
Train Case:  86 | Input/Output: [(-4 29 24 -92) -92]
Train Case:  87 | Input/Output: [(-34 31 24 -35) -35]
Train Case:  88 | Input/Output: [(-51 -21 -78 97) -78]
Train Case:  89 | Input/Output: [(81 -70 -80 100) -80]
Train Case:  90 | Input/Output: [(-54 47 -26 -12) -54]
Train Case:  91 | Input/Output: [(-71 -24 -10 57) -71]
Train Case:  92 | Input/Output: [(-83 -61 -87 36) -87]
Train Case:  93 | Input/Output: [(47 -42 -85 -39) -85]
Train Case:  94 | Input/Output: [(96 -51 90 -58) -58]
Train Case:  95 | Input/Output: [(17 -2 -85 92) -85]
Train Case:  96 | Input/Output: [(-69 42 4 -45) -69]
Train Case:  97 | Input/Output: [(-19 -30 -11 91) -30]
Train Case:  98 | Input/Output: [(-61 -82 74 -85) -85]
Train Case:  99 | Input/Output: [(84 -29 -94 51) -94]
Test Case:   0 | Input/Output: [[-68 -68 -68 3] -68]
Test Case:   1 | Input/Output: [[92 76 76 76] 76]
Test Case:   2 | Input/Output: [[-48 83 -48 -48] -48]
Test Case:   3 | Input/Output: [[-42 -89 -89 -89] -89]
Test Case:   4 | Input/Output: [[90 47 47 47] 47]
Test Case:   5 | Input/Output: [[-52 29 -52 -52] -52]
Test Case:   6 | Input/Output: [[-61 -61 -61 -19] -61]
Test Case:   7 | Input/Output: [[-64 -13 -64 -64] -64]
Test Case:   8 | Input/Output: [[28 -62 28 28] -62]
Test Case:   9 | Input/Output: [[-46 22 22 22] -46]
Test Case:  10 | Input/Output: [[64 64 -53 64] -53]
Test Case:  11 | Input/Output: [[-6 100 100 100] -6]
Test Case:  12 | Input/Output: [[60 8 60 60] 8]
Test Case:  13 | Input/Output: [[-59 -59 -59 -25] -59]
Test Case:  14 | Input/Output: [[-28 -28 18 -28] -28]
Test Case:  15 | Input/Output: [[7 -66 7 7] -66]
Test Case:  16 | Input/Output: [[-8 -79 -8 -8] -79]
Test Case:  17 | Input/Output: [[-2 -40 -2 -2] -40]
Test Case:  18 | Input/Output: [[-43 -43 69 -43] -43]
Test Case:  19 | Input/Output: [[68 100 68 68] 68]
Test Case:  20 | Input/Output: [[-29 -65 -65 -65] -65]
Test Case:  21 | Input/Output: [[-25 -25 -25 61] -25]
Test Case:  22 | Input/Output: [[-1 -1 -1 -1] -1]
Test Case:  23 | Input/Output: [[80 -3 80 80] -3]
Test Case:  24 | Input/Output: [[-93 -93 -93 10] -93]
Test Case:  25 | Input/Output: [[22 22 22 -77] -77]
Test Case:  26 | Input/Output: [[-73 -73 -73 -86] -86]
Test Case:  27 | Input/Output: [[-88 -88 -88 15] -88]
Test Case:  28 | Input/Output: [[45 45 45 10] 10]
Test Case:  29 | Input/Output: [[46 83 46 46] 46]
Test Case:  30 | Input/Output: [[-78 -78 -78 -83] -83]
Test Case:  31 | Input/Output: [[82 91 91 91] 82]
Test Case:  32 | Input/Output: [[-93 -93 -93 -7] -93]
Test Case:  33 | Input/Output: [[8 8 8 -75] -75]
Test Case:  34 | Input/Output: [[-21 7 7 7] -21]
Test Case:  35 | Input/Output: [[-17 77 77 77] -17]
Test Case:  36 | Input/Output: [[-51 13 13 13] -51]
Test Case:  37 | Input/Output: [[93 93 93 64] 64]
Test Case:  38 | Input/Output: [[-16 -16 -16 -31] -31]
Test Case:  39 | Input/Output: [[23 23 23 0] 0]
Test Case:  40 | Input/Output: [[29 29 29 19] 19]
Test Case:  41 | Input/Output: [[83 72 72 72] 72]
Test Case:  42 | Input/Output: [[-26 66 -26 -26] -26]
Test Case:  43 | Input/Output: [[-76 -76 26 -76] -76]
Test Case:  44 | Input/Output: [[7 7 7 57] 7]
Test Case:  45 | Input/Output: [[-35 -48 -35 -35] -48]
Test Case:  46 | Input/Output: [[13 13 13 29] 13]
Test Case:  47 | Input/Output: [[-22 62 -22 -22] -22]
Test Case:  48 | Input/Output: [[26 26 76 26] 26]
Test Case:  49 | Input/Output: [[-29 72 -29 -29] -29]
Test Case:  50 | Input/Output: [[-23 -87 -23 -23] -87]
Test Case:  51 | Input/Output: [[-86 -62 -62 -62] -86]
Test Case:  52 | Input/Output: [[71 71 71 -4] -4]
Test Case:  53 | Input/Output: [[-49 40 40 40] -49]
Test Case:  54 | Input/Output: [[86 86 85 86] 85]
Test Case:  55 | Input/Output: [[98 -3 -3 -3] -3]
Test Case:  56 | Input/Output: [[91 91 91 58] 58]
Test Case:  57 | Input/Output: [[26 -59 -59 -59] -59]
Test Case:  58 | Input/Output: [[-67 -61 -67 -67] -67]
Test Case:  59 | Input/Output: [[69 67 69 69] 67]
Test Case:  60 | Input/Output: [[0 87 87 87] 0]
Test Case:  61 | Input/Output: [[-71 37 37 37] -71]
Test Case:  62 | Input/Output: [[24 -35 -35 -35] -35]
Test Case:  63 | Input/Output: [[-70 -70 -70 32] -70]
Test Case:  64 | Input/Output: [[87 -34 87 87] -34]
Test Case:  65 | Input/Output: [[-47 -80 -47 -47] -80]
Test Case:  66 | Input/Output: [[-31 -31 -77 -31] -77]
Test Case:  67 | Input/Output: [[-16 59 -16 -16] -16]
Test Case:  68 | Input/Output: [[-48 -48 -48 -90] -90]
Test Case:  69 | Input/Output: [[-9 -9 66 -9] -9]
Test Case:  70 | Input/Output: [[-95 -66 -95 -95] -95]
Test Case:  71 | Input/Output: [[-56 -25 -25 -25] -56]
Test Case:  72 | Input/Output: [[-29 -29 -29 -46] -46]
Test Case:  73 | Input/Output: [[-42 -42 -42 -25] -42]
Test Case:  74 | Input/Output: [[3 -48 -48 -48] -48]
Test Case:  75 | Input/Output: [[-87 46 46 46] -87]
Test Case:  76 | Input/Output: [[80 -37 -37 -37] -37]
Test Case:  77 | Input/Output: [[66 -45 -45 -45] -45]
Test Case:  78 | Input/Output: [[50 20 50 50] 20]
Test Case:  79 | Input/Output: [[-56 -56 -32 -56] -56]
Test Case:  80 | Input/Output: [[58 17 17 17] 17]
Test Case:  81 | Input/Output: [[41 -55 41 41] -55]
Test Case:  82 | Input/Output: [[-60 -60 -60 6] -60]
Test Case:  83 | Input/Output: [[15 -17 15 15] -17]
Test Case:  84 | Input/Output: [[42 42 -69 42] -69]
Test Case:  85 | Input/Output: [[-19 -67 -19 -19] -67]
Test Case:  86 | Input/Output: [[90 90 -73 90] -73]
Test Case:  87 | Input/Output: [[-87 93 93 93] -87]
Test Case:  88 | Input/Output: [[41 -72 -72 -72] -72]
Test Case:  89 | Input/Output: [[59 -92 -92 -92] -92]
Test Case:  90 | Input/Output: [[93 5 5 5] 5]
Test Case:  91 | Input/Output: [[6 -49 -49 -49] -49]
Test Case:  92 | Input/Output: [[76 69 76 76] 69]
Test Case:  93 | Input/Output: [[99 99 37 99] 37]
Test Case:  94 | Input/Output: [[-62 -62 -49 -62] -62]
Test Case:  95 | Input/Output: [[75 51 75 75] 51]
Test Case:  96 | Input/Output: [[60 60 12 60] 12]
Test Case:  97 | Input/Output: [[-70 23 -70 -70] -70]
Test Case:  98 | Input/Output: [[79 79 79 64] 64]
Test Case:  99 | Input/Output: [[-31 -31 -70 -31] -70]
Test Case: 100 | Input/Output: [(-78 -78 -78 -78) -78]
Test Case: 101 | Input/Output: [(-33 -33 -33 -33) -33]
Test Case: 102 | Input/Output: [(26 26 26 26) 26]
Test Case: 103 | Input/Output: [(77 77 77 77) 77]
Test Case: 104 | Input/Output: [(-87 -87 -87 -87) -87]
Test Case: 105 | Input/Output: [(61 61 61 61) 61]
Test Case: 106 | Input/Output: [(-72 -72 -72 -72) -72]
Test Case: 107 | Input/Output: [(10 10 10 10) 10]
Test Case: 108 | Input/Output: [(-58 -58 -58 -58) -58]
Test Case: 109 | Input/Output: [(44 44 44 44) 44]
Test Case: 110 | Input/Output: [(-99 -99 -99 -99) -99]
Test Case: 111 | Input/Output: [(-37 -37 -37 -37) -37]
Test Case: 112 | Input/Output: [(-98 -98 -98 -98) -98]
Test Case: 113 | Input/Output: [(-34 -34 -34 -34) -34]
Test Case: 114 | Input/Output: [(-62 -62 -62 -62) -62]
Test Case: 115 | Input/Output: [(-41 -41 -41 -41) -41]
Test Case: 116 | Input/Output: [(-52 -52 -52 -52) -52]
Test Case: 117 | Input/Output: [(-69 -69 -69 -69) -69]
Test Case: 118 | Input/Output: [(70 70 70 70) 70]
Test Case: 119 | Input/Output: [(-2 -2 -2 -2) -2]
Test Case: 120 | Input/Output: [(-19 -19 -19 -19) -19]
Test Case: 121 | Input/Output: [(-89 -89 -89 -89) -89]
Test Case: 122 | Input/Output: [(43 43 43 43) 43]
Test Case: 123 | Input/Output: [(-24 -24 -24 -24) -24]
Test Case: 124 | Input/Output: [(48 48 48 48) 48]
Test Case: 125 | Input/Output: [(91 91 91 91) 91]
Test Case: 126 | Input/Output: [(-38 -38 -38 -38) -38]
Test Case: 127 | Input/Output: [(6 6 6 6) 6]
Test Case: 128 | Input/Output: [(-29 -29 -29 -29) -29]
Test Case: 129 | Input/Output: [(55 55 55 55) 55]
Test Case: 130 | Input/Output: [(78 78 78 78) 78]
Test Case: 131 | Input/Output: [(95 95 95 95) 95]
Test Case: 132 | Input/Output: [(29 29 29 29) 29]
Test Case: 133 | Input/Output: [(-17 -17 -17 -17) -17]
Test Case: 134 | Input/Output: [(-80 -80 -80 -80) -80]
Test Case: 135 | Input/Output: [(17 17 17 17) 17]
Test Case: 136 | Input/Output: [(2 2 2 2) 2]
Test Case: 137 | Input/Output: [(-87 -87 -87 -87) -87]
Test Case: 138 | Input/Output: [(-37 -37 -37 -37) -37]
Test Case: 139 | Input/Output: [(-17 -17 -17 -17) -17]
Test Case: 140 | Input/Output: [(-9 -9 -9 -9) -9]
Test Case: 141 | Input/Output: [(56 56 56 56) 56]
Test Case: 142 | Input/Output: [(69 69 69 69) 69]
Test Case: 143 | Input/Output: [(-74 -74 -74 -74) -74]
Test Case: 144 | Input/Output: [(59 59 59 59) 59]
Test Case: 145 | Input/Output: [(-59 -59 -59 -59) -59]
Test Case: 146 | Input/Output: [(-25 -25 -25 -25) -25]
Test Case: 147 | Input/Output: [(1 1 1 1) 1]
Test Case: 148 | Input/Output: [(64 64 64 64) 64]
Test Case: 149 | Input/Output: [(-25 -25 -25 -25) -25]
Test Case: 150 | Input/Output: [(-5 -5 -5 -5) -5]
Test Case: 151 | Input/Output: [(-55 -55 -55 -55) -55]
Test Case: 152 | Input/Output: [(21 21 21 21) 21]
Test Case: 153 | Input/Output: [(-48 -48 -48 -48) -48]
Test Case: 154 | Input/Output: [(-81 -81 -81 -81) -81]
Test Case: 155 | Input/Output: [(-35 -35 -35 -35) -35]
Test Case: 156 | Input/Output: [(23 23 23 23) 23]
Test Case: 157 | Input/Output: [(-72 -72 -72 -72) -72]
Test Case: 158 | Input/Output: [(-94 -94 -94 -94) -94]
Test Case: 159 | Input/Output: [(24 24 24 24) 24]
Test Case: 160 | Input/Output: [(-76 -76 -76 -76) -76]
Test Case: 161 | Input/Output: [(-79 -79 -79 -79) -79]
Test Case: 162 | Input/Output: [(33 33 33 33) 33]
Test Case: 163 | Input/Output: [(47 47 47 47) 47]
Test Case: 164 | Input/Output: [(46 46 46 46) 46]
Test Case: 165 | Input/Output: [(-71 -71 -71 -71) -71]
Test Case: 166 | Input/Output: [(2 2 2 2) 2]
Test Case: 167 | Input/Output: [(-3 -3 -3 -3) -3]
Test Case: 168 | Input/Output: [(96 96 96 96) 96]
Test Case: 169 | Input/Output: [(-37 -37 -37 -37) -37]
Test Case: 170 | Input/Output: [(9 9 9 9) 9]
Test Case: 171 | Input/Output: [(32 32 32 32) 32]
Test Case: 172 | Input/Output: [(42 42 42 42) 42]
Test Case: 173 | Input/Output: [(61 61 61 61) 61]
Test Case: 174 | Input/Output: [(-4 -4 -4 -4) -4]
Test Case: 175 | Input/Output: [(17 17 17 17) 17]
Test Case: 176 | Input/Output: [(-60 -60 -60 -60) -60]
Test Case: 177 | Input/Output: [(66 66 66 66) 66]
Test Case: 178 | Input/Output: [(53 53 53 53) 53]
Test Case: 179 | Input/Output: [(42 42 42 42) 42]
Test Case: 180 | Input/Output: [(-34 -34 -34 -34) -34]
Test Case: 181 | Input/Output: [(5 5 5 5) 5]
Test Case: 182 | Input/Output: [(-8 -8 -8 -8) -8]
Test Case: 183 | Input/Output: [(-93 -93 -93 -93) -93]
Test Case: 184 | Input/Output: [(-57 -57 -57 -57) -57]
Test Case: 185 | Input/Output: [(-98 -98 -98 -98) -98]
Test Case: 186 | Input/Output: [(27 27 27 27) 27]
Test Case: 187 | Input/Output: [(-91 -91 -91 -91) -91]
Test Case: 188 | Input/Output: [(22 22 22 22) 22]
Test Case: 189 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 190 | Input/Output: [(-36 -36 -36 -36) -36]
Test Case: 191 | Input/Output: [(-46 -46 -46 -46) -46]
Test Case: 192 | Input/Output: [(-17 -17 -17 -17) -17]
Test Case: 193 | Input/Output: [(-89 -89 -89 -89) -89]
Test Case: 194 | Input/Output: [(-54 -54 -54 -54) -54]
Test Case: 195 | Input/Output: [(-50 -50 -50 -50) -50]
Test Case: 196 | Input/Output: [(31 31 31 31) 31]
Test Case: 197 | Input/Output: [(13 13 13 13) 13]
Test Case: 198 | Input/Output: [(-18 -18 -18 -18) -18]
Test Case: 199 | Input/Output: [(-32 -32 -32 -32) -32]
Test Case: 200 | Input/Output: [(56 11 68 39) 11]
Test Case: 201 | Input/Output: [(43 64 80 79) 43]
Test Case: 202 | Input/Output: [(39 9 98 42) 9]
Test Case: 203 | Input/Output: [(13 84 7 29) 7]
Test Case: 204 | Input/Output: [(13 37 7 47) 7]
Test Case: 205 | Input/Output: [(79 84 14 0) 0]
Test Case: 206 | Input/Output: [(65 31 76 80) 31]
Test Case: 207 | Input/Output: [(80 60 60 72) 60]
Test Case: 208 | Input/Output: [(70 44 68 57) 44]
Test Case: 209 | Input/Output: [(60 46 38 89) 38]
Test Case: 210 | Input/Output: [(58 90 57 61) 57]
Test Case: 211 | Input/Output: [(79 4 42 86) 4]
Test Case: 212 | Input/Output: [(11 84 22 38) 11]
Test Case: 213 | Input/Output: [(98 2 34 96) 2]
Test Case: 214 | Input/Output: [(42 1 87 74) 1]
Test Case: 215 | Input/Output: [(52 35 2 40) 2]
Test Case: 216 | Input/Output: [(71 97 55 12) 12]
Test Case: 217 | Input/Output: [(88 32 90 48) 32]
Test Case: 218 | Input/Output: [(34 17 35 31) 17]
Test Case: 219 | Input/Output: [(59 21 62 39) 21]
Test Case: 220 | Input/Output: [(24 35 74 82) 24]
Test Case: 221 | Input/Output: [(61 76 24 16) 16]
Test Case: 222 | Input/Output: [(71 90 52 20) 20]
Test Case: 223 | Input/Output: [(74 30 30 22) 22]
Test Case: 224 | Input/Output: [(87 94 4 32) 4]
Test Case: 225 | Input/Output: [(16 32 44 64) 16]
Test Case: 226 | Input/Output: [(63 23 36 72) 23]
Test Case: 227 | Input/Output: [(76 48 68 96) 48]
Test Case: 228 | Input/Output: [(73 12 55 52) 12]
Test Case: 229 | Input/Output: [(52 65 43 35) 35]
Test Case: 230 | Input/Output: [(24 29 61 72) 24]
Test Case: 231 | Input/Output: [(94 89 59 96) 59]
Test Case: 232 | Input/Output: [(23 64 73 33) 23]
Test Case: 233 | Input/Output: [(89 68 65 94) 65]
Test Case: 234 | Input/Output: [(50 46 0 34) 0]
Test Case: 235 | Input/Output: [(48 59 18 11) 11]
Test Case: 236 | Input/Output: [(42 53 40 48) 40]
Test Case: 237 | Input/Output: [(59 42 65 91) 42]
Test Case: 238 | Input/Output: [(20 99 0 70) 0]
Test Case: 239 | Input/Output: [(59 19 58 47) 19]
Test Case: 240 | Input/Output: [(71 93 3 92) 3]
Test Case: 241 | Input/Output: [(34 5 88 71) 5]
Test Case: 242 | Input/Output: [(52 58 58 74) 52]
Test Case: 243 | Input/Output: [(27 51 96 16) 16]
Test Case: 244 | Input/Output: [(38 90 2 48) 2]
Test Case: 245 | Input/Output: [(94 48 67 64) 48]
Test Case: 246 | Input/Output: [(1 9 11 36) 1]
Test Case: 247 | Input/Output: [(28 73 72 75) 28]
Test Case: 248 | Input/Output: [(28 91 5 84) 5]
Test Case: 249 | Input/Output: [(65 39 86 75) 39]
Test Case: 250 | Input/Output: [(51 38 91 62) 38]
Test Case: 251 | Input/Output: [(22 50 46 56) 22]
Test Case: 252 | Input/Output: [(33 27 91 78) 27]
Test Case: 253 | Input/Output: [(45 60 77 55) 45]
Test Case: 254 | Input/Output: [(78 28 77 37) 28]
Test Case: 255 | Input/Output: [(91 51 81 65) 51]
Test Case: 256 | Input/Output: [(98 17 13 93) 13]
Test Case: 257 | Input/Output: [(92 78 86 50) 50]
Test Case: 258 | Input/Output: [(100 8 92 94) 8]
Test Case: 259 | Input/Output: [(91 27 35 65) 27]
Test Case: 260 | Input/Output: [(24 37 50 56) 24]
Test Case: 261 | Input/Output: [(54 53 89 24) 24]
Test Case: 262 | Input/Output: [(27 66 14 1) 1]
Test Case: 263 | Input/Output: [(26 16 40 85) 16]
Test Case: 264 | Input/Output: [(71 10 5 36) 5]
Test Case: 265 | Input/Output: [(41 93 98 93) 41]
Test Case: 266 | Input/Output: [(50 40 54 4) 4]
Test Case: 267 | Input/Output: [(19 16 29 61) 16]
Test Case: 268 | Input/Output: [(19 65 36 34) 19]
Test Case: 269 | Input/Output: [(37 10 26 44) 10]
Test Case: 270 | Input/Output: [(24 53 49 42) 24]
Test Case: 271 | Input/Output: [(12 72 21 47) 12]
Test Case: 272 | Input/Output: [(80 16 97 38) 16]
Test Case: 273 | Input/Output: [(50 59 94 6) 6]
Test Case: 274 | Input/Output: [(96 35 24 34) 24]
Test Case: 275 | Input/Output: [(73 6 13 2) 2]
Test Case: 276 | Input/Output: [(57 80 28 61) 28]
Test Case: 277 | Input/Output: [(5 92 70 40) 5]
Test Case: 278 | Input/Output: [(74 30 100 93) 30]
Test Case: 279 | Input/Output: [(29 61 68 82) 29]
Test Case: 280 | Input/Output: [(40 67 89 79) 40]
Test Case: 281 | Input/Output: [(65 90 26 3) 3]
Test Case: 282 | Input/Output: [(83 7 86 14) 7]
Test Case: 283 | Input/Output: [(74 88 86 4) 4]
Test Case: 284 | Input/Output: [(1 50 32 42) 1]
Test Case: 285 | Input/Output: [(83 40 27 3) 3]
Test Case: 286 | Input/Output: [(15 98 39 18) 15]
Test Case: 287 | Input/Output: [(63 21 27 88) 21]
Test Case: 288 | Input/Output: [(96 14 52 86) 14]
Test Case: 289 | Input/Output: [(7 23 44 4) 4]
Test Case: 290 | Input/Output: [(100 9 4 9) 4]
Test Case: 291 | Input/Output: [(97 60 87 6) 6]
Test Case: 292 | Input/Output: [(52 70 8 30) 8]
Test Case: 293 | Input/Output: [(71 15 89 53) 15]
Test Case: 294 | Input/Output: [(95 28 20 37) 20]
Test Case: 295 | Input/Output: [(85 66 72 19) 19]
Test Case: 296 | Input/Output: [(9 69 72 98) 9]
Test Case: 297 | Input/Output: [(60 95 0 78) 0]
Test Case: 298 | Input/Output: [(43 76 92 91) 43]
Test Case: 299 | Input/Output: [(73 83 20 40) 20]
Test Case: 300 | Input/Output: [(55 32 60 30) 30]
Test Case: 301 | Input/Output: [(42 2 100 96) 2]
Test Case: 302 | Input/Output: [(58 97 8 9) 8]
Test Case: 303 | Input/Output: [(3 14 2 100) 2]
Test Case: 304 | Input/Output: [(52 76 17 73) 17]
Test Case: 305 | Input/Output: [(11 84 60 85) 11]
Test Case: 306 | Input/Output: [(41 40 5 92) 5]
Test Case: 307 | Input/Output: [(5 59 29 17) 5]
Test Case: 308 | Input/Output: [(90 78 15 58) 15]
Test Case: 309 | Input/Output: [(13 88 5 64) 5]
Test Case: 310 | Input/Output: [(88 78 39 71) 39]
Test Case: 311 | Input/Output: [(31 16 75 18) 16]
Test Case: 312 | Input/Output: [(9 32 70 51) 9]
Test Case: 313 | Input/Output: [(81 2 38 52) 2]
Test Case: 314 | Input/Output: [(49 34 84 13) 13]
Test Case: 315 | Input/Output: [(12 17 51 62) 12]
Test Case: 316 | Input/Output: [(74 72 34 98) 34]
Test Case: 317 | Input/Output: [(39 37 49 29) 29]
Test Case: 318 | Input/Output: [(56 68 28 30) 28]
Test Case: 319 | Input/Output: [(44 94 19 32) 19]
Test Case: 320 | Input/Output: [(38 96 25 89) 25]
Test Case: 321 | Input/Output: [(83 85 79 35) 35]
Test Case: 322 | Input/Output: [(56 80 73 90) 56]
Test Case: 323 | Input/Output: [(88 29 79 62) 29]
Test Case: 324 | Input/Output: [(88 34 25 18) 18]
Test Case: 325 | Input/Output: [(29 96 52 0) 0]
Test Case: 326 | Input/Output: [(65 88 70 56) 56]
Test Case: 327 | Input/Output: [(20 70 28 23) 20]
Test Case: 328 | Input/Output: [(89 52 97 82) 52]
Test Case: 329 | Input/Output: [(75 12 24 51) 12]
Test Case: 330 | Input/Output: [(84 41 2 73) 2]
Test Case: 331 | Input/Output: [(20 57 25 86) 20]
Test Case: 332 | Input/Output: [(62 78 90 5) 5]
Test Case: 333 | Input/Output: [(90 23 32 45) 23]
Test Case: 334 | Input/Output: [(31 38 79 47) 31]
Test Case: 335 | Input/Output: [(62 53 41 66) 41]
Test Case: 336 | Input/Output: [(44 28 22 15) 15]
Test Case: 337 | Input/Output: [(57 38 11 48) 11]
Test Case: 338 | Input/Output: [(100 13 41 19) 13]
Test Case: 339 | Input/Output: [(2 74 77 80) 2]
Test Case: 340 | Input/Output: [(1 54 27 21) 1]
Test Case: 341 | Input/Output: [(97 57 8 53) 8]
Test Case: 342 | Input/Output: [(19 22 38 18) 18]
Test Case: 343 | Input/Output: [(65 5 27 32) 5]
Test Case: 344 | Input/Output: [(0 17 37 79) 0]
Test Case: 345 | Input/Output: [(85 30 60 20) 20]
Test Case: 346 | Input/Output: [(73 72 13 96) 13]
Test Case: 347 | Input/Output: [(21 55 35 26) 21]
Test Case: 348 | Input/Output: [(90 70 95 86) 70]
Test Case: 349 | Input/Output: [(88 11 54 80) 11]
Test Case: 350 | Input/Output: [(51 17 80 86) 17]
Test Case: 351 | Input/Output: [(25 46 67 35) 25]
Test Case: 352 | Input/Output: [(95 64 40 79) 40]
Test Case: 353 | Input/Output: [(99 67 77 47) 47]
Test Case: 354 | Input/Output: [(91 9 100 80) 9]
Test Case: 355 | Input/Output: [(83 61 40 67) 40]
Test Case: 356 | Input/Output: [(70 70 56 30) 30]
Test Case: 357 | Input/Output: [(46 65 46 28) 28]
Test Case: 358 | Input/Output: [(6 9 99 64) 6]
Test Case: 359 | Input/Output: [(54 2 9 43) 2]
Test Case: 360 | Input/Output: [(13 83 23 46) 13]
Test Case: 361 | Input/Output: [(89 95 10 58) 10]
Test Case: 362 | Input/Output: [(61 44 63 41) 41]
Test Case: 363 | Input/Output: [(13 95 75 17) 13]
Test Case: 364 | Input/Output: [(22 2 65 39) 2]
Test Case: 365 | Input/Output: [(58 45 80 11) 11]
Test Case: 366 | Input/Output: [(55 21 60 47) 21]
Test Case: 367 | Input/Output: [(95 16 34 44) 16]
Test Case: 368 | Input/Output: [(5 13 59 5) 5]
Test Case: 369 | Input/Output: [(39 61 58 83) 39]
Test Case: 370 | Input/Output: [(6 37 69 71) 6]
Test Case: 371 | Input/Output: [(8 29 69 29) 8]
Test Case: 372 | Input/Output: [(12 59 30 47) 12]
Test Case: 373 | Input/Output: [(0 53 28 46) 0]
Test Case: 374 | Input/Output: [(25 74 35 6) 6]
Test Case: 375 | Input/Output: [(13 14 49 17) 13]
Test Case: 376 | Input/Output: [(62 77 76 6) 6]
Test Case: 377 | Input/Output: [(45 80 81 19) 19]
Test Case: 378 | Input/Output: [(80 21 59 39) 21]
Test Case: 379 | Input/Output: [(45 26 3 76) 3]
Test Case: 380 | Input/Output: [(13 9 97 26) 9]
Test Case: 381 | Input/Output: [(67 33 57 91) 33]
Test Case: 382 | Input/Output: [(83 56 14 33) 14]
Test Case: 383 | Input/Output: [(48 11 35 73) 11]
Test Case: 384 | Input/Output: [(18 63 47 98) 18]
Test Case: 385 | Input/Output: [(43 59 54 55) 43]
Test Case: 386 | Input/Output: [(65 98 49 26) 26]
Test Case: 387 | Input/Output: [(91 79 30 95) 30]
Test Case: 388 | Input/Output: [(74 45 89 75) 45]
Test Case: 389 | Input/Output: [(34 60 54 98) 34]
Test Case: 390 | Input/Output: [(32 80 77 88) 32]
Test Case: 391 | Input/Output: [(78 38 2 35) 2]
Test Case: 392 | Input/Output: [(37 58 19 64) 19]
Test Case: 393 | Input/Output: [(51 23 27 42) 23]
Test Case: 394 | Input/Output: [(67 91 97 5) 5]
Test Case: 395 | Input/Output: [(77 40 74 20) 20]
Test Case: 396 | Input/Output: [(65 32 72 85) 32]
Test Case: 397 | Input/Output: [(80 84 13 83) 13]
Test Case: 398 | Input/Output: [(16 0 54 61) 0]
Test Case: 399 | Input/Output: [(30 81 33 72) 30]
Test Case: 400 | Input/Output: [(-86 5 -30 57) -86]
Test Case: 401 | Input/Output: [(-16 68 59 -3) -16]
Test Case: 402 | Input/Output: [(57 -53 67 -35) -53]
Test Case: 403 | Input/Output: [(13 94 -88 -72) -88]
Test Case: 404 | Input/Output: [(1 41 -76 95) -76]
Test Case: 405 | Input/Output: [(-11 -18 28 -92) -92]
Test Case: 406 | Input/Output: [(12 -10 38 -4) -10]
Test Case: 407 | Input/Output: [(-5 -59 -1 -83) -83]
Test Case: 408 | Input/Output: [(-15 2 -27 -50) -50]
Test Case: 409 | Input/Output: [(59 -66 -4 63) -66]
Test Case: 410 | Input/Output: [(44 80 80 69) 44]
Test Case: 411 | Input/Output: [(-20 -87 44 68) -87]
Test Case: 412 | Input/Output: [(55 -17 -65 20) -65]
Test Case: 413 | Input/Output: [(23 73 -9 -32) -32]
Test Case: 414 | Input/Output: [(56 81 40 -92) -92]
Test Case: 415 | Input/Output: [(98 80 11 64) 11]
Test Case: 416 | Input/Output: [(21 -55 -82 22) -82]
Test Case: 417 | Input/Output: [(-62 39 -32 98) -62]
Test Case: 418 | Input/Output: [(-7 -31 -61 -4) -61]
Test Case: 419 | Input/Output: [(-10 -85 65 -45) -85]
Test Case: 420 | Input/Output: [(54 85 -69 -57) -69]
Test Case: 421 | Input/Output: [(7 33 14 98) 7]
Test Case: 422 | Input/Output: [(-32 -82 62 -5) -82]
Test Case: 423 | Input/Output: [(74 1 -72 -53) -72]
Test Case: 424 | Input/Output: [(48 -91 -95 -45) -95]
Test Case: 425 | Input/Output: [(40 36 88 50) 36]
Test Case: 426 | Input/Output: [(62 -97 -26 -28) -97]
Test Case: 427 | Input/Output: [(31 11 22 48) 11]
Test Case: 428 | Input/Output: [(-90 42 50 -94) -94]
Test Case: 429 | Input/Output: [(36 96 58 -36) -36]
Test Case: 430 | Input/Output: [(-53 71 78 35) -53]
Test Case: 431 | Input/Output: [(52 -59 -47 72) -59]
Test Case: 432 | Input/Output: [(20 7 -76 28) -76]
Test Case: 433 | Input/Output: [(-93 -26 -99 39) -99]
Test Case: 434 | Input/Output: [(-75 -76 89 -27) -76]
Test Case: 435 | Input/Output: [(-28 71 56 -81) -81]
Test Case: 436 | Input/Output: [(-24 -2 -48 12) -48]
Test Case: 437 | Input/Output: [(-25 49 -63 58) -63]
Test Case: 438 | Input/Output: [(91 96 78 -16) -16]
Test Case: 439 | Input/Output: [(41 50 8 24) 8]
Test Case: 440 | Input/Output: [(-3 52 90 31) -3]
Test Case: 441 | Input/Output: [(9 -34 -63 -30) -63]
Test Case: 442 | Input/Output: [(73 85 -92 49) -92]
Test Case: 443 | Input/Output: [(41 -100 46 26) -100]
Test Case: 444 | Input/Output: [(50 -54 84 16) -54]
Test Case: 445 | Input/Output: [(-30 -93 -67 44) -93]
Test Case: 446 | Input/Output: [(-86 -100 -11 54) -100]
Test Case: 447 | Input/Output: [(26 -56 -62 52) -62]
Test Case: 448 | Input/Output: [(59 -24 -97 82) -97]
Test Case: 449 | Input/Output: [(2 -84 50 -25) -84]
Test Case: 450 | Input/Output: [(-100 -97 -54 88) -100]
Test Case: 451 | Input/Output: [(-69 -98 -25 15) -98]
Test Case: 452 | Input/Output: [(-71 -86 41 -16) -86]
Test Case: 453 | Input/Output: [(74 -17 26 21) -17]
Test Case: 454 | Input/Output: [(-23 -63 88 -9) -63]
Test Case: 455 | Input/Output: [(4 -75 -40 70) -75]
Test Case: 456 | Input/Output: [(35 -69 -64 68) -69]
Test Case: 457 | Input/Output: [(-8 -22 72 -68) -68]
Test Case: 458 | Input/Output: [(-10 -31 -86 39) -86]
Test Case: 459 | Input/Output: [(-19 -68 -26 -61) -68]
Test Case: 460 | Input/Output: [(61 -94 -47 36) -94]
Test Case: 461 | Input/Output: [(3 -94 -52 96) -94]
Test Case: 462 | Input/Output: [(-15 76 1 25) -15]
Test Case: 463 | Input/Output: [(56 56 -96 99) -96]
Test Case: 464 | Input/Output: [(11 -10 70 -78) -78]
Test Case: 465 | Input/Output: [(-23 47 -90 81) -90]
Test Case: 466 | Input/Output: [(-94 -62 56 -98) -98]
Test Case: 467 | Input/Output: [(-91 60 -79 -35) -91]
Test Case: 468 | Input/Output: [(23 -51 -63 94) -63]
Test Case: 469 | Input/Output: [(-94 83 64 -85) -94]
Test Case: 470 | Input/Output: [(25 44 79 -80) -80]
Test Case: 471 | Input/Output: [(-91 87 -7 95) -91]
Test Case: 472 | Input/Output: [(97 59 92 35) 35]
Test Case: 473 | Input/Output: [(91 82 65 -44) -44]
Test Case: 474 | Input/Output: [(-17 98 -3 -69) -69]
Test Case: 475 | Input/Output: [(44 -76 -79 89) -79]
Test Case: 476 | Input/Output: [(28 -82 48 72) -82]
Test Case: 477 | Input/Output: [(-38 74 -72 -81) -81]
Test Case: 478 | Input/Output: [(4 -45 86 15) -45]
Test Case: 479 | Input/Output: [(-20 -1 48 93) -20]
Test Case: 480 | Input/Output: [(-98 -34 -19 70) -98]
Test Case: 481 | Input/Output: [(-24 -29 20 -94) -94]
Test Case: 482 | Input/Output: [(84 -63 11 60) -63]
Test Case: 483 | Input/Output: [(3 54 -58 15) -58]
Test Case: 484 | Input/Output: [(-13 -97 51 -76) -97]
Test Case: 485 | Input/Output: [(-90 -89 54 -46) -90]
Test Case: 486 | Input/Output: [(27 90 55 -6) -6]
Test Case: 487 | Input/Output: [(-44 -19 -74 -76) -76]
Test Case: 488 | Input/Output: [(-88 -22 -60 -100) -100]
Test Case: 489 | Input/Output: [(-1 -96 73 7) -96]
Test Case: 490 | Input/Output: [(-7 16 -37 65) -37]
Test Case: 491 | Input/Output: [(22 -48 -18 -93) -93]
Test Case: 492 | Input/Output: [(18 12 -53 -46) -53]
Test Case: 493 | Input/Output: [(92 23 -57 -66) -66]
Test Case: 494 | Input/Output: [(74 35 53 -80) -80]
Test Case: 495 | Input/Output: [(-60 -90 -79 -8) -90]
Test Case: 496 | Input/Output: [(16 -70 -50 92) -70]
Test Case: 497 | Input/Output: [(59 -68 46 91) -68]
Test Case: 498 | Input/Output: [(59 53 43 18) 18]
Test Case: 499 | Input/Output: [(-13 47 64 24) -13]
Test Case: 500 | Input/Output: [(77 7 -80 9) -80]
Test Case: 501 | Input/Output: [(91 -100 -5 17) -100]
Test Case: 502 | Input/Output: [(-92 -66 -77 0) -92]
Test Case: 503 | Input/Output: [(13 66 25 8) 8]
Test Case: 504 | Input/Output: [(35 -69 -13 -60) -69]
Test Case: 505 | Input/Output: [(63 75 -2 -92) -92]
Test Case: 506 | Input/Output: [(-41 -20 84 -28) -41]
Test Case: 507 | Input/Output: [(-27 8 -22 -98) -98]
Test Case: 508 | Input/Output: [(84 -25 -44 87) -44]
Test Case: 509 | Input/Output: [(-15 -33 -63 -45) -63]
Test Case: 510 | Input/Output: [(-64 24 -47 -77) -77]
Test Case: 511 | Input/Output: [(43 20 -57 14) -57]
Test Case: 512 | Input/Output: [(10 90 -76 -48) -76]
Test Case: 513 | Input/Output: [(-83 -93 -32 -81) -93]
Test Case: 514 | Input/Output: [(65 -39 10 -9) -39]
Test Case: 515 | Input/Output: [(27 -73 95 -91) -91]
Test Case: 516 | Input/Output: [(12 -23 85 54) -23]
Test Case: 517 | Input/Output: [(-87 -28 -63 -34) -87]
Test Case: 518 | Input/Output: [(53 8 92 33) 8]
Test Case: 519 | Input/Output: [(93 74 -33 -85) -85]
Test Case: 520 | Input/Output: [(16 50 -89 -1) -89]
Test Case: 521 | Input/Output: [(49 91 -27 -100) -100]
Test Case: 522 | Input/Output: [(38 -100 -88 67) -100]
Test Case: 523 | Input/Output: [(-7 84 -9 4) -9]
Test Case: 524 | Input/Output: [(96 -35 45 -4) -35]
Test Case: 525 | Input/Output: [(-44 -66 -63 65) -66]
Test Case: 526 | Input/Output: [(-93 -73 -10 -24) -93]
Test Case: 527 | Input/Output: [(61 -25 -87 -10) -87]
Test Case: 528 | Input/Output: [(-27 91 -17 -67) -67]
Test Case: 529 | Input/Output: [(-94 14 -12 53) -94]
Test Case: 530 | Input/Output: [(52 6 62 2) 2]
Test Case: 531 | Input/Output: [(-27 -12 61 66) -27]
Test Case: 532 | Input/Output: [(-33 47 -32 -53) -53]
Test Case: 533 | Input/Output: [(-86 75 -18 68) -86]
Test Case: 534 | Input/Output: [(-99 -34 30 -42) -99]
Test Case: 535 | Input/Output: [(48 -37 -21 -94) -94]
Test Case: 536 | Input/Output: [(-79 -77 87 12) -79]
Test Case: 537 | Input/Output: [(19 -28 -48 94) -48]
Test Case: 538 | Input/Output: [(-59 -47 -19 99) -59]
Test Case: 539 | Input/Output: [(-78 -76 22 6) -78]
Test Case: 540 | Input/Output: [(-29 -40 97 1) -40]
Test Case: 541 | Input/Output: [(-7 -75 99 -83) -83]
Test Case: 542 | Input/Output: [(95 54 -57 -29) -57]
Test Case: 543 | Input/Output: [(80 -40 1 31) -40]
Test Case: 544 | Input/Output: [(37 91 52 -25) -25]
Test Case: 545 | Input/Output: [(4 99 34 23) 4]
Test Case: 546 | Input/Output: [(83 22 -88 58) -88]
Test Case: 547 | Input/Output: [(-89 61 21 32) -89]
Test Case: 548 | Input/Output: [(-12 -97 6 91) -97]
Test Case: 549 | Input/Output: [(88 -75 83 11) -75]
Test Case: 550 | Input/Output: [(69 -49 80 -52) -52]
Test Case: 551 | Input/Output: [(6 88 -34 -49) -49]
Test Case: 552 | Input/Output: [(97 12 96 -87) -87]
Test Case: 553 | Input/Output: [(-79 48 -60 16) -79]
Test Case: 554 | Input/Output: [(21 72 -56 -52) -56]
Test Case: 555 | Input/Output: [(87 -61 94 -84) -84]
Test Case: 556 | Input/Output: [(38 -50 17 6) -50]
Test Case: 557 | Input/Output: [(44 28 51 34) 28]
Test Case: 558 | Input/Output: [(7 11 -77 -30) -77]
Test Case: 559 | Input/Output: [(-23 -9 52 92) -23]
Test Case: 560 | Input/Output: [(84 -52 67 -7) -52]
Test Case: 561 | Input/Output: [(71 99 88 -73) -73]
Test Case: 562 | Input/Output: [(33 61 -25 83) -25]
Test Case: 563 | Input/Output: [(-68 -14 -46 27) -68]
Test Case: 564 | Input/Output: [(-17 -27 84 29) -27]
Test Case: 565 | Input/Output: [(-2 64 70 11) -2]
Test Case: 566 | Input/Output: [(57 -87 24 97) -87]
Test Case: 567 | Input/Output: [(70 66 88 23) 23]
Test Case: 568 | Input/Output: [(-80 53 -43 -83) -83]
Test Case: 569 | Input/Output: [(-3 66 -19 43) -19]
Test Case: 570 | Input/Output: [(5 18 -61 0) -61]
Test Case: 571 | Input/Output: [(-2 60 65 28) -2]
Test Case: 572 | Input/Output: [(-30 67 -73 -42) -73]
Test Case: 573 | Input/Output: [(-94 -3 -75 21) -94]
Test Case: 574 | Input/Output: [(60 -68 79 20) -68]
Test Case: 575 | Input/Output: [(53 -80 67 -92) -92]
Test Case: 576 | Input/Output: [(98 44 -97 -88) -97]
Test Case: 577 | Input/Output: [(-94 94 58 -10) -94]
Test Case: 578 | Input/Output: [(-36 -68 -44 -98) -98]
Test Case: 579 | Input/Output: [(-46 13 -75 -39) -75]
Test Case: 580 | Input/Output: [(-41 -25 46 56) -41]
Test Case: 581 | Input/Output: [(75 -71 92 5) -71]
Test Case: 582 | Input/Output: [(-8 93 -12 -66) -66]
Test Case: 583 | Input/Output: [(-63 -4 18 -83) -83]
Test Case: 584 | Input/Output: [(-70 96 47 -17) -70]
Test Case: 585 | Input/Output: [(-5 -28 44 68) -28]
Test Case: 586 | Input/Output: [(-6 -48 22 65) -48]
Test Case: 587 | Input/Output: [(61 20 -89 83) -89]
Test Case: 588 | Input/Output: [(-71 22 8 46) -71]
Test Case: 589 | Input/Output: [(-70 59 81 -92) -92]
Test Case: 590 | Input/Output: [(-35 -90 -77 -23) -90]
Test Case: 591 | Input/Output: [(-34 -34 -62 -3) -62]
Test Case: 592 | Input/Output: [(-82 23 -84 -30) -84]
Test Case: 593 | Input/Output: [(17 -80 -95 -95) -95]
Test Case: 594 | Input/Output: [(91 -34 -7 -21) -34]
Test Case: 595 | Input/Output: [(-81 69 -19 96) -81]
Test Case: 596 | Input/Output: [(92 24 9 9) 9]
Test Case: 597 | Input/Output: [(31 82 2 -80) -80]
Test Case: 598 | Input/Output: [(-39 29 10 49) -39]
Test Case: 599 | Input/Output: [(42 5 59 93) 5]
Test Case: 600 | Input/Output: [(12 -64 -37 4) -64]
Test Case: 601 | Input/Output: [(76 64 69 17) 17]
Test Case: 602 | Input/Output: [(-53 62 -15 8) -53]
Test Case: 603 | Input/Output: [(96 -65 -50 -71) -71]
Test Case: 604 | Input/Output: [(-35 -88 -90 -60) -90]
Test Case: 605 | Input/Output: [(-11 48 -26 44) -26]
Test Case: 606 | Input/Output: [(83 31 -15 18) -15]
Test Case: 607 | Input/Output: [(-80 -81 -95 89) -95]
Test Case: 608 | Input/Output: [(-21 -52 -60 57) -60]
Test Case: 609 | Input/Output: [(-34 39 93 95) -34]
Test Case: 610 | Input/Output: [(-73 -79 -6 59) -79]
Test Case: 611 | Input/Output: [(63 -16 87 -12) -16]
Test Case: 612 | Input/Output: [(18 66 43 -56) -56]
Test Case: 613 | Input/Output: [(64 42 -4 -35) -35]
Test Case: 614 | Input/Output: [(-55 -76 -56 31) -76]
Test Case: 615 | Input/Output: [(-92 -67 4 -59) -92]
Test Case: 616 | Input/Output: [(52 84 -35 17) -35]
Test Case: 617 | Input/Output: [(37 -71 35 49) -71]
Test Case: 618 | Input/Output: [(-95 39 20 -54) -95]
Test Case: 619 | Input/Output: [(9 36 -4 78) -4]
Test Case: 620 | Input/Output: [(-57 -26 -85 15) -85]
Test Case: 621 | Input/Output: [(32 86 94 56) 32]
Test Case: 622 | Input/Output: [(17 7 19 -91) -91]
Test Case: 623 | Input/Output: [(-92 -20 29 60) -92]
Test Case: 624 | Input/Output: [(74 -70 83 30) -70]
Test Case: 625 | Input/Output: [(50 84 81 -38) -38]
Test Case: 626 | Input/Output: [(95 -23 -68 -32) -68]
Test Case: 627 | Input/Output: [(-48 -67 1 -25) -67]
Test Case: 628 | Input/Output: [(-80 -59 67 47) -80]
Test Case: 629 | Input/Output: [(54 61 -85 8) -85]
Test Case: 630 | Input/Output: [(-65 5 30 30) -65]
Test Case: 631 | Input/Output: [(-39 66 -100 -66) -100]
Test Case: 632 | Input/Output: [(100 17 -10 64) -10]
Test Case: 633 | Input/Output: [(-40 78 55 -46) -46]
Test Case: 634 | Input/Output: [(52 -72 -86 23) -86]
Test Case: 635 | Input/Output: [(-95 -61 -9 41) -95]
Test Case: 636 | Input/Output: [(-79 73 11 -88) -88]
Test Case: 637 | Input/Output: [(80 68 -34 -32) -34]
Test Case: 638 | Input/Output: [(40 41 88 30) 30]
Test Case: 639 | Input/Output: [(44 95 27 41) 27]
Test Case: 640 | Input/Output: [(54 -72 20 -97) -97]
Test Case: 641 | Input/Output: [(-16 50 30 38) -16]
Test Case: 642 | Input/Output: [(33 47 -63 63) -63]
Test Case: 643 | Input/Output: [(-47 69 84 17) -47]
Test Case: 644 | Input/Output: [(57 69 89 -84) -84]
Test Case: 645 | Input/Output: [(66 -11 29 -92) -92]
Test Case: 646 | Input/Output: [(-11 -91 22 -55) -91]
Test Case: 647 | Input/Output: [(41 -16 87 12) -16]
Test Case: 648 | Input/Output: [(48 -99 -62 -16) -99]
Test Case: 649 | Input/Output: [(58 1 45 -82) -82]
Test Case: 650 | Input/Output: [(-4 94 -72 -62) -72]
Test Case: 651 | Input/Output: [(-77 -38 80 78) -77]
Test Case: 652 | Input/Output: [(36 99 -3 65) -3]
Test Case: 653 | Input/Output: [(89 -57 39 -18) -57]
Test Case: 654 | Input/Output: [(43 88 22 82) 22]
Test Case: 655 | Input/Output: [(-90 44 90 34) -90]
Test Case: 656 | Input/Output: [(-64 -87 74 -52) -87]
Test Case: 657 | Input/Output: [(-75 91 -18 19) -75]
Test Case: 658 | Input/Output: [(63 -19 81 -82) -82]
Test Case: 659 | Input/Output: [(8 -99 -55 -60) -99]
Test Case: 660 | Input/Output: [(70 -24 -27 -44) -44]
Test Case: 661 | Input/Output: [(54 83 96 -61) -61]
Test Case: 662 | Input/Output: [(9 -36 96 -7) -36]
Test Case: 663 | Input/Output: [(86 38 13 -83) -83]
Test Case: 664 | Input/Output: [(51 90 -60 -40) -60]
Test Case: 665 | Input/Output: [(-87 37 22 -55) -87]
Test Case: 666 | Input/Output: [(-7 -58 -81 -95) -95]
Test Case: 667 | Input/Output: [(20 -16 -74 69) -74]
Test Case: 668 | Input/Output: [(-80 -10 5 -68) -80]
Test Case: 669 | Input/Output: [(-22 -49 -13 -84) -84]
Test Case: 670 | Input/Output: [(-42 -66 77 -55) -66]
Test Case: 671 | Input/Output: [(96 57 65 49) 49]
Test Case: 672 | Input/Output: [(-89 -9 -4 -76) -89]
Test Case: 673 | Input/Output: [(-21 60 -12 -76) -76]
Test Case: 674 | Input/Output: [(95 41 -75 46) -75]
Test Case: 675 | Input/Output: [(84 -57 57 -1) -57]
Test Case: 676 | Input/Output: [(-79 32 -31 -10) -79]
Test Case: 677 | Input/Output: [(-23 -66 -22 65) -66]
Test Case: 678 | Input/Output: [(45 -5 100 -4) -5]
Test Case: 679 | Input/Output: [(-87 53 21 -13) -87]
Test Case: 680 | Input/Output: [(90 -83 57 -63) -83]
Test Case: 681 | Input/Output: [(53 -59 70 73) -59]
Test Case: 682 | Input/Output: [(-5 -2 63 -25) -25]
Test Case: 683 | Input/Output: [(77 -25 -67 80) -67]
Test Case: 684 | Input/Output: [(-42 -32 51 40) -42]
Test Case: 685 | Input/Output: [(-74 95 20 73) -74]
Test Case: 686 | Input/Output: [(51 87 50 -64) -64]
Test Case: 687 | Input/Output: [(-58 -77 -77 91) -77]
Test Case: 688 | Input/Output: [(38 -88 -71 75) -88]
Test Case: 689 | Input/Output: [(-60 -91 -89 90) -91]
Test Case: 690 | Input/Output: [(86 89 18 -38) -38]
Test Case: 691 | Input/Output: [(60 7 30 67) 7]
Test Case: 692 | Input/Output: [(66 -29 -33 -80) -80]
Test Case: 693 | Input/Output: [(51 31 -99 14) -99]
Test Case: 694 | Input/Output: [(-21 -64 46 40) -64]
Test Case: 695 | Input/Output: [(-48 18 -65 -85) -85]
Test Case: 696 | Input/Output: [(95 -42 19 30) -42]
Test Case: 697 | Input/Output: [(95 44 67 35) 35]
Test Case: 698 | Input/Output: [(-76 -19 -53 -4) -76]
Test Case: 699 | Input/Output: [(-65 51 52 -40) -65]
Test Case: 700 | Input/Output: [(-33 -91 78 73) -91]
Test Case: 701 | Input/Output: [(-2 97 80 52) -2]
Test Case: 702 | Input/Output: [(-97 -94 24 13) -97]
Test Case: 703 | Input/Output: [(76 81 -42 28) -42]
Test Case: 704 | Input/Output: [(-78 57 79 -81) -81]
Test Case: 705 | Input/Output: [(-69 24 -86 -37) -86]
Test Case: 706 | Input/Output: [(67 57 17 38) 17]
Test Case: 707 | Input/Output: [(51 -69 -23 -69) -69]
Test Case: 708 | Input/Output: [(-96 65 52 -79) -96]
Test Case: 709 | Input/Output: [(3 4 -97 84) -97]
Test Case: 710 | Input/Output: [(-19 -5 94 -13) -19]
Test Case: 711 | Input/Output: [(-2 -77 40 -38) -77]
Test Case: 712 | Input/Output: [(28 -11 -76 -2) -76]
Test Case: 713 | Input/Output: [(-82 98 -10 37) -82]
Test Case: 714 | Input/Output: [(28 17 -76 -94) -94]
Test Case: 715 | Input/Output: [(72 -50 99 36) -50]
Test Case: 716 | Input/Output: [(-61 26 -85 -38) -85]
Test Case: 717 | Input/Output: [(-81 -49 67 45) -81]
Test Case: 718 | Input/Output: [(-46 -71 -5 41) -71]
Test Case: 719 | Input/Output: [(-58 94 20 -93) -93]
Test Case: 720 | Input/Output: [(8 -10 55 19) -10]
Test Case: 721 | Input/Output: [(18 31 1 86) 1]
Test Case: 722 | Input/Output: [(64 26 83 59) 26]
Test Case: 723 | Input/Output: [(48 80 -20 59) -20]
Test Case: 724 | Input/Output: [(-92 63 -31 -72) -92]
Test Case: 725 | Input/Output: [(19 -15 19 -75) -75]
Test Case: 726 | Input/Output: [(100 30 -100 -55) -100]
Test Case: 727 | Input/Output: [(72 37 54 32) 32]
Test Case: 728 | Input/Output: [(6 -33 -58 -46) -58]
Test Case: 729 | Input/Output: [(-62 -74 90 -85) -85]
Test Case: 730 | Input/Output: [(-3 -30 -85 -100) -100]
Test Case: 731 | Input/Output: [(21 -62 -45 -99) -99]
Test Case: 732 | Input/Output: [(-39 -69 37 33) -69]
Test Case: 733 | Input/Output: [(100 -67 -35 98) -67]
Test Case: 734 | Input/Output: [(29 36 -74 -38) -74]
Test Case: 735 | Input/Output: [(-80 60 95 -48) -80]
Test Case: 736 | Input/Output: [(-48 -20 31 -41) -48]
Test Case: 737 | Input/Output: [(-74 -37 59 -64) -74]
Test Case: 738 | Input/Output: [(-54 69 -18 -10) -54]
Test Case: 739 | Input/Output: [(29 18 -23 76) -23]
Test Case: 740 | Input/Output: [(-99 -51 64 51) -99]
Test Case: 741 | Input/Output: [(58 39 -86 -52) -86]
Test Case: 742 | Input/Output: [(98 16 -66 -3) -66]
Test Case: 743 | Input/Output: [(-99 -45 -52 -84) -99]
Test Case: 744 | Input/Output: [(-69 82 -92 9) -92]
Test Case: 745 | Input/Output: [(-6 -17 83 35) -17]
Test Case: 746 | Input/Output: [(90 21 -35 -39) -39]
Test Case: 747 | Input/Output: [(28 21 49 -26) -26]
Test Case: 748 | Input/Output: [(-8 32 -59 90) -59]
Test Case: 749 | Input/Output: [(-12 -81 59 -49) -81]
Test Case: 750 | Input/Output: [(56 -97 58 -47) -97]
Test Case: 751 | Input/Output: [(-25 -73 27 -93) -93]
Test Case: 752 | Input/Output: [(-42 -73 35 -35) -73]
Test Case: 753 | Input/Output: [(17 59 57 -29) -29]
Test Case: 754 | Input/Output: [(-40 -55 41 -73) -73]
Test Case: 755 | Input/Output: [(60 72 -16 74) -16]
Test Case: 756 | Input/Output: [(60 49 87 -12) -12]
Test Case: 757 | Input/Output: [(-88 -22 -10 -70) -88]
Test Case: 758 | Input/Output: [(-2 -89 -8 -33) -89]
Test Case: 759 | Input/Output: [(19 1 -76 -78) -78]
Test Case: 760 | Input/Output: [(-33 -66 -1 40) -66]
Test Case: 761 | Input/Output: [(-50 78 2 0) -50]
Test Case: 762 | Input/Output: [(-82 31 -74 48) -82]
Test Case: 763 | Input/Output: [(52 -5 76 53) -5]
Test Case: 764 | Input/Output: [(-88 26 -12 4) -88]
Test Case: 765 | Input/Output: [(-87 46 97 2) -87]
Test Case: 766 | Input/Output: [(60 97 -56 48) -56]
Test Case: 767 | Input/Output: [(-71 -62 -22 54) -71]
Test Case: 768 | Input/Output: [(-16 89 -60 -67) -67]
Test Case: 769 | Input/Output: [(-93 -4 61 12) -93]
Test Case: 770 | Input/Output: [(4 -88 36 17) -88]
Test Case: 771 | Input/Output: [(30 47 98 -31) -31]
Test Case: 772 | Input/Output: [(7 -95 5 45) -95]
Test Case: 773 | Input/Output: [(-80 -55 -18 -56) -80]
Test Case: 774 | Input/Output: [(28 -6 -81 35) -81]
Test Case: 775 | Input/Output: [(-98 -18 37 -28) -98]
Test Case: 776 | Input/Output: [(37 -75 -36 -82) -82]
Test Case: 777 | Input/Output: [(46 91 72 -100) -100]
Test Case: 778 | Input/Output: [(-90 -15 -60 -2) -90]
Test Case: 779 | Input/Output: [(-14 68 -36 32) -36]
Test Case: 780 | Input/Output: [(32 87 36 81) 32]
Test Case: 781 | Input/Output: [(-97 -22 -31 73) -97]
Test Case: 782 | Input/Output: [(73 -55 68 20) -55]
Test Case: 783 | Input/Output: [(-20 89 -63 83) -63]
Test Case: 784 | Input/Output: [(-82 -83 -92 -5) -92]
Test Case: 785 | Input/Output: [(-39 -98 -65 -8) -98]
Test Case: 786 | Input/Output: [(91 38 -1 36) -1]
Test Case: 787 | Input/Output: [(62 97 -89 -19) -89]
Test Case: 788 | Input/Output: [(2 -76 -74 -72) -76]
Test Case: 789 | Input/Output: [(-78 72 -32 79) -78]
Test Case: 790 | Input/Output: [(-74 -6 -41 -43) -74]
Test Case: 791 | Input/Output: [(-4 29 41 -90) -90]
Test Case: 792 | Input/Output: [(-42 55 68 -91) -91]
Test Case: 793 | Input/Output: [(-29 56 97 -3) -29]
Test Case: 794 | Input/Output: [(21 -67 -94 -54) -94]
Test Case: 795 | Input/Output: [(10 -91 -52 -29) -91]
Test Case: 796 | Input/Output: [(41 37 -58 -14) -58]
Test Case: 797 | Input/Output: [(-65 -83 65 -43) -83]
Test Case: 798 | Input/Output: [(-73 -5 57 34) -73]
Test Case: 799 | Input/Output: [(-1 -23 -15 6) -23]
Test Case: 800 | Input/Output: [(21 -31 44 -23) -31]
Test Case: 801 | Input/Output: [(-64 -72 -21 96) -72]
Test Case: 802 | Input/Output: [(-88 84 96 -60) -88]
Test Case: 803 | Input/Output: [(-4 8 32 6) -4]
Test Case: 804 | Input/Output: [(15 52 -50 52) -50]
Test Case: 805 | Input/Output: [(36 89 -71 38) -71]
Test Case: 806 | Input/Output: [(-13 -8 -15 -69) -69]
Test Case: 807 | Input/Output: [(87 47 53 6) 6]
Test Case: 808 | Input/Output: [(-15 -7 15 -32) -32]
Test Case: 809 | Input/Output: [(-53 81 13 33) -53]
Test Case: 810 | Input/Output: [(18 -79 9 -8) -79]
Test Case: 811 | Input/Output: [(-56 89 49 74) -56]
Test Case: 812 | Input/Output: [(-44 -32 41 90) -44]
Test Case: 813 | Input/Output: [(-43 -4 37 -14) -43]
Test Case: 814 | Input/Output: [(85 59 -40 58) -40]
Test Case: 815 | Input/Output: [(0 -33 -35 41) -35]
Test Case: 816 | Input/Output: [(-66 -35 -92 35) -92]
Test Case: 817 | Input/Output: [(29 42 -68 41) -68]
Test Case: 818 | Input/Output: [(50 84 60 -51) -51]
Test Case: 819 | Input/Output: [(-23 -9 -93 -49) -93]
Test Case: 820 | Input/Output: [(27 31 86 -37) -37]
Test Case: 821 | Input/Output: [(-72 32 31 -20) -72]
Test Case: 822 | Input/Output: [(-25 61 -84 -42) -84]
Test Case: 823 | Input/Output: [(-48 -24 -32 43) -48]
Test Case: 824 | Input/Output: [(7 -96 8 57) -96]
Test Case: 825 | Input/Output: [(36 79 3 -77) -77]
Test Case: 826 | Input/Output: [(-86 46 -7 -92) -92]
Test Case: 827 | Input/Output: [(-99 -30 -34 -7) -99]
Test Case: 828 | Input/Output: [(77 -15 -50 79) -50]
Test Case: 829 | Input/Output: [(-9 64 -42 17) -42]
Test Case: 830 | Input/Output: [(-43 -59 -81 -55) -81]
Test Case: 831 | Input/Output: [(-82 97 -10 83) -82]
Test Case: 832 | Input/Output: [(71 49 -92 54) -92]
Test Case: 833 | Input/Output: [(14 100 -29 -68) -68]
Test Case: 834 | Input/Output: [(-98 12 -6 64) -98]
Test Case: 835 | Input/Output: [(-71 -17 4 -53) -71]
Test Case: 836 | Input/Output: [(-5 -88 -43 25) -88]
Test Case: 837 | Input/Output: [(31 20 9 27) 9]
Test Case: 838 | Input/Output: [(72 48 -24 -93) -93]
Test Case: 839 | Input/Output: [(28 28 60 19) 19]
Test Case: 840 | Input/Output: [(-98 -97 -31 -98) -98]
Test Case: 841 | Input/Output: [(-39 93 12 27) -39]
Test Case: 842 | Input/Output: [(53 -58 -9 75) -58]
Test Case: 843 | Input/Output: [(-40 94 7 38) -40]
Test Case: 844 | Input/Output: [(-24 -47 43 -47) -47]
Test Case: 845 | Input/Output: [(-81 -77 -61 -68) -81]
Test Case: 846 | Input/Output: [(33 -40 90 27) -40]
Test Case: 847 | Input/Output: [(41 71 -71 26) -71]
Test Case: 848 | Input/Output: [(-51 -60 -36 -40) -60]
Test Case: 849 | Input/Output: [(14 -30 81 -52) -52]
Test Case: 850 | Input/Output: [(-18 68 90 -59) -59]
Test Case: 851 | Input/Output: [(-32 39 85 93) -32]
Test Case: 852 | Input/Output: [(-43 -57 -20 93) -57]
Test Case: 853 | Input/Output: [(-87 -89 -1 -20) -89]
Test Case: 854 | Input/Output: [(18 -27 78 -52) -52]
Test Case: 855 | Input/Output: [(-98 -70 79 31) -98]
Test Case: 856 | Input/Output: [(96 96 74 -92) -92]
Test Case: 857 | Input/Output: [(-80 -55 -40 -1) -80]
Test Case: 858 | Input/Output: [(93 96 -5 -79) -79]
Test Case: 859 | Input/Output: [(-90 6 -23 34) -90]
Test Case: 860 | Input/Output: [(-22 -17 -68 73) -68]
Test Case: 861 | Input/Output: [(99 0 -43 90) -43]
Test Case: 862 | Input/Output: [(-17 -94 -95 63) -95]
Test Case: 863 | Input/Output: [(-43 36 53 -18) -43]
Test Case: 864 | Input/Output: [(-11 -62 -45 68) -62]
Test Case: 865 | Input/Output: [(54 -42 94 -51) -51]
Test Case: 866 | Input/Output: [(94 97 -24 -3) -24]
Test Case: 867 | Input/Output: [(17 42 -28 35) -28]
Test Case: 868 | Input/Output: [(-12 15 -48 5) -48]
Test Case: 869 | Input/Output: [(-54 8 -19 -91) -91]
Test Case: 870 | Input/Output: [(16 53 37 47) 16]
Test Case: 871 | Input/Output: [(-14 56 93 -41) -41]
Test Case: 872 | Input/Output: [(-53 43 3 3) -53]
Test Case: 873 | Input/Output: [(25 -73 2 -3) -73]
Test Case: 874 | Input/Output: [(61 93 78 -27) -27]
Test Case: 875 | Input/Output: [(-16 95 52 58) -16]
Test Case: 876 | Input/Output: [(30 -64 -39 -11) -64]
Test Case: 877 | Input/Output: [(71 -83 6 -91) -91]
Test Case: 878 | Input/Output: [(-85 -85 -48 -27) -85]
Test Case: 879 | Input/Output: [(-24 66 -76 -39) -76]
Test Case: 880 | Input/Output: [(98 -58 79 31) -58]
Test Case: 881 | Input/Output: [(-1 1 53 -42) -42]
Test Case: 882 | Input/Output: [(25 -87 -72 31) -87]
Test Case: 883 | Input/Output: [(1 16 71 41) 1]
Test Case: 884 | Input/Output: [(-18 14 -49 -6) -49]
Test Case: 885 | Input/Output: [(55 25 97 -77) -77]
Test Case: 886 | Input/Output: [(-7 -11 -66 59) -66]
Test Case: 887 | Input/Output: [(12 -40 -93 -83) -93]
Test Case: 888 | Input/Output: [(-9 -63 89 13) -63]
Test Case: 889 | Input/Output: [(63 -10 -2 -46) -46]
Test Case: 890 | Input/Output: [(-66 75 36 18) -66]
Test Case: 891 | Input/Output: [(18 99 -5 -76) -76]
Test Case: 892 | Input/Output: [(-14 36 -26 98) -26]
Test Case: 893 | Input/Output: [(98 99 64 54) 54]
Test Case: 894 | Input/Output: [(85 45 33 97) 33]
Test Case: 895 | Input/Output: [(6 -51 -97 57) -97]
Test Case: 896 | Input/Output: [(-60 29 75 -9) -60]
Test Case: 897 | Input/Output: [(21 -35 0 23) -35]
Test Case: 898 | Input/Output: [(83 -49 88 46) -49]
Test Case: 899 | Input/Output: [(99 -30 84 -20) -30]
Test Case: 900 | Input/Output: [(-77 83 -4 -78) -78]
Test Case: 901 | Input/Output: [(51 82 50 -53) -53]
Test Case: 902 | Input/Output: [(-25 -70 -20 -27) -70]
Test Case: 903 | Input/Output: [(11 -68 -54 36) -68]
Test Case: 904 | Input/Output: [(-71 -98 -86 32) -98]
Test Case: 905 | Input/Output: [(-63 53 51 -41) -63]
Test Case: 906 | Input/Output: [(45 -32 73 -32) -32]
Test Case: 907 | Input/Output: [(57 -9 75 3) -9]
Test Case: 908 | Input/Output: [(-29 88 -71 -37) -71]
Test Case: 909 | Input/Output: [(-25 -94 27 9) -94]
Test Case: 910 | Input/Output: [(-89 95 -16 -100) -100]
Test Case: 911 | Input/Output: [(-32 -28 27 61) -32]
Test Case: 912 | Input/Output: [(-45 95 -63 -30) -63]
Test Case: 913 | Input/Output: [(8 -65 -81 57) -81]
Test Case: 914 | Input/Output: [(9 89 30 98) 9]
Test Case: 915 | Input/Output: [(-69 -9 -20 62) -69]
Test Case: 916 | Input/Output: [(23 -30 60 -1) -30]
Test Case: 917 | Input/Output: [(-51 32 -93 -43) -93]
Test Case: 918 | Input/Output: [(51 74 95 23) 23]
Test Case: 919 | Input/Output: [(7 64 -31 21) -31]
Test Case: 920 | Input/Output: [(86 39 -20 57) -20]
Test Case: 921 | Input/Output: [(21 -46 -26 -61) -61]
Test Case: 922 | Input/Output: [(-53 -82 -47 -96) -96]
Test Case: 923 | Input/Output: [(76 66 -41 -32) -41]
Test Case: 924 | Input/Output: [(44 100 -8 -76) -76]
Test Case: 925 | Input/Output: [(-55 -33 -11 90) -55]
Test Case: 926 | Input/Output: [(48 -4 91 20) -4]
Test Case: 927 | Input/Output: [(61 5 -95 73) -95]
Test Case: 928 | Input/Output: [(-69 48 -45 -11) -69]
Test Case: 929 | Input/Output: [(74 -45 72 39) -45]
Test Case: 930 | Input/Output: [(41 -27 -72 -96) -96]
Test Case: 931 | Input/Output: [(-77 -28 -52 89) -77]
Test Case: 932 | Input/Output: [(-77 -53 71 -30) -77]
Test Case: 933 | Input/Output: [(46 -5 16 67) -5]
Test Case: 934 | Input/Output: [(56 87 -58 -36) -58]
Test Case: 935 | Input/Output: [(-34 -89 26 25) -89]
Test Case: 936 | Input/Output: [(-21 -84 -81 -7) -84]
Test Case: 937 | Input/Output: [(-67 -64 12 52) -67]
Test Case: 938 | Input/Output: [(88 64 59 75) 59]
Test Case: 939 | Input/Output: [(53 52 29 -36) -36]
Test Case: 940 | Input/Output: [(-38 -19 32 2) -38]
Test Case: 941 | Input/Output: [(-90 52 -16 -58) -90]
Test Case: 942 | Input/Output: [(-60 -83 -81 73) -83]
Test Case: 943 | Input/Output: [(-30 21 6 61) -30]
Test Case: 944 | Input/Output: [(34 -14 62 -15) -15]
Test Case: 945 | Input/Output: [(-52 -11 77 67) -52]
Test Case: 946 | Input/Output: [(41 -10 54 21) -10]
Test Case: 947 | Input/Output: [(-38 -13 -50 6) -50]
Test Case: 948 | Input/Output: [(10 36 -74 34) -74]
Test Case: 949 | Input/Output: [(-19 -78 60 53) -78]
Test Case: 950 | Input/Output: [(64 87 15 -43) -43]
Test Case: 951 | Input/Output: [(83 -58 11 27) -58]
Test Case: 952 | Input/Output: [(-55 19 -55 -53) -55]
Test Case: 953 | Input/Output: [(-86 77 -74 5) -86]
Test Case: 954 | Input/Output: [(10 -54 -30 91) -54]
Test Case: 955 | Input/Output: [(-30 72 -23 -80) -80]
Test Case: 956 | Input/Output: [(74 -58 26 4) -58]
Test Case: 957 | Input/Output: [(-47 75 -30 74) -47]
Test Case: 958 | Input/Output: [(-98 34 -94 34) -98]
Test Case: 959 | Input/Output: [(-3 -33 -24 -41) -41]
Test Case: 960 | Input/Output: [(-89 -91 -73 -49) -91]
Test Case: 961 | Input/Output: [(-33 -7 23 -57) -57]
Test Case: 962 | Input/Output: [(-25 61 3 -17) -25]
Test Case: 963 | Input/Output: [(-41 48 -95 36) -95]
Test Case: 964 | Input/Output: [(70 85 -98 27) -98]
Test Case: 965 | Input/Output: [(41 25 80 80) 25]
Test Case: 966 | Input/Output: [(-89 -36 8 96) -89]
Test Case: 967 | Input/Output: [(-20 40 -93 35) -93]
Test Case: 968 | Input/Output: [(29 -94 -95 53) -95]
Test Case: 969 | Input/Output: [(9 -17 -81 23) -81]
Test Case: 970 | Input/Output: [(-83 -31 -13 25) -83]
Test Case: 971 | Input/Output: [(-35 2 -47 88) -47]
Test Case: 972 | Input/Output: [(15 46 -66 39) -66]
Test Case: 973 | Input/Output: [(29 -12 -98 -80) -98]
Test Case: 974 | Input/Output: [(16 24 67 10) 10]
Test Case: 975 | Input/Output: [(97 51 95 93) 51]
Test Case: 976 | Input/Output: [(-22 -21 -73 30) -73]
Test Case: 977 | Input/Output: [(-30 -1 95 69) -30]
Test Case: 978 | Input/Output: [(-95 -62 80 -56) -95]
Test Case: 979 | Input/Output: [(93 43 20 78) 20]
Test Case: 980 | Input/Output: [(-81 96 -99 -10) -99]
Test Case: 981 | Input/Output: [(-24 -97 -30 -39) -97]
Test Case: 982 | Input/Output: [(88 -100 -75 -99) -100]
Test Case: 983 | Input/Output: [(-16 3 -54 -58) -58]
Test Case: 984 | Input/Output: [(-75 -53 50 30) -75]
Test Case: 985 | Input/Output: [(-13 87 38 8) -13]
Test Case: 986 | Input/Output: [(48 -42 66 -16) -42]
Test Case: 987 | Input/Output: [(-73 34 -73 -33) -73]
Test Case: 988 | Input/Output: [(-62 62 -45 87) -62]
Test Case: 989 | Input/Output: [(21 -90 17 7) -90]
Test Case: 990 | Input/Output: [(-47 -54 81 73) -54]
Test Case: 991 | Input/Output: [(-70 -33 62 -9) -70]
Test Case: 992 | Input/Output: [(40 100 -66 -1) -66]
Test Case: 993 | Input/Output: [(82 -25 42 34) -25]
Test Case: 994 | Input/Output: [(35 16 90 -11) -11]
Test Case: 995 | Input/Output: [(71 3 0 22) 0]
Test Case: 996 | Input/Output: [(-9 -51 70 -26) -51]
Test Case: 997 | Input/Output: [(78 81 -3 72) -3]
Test Case: 998 | Input/Output: [(-86 62 -16 53) -86]
Test Case: 999 | Input/Output: [(99 92 26 97) 26]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x44c27b8b clojush.problems.software.smallest$fn__7461@44c27b8b] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x33399052 clojush.instructions.tag$tag_instruction_erc$fn__2160@33399052] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x460b77d6 clojush.instructions.tag$tagged_instruction_erc$fn__2166@460b77d6] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x52a75c12 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@52a75c12]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:uniform-addition-and-deletion 1.0}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 3000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x61288814 clojush.problems.software.smallest$smallest_initial_report@61288814]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x6669cba clojush.problems.software.smallest$smallest_report@6669cba]
random-screen = false
random-seed = -95 -109 49 -74 -125 21 -33 57 3 87 11 -3 106 -88 -83 -20
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[47 47 -75 47] -75] [[76 76 76 56] 56] [[6 6 12 6] 6] [[-88 -88 -62 -88] -88] [[39 39 96 39] 39] [[-88 -88 -48 -88] -88] [[37 37 -87 37] -87] [[83 83 83 -86] -86] [[-96 -5 -96 -96] -96] [[97 22 22 22] 22] [(20 20 20 20) 20] [(10 10 10 10) 10] [(-22 -22 -22 -22) -22] [(-54 -54 -54 -54) -54] [(-23 -23 -23 -23) -23] [(7 72 72 12) 7] [(14 91 61 74) 14] [(64 55 36 50) 36] [(19 96 89 19) 19] [(45 42 52 59) 42] [(60 48 45 25) 25] [(38 74 84 91) 38] [(57 77 96 14) 14] [(2 72 50 12) 2] [(83 35 72 52) 35] [(33 16 73 45) 16] [(29 74 10 54) 10] [(12 72 58 97) 12] [(26 94 73 87) 26] [(93 57 86 63) 57] [(100 71 18 13) 13] [(66 26 59 23) 23] [(39 19 2 69) 2] [(100 36 50 72) 36] [(13 37 9 32) 9] [(91 -98 36 -31) -98] [(93 -44 -53 -35) -53] [(-39 18 -16 -72) -72] [(22 -69 95 -94) -94] [(-41 -53 -22 43) -53] [(90 -70 -88 9) -88] [(79 -27 58 92) -27] [(17 -47 -91 -83) -91] [(-47 -90 -5 65) -90] [(19 -89 22 50) -89] [(91 27 -90 20) -90] [(-46 90 -49 -36) -49] [(-69 -52 -35 -87) -87] [(-74 95 -41 -80) -80] [(51 -78 -82 -17) -82] [(-80 -31 57 71) -80] [(-52 -47 -40 7) -52] [(93 4 42 -55) -55] [(26 -28 84 60) -28] [(40 -88 36 34) -88] [(-43 -5 -5 42) -43] [(-48 -64 -70 12) -70] [(84 56 100 78) 56] [(38 30 78 58) 30] [(-95 -88 18 66) -95] [(37 -100 32 -21) -100] [(-8 -19 -72 80) -72] [(-48 -78 99 33) -78] [(-47 -50 51 98) -50] [(-43 -25 49 -72) -72] [(-32 13 25 -82) -82] [(-4 55 -18 -55) -55] [(-100 10 -4 -98) -100] [(-48 -68 33 87) -68] [(62 -20 18 13) -20] [(-44 50 -14 64) -44] [(75 74 5 42) 5] [(73 -1 -71 -63) -71] [(71 -20 71 44) -20] [(68 36 86 -35) -35] [(-87 -8 -55 9) -87] [(89 -56 -63 78) -63] [(68 93 -23 79) -23] [(-71 -42 -31 86) -71] [(0 83 -64 35) -64] [(-22 54 -52 68) -52] [(-4 29 24 -92) -92] [(-34 31 24 -35) -35] [(-51 -21 -78 97) -78] [(81 -70 -80 100) -80] [(-54 47 -26 -12) -54] [(-71 -24 -10 57) -71] [(-83 -61 -87 36) -87] [(47 -42 -85 -39) -85] [(96 -51 90 -58) -58] [(17 -2 -85 92) -85] [(-69 42 4 -45) -69] [(-19 -30 -11 91) -30] [(-61 -82 74 -85) -85] [(84 -29 -94 51) -94])
uniform-addition-and-deletion-rate = 0.09
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 655
Test mean error for best: 0.65500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -75                 | Program output: 47                 
Correct output: 56                  | Program output: 76                 
Correct output: 6                   | Program output: 6                  
Correct output: -88                 | Program output: -88                
Correct output: 39                  | Program output: 39                 
Correct output: -88                 | Program output: -88                
Correct output: -87                 | Program output: 37                 
Correct output: -86                 | Program output: 83                 
Correct output: -96                 | Program output: -96                
Correct output: 22                  | Program output: 97                 
Correct output: 20                  | Program output: 20                 
Correct output: 10                  | Program output: 10                 
Correct output: -22                 | Program output: -22                
Correct output: -54                 | Program output: -54                
Correct output: -23                 | Program output: -23                
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 14                 
Correct output: 36                  | Program output: 64                 
Correct output: 19                  | Program output: 19                 
Correct output: 42                  | Program output: 45                 
Correct output: 25                  | Program output: 60                 
Correct output: 38                  | Program output: 38                 
Correct output: 14                  | Program output: 57                 
Correct output: 2                   | Program output: 2                  
Correct output: 35                  | Program output: 83                 
Correct output: 16                  | Program output: 33                 
Correct output: 10                  | Program output: 29                 
Correct output: 12                  | Program output: 12                 
Correct output: 26                  | Program output: 26                 
Correct output: 57                  | Program output: 93                 
Correct output: 13                  | Program output: 100                
Correct output: 23                  | Program output: 66                 
Correct output: 2                   | Program output: 39                 
Correct output: 36                  | Program output: 100                
Correct output: 9                   | Program output: 13                 
Correct output: -98                 | Program output: 91                 
Correct output: -53                 | Program output: 93                 
Correct output: -72                 | Program output: -39                
Correct output: -94                 | Program output: 22                 
Correct output: -53                 | Program output: -41                
Correct output: -88                 | Program output: 90                 
Correct output: -27                 | Program output: 79                 
Correct output: -91                 | Program output: 17                 
Correct output: -90                 | Program output: -47                
Correct output: -89                 | Program output: 19                 
Correct output: -90                 | Program output: 91                 
Correct output: -49                 | Program output: -46                
Correct output: -87                 | Program output: -69                
Correct output: -80                 | Program output: -74                
Correct output: -82                 | Program output: 51                 
Correct output: -80                 | Program output: -80                
Correct output: -52                 | Program output: -52                
Correct output: -55                 | Program output: 93                 
Correct output: -28                 | Program output: 26                 
Correct output: -88                 | Program output: 40                 
Correct output: -43                 | Program output: -43                
Correct output: -70                 | Program output: -48                
Correct output: 56                  | Program output: 84                 
Correct output: 30                  | Program output: 38                 
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: 37                 
Correct output: -72                 | Program output: -8                 
Correct output: -78                 | Program output: -48                
Correct output: -50                 | Program output: -47                
Correct output: -72                 | Program output: -43                
Correct output: -82                 | Program output: -32                
Correct output: -55                 | Program output: -4                 
Correct output: -100                | Program output: -100               
Correct output: -68                 | Program output: -48                
Correct output: -20                 | Program output: 62                 
Correct output: -44                 | Program output: -44                
Correct output: 5                   | Program output: 75                 
Correct output: -71                 | Program output: 73                 
Correct output: -20                 | Program output: 71                 
Correct output: -35                 | Program output: 68                 
Correct output: -87                 | Program output: -87                
Correct output: -63                 | Program output: 89                 
Correct output: -23                 | Program output: 68                 
Correct output: -71                 | Program output: -71                
Correct output: -64                 | Program output: 0                  
Correct output: -52                 | Program output: -22                
Correct output: -92                 | Program output: -4                 
Correct output: -35                 | Program output: -34                
Correct output: -78                 | Program output: -51                
Correct output: -80                 | Program output: 81                 
Correct output: -54                 | Program output: -54                
Correct output: -71                 | Program output: -71                
Correct output: -87                 | Program output: -83                
Correct output: -85                 | Program output: 47                 
Correct output: -58                 | Program output: 96                 
Correct output: -85                 | Program output: 17                 
Correct output: -69                 | Program output: -69                
Correct output: -30                 | Program output: -19                
Correct output: -85                 | Program output: -61                
Correct output: -94                 | Program output: 84                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_not} {:close 0, :instruction in1} {:close 1, :instruction print_integer} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_min} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_max} {:close 0, :instruction exec_while} {:close 0, :instruction tag_integer_846} {:close 0, :instruction integer_max} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_y_when_autoconstructing} {:close 2, :instruction 3} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_s} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction -98} {:close 0, :instruction integer_dup} {:close 0, :instruction tagged_356} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_min} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction in2} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_frominteger})
Lexicase best program: (boolean_not in1 print_integer exec_pop () integer_fromboolean integer_min exec_flush integer_max exec_while (tag_integer_846 integer_max integer_lte) integer_yank exec_yank exec_y_when_autoconstructing () 3 integer_flush integer_lt exec_s () (integer_empty) (boolean_dup_times in4 integer_flush boolean_dup_items) exec_stackdepth -98 integer_dup tagged_356 integer_flush exec_y_when_autoconstructing (exec_stackdepth) exec_dup_times () integer_swap integer_min integer_inc exec_noop integer_div exec_shove (integer_mod in2 boolean_xor exec_do*while (integer_yank) exec_stackdepth boolean_frominteger))
Lexicase best errors: [1 0 0 0 0 1 0 1 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 56
Percent parens: 0.196
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_not} {:close 0, :instruction in1} {:close 1, :instruction print_integer} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_min} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_max} {:close 0, :instruction exec_while} {:close 0, :instruction tag_integer_846} {:close 0, :instruction integer_max} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_y_when_autoconstructing} {:close 2, :instruction 3} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_s} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction -98} {:close 0, :instruction integer_dup} {:close 0, :instruction tagged_356} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_min} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction in2} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_frominteger})
Zero cases best program: (boolean_not in1 print_integer exec_pop () integer_fromboolean integer_min exec_flush integer_max exec_while (tag_integer_846 integer_max integer_lte) integer_yank exec_yank exec_y_when_autoconstructing () 3 integer_flush integer_lt exec_s () (integer_empty) (boolean_dup_times in4 integer_flush boolean_dup_items) exec_stackdepth -98 integer_dup tagged_356 integer_flush exec_y_when_autoconstructing (exec_stackdepth) exec_dup_times () integer_swap integer_min integer_inc exec_noop integer_div exec_shove (integer_mod in2 boolean_xor exec_do*while (integer_yank) exec_stackdepth boolean_frominteger))
Zero cases best errors: [1 0 0 0 0 1 0 1 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 56
Percent parens: 0.196
--- Lexicase Population Statistics ---
Count of elite individuals by case: (3 3 13 6 3 3 3 6 2 2)
Population mean number of elite cases: 0.04
Count of perfect (error zero) individuals by case: (3 3 13 6 3 3 3 6 2 2)
Population mean number of perfect (error zero) cases: 0.04
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 1, :instruction exec_when} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_dec} {:close 1, :instruction 5} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_lt} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction -96} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_shove} {:close 0, :instruction print_newline} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_yank} {:close 1, :instruction in1} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_max} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_y_when_autoconstructing})
Best program: (boolean_frominteger exec_yank exec_if (in1 boolean_and integer_lt exec_k_when_autoconstructing (print_integer boolean_invert_second_then_and boolean_yank exec_eq exec_y_when_autoconstructing (integer_lt in3 exec_when () integer_inc integer_sub boolean_shove integer_empty boolean_invert_second_then_and exec_swap (exec_eq exec_pop (exec_pop () exec_shove (integer_dec) 5) exec_dup_items exec_s_when_autoconstructing (integer_lt) (exec_eq) (integer_min exec_k (print_integer integer_eq exec_y_when_autoconstructing (exec_do*times (exec_s (in4 exec_do*count (boolean_rot integer_dup exec_y_when_autoconstructing (boolean_dup_items -96) boolean_flush) boolean_pop) (exec_k_when_autoconstructing (integer_shove print_newline exec_s_when_autoconstructing (print_integer exec_dup_times (boolean_or) exec_dup_items exec_dup_items) (boolean_yank in1) (integer_sub) exec_when (exec_do*count () integer_max integer_flush exec_dup_times (boolean_swap exec_empty exec_y_when_autoconstructing ()))) ()) ()))) ())) ())) ()) ())
Errors: [1 0 0 0 0 1 0 1 1 1]
Total: 5
Mean: 0.5
Genome size: 67
Size: 101
Percent parens: 0.337
--- Population Statistics ---
Average total errors in population: 9.956
Median total errors in population: 10
Error averages by case: (0.997 0.997 0.987 0.994 0.997 0.997 0.997 0.994 0.998 0.998)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.013
Average program size in population (points): 69.17
Average percent parens in population: 0.285
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.275
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 472037
--- Timings ---
Current time: 1559594070276 milliseconds
Total Time:           2.6 seconds
Initialization:       0.1 seconds,  4.3%
Reproduction:         0.8 seconds, 32.0%
Fitness Testing:      1.6 seconds, 63.7%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 631
Test mean error for best: 0.63100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -75                 | Program output: 47                 
Correct output: 56                  | Program output: 76                 
Correct output: 6                   | Program output: 6                  
Correct output: -88                 | Program output: -88                
Correct output: 39                  | Program output: 39                 
Correct output: -88                 | Program output: -88                
Correct output: -87                 | Program output: 37                 
Correct output: -86                 | Program output: 83                 
Correct output: -96                 | Program output: -5                 
Correct output: 22                  | Program output: 22                 
Correct output: 20                  | Program output: 20                 
Correct output: 10                  | Program output: 10                 
Correct output: -22                 | Program output: -22                
Correct output: -54                 | Program output: -54                
Correct output: -23                 | Program output: -23                
Correct output: 7                   | Program output: 72                 
Correct output: 14                  | Program output: 91                 
Correct output: 36                  | Program output: 55                 
Correct output: 19                  | Program output: 96                 
Correct output: 42                  | Program output: 42                 
Correct output: 25                  | Program output: 48                 
Correct output: 38                  | Program output: 74                 
Correct output: 14                  | Program output: 77                 
Correct output: 2                   | Program output: 72                 
Correct output: 35                  | Program output: 35                 
Correct output: 16                  | Program output: 16                 
Correct output: 10                  | Program output: 74                 
Correct output: 12                  | Program output: 72                 
Correct output: 26                  | Program output: 94                 
Correct output: 57                  | Program output: 57                 
Correct output: 13                  | Program output: 71                 
Correct output: 23                  | Program output: 26                 
Correct output: 2                   | Program output: 19                 
Correct output: 36                  | Program output: 36                 
Correct output: 9                   | Program output: 37                 
Correct output: -98                 | Program output: -98                
Correct output: -53                 | Program output: -44                
Correct output: -72                 | Program output: 18                 
Correct output: -94                 | Program output: -69                
Correct output: -53                 | Program output: -53                
Correct output: -88                 | Program output: -70                
Correct output: -27                 | Program output: -27                
Correct output: -91                 | Program output: -47                
Correct output: -90                 | Program output: -90                
Correct output: -89                 | Program output: -89                
Correct output: -90                 | Program output: 27                 
Correct output: -49                 | Program output: 90                 
Correct output: -87                 | Program output: -52                
Correct output: -80                 | Program output: 95                 
Correct output: -82                 | Program output: -78                
Correct output: -80                 | Program output: -31                
Correct output: -52                 | Program output: -47                
Correct output: -55                 | Program output: 4                  
Correct output: -28                 | Program output: -28                
Correct output: -88                 | Program output: -88                
Correct output: -43                 | Program output: -5                 
Correct output: -70                 | Program output: -64                
Correct output: 56                  | Program output: 56                 
Correct output: 30                  | Program output: 30                 
Correct output: -95                 | Program output: -88                
Correct output: -100                | Program output: -100               
Correct output: -72                 | Program output: -19                
Correct output: -78                 | Program output: -78                
Correct output: -50                 | Program output: -50                
Correct output: -72                 | Program output: -25                
Correct output: -82                 | Program output: 13                 
Correct output: -55                 | Program output: 55                 
Correct output: -100                | Program output: 10                 
Correct output: -68                 | Program output: -68                
Correct output: -20                 | Program output: -20                
Correct output: -44                 | Program output: 50                 
Correct output: 5                   | Program output: 74                 
Correct output: -71                 | Program output: -1                 
Correct output: -20                 | Program output: -20                
Correct output: -35                 | Program output: 36                 
Correct output: -87                 | Program output: -8                 
Correct output: -63                 | Program output: -56                
Correct output: -23                 | Program output: 93                 
Correct output: -71                 | Program output: -42                
Correct output: -64                 | Program output: 83                 
Correct output: -52                 | Program output: 54                 
Correct output: -92                 | Program output: 29                 
Correct output: -35                 | Program output: 31                 
Correct output: -78                 | Program output: -21                
Correct output: -80                 | Program output: -70                
Correct output: -54                 | Program output: 47                 
Correct output: -71                 | Program output: -24                
Correct output: -87                 | Program output: -61                
Correct output: -85                 | Program output: -42                
Correct output: -58                 | Program output: -51                
Correct output: -85                 | Program output: -2                 
Correct output: -69                 | Program output: 42                 
Correct output: -30                 | Program output: -30                
Correct output: -85                 | Program output: -82                
Correct output: -94                 | Program output: -29                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_shove} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction tagged_825} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_mod} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_add} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing})
Lexicase best program: (exec_yankdup boolean_dup integer_flush integer_dup_times boolean_shove boolean_xor integer_fromboolean boolean_yank boolean_eq boolean_invert_first_then_and boolean_eq integer_shove boolean_yankdup exec_yankdup tagged_825 integer_add boolean_pop integer_mod in2 integer_dup print_integer exec_flush boolean_invert_first_then_and integer_add print_exec (boolean_rot boolean_pop) exec_s (exec_y_when_autoconstructing ()) () ())
Lexicase best errors: [0 1 1 0 0 0 1 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 35
Percent parens: 0.171
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_shove} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction tagged_825} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_mod} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_add} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing})
Zero cases best program: (exec_yankdup boolean_dup integer_flush integer_dup_times boolean_shove boolean_xor integer_fromboolean boolean_yank boolean_eq boolean_invert_first_then_and boolean_eq integer_shove boolean_yankdup exec_yankdup tagged_825 integer_add boolean_pop integer_mod in2 integer_dup print_integer exec_flush boolean_invert_first_then_and integer_add print_exec (boolean_rot boolean_pop) exec_s (exec_y_when_autoconstructing ()) () ())
Zero cases best errors: [0 1 1 0 0 0 1 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 35
Percent parens: 0.171
--- Lexicase Population Statistics ---
Count of elite individuals by case: (538 284 71 557 119 118 279 121 119 168)
Population mean number of elite cases: 2.37
Count of perfect (error zero) individuals by case: (538 284 71 557 119 118 279 121 119 168)
Population mean number of perfect (error zero) cases: 2.37
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_shove} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction tagged_825} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_pop} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_inc})
Best program: (exec_yankdup boolean_dup integer_flush integer_dup_times boolean_shove integer_fromboolean boolean_yank boolean_eq boolean_invert_first_then_and boolean_eq integer_shove boolean_yankdup tagged_825 integer_add boolean_pop in2 integer_dup print_integer exec_do*times (exec_flush integer_add boolean_pop) boolean_not exec_y_when_autoconstructing (integer_inc))
Errors: [0 1 1 0 0 0 1 0 0 1]
Total: 4
Mean: 0.4
Genome size: 25
Size: 28
Percent parens: 0.107
--- Population Statistics ---
Average total errors in population: 7.626
Median total errors in population: 7
Error averages by case: (0.462 0.716 0.929 0.443 0.881 0.882 0.721 0.879 0.881 0.832)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 54.744
Average program size in population (points): 74.668
Average percent parens in population: 0.256
Minimum age in population: 1.0
Maximum age in population: 1.0
Average age in population: 1.0
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 7
Genome diversity (% unique genomes):	 0.986
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.986
Total error diversity:				 0.007
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.164
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 844406
--- Timings ---
Current time: 1559594072084 milliseconds
Total Time:           4.4 seconds
Initialization:       0.1 seconds,  2.5%
Reproduction:         1.8 seconds, 40.3%
Fitness Testing:      2.2 seconds, 48.7%
Report:               0.4 seconds,  8.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 655
Test mean error for best: 0.65500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -75                 | Program output: 47                 
Correct output: 56                  | Program output: 76                 
Correct output: 6                   | Program output: 6                  
Correct output: -88                 | Program output: -88                
Correct output: 39                  | Program output: 39                 
Correct output: -88                 | Program output: -88                
Correct output: -87                 | Program output: 37                 
Correct output: -86                 | Program output: 83                 
Correct output: -96                 | Program output: -96                
Correct output: 22                  | Program output: 97                 
Correct output: 20                  | Program output: 20                 
Correct output: 10                  | Program output: 10                 
Correct output: -22                 | Program output: -22                
Correct output: -54                 | Program output: -54                
Correct output: -23                 | Program output: -23                
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 14                 
Correct output: 36                  | Program output: 64                 
Correct output: 19                  | Program output: 19                 
Correct output: 42                  | Program output: 45                 
Correct output: 25                  | Program output: 60                 
Correct output: 38                  | Program output: 38                 
Correct output: 14                  | Program output: 57                 
Correct output: 2                   | Program output: 2                  
Correct output: 35                  | Program output: 83                 
Correct output: 16                  | Program output: 33                 
Correct output: 10                  | Program output: 29                 
Correct output: 12                  | Program output: 12                 
Correct output: 26                  | Program output: 26                 
Correct output: 57                  | Program output: 93                 
Correct output: 13                  | Program output: 100                
Correct output: 23                  | Program output: 66                 
Correct output: 2                   | Program output: 39                 
Correct output: 36                  | Program output: 100                
Correct output: 9                   | Program output: 13                 
Correct output: -98                 | Program output: 91                 
Correct output: -53                 | Program output: 93                 
Correct output: -72                 | Program output: -39                
Correct output: -94                 | Program output: 22                 
Correct output: -53                 | Program output: -41                
Correct output: -88                 | Program output: 90                 
Correct output: -27                 | Program output: 79                 
Correct output: -91                 | Program output: 17                 
Correct output: -90                 | Program output: -47                
Correct output: -89                 | Program output: 19                 
Correct output: -90                 | Program output: 91                 
Correct output: -49                 | Program output: -46                
Correct output: -87                 | Program output: -69                
Correct output: -80                 | Program output: -74                
Correct output: -82                 | Program output: 51                 
Correct output: -80                 | Program output: -80                
Correct output: -52                 | Program output: -52                
Correct output: -55                 | Program output: 93                 
Correct output: -28                 | Program output: 26                 
Correct output: -88                 | Program output: 40                 
Correct output: -43                 | Program output: -43                
Correct output: -70                 | Program output: -48                
Correct output: 56                  | Program output: 84                 
Correct output: 30                  | Program output: 38                 
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: 37                 
Correct output: -72                 | Program output: -8                 
Correct output: -78                 | Program output: -48                
Correct output: -50                 | Program output: -47                
Correct output: -72                 | Program output: -43                
Correct output: -82                 | Program output: -32                
Correct output: -55                 | Program output: -4                 
Correct output: -100                | Program output: -100               
Correct output: -68                 | Program output: -48                
Correct output: -20                 | Program output: 62                 
Correct output: -44                 | Program output: -44                
Correct output: 5                   | Program output: 75                 
Correct output: -71                 | Program output: 73                 
Correct output: -20                 | Program output: 71                 
Correct output: -35                 | Program output: 68                 
Correct output: -87                 | Program output: -87                
Correct output: -63                 | Program output: 89                 
Correct output: -23                 | Program output: 68                 
Correct output: -71                 | Program output: -71                
Correct output: -64                 | Program output: 0                  
Correct output: -52                 | Program output: -22                
Correct output: -92                 | Program output: -4                 
Correct output: -35                 | Program output: -34                
Correct output: -78                 | Program output: -51                
Correct output: -80                 | Program output: 81                 
Correct output: -54                 | Program output: -54                
Correct output: -71                 | Program output: -71                
Correct output: -87                 | Program output: -83                
Correct output: -85                 | Program output: 47                 
Correct output: -58                 | Program output: 96                 
Correct output: -85                 | Program output: 17                 
Correct output: -69                 | Program output: -69                
Correct output: -30                 | Program output: -19                
Correct output: -85                 | Program output: -61                
Correct output: -94                 | Program output: 84                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 1, :instruction print_integer} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_max} {:close 0, :instruction tag_integer_846} {:close 0, :instruction integer_max} {:close 0, :instruction print_newline} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_s} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction -98} {:close 0, :instruction tagged_356} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_min} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction in2} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup_times})
Lexicase best program: (in1 print_integer exec_pop () integer_fromboolean exec_flush integer_max tag_integer_846 integer_max print_newline integer_lte integer_yank exec_s (exec_yank exec_y_when_autoconstructing () integer_flush integer_lt exec_s () (integer_empty) (boolean_dup_times in4 integer_flush boolean_dup_items) integer_add exec_yankdup) (exec_stackdepth) (-98) tagged_356 integer_flush integer_gte exec_y_when_autoconstructing (exec_stackdepth) exec_dup_times () integer_swap integer_min integer_inc exec_noop integer_div exec_shove (boolean_yank integer_mod in2 boolean_xor exec_do*while (integer_yank) exec_s_when_autoconstructing (exec_stackdepth boolean_frominteger integer_dup_times) () ()))
Lexicase best errors: [1 0 1 1 0 0 1 1 1 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 64
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 1, :instruction print_integer} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_max} {:close 0, :instruction tag_integer_846} {:close 0, :instruction integer_max} {:close 0, :instruction print_newline} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_s} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction -98} {:close 0, :instruction tagged_356} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_min} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction in2} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup_times})
Zero cases best program: (in1 print_integer exec_pop () integer_fromboolean exec_flush integer_max tag_integer_846 integer_max print_newline integer_lte integer_yank exec_s (exec_yank exec_y_when_autoconstructing () integer_flush integer_lt exec_s () (integer_empty) (boolean_dup_times in4 integer_flush boolean_dup_items) integer_add exec_yankdup) (exec_stackdepth) (-98) tagged_356 integer_flush integer_gte exec_y_when_autoconstructing (exec_stackdepth) exec_dup_times () integer_swap integer_min integer_inc exec_noop integer_div exec_shove (boolean_yank integer_mod in2 boolean_xor exec_do*while (integer_yank) exec_s_when_autoconstructing (exec_stackdepth boolean_frominteger integer_dup_times) () ()))
Zero cases best errors: [1 0 1 1 0 0 1 1 1 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 64
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (72 198 337 79 199 278 72 70 338 200)
Population mean number of elite cases: 1.84
Count of perfect (error zero) individuals by case: (72 198 337 79 199 278 72 70 338 200)
Population mean number of perfect (error zero) cases: 1.84
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_not} {:close 1, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 1, :instruction print_integer} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_min} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_max} {:close 0, :instruction exec_while} {:close 0, :instruction tag_integer_846} {:close 0, :instruction integer_max} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_add} {:close 0, :instruction integer_yank} {:close 2, :instruction boolean_not} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 2, :instruction 3} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction -98} {:close 0, :instruction integer_dup} {:close 0, :instruction tagged_356} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_min} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction in2} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_frominteger})
Best program: (boolean_not integer_yankdup in1 print_integer integer_fromboolean integer_min exec_empty exec_flush integer_max exec_while (tag_integer_846 integer_max integer_lte) integer_add integer_yank boolean_not exec_yank integer_yankdup exec_y_when_autoconstructing () 3 integer_flush boolean_dup_times integer_lt integer_empty boolean_dup_times in4 integer_flush boolean_dup_items exec_stackdepth -98 integer_dup tagged_356 integer_flush exec_y_when_autoconstructing (exec_dup (exec_stackdepth) exec_dup_times () integer_swap integer_min integer_inc exec_noop integer_div exec_shove (integer_mod in2 integer_dup_times) exec_do*while (integer_yank) exec_stackdepth boolean_frominteger))
Errors: [1 0 1 1 0 0 1 1 1 0]
Total: 6
Mean: 0.6
Genome size: 50
Size: 58
Percent parens: 0.138
--- Population Statistics ---
Average total errors in population: 8.157
Median total errors in population: 8
Error averages by case: (0.928 0.802 0.663 0.921 0.801 0.722 0.928 0.93 0.662 0.8)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 41.857
Average program size in population (points): 55.319
Average percent parens in population: 0.228
Minimum age in population: 2.0
Maximum age in population: 2.0
Average age in population: 2.0
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 3
Genome diversity (% unique genomes):	 0.997
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.997
Total error diversity:				 0.005
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.133
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1146866
--- Timings ---
Current time: 1559594073788 milliseconds
Total Time:           6.3 seconds
Initialization:       0.1 seconds,  1.8%
Reproduction:         2.9 seconds, 46.8%
Fitness Testing:      2.5 seconds, 40.3%
Report:               0.7 seconds, 11.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 645
Test mean error for best: 0.64500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -75                 | Program output: -75                
Correct output: 56                  | Program output: 76                 
Correct output: 6                   | Program output: 12                 
Correct output: -88                 | Program output: -62                
Correct output: 39                  | Program output: 96                 
Correct output: -88                 | Program output: -48                
Correct output: -87                 | Program output: -87                
Correct output: -86                 | Program output: 83                 
Correct output: -96                 | Program output: -96                
Correct output: 22                  | Program output: 22                 
Correct output: 20                  | Program output: 20                 
Correct output: 10                  | Program output: 10                 
Correct output: -22                 | Program output: -22                
Correct output: -54                 | Program output: -54                
Correct output: -23                 | Program output: -23                
Correct output: 7                   | Program output: 72                 
Correct output: 14                  | Program output: 61                 
Correct output: 36                  | Program output: 36                 
Correct output: 19                  | Program output: 89                 
Correct output: 42                  | Program output: 52                 
Correct output: 25                  | Program output: 45                 
Correct output: 38                  | Program output: 84                 
Correct output: 14                  | Program output: 96                 
Correct output: 2                   | Program output: 50                 
Correct output: 35                  | Program output: 72                 
Correct output: 16                  | Program output: 73                 
Correct output: 10                  | Program output: 10                 
Correct output: 12                  | Program output: 58                 
Correct output: 26                  | Program output: 73                 
Correct output: 57                  | Program output: 86                 
Correct output: 13                  | Program output: 18                 
Correct output: 23                  | Program output: 59                 
Correct output: 2                   | Program output: 2                  
Correct output: 36                  | Program output: 50                 
Correct output: 9                   | Program output: 9                  
Correct output: -98                 | Program output: 36                 
Correct output: -53                 | Program output: -53                
Correct output: -72                 | Program output: -16                
Correct output: -94                 | Program output: 95                 
Correct output: -53                 | Program output: -22                
Correct output: -88                 | Program output: -88                
Correct output: -27                 | Program output: 58                 
Correct output: -91                 | Program output: -91                
Correct output: -90                 | Program output: -5                 
Correct output: -89                 | Program output: 22                 
Correct output: -90                 | Program output: -90                
Correct output: -49                 | Program output: -49                
Correct output: -87                 | Program output: -35                
Correct output: -80                 | Program output: -41                
Correct output: -82                 | Program output: -82                
Correct output: -80                 | Program output: 57                 
Correct output: -52                 | Program output: -40                
Correct output: -55                 | Program output: 42                 
Correct output: -28                 | Program output: 84                 
Correct output: -88                 | Program output: 36                 
Correct output: -43                 | Program output: -5                 
Correct output: -70                 | Program output: -70                
Correct output: 56                  | Program output: 100                
Correct output: 30                  | Program output: 78                 
Correct output: -95                 | Program output: 18                 
Correct output: -100                | Program output: 32                 
Correct output: -72                 | Program output: -72                
Correct output: -78                 | Program output: 99                 
Correct output: -50                 | Program output: 51                 
Correct output: -72                 | Program output: 49                 
Correct output: -82                 | Program output: 25                 
Correct output: -55                 | Program output: -18                
Correct output: -100                | Program output: -4                 
Correct output: -68                 | Program output: 33                 
Correct output: -20                 | Program output: 18                 
Correct output: -44                 | Program output: -14                
Correct output: 5                   | Program output: 5                  
Correct output: -71                 | Program output: -71                
Correct output: -20                 | Program output: 71                 
Correct output: -35                 | Program output: 86                 
Correct output: -87                 | Program output: -55                
Correct output: -63                 | Program output: -63                
Correct output: -23                 | Program output: -23                
Correct output: -71                 | Program output: -31                
Correct output: -64                 | Program output: -64                
Correct output: -52                 | Program output: -52                
Correct output: -92                 | Program output: 24                 
Correct output: -35                 | Program output: 24                 
Correct output: -78                 | Program output: -78                
Correct output: -80                 | Program output: -80                
Correct output: -54                 | Program output: -26                
Correct output: -71                 | Program output: -10                
Correct output: -87                 | Program output: -87                
Correct output: -85                 | Program output: -85                
Correct output: -58                 | Program output: 90                 
Correct output: -85                 | Program output: -85                
Correct output: -69                 | Program output: 4                  
Correct output: -30                 | Program output: -11                
Correct output: -85                 | Program output: 74                 
Correct output: -94                 | Program output: -94                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 1, :instruction exec_when} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction 5} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_lt} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_and} {:close 2, :instruction integer_rot} {:close 1, :instruction -96} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction tagged_445} {:close 0, :instruction integer_shove} {:close 0, :instruction print_newline} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_integer} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 1, :instruction in1} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_y_when_autoconstructing})
Lexicase best program: (boolean_frominteger exec_yank in1 in3 boolean_and exec_k_when_autoconstructing (print_integer boolean_dup_items boolean_invert_second_then_and boolean_yank exec_eq integer_lt in3 exec_when () integer_eq integer_inc boolean_shove integer_empty exec_swap (exec_eq exec_pop (boolean_swap exec_pop () integer_add integer_dec) 5) (exec_dup_items integer_gte integer_lt) exec_eq) (exec_k (boolean_invert_second_then_and) (print_integer integer_eq exec_y_when_autoconstructing (exec_do*times (exec_s (in4 exec_do*count (boolean_rot exec_y_when_autoconstructing (boolean_dup_items boolean_and integer_rot)) -96) (boolean_pop) (exec_k_when_autoconstructing (tagged_445) (integer_shove print_newline integer_yankdup exec_s_when_autoconstructing (print_integer integer_lte) (exec_dup_times (exec_dup_items boolean_empty boolean_yank in1) integer_sub) (exec_when (integer_max exec_dup_times (exec_dup_times (boolean_swap exec_y_when_autoconstructing ())))))))))))
Lexicase best errors: [0 1 1 0 0 1 0 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 93
Percent parens: 0.290
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 1, :instruction exec_when} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction 5} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_lt} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_and} {:close 2, :instruction integer_rot} {:close 1, :instruction -96} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction tagged_445} {:close 0, :instruction integer_shove} {:close 0, :instruction print_newline} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_integer} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 1, :instruction in1} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_y_when_autoconstructing})
Zero cases best program: (boolean_frominteger exec_yank in1 in3 boolean_and exec_k_when_autoconstructing (print_integer boolean_dup_items boolean_invert_second_then_and boolean_yank exec_eq integer_lt in3 exec_when () integer_eq integer_inc boolean_shove integer_empty exec_swap (exec_eq exec_pop (boolean_swap exec_pop () integer_add integer_dec) 5) (exec_dup_items integer_gte integer_lt) exec_eq) (exec_k (boolean_invert_second_then_and) (print_integer integer_eq exec_y_when_autoconstructing (exec_do*times (exec_s (in4 exec_do*count (boolean_rot exec_y_when_autoconstructing (boolean_dup_items boolean_and integer_rot)) -96) (boolean_pop) (exec_k_when_autoconstructing (tagged_445) (integer_shove print_newline integer_yankdup exec_s_when_autoconstructing (print_integer integer_lte) (exec_dup_times (exec_dup_items boolean_empty boolean_yank in1) integer_sub) (exec_when (integer_max exec_dup_times (exec_dup_times (boolean_swap exec_y_when_autoconstructing ())))))))))))
Zero cases best errors: [0 1 1 0 0 1 0 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 93
Percent parens: 0.290
--- Lexicase Population Statistics ---
Count of elite individuals by case: (238 133 262 238 238 131 712 260 238 132)
Population mean number of elite cases: 2.58
Count of perfect (error zero) individuals by case: (238 133 262 238 238 131 712 260 238 132)
Population mean number of perfect (error zero) cases: 2.58
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_dup_items} {:close 1, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_and} {:close 2, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_swap})
Best program: (boolean_dup_items in3 print_integer exec_flush boolean_swap boolean_xor exec_do*while (boolean_and integer_mod) integer_max boolean_stackdepth boolean_rot boolean_yank integer_mod boolean_flush exec_rot (exec_when (integer_swap boolean_pop integer_lt exec_swap () ())) () ())
Errors: [0 1 1 0 0 1 0 1 0 1]
Total: 5
Mean: 0.5
Genome size: 21
Size: 29
Percent parens: 0.276
--- Population Statistics ---
Average total errors in population: 7.418
Median total errors in population: 7
Error averages by case: (0.762 0.867 0.738 0.762 0.762 0.869 0.288 0.74 0.762 0.868)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 41.268
Average program size in population (points): 55.208
Average percent parens in population: 0.242
Minimum age in population: 3.0
Maximum age in population: 3.0
Average age in population: 3.0
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 8
Genome diversity (% unique genomes):	 0.969
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.969
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.114
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 1389243
--- Timings ---
Current time: 1559594075488 milliseconds
Total Time:           8.0 seconds
Initialization:       0.1 seconds,  1.4%
Reproduction:         4.2 seconds, 52.4%
Fitness Testing:      2.8 seconds, 35.2%
Report:               0.9 seconds, 10.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 631
Test mean error for best: 0.63100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -75                 | Program output: 47                 
Correct output: 56                  | Program output: 76                 
Correct output: 6                   | Program output: 6                  
Correct output: -88                 | Program output: -88                
Correct output: 39                  | Program output: 39                 
Correct output: -88                 | Program output: -88                
Correct output: -87                 | Program output: 37                 
Correct output: -86                 | Program output: 83                 
Correct output: -96                 | Program output: -5                 
Correct output: 22                  | Program output: 22                 
Correct output: 20                  | Program output: 20                 
Correct output: 10                  | Program output: 10                 
Correct output: -22                 | Program output: -22                
Correct output: -54                 | Program output: -54                
Correct output: -23                 | Program output: -23                
Correct output: 7                   | Program output: 72                 
Correct output: 14                  | Program output: 91                 
Correct output: 36                  | Program output: 55                 
Correct output: 19                  | Program output: 96                 
Correct output: 42                  | Program output: 42                 
Correct output: 25                  | Program output: 48                 
Correct output: 38                  | Program output: 74                 
Correct output: 14                  | Program output: 77                 
Correct output: 2                   | Program output: 72                 
Correct output: 35                  | Program output: 35                 
Correct output: 16                  | Program output: 16                 
Correct output: 10                  | Program output: 74                 
Correct output: 12                  | Program output: 72                 
Correct output: 26                  | Program output: 94                 
Correct output: 57                  | Program output: 57                 
Correct output: 13                  | Program output: 71                 
Correct output: 23                  | Program output: 26                 
Correct output: 2                   | Program output: 19                 
Correct output: 36                  | Program output: 36                 
Correct output: 9                   | Program output: 37                 
Correct output: -98                 | Program output: -98                
Correct output: -53                 | Program output: -44                
Correct output: -72                 | Program output: 18                 
Correct output: -94                 | Program output: -69                
Correct output: -53                 | Program output: -53                
Correct output: -88                 | Program output: -70                
Correct output: -27                 | Program output: -27                
Correct output: -91                 | Program output: -47                
Correct output: -90                 | Program output: -90                
Correct output: -89                 | Program output: -89                
Correct output: -90                 | Program output: 27                 
Correct output: -49                 | Program output: 90                 
Correct output: -87                 | Program output: -52                
Correct output: -80                 | Program output: 95                 
Correct output: -82                 | Program output: -78                
Correct output: -80                 | Program output: -31                
Correct output: -52                 | Program output: -47                
Correct output: -55                 | Program output: 4                  
Correct output: -28                 | Program output: -28                
Correct output: -88                 | Program output: -88                
Correct output: -43                 | Program output: -5                 
Correct output: -70                 | Program output: -64                
Correct output: 56                  | Program output: 56                 
Correct output: 30                  | Program output: 30                 
Correct output: -95                 | Program output: -88                
Correct output: -100                | Program output: -100               
Correct output: -72                 | Program output: -19                
Correct output: -78                 | Program output: -78                
Correct output: -50                 | Program output: -50                
Correct output: -72                 | Program output: -25                
Correct output: -82                 | Program output: 13                 
Correct output: -55                 | Program output: 55                 
Correct output: -100                | Program output: 10                 
Correct output: -68                 | Program output: -68                
Correct output: -20                 | Program output: -20                
Correct output: -44                 | Program output: 50                 
Correct output: 5                   | Program output: 74                 
Correct output: -71                 | Program output: -1                 
Correct output: -20                 | Program output: -20                
Correct output: -35                 | Program output: 36                 
Correct output: -87                 | Program output: -8                 
Correct output: -63                 | Program output: -56                
Correct output: -23                 | Program output: 93                 
Correct output: -71                 | Program output: -42                
Correct output: -64                 | Program output: 83                 
Correct output: -52                 | Program output: 54                 
Correct output: -92                 | Program output: 29                 
Correct output: -35                 | Program output: 31                 
Correct output: -78                 | Program output: -21                
Correct output: -80                 | Program output: -70                
Correct output: -54                 | Program output: 47                 
Correct output: -71                 | Program output: -24                
Correct output: -87                 | Program output: -61                
Correct output: -85                 | Program output: -42                
Correct output: -58                 | Program output: -51                
Correct output: -85                 | Program output: -2                 
Correct output: -69                 | Program output: 42                 
Correct output: -30                 | Program output: -30                
Correct output: -85                 | Program output: -82                
Correct output: -94                 | Program output: -29                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_shove} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_while} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_lt} {:close 0, :instruction tagged_825} {:close 1, :instruction integer_sub} {:close 1, :instruction integer_mod} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 1, :instruction in4} {:close 1, :instruction 30} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_add} {:close 0, :instruction exec_y} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_stackdepth})
Lexicase best program: (exec_yankdup boolean_dup print_integer boolean_yank boolean_shove integer_fromboolean integer_dup boolean_eq boolean_shove integer_shove boolean_yankdup integer_dup_items exec_while (integer_fromboolean exec_yankdup integer_lt) tagged_825 integer_sub integer_mod in2 integer_dup print_integer exec_do*times (in4) 30 exec_flush integer_add exec_y (print_exec (boolean_rot boolean_pop) boolean_yank boolean_or integer_inc boolean_stackdepth))
Lexicase best errors: [0 1 1 0 0 1 1 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 40
Percent parens: 0.125
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_shove} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_while} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_lt} {:close 0, :instruction tagged_825} {:close 1, :instruction integer_sub} {:close 1, :instruction integer_mod} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 1, :instruction in4} {:close 1, :instruction 30} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_add} {:close 0, :instruction exec_y} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_stackdepth})
Zero cases best program: (exec_yankdup boolean_dup print_integer boolean_yank boolean_shove integer_fromboolean integer_dup boolean_eq boolean_shove integer_shove boolean_yankdup integer_dup_items exec_while (integer_fromboolean exec_yankdup integer_lt) tagged_825 integer_sub integer_mod in2 integer_dup print_integer exec_do*times (in4) 30 exec_flush integer_add exec_y (print_exec (boolean_rot boolean_pop) boolean_yank boolean_or integer_inc boolean_stackdepth))
Zero cases best errors: [0 1 1 0 0 1 1 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 40
Percent parens: 0.125
--- Lexicase Population Statistics ---
Count of elite individuals by case: (223 5 5 727 223 165 5 5 223 223)
Population mean number of elite cases: 1.80
Count of perfect (error zero) individuals by case: (223 5 5 727 223 165 5 5 223 223)
Population mean number of perfect (error zero) cases: 1.80
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_shove} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction tagged_825} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_mod} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_add} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_or})
Best program: (exec_yankdup boolean_not boolean_pop boolean_dup integer_flush boolean_shove integer_fromboolean boolean_yank boolean_eq boolean_eq integer_shove boolean_yankdup exec_yankdup tagged_825 integer_add boolean_pop boolean_pop integer_mod in2 integer_dup print_integer exec_flush integer_add integer_div boolean_rot boolean_pop exec_s (boolean_or) () ())
Errors: [0 1 1 0 0 1 1 1 0 0]
Total: 5
Mean: 0.5
Genome size: 28
Size: 32
Percent parens: 0.125
--- Population Statistics ---
Average total errors in population: 8.196
Median total errors in population: 9
Error averages by case: (0.777 0.995 0.995 0.273 0.777 0.835 0.995 0.995 0.777 0.777)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 31.087
Average program size in population (points): 40.884
Average percent parens in population: 0.237
Minimum age in population: 4.0
Maximum age in population: 4.0
Average age in population: 4.0
Median age in population: 4.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 7
Genome diversity (% unique genomes):	 0.965
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.964
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.113
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 1686261
--- Timings ---
Current time: 1559594077159 milliseconds
Total Time:           9.6 seconds
Initialization:       0.1 seconds,  1.2%
Reproduction:         5.4 seconds, 55.5%
Fitness Testing:      3.1 seconds, 32.6%
Report:               1.0 seconds, 10.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 635
Test mean error for best: 0.63500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -75                 | Program output: -75                
Correct output: 56                  | Program output: 76                 
Correct output: 6                   | Program output: 12                 
Correct output: -88                 | Program output: -88                
Correct output: 39                  | Program output: 96                 
Correct output: -88                 | Program output: -88                
Correct output: -87                 | Program output: -87                
Correct output: -86                 | Program output: 83                 
Correct output: -96                 | Program output: -5                 
Correct output: 22                  | Program output: 22                 
Correct output: 20                  | Program output: 20                 
Correct output: 10                  | Program output: 10                 
Correct output: -22                 | Program output: -22                
Correct output: -54                 | Program output: -54                
Correct output: -23                 | Program output: -23                
Correct output: 7                   | Program output: 72                 
Correct output: 14                  | Program output: 61                 
Correct output: 36                  | Program output: 36                 
Correct output: 19                  | Program output: 89                 
Correct output: 42                  | Program output: 52                 
Correct output: 25                  | Program output: 45                 
Correct output: 38                  | Program output: 84                 
Correct output: 14                  | Program output: 96                 
Correct output: 2                   | Program output: 50                 
Correct output: 35                  | Program output: 72                 
Correct output: 16                  | Program output: 73                 
Correct output: 10                  | Program output: 10                 
Correct output: 12                  | Program output: 58                 
Correct output: 26                  | Program output: 73                 
Correct output: 57                  | Program output: 86                 
Correct output: 13                  | Program output: 18                 
Correct output: 23                  | Program output: 59                 
Correct output: 2                   | Program output: 2                  
Correct output: 36                  | Program output: 50                 
Correct output: 9                   | Program output: 9                  
Correct output: -98                 | Program output: 36                 
Correct output: -53                 | Program output: -53                
Correct output: -72                 | Program output: 18                 
Correct output: -94                 | Program output: 95                 
Correct output: -53                 | Program output: -53                
Correct output: -88                 | Program output: -88                
Correct output: -27                 | Program output: 58                 
Correct output: -91                 | Program output: -91                
Correct output: -90                 | Program output: -90                
Correct output: -89                 | Program output: 22                 
Correct output: -90                 | Program output: -90                
Correct output: -49                 | Program output: 90                 
Correct output: -87                 | Program output: -52                
Correct output: -80                 | Program output: 95                 
Correct output: -82                 | Program output: -82                
Correct output: -80                 | Program output: -31                
Correct output: -52                 | Program output: -47                
Correct output: -55                 | Program output: 42                 
Correct output: -28                 | Program output: 84                 
Correct output: -88                 | Program output: 36                 
Correct output: -43                 | Program output: -5                 
Correct output: -70                 | Program output: -64                
Correct output: 56                  | Program output: 100                
Correct output: 30                  | Program output: 78                 
Correct output: -95                 | Program output: -88                
Correct output: -100                | Program output: 32                 
Correct output: -72                 | Program output: -19                
Correct output: -78                 | Program output: -78                
Correct output: -50                 | Program output: -50                
Correct output: -72                 | Program output: -25                
Correct output: -82                 | Program output: 13                 
Correct output: -55                 | Program output: 55                 
Correct output: -100                | Program output: 10                 
Correct output: -68                 | Program output: -68                
Correct output: -20                 | Program output: 18                 
Correct output: -44                 | Program output: 50                 
Correct output: 5                   | Program output: 5                  
Correct output: -71                 | Program output: -71                
Correct output: -20                 | Program output: 71                 
Correct output: -35                 | Program output: 86                 
Correct output: -87                 | Program output: -8                 
Correct output: -63                 | Program output: -63                
Correct output: -23                 | Program output: -23                
Correct output: -71                 | Program output: -42                
Correct output: -64                 | Program output: 83                 
Correct output: -52                 | Program output: 54                 
Correct output: -92                 | Program output: 29                 
Correct output: -35                 | Program output: 31                 
Correct output: -78                 | Program output: -21                
Correct output: -80                 | Program output: -80                
Correct output: -54                 | Program output: 47                 
Correct output: -71                 | Program output: -24                
Correct output: -87                 | Program output: -61                
Correct output: -85                 | Program output: -85                
Correct output: -58                 | Program output: 90                 
Correct output: -85                 | Program output: -85                
Correct output: -69                 | Program output: 42                 
Correct output: -30                 | Program output: -30                
Correct output: -85                 | Program output: -82                
Correct output: -94                 | Program output: -94                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_yank} {:close 1, :instruction boolean_not} {:close 0, :instruction in3} {:close 1, :instruction in2} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction print_integer} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_min} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tag_integer_846} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_y_when_autoconstructing} {:close 2, :instruction 3} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_s} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction exec_empty} {:close 0, :instruction tag_boolean_215} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction -98} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_min} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_frominteger})
Lexicase best program: (integer_yank boolean_not in3 in2 exec_noop in1 integer_shove integer_fromboolean print_integer exec_pop () integer_fromboolean boolean_frominteger integer_inc integer_min integer_max integer_dup_times exec_y_when_autoconstructing (tag_integer_846 integer_max exec_do*while (integer_yank exec_y_when_autoconstructing () 3)) integer_flush exec_s () (exec_yank) (boolean_dup_times in4 exec_empty tag_boolean_215 boolean_dup_items) exec_stackdepth -98 integer_flush integer_swap exec_y_when_autoconstructing (integer_max integer_swap integer_min exec_noop integer_div exec_shove (integer_yankdup integer_mod boolean_xor exec_do*while (integer_yank) exec_stackdepth boolean_frominteger)))
Lexicase best errors: [1 0 0 0 0 0 0 1 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 60
Percent parens: 0.183
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_yank} {:close 1, :instruction boolean_not} {:close 0, :instruction in3} {:close 1, :instruction in2} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction print_integer} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_min} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tag_integer_846} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_y_when_autoconstructing} {:close 2, :instruction 3} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_s} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction exec_empty} {:close 0, :instruction tag_boolean_215} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction -98} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_min} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_frominteger})
Zero cases best program: (integer_yank boolean_not in3 in2 exec_noop in1 integer_shove integer_fromboolean print_integer exec_pop () integer_fromboolean boolean_frominteger integer_inc integer_min integer_max integer_dup_times exec_y_when_autoconstructing (tag_integer_846 integer_max exec_do*while (integer_yank exec_y_when_autoconstructing () 3)) integer_flush exec_s () (exec_yank) (boolean_dup_times in4 exec_empty tag_boolean_215 boolean_dup_items) exec_stackdepth -98 integer_flush integer_swap exec_y_when_autoconstructing (integer_max integer_swap integer_min exec_noop integer_div exec_shove (integer_yankdup integer_mod boolean_xor exec_do*while (integer_yank) exec_stackdepth boolean_frominteger)))
Zero cases best errors: [1 0 0 0 0 0 0 1 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 60
Percent parens: 0.183
--- Lexicase Population Statistics ---
Count of elite individuals by case: (325 7 727 407 733 7 321 6 409 311)
Population mean number of elite cases: 3.25
Count of perfect (error zero) individuals by case: (325 7 727 407 733 7 321 6 409 311)
Population mean number of perfect (error zero) cases: 3.25
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_yank} {:close 1, :instruction boolean_not} {:close 0, :instruction in3} {:close 1, :instruction in2} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction print_integer} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_min} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tag_integer_846} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_y_when_autoconstructing} {:close 2, :instruction 3} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_s} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction exec_empty} {:close 0, :instruction tag_boolean_215} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction -98} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_min} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_frominteger})
Best program: (integer_yank boolean_not in3 in2 exec_noop in1 integer_shove integer_fromboolean print_integer exec_pop () integer_fromboolean boolean_frominteger integer_inc integer_min integer_max integer_dup_times exec_y_when_autoconstructing (tag_integer_846 integer_max exec_do*while (integer_yank exec_y_when_autoconstructing () 3)) integer_flush exec_s () (exec_yank) (boolean_dup_times in4 exec_empty tag_boolean_215 boolean_dup_items) exec_stackdepth -98 integer_flush integer_swap exec_y_when_autoconstructing (integer_max integer_swap integer_min exec_noop integer_div exec_shove (integer_yankdup integer_mod boolean_xor exec_do*while (integer_yank) exec_stackdepth boolean_frominteger)))
Errors: [1 0 0 0 0 0 0 1 1 1]
Total: 4
Mean: 0.4
Genome size: 49
Size: 60
Percent parens: 0.183
--- Population Statistics ---
Average total errors in population: 6.747
Median total errors in population: 6
Error averages by case: (0.675 0.993 0.273 0.593 0.267 0.993 0.679 0.994 0.591 0.689)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 27.935
Average program size in population (points): 36.046
Average percent parens in population: 0.225
Minimum age in population: 5.0
Maximum age in population: 5.0
Average age in population: 5.0
Median age in population: 5.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 43
Genome diversity (% unique genomes):	 0.941
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 43
Syntactic diversity (% unique Push programs):	 0.941
Total error diversity:				 0.007
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.087
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 1978136
--- Timings ---
Current time: 1559594079149 milliseconds
Total Time:          11.4 seconds
Initialization:       0.1 seconds,  1.0%
Reproduction:         6.7 seconds, 58.1%
Fitness Testing:      3.4 seconds, 30.0%
Report:               1.2 seconds, 10.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 660
Test mean error for best: 0.66000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -75                 | Program output: 47                 
Correct output: 56                  | Program output: 56                 
Correct output: 6                   | Program output: 6                  
Correct output: -88                 | Program output: -88                
Correct output: 39                  | Program output: 39                 
Correct output: -88                 | Program output: -88                
Correct output: -87                 | Program output: 37                 
Correct output: -86                 | Program output: -86                
Correct output: -96                 | Program output: -96                
Correct output: 22                  | Program output: 22                 
Correct output: 20                  | Program output: 20                 
Correct output: 10                  | Program output: 10                 
Correct output: -22                 | Program output: -22                
Correct output: -54                 | Program output: -54                
Correct output: -23                 | Program output: -23                
Correct output: 7                   | Program output: 12                 
Correct output: 14                  | Program output: 74                 
Correct output: 36                  | Program output: 50                 
Correct output: 19                  | Program output: 19                 
Correct output: 42                  | Program output: 59                 
Correct output: 25                  | Program output: 25                 
Correct output: 38                  | Program output: 91                 
Correct output: 14                  | Program output: 14                 
Correct output: 2                   | Program output: 12                 
Correct output: 35                  | Program output: 52                 
Correct output: 16                  | Program output: 45                 
Correct output: 10                  | Program output: 54                 
Correct output: 12                  | Program output: 97                 
Correct output: 26                  | Program output: 87                 
Correct output: 57                  | Program output: 63                 
Correct output: 13                  | Program output: 13                 
Correct output: 23                  | Program output: 23                 
Correct output: 2                   | Program output: 69                 
Correct output: 36                  | Program output: 72                 
Correct output: 9                   | Program output: 32                 
Correct output: -98                 | Program output: -31                
Correct output: -53                 | Program output: -35                
Correct output: -72                 | Program output: -72                
Correct output: -94                 | Program output: -94                
Correct output: -53                 | Program output: 43                 
Correct output: -88                 | Program output: 9                  
Correct output: -27                 | Program output: 92                 
Correct output: -91                 | Program output: -83                
Correct output: -90                 | Program output: 65                 
Correct output: -89                 | Program output: 50                 
Correct output: -90                 | Program output: 20                 
Correct output: -49                 | Program output: -36                
Correct output: -87                 | Program output: -87                
Correct output: -80                 | Program output: -80                
Correct output: -82                 | Program output: -17                
Correct output: -80                 | Program output: 71                 
Correct output: -52                 | Program output: 7                  
Correct output: -55                 | Program output: -55                
Correct output: -28                 | Program output: 60                 
Correct output: -88                 | Program output: 34                 
Correct output: -43                 | Program output: 42                 
Correct output: -70                 | Program output: 12                 
Correct output: 56                  | Program output: 78                 
Correct output: 30                  | Program output: 58                 
Correct output: -95                 | Program output: 66                 
Correct output: -100                | Program output: -21                
Correct output: -72                 | Program output: 80                 
Correct output: -78                 | Program output: 33                 
Correct output: -50                 | Program output: 98                 
Correct output: -72                 | Program output: -72                
Correct output: -82                 | Program output: -82                
Correct output: -55                 | Program output: -55                
Correct output: -100                | Program output: -98                
Correct output: -68                 | Program output: 87                 
Correct output: -20                 | Program output: 13                 
Correct output: -44                 | Program output: 64                 
Correct output: 5                   | Program output: 42                 
Correct output: -71                 | Program output: -63                
Correct output: -20                 | Program output: 44                 
Correct output: -35                 | Program output: -35                
Correct output: -87                 | Program output: 9                  
Correct output: -63                 | Program output: 78                 
Correct output: -23                 | Program output: 79                 
Correct output: -71                 | Program output: 86                 
Correct output: -64                 | Program output: 35                 
Correct output: -52                 | Program output: 68                 
Correct output: -92                 | Program output: -92                
Correct output: -35                 | Program output: -35                
Correct output: -78                 | Program output: 97                 
Correct output: -80                 | Program output: 100                
Correct output: -54                 | Program output: -12                
Correct output: -71                 | Program output: 57                 
Correct output: -87                 | Program output: 36                 
Correct output: -85                 | Program output: -39                
Correct output: -58                 | Program output: -58                
Correct output: -85                 | Program output: 92                 
Correct output: -69                 | Program output: -45                
Correct output: -30                 | Program output: 91                 
Correct output: -85                 | Program output: -85                
Correct output: -94                 | Program output: 51                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction tagged_825} {:close 1, :instruction integer_add} {:close 2, :instruction integer_lt} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_inc})
Lexicase best program: (boolean_dup integer_flush boolean_xor integer_fromboolean boolean_stackdepth boolean_invert_first_then_and integer_fromboolean boolean_eq integer_shove exec_yankdup tagged_825 integer_add integer_lt exec_stackdepth in2 in4 print_integer in2 exec_do*times (exec_flush boolean_rot boolean_pop) exec_s (exec_y_when_autoconstructing (integer_inc)) () ())
Lexicase best errors: [0 0 0 1 0 0 1 1 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 31
Percent parens: 0.194
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction tagged_825} {:close 1, :instruction integer_add} {:close 2, :instruction integer_lt} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_inc})
Zero cases best program: (boolean_dup integer_flush boolean_xor integer_fromboolean boolean_stackdepth boolean_invert_first_then_and integer_fromboolean boolean_eq integer_shove exec_yankdup tagged_825 integer_add integer_lt exec_stackdepth in2 in4 print_integer in2 exec_do*times (exec_flush boolean_rot boolean_pop) exec_s (exec_y_when_autoconstructing (integer_inc)) () ())
Zero cases best errors: [0 0 0 1 0 0 1 1 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 31
Percent parens: 0.194
--- Lexicase Population Statistics ---
Count of elite individuals by case: (705 146 147 167 702 146 296 91 297 298)
Population mean number of elite cases: 2.99
Count of perfect (error zero) individuals by case: (705 146 147 167 702 146 296 91 297 298)
Population mean number of perfect (error zero) cases: 2.99
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_noop} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction tag_integer_748} {:close 0, :instruction tagged_825} {:close 0, :instruction in2} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_s} {:close 0, :instruction integer_inc})
Best program: (exec_noop exec_dup (integer_dup_times boolean_shove boolean_xor boolean_eq boolean_invert_first_then_and boolean_eq tag_integer_748 tagged_825 in2 boolean_pop integer_dup in4 print_integer exec_do*times (exec_flush boolean_rot boolean_pop) exec_s (integer_inc) () ()))
Errors: [0 0 0 1 0 0 1 1 1 1]
Total: 5
Mean: 0.5
Genome size: 21
Size: 27
Percent parens: 0.222
--- Population Statistics ---
Average total errors in population: 7.005
Median total errors in population: 7
Error averages by case: (0.295 0.854 0.853 0.833 0.298 0.854 0.704 0.909 0.703 0.702)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 34.979
Average program size in population (points): 44.301
Average percent parens in population: 0.214
Minimum age in population: 6.0
Maximum age in population: 6.0
Average age in population: 6.0
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 8
Genome diversity (% unique genomes):	 0.98
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.98
Total error diversity:				 0.006
Error (vector) diversity:			 0.021
Behavioral diversity:				 0.134
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 2416935
--- Timings ---
Current time: 1559594080863 milliseconds
Total Time:          13.4 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:         7.8 seconds, 58.3%
Fitness Testing:      3.8 seconds, 28.7%
Report:               1.6 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 407
Test mean error for best: 0.40700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -75                 | Program output: -75                
Correct output: 56                  | Program output: 76                 
Correct output: 6                   | Program output: 6                  
Correct output: -88                 | Program output: -88                
Correct output: 39                  | Program output: 39                 
Correct output: -88                 | Program output: -88                
Correct output: -87                 | Program output: -87                
Correct output: -86                 | Program output: 83                 
Correct output: -96                 | Program output: -96                
Correct output: 22                  | Program output: 22                 
Correct output: 20                  | Program output: 20                 
Correct output: 10                  | Program output: 10                 
Correct output: -22                 | Program output: -22                
Correct output: -54                 | Program output: -54                
Correct output: -23                 | Program output: -23                
Correct output: 7                   | Program output: 72                 
Correct output: 14                  | Program output: 61                 
Correct output: 36                  | Program output: 36                 
Correct output: 19                  | Program output: 89                 
Correct output: 42                  | Program output: 42                 
Correct output: 25                  | Program output: 45                 
Correct output: 38                  | Program output: 74                 
Correct output: 14                  | Program output: 77                 
Correct output: 2                   | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: 16                  | Program output: 16                 
Correct output: 10                  | Program output: 10                 
Correct output: 12                  | Program output: 58                 
Correct output: 26                  | Program output: 73                 
Correct output: 57                  | Program output: 57                 
Correct output: 13                  | Program output: 18                 
Correct output: 23                  | Program output: 26                 
Correct output: 2                   | Program output: 2                  
Correct output: 36                  | Program output: 36                 
Correct output: 9                   | Program output: 9                  
Correct output: -98                 | Program output: -98                
Correct output: -53                 | Program output: -53                
Correct output: -72                 | Program output: -16                
Correct output: -94                 | Program output: -69                
Correct output: -53                 | Program output: -53                
Correct output: -88                 | Program output: -88                
Correct output: -27                 | Program output: -27                
Correct output: -91                 | Program output: -91                
Correct output: -90                 | Program output: -90                
Correct output: -89                 | Program output: -89                
Correct output: -90                 | Program output: -90                
Correct output: -49                 | Program output: -49                
Correct output: -87                 | Program output: -52                
Correct output: -80                 | Program output: -41                
Correct output: -82                 | Program output: -82                
Correct output: -80                 | Program output: -31                
Correct output: -52                 | Program output: -47                
Correct output: -55                 | Program output: 4                  
Correct output: -28                 | Program output: -28                
Correct output: -88                 | Program output: -88                
Correct output: -43                 | Program output: -5                 
Correct output: -70                 | Program output: -70                
Correct output: 56                  | Program output: 56                 
Correct output: 30                  | Program output: 30                 
Correct output: -95                 | Program output: -88                
Correct output: -100                | Program output: -100               
Correct output: -72                 | Program output: -72                
Correct output: -78                 | Program output: -78                
Correct output: -50                 | Program output: -50                
Correct output: -72                 | Program output: -25                
Correct output: -82                 | Program output: 13                 
Correct output: -55                 | Program output: -18                
Correct output: -100                | Program output: -4                 
Correct output: -68                 | Program output: -68                
Correct output: -20                 | Program output: -20                
Correct output: -44                 | Program output: -14                
Correct output: 5                   | Program output: 5                  
Correct output: -71                 | Program output: -71                
Correct output: -20                 | Program output: -20                
Correct output: -35                 | Program output: 36                 
Correct output: -87                 | Program output: -55                
Correct output: -63                 | Program output: -63                
Correct output: -23                 | Program output: -23                
Correct output: -71                 | Program output: -42                
Correct output: -64                 | Program output: -64                
Correct output: -52                 | Program output: -52                
Correct output: -92                 | Program output: 24                 
Correct output: -35                 | Program output: 24                 
Correct output: -78                 | Program output: -78                
Correct output: -80                 | Program output: -80                
Correct output: -54                 | Program output: -26                
Correct output: -71                 | Program output: -24                
Correct output: -87                 | Program output: -87                
Correct output: -85                 | Program output: -85                
Correct output: -58                 | Program output: -51                
Correct output: -85                 | Program output: -85                
Correct output: -69                 | Program output: 4                  
Correct output: -30                 | Program output: -30                
Correct output: -85                 | Program output: -82                
Correct output: -94                 | Program output: -94                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_yank} {:close 1, :instruction boolean_not} {:close 0, :instruction in3} {:close 1, :instruction in2} {:close 1, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction in1} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction print_integer} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_min} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tag_integer_846} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_s} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_empty} {:close 0, :instruction tag_boolean_215} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction -98} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_min} {:close 0, :instruction integer_div} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_frominteger})
Lexicase best program: (integer_yank boolean_not in3 in2 exec_noop integer_fromboolean in1 integer_shove integer_min integer_fromboolean print_integer exec_pop () integer_fromboolean boolean_frominteger integer_inc integer_min integer_max integer_dup_times exec_y_when_autoconstructing (tag_integer_846 integer_max exec_do*while (integer_dec integer_yank exec_y_when_autoconstructing () integer_flush exec_s () (exec_yank) (boolean_dup_times in4 exec_do*times () exec_empty tag_boolean_215 boolean_flush boolean_dup_items) -98) integer_flush integer_swap exec_y_when_autoconstructing (integer_swap integer_min integer_div in2 in3 exec_shove (integer_yankdup integer_mod boolean_xor exec_do*while (integer_yank) boolean_empty boolean_frominteger))))
Lexicase best errors: [0 0 1 0 0 0 0 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 64
Percent parens: 0.188
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_yank} {:close 1, :instruction boolean_not} {:close 0, :instruction in3} {:close 1, :instruction in2} {:close 1, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction in1} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction print_integer} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_min} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tag_integer_846} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_s} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_empty} {:close 0, :instruction tag_boolean_215} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction -98} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_min} {:close 0, :instruction integer_div} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_frominteger})
Zero cases best program: (integer_yank boolean_not in3 in2 exec_noop integer_fromboolean in1 integer_shove integer_min integer_fromboolean print_integer exec_pop () integer_fromboolean boolean_frominteger integer_inc integer_min integer_max integer_dup_times exec_y_when_autoconstructing (tag_integer_846 integer_max exec_do*while (integer_dec integer_yank exec_y_when_autoconstructing () integer_flush exec_s () (exec_yank) (boolean_dup_times in4 exec_do*times () exec_empty tag_boolean_215 boolean_flush boolean_dup_items) -98) integer_flush integer_swap exec_y_when_autoconstructing (integer_swap integer_min integer_div in2 in3 exec_shove (integer_yankdup integer_mod boolean_xor exec_do*while (integer_yank) boolean_empty boolean_frominteger))))
Zero cases best errors: [0 0 1 0 0 0 0 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 64
Percent parens: 0.188
--- Lexicase Population Statistics ---
Count of elite individuals by case: (699 699 91 217 422 217 62 549 307 266)
Population mean number of elite cases: 3.53
Count of perfect (error zero) individuals by case: (699 699 91 217 422 217 62 549 307 266)
Population mean number of perfect (error zero) cases: 3.53
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_yank} {:close 1, :instruction boolean_not} {:close 0, :instruction in3} {:close 1, :instruction in2} {:close 1, :instruction exec_noop} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction in1} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction print_integer} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_min} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tag_integer_846} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_s} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_empty} {:close 0, :instruction tag_boolean_215} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction -98} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_min} {:close 0, :instruction integer_div} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_frominteger})
Best program: (integer_yank boolean_not in3 in2 exec_noop integer_fromboolean in1 integer_shove integer_min integer_fromboolean print_integer exec_pop () integer_fromboolean boolean_frominteger integer_inc integer_min integer_max integer_dup_times exec_y_when_autoconstructing (tag_integer_846 integer_max exec_do*while (integer_dec integer_yank exec_y_when_autoconstructing () integer_flush exec_s () (exec_yank) (boolean_dup_times in4 exec_do*times () exec_empty tag_boolean_215 boolean_flush boolean_dup_items) -98) integer_flush integer_swap exec_y_when_autoconstructing (integer_swap integer_min integer_div in2 in3 exec_shove (integer_yankdup integer_mod boolean_xor exec_do*while (integer_yank) boolean_empty boolean_frominteger))))
Errors: [0 0 1 0 0 0 0 0 0 1]
Total: 2
Mean: 0.2
Genome size: 52
Size: 64
Percent parens: 0.188
--- Population Statistics ---
Average total errors in population: 6.471
Median total errors in population: 5
Error averages by case: (0.301 0.301 0.909 0.783 0.578 0.783 0.938 0.451 0.693 0.734)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.56
Average program size in population (points): 45.217
Average percent parens in population: 0.219
Minimum age in population: 7.0
Maximum age in population: 7.0
Average age in population: 7.0
Median age in population: 7.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 10
Genome diversity (% unique genomes):	 0.974
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.974
Total error diversity:				 0.008
Error (vector) diversity:			 0.032
Behavioral diversity:				 0.217
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 2918767
--- Timings ---
Current time: 1559594082969 milliseconds
Total Time:          15.1 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         8.9 seconds, 58.9%
Fitness Testing:      4.3 seconds, 28.2%
Report:               1.8 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 304
Test mean error for best: 0.30400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -75                 | Program output: -75                
Correct output: 56                  | Program output: 76                 
Correct output: 6                   | Program output: 6                  
Correct output: -88                 | Program output: -88                
Correct output: 39                  | Program output: 39                 
Correct output: -88                 | Program output: -88                
Correct output: -87                 | Program output: -87                
Correct output: -86                 | Program output: 83                 
Correct output: -96                 | Program output: -96                
Correct output: 22                  | Program output: 22                 
Correct output: 20                  | Program output: 20                 
Correct output: 10                  | Program output: 10                 
Correct output: -22                 | Program output: -22                
Correct output: -54                 | Program output: -54                
Correct output: -23                 | Program output: -23                
Correct output: 7                   | Program output: 72                 
Correct output: 14                  | Program output: 61                 
Correct output: 36                  | Program output: 36                 
Correct output: 19                  | Program output: 89                 
Correct output: 42                  | Program output: 42                 
Correct output: 25                  | Program output: 45                 
Correct output: 38                  | Program output: 74                 
Correct output: 14                  | Program output: 77                 
Correct output: 2                   | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: 16                  | Program output: 16                 
Correct output: 10                  | Program output: 10                 
Correct output: 12                  | Program output: 58                 
Correct output: 26                  | Program output: 73                 
Correct output: 57                  | Program output: 57                 
Correct output: 13                  | Program output: 18                 
Correct output: 23                  | Program output: 26                 
Correct output: 2                   | Program output: 2                  
Correct output: 36                  | Program output: 36                 
Correct output: 9                   | Program output: 9                  
Correct output: -98                 | Program output: -98                
Correct output: -53                 | Program output: -53                
Correct output: -72                 | Program output: -39                
Correct output: -94                 | Program output: -69                
Correct output: -53                 | Program output: -53                
Correct output: -88                 | Program output: -88                
Correct output: -27                 | Program output: -27                
Correct output: -91                 | Program output: -91                
Correct output: -90                 | Program output: -90                
Correct output: -89                 | Program output: -89                
Correct output: -90                 | Program output: -90                
Correct output: -49                 | Program output: -46                
Correct output: -87                 | Program output: -69                
Correct output: -80                 | Program output: -74                
Correct output: -82                 | Program output: -82                
Correct output: -80                 | Program output: -80                
Correct output: -52                 | Program output: -52                
Correct output: -55                 | Program output: 4                  
Correct output: -28                 | Program output: -28                
Correct output: -88                 | Program output: -88                
Correct output: -43                 | Program output: -43                
Correct output: -70                 | Program output: -64                
Correct output: 56                  | Program output: 56                 
Correct output: 30                  | Program output: 30                 
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: -100               
Correct output: -72                 | Program output: -19                
Correct output: -78                 | Program output: -78                
Correct output: -50                 | Program output: -50                
Correct output: -72                 | Program output: -43                
Correct output: -82                 | Program output: -32                
Correct output: -55                 | Program output: -4                 
Correct output: -100                | Program output: -100               
Correct output: -68                 | Program output: -68                
Correct output: -20                 | Program output: -20                
Correct output: -44                 | Program output: -44                
Correct output: 5                   | Program output: 5                  
Correct output: -71                 | Program output: -71                
Correct output: -20                 | Program output: -20                
Correct output: -35                 | Program output: 36                 
Correct output: -87                 | Program output: -87                
Correct output: -63                 | Program output: -63                
Correct output: -23                 | Program output: -23                
Correct output: -71                 | Program output: -71                
Correct output: -64                 | Program output: 0                  
Correct output: -52                 | Program output: -22                
Correct output: -92                 | Program output: -4                 
Correct output: -35                 | Program output: -34                
Correct output: -78                 | Program output: -51                
Correct output: -80                 | Program output: -80                
Correct output: -54                 | Program output: -54                
Correct output: -71                 | Program output: -71                
Correct output: -87                 | Program output: -83                
Correct output: -85                 | Program output: -85                
Correct output: -58                 | Program output: -51                
Correct output: -85                 | Program output: -85                
Correct output: -69                 | Program output: -69                
Correct output: -30                 | Program output: -30                
Correct output: -85                 | Program output: -82                
Correct output: -94                 | Program output: -94                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_not} {:close 0, :instruction in3} {:close 1, :instruction in2} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction in1} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction print_integer} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_min} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup_times} {:close 0, :instruction tag_integer_846} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_s} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in4} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_empty} {:close 0, :instruction tag_boolean_215} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction print_boolean} {:close 1, :instruction -98} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_min} {:close 0, :instruction integer_div} {:close 0, :instruction in2} {:close 0, :instruction integer_inc} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_frominteger})
Lexicase best program: (integer_mult integer_yank boolean_not in3 in2 exec_noop in1 integer_fromboolean in1 integer_shove integer_min integer_fromboolean print_integer exec_pop () integer_fromboolean boolean_frominteger integer_inc integer_min integer_mult integer_max integer_dup_times tag_integer_846 integer_max exec_do*while (integer_dec integer_yank exec_y_when_autoconstructing () exec_s_when_autoconstructing (integer_flush exec_s () (exec_yank) (boolean_dup_times exec_stackdepth in4 exec_do*times () exec_empty tag_boolean_215 boolean_flush boolean_dup_items) print_boolean -98) (integer_flush exec_y_when_autoconstructing (integer_swap integer_min integer_div in2 integer_inc in3 exec_shove (integer_yankdup integer_mod boolean_xor exec_do*while (integer_yank) boolean_empty boolean_frominteger))) ()))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 71
Percent parens: 0.197
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_not} {:close 0, :instruction in3} {:close 1, :instruction in2} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction in1} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction print_integer} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_min} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup_times} {:close 0, :instruction tag_integer_846} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_s} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in4} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_empty} {:close 0, :instruction tag_boolean_215} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction print_boolean} {:close 1, :instruction -98} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_min} {:close 0, :instruction integer_div} {:close 0, :instruction in2} {:close 0, :instruction integer_inc} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_frominteger})
Zero cases best program: (integer_mult integer_yank boolean_not in3 in2 exec_noop in1 integer_fromboolean in1 integer_shove integer_min integer_fromboolean print_integer exec_pop () integer_fromboolean boolean_frominteger integer_inc integer_min integer_mult integer_max integer_dup_times tag_integer_846 integer_max exec_do*while (integer_dec integer_yank exec_y_when_autoconstructing () exec_s_when_autoconstructing (integer_flush exec_s () (exec_yank) (boolean_dup_times exec_stackdepth in4 exec_do*times () exec_empty tag_boolean_215 boolean_flush boolean_dup_items) print_boolean -98) (integer_flush exec_y_when_autoconstructing (integer_swap integer_min integer_div in2 integer_inc in3 exec_shove (integer_yankdup integer_mod boolean_xor exec_do*while (integer_yank) boolean_empty boolean_frominteger))) ()))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 71
Percent parens: 0.197
--- Lexicase Population Statistics ---
Count of elite individuals by case: (361 364 384 182 383 182 384 369 635 123)
Population mean number of elite cases: 3.37
Count of perfect (error zero) individuals by case: (361 364 384 182 383 182 384 369 635 123)
Population mean number of perfect (error zero) cases: 3.37
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_yank} {:close 1, :instruction boolean_not} {:close 0, :instruction in3} {:close 1, :instruction in2} {:close 0, :instruction in1} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction in1} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction print_integer} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tag_integer_846} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in3} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_k} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_div} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_frominteger})
Best program: (integer_yank boolean_not in3 in2 in1 integer_fromboolean in1 integer_shove integer_min integer_fromboolean print_integer exec_pop () integer_fromboolean boolean_frominteger exec_s (integer_min integer_dup_times exec_y_when_autoconstructing (tag_integer_846 integer_max exec_do*while (integer_dec integer_yank exec_y_when_autoconstructing () integer_flush exec_yank) boolean_dup_times in3 exec_do*times () exec_empty boolean_flush boolean_dup_items) integer_flush integer_swap exec_y_when_autoconstructing (exec_k (integer_swap boolean_and integer_div in2 exec_shove (integer_yankdup boolean_xor exec_do*while (integer_yank) boolean_empty boolean_frominteger)) ())) () ())
Errors: [0 0 0 0 0 0 0 0 0 1]
Total: 1
Mean: 0.1
Genome size: 47
Size: 61
Percent parens: 0.230
--- Population Statistics ---
Average total errors in population: 6.633
Median total errors in population: 7
Error averages by case: (0.639 0.636 0.616 0.818 0.617 0.818 0.616 0.631 0.365 0.877)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 46.044
Average program size in population (points): 57.774
Average percent parens in population: 0.205
Minimum age in population: 8.0
Maximum age in population: 8.0
Average age in population: 8.0
Median age in population: 8.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 5
Genome diversity (% unique genomes):	 0.99
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.99
Total error diversity:				 0.009
Error (vector) diversity:			 0.03
Behavioral diversity:				 0.154
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 3798838
--- Timings ---
Current time: 1559594085292 milliseconds
Total Time:          17.5 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:        10.0 seconds, 57.4%
Fitness Testing:      5.0 seconds, 28.4%
Report:               2.4 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 328
Test mean error for best: 0.32800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -75                 | Program output: 47                 
Correct output: 56                  | Program output: 56                 
Correct output: 6                   | Program output: 6                  
Correct output: -88                 | Program output: -88                
Correct output: 39                  | Program output: 39                 
Correct output: -88                 | Program output: -88                
Correct output: -87                 | Program output: 37                 
Correct output: -86                 | Program output: -86                
Correct output: -96                 | Program output: -96                
Correct output: 22                  | Program output: 22                 
Correct output: 20                  | Program output: 20                 
Correct output: 10                  | Program output: 10                 
Correct output: -22                 | Program output: -22                
Correct output: -54                 | Program output: -54                
Correct output: -23                 | Program output: -23                
Correct output: 7                   | Program output: 12                 
Correct output: 14                  | Program output: 74                 
Correct output: 36                  | Program output: 50                 
Correct output: 19                  | Program output: 19                 
Correct output: 42                  | Program output: 42                 
Correct output: 25                  | Program output: 25                 
Correct output: 38                  | Program output: 74                 
Correct output: 14                  | Program output: 14                 
Correct output: 2                   | Program output: 12                 
Correct output: 35                  | Program output: 35                 
Correct output: 16                  | Program output: 16                 
Correct output: 10                  | Program output: 54                 
Correct output: 12                  | Program output: 72                 
Correct output: 26                  | Program output: 87                 
Correct output: 57                  | Program output: 57                 
Correct output: 13                  | Program output: 13                 
Correct output: 23                  | Program output: 23                 
Correct output: 2                   | Program output: 19                 
Correct output: 36                  | Program output: 36                 
Correct output: 9                   | Program output: 32                 
Correct output: -98                 | Program output: -98                
Correct output: -53                 | Program output: -44                
Correct output: -72                 | Program output: -72                
Correct output: -94                 | Program output: -94                
Correct output: -53                 | Program output: -41                
Correct output: -88                 | Program output: -70                
Correct output: -27                 | Program output: -27                
Correct output: -91                 | Program output: -83                
Correct output: -90                 | Program output: -47                
Correct output: -89                 | Program output: -89                
Correct output: -90                 | Program output: 20                 
Correct output: -49                 | Program output: -46                
Correct output: -87                 | Program output: -87                
Correct output: -80                 | Program output: -80                
Correct output: -82                 | Program output: -78                
Correct output: -80                 | Program output: -80                
Correct output: -52                 | Program output: -52                
Correct output: -55                 | Program output: -55                
Correct output: -28                 | Program output: -28                
Correct output: -88                 | Program output: -88                
Correct output: -43                 | Program output: -43                
Correct output: -70                 | Program output: -48                
Correct output: 56                  | Program output: 56                 
Correct output: 30                  | Program output: 30                 
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: -100               
Correct output: -72                 | Program output: -8                 
Correct output: -78                 | Program output: -48                
Correct output: -50                 | Program output: -47                
Correct output: -72                 | Program output: -72                
Correct output: -82                 | Program output: -82                
Correct output: -55                 | Program output: -55                
Correct output: -100                | Program output: -100               
Correct output: -68                 | Program output: -48                
Correct output: -20                 | Program output: -20                
Correct output: -44                 | Program output: -44                
Correct output: 5                   | Program output: 42                 
Correct output: -71                 | Program output: -63                
Correct output: -20                 | Program output: -20                
Correct output: -35                 | Program output: -35                
Correct output: -87                 | Program output: -87                
Correct output: -63                 | Program output: -56                
Correct output: -23                 | Program output: 79                 
Correct output: -71                 | Program output: -71                
Correct output: -64                 | Program output: 0                  
Correct output: -52                 | Program output: -22                
Correct output: -92                 | Program output: -92                
Correct output: -35                 | Program output: -35                
Correct output: -78                 | Program output: -51                
Correct output: -80                 | Program output: -70                
Correct output: -54                 | Program output: -54                
Correct output: -71                 | Program output: -71                
Correct output: -87                 | Program output: -83                
Correct output: -85                 | Program output: -42                
Correct output: -58                 | Program output: -58                
Correct output: -85                 | Program output: -2                 
Correct output: -69                 | Program output: -69                
Correct output: -30                 | Program output: -19                
Correct output: -85                 | Program output: -85                
Correct output: -94                 | Program output: -29                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_do*count} {:close 0, :instruction in3} {:close 1, :instruction in2} {:close 0, :instruction in4} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction in1} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction print_integer} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_min} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup_times} {:close 0, :instruction tag_integer_846} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_s} {:close 1, :instruction exec_yank} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction exec_empty} {:close 0, :instruction tagged_981} {:close 0, :instruction tag_boolean_215} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction print_boolean} {:close 1, :instruction -98} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_min} {:close 0, :instruction integer_div} {:close 0, :instruction in2} {:close 0, :instruction integer_inc} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_frominteger})
Lexicase best program: (integer_mult integer_yank boolean_not exec_do*count (in3 in2) in4 exec_noop in1 integer_fromboolean in1 integer_shove integer_min integer_fromboolean print_integer exec_pop () integer_fromboolean boolean_swap boolean_frominteger integer_inc integer_min integer_mult integer_max integer_dup_times tag_integer_846 integer_max exec_do*while (integer_empty integer_dec integer_yank exec_y_when_autoconstructing () exec_s_when_autoconstructing (exec_s () (exec_yank) (exec_do*times () boolean_dup_times exec_stackdepth in4 exec_empty tagged_981 tag_boolean_215 boolean_flush boolean_dup_items) print_boolean -98) (boolean_pop integer_flush exec_y_when_autoconstructing (integer_swap integer_min integer_div in2 integer_inc in3 exec_shove (integer_yankdup integer_mod boolean_xor exec_do*while (integer_yank) boolean_empty boolean_frominteger))) ()))
Lexicase best errors: [0 0 0 0 0 0 1 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 77
Percent parens: 0.195
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_do*count} {:close 0, :instruction in3} {:close 1, :instruction in2} {:close 0, :instruction in4} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction in1} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction print_integer} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_min} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup_times} {:close 0, :instruction tag_integer_846} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_s} {:close 1, :instruction exec_yank} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction exec_empty} {:close 0, :instruction tagged_981} {:close 0, :instruction tag_boolean_215} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction print_boolean} {:close 1, :instruction -98} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_min} {:close 0, :instruction integer_div} {:close 0, :instruction in2} {:close 0, :instruction integer_inc} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_frominteger})
Zero cases best program: (integer_mult integer_yank boolean_not exec_do*count (in3 in2) in4 exec_noop in1 integer_fromboolean in1 integer_shove integer_min integer_fromboolean print_integer exec_pop () integer_fromboolean boolean_swap boolean_frominteger integer_inc integer_min integer_mult integer_max integer_dup_times tag_integer_846 integer_max exec_do*while (integer_empty integer_dec integer_yank exec_y_when_autoconstructing () exec_s_when_autoconstructing (exec_s () (exec_yank) (exec_do*times () boolean_dup_times exec_stackdepth in4 exec_empty tagged_981 tag_boolean_215 boolean_flush boolean_dup_items) print_boolean -98) (boolean_pop integer_flush exec_y_when_autoconstructing (integer_swap integer_min integer_div in2 integer_inc in3 exec_shove (integer_yankdup integer_mod boolean_xor exec_do*while (integer_yank) boolean_empty boolean_frominteger))) ()))
Zero cases best errors: [0 0 0 0 0 0 1 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 77
Percent parens: 0.195
--- Lexicase Population Statistics ---
Count of elite individuals by case: (434 435 705 9 8 10 455 428 9 467)
Population mean number of elite cases: 2.96
Count of perfect (error zero) individuals by case: (434 435 705 9 8 10 455 428 9 467)
Population mean number of perfect (error zero) cases: 2.96
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_do*count} {:close 0, :instruction in3} {:close 1, :instruction in2} {:close 0, :instruction in4} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction in1} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction print_integer} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_min} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup_times} {:close 0, :instruction tag_integer_846} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_s} {:close 1, :instruction exec_yank} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction exec_empty} {:close 0, :instruction tagged_981} {:close 0, :instruction tag_boolean_215} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction print_boolean} {:close 1, :instruction -98} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_min} {:close 0, :instruction integer_div} {:close 0, :instruction in2} {:close 0, :instruction integer_inc} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_frominteger})
Best program: (integer_mult integer_yank boolean_not exec_do*count (in3 in2) in4 exec_noop in1 integer_fromboolean in1 integer_shove integer_min integer_fromboolean print_integer exec_pop () integer_fromboolean boolean_swap boolean_frominteger integer_inc integer_min integer_mult integer_max integer_dup_times tag_integer_846 integer_max exec_do*while (integer_empty integer_dec integer_yank exec_y_when_autoconstructing () exec_s_when_autoconstructing (exec_s () (exec_yank) (exec_do*times () boolean_dup_times exec_stackdepth in4 exec_empty tagged_981 tag_boolean_215 boolean_flush boolean_dup_items) print_boolean -98) (boolean_pop integer_flush exec_y_when_autoconstructing (integer_swap integer_min integer_div in2 integer_inc in3 exec_shove (integer_yankdup integer_mod boolean_xor exec_do*while (integer_yank) boolean_empty boolean_frominteger))) ()))
Errors: [0 0 0 0 0 0 1 0 0 1]
Total: 2
Mean: 0.2
Genome size: 62
Size: 77
Percent parens: 0.195
--- Population Statistics ---
Average total errors in population: 7.04
Median total errors in population: 7
Error averages by case: (0.566 0.565 0.295 0.991 0.992 0.99 0.545 0.572 0.991 0.533)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 51.338
Average program size in population (points): 64.991
Average percent parens in population: 0.210
Minimum age in population: 9.0
Maximum age in population: 9.0
Average age in population: 9.0
Median age in population: 9.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.009
Error (vector) diversity:			 0.041
Behavioral diversity:				 0.31
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 4782500
--- Timings ---
Current time: 1559594087958 milliseconds
Total Time:          19.8 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:        11.1 seconds, 56.1%
Fitness Testing:      5.7 seconds, 28.8%
Report:               2.9 seconds, 14.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 328
Test mean error for best: 0.32800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -75                 | Program output: 47                 
Correct output: 56                  | Program output: 56                 
Correct output: 6                   | Program output: 6                  
Correct output: -88                 | Program output: -88                
Correct output: 39                  | Program output: 39                 
Correct output: -88                 | Program output: -88                
Correct output: -87                 | Program output: 37                 
Correct output: -86                 | Program output: -86                
Correct output: -96                 | Program output: -96                
Correct output: 22                  | Program output: 22                 
Correct output: 20                  | Program output: 20                 
Correct output: 10                  | Program output: 10                 
Correct output: -22                 | Program output: -22                
Correct output: -54                 | Program output: -54                
Correct output: -23                 | Program output: -23                
Correct output: 7                   | Program output: 12                 
Correct output: 14                  | Program output: 74                 
Correct output: 36                  | Program output: 50                 
Correct output: 19                  | Program output: 19                 
Correct output: 42                  | Program output: 42                 
Correct output: 25                  | Program output: 25                 
Correct output: 38                  | Program output: 74                 
Correct output: 14                  | Program output: 14                 
Correct output: 2                   | Program output: 12                 
Correct output: 35                  | Program output: 35                 
Correct output: 16                  | Program output: 16                 
Correct output: 10                  | Program output: 54                 
Correct output: 12                  | Program output: 72                 
Correct output: 26                  | Program output: 87                 
Correct output: 57                  | Program output: 57                 
Correct output: 13                  | Program output: 13                 
Correct output: 23                  | Program output: 23                 
Correct output: 2                   | Program output: 19                 
Correct output: 36                  | Program output: 36                 
Correct output: 9                   | Program output: 32                 
Correct output: -98                 | Program output: -98                
Correct output: -53                 | Program output: -44                
Correct output: -72                 | Program output: -72                
Correct output: -94                 | Program output: -94                
Correct output: -53                 | Program output: -41                
Correct output: -88                 | Program output: -70                
Correct output: -27                 | Program output: -27                
Correct output: -91                 | Program output: -83                
Correct output: -90                 | Program output: -47                
Correct output: -89                 | Program output: -89                
Correct output: -90                 | Program output: 20                 
Correct output: -49                 | Program output: -46                
Correct output: -87                 | Program output: -87                
Correct output: -80                 | Program output: -80                
Correct output: -82                 | Program output: -78                
Correct output: -80                 | Program output: -80                
Correct output: -52                 | Program output: -52                
Correct output: -55                 | Program output: -55                
Correct output: -28                 | Program output: -28                
Correct output: -88                 | Program output: -88                
Correct output: -43                 | Program output: -43                
Correct output: -70                 | Program output: -48                
Correct output: 56                  | Program output: 56                 
Correct output: 30                  | Program output: 30                 
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: -100               
Correct output: -72                 | Program output: -8                 
Correct output: -78                 | Program output: -48                
Correct output: -50                 | Program output: -47                
Correct output: -72                 | Program output: -72                
Correct output: -82                 | Program output: -82                
Correct output: -55                 | Program output: -55                
Correct output: -100                | Program output: -100               
Correct output: -68                 | Program output: -48                
Correct output: -20                 | Program output: -20                
Correct output: -44                 | Program output: -44                
Correct output: 5                   | Program output: 42                 
Correct output: -71                 | Program output: -63                
Correct output: -20                 | Program output: -20                
Correct output: -35                 | Program output: -35                
Correct output: -87                 | Program output: -87                
Correct output: -63                 | Program output: -56                
Correct output: -23                 | Program output: 79                 
Correct output: -71                 | Program output: -71                
Correct output: -64                 | Program output: 0                  
Correct output: -52                 | Program output: -22                
Correct output: -92                 | Program output: -92                
Correct output: -35                 | Program output: -35                
Correct output: -78                 | Program output: -51                
Correct output: -80                 | Program output: -70                
Correct output: -54                 | Program output: -54                
Correct output: -71                 | Program output: -71                
Correct output: -87                 | Program output: -83                
Correct output: -85                 | Program output: -42                
Correct output: -58                 | Program output: -58                
Correct output: -85                 | Program output: -2                 
Correct output: -69                 | Program output: -69                
Correct output: -30                 | Program output: -19                
Correct output: -85                 | Program output: -85                
Correct output: -94                 | Program output: -29                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_do*count} {:close 0, :instruction in3} {:close 1, :instruction in2} {:close 0, :instruction in4} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction in1} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction print_integer} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup_times} {:close 0, :instruction tag_integer_846} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_s} {:close 1, :instruction exec_yank} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction exec_empty} {:close 0, :instruction tagged_981} {:close 0, :instruction integer_eq} {:close 0, :instruction tag_boolean_215} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction print_boolean} {:close 1, :instruction -98} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_min} {:close 0, :instruction integer_div} {:close 0, :instruction in2} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_frominteger})
Lexicase best program: (integer_mult integer_yank boolean_not exec_do*count (in3 in2) in4 exec_noop in1 integer_fromboolean in1 integer_shove integer_min integer_fromboolean print_integer exec_pop () integer_fromboolean boolean_swap boolean_frominteger integer_min integer_mult integer_max integer_dup_times tag_integer_846 integer_max exec_do*while (integer_empty integer_dec integer_yank exec_y_when_autoconstructing () exec_s () (exec_yank) (exec_do*times () boolean_dup_times in4 exec_empty tagged_981 integer_eq tag_boolean_215 boolean_flush boolean_dup_items) print_boolean -98) integer_min boolean_pop exec_y_when_autoconstructing (integer_swap integer_min integer_div in2 integer_inc exec_shove (integer_yankdup integer_mod boolean_xor exec_do*while (integer_yank) boolean_empty boolean_frominteger)))
Lexicase best errors: [0 1 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 71
Percent parens: 0.169
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_do*count} {:close 0, :instruction in3} {:close 1, :instruction in2} {:close 0, :instruction in4} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction in1} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction print_integer} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup_times} {:close 0, :instruction tag_integer_846} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_s} {:close 1, :instruction exec_yank} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction exec_empty} {:close 0, :instruction tagged_981} {:close 0, :instruction integer_eq} {:close 0, :instruction tag_boolean_215} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction print_boolean} {:close 1, :instruction -98} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_min} {:close 0, :instruction integer_div} {:close 0, :instruction in2} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_frominteger})
Zero cases best program: (integer_mult integer_yank boolean_not exec_do*count (in3 in2) in4 exec_noop in1 integer_fromboolean in1 integer_shove integer_min integer_fromboolean print_integer exec_pop () integer_fromboolean boolean_swap boolean_frominteger integer_min integer_mult integer_max integer_dup_times tag_integer_846 integer_max exec_do*while (integer_empty integer_dec integer_yank exec_y_when_autoconstructing () exec_s () (exec_yank) (exec_do*times () boolean_dup_times in4 exec_empty tagged_981 integer_eq tag_boolean_215 boolean_flush boolean_dup_items) print_boolean -98) integer_min boolean_pop exec_y_when_autoconstructing (integer_swap integer_min integer_div in2 integer_inc exec_shove (integer_yankdup integer_mod boolean_xor exec_do*while (integer_yank) boolean_empty boolean_frominteger)))
Zero cases best errors: [0 1 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 71
Percent parens: 0.169
--- Lexicase Population Statistics ---
Count of elite individuals by case: (264 305 433 380 299 269 421 631 432 380)
Population mean number of elite cases: 3.81
Count of perfect (error zero) individuals by case: (264 305 433 380 299 269 421 631 432 380)
Population mean number of perfect (error zero) cases: 3.81
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count} {:close 0, :instruction in3} {:close 1, :instruction in2} {:close 0, :instruction in4} {:close 1, :instruction exec_noop} {:close 0, :instruction in1} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction in1} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction tagged_116} {:close 1, :instruction print_integer} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_min} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_s} {:close 1, :instruction exec_yank} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction exec_empty} {:close 0, :instruction tag_boolean_215} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_boolean} {:close 1, :instruction -98} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_min} {:close 0, :instruction integer_div} {:close 0, :instruction in2} {:close 0, :instruction integer_inc} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_frominteger})
Best program: (integer_mult integer_yank boolean_not integer_yank exec_do*count (in3 in2) in4 exec_noop in1 integer_fromboolean in1 integer_shove integer_min integer_fromboolean tagged_116 print_integer exec_pop () integer_fromboolean boolean_swap boolean_frominteger integer_inc integer_min integer_mult integer_max integer_dup_times integer_max exec_do*while (integer_empty integer_dec integer_yank exec_swap (exec_y_when_autoconstructing () exec_s_when_autoconstructing (exec_s () (exec_yank) (exec_do*times () boolean_dup_times exec_stackdepth in4 exec_empty tag_boolean_215 boolean_flush boolean_dup_items) exec_do*while (print_boolean -98) integer_flush exec_y_when_autoconstructing (integer_swap integer_min integer_div in2 integer_inc in3 exec_shove (integer_yankdup integer_mod boolean_xor integer_yank) boolean_empty boolean_frominteger)) () ()) ()))
Errors: [0 1 0 0 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 62
Size: 79
Percent parens: 0.215
--- Population Statistics ---
Average total errors in population: 6.186
Median total errors in population: 6
Error averages by case: (0.736 0.695 0.567 0.62 0.701 0.731 0.579 0.369 0.568 0.62)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 56.397
Average program size in population (points): 71.107
Average percent parens in population: 0.207
Minimum age in population: 10.0
Maximum age in population: 10.0
Average age in population: 10.0
Median age in population: 10.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.01
Error (vector) diversity:			 0.068
Behavioral diversity:				 0.362
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 5803258
--- Timings ---
Current time: 1559594090587 milliseconds
Total Time:          22.6 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        12.2 seconds, 54.2%
Fitness Testing:      6.5 seconds, 28.9%
Report:               3.7 seconds, 16.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 227
Test mean error for best: 0.22700
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 1
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 1
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 1
Test Case   16 | Error: 1
Test Case   17 | Error: 1
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 1
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 1
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 1
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 1
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 1
Test Case   65 | Error: 1
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 1
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 1
Test Case   82 | Error: 0
Test Case   83 | Error: 1
Test Case   84 | Error: 0
Test Case   85 | Error: 1
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 1
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 1
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 1
Test Case  201 | Error: 0
Test Case  202 | Error: 1
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 1
Test Case  207 | Error: 0
Test Case  208 | Error: 1
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 1
Test Case  212 | Error: 0
Test Case  213 | Error: 1
Test Case  214 | Error: 1
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 1
Test Case  218 | Error: 1
Test Case  219 | Error: 1
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 1
Test Case  227 | Error: 1
Test Case  228 | Error: 1
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 1
Test Case  238 | Error: 0
Test Case  239 | Error: 1
Test Case  240 | Error: 0
Test Case  241 | Error: 1
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 1
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 1
Test Case  250 | Error: 1
Test Case  251 | Error: 0
Test Case  252 | Error: 1
Test Case  253 | Error: 0
Test Case  254 | Error: 1
Test Case  255 | Error: 1
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 1
Test Case  259 | Error: 1
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 1
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 1
Test Case  268 | Error: 0
Test Case  269 | Error: 1
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 1
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 1
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 1
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 1
Test Case  288 | Error: 1
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 1
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 1
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 1
Test Case  312 | Error: 0
Test Case  313 | Error: 1
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 1
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 1
Test Case  329 | Error: 1
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 1
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 1
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 1
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 1
Test Case  349 | Error: 1
Test Case  350 | Error: 1
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 1
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 1
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 1
Test Case  365 | Error: 0
Test Case  366 | Error: 1
Test Case  367 | Error: 1
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 1
Test Case  379 | Error: 0
Test Case  380 | Error: 1
Test Case  381 | Error: 1
Test Case  382 | Error: 0
Test Case  383 | Error: 1
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 1
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 1
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 1
Test Case  397 | Error: 0
Test Case  398 | Error: 1
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 1
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 1
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 1
Test Case  410 | Error: 0
Test Case  411 | Error: 1
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 1
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 1
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 1
Test Case  426 | Error: 1
Test Case  427 | Error: 1
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 1
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 1
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 1
Test Case  444 | Error: 1
Test Case  445 | Error: 1
Test Case  446 | Error: 1
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 1
Test Case  450 | Error: 0
Test Case  451 | Error: 1
Test Case  452 | Error: 1
Test Case  453 | Error: 1
Test Case  454 | Error: 1
Test Case  455 | Error: 1
Test Case  456 | Error: 1
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 1
Test Case  460 | Error: 1
Test Case  461 | Error: 1
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 1
Test Case  477 | Error: 0
Test Case  478 | Error: 1
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 1
Test Case  483 | Error: 0
Test Case  484 | Error: 1
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 1
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 1
Test Case  496 | Error: 1
Test Case  497 | Error: 1
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 1
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 1
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 1
Test Case  514 | Error: 1
Test Case  515 | Error: 0
Test Case  516 | Error: 1
Test Case  517 | Error: 0
Test Case  518 | Error: 1
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 1
Test Case  523 | Error: 0
Test Case  524 | Error: 1
Test Case  525 | Error: 1
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 1
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 1
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 1
Test Case  549 | Error: 1
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 1
Test Case  557 | Error: 1
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 1
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 1
Test Case  565 | Error: 0
Test Case  566 | Error: 1
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 1
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 1
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 1
Test Case  586 | Error: 1
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 1
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 1
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 1
Test Case  600 | Error: 1
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 1
Test Case  611 | Error: 1
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 1
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 1
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 1
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 1
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 1
Test Case  647 | Error: 1
Test Case  648 | Error: 1
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 1
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 1
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 1
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 1
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 1
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 1
Test Case  676 | Error: 0
Test Case  677 | Error: 1
Test Case  678 | Error: 1
Test Case  679 | Error: 0
Test Case  680 | Error: 1
Test Case  681 | Error: 1
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 1
Test Case  689 | Error: 1
Test Case  690 | Error: 0
Test Case  691 | Error: 1
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 1
Test Case  695 | Error: 0
Test Case  696 | Error: 1
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 1
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 1
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 1
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 1
Test Case  719 | Error: 0
Test Case  720 | Error: 1
Test Case  721 | Error: 0
Test Case  722 | Error: 1
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 1
Test Case  733 | Error: 1
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 1
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 1
Test Case  750 | Error: 1
Test Case  751 | Error: 0
Test Case  752 | Error: 1
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 1
Test Case  759 | Error: 0
Test Case  760 | Error: 1
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 1
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 1
Test Case  771 | Error: 0
Test Case  772 | Error: 1
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 1
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 1
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 1
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 1
Test Case  796 | Error: 0
Test Case  797 | Error: 1
Test Case  798 | Error: 0
Test Case  799 | Error: 1
Test Case  800 | Error: 1
Test Case  801 | Error: 1
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 1
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 1
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 1
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 1
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 1
Test Case  847 | Error: 0
Test Case  848 | Error: 1
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 1
Test Case  853 | Error: 1
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 1
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 1
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 1
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 1
Test Case  881 | Error: 0
Test Case  882 | Error: 1
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 1
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 1
Test Case  898 | Error: 1
Test Case  899 | Error: 1
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 1
Test Case  903 | Error: 1
Test Case  904 | Error: 1
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 1
Test Case  908 | Error: 0
Test Case  909 | Error: 1
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 1
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 1
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 1
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 1
Test Case  934 | Error: 0
Test Case  935 | Error: 1
Test Case  936 | Error: 1
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 1
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 1
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 1
Test Case  950 | Error: 0
Test Case  951 | Error: 1
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 1
Test Case  955 | Error: 0
Test Case  956 | Error: 1
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 1
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 1
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 1
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 1
Test Case  982 | Error: 1
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 1
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 1
Test Case  990 | Error: 1
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 1
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 1
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -75                 | Program output: -75                
Correct output: 56                  | Program output: 56                 
Correct output: 6                   | Program output: 6                  
Correct output: -88                 | Program output: -88                
Correct output: 39                  | Program output: 39                 
Correct output: -88                 | Program output: -88                
Correct output: -87                 | Program output: -87                
Correct output: -86                 | Program output: -86                
Correct output: -96                 | Program output: -96                
Correct output: 22                  | Program output: 22                 
Correct output: 20                  | Program output: 20                 
Correct output: 10                  | Program output: 10                 
Correct output: -22                 | Program output: -22                
Correct output: -54                 | Program output: -54                
Correct output: -23                 | Program output: -23                
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 14                 
Correct output: 36                  | Program output: 36                 
Correct output: 19                  | Program output: 19                 
Correct output: 42                  | Program output: 45                 
Correct output: 25                  | Program output: 25                 
Correct output: 38                  | Program output: 38                 
Correct output: 14                  | Program output: 14                 
Correct output: 2                   | Program output: 2                  
Correct output: 35                  | Program output: 52                 
Correct output: 16                  | Program output: 33                 
Correct output: 10                  | Program output: 10                 
Correct output: 12                  | Program output: 12                 
Correct output: 26                  | Program output: 26                 
Correct output: 57                  | Program output: 63                 
Correct output: 13                  | Program output: 13                 
Correct output: 23                  | Program output: 23                 
Correct output: 2                   | Program output: 2                  
Correct output: 36                  | Program output: 50                 
Correct output: 9                   | Program output: 9                  
Correct output: -98                 | Program output: -31                
Correct output: -53                 | Program output: -53                
Correct output: -72                 | Program output: -72                
Correct output: -94                 | Program output: -94                
Correct output: -53                 | Program output: -41                
Correct output: -88                 | Program output: -88                
Correct output: -27                 | Program output: 58                 
Correct output: -91                 | Program output: -91                
Correct output: -90                 | Program output: -47                
Correct output: -89                 | Program output: 19                 
Correct output: -90                 | Program output: -90                
Correct output: -49                 | Program output: -49                
Correct output: -87                 | Program output: -87                
Correct output: -80                 | Program output: -80                
Correct output: -82                 | Program output: -82                
Correct output: -80                 | Program output: -80                
Correct output: -52                 | Program output: -52                
Correct output: -55                 | Program output: -55                
Correct output: -28                 | Program output: 26                 
Correct output: -88                 | Program output: 34                 
Correct output: -43                 | Program output: -43                
Correct output: -70                 | Program output: -70                
Correct output: 56                  | Program output: 78                 
Correct output: 30                  | Program output: 38                 
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: -21                
Correct output: -72                 | Program output: -72                
Correct output: -78                 | Program output: -48                
Correct output: -50                 | Program output: -47                
Correct output: -72                 | Program output: -72                
Correct output: -82                 | Program output: -82                
Correct output: -55                 | Program output: -55                
Correct output: -100                | Program output: -100               
Correct output: -68                 | Program output: -48                
Correct output: -20                 | Program output: 13                 
Correct output: -44                 | Program output: -44                
Correct output: 5                   | Program output: 5                  
Correct output: -71                 | Program output: -71                
Correct output: -20                 | Program output: 44                 
Correct output: -35                 | Program output: -35                
Correct output: -87                 | Program output: -87                
Correct output: -63                 | Program output: -63                
Correct output: -23                 | Program output: -23                
Correct output: -71                 | Program output: -71                
Correct output: -64                 | Program output: -64                
Correct output: -52                 | Program output: -52                
Correct output: -92                 | Program output: -92                
Correct output: -35                 | Program output: -35                
Correct output: -78                 | Program output: -78                
Correct output: -80                 | Program output: -80                
Correct output: -54                 | Program output: -54                
Correct output: -71                 | Program output: -71                
Correct output: -87                 | Program output: -87                
Correct output: -85                 | Program output: -85                
Correct output: -58                 | Program output: -58                
Correct output: -85                 | Program output: -85                
Correct output: -69                 | Program output: -69                
Correct output: -30                 | Program output: -19                
Correct output: -85                 | Program output: -85                
Correct output: -94                 | Program output: -94                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction in4} {:close 1, :instruction boolean_not} {:close 0, :instruction in3} {:close 1, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction print_integer} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction tag_integer_846} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction -98} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction in2} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_yank})
Lexicase best program: (integer_yank exec_noop in4 boolean_not in3 integer_min integer_fromboolean in1 integer_min integer_fromboolean print_integer integer_fromboolean integer_fromboolean boolean_frominteger integer_min integer_max integer_dup_times exec_flush tag_integer_846 integer_max exec_do*while (integer_dec integer_yank exec_y_when_autoconstructing () integer_flush exec_s () (boolean_frominteger exec_yank) (boolean_dup_times in4 exec_yank boolean_dup_items) -98) integer_flush integer_swap exec_y_when_autoconstructing (boolean_dup_times) in2 exec_stackdepth exec_shove (boolean_xor boolean_shove exec_do*while (integer_yank)))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 53
Percent parens: 0.170
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction in4} {:close 1, :instruction boolean_not} {:close 0, :instruction in3} {:close 1, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction print_integer} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction tag_integer_846} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction -98} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction in2} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_yank})
Zero cases best program: (integer_yank exec_noop in4 boolean_not in3 integer_min integer_fromboolean in1 integer_min integer_fromboolean print_integer integer_fromboolean integer_fromboolean boolean_frominteger integer_min integer_max integer_dup_times exec_flush tag_integer_846 integer_max exec_do*while (integer_dec integer_yank exec_y_when_autoconstructing () integer_flush exec_s () (boolean_frominteger exec_yank) (boolean_dup_times in4 exec_yank boolean_dup_items) -98) integer_flush integer_swap exec_y_when_autoconstructing (boolean_dup_times) in2 exec_stackdepth exec_shove (boolean_xor boolean_shove exec_do*while (integer_yank)))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 53
Percent parens: 0.170
--- Lexicase Population Statistics ---
Count of elite individuals by case: (360 626 269 367 380 362 136 424 431 424)
Population mean number of elite cases: 3.78
Count of perfect (error zero) individuals by case: (360 626 269 367 380 362 136 424 431 424)
Population mean number of perfect (error zero) cases: 3.78
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction in4} {:close 1, :instruction boolean_not} {:close 0, :instruction in3} {:close 1, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction print_integer} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction tag_integer_846} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction -98} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction in2} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_yank})
Best program: (integer_yank exec_noop in4 boolean_not in3 integer_min integer_fromboolean in1 integer_min integer_fromboolean print_integer integer_fromboolean integer_fromboolean boolean_frominteger integer_min integer_max integer_dup_times exec_flush tag_integer_846 integer_max exec_do*while (integer_dec integer_yank exec_y_when_autoconstructing () integer_flush exec_s () (boolean_frominteger exec_yank) (boolean_dup_times in4 exec_yank boolean_dup_items) -98) integer_flush integer_swap exec_y_when_autoconstructing (boolean_dup_times) in2 exec_stackdepth exec_shove (boolean_xor boolean_shove exec_do*while (integer_yank)))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 44
Size: 53
Percent parens: 0.170
--- Population Statistics ---
Average total errors in population: 6.221
Median total errors in population: 6
Error averages by case: (0.64 0.374 0.731 0.633 0.62 0.638 0.864 0.576 0.569 0.576)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 59.14
Average program size in population (points): 74.818
Average percent parens in population: 0.209
Minimum age in population: 11.0
Maximum age in population: 11.0
Average age in population: 11.0
Median age in population: 11.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.011
Error (vector) diversity:			 0.069
Behavioral diversity:				 0.33
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 6801700
--- Timings ---
Current time: 1559594092751 milliseconds
Total Time:          25.2 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        13.3 seconds, 53.0%
Fitness Testing:      7.3 seconds, 29.1%
Report:               4.4 seconds, 17.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 11
Successful program: (integer_yank exec_noop in4 boolean_not in3 integer_min integer_fromboolean in1 integer_min integer_fromboolean print_integer integer_fromboolean integer_fromboolean boolean_frominteger integer_min integer_max integer_dup_times exec_flush tag_integer_846 integer_max exec_do*while (integer_dec integer_yank exec_y_when_autoconstructing () integer_flush exec_s () (boolean_frominteger exec_yank) (boolean_dup_times in4 exec_yank boolean_dup_items) -98) integer_flush integer_swap exec_y_when_autoconstructing (boolean_dup_times) in2 exec_stackdepth exec_shove (boolean_xor boolean_shove exec_do*while (integer_yank)))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 53


Auto-simplifying with starting size: 53
step: 0
program: (integer_yank exec_noop in4 boolean_not in3 integer_min integer_fromboolean in1 integer_min integer_fromboolean print_integer integer_fromboolean integer_fromboolean boolean_frominteger integer_min integer_max integer_dup_times exec_flush tag_integer_846 integer_max exec_do*while (integer_dec integer_yank exec_y_when_autoconstructing () integer_flush exec_s () (boolean_frominteger exec_yank) (boolean_dup_times in4 exec_yank boolean_dup_items) -98) integer_flush integer_swap exec_y_when_autoconstructing (boolean_dup_times) in2 exec_stackdepth exec_shove (boolean_xor boolean_shove exec_do*while (integer_yank)))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 53

step: 500
program: (integer_yank exec_noop in4 boolean_not in3 integer_min integer_fromboolean in1 integer_min integer_fromboolean print_integer integer_fromboolean integer_fromboolean boolean_frominteger integer_min integer_max integer_dup_times exec_flush tag_integer_846 integer_max exec_do*while (integer_dec integer_yank exec_y_when_autoconstructing () integer_flush exec_s () (boolean_frominteger exec_yank) (boolean_dup_times in4 exec_yank boolean_dup_items) -98) integer_flush integer_swap exec_y_when_autoconstructing (boolean_dup_times) in2 exec_stackdepth exec_shove (boolean_xor boolean_shove exec_do*while (integer_yank)))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 53

step: 1000
program: (integer_yank exec_noop in4 boolean_not in3 integer_min integer_fromboolean in1 integer_min integer_fromboolean print_integer integer_fromboolean integer_fromboolean boolean_frominteger integer_min integer_max integer_dup_times exec_flush tag_integer_846 integer_max exec_do*while (integer_dec integer_yank exec_y_when_autoconstructing () integer_flush exec_s () (boolean_frominteger exec_yank) (boolean_dup_times in4 exec_yank boolean_dup_items) -98) integer_flush integer_swap exec_y_when_autoconstructing (boolean_dup_times) in2 exec_stackdepth exec_shove (boolean_xor boolean_shove exec_do*while (integer_yank)))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 53

step: 1500
program: (integer_yank exec_noop in4 boolean_not in3 integer_min integer_fromboolean in1 integer_min integer_fromboolean print_integer integer_fromboolean integer_fromboolean boolean_frominteger integer_min integer_max integer_dup_times exec_flush tag_integer_846 integer_max exec_do*while (integer_dec integer_yank exec_y_when_autoconstructing () integer_flush exec_s () (boolean_frominteger exec_yank) (boolean_dup_times in4 exec_yank boolean_dup_items) -98) integer_flush integer_swap exec_y_when_autoconstructing (boolean_dup_times) in2 exec_stackdepth exec_shove (boolean_xor boolean_shove exec_do*while (integer_yank)))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 53

step: 2000
program: (integer_yank exec_noop in4 boolean_not in3 integer_min integer_fromboolean in1 integer_min integer_fromboolean print_integer integer_fromboolean integer_fromboolean boolean_frominteger integer_min integer_max integer_dup_times exec_flush tag_integer_846 integer_max exec_do*while (integer_dec integer_yank exec_y_when_autoconstructing () integer_flush exec_s () (boolean_frominteger exec_yank) (boolean_dup_times in4 exec_yank boolean_dup_items) -98) integer_flush integer_swap exec_y_when_autoconstructing (boolean_dup_times) in2 exec_stackdepth exec_shove (boolean_xor boolean_shove exec_do*while (integer_yank)))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 53

step: 2500
program: (integer_yank exec_noop in4 boolean_not in3 integer_min integer_fromboolean in1 integer_min integer_fromboolean print_integer integer_fromboolean integer_fromboolean boolean_frominteger integer_min integer_max integer_dup_times exec_flush tag_integer_846 integer_max exec_do*while (integer_dec integer_yank exec_y_when_autoconstructing () integer_flush exec_s () (boolean_frominteger exec_yank) (boolean_dup_times in4 exec_yank boolean_dup_items) -98) integer_flush integer_swap exec_y_when_autoconstructing (boolean_dup_times) in2 exec_stackdepth exec_shove (boolean_xor boolean_shove exec_do*while (integer_yank)))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 53

step: 3000
program: (integer_yank exec_noop in4 boolean_not in3 integer_min integer_fromboolean in1 integer_min integer_fromboolean print_integer integer_fromboolean integer_fromboolean boolean_frominteger integer_min integer_max integer_dup_times exec_flush tag_integer_846 integer_max exec_do*while (integer_dec integer_yank exec_y_when_autoconstructing () integer_flush exec_s () (boolean_frominteger exec_yank) (boolean_dup_times in4 exec_yank boolean_dup_items) -98) integer_flush integer_swap exec_y_when_autoconstructing (boolean_dup_times) in2 exec_stackdepth exec_shove (boolean_xor boolean_shove exec_do*while (integer_yank)))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 53

step: 3500
program: (integer_yank exec_noop in4 boolean_not in3 integer_min integer_fromboolean in1 integer_min integer_fromboolean print_integer integer_fromboolean integer_fromboolean boolean_frominteger integer_min integer_max integer_dup_times exec_flush tag_integer_846 integer_max exec_do*while (integer_dec integer_yank exec_y_when_autoconstructing () integer_flush exec_s () (boolean_frominteger exec_yank) (boolean_dup_times in4 exec_yank boolean_dup_items) -98) integer_flush integer_swap exec_y_when_autoconstructing (boolean_dup_times) in2 exec_stackdepth exec_shove (boolean_xor boolean_shove exec_do*while (integer_yank)))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 53

step: 4000
program: (integer_yank exec_noop in4 boolean_not in3 integer_min integer_fromboolean in1 integer_min integer_fromboolean print_integer integer_fromboolean integer_fromboolean boolean_frominteger integer_min integer_max integer_dup_times exec_flush tag_integer_846 integer_max exec_do*while (integer_dec integer_yank exec_y_when_autoconstructing () integer_flush exec_s () (boolean_frominteger exec_yank) (boolean_dup_times in4 exec_yank boolean_dup_items) -98) integer_flush integer_swap exec_y_when_autoconstructing (boolean_dup_times) in2 exec_stackdepth exec_shove (boolean_xor boolean_shove exec_do*while (integer_yank)))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 53

step: 4500
program: (integer_yank exec_noop in4 boolean_not in3 integer_min integer_fromboolean in1 integer_min integer_fromboolean print_integer integer_fromboolean integer_fromboolean boolean_frominteger integer_min integer_max integer_dup_times exec_flush tag_integer_846 integer_max exec_do*while (integer_dec integer_yank exec_y_when_autoconstructing () integer_flush exec_s () (boolean_frominteger exec_yank) (boolean_dup_times in4 exec_yank boolean_dup_items) -98) integer_flush integer_swap exec_y_when_autoconstructing (boolean_dup_times) in2 exec_stackdepth exec_shove (boolean_xor boolean_shove exec_do*while (integer_yank)))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 53

step: 5000
program: (integer_yank exec_noop in4 boolean_not in3 integer_min integer_fromboolean in1 integer_min integer_fromboolean print_integer integer_fromboolean integer_fromboolean boolean_frominteger integer_min integer_max integer_dup_times exec_flush tag_integer_846 integer_max exec_do*while (integer_dec integer_yank exec_y_when_autoconstructing () integer_flush exec_s () (boolean_frominteger exec_yank) (boolean_dup_times in4 exec_yank boolean_dup_items) -98) integer_flush integer_swap exec_y_when_autoconstructing (boolean_dup_times) in2 exec_stackdepth exec_shove (boolean_xor boolean_shove exec_do*while (integer_yank)))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 53

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 227
Test mean error for best: 0.22700
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 1
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 1
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 1
Test Case   16 | Error: 1
Test Case   17 | Error: 1
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 1
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 1
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 1
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 1
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 1
Test Case   65 | Error: 1
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 1
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 1
Test Case   82 | Error: 0
Test Case   83 | Error: 1
Test Case   84 | Error: 0
Test Case   85 | Error: 1
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 1
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 1
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 1
Test Case  201 | Error: 0
Test Case  202 | Error: 1
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 1
Test Case  207 | Error: 0
Test Case  208 | Error: 1
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 1
Test Case  212 | Error: 0
Test Case  213 | Error: 1
Test Case  214 | Error: 1
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 1
Test Case  218 | Error: 1
Test Case  219 | Error: 1
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 1
Test Case  227 | Error: 1
Test Case  228 | Error: 1
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 1
Test Case  238 | Error: 0
Test Case  239 | Error: 1
Test Case  240 | Error: 0
Test Case  241 | Error: 1
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 1
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 1
Test Case  250 | Error: 1
Test Case  251 | Error: 0
Test Case  252 | Error: 1
Test Case  253 | Error: 0
Test Case  254 | Error: 1
Test Case  255 | Error: 1
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 1
Test Case  259 | Error: 1
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 1
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 1
Test Case  268 | Error: 0
Test Case  269 | Error: 1
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 1
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 1
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 1
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 1
Test Case  288 | Error: 1
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 1
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 1
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 1
Test Case  312 | Error: 0
Test Case  313 | Error: 1
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 1
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 1
Test Case  329 | Error: 1
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 1
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 1
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 1
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 1
Test Case  349 | Error: 1
Test Case  350 | Error: 1
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 1
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 1
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 1
Test Case  365 | Error: 0
Test Case  366 | Error: 1
Test Case  367 | Error: 1
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 1
Test Case  379 | Error: 0
Test Case  380 | Error: 1
Test Case  381 | Error: 1
Test Case  382 | Error: 0
Test Case  383 | Error: 1
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 1
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 1
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 1
Test Case  397 | Error: 0
Test Case  398 | Error: 1
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 1
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 1
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 1
Test Case  410 | Error: 0
Test Case  411 | Error: 1
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 1
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 1
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 1
Test Case  426 | Error: 1
Test Case  427 | Error: 1
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 1
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 1
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 1
Test Case  444 | Error: 1
Test Case  445 | Error: 1
Test Case  446 | Error: 1
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 1
Test Case  450 | Error: 0
Test Case  451 | Error: 1
Test Case  452 | Error: 1
Test Case  453 | Error: 1
Test Case  454 | Error: 1
Test Case  455 | Error: 1
Test Case  456 | Error: 1
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 1
Test Case  460 | Error: 1
Test Case  461 | Error: 1
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 1
Test Case  477 | Error: 0
Test Case  478 | Error: 1
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 1
Test Case  483 | Error: 0
Test Case  484 | Error: 1
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 1
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 1
Test Case  496 | Error: 1
Test Case  497 | Error: 1
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 1
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 1
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 1
Test Case  514 | Error: 1
Test Case  515 | Error: 0
Test Case  516 | Error: 1
Test Case  517 | Error: 0
Test Case  518 | Error: 1
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 1
Test Case  523 | Error: 0
Test Case  524 | Error: 1
Test Case  525 | Error: 1
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 1
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 1
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 1
Test Case  549 | Error: 1
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 1
Test Case  557 | Error: 1
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 1
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 1
Test Case  565 | Error: 0
Test Case  566 | Error: 1
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 1
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 1
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 1
Test Case  586 | Error: 1
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 1
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 1
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 1
Test Case  600 | Error: 1
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 1
Test Case  611 | Error: 1
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 1
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 1
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 1
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 1
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 1
Test Case  647 | Error: 1
Test Case  648 | Error: 1
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 1
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 1
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 1
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 1
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 1
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 1
Test Case  676 | Error: 0
Test Case  677 | Error: 1
Test Case  678 | Error: 1
Test Case  679 | Error: 0
Test Case  680 | Error: 1
Test Case  681 | Error: 1
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 1
Test Case  689 | Error: 1
Test Case  690 | Error: 0
Test Case  691 | Error: 1
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 1
Test Case  695 | Error: 0
Test Case  696 | Error: 1
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 1
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 1
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 1
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 1
Test Case  719 | Error: 0
Test Case  720 | Error: 1
Test Case  721 | Error: 0
Test Case  722 | Error: 1
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 1
Test Case  733 | Error: 1
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 1
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 1
Test Case  750 | Error: 1
Test Case  751 | Error: 0
Test Case  752 | Error: 1
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 1
Test Case  759 | Error: 0
Test Case  760 | Error: 1
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 1
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 1
Test Case  771 | Error: 0
Test Case  772 | Error: 1
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 1
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 1
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 1
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 1
Test Case  796 | Error: 0
Test Case  797 | Error: 1
Test Case  798 | Error: 0
Test Case  799 | Error: 1
Test Case  800 | Error: 1
Test Case  801 | Error: 1
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 1
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 1
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 1
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 1
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 1
Test Case  847 | Error: 0
Test Case  848 | Error: 1
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 1
Test Case  853 | Error: 1
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 1
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 1
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 1
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 1
Test Case  881 | Error: 0
Test Case  882 | Error: 1
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 1
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 1
Test Case  898 | Error: 1
Test Case  899 | Error: 1
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 1
Test Case  903 | Error: 1
Test Case  904 | Error: 1
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 1
Test Case  908 | Error: 0
Test Case  909 | Error: 1
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 1
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 1
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 1
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 1
Test Case  934 | Error: 0
Test Case  935 | Error: 1
Test Case  936 | Error: 1
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 1
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 1
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 1
Test Case  950 | Error: 0
Test Case  951 | Error: 1
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 1
Test Case  955 | Error: 0
Test Case  956 | Error: 1
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 1
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 1
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 1
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 1
Test Case  982 | Error: 1
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 1
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 1
Test Case  990 | Error: 1
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 1
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 1
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -75                 | Program output: -75                
Correct output: 56                  | Program output: 56                 
Correct output: 6                   | Program output: 6                  
Correct output: -88                 | Program output: -88                
Correct output: 39                  | Program output: 39                 
Correct output: -88                 | Program output: -88                
Correct output: -87                 | Program output: -87                
Correct output: -86                 | Program output: -86                
Correct output: -96                 | Program output: -96                
Correct output: 22                  | Program output: 22                 
Correct output: 20                  | Program output: 20                 
Correct output: 10                  | Program output: 10                 
Correct output: -22                 | Program output: -22                
Correct output: -54                 | Program output: -54                
Correct output: -23                 | Program output: -23                
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 14                 
Correct output: 36                  | Program output: 36                 
Correct output: 19                  | Program output: 19                 
Correct output: 42                  | Program output: 45                 
Correct output: 25                  | Program output: 25                 
Correct output: 38                  | Program output: 38                 
Correct output: 14                  | Program output: 14                 
Correct output: 2                   | Program output: 2                  
Correct output: 35                  | Program output: 52                 
Correct output: 16                  | Program output: 33                 
Correct output: 10                  | Program output: 10                 
Correct output: 12                  | Program output: 12                 
Correct output: 26                  | Program output: 26                 
Correct output: 57                  | Program output: 63                 
Correct output: 13                  | Program output: 13                 
Correct output: 23                  | Program output: 23                 
Correct output: 2                   | Program output: 2                  
Correct output: 36                  | Program output: 50                 
Correct output: 9                   | Program output: 9                  
Correct output: -98                 | Program output: -31                
Correct output: -53                 | Program output: -53                
Correct output: -72                 | Program output: -72                
Correct output: -94                 | Program output: -94                
Correct output: -53                 | Program output: -41                
Correct output: -88                 | Program output: -88                
Correct output: -27                 | Program output: 58                 
Correct output: -91                 | Program output: -91                
Correct output: -90                 | Program output: -47                
Correct output: -89                 | Program output: 19                 
Correct output: -90                 | Program output: -90                
Correct output: -49                 | Program output: -49                
Correct output: -87                 | Program output: -87                
Correct output: -80                 | Program output: -80                
Correct output: -82                 | Program output: -82                
Correct output: -80                 | Program output: -80                
Correct output: -52                 | Program output: -52                
Correct output: -55                 | Program output: -55                
Correct output: -28                 | Program output: 26                 
Correct output: -88                 | Program output: 34                 
Correct output: -43                 | Program output: -43                
Correct output: -70                 | Program output: -70                
Correct output: 56                  | Program output: 78                 
Correct output: 30                  | Program output: 38                 
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: -21                
Correct output: -72                 | Program output: -72                
Correct output: -78                 | Program output: -48                
Correct output: -50                 | Program output: -47                
Correct output: -72                 | Program output: -72                
Correct output: -82                 | Program output: -82                
Correct output: -55                 | Program output: -55                
Correct output: -100                | Program output: -100               
Correct output: -68                 | Program output: -48                
Correct output: -20                 | Program output: 13                 
Correct output: -44                 | Program output: -44                
Correct output: 5                   | Program output: 5                  
Correct output: -71                 | Program output: -71                
Correct output: -20                 | Program output: 44                 
Correct output: -35                 | Program output: -35                
Correct output: -87                 | Program output: -87                
Correct output: -63                 | Program output: -63                
Correct output: -23                 | Program output: -23                
Correct output: -71                 | Program output: -71                
Correct output: -64                 | Program output: -64                
Correct output: -52                 | Program output: -52                
Correct output: -92                 | Program output: -92                
Correct output: -35                 | Program output: -35                
Correct output: -78                 | Program output: -78                
Correct output: -80                 | Program output: -80                
Correct output: -54                 | Program output: -54                
Correct output: -71                 | Program output: -71                
Correct output: -87                 | Program output: -87                
Correct output: -85                 | Program output: -85                
Correct output: -58                 | Program output: -58                
Correct output: -85                 | Program output: -85                
Correct output: -69                 | Program output: -69                
Correct output: -30                 | Program output: -19                
Correct output: -85                 | Program output: -85                
Correct output: -94                 | Program output: -94                
;;******************************
