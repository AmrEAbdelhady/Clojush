Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 3000 :genetic-operator-probabilities {:uniform-addition-and-deletion,1.0} :uniform-addition-and-deletion-rate 0.09
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:uniform-addition-and-deletion 1.0}
max-error = 1
max-generations = 3000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-9 -9 -9 -89] -89] [[78 78 63 78] 63] [[-39 -98 -39 -39] -98] [[81 44 44 44] 44] [[50 50 76 50] 50] [[-65 -65 -65 -47] -65] [[10 10 10 -27] -27] [[-10 -10 -10 -72] -72] [[97 97 97 -25] -25] [[89 89 -93 89] -93] [(95 95 95 95) 95] [(-79 -79 -79 -79) -79] [(99 99 99 99) 99] [(-97 -97 -97 -97) -97] [(-55 -55 -55 -55) -55] [(15 54 0 35) 0] [(26 29 59 24) 24] [(94 76 26 59) 26] [(61 86 24 30) 24] [(95 91 25 8) 8] [(94 34 74 19) 19] [(39 51 36 8) 8] [(40 7 36 51) 7] [(43 27 31 23) 23] [(85 48 7 96) 7] [(3 16 83 7) 3] [(33 8 56 44) 8] [(50 49 75 5) 5] [(18 52 72 77) 18] [(96 75 13 39) 13] [(83 77 49 44) 44] [(58 62 83 16) 16] [(100 91 65 42) 42] [(74 58 5 2) 2] [(2 80 77 45) 2] [(31 14 -55 -10) -55] [(-85 -64 88 -23) -85] [(13 -8 -16 43) -16] [(-35 3 99 -75) -75] [(-59 -51 40 47) -59] [(-7 -42 -99 -86) -99] [(-29 -91 41 45) -91] [(34 -74 -46 -35) -74] [(2 48 -10 -9) -10] [(56 -4 -31 90) -31] [(-83 15 44 -88) -88] [(69 84 -28 20) -28] [(52 -24 -59 34) -59] [(-49 -58 43 60) -58] [(-47 76 44 -59) -59] [(27 -99 -50 45) -99] [(37 -17 -79 90) -79] [(64 -77 -14 -54) -77] [(-34 82 -44 55) -44] [(-15 60 14 51) -15] [(-34 -24 67 78) -34] [(13 -10 55 -93) -93] [(31 -98 -61 36) -98] [(-39 73 34 80) -39] [(17 33 -63 -67) -67] [(-34 -27 -23 -56) -56] [(11 94 93 62) 11] [(-92 24 50 5) -92] [(23 -7 -45 53) -45] [(24 25 53 54) 24] [(-100 2 -69 77) -100] [(1 -19 -36 -11) -36] [(49 67 -13 -62) -62] [(73 81 91 -79) -79] [(50 -25 -48 66) -48] [(27 99 -9 -22) -22] [(42 28 -62 58) -62] [(-54 -98 -63 -68) -98] [(51 -73 83 58) -73] [(-34 24 -50 37) -50] [(-40 0 98 37) -40] [(-25 -73 -23 -76) -76] [(0 -54 -28 -19) -54] [(-50 -54 -25 94) -54] [(-70 -64 -31 87) -70] [(62 -36 -14 -12) -36] [(36 -70 83 -20) -70] [(53 68 37 -42) -42] [(57 -37 -27 -34) -37] [(27 75 1 0) 0] [(3 -43 -19 -55) -55] [(44 10 -11 58) -11] [(-78 -81 67 -59) -81] [(-96 14 -94 -63) -96] [(-99 -55 24 78) -99] [(-83 -82 -49 38) -83] [(-35 -45 32 75) -45] [(-28 -55 -75 24) -75] [(-92 86 -21 -70) -92] [(-45 54 -35 49) -45])
uniform-addition-and-deletion-rate = 0.09
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[-9 -9 -9 -89] -89]
Train Case:   6 | Input/Output: [[78 78 63 78] 63]
Train Case:   7 | Input/Output: [[-39 -98 -39 -39] -98]
Train Case:   8 | Input/Output: [[81 44 44 44] 44]
Train Case:   9 | Input/Output: [[50 50 76 50] 50]
Train Case:  10 | Input/Output: [[-65 -65 -65 -47] -65]
Train Case:  11 | Input/Output: [[10 10 10 -27] -27]
Train Case:  12 | Input/Output: [[-10 -10 -10 -72] -72]
Train Case:  13 | Input/Output: [[97 97 97 -25] -25]
Train Case:  14 | Input/Output: [[89 89 -93 89] -93]
Train Case:  15 | Input/Output: [(95 95 95 95) 95]
Train Case:  16 | Input/Output: [(-79 -79 -79 -79) -79]
Train Case:  17 | Input/Output: [(99 99 99 99) 99]
Train Case:  18 | Input/Output: [(-97 -97 -97 -97) -97]
Train Case:  19 | Input/Output: [(-55 -55 -55 -55) -55]
Train Case:  20 | Input/Output: [(15 54 0 35) 0]
Train Case:  21 | Input/Output: [(26 29 59 24) 24]
Train Case:  22 | Input/Output: [(94 76 26 59) 26]
Train Case:  23 | Input/Output: [(61 86 24 30) 24]
Train Case:  24 | Input/Output: [(95 91 25 8) 8]
Train Case:  25 | Input/Output: [(94 34 74 19) 19]
Train Case:  26 | Input/Output: [(39 51 36 8) 8]
Train Case:  27 | Input/Output: [(40 7 36 51) 7]
Train Case:  28 | Input/Output: [(43 27 31 23) 23]
Train Case:  29 | Input/Output: [(85 48 7 96) 7]
Train Case:  30 | Input/Output: [(3 16 83 7) 3]
Train Case:  31 | Input/Output: [(33 8 56 44) 8]
Train Case:  32 | Input/Output: [(50 49 75 5) 5]
Train Case:  33 | Input/Output: [(18 52 72 77) 18]
Train Case:  34 | Input/Output: [(96 75 13 39) 13]
Train Case:  35 | Input/Output: [(83 77 49 44) 44]
Train Case:  36 | Input/Output: [(58 62 83 16) 16]
Train Case:  37 | Input/Output: [(100 91 65 42) 42]
Train Case:  38 | Input/Output: [(74 58 5 2) 2]
Train Case:  39 | Input/Output: [(2 80 77 45) 2]
Train Case:  40 | Input/Output: [(31 14 -55 -10) -55]
Train Case:  41 | Input/Output: [(-85 -64 88 -23) -85]
Train Case:  42 | Input/Output: [(13 -8 -16 43) -16]
Train Case:  43 | Input/Output: [(-35 3 99 -75) -75]
Train Case:  44 | Input/Output: [(-59 -51 40 47) -59]
Train Case:  45 | Input/Output: [(-7 -42 -99 -86) -99]
Train Case:  46 | Input/Output: [(-29 -91 41 45) -91]
Train Case:  47 | Input/Output: [(34 -74 -46 -35) -74]
Train Case:  48 | Input/Output: [(2 48 -10 -9) -10]
Train Case:  49 | Input/Output: [(56 -4 -31 90) -31]
Train Case:  50 | Input/Output: [(-83 15 44 -88) -88]
Train Case:  51 | Input/Output: [(69 84 -28 20) -28]
Train Case:  52 | Input/Output: [(52 -24 -59 34) -59]
Train Case:  53 | Input/Output: [(-49 -58 43 60) -58]
Train Case:  54 | Input/Output: [(-47 76 44 -59) -59]
Train Case:  55 | Input/Output: [(27 -99 -50 45) -99]
Train Case:  56 | Input/Output: [(37 -17 -79 90) -79]
Train Case:  57 | Input/Output: [(64 -77 -14 -54) -77]
Train Case:  58 | Input/Output: [(-34 82 -44 55) -44]
Train Case:  59 | Input/Output: [(-15 60 14 51) -15]
Train Case:  60 | Input/Output: [(-34 -24 67 78) -34]
Train Case:  61 | Input/Output: [(13 -10 55 -93) -93]
Train Case:  62 | Input/Output: [(31 -98 -61 36) -98]
Train Case:  63 | Input/Output: [(-39 73 34 80) -39]
Train Case:  64 | Input/Output: [(17 33 -63 -67) -67]
Train Case:  65 | Input/Output: [(-34 -27 -23 -56) -56]
Train Case:  66 | Input/Output: [(11 94 93 62) 11]
Train Case:  67 | Input/Output: [(-92 24 50 5) -92]
Train Case:  68 | Input/Output: [(23 -7 -45 53) -45]
Train Case:  69 | Input/Output: [(24 25 53 54) 24]
Train Case:  70 | Input/Output: [(-100 2 -69 77) -100]
Train Case:  71 | Input/Output: [(1 -19 -36 -11) -36]
Train Case:  72 | Input/Output: [(49 67 -13 -62) -62]
Train Case:  73 | Input/Output: [(73 81 91 -79) -79]
Train Case:  74 | Input/Output: [(50 -25 -48 66) -48]
Train Case:  75 | Input/Output: [(27 99 -9 -22) -22]
Train Case:  76 | Input/Output: [(42 28 -62 58) -62]
Train Case:  77 | Input/Output: [(-54 -98 -63 -68) -98]
Train Case:  78 | Input/Output: [(51 -73 83 58) -73]
Train Case:  79 | Input/Output: [(-34 24 -50 37) -50]
Train Case:  80 | Input/Output: [(-40 0 98 37) -40]
Train Case:  81 | Input/Output: [(-25 -73 -23 -76) -76]
Train Case:  82 | Input/Output: [(0 -54 -28 -19) -54]
Train Case:  83 | Input/Output: [(-50 -54 -25 94) -54]
Train Case:  84 | Input/Output: [(-70 -64 -31 87) -70]
Train Case:  85 | Input/Output: [(62 -36 -14 -12) -36]
Train Case:  86 | Input/Output: [(36 -70 83 -20) -70]
Train Case:  87 | Input/Output: [(53 68 37 -42) -42]
Train Case:  88 | Input/Output: [(57 -37 -27 -34) -37]
Train Case:  89 | Input/Output: [(27 75 1 0) 0]
Train Case:  90 | Input/Output: [(3 -43 -19 -55) -55]
Train Case:  91 | Input/Output: [(44 10 -11 58) -11]
Train Case:  92 | Input/Output: [(-78 -81 67 -59) -81]
Train Case:  93 | Input/Output: [(-96 14 -94 -63) -96]
Train Case:  94 | Input/Output: [(-99 -55 24 78) -99]
Train Case:  95 | Input/Output: [(-83 -82 -49 38) -83]
Train Case:  96 | Input/Output: [(-35 -45 32 75) -45]
Train Case:  97 | Input/Output: [(-28 -55 -75 24) -75]
Train Case:  98 | Input/Output: [(-92 86 -21 -70) -92]
Train Case:  99 | Input/Output: [(-45 54 -35 49) -45]
Test Case:   0 | Input/Output: [[19 -60 -60 -60] -60]
Test Case:   1 | Input/Output: [[95 73 95 95] 73]
Test Case:   2 | Input/Output: [[-91 -80 -91 -91] -91]
Test Case:   3 | Input/Output: [[29 29 29 -80] -80]
Test Case:   4 | Input/Output: [[-79 77 77 77] -79]
Test Case:   5 | Input/Output: [[82 82 -94 82] -94]
Test Case:   6 | Input/Output: [[-10 -10 -10 68] -10]
Test Case:   7 | Input/Output: [[74 74 74 8] 8]
Test Case:   8 | Input/Output: [[-56 28 28 28] -56]
Test Case:   9 | Input/Output: [[98 -100 98 98] -100]
Test Case:  10 | Input/Output: [[4 53 53 53] 4]
Test Case:  11 | Input/Output: [[-13 -13 -13 -69] -69]
Test Case:  12 | Input/Output: [[-7 -7 63 -7] -7]
Test Case:  13 | Input/Output: [[-99 52 -99 -99] -99]
Test Case:  14 | Input/Output: [[54 -89 -89 -89] -89]
Test Case:  15 | Input/Output: [[-93 -36 -93 -93] -93]
Test Case:  16 | Input/Output: [[-74 -74 1 -74] -74]
Test Case:  17 | Input/Output: [[95 95 -43 95] -43]
Test Case:  18 | Input/Output: [[34 34 8 34] 8]
Test Case:  19 | Input/Output: [[48 48 48 35] 35]
Test Case:  20 | Input/Output: [[-18 -18 36 -18] -18]
Test Case:  21 | Input/Output: [[-78 -78 -76 -78] -78]
Test Case:  22 | Input/Output: [[100 -3 100 100] -3]
Test Case:  23 | Input/Output: [[-78 -78 -78 89] -78]
Test Case:  24 | Input/Output: [[51 23 23 23] 23]
Test Case:  25 | Input/Output: [[-8 2 2 2] -8]
Test Case:  26 | Input/Output: [[-78 -58 -58 -58] -78]
Test Case:  27 | Input/Output: [[26 26 79 26] 26]
Test Case:  28 | Input/Output: [[-38 -38 54 -38] -38]
Test Case:  29 | Input/Output: [[61 94 61 61] 61]
Test Case:  30 | Input/Output: [[-30 -30 -30 80] -30]
Test Case:  31 | Input/Output: [[78 78 61 78] 61]
Test Case:  32 | Input/Output: [[-53 -38 -53 -53] -53]
Test Case:  33 | Input/Output: [[-58 -58 -58 -63] -63]
Test Case:  34 | Input/Output: [[58 58 3 58] 3]
Test Case:  35 | Input/Output: [[-4 97 -4 -4] -4]
Test Case:  36 | Input/Output: [[-85 -22 -85 -85] -85]
Test Case:  37 | Input/Output: [[-92 -92 -60 -92] -92]
Test Case:  38 | Input/Output: [[8 -37 -37 -37] -37]
Test Case:  39 | Input/Output: [[76 -65 -65 -65] -65]
Test Case:  40 | Input/Output: [[6 -56 -56 -56] -56]
Test Case:  41 | Input/Output: [[-59 -59 -59 -96] -96]
Test Case:  42 | Input/Output: [[-32 3 -32 -32] -32]
Test Case:  43 | Input/Output: [[41 -50 41 41] -50]
Test Case:  44 | Input/Output: [[-6 -6 -6 -40] -40]
Test Case:  45 | Input/Output: [[75 -11 -11 -11] -11]
Test Case:  46 | Input/Output: [[21 67 21 21] 21]
Test Case:  47 | Input/Output: [[31 31 10 31] 10]
Test Case:  48 | Input/Output: [[-68 -64 -68 -68] -68]
Test Case:  49 | Input/Output: [[-63 -63 -63 56] -63]
Test Case:  50 | Input/Output: [[-68 -68 -68 -58] -68]
Test Case:  51 | Input/Output: [[8 -68 8 8] -68]
Test Case:  52 | Input/Output: [[-56 -56 73 -56] -56]
Test Case:  53 | Input/Output: [[84 84 -17 84] -17]
Test Case:  54 | Input/Output: [[-56 -56 39 -56] -56]
Test Case:  55 | Input/Output: [[90 90 90 42] 42]
Test Case:  56 | Input/Output: [[-17 -17 72 -17] -17]
Test Case:  57 | Input/Output: [[-48 9 -48 -48] -48]
Test Case:  58 | Input/Output: [[44 44 -72 44] -72]
Test Case:  59 | Input/Output: [[-71 86 -71 -71] -71]
Test Case:  60 | Input/Output: [[37 -16 37 37] -16]
Test Case:  61 | Input/Output: [[82 82 70 82] 70]
Test Case:  62 | Input/Output: [[96 96 25 96] 25]
Test Case:  63 | Input/Output: [[94 -36 -36 -36] -36]
Test Case:  64 | Input/Output: [[-73 -40 -40 -40] -73]
Test Case:  65 | Input/Output: [[29 -84 29 29] -84]
Test Case:  66 | Input/Output: [[-13 -13 -44 -13] -44]
Test Case:  67 | Input/Output: [[-22 -22 -22 99] -22]
Test Case:  68 | Input/Output: [[4 -61 -61 -61] -61]
Test Case:  69 | Input/Output: [[95 -22 95 95] -22]
Test Case:  70 | Input/Output: [[35 -43 -43 -43] -43]
Test Case:  71 | Input/Output: [[28 -55 -55 -55] -55]
Test Case:  72 | Input/Output: [[-7 -7 -7 66] -7]
Test Case:  73 | Input/Output: [[-26 37 37 37] -26]
Test Case:  74 | Input/Output: [[36 36 36 -3] -3]
Test Case:  75 | Input/Output: [[20 -97 -97 -97] -97]
Test Case:  76 | Input/Output: [[-19 -19 44 -19] -19]
Test Case:  77 | Input/Output: [[-46 -78 -46 -46] -78]
Test Case:  78 | Input/Output: [[-28 -51 -28 -28] -51]
Test Case:  79 | Input/Output: [[-13 -67 -67 -67] -67]
Test Case:  80 | Input/Output: [[-95 -95 -79 -95] -95]
Test Case:  81 | Input/Output: [[15 15 15 -21] -21]
Test Case:  82 | Input/Output: [[-29 -29 7 -29] -29]
Test Case:  83 | Input/Output: [[-94 -94 -94 50] -94]
Test Case:  84 | Input/Output: [[55 79 79 79] 55]
Test Case:  85 | Input/Output: [[-81 -66 -81 -81] -81]
Test Case:  86 | Input/Output: [[-72 -72 -72 -34] -72]
Test Case:  87 | Input/Output: [[96 96 48 96] 48]
Test Case:  88 | Input/Output: [[52 52 52 92] 52]
Test Case:  89 | Input/Output: [[26 24 24 24] 24]
Test Case:  90 | Input/Output: [[-14 -61 -61 -61] -61]
Test Case:  91 | Input/Output: [[-81 -65 -81 -81] -81]
Test Case:  92 | Input/Output: [[-44 -29 -29 -29] -44]
Test Case:  93 | Input/Output: [[-76 -76 89 -76] -76]
Test Case:  94 | Input/Output: [[-3 -83 -83 -83] -83]
Test Case:  95 | Input/Output: [[-84 -84 62 -84] -84]
Test Case:  96 | Input/Output: [[74 21 21 21] 21]
Test Case:  97 | Input/Output: [[39 -8 -8 -8] -8]
Test Case:  98 | Input/Output: [[89 89 89 89] 89]
Test Case:  99 | Input/Output: [[-30 -26 -26 -26] -30]
Test Case: 100 | Input/Output: [(-67 -67 -67 -67) -67]
Test Case: 101 | Input/Output: [(-97 -97 -97 -97) -97]
Test Case: 102 | Input/Output: [(-78 -78 -78 -78) -78]
Test Case: 103 | Input/Output: [(-81 -81 -81 -81) -81]
Test Case: 104 | Input/Output: [(98 98 98 98) 98]
Test Case: 105 | Input/Output: [(-1 -1 -1 -1) -1]
Test Case: 106 | Input/Output: [(-47 -47 -47 -47) -47]
Test Case: 107 | Input/Output: [(90 90 90 90) 90]
Test Case: 108 | Input/Output: [(-78 -78 -78 -78) -78]
Test Case: 109 | Input/Output: [(24 24 24 24) 24]
Test Case: 110 | Input/Output: [(35 35 35 35) 35]
Test Case: 111 | Input/Output: [(-1 -1 -1 -1) -1]
Test Case: 112 | Input/Output: [(35 35 35 35) 35]
Test Case: 113 | Input/Output: [(58 58 58 58) 58]
Test Case: 114 | Input/Output: [(63 63 63 63) 63]
Test Case: 115 | Input/Output: [(-47 -47 -47 -47) -47]
Test Case: 116 | Input/Output: [(25 25 25 25) 25]
Test Case: 117 | Input/Output: [(-28 -28 -28 -28) -28]
Test Case: 118 | Input/Output: [(80 80 80 80) 80]
Test Case: 119 | Input/Output: [(43 43 43 43) 43]
Test Case: 120 | Input/Output: [(-99 -99 -99 -99) -99]
Test Case: 121 | Input/Output: [(-13 -13 -13 -13) -13]
Test Case: 122 | Input/Output: [(60 60 60 60) 60]
Test Case: 123 | Input/Output: [(-44 -44 -44 -44) -44]
Test Case: 124 | Input/Output: [(26 26 26 26) 26]
Test Case: 125 | Input/Output: [(-14 -14 -14 -14) -14]
Test Case: 126 | Input/Output: [(-61 -61 -61 -61) -61]
Test Case: 127 | Input/Output: [(46 46 46 46) 46]
Test Case: 128 | Input/Output: [(-93 -93 -93 -93) -93]
Test Case: 129 | Input/Output: [(-16 -16 -16 -16) -16]
Test Case: 130 | Input/Output: [(-35 -35 -35 -35) -35]
Test Case: 131 | Input/Output: [(17 17 17 17) 17]
Test Case: 132 | Input/Output: [(34 34 34 34) 34]
Test Case: 133 | Input/Output: [(-29 -29 -29 -29) -29]
Test Case: 134 | Input/Output: [(-72 -72 -72 -72) -72]
Test Case: 135 | Input/Output: [(83 83 83 83) 83]
Test Case: 136 | Input/Output: [(-47 -47 -47 -47) -47]
Test Case: 137 | Input/Output: [(74 74 74 74) 74]
Test Case: 138 | Input/Output: [(86 86 86 86) 86]
Test Case: 139 | Input/Output: [(-11 -11 -11 -11) -11]
Test Case: 140 | Input/Output: [(54 54 54 54) 54]
Test Case: 141 | Input/Output: [(34 34 34 34) 34]
Test Case: 142 | Input/Output: [(63 63 63 63) 63]
Test Case: 143 | Input/Output: [(-50 -50 -50 -50) -50]
Test Case: 144 | Input/Output: [(4 4 4 4) 4]
Test Case: 145 | Input/Output: [(44 44 44 44) 44]
Test Case: 146 | Input/Output: [(16 16 16 16) 16]
Test Case: 147 | Input/Output: [(-61 -61 -61 -61) -61]
Test Case: 148 | Input/Output: [(32 32 32 32) 32]
Test Case: 149 | Input/Output: [(52 52 52 52) 52]
Test Case: 150 | Input/Output: [(-72 -72 -72 -72) -72]
Test Case: 151 | Input/Output: [(23 23 23 23) 23]
Test Case: 152 | Input/Output: [(51 51 51 51) 51]
Test Case: 153 | Input/Output: [(13 13 13 13) 13]
Test Case: 154 | Input/Output: [(62 62 62 62) 62]
Test Case: 155 | Input/Output: [(96 96 96 96) 96]
Test Case: 156 | Input/Output: [(63 63 63 63) 63]
Test Case: 157 | Input/Output: [(-70 -70 -70 -70) -70]
Test Case: 158 | Input/Output: [(11 11 11 11) 11]
Test Case: 159 | Input/Output: [(86 86 86 86) 86]
Test Case: 160 | Input/Output: [(29 29 29 29) 29]
Test Case: 161 | Input/Output: [(97 97 97 97) 97]
Test Case: 162 | Input/Output: [(21 21 21 21) 21]
Test Case: 163 | Input/Output: [(-7 -7 -7 -7) -7]
Test Case: 164 | Input/Output: [(-57 -57 -57 -57) -57]
Test Case: 165 | Input/Output: [(-68 -68 -68 -68) -68]
Test Case: 166 | Input/Output: [(17 17 17 17) 17]
Test Case: 167 | Input/Output: [(41 41 41 41) 41]
Test Case: 168 | Input/Output: [(-44 -44 -44 -44) -44]
Test Case: 169 | Input/Output: [(88 88 88 88) 88]
Test Case: 170 | Input/Output: [(-87 -87 -87 -87) -87]
Test Case: 171 | Input/Output: [(-6 -6 -6 -6) -6]
Test Case: 172 | Input/Output: [(65 65 65 65) 65]
Test Case: 173 | Input/Output: [(-53 -53 -53 -53) -53]
Test Case: 174 | Input/Output: [(51 51 51 51) 51]
Test Case: 175 | Input/Output: [(6 6 6 6) 6]
Test Case: 176 | Input/Output: [(58 58 58 58) 58]
Test Case: 177 | Input/Output: [(-96 -96 -96 -96) -96]
Test Case: 178 | Input/Output: [(96 96 96 96) 96]
Test Case: 179 | Input/Output: [(-5 -5 -5 -5) -5]
Test Case: 180 | Input/Output: [(44 44 44 44) 44]
Test Case: 181 | Input/Output: [(4 4 4 4) 4]
Test Case: 182 | Input/Output: [(53 53 53 53) 53]
Test Case: 183 | Input/Output: [(-23 -23 -23 -23) -23]
Test Case: 184 | Input/Output: [(-83 -83 -83 -83) -83]
Test Case: 185 | Input/Output: [(12 12 12 12) 12]
Test Case: 186 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 187 | Input/Output: [(92 92 92 92) 92]
Test Case: 188 | Input/Output: [(84 84 84 84) 84]
Test Case: 189 | Input/Output: [(-98 -98 -98 -98) -98]
Test Case: 190 | Input/Output: [(27 27 27 27) 27]
Test Case: 191 | Input/Output: [(74 74 74 74) 74]
Test Case: 192 | Input/Output: [(41 41 41 41) 41]
Test Case: 193 | Input/Output: [(53 53 53 53) 53]
Test Case: 194 | Input/Output: [(50 50 50 50) 50]
Test Case: 195 | Input/Output: [(-75 -75 -75 -75) -75]
Test Case: 196 | Input/Output: [(-8 -8 -8 -8) -8]
Test Case: 197 | Input/Output: [(12 12 12 12) 12]
Test Case: 198 | Input/Output: [(-6 -6 -6 -6) -6]
Test Case: 199 | Input/Output: [(-60 -60 -60 -60) -60]
Test Case: 200 | Input/Output: [(52 9 75 49) 9]
Test Case: 201 | Input/Output: [(98 55 75 0) 0]
Test Case: 202 | Input/Output: [(10 38 84 92) 10]
Test Case: 203 | Input/Output: [(6 99 18 90) 6]
Test Case: 204 | Input/Output: [(78 90 69 60) 60]
Test Case: 205 | Input/Output: [(9 33 48 75) 9]
Test Case: 206 | Input/Output: [(77 51 31 85) 31]
Test Case: 207 | Input/Output: [(17 67 43 61) 17]
Test Case: 208 | Input/Output: [(30 46 94 4) 4]
Test Case: 209 | Input/Output: [(3 81 98 60) 3]
Test Case: 210 | Input/Output: [(89 27 45 48) 27]
Test Case: 211 | Input/Output: [(48 69 86 82) 48]
Test Case: 212 | Input/Output: [(17 48 16 74) 16]
Test Case: 213 | Input/Output: [(1 31 91 95) 1]
Test Case: 214 | Input/Output: [(84 25 91 54) 25]
Test Case: 215 | Input/Output: [(12 31 1 24) 1]
Test Case: 216 | Input/Output: [(70 96 11 17) 11]
Test Case: 217 | Input/Output: [(12 85 64 70) 12]
Test Case: 218 | Input/Output: [(70 100 38 84) 38]
Test Case: 219 | Input/Output: [(68 42 54 27) 27]
Test Case: 220 | Input/Output: [(78 27 61 32) 27]
Test Case: 221 | Input/Output: [(21 32 93 5) 5]
Test Case: 222 | Input/Output: [(41 1 37 95) 1]
Test Case: 223 | Input/Output: [(75 31 46 76) 31]
Test Case: 224 | Input/Output: [(37 99 3 28) 3]
Test Case: 225 | Input/Output: [(80 89 69 45) 45]
Test Case: 226 | Input/Output: [(47 73 88 23) 23]
Test Case: 227 | Input/Output: [(15 50 68 36) 15]
Test Case: 228 | Input/Output: [(30 36 76 40) 30]
Test Case: 229 | Input/Output: [(5 17 72 16) 5]
Test Case: 230 | Input/Output: [(50 91 42 76) 42]
Test Case: 231 | Input/Output: [(51 25 53 48) 25]
Test Case: 232 | Input/Output: [(93 70 70 22) 22]
Test Case: 233 | Input/Output: [(7 69 9 17) 7]
Test Case: 234 | Input/Output: [(90 44 19 78) 19]
Test Case: 235 | Input/Output: [(39 18 90 11) 11]
Test Case: 236 | Input/Output: [(80 65 4 63) 4]
Test Case: 237 | Input/Output: [(3 78 38 62) 3]
Test Case: 238 | Input/Output: [(40 2 99 26) 2]
Test Case: 239 | Input/Output: [(43 57 0 82) 0]
Test Case: 240 | Input/Output: [(84 67 1 34) 1]
Test Case: 241 | Input/Output: [(80 59 64 43) 43]
Test Case: 242 | Input/Output: [(88 55 29 59) 29]
Test Case: 243 | Input/Output: [(88 33 13 61) 13]
Test Case: 244 | Input/Output: [(71 100 50 22) 22]
Test Case: 245 | Input/Output: [(83 27 70 15) 15]
Test Case: 246 | Input/Output: [(23 74 20 81) 20]
Test Case: 247 | Input/Output: [(74 30 15 67) 15]
Test Case: 248 | Input/Output: [(15 11 49 52) 11]
Test Case: 249 | Input/Output: [(36 32 11 67) 11]
Test Case: 250 | Input/Output: [(93 90 88 54) 54]
Test Case: 251 | Input/Output: [(72 58 52 28) 28]
Test Case: 252 | Input/Output: [(82 6 11 41) 6]
Test Case: 253 | Input/Output: [(44 40 22 94) 22]
Test Case: 254 | Input/Output: [(68 24 95 60) 24]
Test Case: 255 | Input/Output: [(28 56 47 3) 3]
Test Case: 256 | Input/Output: [(15 34 12 13) 12]
Test Case: 257 | Input/Output: [(19 67 43 61) 19]
Test Case: 258 | Input/Output: [(41 27 41 66) 27]
Test Case: 259 | Input/Output: [(38 5 75 24) 5]
Test Case: 260 | Input/Output: [(58 2 21 22) 2]
Test Case: 261 | Input/Output: [(65 12 41 2) 2]
Test Case: 262 | Input/Output: [(52 56 68 34) 34]
Test Case: 263 | Input/Output: [(40 76 28 46) 28]
Test Case: 264 | Input/Output: [(65 50 86 63) 50]
Test Case: 265 | Input/Output: [(32 22 63 40) 22]
Test Case: 266 | Input/Output: [(40 11 92 2) 2]
Test Case: 267 | Input/Output: [(35 35 85 99) 35]
Test Case: 268 | Input/Output: [(7 62 31 74) 7]
Test Case: 269 | Input/Output: [(56 44 91 38) 38]
Test Case: 270 | Input/Output: [(15 61 31 4) 4]
Test Case: 271 | Input/Output: [(18 42 84 1) 1]
Test Case: 272 | Input/Output: [(87 35 61 11) 11]
Test Case: 273 | Input/Output: [(33 71 58 63) 33]
Test Case: 274 | Input/Output: [(21 79 81 69) 21]
Test Case: 275 | Input/Output: [(24 84 17 44) 17]
Test Case: 276 | Input/Output: [(32 51 63 51) 32]
Test Case: 277 | Input/Output: [(22 48 93 66) 22]
Test Case: 278 | Input/Output: [(37 71 7 32) 7]
Test Case: 279 | Input/Output: [(63 55 37 54) 37]
Test Case: 280 | Input/Output: [(95 29 27 38) 27]
Test Case: 281 | Input/Output: [(33 7 7 83) 7]
Test Case: 282 | Input/Output: [(71 81 85 37) 37]
Test Case: 283 | Input/Output: [(62 70 43 81) 43]
Test Case: 284 | Input/Output: [(38 29 69 98) 29]
Test Case: 285 | Input/Output: [(55 83 19 12) 12]
Test Case: 286 | Input/Output: [(86 73 66 25) 25]
Test Case: 287 | Input/Output: [(92 60 42 5) 5]
Test Case: 288 | Input/Output: [(75 41 41 93) 41]
Test Case: 289 | Input/Output: [(74 17 16 16) 16]
Test Case: 290 | Input/Output: [(45 97 68 74) 45]
Test Case: 291 | Input/Output: [(33 8 98 90) 8]
Test Case: 292 | Input/Output: [(82 73 10 53) 10]
Test Case: 293 | Input/Output: [(30 59 69 96) 30]
Test Case: 294 | Input/Output: [(72 1 47 41) 1]
Test Case: 295 | Input/Output: [(24 16 55 19) 16]
Test Case: 296 | Input/Output: [(52 62 76 86) 52]
Test Case: 297 | Input/Output: [(76 100 46 71) 46]
Test Case: 298 | Input/Output: [(49 7 100 72) 7]
Test Case: 299 | Input/Output: [(71 48 3 100) 3]
Test Case: 300 | Input/Output: [(27 74 99 7) 7]
Test Case: 301 | Input/Output: [(80 10 23 52) 10]
Test Case: 302 | Input/Output: [(98 67 59 56) 56]
Test Case: 303 | Input/Output: [(5 57 55 18) 5]
Test Case: 304 | Input/Output: [(0 66 63 84) 0]
Test Case: 305 | Input/Output: [(98 25 32 13) 13]
Test Case: 306 | Input/Output: [(45 21 68 98) 21]
Test Case: 307 | Input/Output: [(37 3 12 85) 3]
Test Case: 308 | Input/Output: [(73 15 72 92) 15]
Test Case: 309 | Input/Output: [(57 38 98 86) 38]
Test Case: 310 | Input/Output: [(15 88 20 66) 15]
Test Case: 311 | Input/Output: [(29 61 82 87) 29]
Test Case: 312 | Input/Output: [(0 47 47 81) 0]
Test Case: 313 | Input/Output: [(72 65 74 94) 65]
Test Case: 314 | Input/Output: [(7 78 75 26) 7]
Test Case: 315 | Input/Output: [(13 64 49 37) 13]
Test Case: 316 | Input/Output: [(5 52 57 45) 5]
Test Case: 317 | Input/Output: [(48 59 24 43) 24]
Test Case: 318 | Input/Output: [(73 96 25 21) 21]
Test Case: 319 | Input/Output: [(78 8 4 57) 4]
Test Case: 320 | Input/Output: [(23 39 27 16) 16]
Test Case: 321 | Input/Output: [(34 44 79 10) 10]
Test Case: 322 | Input/Output: [(76 67 94 53) 53]
Test Case: 323 | Input/Output: [(13 27 37 53) 13]
Test Case: 324 | Input/Output: [(31 12 61 66) 12]
Test Case: 325 | Input/Output: [(89 32 90 73) 32]
Test Case: 326 | Input/Output: [(87 78 83 40) 40]
Test Case: 327 | Input/Output: [(70 18 64 46) 18]
Test Case: 328 | Input/Output: [(13 22 80 82) 13]
Test Case: 329 | Input/Output: [(43 92 79 6) 6]
Test Case: 330 | Input/Output: [(90 70 24 93) 24]
Test Case: 331 | Input/Output: [(71 20 49 27) 20]
Test Case: 332 | Input/Output: [(2 15 17 41) 2]
Test Case: 333 | Input/Output: [(54 84 18 70) 18]
Test Case: 334 | Input/Output: [(85 65 95 25) 25]
Test Case: 335 | Input/Output: [(68 92 4 50) 4]
Test Case: 336 | Input/Output: [(51 86 68 79) 51]
Test Case: 337 | Input/Output: [(97 88 26 32) 26]
Test Case: 338 | Input/Output: [(5 96 40 57) 5]
Test Case: 339 | Input/Output: [(80 0 37 56) 0]
Test Case: 340 | Input/Output: [(73 3 6 24) 3]
Test Case: 341 | Input/Output: [(16 7 58 97) 7]
Test Case: 342 | Input/Output: [(27 82 10 53) 10]
Test Case: 343 | Input/Output: [(34 56 4 54) 4]
Test Case: 344 | Input/Output: [(44 10 2 43) 2]
Test Case: 345 | Input/Output: [(25 92 13 22) 13]
Test Case: 346 | Input/Output: [(2 8 59 98) 2]
Test Case: 347 | Input/Output: [(67 26 7 9) 7]
Test Case: 348 | Input/Output: [(85 47 55 77) 47]
Test Case: 349 | Input/Output: [(97 24 74 13) 13]
Test Case: 350 | Input/Output: [(43 42 57 57) 42]
Test Case: 351 | Input/Output: [(8 99 47 83) 8]
Test Case: 352 | Input/Output: [(12 32 73 66) 12]
Test Case: 353 | Input/Output: [(20 100 0 7) 0]
Test Case: 354 | Input/Output: [(21 13 34 19) 13]
Test Case: 355 | Input/Output: [(39 22 12 46) 12]
Test Case: 356 | Input/Output: [(84 58 96 87) 58]
Test Case: 357 | Input/Output: [(77 29 100 78) 29]
Test Case: 358 | Input/Output: [(50 12 74 95) 12]
Test Case: 359 | Input/Output: [(12 16 82 20) 12]
Test Case: 360 | Input/Output: [(56 21 96 0) 0]
Test Case: 361 | Input/Output: [(2 74 72 54) 2]
Test Case: 362 | Input/Output: [(3 16 38 29) 3]
Test Case: 363 | Input/Output: [(17 50 48 66) 17]
Test Case: 364 | Input/Output: [(18 53 65 5) 5]
Test Case: 365 | Input/Output: [(17 80 91 18) 17]
Test Case: 366 | Input/Output: [(79 42 4 51) 4]
Test Case: 367 | Input/Output: [(50 32 12 86) 12]
Test Case: 368 | Input/Output: [(47 56 96 39) 39]
Test Case: 369 | Input/Output: [(16 26 100 57) 16]
Test Case: 370 | Input/Output: [(0 47 100 42) 0]
Test Case: 371 | Input/Output: [(75 61 36 44) 36]
Test Case: 372 | Input/Output: [(55 65 14 84) 14]
Test Case: 373 | Input/Output: [(58 38 97 44) 38]
Test Case: 374 | Input/Output: [(49 29 80 75) 29]
Test Case: 375 | Input/Output: [(86 87 50 16) 16]
Test Case: 376 | Input/Output: [(33 25 97 94) 25]
Test Case: 377 | Input/Output: [(34 65 55 61) 34]
Test Case: 378 | Input/Output: [(53 51 40 18) 18]
Test Case: 379 | Input/Output: [(26 33 87 14) 14]
Test Case: 380 | Input/Output: [(43 65 71 70) 43]
Test Case: 381 | Input/Output: [(87 25 81 81) 25]
Test Case: 382 | Input/Output: [(7 92 18 8) 7]
Test Case: 383 | Input/Output: [(60 23 63 22) 22]
Test Case: 384 | Input/Output: [(52 23 19 43) 19]
Test Case: 385 | Input/Output: [(94 4 77 77) 4]
Test Case: 386 | Input/Output: [(53 80 90 2) 2]
Test Case: 387 | Input/Output: [(27 15 33 36) 15]
Test Case: 388 | Input/Output: [(10 1 37 17) 1]
Test Case: 389 | Input/Output: [(39 61 14 89) 14]
Test Case: 390 | Input/Output: [(63 57 97 8) 8]
Test Case: 391 | Input/Output: [(49 2 20 60) 2]
Test Case: 392 | Input/Output: [(16 60 16 97) 16]
Test Case: 393 | Input/Output: [(27 88 15 22) 15]
Test Case: 394 | Input/Output: [(87 86 50 90) 50]
Test Case: 395 | Input/Output: [(75 99 11 73) 11]
Test Case: 396 | Input/Output: [(83 43 44 41) 41]
Test Case: 397 | Input/Output: [(77 56 36 68) 36]
Test Case: 398 | Input/Output: [(97 59 7 27) 7]
Test Case: 399 | Input/Output: [(97 32 1 11) 1]
Test Case: 400 | Input/Output: [(1 -18 -41 47) -41]
Test Case: 401 | Input/Output: [(51 84 93 -34) -34]
Test Case: 402 | Input/Output: [(-59 -42 38 -39) -59]
Test Case: 403 | Input/Output: [(61 -32 15 -16) -32]
Test Case: 404 | Input/Output: [(-24 -27 -63 12) -63]
Test Case: 405 | Input/Output: [(-44 -68 -43 -34) -68]
Test Case: 406 | Input/Output: [(-56 29 1 -67) -67]
Test Case: 407 | Input/Output: [(-68 88 47 14) -68]
Test Case: 408 | Input/Output: [(-54 75 37 65) -54]
Test Case: 409 | Input/Output: [(90 88 72 -8) -8]
Test Case: 410 | Input/Output: [(3 -92 77 -82) -92]
Test Case: 411 | Input/Output: [(-15 18 -53 -6) -53]
Test Case: 412 | Input/Output: [(20 -56 -62 -56) -62]
Test Case: 413 | Input/Output: [(-37 -52 -93 37) -93]
Test Case: 414 | Input/Output: [(76 -55 74 55) -55]
Test Case: 415 | Input/Output: [(-16 -78 -65 -17) -78]
Test Case: 416 | Input/Output: [(44 21 -36 32) -36]
Test Case: 417 | Input/Output: [(-50 -95 99 43) -95]
Test Case: 418 | Input/Output: [(-37 -80 -39 -5) -80]
Test Case: 419 | Input/Output: [(-4 47 14 48) -4]
Test Case: 420 | Input/Output: [(-6 66 -70 99) -70]
Test Case: 421 | Input/Output: [(-12 33 -50 -39) -50]
Test Case: 422 | Input/Output: [(58 -51 76 14) -51]
Test Case: 423 | Input/Output: [(64 -83 -43 79) -83]
Test Case: 424 | Input/Output: [(65 54 66 -23) -23]
Test Case: 425 | Input/Output: [(-35 -42 -99 -46) -99]
Test Case: 426 | Input/Output: [(61 -24 15 0) -24]
Test Case: 427 | Input/Output: [(67 14 -57 66) -57]
Test Case: 428 | Input/Output: [(65 53 65 75) 53]
Test Case: 429 | Input/Output: [(-94 73 61 -22) -94]
Test Case: 430 | Input/Output: [(80 -67 51 -10) -67]
Test Case: 431 | Input/Output: [(-68 -48 40 61) -68]
Test Case: 432 | Input/Output: [(-13 -13 73 51) -13]
Test Case: 433 | Input/Output: [(-23 -25 -80 -38) -80]
Test Case: 434 | Input/Output: [(76 88 -15 10) -15]
Test Case: 435 | Input/Output: [(-16 64 -72 70) -72]
Test Case: 436 | Input/Output: [(31 -56 -51 -16) -56]
Test Case: 437 | Input/Output: [(65 -70 -49 47) -70]
Test Case: 438 | Input/Output: [(-13 -77 -26 -72) -77]
Test Case: 439 | Input/Output: [(-63 -74 99 53) -74]
Test Case: 440 | Input/Output: [(6 -21 42 94) -21]
Test Case: 441 | Input/Output: [(34 -36 -93 -23) -93]
Test Case: 442 | Input/Output: [(82 -37 41 -85) -85]
Test Case: 443 | Input/Output: [(48 -41 67 46) -41]
Test Case: 444 | Input/Output: [(-63 80 91 82) -63]
Test Case: 445 | Input/Output: [(58 -39 -89 -99) -99]
Test Case: 446 | Input/Output: [(-11 36 -73 29) -73]
Test Case: 447 | Input/Output: [(-37 -32 53 2) -37]
Test Case: 448 | Input/Output: [(-59 -84 12 69) -84]
Test Case: 449 | Input/Output: [(98 6 -90 -16) -90]
Test Case: 450 | Input/Output: [(37 2 -39 71) -39]
Test Case: 451 | Input/Output: [(82 -88 45 3) -88]
Test Case: 452 | Input/Output: [(63 93 5 -35) -35]
Test Case: 453 | Input/Output: [(-8 97 -70 39) -70]
Test Case: 454 | Input/Output: [(29 100 28 76) 28]
Test Case: 455 | Input/Output: [(-84 77 -10 -26) -84]
Test Case: 456 | Input/Output: [(-88 -21 99 88) -88]
Test Case: 457 | Input/Output: [(16 21 -46 51) -46]
Test Case: 458 | Input/Output: [(-2 -40 -87 -53) -87]
Test Case: 459 | Input/Output: [(-62 22 64 80) -62]
Test Case: 460 | Input/Output: [(83 -75 -40 -57) -75]
Test Case: 461 | Input/Output: [(41 14 -26 35) -26]
Test Case: 462 | Input/Output: [(-14 79 -61 82) -61]
Test Case: 463 | Input/Output: [(62 -40 79 1) -40]
Test Case: 464 | Input/Output: [(15 -91 1 59) -91]
Test Case: 465 | Input/Output: [(28 42 61 -5) -5]
Test Case: 466 | Input/Output: [(-66 -76 14 93) -76]
Test Case: 467 | Input/Output: [(16 -2 84 -94) -94]
Test Case: 468 | Input/Output: [(-25 65 -35 39) -35]
Test Case: 469 | Input/Output: [(-28 12 -57 -43) -57]
Test Case: 470 | Input/Output: [(44 76 -19 79) -19]
Test Case: 471 | Input/Output: [(-81 82 -60 45) -81]
Test Case: 472 | Input/Output: [(-58 76 96 -9) -58]
Test Case: 473 | Input/Output: [(12 -80 -40 -57) -80]
Test Case: 474 | Input/Output: [(52 -51 -88 -95) -95]
Test Case: 475 | Input/Output: [(62 27 -42 -23) -42]
Test Case: 476 | Input/Output: [(74 -4 -17 40) -17]
Test Case: 477 | Input/Output: [(48 96 -35 57) -35]
Test Case: 478 | Input/Output: [(-51 4 81 98) -51]
Test Case: 479 | Input/Output: [(-36 -51 51 -81) -81]
Test Case: 480 | Input/Output: [(55 34 13 67) 13]
Test Case: 481 | Input/Output: [(-73 88 15 -3) -73]
Test Case: 482 | Input/Output: [(-9 -63 32 49) -63]
Test Case: 483 | Input/Output: [(85 69 -55 5) -55]
Test Case: 484 | Input/Output: [(-85 0 -57 -11) -85]
Test Case: 485 | Input/Output: [(-1 -78 -6 66) -78]
Test Case: 486 | Input/Output: [(-99 -85 -78 4) -99]
Test Case: 487 | Input/Output: [(-27 9 -50 -79) -79]
Test Case: 488 | Input/Output: [(-43 92 -6 -62) -62]
Test Case: 489 | Input/Output: [(-35 17 -58 42) -58]
Test Case: 490 | Input/Output: [(89 -90 -74 -16) -90]
Test Case: 491 | Input/Output: [(91 73 -47 70) -47]
Test Case: 492 | Input/Output: [(0 34 26 9) 0]
Test Case: 493 | Input/Output: [(-94 96 15 -22) -94]
Test Case: 494 | Input/Output: [(29 92 -56 -47) -56]
Test Case: 495 | Input/Output: [(-21 -92 -6 35) -92]
Test Case: 496 | Input/Output: [(15 64 -94 -100) -100]
Test Case: 497 | Input/Output: [(47 -65 65 -98) -98]
Test Case: 498 | Input/Output: [(-13 84 24 6) -13]
Test Case: 499 | Input/Output: [(-76 -48 -2 20) -76]
Test Case: 500 | Input/Output: [(-29 76 21 -93) -93]
Test Case: 501 | Input/Output: [(16 89 -53 -63) -63]
Test Case: 502 | Input/Output: [(-86 3 27 91) -86]
Test Case: 503 | Input/Output: [(-11 16 -35 98) -35]
Test Case: 504 | Input/Output: [(-75 -22 6 -30) -75]
Test Case: 505 | Input/Output: [(67 100 -59 -40) -59]
Test Case: 506 | Input/Output: [(-56 -35 -85 50) -85]
Test Case: 507 | Input/Output: [(69 66 -83 -87) -87]
Test Case: 508 | Input/Output: [(-25 66 41 -75) -75]
Test Case: 509 | Input/Output: [(-36 24 -38 -40) -40]
Test Case: 510 | Input/Output: [(-96 -66 -18 -69) -96]
Test Case: 511 | Input/Output: [(35 -100 50 -100) -100]
Test Case: 512 | Input/Output: [(-22 92 99 3) -22]
Test Case: 513 | Input/Output: [(-23 -16 11 26) -23]
Test Case: 514 | Input/Output: [(31 69 56 -79) -79]
Test Case: 515 | Input/Output: [(45 -96 85 -42) -96]
Test Case: 516 | Input/Output: [(77 -61 -76 79) -76]
Test Case: 517 | Input/Output: [(37 -15 -84 41) -84]
Test Case: 518 | Input/Output: [(25 63 -66 8) -66]
Test Case: 519 | Input/Output: [(-53 80 -39 -77) -77]
Test Case: 520 | Input/Output: [(-94 77 -72 -4) -94]
Test Case: 521 | Input/Output: [(83 46 -13 24) -13]
Test Case: 522 | Input/Output: [(60 -87 98 76) -87]
Test Case: 523 | Input/Output: [(46 -79 84 -12) -79]
Test Case: 524 | Input/Output: [(-70 -36 36 60) -70]
Test Case: 525 | Input/Output: [(39 5 66 72) 5]
Test Case: 526 | Input/Output: [(24 -76 96 -69) -76]
Test Case: 527 | Input/Output: [(-31 60 -25 72) -31]
Test Case: 528 | Input/Output: [(74 95 49 -22) -22]
Test Case: 529 | Input/Output: [(-7 63 -79 53) -79]
Test Case: 530 | Input/Output: [(-63 -55 11 95) -63]
Test Case: 531 | Input/Output: [(32 -43 -50 -1) -50]
Test Case: 532 | Input/Output: [(-52 48 74 24) -52]
Test Case: 533 | Input/Output: [(96 -74 -50 59) -74]
Test Case: 534 | Input/Output: [(14 -64 15 39) -64]
Test Case: 535 | Input/Output: [(-55 8 -24 13) -55]
Test Case: 536 | Input/Output: [(-5 -60 47 -81) -81]
Test Case: 537 | Input/Output: [(-32 -73 -57 -8) -73]
Test Case: 538 | Input/Output: [(-87 -40 -5 69) -87]
Test Case: 539 | Input/Output: [(-57 -3 -50 21) -57]
Test Case: 540 | Input/Output: [(34 -88 -19 -92) -92]
Test Case: 541 | Input/Output: [(-81 -72 85 19) -81]
Test Case: 542 | Input/Output: [(-8 38 84 -81) -81]
Test Case: 543 | Input/Output: [(89 86 -61 32) -61]
Test Case: 544 | Input/Output: [(25 -54 -9 0) -54]
Test Case: 545 | Input/Output: [(-22 -10 -50 45) -50]
Test Case: 546 | Input/Output: [(-11 -79 95 -16) -79]
Test Case: 547 | Input/Output: [(-94 -4 29 -34) -94]
Test Case: 548 | Input/Output: [(95 44 -97 -87) -97]
Test Case: 549 | Input/Output: [(-88 -8 65 -33) -88]
Test Case: 550 | Input/Output: [(-54 -82 13 68) -82]
Test Case: 551 | Input/Output: [(65 -90 39 89) -90]
Test Case: 552 | Input/Output: [(-36 72 -44 32) -44]
Test Case: 553 | Input/Output: [(-30 -49 2 -35) -49]
Test Case: 554 | Input/Output: [(25 -52 -21 -3) -52]
Test Case: 555 | Input/Output: [(-85 6 -62 90) -85]
Test Case: 556 | Input/Output: [(100 -54 99 25) -54]
Test Case: 557 | Input/Output: [(-23 48 22 21) -23]
Test Case: 558 | Input/Output: [(-24 80 -14 -58) -58]
Test Case: 559 | Input/Output: [(75 -47 93 37) -47]
Test Case: 560 | Input/Output: [(33 -85 97 49) -85]
Test Case: 561 | Input/Output: [(-28 -96 -57 -44) -96]
Test Case: 562 | Input/Output: [(77 90 -75 -88) -88]
Test Case: 563 | Input/Output: [(-56 -86 -92 35) -92]
Test Case: 564 | Input/Output: [(-16 51 78 70) -16]
Test Case: 565 | Input/Output: [(3 -56 -54 47) -56]
Test Case: 566 | Input/Output: [(-69 -63 -73 46) -73]
Test Case: 567 | Input/Output: [(67 54 -36 -56) -56]
Test Case: 568 | Input/Output: [(13 68 -68 -37) -68]
Test Case: 569 | Input/Output: [(-68 -98 40 33) -98]
Test Case: 570 | Input/Output: [(-95 -31 -40 -98) -98]
Test Case: 571 | Input/Output: [(60 -49 97 88) -49]
Test Case: 572 | Input/Output: [(45 68 1 100) 1]
Test Case: 573 | Input/Output: [(-15 -30 -79 -100) -100]
Test Case: 574 | Input/Output: [(-40 -42 33 37) -42]
Test Case: 575 | Input/Output: [(38 8 -71 89) -71]
Test Case: 576 | Input/Output: [(64 21 68 -63) -63]
Test Case: 577 | Input/Output: [(-63 85 58 46) -63]
Test Case: 578 | Input/Output: [(92 75 40 11) 11]
Test Case: 579 | Input/Output: [(22 -68 -62 -19) -68]
Test Case: 580 | Input/Output: [(17 44 98 59) 17]
Test Case: 581 | Input/Output: [(0 95 37 -1) -1]
Test Case: 582 | Input/Output: [(-62 -100 -99 -95) -100]
Test Case: 583 | Input/Output: [(49 35 56 -49) -49]
Test Case: 584 | Input/Output: [(-29 -40 -41 11) -41]
Test Case: 585 | Input/Output: [(68 32 94 -84) -84]
Test Case: 586 | Input/Output: [(-31 3 -41 30) -41]
Test Case: 587 | Input/Output: [(61 94 -42 -33) -42]
Test Case: 588 | Input/Output: [(-21 33 -21 -44) -44]
Test Case: 589 | Input/Output: [(48 -93 -87 31) -93]
Test Case: 590 | Input/Output: [(-88 -64 -36 -15) -88]
Test Case: 591 | Input/Output: [(48 67 61 -53) -53]
Test Case: 592 | Input/Output: [(99 11 -88 -29) -88]
Test Case: 593 | Input/Output: [(10 14 88 -43) -43]
Test Case: 594 | Input/Output: [(34 82 75 26) 26]
Test Case: 595 | Input/Output: [(28 -47 -13 -97) -97]
Test Case: 596 | Input/Output: [(-79 -43 18 74) -79]
Test Case: 597 | Input/Output: [(-75 -45 24 -80) -80]
Test Case: 598 | Input/Output: [(-61 -99 39 32) -99]
Test Case: 599 | Input/Output: [(97 -78 -69 74) -78]
Test Case: 600 | Input/Output: [(72 -83 -56 -43) -83]
Test Case: 601 | Input/Output: [(29 77 0 -41) -41]
Test Case: 602 | Input/Output: [(-20 60 11 -87) -87]
Test Case: 603 | Input/Output: [(1 4 20 81) 1]
Test Case: 604 | Input/Output: [(-85 68 19 -22) -85]
Test Case: 605 | Input/Output: [(60 -83 -24 -16) -83]
Test Case: 606 | Input/Output: [(100 28 -66 -13) -66]
Test Case: 607 | Input/Output: [(-65 74 7 -60) -65]
Test Case: 608 | Input/Output: [(46 97 18 -35) -35]
Test Case: 609 | Input/Output: [(67 56 50 -74) -74]
Test Case: 610 | Input/Output: [(-86 63 82 74) -86]
Test Case: 611 | Input/Output: [(75 3 29 6) 3]
Test Case: 612 | Input/Output: [(37 -39 27 -87) -87]
Test Case: 613 | Input/Output: [(74 -14 -72 -48) -72]
Test Case: 614 | Input/Output: [(-48 -78 -65 72) -78]
Test Case: 615 | Input/Output: [(-38 -26 -78 -15) -78]
Test Case: 616 | Input/Output: [(67 18 -49 65) -49]
Test Case: 617 | Input/Output: [(-98 35 -16 85) -98]
Test Case: 618 | Input/Output: [(33 73 54 -40) -40]
Test Case: 619 | Input/Output: [(73 -72 -4 -54) -72]
Test Case: 620 | Input/Output: [(33 88 -95 57) -95]
Test Case: 621 | Input/Output: [(27 56 -83 68) -83]
Test Case: 622 | Input/Output: [(-65 -1 10 60) -65]
Test Case: 623 | Input/Output: [(25 -29 26 -67) -67]
Test Case: 624 | Input/Output: [(94 35 -60 15) -60]
Test Case: 625 | Input/Output: [(55 4 -27 -3) -27]
Test Case: 626 | Input/Output: [(-1 -37 31 6) -37]
Test Case: 627 | Input/Output: [(-94 13 -91 63) -94]
Test Case: 628 | Input/Output: [(-36 -74 -74 -49) -74]
Test Case: 629 | Input/Output: [(-75 -88 98 -99) -99]
Test Case: 630 | Input/Output: [(62 -63 -48 56) -63]
Test Case: 631 | Input/Output: [(-50 -75 -75 76) -75]
Test Case: 632 | Input/Output: [(-1 67 -57 48) -57]
Test Case: 633 | Input/Output: [(-94 -98 77 99) -98]
Test Case: 634 | Input/Output: [(69 67 55 39) 39]
Test Case: 635 | Input/Output: [(-62 79 38 -21) -62]
Test Case: 636 | Input/Output: [(48 9 -47 -2) -47]
Test Case: 637 | Input/Output: [(95 35 -92 18) -92]
Test Case: 638 | Input/Output: [(39 -58 24 27) -58]
Test Case: 639 | Input/Output: [(-50 -7 -46 -2) -50]
Test Case: 640 | Input/Output: [(25 90 44 -85) -85]
Test Case: 641 | Input/Output: [(-5 16 97 -100) -100]
Test Case: 642 | Input/Output: [(-44 99 -84 88) -84]
Test Case: 643 | Input/Output: [(-93 32 69 50) -93]
Test Case: 644 | Input/Output: [(-71 42 74 75) -71]
Test Case: 645 | Input/Output: [(56 34 26 41) 26]
Test Case: 646 | Input/Output: [(14 -2 -38 -9) -38]
Test Case: 647 | Input/Output: [(0 -60 35 -38) -60]
Test Case: 648 | Input/Output: [(-38 67 3 -56) -56]
Test Case: 649 | Input/Output: [(21 78 -22 97) -22]
Test Case: 650 | Input/Output: [(86 37 -92 -93) -93]
Test Case: 651 | Input/Output: [(-50 -33 -9 57) -50]
Test Case: 652 | Input/Output: [(-38 39 93 -54) -54]
Test Case: 653 | Input/Output: [(-25 -96 84 29) -96]
Test Case: 654 | Input/Output: [(-23 6 13 -72) -72]
Test Case: 655 | Input/Output: [(-8 -87 -87 46) -87]
Test Case: 656 | Input/Output: [(-32 91 16 -94) -94]
Test Case: 657 | Input/Output: [(-30 -36 -10 26) -36]
Test Case: 658 | Input/Output: [(-89 -30 -32 17) -89]
Test Case: 659 | Input/Output: [(-29 -12 6 58) -29]
Test Case: 660 | Input/Output: [(-30 -84 -13 -85) -85]
Test Case: 661 | Input/Output: [(-68 -93 100 84) -93]
Test Case: 662 | Input/Output: [(-39 5 -36 95) -39]
Test Case: 663 | Input/Output: [(-29 -93 40 -93) -93]
Test Case: 664 | Input/Output: [(-49 28 38 -46) -49]
Test Case: 665 | Input/Output: [(-97 28 -3 7) -97]
Test Case: 666 | Input/Output: [(83 -43 -93 76) -93]
Test Case: 667 | Input/Output: [(63 -54 76 58) -54]
Test Case: 668 | Input/Output: [(-69 64 -31 -53) -69]
Test Case: 669 | Input/Output: [(-63 70 11 89) -63]
Test Case: 670 | Input/Output: [(-97 -25 -18 11) -97]
Test Case: 671 | Input/Output: [(52 1 85 34) 1]
Test Case: 672 | Input/Output: [(-29 3 77 -68) -68]
Test Case: 673 | Input/Output: [(19 -32 -16 -55) -55]
Test Case: 674 | Input/Output: [(0 -45 -97 75) -97]
Test Case: 675 | Input/Output: [(98 -90 -47 -91) -91]
Test Case: 676 | Input/Output: [(-72 21 95 64) -72]
Test Case: 677 | Input/Output: [(-7 38 28 -80) -80]
Test Case: 678 | Input/Output: [(-16 -14 -62 68) -62]
Test Case: 679 | Input/Output: [(-10 91 -91 66) -91]
Test Case: 680 | Input/Output: [(-35 9 -47 -92) -92]
Test Case: 681 | Input/Output: [(68 -61 -33 -12) -61]
Test Case: 682 | Input/Output: [(56 26 -57 -65) -65]
Test Case: 683 | Input/Output: [(60 -53 55 98) -53]
Test Case: 684 | Input/Output: [(-73 32 38 -30) -73]
Test Case: 685 | Input/Output: [(-73 36 -83 49) -83]
Test Case: 686 | Input/Output: [(-13 87 58 -44) -44]
Test Case: 687 | Input/Output: [(10 -54 15 -8) -54]
Test Case: 688 | Input/Output: [(64 -60 1 -23) -60]
Test Case: 689 | Input/Output: [(55 -46 -37 10) -46]
Test Case: 690 | Input/Output: [(16 10 10 -90) -90]
Test Case: 691 | Input/Output: [(83 18 20 -61) -61]
Test Case: 692 | Input/Output: [(77 -93 19 -85) -93]
Test Case: 693 | Input/Output: [(-83 27 -27 80) -83]
Test Case: 694 | Input/Output: [(-86 44 -76 -30) -86]
Test Case: 695 | Input/Output: [(-12 12 -21 42) -21]
Test Case: 696 | Input/Output: [(-22 -69 8 91) -69]
Test Case: 697 | Input/Output: [(-75 -52 41 -2) -75]
Test Case: 698 | Input/Output: [(37 -19 -34 30) -34]
Test Case: 699 | Input/Output: [(-46 -34 85 -14) -46]
Test Case: 700 | Input/Output: [(-15 -72 -90 -52) -90]
Test Case: 701 | Input/Output: [(-1 67 -21 7) -21]
Test Case: 702 | Input/Output: [(42 -98 13 93) -98]
Test Case: 703 | Input/Output: [(48 -33 -20 -7) -33]
Test Case: 704 | Input/Output: [(81 -56 -25 95) -56]
Test Case: 705 | Input/Output: [(-24 29 -88 -32) -88]
Test Case: 706 | Input/Output: [(52 64 12 -85) -85]
Test Case: 707 | Input/Output: [(-80 -92 56 11) -92]
Test Case: 708 | Input/Output: [(-58 -99 -74 15) -99]
Test Case: 709 | Input/Output: [(-93 -25 19 3) -93]
Test Case: 710 | Input/Output: [(14 -40 48 -86) -86]
Test Case: 711 | Input/Output: [(-13 46 -84 -100) -100]
Test Case: 712 | Input/Output: [(-55 -69 28 52) -69]
Test Case: 713 | Input/Output: [(7 -21 -86 -78) -86]
Test Case: 714 | Input/Output: [(40 32 49 -2) -2]
Test Case: 715 | Input/Output: [(18 -76 32 -58) -76]
Test Case: 716 | Input/Output: [(-31 -53 29 -35) -53]
Test Case: 717 | Input/Output: [(-12 12 -43 42) -43]
Test Case: 718 | Input/Output: [(43 97 71 32) 32]
Test Case: 719 | Input/Output: [(99 -32 -20 -76) -76]
Test Case: 720 | Input/Output: [(-27 -4 85 8) -27]
Test Case: 721 | Input/Output: [(98 32 33 9) 9]
Test Case: 722 | Input/Output: [(-61 35 -64 -49) -64]
Test Case: 723 | Input/Output: [(99 60 -34 -81) -81]
Test Case: 724 | Input/Output: [(-51 81 -71 4) -71]
Test Case: 725 | Input/Output: [(41 8 -36 -78) -78]
Test Case: 726 | Input/Output: [(-41 -99 -62 -40) -99]
Test Case: 727 | Input/Output: [(-62 4 83 -98) -98]
Test Case: 728 | Input/Output: [(7 -55 -71 92) -71]
Test Case: 729 | Input/Output: [(-2 1 51 -85) -85]
Test Case: 730 | Input/Output: [(-68 -99 31 -48) -99]
Test Case: 731 | Input/Output: [(71 -37 -3 -58) -58]
Test Case: 732 | Input/Output: [(-17 -49 -2 51) -49]
Test Case: 733 | Input/Output: [(-65 -78 29 5) -78]
Test Case: 734 | Input/Output: [(-3 -20 -54 -9) -54]
Test Case: 735 | Input/Output: [(-31 -15 28 -66) -66]
Test Case: 736 | Input/Output: [(-60 -96 40 -10) -96]
Test Case: 737 | Input/Output: [(-20 -10 85 78) -20]
Test Case: 738 | Input/Output: [(-62 12 90 -98) -98]
Test Case: 739 | Input/Output: [(29 -82 59 -82) -82]
Test Case: 740 | Input/Output: [(-68 -97 -70 2) -97]
Test Case: 741 | Input/Output: [(-4 55 -84 -56) -84]
Test Case: 742 | Input/Output: [(62 -36 -76 -51) -76]
Test Case: 743 | Input/Output: [(25 -42 -47 10) -47]
Test Case: 744 | Input/Output: [(90 15 26 40) 15]
Test Case: 745 | Input/Output: [(9 -78 88 -88) -88]
Test Case: 746 | Input/Output: [(26 9 -80 -67) -80]
Test Case: 747 | Input/Output: [(-70 -2 -59 -57) -70]
Test Case: 748 | Input/Output: [(-21 90 83 7) -21]
Test Case: 749 | Input/Output: [(-67 -70 -74 -29) -74]
Test Case: 750 | Input/Output: [(40 -37 8 86) -37]
Test Case: 751 | Input/Output: [(27 -81 -21 -19) -81]
Test Case: 752 | Input/Output: [(-72 -22 77 27) -72]
Test Case: 753 | Input/Output: [(70 31 -83 18) -83]
Test Case: 754 | Input/Output: [(-81 98 -9 17) -81]
Test Case: 755 | Input/Output: [(-22 43 -78 79) -78]
Test Case: 756 | Input/Output: [(-20 30 -80 -10) -80]
Test Case: 757 | Input/Output: [(-38 16 55 -14) -38]
Test Case: 758 | Input/Output: [(-19 13 -39 83) -39]
Test Case: 759 | Input/Output: [(-54 -36 6 96) -54]
Test Case: 760 | Input/Output: [(72 -64 52 12) -64]
Test Case: 761 | Input/Output: [(64 82 -74 4) -74]
Test Case: 762 | Input/Output: [(-24 -22 -63 77) -63]
Test Case: 763 | Input/Output: [(48 -92 56 -73) -92]
Test Case: 764 | Input/Output: [(-61 5 -1 -33) -61]
Test Case: 765 | Input/Output: [(-32 90 -58 8) -58]
Test Case: 766 | Input/Output: [(-61 24 -23 53) -61]
Test Case: 767 | Input/Output: [(44 -11 40 48) -11]
Test Case: 768 | Input/Output: [(-93 8 3 -95) -95]
Test Case: 769 | Input/Output: [(-35 -42 -93 57) -93]
Test Case: 770 | Input/Output: [(61 -78 93 -36) -78]
Test Case: 771 | Input/Output: [(58 31 -21 -62) -62]
Test Case: 772 | Input/Output: [(-34 -58 6 44) -58]
Test Case: 773 | Input/Output: [(47 -16 51 25) -16]
Test Case: 774 | Input/Output: [(-23 5 -19 93) -23]
Test Case: 775 | Input/Output: [(-8 69 -32 83) -32]
Test Case: 776 | Input/Output: [(50 -75 -95 57) -95]
Test Case: 777 | Input/Output: [(-28 73 -83 16) -83]
Test Case: 778 | Input/Output: [(66 37 44 -62) -62]
Test Case: 779 | Input/Output: [(19 -71 54 11) -71]
Test Case: 780 | Input/Output: [(-43 95 8 85) -43]
Test Case: 781 | Input/Output: [(-97 1 -2 38) -97]
Test Case: 782 | Input/Output: [(67 -49 51 51) -49]
Test Case: 783 | Input/Output: [(-59 -91 -66 11) -91]
Test Case: 784 | Input/Output: [(44 91 2 18) 2]
Test Case: 785 | Input/Output: [(-22 91 -9 -70) -70]
Test Case: 786 | Input/Output: [(9 -90 93 -20) -90]
Test Case: 787 | Input/Output: [(24 39 -99 -91) -99]
Test Case: 788 | Input/Output: [(85 -78 99 18) -78]
Test Case: 789 | Input/Output: [(43 -29 73 51) -29]
Test Case: 790 | Input/Output: [(-81 -26 18 16) -81]
Test Case: 791 | Input/Output: [(23 -26 -64 -59) -64]
Test Case: 792 | Input/Output: [(7 8 -60 57) -60]
Test Case: 793 | Input/Output: [(-48 36 -66 98) -66]
Test Case: 794 | Input/Output: [(-75 -95 8 -64) -95]
Test Case: 795 | Input/Output: [(27 -93 -39 -54) -93]
Test Case: 796 | Input/Output: [(-59 90 46 -26) -59]
Test Case: 797 | Input/Output: [(1 3 -65 -48) -65]
Test Case: 798 | Input/Output: [(81 -3 -93 97) -93]
Test Case: 799 | Input/Output: [(88 11 52 -30) -30]
Test Case: 800 | Input/Output: [(84 -98 97 -55) -98]
Test Case: 801 | Input/Output: [(-64 -87 -36 95) -87]
Test Case: 802 | Input/Output: [(-33 89 -14 71) -33]
Test Case: 803 | Input/Output: [(78 5 -88 -15) -88]
Test Case: 804 | Input/Output: [(98 50 62 -55) -55]
Test Case: 805 | Input/Output: [(-48 99 16 -57) -57]
Test Case: 806 | Input/Output: [(61 37 -84 60) -84]
Test Case: 807 | Input/Output: [(29 63 -93 80) -93]
Test Case: 808 | Input/Output: [(97 -63 -9 -97) -97]
Test Case: 809 | Input/Output: [(64 68 -20 -58) -58]
Test Case: 810 | Input/Output: [(31 100 -16 -28) -28]
Test Case: 811 | Input/Output: [(-26 -37 -96 -9) -96]
Test Case: 812 | Input/Output: [(-50 10 -81 -69) -81]
Test Case: 813 | Input/Output: [(77 -25 -56 33) -56]
Test Case: 814 | Input/Output: [(76 -87 -44 -39) -87]
Test Case: 815 | Input/Output: [(-74 -8 13 -87) -87]
Test Case: 816 | Input/Output: [(-84 95 -75 91) -84]
Test Case: 817 | Input/Output: [(70 100 -61 -78) -78]
Test Case: 818 | Input/Output: [(5 -42 -73 42) -73]
Test Case: 819 | Input/Output: [(-43 -63 -2 -70) -70]
Test Case: 820 | Input/Output: [(3 -79 68 -93) -93]
Test Case: 821 | Input/Output: [(-64 30 31 -80) -80]
Test Case: 822 | Input/Output: [(0 33 -80 91) -80]
Test Case: 823 | Input/Output: [(59 -39 -10 83) -39]
Test Case: 824 | Input/Output: [(-13 81 -79 18) -79]
Test Case: 825 | Input/Output: [(20 16 -27 43) -27]
Test Case: 826 | Input/Output: [(-59 22 61 61) -59]
Test Case: 827 | Input/Output: [(25 -3 55 -49) -49]
Test Case: 828 | Input/Output: [(-40 -70 84 -91) -91]
Test Case: 829 | Input/Output: [(65 -9 72 -83) -83]
Test Case: 830 | Input/Output: [(27 87 36 62) 27]
Test Case: 831 | Input/Output: [(17 96 19 -14) -14]
Test Case: 832 | Input/Output: [(-97 78 -97 66) -97]
Test Case: 833 | Input/Output: [(-79 95 26 100) -79]
Test Case: 834 | Input/Output: [(85 -22 34 21) -22]
Test Case: 835 | Input/Output: [(-31 96 -1 -98) -98]
Test Case: 836 | Input/Output: [(-79 79 -36 -78) -79]
Test Case: 837 | Input/Output: [(-24 -40 -86 -51) -86]
Test Case: 838 | Input/Output: [(93 -37 -32 -60) -60]
Test Case: 839 | Input/Output: [(95 -82 83 -30) -82]
Test Case: 840 | Input/Output: [(-46 -73 51 54) -73]
Test Case: 841 | Input/Output: [(62 73 -62 33) -62]
Test Case: 842 | Input/Output: [(88 73 -16 -85) -85]
Test Case: 843 | Input/Output: [(-1 45 75 -88) -88]
Test Case: 844 | Input/Output: [(-62 11 -37 81) -62]
Test Case: 845 | Input/Output: [(78 18 -8 6) -8]
Test Case: 846 | Input/Output: [(-28 -80 -90 -45) -90]
Test Case: 847 | Input/Output: [(43 -2 -98 -67) -98]
Test Case: 848 | Input/Output: [(-89 -87 -86 80) -89]
Test Case: 849 | Input/Output: [(20 13 11 -82) -82]
Test Case: 850 | Input/Output: [(-4 24 -60 42) -60]
Test Case: 851 | Input/Output: [(30 77 -79 2) -79]
Test Case: 852 | Input/Output: [(-44 -44 15 8) -44]
Test Case: 853 | Input/Output: [(93 71 27 94) 27]
Test Case: 854 | Input/Output: [(6 -34 -99 78) -99]
Test Case: 855 | Input/Output: [(-2 -1 53 54) -2]
Test Case: 856 | Input/Output: [(-68 14 39 60) -68]
Test Case: 857 | Input/Output: [(-83 -30 42 -88) -88]
Test Case: 858 | Input/Output: [(-5 86 56 -21) -21]
Test Case: 859 | Input/Output: [(2 38 75 30) 2]
Test Case: 860 | Input/Output: [(55 -99 -97 63) -99]
Test Case: 861 | Input/Output: [(-43 11 73 22) -43]
Test Case: 862 | Input/Output: [(62 93 -4 -98) -98]
Test Case: 863 | Input/Output: [(-94 -3 85 -69) -94]
Test Case: 864 | Input/Output: [(41 -20 -48 -78) -78]
Test Case: 865 | Input/Output: [(-23 -77 44 39) -77]
Test Case: 866 | Input/Output: [(64 24 -15 90) -15]
Test Case: 867 | Input/Output: [(37 -32 40 -25) -32]
Test Case: 868 | Input/Output: [(-22 -74 -86 32) -86]
Test Case: 869 | Input/Output: [(94 -54 6 59) -54]
Test Case: 870 | Input/Output: [(90 83 -25 -77) -77]
Test Case: 871 | Input/Output: [(-15 77 47 79) -15]
Test Case: 872 | Input/Output: [(-21 12 -7 -22) -22]
Test Case: 873 | Input/Output: [(-42 -15 5 -20) -42]
Test Case: 874 | Input/Output: [(5 -81 20 100) -81]
Test Case: 875 | Input/Output: [(41 -66 -9 64) -66]
Test Case: 876 | Input/Output: [(75 -50 55 -47) -50]
Test Case: 877 | Input/Output: [(-93 -46 26 -14) -93]
Test Case: 878 | Input/Output: [(14 58 87 89) 14]
Test Case: 879 | Input/Output: [(73 47 17 61) 17]
Test Case: 880 | Input/Output: [(-87 -28 8 -6) -87]
Test Case: 881 | Input/Output: [(11 81 -96 -33) -96]
Test Case: 882 | Input/Output: [(88 -3 68 81) -3]
Test Case: 883 | Input/Output: [(-87 78 -9 43) -87]
Test Case: 884 | Input/Output: [(-8 70 -78 22) -78]
Test Case: 885 | Input/Output: [(71 3 33 45) 3]
Test Case: 886 | Input/Output: [(-72 51 -87 -94) -94]
Test Case: 887 | Input/Output: [(-49 -32 78 11) -49]
Test Case: 888 | Input/Output: [(-90 47 -13 -39) -90]
Test Case: 889 | Input/Output: [(12 -21 43 -45) -45]
Test Case: 890 | Input/Output: [(-56 -40 60 86) -56]
Test Case: 891 | Input/Output: [(-7 55 44 28) -7]
Test Case: 892 | Input/Output: [(-75 -15 5 -84) -84]
Test Case: 893 | Input/Output: [(7 -37 -63 33) -63]
Test Case: 894 | Input/Output: [(32 -74 82 -40) -74]
Test Case: 895 | Input/Output: [(62 -75 67 -83) -83]
Test Case: 896 | Input/Output: [(-71 36 -55 -44) -71]
Test Case: 897 | Input/Output: [(-60 -87 -85 -61) -87]
Test Case: 898 | Input/Output: [(-89 -56 -54 -76) -89]
Test Case: 899 | Input/Output: [(94 27 -36 -61) -61]
Test Case: 900 | Input/Output: [(58 -50 -21 -80) -80]
Test Case: 901 | Input/Output: [(-43 -74 -72 31) -74]
Test Case: 902 | Input/Output: [(62 -95 94 -32) -95]
Test Case: 903 | Input/Output: [(-1 1 -2 -97) -97]
Test Case: 904 | Input/Output: [(-38 -55 -86 -39) -86]
Test Case: 905 | Input/Output: [(-58 -4 24 0) -58]
Test Case: 906 | Input/Output: [(11 -34 74 -35) -35]
Test Case: 907 | Input/Output: [(-43 78 61 76) -43]
Test Case: 908 | Input/Output: [(-58 8 -25 100) -58]
Test Case: 909 | Input/Output: [(63 -100 25 48) -100]
Test Case: 910 | Input/Output: [(-11 -3 -1 -51) -51]
Test Case: 911 | Input/Output: [(-23 21 -100 -42) -100]
Test Case: 912 | Input/Output: [(-43 -36 25 82) -43]
Test Case: 913 | Input/Output: [(-88 -73 11 46) -88]
Test Case: 914 | Input/Output: [(-12 55 53 -84) -84]
Test Case: 915 | Input/Output: [(-99 34 92 73) -99]
Test Case: 916 | Input/Output: [(-41 -91 -9 -78) -91]
Test Case: 917 | Input/Output: [(96 89 -77 -72) -77]
Test Case: 918 | Input/Output: [(3 17 82 17) 3]
Test Case: 919 | Input/Output: [(46 88 -28 -58) -58]
Test Case: 920 | Input/Output: [(-70 100 -33 92) -70]
Test Case: 921 | Input/Output: [(1 65 57 100) 1]
Test Case: 922 | Input/Output: [(-25 -62 73 -64) -64]
Test Case: 923 | Input/Output: [(78 82 94 75) 75]
Test Case: 924 | Input/Output: [(-5 54 17 -41) -41]
Test Case: 925 | Input/Output: [(38 45 78 -17) -17]
Test Case: 926 | Input/Output: [(40 -38 9 -5) -38]
Test Case: 927 | Input/Output: [(-99 -57 83 55) -99]
Test Case: 928 | Input/Output: [(93 -31 58 80) -31]
Test Case: 929 | Input/Output: [(-34 7 99 -81) -81]
Test Case: 930 | Input/Output: [(97 46 -53 29) -53]
Test Case: 931 | Input/Output: [(89 -28 20 -40) -40]
Test Case: 932 | Input/Output: [(-39 -98 -14 8) -98]
Test Case: 933 | Input/Output: [(98 22 2 -56) -56]
Test Case: 934 | Input/Output: [(-45 48 -42 -55) -55]
Test Case: 935 | Input/Output: [(-2 -12 -69 -62) -69]
Test Case: 936 | Input/Output: [(60 39 -84 54) -84]
Test Case: 937 | Input/Output: [(-33 -53 5 -98) -98]
Test Case: 938 | Input/Output: [(99 -84 33 -57) -84]
Test Case: 939 | Input/Output: [(21 -22 98 11) -22]
Test Case: 940 | Input/Output: [(-2 26 -53 -26) -53]
Test Case: 941 | Input/Output: [(-41 9 89 -27) -41]
Test Case: 942 | Input/Output: [(-78 17 -33 12) -78]
Test Case: 943 | Input/Output: [(-20 -94 63 -60) -94]
Test Case: 944 | Input/Output: [(-53 16 49 -97) -97]
Test Case: 945 | Input/Output: [(-18 -41 -84 89) -84]
Test Case: 946 | Input/Output: [(-34 -34 -58 -100) -100]
Test Case: 947 | Input/Output: [(-38 -86 37 5) -86]
Test Case: 948 | Input/Output: [(28 63 53 -49) -49]
Test Case: 949 | Input/Output: [(-4 -80 -51 53) -80]
Test Case: 950 | Input/Output: [(-76 48 72 -68) -76]
Test Case: 951 | Input/Output: [(-91 -49 72 -84) -91]
Test Case: 952 | Input/Output: [(26 3 97 91) 3]
Test Case: 953 | Input/Output: [(-84 -19 -19 75) -84]
Test Case: 954 | Input/Output: [(47 -65 79 77) -65]
Test Case: 955 | Input/Output: [(58 -11 4 92) -11]
Test Case: 956 | Input/Output: [(25 99 -91 -45) -91]
Test Case: 957 | Input/Output: [(100 44 -43 -45) -45]
Test Case: 958 | Input/Output: [(-6 78 7 1) -6]
Test Case: 959 | Input/Output: [(52 24 -58 77) -58]
Test Case: 960 | Input/Output: [(44 20 88 7) 7]
Test Case: 961 | Input/Output: [(-51 -13 -83 76) -83]
Test Case: 962 | Input/Output: [(10 55 -36 50) -36]
Test Case: 963 | Input/Output: [(27 97 99 9) 9]
Test Case: 964 | Input/Output: [(80 -67 12 -47) -67]
Test Case: 965 | Input/Output: [(40 -77 17 -56) -77]
Test Case: 966 | Input/Output: [(57 -64 -4 12) -64]
Test Case: 967 | Input/Output: [(19 51 -82 70) -82]
Test Case: 968 | Input/Output: [(89 41 -94 -33) -94]
Test Case: 969 | Input/Output: [(-34 69 -60 -13) -60]
Test Case: 970 | Input/Output: [(-76 50 -22 63) -76]
Test Case: 971 | Input/Output: [(89 14 58 96) 14]
Test Case: 972 | Input/Output: [(-90 -44 -53 6) -90]
Test Case: 973 | Input/Output: [(12 95 95 43) 12]
Test Case: 974 | Input/Output: [(-2 22 55 13) -2]
Test Case: 975 | Input/Output: [(36 -55 22 -23) -55]
Test Case: 976 | Input/Output: [(-93 -89 56 -93) -93]
Test Case: 977 | Input/Output: [(89 91 -28 16) -28]
Test Case: 978 | Input/Output: [(-89 -75 77 -26) -89]
Test Case: 979 | Input/Output: [(1 -65 -59 -12) -65]
Test Case: 980 | Input/Output: [(-99 18 26 61) -99]
Test Case: 981 | Input/Output: [(-54 -49 91 91) -54]
Test Case: 982 | Input/Output: [(-71 -99 -24 -59) -99]
Test Case: 983 | Input/Output: [(27 94 -91 13) -91]
Test Case: 984 | Input/Output: [(16 20 -67 -46) -67]
Test Case: 985 | Input/Output: [(91 -39 -45 -25) -45]
Test Case: 986 | Input/Output: [(56 12 -100 -82) -100]
Test Case: 987 | Input/Output: [(-42 -18 -1 15) -42]
Test Case: 988 | Input/Output: [(33 94 -85 -18) -85]
Test Case: 989 | Input/Output: [(-32 82 -37 46) -37]
Test Case: 990 | Input/Output: [(55 8 63 -6) -6]
Test Case: 991 | Input/Output: [(-99 38 41 -60) -99]
Test Case: 992 | Input/Output: [(80 48 90 -62) -62]
Test Case: 993 | Input/Output: [(-42 -58 100 -43) -58]
Test Case: 994 | Input/Output: [(87 94 81 34) 34]
Test Case: 995 | Input/Output: [(-55 56 -42 92) -55]
Test Case: 996 | Input/Output: [(-88 -2 42 70) -88]
Test Case: 997 | Input/Output: [(-43 13 76 53) -43]
Test Case: 998 | Input/Output: [(32 24 -72 18) -72]
Test Case: 999 | Input/Output: [(-96 -52 63 28) -96]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:uniform-addition-and-deletion 1.0}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 3000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
random-screen = false
random-seed = 82 114 -126 2 -110 81 -80 81 114 127 -42 1 47 1 -79 -33
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-9 -9 -9 -89] -89] [[78 78 63 78] 63] [[-39 -98 -39 -39] -98] [[81 44 44 44] 44] [[50 50 76 50] 50] [[-65 -65 -65 -47] -65] [[10 10 10 -27] -27] [[-10 -10 -10 -72] -72] [[97 97 97 -25] -25] [[89 89 -93 89] -93] [(95 95 95 95) 95] [(-79 -79 -79 -79) -79] [(99 99 99 99) 99] [(-97 -97 -97 -97) -97] [(-55 -55 -55 -55) -55] [(15 54 0 35) 0] [(26 29 59 24) 24] [(94 76 26 59) 26] [(61 86 24 30) 24] [(95 91 25 8) 8] [(94 34 74 19) 19] [(39 51 36 8) 8] [(40 7 36 51) 7] [(43 27 31 23) 23] [(85 48 7 96) 7] [(3 16 83 7) 3] [(33 8 56 44) 8] [(50 49 75 5) 5] [(18 52 72 77) 18] [(96 75 13 39) 13] [(83 77 49 44) 44] [(58 62 83 16) 16] [(100 91 65 42) 42] [(74 58 5 2) 2] [(2 80 77 45) 2] [(31 14 -55 -10) -55] [(-85 -64 88 -23) -85] [(13 -8 -16 43) -16] [(-35 3 99 -75) -75] [(-59 -51 40 47) -59] [(-7 -42 -99 -86) -99] [(-29 -91 41 45) -91] [(34 -74 -46 -35) -74] [(2 48 -10 -9) -10] [(56 -4 -31 90) -31] [(-83 15 44 -88) -88] [(69 84 -28 20) -28] [(52 -24 -59 34) -59] [(-49 -58 43 60) -58] [(-47 76 44 -59) -59] [(27 -99 -50 45) -99] [(37 -17 -79 90) -79] [(64 -77 -14 -54) -77] [(-34 82 -44 55) -44] [(-15 60 14 51) -15] [(-34 -24 67 78) -34] [(13 -10 55 -93) -93] [(31 -98 -61 36) -98] [(-39 73 34 80) -39] [(17 33 -63 -67) -67] [(-34 -27 -23 -56) -56] [(11 94 93 62) 11] [(-92 24 50 5) -92] [(23 -7 -45 53) -45] [(24 25 53 54) 24] [(-100 2 -69 77) -100] [(1 -19 -36 -11) -36] [(49 67 -13 -62) -62] [(73 81 91 -79) -79] [(50 -25 -48 66) -48] [(27 99 -9 -22) -22] [(42 28 -62 58) -62] [(-54 -98 -63 -68) -98] [(51 -73 83 58) -73] [(-34 24 -50 37) -50] [(-40 0 98 37) -40] [(-25 -73 -23 -76) -76] [(0 -54 -28 -19) -54] [(-50 -54 -25 94) -54] [(-70 -64 -31 87) -70] [(62 -36 -14 -12) -36] [(36 -70 83 -20) -70] [(53 68 37 -42) -42] [(57 -37 -27 -34) -37] [(27 75 1 0) 0] [(3 -43 -19 -55) -55] [(44 10 -11 58) -11] [(-78 -81 67 -59) -81] [(-96 14 -94 -63) -96] [(-99 -55 24 78) -99] [(-83 -82 -49 38) -83] [(-35 -45 32 75) -45] [(-28 -55 -75 24) -75] [(-92 86 -21 -70) -92] [(-45 54 -35 49) -45])
uniform-addition-and-deletion-rate = 0.09
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 627
Test mean error for best: 0.62700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -89                 | Program output: -9                 
Correct output: 63                  | Program output: 63                 
Correct output: -98                 | Program output: -39                
Correct output: 44                  | Program output: 44                 
Correct output: 50                  | Program output: 76                 
Correct output: -65                 | Program output: -65                
Correct output: -27                 | Program output: 10                 
Correct output: -72                 | Program output: -10                
Correct output: -25                 | Program output: 97                 
Correct output: -93                 | Program output: -93                
Correct output: 95                  | Program output: 95                 
Correct output: -79                 | Program output: -79                
Correct output: 99                  | Program output: 99                 
Correct output: -97                 | Program output: -97                
Correct output: -55                 | Program output: -55                
Correct output: 0                   | Program output: 0                  
Correct output: 24                  | Program output: 59                 
Correct output: 26                  | Program output: 26                 
Correct output: 24                  | Program output: 24                 
Correct output: 8                   | Program output: 25                 
Correct output: 19                  | Program output: 74                 
Correct output: 8                   | Program output: 36                 
Correct output: 7                   | Program output: 36                 
Correct output: 23                  | Program output: 31                 
Correct output: 7                   | Program output: 7                  
Correct output: 3                   | Program output: 83                 
Correct output: 8                   | Program output: 56                 
Correct output: 5                   | Program output: 75                 
Correct output: 18                  | Program output: 72                 
Correct output: 13                  | Program output: 13                 
Correct output: 44                  | Program output: 49                 
Correct output: 16                  | Program output: 83                 
Correct output: 42                  | Program output: 65                 
Correct output: 2                   | Program output: 5                  
Correct output: 2                   | Program output: 77                 
Correct output: -55                 | Program output: -55                
Correct output: -85                 | Program output: 88                 
Correct output: -16                 | Program output: -16                
Correct output: -75                 | Program output: 99                 
Correct output: -59                 | Program output: 40                 
Correct output: -99                 | Program output: -99                
Correct output: -91                 | Program output: 41                 
Correct output: -74                 | Program output: -46                
Correct output: -10                 | Program output: -10                
Correct output: -31                 | Program output: -31                
Correct output: -88                 | Program output: 44                 
Correct output: -28                 | Program output: -28                
Correct output: -59                 | Program output: -59                
Correct output: -58                 | Program output: 43                 
Correct output: -59                 | Program output: 44                 
Correct output: -99                 | Program output: -50                
Correct output: -79                 | Program output: -79                
Correct output: -77                 | Program output: -14                
Correct output: -44                 | Program output: -44                
Correct output: -15                 | Program output: 14                 
Correct output: -34                 | Program output: 67                 
Correct output: -93                 | Program output: 55                 
Correct output: -98                 | Program output: -61                
Correct output: -39                 | Program output: 34                 
Correct output: -67                 | Program output: -63                
Correct output: -56                 | Program output: -23                
Correct output: 11                  | Program output: 93                 
Correct output: -92                 | Program output: 50                 
Correct output: -45                 | Program output: -45                
Correct output: 24                  | Program output: 53                 
Correct output: -100                | Program output: -69                
Correct output: -36                 | Program output: -36                
Correct output: -62                 | Program output: -13                
Correct output: -79                 | Program output: 91                 
Correct output: -48                 | Program output: -48                
Correct output: -22                 | Program output: -9                 
Correct output: -62                 | Program output: -62                
Correct output: -98                 | Program output: -63                
Correct output: -73                 | Program output: 83                 
Correct output: -50                 | Program output: -50                
Correct output: -40                 | Program output: 98                 
Correct output: -76                 | Program output: -23                
Correct output: -54                 | Program output: -28                
Correct output: -54                 | Program output: -25                
Correct output: -70                 | Program output: -31                
Correct output: -36                 | Program output: -14                
Correct output: -70                 | Program output: 83                 
Correct output: -42                 | Program output: 37                 
Correct output: -37                 | Program output: -27                
Correct output: 0                   | Program output: 1                  
Correct output: -55                 | Program output: -19                
Correct output: -11                 | Program output: -11                
Correct output: -81                 | Program output: 67                 
Correct output: -96                 | Program output: -94                
Correct output: -99                 | Program output: 24                 
Correct output: -83                 | Program output: -49                
Correct output: -45                 | Program output: 32                 
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -21                
Correct output: -45                 | Program output: -35                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 2, :instruction exec_swap} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_add} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s} {:close 0, :instruction -91} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_and} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction print_integer} {:close 1, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_or} {:close 1, :instruction exec_s} {:close 0, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_div} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_newline} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction -85} {:close 1, :instruction integer_inc} {:close 0, :instruction 12} {:close 0, :instruction 37} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 1, :instruction exec_shove} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_if} {:close 1, :instruction in4} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 1, :instruction exec_y} {:close 0, :instruction print_newline} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_swap} {:close 1, :instruction boolean_rot} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_eq} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_eq})
Lexicase best program: (exec_swap () () boolean_frominteger boolean_pop integer_add integer_sub exec_empty integer_max boolean_dup exec_swap (integer_div exec_s (-91 boolean_invert_first_then_and boolean_and) (in2 integer_min exec_yankdup) (exec_do*count (integer_fromboolean integer_gt in3 integer_swap boolean_xor print_integer in2) boolean_invert_second_then_and exec_y_when_autoconstructing (integer_empty boolean_or) exec_s () (exec_yank print_integer exec_do*count (integer_div) integer_sub) (boolean_frominteger exec_flush integer_yankdup) exec_swap (boolean_stackdepth) (integer_rot boolean_flush exec_yankdup print_newline integer_max integer_dec exec_do*times (exec_dup_items) boolean_rot exec_k () (boolean_dup_times integer_inc boolean_empty integer_mult -85 integer_inc) 12 37 boolean_and boolean_dup_times exec_s (exec_shove () exec_do*while () boolean_dup_items exec_if (in4) (exec_rot (boolean_swap integer_add in2 exec_y () print_newline exec_flush integer_lt integer_empty exec_swap () (boolean_rot) exec_yank) (integer_swap integer_yankdup integer_gte boolean_yankdup) (boolean_invert_second_then_and boolean_stackdepth boolean_yank integer_dup_items exec_yankdup boolean_dup_items integer_eq) print_newline boolean_yank integer_div boolean_eq)) () ()))) ())
Lexicase best errors: [1 0 1 1 1 1 0 0 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 125
Percent parens: 0.256
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 2, :instruction exec_swap} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_add} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s} {:close 0, :instruction -91} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_and} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction print_integer} {:close 1, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_or} {:close 1, :instruction exec_s} {:close 0, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_div} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_newline} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction -85} {:close 1, :instruction integer_inc} {:close 0, :instruction 12} {:close 0, :instruction 37} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 1, :instruction exec_shove} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_if} {:close 1, :instruction in4} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 1, :instruction exec_y} {:close 0, :instruction print_newline} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_swap} {:close 1, :instruction boolean_rot} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_eq} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_eq})
Zero cases best program: (exec_swap () () boolean_frominteger boolean_pop integer_add integer_sub exec_empty integer_max boolean_dup exec_swap (integer_div exec_s (-91 boolean_invert_first_then_and boolean_and) (in2 integer_min exec_yankdup) (exec_do*count (integer_fromboolean integer_gt in3 integer_swap boolean_xor print_integer in2) boolean_invert_second_then_and exec_y_when_autoconstructing (integer_empty boolean_or) exec_s () (exec_yank print_integer exec_do*count (integer_div) integer_sub) (boolean_frominteger exec_flush integer_yankdup) exec_swap (boolean_stackdepth) (integer_rot boolean_flush exec_yankdup print_newline integer_max integer_dec exec_do*times (exec_dup_items) boolean_rot exec_k () (boolean_dup_times integer_inc boolean_empty integer_mult -85 integer_inc) 12 37 boolean_and boolean_dup_times exec_s (exec_shove () exec_do*while () boolean_dup_items exec_if (in4) (exec_rot (boolean_swap integer_add in2 exec_y () print_newline exec_flush integer_lt integer_empty exec_swap () (boolean_rot) exec_yank) (integer_swap integer_yankdup integer_gte boolean_yankdup) (boolean_invert_second_then_and boolean_stackdepth boolean_yank integer_dup_items exec_yankdup boolean_dup_items integer_eq) print_newline boolean_yank integer_div boolean_eq)) () ()))) ())
Zero cases best errors: [1 0 1 1 1 1 0 0 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 125
Percent parens: 0.256
--- Lexicase Population Statistics ---
Count of elite individuals by case: (2 3 6 5 1 5 4 3 4 4)
Population mean number of elite cases: 0.04
Count of perfect (error zero) individuals by case: (2 3 6 5 1 5 4 3 4 4)
Population mean number of perfect (error zero) cases: 0.04
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_add} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 2, :instruction integer_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_max} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in3} {:close 2, :instruction print_integer} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup} {:close 0, :instruction in2} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction -12} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_eq})
Best program: (exec_eq boolean_and exec_y_when_autoconstructing (integer_add integer_yank exec_empty exec_do*range () integer_fromboolean exec_do*while () boolean_pop exec_do*times () exec_do*count (integer_pop integer_dup)) integer_empty integer_max integer_eq boolean_yankdup in3 print_integer integer_fromboolean boolean_flush exec_yank integer_yank integer_dup_times integer_lt boolean_rot boolean_dup print_integer boolean_not integer_lte boolean_xor integer_add boolean_frominteger boolean_invert_second_then_and exec_swap () (boolean_dup_items boolean_stackdepth boolean_swap exec_pop (integer_lt integer_swap exec_dup (exec_yankdup integer_gte exec_y_when_autoconstructing (exec_do*while (exec_dup (in2 exec_do*count (integer_empty exec_stackdepth -12 exec_swap () (exec_stackdepth integer_eq)))))))))
Errors: [1 0 1 1 1 1 0 0 0 0]
Total: 5
Mean: 0.5
Genome size: 56
Size: 72
Percent parens: 0.222
--- Population Statistics ---
Average total errors in population: 9.963
Median total errors in population: 10
Error averages by case: (0.998 0.997 0.994 0.995 0.999 0.995 0.996 0.997 0.996 0.996)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.009
Average program size in population (points): 68.773
Average percent parens in population: 0.281
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.004
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.263
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 462078
--- Timings ---
Current time: 1559594143407 milliseconds
Total Time:           2.6 seconds
Initialization:       0.1 seconds,  3.8%
Reproduction:         0.7 seconds, 27.8%
Fitness Testing:      1.8 seconds, 68.4%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 637
Test mean error for best: 0.63700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -89                 | Program output: -9                 
Correct output: 63                  | Program output: 78                 
Correct output: -98                 | Program output: -98                
Correct output: 44                  | Program output: 44                 
Correct output: 50                  | Program output: 50                 
Correct output: -65                 | Program output: -65                
Correct output: -27                 | Program output: 10                 
Correct output: -72                 | Program output: -10                
Correct output: -25                 | Program output: 97                 
Correct output: -93                 | Program output: 89                 
Correct output: 95                  | Program output: 95                 
Correct output: -79                 | Program output: -79                
Correct output: 99                  | Program output: 99                 
Correct output: -97                 | Program output: -97                
Correct output: -55                 | Program output: -55                
Correct output: 0                   | Program output: 54                 
Correct output: 24                  | Program output: 29                 
Correct output: 26                  | Program output: 76                 
Correct output: 24                  | Program output: 86                 
Correct output: 8                   | Program output: 91                 
Correct output: 19                  | Program output: 34                 
Correct output: 8                   | Program output: 51                 
Correct output: 7                   | Program output: 7                  
Correct output: 23                  | Program output: 27                 
Correct output: 7                   | Program output: 48                 
Correct output: 3                   | Program output: 16                 
Correct output: 8                   | Program output: 8                  
Correct output: 5                   | Program output: 49                 
Correct output: 18                  | Program output: 52                 
Correct output: 13                  | Program output: 75                 
Correct output: 44                  | Program output: 77                 
Correct output: 16                  | Program output: 62                 
Correct output: 42                  | Program output: 91                 
Correct output: 2                   | Program output: 58                 
Correct output: 2                   | Program output: 80                 
Correct output: -55                 | Program output: 14                 
Correct output: -85                 | Program output: -64                
Correct output: -16                 | Program output: -8                 
Correct output: -75                 | Program output: 3                  
Correct output: -59                 | Program output: -51                
Correct output: -99                 | Program output: -42                
Correct output: -91                 | Program output: -91                
Correct output: -74                 | Program output: -74                
Correct output: -10                 | Program output: 48                 
Correct output: -31                 | Program output: -4                 
Correct output: -88                 | Program output: 15                 
Correct output: -28                 | Program output: 84                 
Correct output: -59                 | Program output: -24                
Correct output: -58                 | Program output: -58                
Correct output: -59                 | Program output: 76                 
Correct output: -99                 | Program output: -99                
Correct output: -79                 | Program output: -17                
Correct output: -77                 | Program output: -77                
Correct output: -44                 | Program output: 82                 
Correct output: -15                 | Program output: 60                 
Correct output: -34                 | Program output: -24                
Correct output: -93                 | Program output: -10                
Correct output: -98                 | Program output: -98                
Correct output: -39                 | Program output: 73                 
Correct output: -67                 | Program output: 33                 
Correct output: -56                 | Program output: -27                
Correct output: 11                  | Program output: 94                 
Correct output: -92                 | Program output: 24                 
Correct output: -45                 | Program output: -7                 
Correct output: 24                  | Program output: 25                 
Correct output: -100                | Program output: 2                  
Correct output: -36                 | Program output: -19                
Correct output: -62                 | Program output: 67                 
Correct output: -79                 | Program output: 81                 
Correct output: -48                 | Program output: -25                
Correct output: -22                 | Program output: 99                 
Correct output: -62                 | Program output: 28                 
Correct output: -98                 | Program output: -98                
Correct output: -73                 | Program output: -73                
Correct output: -50                 | Program output: 24                 
Correct output: -40                 | Program output: 0                  
Correct output: -76                 | Program output: -73                
Correct output: -54                 | Program output: -54                
Correct output: -54                 | Program output: -54                
Correct output: -70                 | Program output: -64                
Correct output: -36                 | Program output: -36                
Correct output: -70                 | Program output: -70                
Correct output: -42                 | Program output: 68                 
Correct output: -37                 | Program output: -37                
Correct output: 0                   | Program output: 75                 
Correct output: -55                 | Program output: -43                
Correct output: -11                 | Program output: 10                 
Correct output: -81                 | Program output: -81                
Correct output: -96                 | Program output: 14                 
Correct output: -99                 | Program output: -55                
Correct output: -83                 | Program output: -82                
Correct output: -45                 | Program output: -45                
Correct output: -75                 | Program output: -55                
Correct output: -92                 | Program output: 86                 
Correct output: -45                 | Program output: 54                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 2, :instruction exec_do*times} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_empty} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_lt} {:close 0, :instruction tagged_114} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_dec} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_lte} {:close 2, :instruction integer_sub} {:close 1, :instruction integer_sub} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_add} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction -56} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_k} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_newline} {:close 0, :instruction exec_rot} {:close 0, :instruction print_newline} {:close 0, :instruction exec_when} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_items} {:close 2, :instruction exec_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction -38})
Lexicase best program: (exec_do*times () boolean_and boolean_empty in2 boolean_swap integer_yank exec_while (integer_yankdup integer_add exec_empty exec_s (boolean_rot) (integer_lt) (tagged_114 print_integer integer_dup_times integer_flush exec_dup_times (exec_k (boolean_eq boolean_invert_second_then_and boolean_shove boolean_dup_times integer_shove integer_dec) (boolean_dup_items) boolean_invert_first_then_and integer_empty integer_lte integer_sub)) integer_sub) boolean_swap exec_k_when_autoconstructing (integer_add exec_s_when_autoconstructing (exec_y_when_autoconstructing (exec_pop (exec_y_when_autoconstructing (exec_eq -56 integer_rot) exec_k () (exec_y (integer_dup_times integer_sub integer_gt integer_empty boolean_shove integer_flush boolean_xor boolean_and exec_dup_items boolean_or boolean_stackdepth integer_yankdup exec_do*range (print_newline exec_rot (print_newline exec_when (integer_yankdup exec_rot (boolean_yankdup integer_flush exec_if (integer_yank integer_gt integer_sub exec_when (integer_gte boolean_pop boolean_yankdup boolean_dup_items exec_dup_times ()) integer_rot integer_stackdepth integer_mult exec_dup (integer_eq) integer_dup_items integer_gt exec_pop (boolean_stackdepth boolean_rot integer_inc -38)) ()) () ())) () ())))))) () ()) ())
Lexicase best errors: [0 1 1 0 1 0 0 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 120
Percent parens: 0.283
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 2, :instruction exec_do*times} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_empty} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_lt} {:close 0, :instruction tagged_114} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_dec} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_lte} {:close 2, :instruction integer_sub} {:close 1, :instruction integer_sub} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_add} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction -56} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_k} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_newline} {:close 0, :instruction exec_rot} {:close 0, :instruction print_newline} {:close 0, :instruction exec_when} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_items} {:close 2, :instruction exec_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction -38})
Zero cases best program: (exec_do*times () boolean_and boolean_empty in2 boolean_swap integer_yank exec_while (integer_yankdup integer_add exec_empty exec_s (boolean_rot) (integer_lt) (tagged_114 print_integer integer_dup_times integer_flush exec_dup_times (exec_k (boolean_eq boolean_invert_second_then_and boolean_shove boolean_dup_times integer_shove integer_dec) (boolean_dup_items) boolean_invert_first_then_and integer_empty integer_lte integer_sub)) integer_sub) boolean_swap exec_k_when_autoconstructing (integer_add exec_s_when_autoconstructing (exec_y_when_autoconstructing (exec_pop (exec_y_when_autoconstructing (exec_eq -56 integer_rot) exec_k () (exec_y (integer_dup_times integer_sub integer_gt integer_empty boolean_shove integer_flush boolean_xor boolean_and exec_dup_items boolean_or boolean_stackdepth integer_yankdup exec_do*range (print_newline exec_rot (print_newline exec_when (integer_yankdup exec_rot (boolean_yankdup integer_flush exec_if (integer_yank integer_gt integer_sub exec_when (integer_gte boolean_pop boolean_yankdup boolean_dup_items exec_dup_times ()) integer_rot integer_stackdepth integer_mult exec_dup (integer_eq) integer_dup_items integer_gt exec_pop (boolean_stackdepth boolean_rot integer_inc -38)) ()) () ())) () ())))))) () ()) ())
Zero cases best errors: [0 1 1 0 1 0 0 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 120
Percent parens: 0.283
--- Lexicase Population Statistics ---
Count of elite individuals by case: (44 182 42 524 40 44 51 40 44 526)
Population mean number of elite cases: 1.54
Count of perfect (error zero) individuals by case: (44 182 42 524 40 44 51 40 44 526)
Population mean number of perfect (error zero) cases: 1.54
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction exec_do*times} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_empty} {:close 0, :instruction in2} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_while} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_dec} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_invert_first_then_and} {:close 2, :instruction integer_sub} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_eq} {:close 0, :instruction -56} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_newline} {:close 0, :instruction exec_rot} {:close 0, :instruction print_newline} {:close 0, :instruction exec_when} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_items} {:close 2, :instruction exec_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction -38})
Best program: (exec_do*times () boolean_or boolean_and boolean_empty in2 integer_yank exec_while (integer_add boolean_dup_times boolean_rot) print_integer integer_dup_times integer_flush exec_dup_times (exec_k (boolean_eq boolean_invert_second_then_and boolean_shove integer_shove integer_dec) (boolean_dup_items) boolean_invert_first_then_and integer_sub) integer_fromboolean integer_sub exec_k_when_autoconstructing (exec_s_when_autoconstructing (boolean_frominteger exec_y_when_autoconstructing (exec_pop (exec_y_when_autoconstructing (integer_sub exec_eq -56 integer_rot) integer_sub integer_gt integer_empty integer_flush exec_do*times (boolean_xor boolean_and exec_dup_items boolean_stackdepth integer_yankdup print_newline exec_rot (print_newline exec_when (exec_rot (integer_flush exec_if (integer_yank integer_gt integer_sub exec_when (integer_gte boolean_pop boolean_dup_items exec_dup_times ()) integer_rot integer_stackdepth integer_mult exec_dup (integer_eq) integer_dup_items boolean_pop integer_gt exec_yank exec_pop (integer_mod exec_swap () (boolean_stackdepth boolean_rot integer_inc -38))) ()) () ())) () ())))) () ()) ())
Errors: [0 1 1 0 1 0 0 1 0 0]
Total: 4
Mean: 0.4
Genome size: 76
Size: 106
Percent parens: 0.283
--- Population Statistics ---
Average total errors in population: 8.463
Median total errors in population: 8
Error averages by case: (0.956 0.818 0.958 0.476 0.96 0.956 0.949 0.96 0.956 0.474)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 62.613
Average program size in population (points): 84.007
Average percent parens in population: 0.249
Minimum age in population: 1.0
Maximum age in population: 1.0
Average age in population: 1.0
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.006
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.213
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 1169139
--- Timings ---
Current time: 1559594145938 milliseconds
Total Time:           5.3 seconds
Initialization:       0.1 seconds,  1.9%
Reproduction:         2.1 seconds, 38.6%
Fitness Testing:      2.7 seconds, 51.2%
Report:               0.4 seconds,  8.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 498
Test mean error for best: 0.49800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -89                 | Program output: -9                 
Correct output: 63                  | Program output: 63                 
Correct output: -98                 | Program output: -98                
Correct output: 44                  | Program output: 44                 
Correct output: 50                  | Program output: 50                 
Correct output: -65                 | Program output: -65                
Correct output: -27                 | Program output: (integer_max exec_yank integer_gt integer_yank in4 integer_empty exec_empty exec_do*count ())(integer_max exec_yank integer_gt integer_yank in4 integer_empty exec_empty exec_do*count ())
Correct output: -72                 | Program output: -10                
Correct output: -25                 | Program output: 97                 
Correct output: -93                 | Program output: -93                
Correct output: 95                  | Program output: 95                 
Correct output: -79                 | Program output: -79                
Correct output: 99                  | Program output: 99                 
Correct output: -97                 | Program output: -97                
Correct output: -55                 | Program output: -55                
Correct output: 0                   | Program output: 0                  
Correct output: 24                  | Program output: 29                 
Correct output: 26                  | Program output: 26                 
Correct output: 24                  | Program output: 24                 
Correct output: 8                   | Program output: 25                 
Correct output: 19                  | Program output: 34                 
Correct output: 8                   | Program output: 36                 
Correct output: 7                   | Program output: 7                  
Correct output: 23                  | Program output: 27                 
Correct output: 7                   | Program output: 7                  
Correct output: 3                   | Program output:                    
Correct output: 8                   | Program output: 8                  
Correct output: 5                   | Program output: 49                 
Correct output: 18                  | Program output: 52                 
Correct output: 13                  | Program output: 13                 
Correct output: 44                  | Program output: 49                 
Correct output: 16                  | Program output: 62                 
Correct output: 42                  | Program output: 65                 
Correct output: 2                   | Program output: 5                  
Correct output: 2                   | Program output: 80                 
Correct output: -55                 | Program output: -55                
Correct output: -85                 | Program output: -64                
Correct output: -16                 | Program output: -16                
Correct output: -75                 | Program output: 3                  
Correct output: -59                 | Program output: -51                
Correct output: -99                 | Program output: -42                
Correct output: -91                 | Program output: -91                
Correct output: -74                 | Program output: -74                
Correct output: -10                 | Program output: 48                 
Correct output: -31                 | Program output: -31                
Correct output: -88                 | Program output: 15                 
Correct output: -28                 | Program output: -28                
Correct output: -59                 | Program output: -59                
Correct output: -58                 | Program output: -58                
Correct output: -59                 | Program output: 76                 
Correct output: -99                 | Program output: -99                
Correct output: -79                 | Program output: -79                
Correct output: -77                 | Program output: -77                
Correct output: -44                 | Program output: 82                 
Correct output: -15                 | Program output: 60                 
Correct output: -34                 | Program output: -24                
Correct output: -93                 | Program output: -10                
Correct output: -98                 | Program output: -98                
Correct output: -39                 | Program output: 73                 
Correct output: -67                 | Program output: -63                
Correct output: -56                 | Program output: -27                
Correct output: 11                  | Program output:                    
Correct output: -92                 | Program output: 24                 
Correct output: -45                 | Program output: -45                
Correct output: 24                  | Program output: 25                 
Correct output: -100                | Program output: 2                  
Correct output: -36                 | Program output: -19                
Correct output: -62                 | Program output: -13                
Correct output: -79                 | Program output: 81                 
Correct output: -48                 | Program output: -48                
Correct output: -22                 | Program output: -9                 
Correct output: -62                 | Program output: -62                
Correct output: -98                 | Program output: -98                
Correct output: -73                 | Program output: -73                
Correct output: -50                 | Program output: 24                 
Correct output: -40                 | Program output: 0                  
Correct output: -76                 | Program output: -73                
Correct output: -54                 | Program output: -54                
Correct output: -54                 | Program output: -54                
Correct output: -70                 | Program output: -64                
Correct output: -36                 | Program output: -36                
Correct output: -70                 | Program output: -70                
Correct output: -42                 | Program output: 37                 
Correct output: -37                 | Program output: -37                
Correct output: 0                   | Program output: 1                  
Correct output: -55                 | Program output:                    
Correct output: -11                 | Program output: -11                
Correct output: -81                 | Program output: -81                
Correct output: -96                 | Program output: 14                 
Correct output: -99                 | Program output: -55                
Correct output: -83                 | Program output: -82                
Correct output: -45                 | Program output: -45                
Correct output: -75                 | Program output: -55                
Correct output: -92                 | Program output: 86                 
Correct output: -45                 | Program output: 54                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_flush} {:close 2, :instruction exec_do*times} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_inc} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_k} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_or} {:close 0, :instruction tagged_10} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_div} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_when} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_while} {:close 0, :instruction exec_dup} {:close 0, :instruction print_exec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_yank} {:close 0, :instruction in4} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*count})
Lexicase best program: (boolean_dup_times exec_rot (integer_flush exec_do*times ()) (exec_rot (integer_inc) (in3 integer_rot exec_k () (integer_dec) integer_min) (in2 in4 exec_do*range (exec_s_when_autoconstructing (boolean_not integer_add in1) (exec_yankdup integer_empty print_integer boolean_yank) (boolean_or tagged_10 exec_flush) integer_empty integer_eq integer_div exec_rot (integer_empty exec_yank) (boolean_shove boolean_rot boolean_eq integer_empty boolean_invert_first_then_and) (exec_when () integer_empty boolean_yank integer_lte exec_s_when_autoconstructing (boolean_eq integer_empty boolean_yankdup integer_dup_items boolean_rot) (integer_shove exec_while (exec_dup (print_exec (integer_max exec_yank integer_gt integer_yank in4 integer_empty exec_empty exec_do*count ())))) ())))) ())
Lexicase best errors: [0 1 0 0 1 0 0 1 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 83
Percent parens: 0.301
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_flush} {:close 2, :instruction exec_do*times} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_inc} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_k} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_or} {:close 0, :instruction tagged_10} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_div} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_when} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_while} {:close 0, :instruction exec_dup} {:close 0, :instruction print_exec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_yank} {:close 0, :instruction in4} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*count})
Zero cases best program: (boolean_dup_times exec_rot (integer_flush exec_do*times ()) (exec_rot (integer_inc) (in3 integer_rot exec_k () (integer_dec) integer_min) (in2 in4 exec_do*range (exec_s_when_autoconstructing (boolean_not integer_add in1) (exec_yankdup integer_empty print_integer boolean_yank) (boolean_or tagged_10 exec_flush) integer_empty integer_eq integer_div exec_rot (integer_empty exec_yank) (boolean_shove boolean_rot boolean_eq integer_empty boolean_invert_first_then_and) (exec_when () integer_empty boolean_yank integer_lte exec_s_when_autoconstructing (boolean_eq integer_empty boolean_yankdup integer_dup_items boolean_rot) (integer_shove exec_while (exec_dup (print_exec (integer_max exec_yank integer_gt integer_yank in4 integer_empty exec_empty exec_do*count ())))) ())))) ())
Zero cases best errors: [0 1 0 0 1 0 0 1 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 83
Percent parens: 0.301
--- Lexicase Population Statistics ---
Count of elite individuals by case: (237 170 8 237 75 22 493 73 165 165)
Population mean number of elite cases: 1.64
Count of perfect (error zero) individuals by case: (237 170 8 237 75 22 493 73 165 165)
Population mean number of perfect (error zero) cases: 1.64
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_flush} {:close 2, :instruction exec_do*times} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_inc} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_k} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_or} {:close 0, :instruction tagged_10} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_div} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_when} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_while} {:close 0, :instruction exec_dup} {:close 0, :instruction print_exec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_yank} {:close 0, :instruction in4} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*count})
Best program: (boolean_dup_times exec_rot (integer_flush exec_do*times ()) (exec_rot (integer_inc) (in3 integer_rot exec_k () (integer_dec) integer_min) (in2 in4 exec_do*range (exec_s_when_autoconstructing (boolean_not integer_add in1) (exec_yankdup integer_empty print_integer boolean_yank) (boolean_or tagged_10 exec_flush) integer_empty integer_eq integer_div exec_rot (integer_empty exec_yank) (boolean_shove boolean_rot boolean_eq integer_empty boolean_invert_first_then_and) (exec_when () integer_empty boolean_yank integer_lte exec_s_when_autoconstructing (boolean_eq integer_empty boolean_yankdup integer_dup_items boolean_rot) (integer_shove exec_while (exec_dup (print_exec (integer_max exec_yank integer_gt integer_yank in4 integer_empty exec_empty exec_do*count ())))) ())))) ())
Errors: [0 1 0 0 1 0 0 1 1 1]
Total: 5
Mean: 0.5
Genome size: 58
Size: 83
Percent parens: 0.301
--- Population Statistics ---
Average total errors in population: 8.355
Median total errors in population: 9
Error averages by case: (0.763 0.83 0.992 0.763 0.925 0.978 0.507 0.927 0.835 0.835)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 60.713
Average program size in population (points): 85.115
Average percent parens in population: 0.293
Minimum age in population: 2.0
Maximum age in population: 2.0
Average age in population: 2.0
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.006
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.169
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1695381
--- Timings ---
Current time: 1559594148049 milliseconds
Total Time:           7.5 seconds
Initialization:       0.1 seconds,  1.4%
Reproduction:         3.3 seconds, 43.7%
Fitness Testing:      3.3 seconds, 44.8%
Report:               0.8 seconds, 10.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 656
Test mean error for best: 0.65600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -89                 | Program output: -9                 
Correct output: 63                  | Program output: 78                 
Correct output: -98                 | Program output: -39                
Correct output: 44                  | Program output: 81                 
Correct output: 50                  | Program output: 50                 
Correct output: -65                 | Program output: -65                
Correct output: -27                 | Program output: 10                 
Correct output: -72                 | Program output: -10                
Correct output: -25                 | Program output: 97                 
Correct output: -93                 | Program output: 89                 
Correct output: 95                  | Program output: 95                 
Correct output: -79                 | Program output: -79                
Correct output: 99                  | Program output: 99                 
Correct output: -97                 | Program output: -97                
Correct output: -55                 | Program output: -55                
Correct output: 0                   | Program output: 15                 
Correct output: 24                  | Program output: 26                 
Correct output: 26                  | Program output: 94                 
Correct output: 24                  | Program output: 61                 
Correct output: 8                   | Program output: 95                 
Correct output: 19                  | Program output: 94                 
Correct output: 8                   | Program output: 39                 
Correct output: 7                   | Program output: 40                 
Correct output: 23                  | Program output: 43                 
Correct output: 7                   | Program output: 85                 
Correct output: 3                   | Program output: 3                  
Correct output: 8                   | Program output: 33                 
Correct output: 5                   | Program output: 50                 
Correct output: 18                  | Program output: 18                 
Correct output: 13                  | Program output: 96                 
Correct output: 44                  | Program output: 83                 
Correct output: 16                  | Program output: 58                 
Correct output: 42                  | Program output: 100                
Correct output: 2                   | Program output: 74                 
Correct output: 2                   | Program output: 2                  
Correct output: -55                 | Program output: 31                 
Correct output: -85                 | Program output: -85                
Correct output: -16                 | Program output: 13                 
Correct output: -75                 | Program output: -35                
Correct output: -59                 | Program output: -59                
Correct output: -99                 | Program output: -7                 
Correct output: -91                 | Program output: -29                
Correct output: -74                 | Program output: 34                 
Correct output: -10                 | Program output: 2                  
Correct output: -31                 | Program output: 56                 
Correct output: -88                 | Program output: -83                
Correct output: -28                 | Program output: 69                 
Correct output: -59                 | Program output: 52                 
Correct output: -58                 | Program output: -49                
Correct output: -59                 | Program output: -47                
Correct output: -99                 | Program output: 27                 
Correct output: -79                 | Program output: 37                 
Correct output: -77                 | Program output: 64                 
Correct output: -44                 | Program output: -34                
Correct output: -15                 | Program output: -15                
Correct output: -34                 | Program output: -34                
Correct output: -93                 | Program output: 13                 
Correct output: -98                 | Program output: 31                 
Correct output: -39                 | Program output: -39                
Correct output: -67                 | Program output: 17                 
Correct output: -56                 | Program output: -34                
Correct output: 11                  | Program output: 11                 
Correct output: -92                 | Program output: -92                
Correct output: -45                 | Program output: 23                 
Correct output: 24                  | Program output: 24                 
Correct output: -100                | Program output: -100               
Correct output: -36                 | Program output: 1                  
Correct output: -62                 | Program output: 49                 
Correct output: -79                 | Program output: 73                 
Correct output: -48                 | Program output: 50                 
Correct output: -22                 | Program output: 27                 
Correct output: -62                 | Program output: 42                 
Correct output: -98                 | Program output: -54                
Correct output: -73                 | Program output: 51                 
Correct output: -50                 | Program output: -34                
Correct output: -40                 | Program output: -40                
Correct output: -76                 | Program output: -25                
Correct output: -54                 | Program output: 0                  
Correct output: -54                 | Program output: -50                
Correct output: -70                 | Program output: -70                
Correct output: -36                 | Program output: 62                 
Correct output: -70                 | Program output: 36                 
Correct output: -42                 | Program output: 53                 
Correct output: -37                 | Program output: 57                 
Correct output: 0                   | Program output: 27                 
Correct output: -55                 | Program output: 3                  
Correct output: -11                 | Program output: 44                 
Correct output: -81                 | Program output: -78                
Correct output: -96                 | Program output: -96                
Correct output: -99                 | Program output: -99                
Correct output: -83                 | Program output: -83                
Correct output: -45                 | Program output: -35                
Correct output: -75                 | Program output: -28                
Correct output: -92                 | Program output: -92                
Correct output: -45                 | Program output: -45                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_dup} {:close 0, :instruction tag_integer_949} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_mod} {:close 1, :instruction boolean_and} {:close 0, :instruction in1} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_when} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_inc} {:close 0, :instruction 82} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction integer_eq} {:close 1, :instruction print_integer} {:close 0, :instruction in1} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_pop} {:close 0, :instruction -9} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_stackdepth})
Lexicase best program: (integer_dup tag_integer_949 exec_do*range (exec_eq integer_pop integer_mod) boolean_and in1 integer_inc integer_yank exec_s_when_autoconstructing (exec_when () integer_lt integer_lte exec_stackdepth boolean_invert_second_then_and exec_empty boolean_dup_items integer_gt) (integer_inc 82 in4 in1 exec_stackdepth) (in3 integer_eq print_integer) in1 exec_swap () (boolean_flush exec_pop (print_integer boolean_flush integer_pop) -9 boolean_not boolean_pop boolean_dup_times exec_do*count (integer_stackdepth)))
Lexicase best errors: [1 0 0 0 0 0 1 1 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 50
Percent parens: 0.200
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_dup} {:close 0, :instruction tag_integer_949} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_mod} {:close 1, :instruction boolean_and} {:close 0, :instruction in1} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_when} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_inc} {:close 0, :instruction 82} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction integer_eq} {:close 1, :instruction print_integer} {:close 0, :instruction in1} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_pop} {:close 0, :instruction -9} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_stackdepth})
Zero cases best program: (integer_dup tag_integer_949 exec_do*range (exec_eq integer_pop integer_mod) boolean_and in1 integer_inc integer_yank exec_s_when_autoconstructing (exec_when () integer_lt integer_lte exec_stackdepth boolean_invert_second_then_and exec_empty boolean_dup_items integer_gt) (integer_inc 82 in4 in1 exec_stackdepth) (in3 integer_eq print_integer) in1 exec_swap () (boolean_flush exec_pop (print_integer boolean_flush integer_pop) -9 boolean_not boolean_pop boolean_dup_times exec_do*count (integer_stackdepth)))
Zero cases best errors: [1 0 0 0 0 0 1 1 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 50
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (104 143 147 145 147 489 71 95 147 215)
Population mean number of elite cases: 1.70
Count of perfect (error zero) individuals by case: (104 143 147 145 147 489 71 95 147 215)
Population mean number of perfect (error zero) cases: 1.70
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_rot} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction tag_boolean_538} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_min} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_rot} {:close 0, :instruction tagged_743} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup} {:close 3, :instruction boolean_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 1, :instruction exec_when} {:close 0, :instruction exec_s} {:close 1, :instruction tagged_480} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_add} {:close 0, :instruction in3} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 2, :instruction integer_rot} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 1, :instruction tag_boolean_604} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_k} {:close 0, :instruction tag_exec_707} {:close 1, :instruction tag_integer_962} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_if} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_div})
Best program: (boolean_and boolean_dup_times boolean_rot boolean_invert_second_then_and boolean_dup integer_add integer_lte boolean_stackdepth exec_eq tag_boolean_538 integer_gte integer_min integer_rot exec_empty integer_shove boolean_yankdup integer_dup_items in1 integer_dup print_integer integer_fromboolean exec_dup_items exec_stackdepth boolean_rot tagged_743 integer_dup exec_yankdup exec_y (exec_do*range (boolean_dup boolean_dup)) boolean_eq exec_do*times (boolean_flush in1) exec_when () exec_s (tagged_480) (boolean_stackdepth) (integer_inc boolean_dup_items integer_yankdup) integer_swap exec_while (integer_lte integer_fromboolean print_boolean) integer_add in3 boolean_invert_first_then_and integer_sub exec_s_when_autoconstructing (exec_do*while (integer_rot)) (exec_flush) (boolean_eq in3 tag_boolean_604) integer_fromboolean boolean_invert_second_then_and print_integer integer_eq boolean_yankdup boolean_pop boolean_shove integer_fromboolean exec_k () (tag_exec_707 (tag_integer_962) exec_swap (integer_dup) (boolean_eq exec_if (integer_swap) (boolean_shove integer_div))))
Errors: [1 0 0 0 0 0 1 1 0 1]
Total: 4
Mean: 0.4
Genome size: 76
Size: 96
Percent parens: 0.208
--- Population Statistics ---
Average total errors in population: 8.297
Median total errors in population: 9
Error averages by case: (0.896 0.857 0.853 0.855 0.853 0.511 0.929 0.905 0.853 0.785)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.669
Average program size in population (points): 72.179
Average percent parens in population: 0.303
Minimum age in population: 3.0
Maximum age in population: 3.0
Average age in population: 3.0
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.007
Error (vector) diversity:			 0.027
Behavioral diversity:				 0.328
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 2208134
--- Timings ---
Current time: 1559594150500 milliseconds
Total Time:           9.5 seconds
Initialization:       0.1 seconds,  1.1%
Reproduction:         4.5 seconds, 47.3%
Fitness Testing:      3.9 seconds, 40.9%
Report:               1.0 seconds, 10.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 481
Test mean error for best: 0.48100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -89                 | Program output: -9                 
Correct output: 63                  | Program output: 63                 
Correct output: -98                 | Program output: -39                
Correct output: 44                  | Program output: 44                 
Correct output: 50                  | Program output: 50                 
Correct output: -65                 | Program output: -65                
Correct output: -27                 | Program output:                    
Correct output: -72                 | Program output: -10                
Correct output: -25                 | Program output: 97                 
Correct output: -93                 | Program output: -93                
Correct output: 95                  | Program output: 95                 
Correct output: -79                 | Program output: -79                
Correct output: 99                  | Program output: 99                 
Correct output: -97                 | Program output: -97                
Correct output: -55                 | Program output: -55                
Correct output: 0                   | Program output: 0                  
Correct output: 24                  | Program output: 26                 
Correct output: 26                  | Program output:                    
Correct output: 24                  | Program output: 24                 
Correct output: 8                   | Program output: 25                 
Correct output: 19                  | Program output:                    
Correct output: 8                   | Program output: 36                 
Correct output: 7                   | Program output: 36                 
Correct output: 23                  | Program output: 31                 
Correct output: 7                   | Program output: 7                  
Correct output: 3                   | Program output:                    
Correct output: 8                   | Program output:                    
Correct output: 5                   | Program output: 50                 
Correct output: 18                  | Program output: 18                 
Correct output: 13                  | Program output: 13                 
Correct output: 44                  | Program output: 49                 
Correct output: 16                  | Program output: 58                 
Correct output: 42                  | Program output: 65                 
Correct output: 2                   | Program output:                    
Correct output: 2                   | Program output: 2                  
Correct output: -55                 | Program output: -55                
Correct output: -85                 | Program output: -85                
Correct output: -16                 | Program output: -16                
Correct output: -75                 | Program output:                    
Correct output: -59                 | Program output: -59                
Correct output: -99                 | Program output: -99                
Correct output: -91                 | Program output: -29                
Correct output: -74                 | Program output: -46                
Correct output: -10                 | Program output: -10                
Correct output: -31                 | Program output: -31                
Correct output: -88                 | Program output: -83                
Correct output: -28                 | Program output: -28                
Correct output: -59                 | Program output: -59                
Correct output: -58                 | Program output: -49                
Correct output: -59                 | Program output:                    
Correct output: -99                 | Program output: -50                
Correct output: -79                 | Program output: -79                
Correct output: -77                 | Program output: -14                
Correct output: -44                 | Program output:                    
Correct output: -15                 | Program output: -15                
Correct output: -34                 | Program output: -34                
Correct output: -93                 | Program output: 13                 
Correct output: -98                 | Program output: -61                
Correct output: -39                 | Program output: -39                
Correct output: -67                 | Program output: -63                
Correct output: -56                 | Program output: -34                
Correct output: 11                  | Program output:                    
Correct output: -92                 | Program output: -92                
Correct output: -45                 | Program output: -45                
Correct output: 24                  | Program output: 24                 
Correct output: -100                | Program output: -100               
Correct output: -36                 | Program output: -36                
Correct output: -62                 | Program output: -13                
Correct output: -79                 | Program output: 73                 
Correct output: -48                 | Program output: -48                
Correct output: -22                 | Program output: -9                 
Correct output: -62                 | Program output: -62                
Correct output: -98                 | Program output: -63                
Correct output: -73                 | Program output: 51                 
Correct output: -50                 | Program output: -50                
Correct output: -40                 | Program output: -40                
Correct output: -76                 | Program output: -25                
Correct output: -54                 | Program output: -28                
Correct output: -54                 | Program output: -50                
Correct output: -70                 | Program output: -70                
Correct output: -36                 | Program output: -14                
Correct output: -70                 | Program output: 36                 
Correct output: -42                 | Program output: 37                 
Correct output: -37                 | Program output: -27                
Correct output: 0                   | Program output: 1                  
Correct output: -55                 | Program output: -19                
Correct output: -11                 | Program output: -11                
Correct output: -81                 | Program output: -78                
Correct output: -96                 | Program output: -96                
Correct output: -99                 | Program output: -99                
Correct output: -83                 | Program output: -83                
Correct output: -45                 | Program output: -35                
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -92                
Correct output: -45                 | Program output: -45                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_flush} {:close 2, :instruction exec_do*times} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_inc} {:close 0, :instruction in3} {:close 1, :instruction exec_k} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_dup} {:close 1, :instruction in1} {:close 0, :instruction tag_exec_386} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_or} {:close 0, :instruction tagged_10} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_div} {:close 0, :instruction integer_empty} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_while} {:close 0, :instruction print_exec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_yank} {:close 0, :instruction 2} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction in4} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*count})
Lexicase best program: (boolean_dup_times exec_rot (integer_flush exec_do*times ()) (exec_rot (integer_inc) (in3 exec_k () (integer_dec) integer_min) (in2 in4 exec_do*range (exec_s_when_autoconstructing (boolean_not integer_add exec_dup (in1) tag_exec_386 (exec_stackdepth exec_yankdup integer_empty print_integer boolean_yank) boolean_or tagged_10 exec_flush) (integer_empty integer_eq integer_div integer_empty print_boolean exec_yank) (integer_mult) boolean_shove boolean_rot boolean_eq integer_empty exec_when () integer_dup_times integer_empty boolean_yank integer_lte exec_s_when_autoconstructing (boolean_eq boolean_yankdup integer_dup_items boolean_rot) (integer_shove exec_while (print_exec (integer_max exec_yank 2 boolean_yank integer_gt in4 integer_eq integer_empty exec_empty exec_do*count ()))) ()))) ())
Lexicase best errors: [0 0 1 1 0 0 0 1 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 84
Percent parens: 0.274
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_flush} {:close 2, :instruction exec_do*times} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_inc} {:close 0, :instruction in3} {:close 1, :instruction exec_k} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_dup} {:close 1, :instruction in1} {:close 0, :instruction tag_exec_386} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_or} {:close 0, :instruction tagged_10} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_div} {:close 0, :instruction integer_empty} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_while} {:close 0, :instruction print_exec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_yank} {:close 0, :instruction 2} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction in4} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*count})
Zero cases best program: (boolean_dup_times exec_rot (integer_flush exec_do*times ()) (exec_rot (integer_inc) (in3 exec_k () (integer_dec) integer_min) (in2 in4 exec_do*range (exec_s_when_autoconstructing (boolean_not integer_add exec_dup (in1) tag_exec_386 (exec_stackdepth exec_yankdup integer_empty print_integer boolean_yank) boolean_or tagged_10 exec_flush) (integer_empty integer_eq integer_div integer_empty print_boolean exec_yank) (integer_mult) boolean_shove boolean_rot boolean_eq integer_empty exec_when () integer_dup_times integer_empty boolean_yank integer_lte exec_s_when_autoconstructing (boolean_eq boolean_yankdup integer_dup_items boolean_rot) (integer_shove exec_while (print_exec (integer_max exec_yank 2 boolean_yank integer_gt in4 integer_eq integer_empty exec_empty exec_do*count ()))) ()))) ())
Zero cases best errors: [0 0 1 1 0 0 0 1 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 84
Percent parens: 0.274
--- Lexicase Population Statistics ---
Count of elite individuals by case: (329 282 49 60 28 276 457 44 41 61)
Population mean number of elite cases: 1.63
Count of perfect (error zero) individuals by case: (329 282 49 60 28 276 457 44 41 61)
Population mean number of perfect (error zero) cases: 1.63
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_flush} {:close 2, :instruction exec_do*times} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_inc} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction in1} {:close 1, :instruction exec_k} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction tag_exec_434} {:close 0, :instruction integer_add} {:close 1, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_or} {:close 0, :instruction tagged_10} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_when} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_while} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_max} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_yank} {:close 0, :instruction in4} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*count})
Best program: (boolean_dup_times integer_flush exec_do*times () integer_mod integer_inc in3 integer_rot in1 exec_k () (integer_dec) integer_min in2 in4 exec_do*range (exec_s_when_autoconstructing (tag_exec_434 (integer_add exec_when () in1) exec_yankdup integer_empty print_integer boolean_yank) (boolean_or tagged_10 integer_empty boolean_or integer_eq exec_rot (integer_empty exec_yank) (boolean_shove integer_yankdup boolean_eq integer_empty boolean_invert_first_then_and) (exec_when () integer_empty boolean_yank integer_lte boolean_swap exec_s_when_autoconstructing (boolean_eq integer_empty boolean_yankdup integer_dup_items boolean_rot) (integer_shove exec_while (exec_dup (integer_max integer_swap boolean_flush) exec_yank integer_empty) integer_fromboolean integer_gt integer_yank in4 integer_empty exec_empty exec_do*count ()) ())) ()))
Errors: [0 0 1 1 0 0 0 1 0 1]
Total: 4
Mean: 0.4
Genome size: 62
Size: 82
Percent parens: 0.244
--- Population Statistics ---
Average total errors in population: 8.373
Median total errors in population: 9
Error averages by case: (0.671 0.718 0.951 0.94 0.972 0.724 0.543 0.956 0.959 0.939)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 58.365
Average program size in population (points): 82.153
Average percent parens in population: 0.290
Minimum age in population: 4.0
Maximum age in population: 4.0
Average age in population: 4.0
Median age in population: 4.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.007
Error (vector) diversity:			 0.026
Behavioral diversity:				 0.412
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 2900055
--- Timings ---
Current time: 1559594153047 milliseconds
Total Time:          11.9 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:         5.6 seconds, 47.0%
Fitness Testing:      4.6 seconds, 38.1%
Report:               1.7 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 507
Test mean error for best: 0.50700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -89                 | Program output: -89                
Correct output: 63                  | Program output: 63                 
Correct output: -98                 | Program output: -39                
Correct output: 44                  | Program output: 44                 
Correct output: 50                  | Program output: 50                 
Correct output: -65                 | Program output: -47                
Correct output: -27                 | Program output: (tag_integer_811)(tag_integer_811)(tag_integer_811)(tag_integer_811)-37
Correct output: -72                 | Program output: -72                
Correct output: -25                 | Program output: -25                
Correct output: -93                 | Program output: -93                
Correct output: 95                  | Program output: 95                 
Correct output: -79                 | Program output: -79                
Correct output: 99                  | Program output: 99                 
Correct output: -97                 | Program output: -97                
Correct output: -55                 | Program output: -55                
Correct output: 0                   | Program output: 0                  
Correct output: 24                  | Program output: 24                 
Correct output: 26                  | Program output: 26                 
Correct output: 24                  | Program output: 24                 
Correct output: 8                   | Program output: 8                  
Correct output: 19                  | Program output: 19                 
Correct output: 8                   | Program output: 8                  
Correct output: 7                   | Program output: 36                 
Correct output: 23                  | Program output: 23                 
Correct output: 7                   | Program output: 7                  
Correct output: 3                   | Program output:                    
Correct output: 8                   | Program output: 44                 
Correct output: 5                   | Program output: 5                  
Correct output: 18                  | Program output: 72                 
Correct output: 13                  | Program output: 13                 
Correct output: 44                  | Program output: 44                 
Correct output: 16                  | Program output: 16                 
Correct output: 42                  | Program output: 42                 
Correct output: 2                   | Program output: 2                  
Correct output: 2                   | Program output: 45                 
Correct output: -55                 | Program output: -55                
Correct output: -85                 | Program output: -23                
Correct output: -16                 | Program output: -16                
Correct output: -75                 | Program output: -75                
Correct output: -59                 | Program output: 47                 
Correct output: -99                 | Program output: -86                
Correct output: -91                 | Program output: 45                 
Correct output: -74                 | Program output: -46                
Correct output: -10                 | Program output: -9                 
Correct output: -31                 | Program output: -31                
Correct output: -88                 | Program output: -88                
Correct output: -28                 | Program output: -28                
Correct output: -59                 | Program output: -59                
Correct output: -58                 | Program output: 60                 
Correct output: -59                 | Program output: -59                
Correct output: -99                 | Program output: -50                
Correct output: -79                 | Program output: -79                
Correct output: -77                 | Program output: -54                
Correct output: -44                 | Program output: 55                 
Correct output: -15                 | Program output: 51                 
Correct output: -34                 | Program output: 78                 
Correct output: -93                 | Program output: -93                
Correct output: -98                 | Program output: -61                
Correct output: -39                 | Program output: 80                 
Correct output: -67                 | Program output: -67                
Correct output: -56                 | Program output: -56                
Correct output: 11                  | Program output: 62                 
Correct output: -92                 | Program output: 5                  
Correct output: -45                 | Program output: -45                
Correct output: 24                  | Program output: 53                 
Correct output: -100                | Program output: 77                 
Correct output: -36                 | Program output: -11                
Correct output: -62                 | Program output: -62                
Correct output: -79                 | Program output: -79                
Correct output: -48                 | Program output: -48                
Correct output: -22                 | Program output: -22                
Correct output: -62                 | Program output: -62                
Correct output: -98                 | Program output: -68                
Correct output: -73                 | Program output: 58                 
Correct output: -50                 | Program output: 37                 
Correct output: -40                 | Program output: 37                 
Correct output: -76                 | Program output: -76                
Correct output: -54                 | Program output: -19                
Correct output: -54                 | Program output: 94                 
Correct output: -70                 | Program output: 87                 
Correct output: -36                 | Program output: -14                
Correct output: -70                 | Program output: -20                
Correct output: -42                 | Program output: -42                
Correct output: -37                 | Program output: -34                
Correct output: 0                   | Program output: 0                  
Correct output: -55                 | Program output:                    
Correct output: -11                 | Program output: -11                
Correct output: -81                 | Program output: -59                
Correct output: -96                 | Program output: -63                
Correct output: -99                 | Program output: 78                 
Correct output: -83                 | Program output: 38                 
Correct output: -45                 | Program output: 75                 
Correct output: -75                 | Program output: 24                 
Correct output: -92                 | Program output: -70                
Correct output: -45                 | Program output: 49                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_rot} {:close 0, :instruction integer_yank} {:close 2, :instruction exec_do*times} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_inc} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_k} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 1, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_yank} {:close 0, :instruction tagged_10} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_div} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_when} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_while} {:close 0, :instruction exec_dup} {:close 0, :instruction print_exec} {:close 0, :instruction integer_max} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_div} {:close 0, :instruction in4} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*count})
Lexicase best program: (exec_rot (integer_yank exec_do*times ()) (exec_rot (integer_inc) (in3 integer_rot exec_k () (integer_dec) integer_min) (in4 exec_do*range (exec_s_when_autoconstructing (boolean_not in1) (exec_yankdup integer_empty print_integer boolean_yank) (tagged_10 integer_mult exec_flush) integer_empty integer_eq integer_lte integer_div exec_rot (integer_empty exec_yank) (boolean_shove boolean_rot boolean_eq exec_dup_items boolean_invert_first_then_and) (exec_when () integer_empty integer_lte integer_empty integer_dup_items integer_shove exec_while (exec_dup (print_exec (integer_max integer_yank integer_div) in4 integer_empty exec_do*count ())))))) ())
Lexicase best errors: [0 0 0 0 0 0 1 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 71
Percent parens: 0.310
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_rot} {:close 0, :instruction integer_yank} {:close 2, :instruction exec_do*times} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_inc} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_k} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 1, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_yank} {:close 0, :instruction tagged_10} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_div} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_when} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_while} {:close 0, :instruction exec_dup} {:close 0, :instruction print_exec} {:close 0, :instruction integer_max} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_div} {:close 0, :instruction in4} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*count})
Zero cases best program: (exec_rot (integer_yank exec_do*times ()) (exec_rot (integer_inc) (in3 integer_rot exec_k () (integer_dec) integer_min) (in4 exec_do*range (exec_s_when_autoconstructing (boolean_not in1) (exec_yankdup integer_empty print_integer boolean_yank) (tagged_10 integer_mult exec_flush) integer_empty integer_eq integer_lte integer_div exec_rot (integer_empty exec_yank) (boolean_shove boolean_rot boolean_eq exec_dup_items boolean_invert_first_then_and) (exec_when () integer_empty integer_lte integer_empty integer_dup_items integer_shove exec_while (exec_dup (print_exec (integer_max integer_yank integer_div) in4 integer_empty exec_do*count ())))))) ())
Zero cases best errors: [0 0 0 0 0 0 1 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 71
Percent parens: 0.310
--- Lexicase Population Statistics ---
Count of elite individuals by case: (140 147 239 457 122 121 97 119 22 320)
Population mean number of elite cases: 1.78
Count of perfect (error zero) individuals by case: (140 147 239 457 122 121 97 119 22 320)
Population mean number of perfect (error zero) cases: 1.78
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_flush} {:close 2, :instruction exec_do*times} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_inc} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_k} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_yank} {:close 0, :instruction tagged_10} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_div} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction print_exec} {:close 1, :instruction tag_integer_811} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_yank} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_sub})
Best program: (boolean_dup_times exec_rot (integer_swap integer_flush exec_do*times ()) (exec_rot (integer_inc) (in3 integer_rot exec_k () (integer_dec) integer_min) (in4 exec_do*range (exec_s_when_autoconstructing (in1) (exec_yankdup integer_empty print_integer boolean_yank) (tagged_10 integer_mult exec_flush) integer_empty integer_eq integer_lte integer_div exec_rot (integer_empty boolean_shove boolean_eq integer_empty boolean_invert_first_then_and) (integer_empty integer_lte boolean_eq boolean_yankdup integer_dup_items exec_dup (integer_shove exec_dup (print_exec (tag_integer_811) integer_max integer_gt integer_yank in4 in3 integer_empty integer_sub))) ()))) ())
Errors: [0 0 0 0 0 0 1 0 1 0]
Total: 2
Mean: 0.2
Genome size: 50
Size: 70
Percent parens: 0.286
--- Population Statistics ---
Average total errors in population: 8.216
Median total errors in population: 9
Error averages by case: (0.86 0.853 0.761 0.543 0.878 0.879 0.903 0.881 0.978 0.68)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 59.648
Average program size in population (points): 81.988
Average percent parens in population: 0.272
Minimum age in population: 5.0
Maximum age in population: 5.0
Average age in population: 5.0
Median age in population: 5.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.009
Error (vector) diversity:			 0.054
Behavioral diversity:				 0.477
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 3621469
--- Timings ---
Current time: 1559594155074 milliseconds
Total Time:          14.5 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         6.7 seconds, 46.3%
Fitness Testing:      5.2 seconds, 36.0%
Report:               2.5 seconds, 17.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 410
Test mean error for best: 0.41000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -89                 | Program output: -9                 
Correct output: 63                  | Program output: 63                 
Correct output: -98                 | Program output: -39                
Correct output: 44                  | Program output: 44                 
Correct output: 50                  | Program output: 50                 
Correct output: -65                 | Program output: -65                
Correct output: -27                 | Program output: 10                 
Correct output: -72                 | Program output: -10                
Correct output: -25                 | Program output: 97                 
Correct output: -93                 | Program output: -93                
Correct output: 95                  | Program output: 95                 
Correct output: -79                 | Program output: -79                
Correct output: 99                  | Program output: 99                 
Correct output: -97                 | Program output: -97                
Correct output: -55                 | Program output: -55                
Correct output: 0                   | Program output: 0                  
Correct output: 24                  | Program output: 26                 
Correct output: 26                  | Program output: 26                 
Correct output: 24                  | Program output: 24                 
Correct output: 8                   | Program output: 25                 
Correct output: 19                  | Program output: 74                 
Correct output: 8                   | Program output: 36                 
Correct output: 7                   | Program output: 36                 
Correct output: 23                  | Program output: 31                 
Correct output: 7                   | Program output: 7                  
Correct output: 3                   | Program output: 3                  
Correct output: 8                   | Program output: 33                 
Correct output: 5                   | Program output: 50                 
Correct output: 18                  | Program output: 18                 
Correct output: 13                  | Program output: 13                 
Correct output: 44                  | Program output: 49                 
Correct output: 16                  | Program output: 58                 
Correct output: 42                  | Program output: 65                 
Correct output: 2                   | Program output: 5                  
Correct output: 2                   | Program output: 2                  
Correct output: -55                 | Program output: -55                
Correct output: -85                 | Program output: -85                
Correct output: -16                 | Program output: -16                
Correct output: -75                 | Program output: -35                
Correct output: -59                 | Program output: -59                
Correct output: -99                 | Program output: -99                
Correct output: -91                 | Program output: -29                
Correct output: -74                 | Program output: -46                
Correct output: -10                 | Program output: -10                
Correct output: -31                 | Program output: -31                
Correct output: -88                 | Program output: -83                
Correct output: -28                 | Program output: -28                
Correct output: -59                 | Program output: -59                
Correct output: -58                 | Program output: -49                
Correct output: -59                 | Program output: -47                
Correct output: -99                 | Program output: -50                
Correct output: -79                 | Program output: -79                
Correct output: -77                 | Program output: -14                
Correct output: -44                 | Program output: -44                
Correct output: -15                 | Program output: -15                
Correct output: -34                 | Program output: -34                
Correct output: -93                 | Program output: 13                 
Correct output: -98                 | Program output: -61                
Correct output: -39                 | Program output: -39                
Correct output: -67                 | Program output: -63                
Correct output: -56                 | Program output: -34                
Correct output: 11                  | Program output: 11                 
Correct output: -92                 | Program output: -92                
Correct output: -45                 | Program output: -45                
Correct output: 24                  | Program output: 24                 
Correct output: -100                | Program output: -100               
Correct output: -36                 | Program output: -36                
Correct output: -62                 | Program output: -13                
Correct output: -79                 | Program output: 73                 
Correct output: -48                 | Program output: -48                
Correct output: -22                 | Program output: -9                 
Correct output: -62                 | Program output: -62                
Correct output: -98                 | Program output: -63                
Correct output: -73                 | Program output: 51                 
Correct output: -50                 | Program output: -50                
Correct output: -40                 | Program output: -40                
Correct output: -76                 | Program output: -25                
Correct output: -54                 | Program output: -28                
Correct output: -54                 | Program output: -50                
Correct output: -70                 | Program output: -70                
Correct output: -36                 | Program output: -14                
Correct output: -70                 | Program output: 36                 
Correct output: -42                 | Program output: 37                 
Correct output: -37                 | Program output: -27                
Correct output: 0                   | Program output: 1                  
Correct output: -55                 | Program output: -19                
Correct output: -11                 | Program output: -11                
Correct output: -81                 | Program output: -78                
Correct output: -96                 | Program output: -96                
Correct output: -99                 | Program output: -99                
Correct output: -83                 | Program output: -83                
Correct output: -45                 | Program output: -35                
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -92                
Correct output: -45                 | Program output: -45                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 2, :instruction exec_do*times} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_inc} {:close 0, :instruction in3} {:close 1, :instruction exec_k} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_dup} {:close 1, :instruction in1} {:close 0, :instruction tag_exec_386} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_or} {:close 0, :instruction tagged_10} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_div} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_empty} {:close 1, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_while} {:close 0, :instruction integer_max} {:close 0, :instruction exec_yank} {:close 0, :instruction 2} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_do*while} {:close 0, :instruction in4} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_max} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*count})
Lexicase best program: (boolean_dup_times integer_add integer_flush exec_do*times () exec_rot (integer_inc) (in3 exec_k () (integer_dec) integer_min) (in2 in4 exec_do*range (exec_s_when_autoconstructing (integer_add boolean_not integer_add exec_dup (in1) tag_exec_386 (exec_stackdepth exec_yankdup integer_empty print_integer boolean_yank) boolean_or tagged_10 exec_flush) (integer_empty integer_eq integer_div integer_empty exec_yank print_boolean exec_yank) (integer_mult) boolean_shove boolean_rot boolean_eq integer_empty exec_empty) exec_when () integer_dup_times boolean_eq integer_empty boolean_yank integer_lte exec_s_when_autoconstructing (boolean_eq boolean_yankdup integer_dup_items boolean_rot) (integer_shove exec_while (integer_max exec_yank 2 boolean_yank exec_do*while () in4 integer_eq integer_empty integer_max exec_empty exec_do*count ())) ()))
Lexicase best errors: [0 0 1 0 1 1 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 85
Percent parens: 0.235
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 2, :instruction exec_do*times} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_inc} {:close 0, :instruction in3} {:close 1, :instruction exec_k} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_dup} {:close 1, :instruction in1} {:close 0, :instruction tag_exec_386} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_or} {:close 0, :instruction tagged_10} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_div} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_empty} {:close 1, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_while} {:close 0, :instruction integer_max} {:close 0, :instruction exec_yank} {:close 0, :instruction 2} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_do*while} {:close 0, :instruction in4} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_max} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*count})
Zero cases best program: (boolean_dup_times integer_add integer_flush exec_do*times () exec_rot (integer_inc) (in3 exec_k () (integer_dec) integer_min) (in2 in4 exec_do*range (exec_s_when_autoconstructing (integer_add boolean_not integer_add exec_dup (in1) tag_exec_386 (exec_stackdepth exec_yankdup integer_empty print_integer boolean_yank) boolean_or tagged_10 exec_flush) (integer_empty integer_eq integer_div integer_empty exec_yank print_boolean exec_yank) (integer_mult) boolean_shove boolean_rot boolean_eq integer_empty exec_empty) exec_when () integer_dup_times boolean_eq integer_empty boolean_yank integer_lte exec_s_when_autoconstructing (boolean_eq boolean_yankdup integer_dup_items boolean_rot) (integer_shove exec_while (integer_max exec_yank 2 boolean_yank exec_do*while () in4 integer_eq integer_empty integer_max exec_empty exec_do*count ())) ()))
Zero cases best errors: [0 0 1 0 1 1 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 85
Percent parens: 0.235
--- Lexicase Population Statistics ---
Count of elite individuals by case: (64 135 166 220 63 180 208 71 220 62)
Population mean number of elite cases: 1.39
Count of perfect (error zero) individuals by case: (64 135 166 220 63 180 208 71 220 62)
Population mean number of perfect (error zero) cases: 1.39
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_flush} {:close 2, :instruction exec_do*times} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_inc} {:close 0, :instruction in3} {:close 1, :instruction exec_k} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_dup} {:close 1, :instruction in1} {:close 0, :instruction tag_exec_386} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_or} {:close 0, :instruction tagged_10} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_div} {:close 0, :instruction integer_empty} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_while} {:close 0, :instruction print_exec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_yank} {:close 0, :instruction 2} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*count})
Best program: (boolean_dup_times exec_rot (integer_flush exec_do*times ()) (exec_rot (integer_inc) (in3 exec_k () (integer_dec) integer_min) (in2 in4 exec_do*range (exec_s_when_autoconstructing (integer_add boolean_not integer_add exec_dup (in1) tag_exec_386 (exec_stackdepth exec_yankdup integer_empty print_integer boolean_yank) boolean_or tagged_10 exec_flush) (integer_empty integer_eq integer_div integer_empty print_boolean exec_yank) (integer_mult) exec_shove (boolean_shove boolean_rot boolean_eq integer_empty exec_when () boolean_eq integer_empty exec_s (boolean_yank integer_lte exec_s_when_autoconstructing (boolean_eq boolean_yankdup boolean_dup_items integer_dup_items boolean_rot) (integer_shove exec_while (print_exec (integer_max exec_yank 2 boolean_yank integer_eq boolean_eq exec_empty exec_do*count ()))) ()) () ())))) ())
Errors: [0 0 1 0 1 1 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 63
Size: 90
Percent parens: 0.300
--- Population Statistics ---
Average total errors in population: 8.611
Median total errors in population: 10
Error averages by case: (0.936 0.865 0.834 0.78 0.937 0.82 0.792 0.929 0.78 0.938)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 57.675
Average program size in population (points): 80.583
Average percent parens in population: 0.284
Minimum age in population: 6.0
Maximum age in population: 6.0
Average age in population: 6.0
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.008
Error (vector) diversity:			 0.035
Behavioral diversity:				 0.414
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 4136154
--- Timings ---
Current time: 1559594156990 milliseconds
Total Time:          16.4 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         7.8 seconds, 47.8%
Fitness Testing:      5.7 seconds, 35.0%
Report:               2.7 seconds, 16.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 435
Test mean error for best: 0.43500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -89                 | Program output: -89                
Correct output: 63                  | Program output: 78                 
Correct output: -98                 | Program output: -39                
Correct output: 44                  | Program output: 44                 
Correct output: 50                  | Program output: 50                 
Correct output: -65                 | Program output: -65                
Correct output: -27                 | Program output: -27                
Correct output: -72                 | Program output: -72                
Correct output: -25                 | Program output: -25                
Correct output: -93                 | Program output: 89                 
Correct output: 95                  | Program output: 95                 
Correct output: -79                 | Program output: -79                
Correct output: 99                  | Program output: 99                 
Correct output: -97                 | Program output: -97                
Correct output: -55                 | Program output: -55                
Correct output: 0                   | Program output: 15                 
Correct output: 24                  | Program output: 24                 
Correct output: 26                  | Program output: 59                 
Correct output: 24                  | Program output: 30                 
Correct output: 8                   | Program output: 8                  
Correct output: 19                  | Program output: 19                 
Correct output: 8                   | Program output: 8                  
Correct output: 7                   | Program output: 40                 
Correct output: 23                  | Program output: 23                 
Correct output: 7                   | Program output: 85                 
Correct output: 3                   | Program output: 3                  
Correct output: 8                   | Program output: 33                 
Correct output: 5                   | Program output: 5                  
Correct output: 18                  | Program output: 18                 
Correct output: 13                  | Program output: 39                 
Correct output: 44                  | Program output: 44                 
Correct output: 16                  | Program output: 16                 
Correct output: 42                  | Program output: 42                 
Correct output: 2                   | Program output: 2                  
Correct output: 2                   | Program output: 2                  
Correct output: -55                 | Program output: -10                
Correct output: -85                 | Program output: -85                
Correct output: -16                 | Program output: 13                 
Correct output: -75                 | Program output: -75                
Correct output: -59                 | Program output: -59                
Correct output: -99                 | Program output: -86                
Correct output: -91                 | Program output: -29                
Correct output: -74                 | Program output: -35                
Correct output: -10                 | Program output: -9                 
Correct output: -31                 | Program output: 56                 
Correct output: -88                 | Program output: -88                
Correct output: -28                 | Program output: 20                 
Correct output: -59                 | Program output: 34                 
Correct output: -58                 | Program output: -49                
Correct output: -59                 | Program output: -59                
Correct output: -99                 | Program output: 27                 
Correct output: -79                 | Program output: 37                 
Correct output: -77                 | Program output: -54                
Correct output: -44                 | Program output: -34                
Correct output: -15                 | Program output: -15                
Correct output: -34                 | Program output: -34                
Correct output: -93                 | Program output: -93                
Correct output: -98                 | Program output: 31                 
Correct output: -39                 | Program output: -39                
Correct output: -67                 | Program output: -67                
Correct output: -56                 | Program output: -56                
Correct output: 11                  | Program output: 11                 
Correct output: -92                 | Program output: -92                
Correct output: -45                 | Program output: 23                 
Correct output: 24                  | Program output: 24                 
Correct output: -100                | Program output: -100               
Correct output: -36                 | Program output: -11                
Correct output: -62                 | Program output: -62                
Correct output: -79                 | Program output: -79                
Correct output: -48                 | Program output: 50                 
Correct output: -22                 | Program output: -22                
Correct output: -62                 | Program output: 42                 
Correct output: -98                 | Program output: -68                
Correct output: -73                 | Program output: 51                 
Correct output: -50                 | Program output: -34                
Correct output: -40                 | Program output: -40                
Correct output: -76                 | Program output: -76                
Correct output: -54                 | Program output: -19                
Correct output: -54                 | Program output: -50                
Correct output: -70                 | Program output: -70                
Correct output: -36                 | Program output: -12                
Correct output: -70                 | Program output: -20                
Correct output: -42                 | Program output: -42                
Correct output: -37                 | Program output: -34                
Correct output: 0                   | Program output: 0                  
Correct output: -55                 | Program output: -55                
Correct output: -11                 | Program output: 44                 
Correct output: -81                 | Program output: -78                
Correct output: -96                 | Program output: -96                
Correct output: -99                 | Program output: -99                
Correct output: -83                 | Program output: -83                
Correct output: -45                 | Program output: -35                
Correct output: -75                 | Program output: -28                
Correct output: -92                 | Program output: -92                
Correct output: -45                 | Program output: -45                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_flush} {:close 2, :instruction exec_do*times} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_empty} {:close 1, :instruction in1} {:close 0, :instruction 38} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_swap} {:close 0, :instruction tagged_10} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_div} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction -75} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_while} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_yank} {:close 0, :instruction print_exec} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*count})
Lexicase best program: (boolean_eq exec_rot (integer_flush exec_do*times ()) (exec_rot (integer_inc) (integer_rot exec_k () (exec_yank integer_dec) integer_min) (in4 exec_do*range (exec_if (boolean_not exec_do*while () integer_empty in1) (38 exec_yankdup integer_empty print_integer exec_empty boolean_or boolean_swap tagged_10 exec_empty exec_flush) integer_empty integer_eq integer_div exec_rot (boolean_invert_first_then_and) (-75 integer_fromboolean) (boolean_shove boolean_swap boolean_rot integer_empty boolean_invert_first_then_and) exec_when () boolean_yank integer_lte exec_s_when_autoconstructing (boolean_eq integer_empty integer_dup integer_dup_items boolean_not exec_do*range (boolean_rot) integer_shove exec_while (exec_dup (boolean_yank) print_exec (exec_flush) integer_max integer_gt integer_empty exec_empty integer_lte exec_do*count ())) () ()))) ())
Lexicase best errors: [0 0 1 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 89
Percent parens: 0.292
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_flush} {:close 2, :instruction exec_do*times} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_empty} {:close 1, :instruction in1} {:close 0, :instruction 38} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_swap} {:close 0, :instruction tagged_10} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_div} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction -75} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_while} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_yank} {:close 0, :instruction print_exec} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*count})
Zero cases best program: (boolean_eq exec_rot (integer_flush exec_do*times ()) (exec_rot (integer_inc) (integer_rot exec_k () (exec_yank integer_dec) integer_min) (in4 exec_do*range (exec_if (boolean_not exec_do*while () integer_empty in1) (38 exec_yankdup integer_empty print_integer exec_empty boolean_or boolean_swap tagged_10 exec_empty exec_flush) integer_empty integer_eq integer_div exec_rot (boolean_invert_first_then_and) (-75 integer_fromboolean) (boolean_shove boolean_swap boolean_rot integer_empty boolean_invert_first_then_and) exec_when () boolean_yank integer_lte exec_s_when_autoconstructing (boolean_eq integer_empty integer_dup integer_dup_items boolean_not exec_do*range (boolean_rot) integer_shove exec_while (exec_dup (boolean_yank) print_exec (exec_flush) integer_max integer_gt integer_empty exec_empty integer_lte exec_do*count ())) () ()))) ())
Zero cases best errors: [0 0 1 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 89
Percent parens: 0.292
--- Lexicase Population Statistics ---
Count of elite individuals by case: (193 85 173 194 106 88 266 89 102 260)
Population mean number of elite cases: 1.56
Count of perfect (error zero) individuals by case: (193 85 173 194 106 88 266 89 102 260)
Population mean number of perfect (error zero) cases: 1.56
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_flush} {:close 2, :instruction exec_do*times} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_empty} {:close 1, :instruction in1} {:close 0, :instruction 38} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_swap} {:close 0, :instruction tagged_10} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_div} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction -75} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_while} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_yank} {:close 0, :instruction print_exec} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*count})
Best program: (boolean_eq exec_rot (integer_flush exec_do*times ()) (exec_rot (integer_inc) (integer_rot exec_k () (exec_yank integer_dec) integer_min) (in4 exec_do*range (exec_if (boolean_not exec_do*while () integer_empty in1) (38 exec_yankdup integer_empty print_integer exec_empty boolean_or boolean_swap tagged_10 exec_empty exec_flush) integer_empty integer_eq integer_div exec_rot (boolean_invert_first_then_and) (-75 integer_fromboolean) (boolean_shove boolean_swap boolean_rot integer_empty boolean_invert_first_then_and) exec_when () boolean_yank integer_lte exec_s_when_autoconstructing (boolean_eq integer_empty integer_dup integer_dup_items boolean_not exec_do*range (boolean_rot) integer_shove exec_while (exec_dup (boolean_yank) print_exec (exec_flush) integer_max integer_gt integer_empty exec_empty integer_lte exec_do*count ())) () ()))) ())
Errors: [0 0 1 0 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 63
Size: 89
Percent parens: 0.292
--- Population Statistics ---
Average total errors in population: 8.444
Median total errors in population: 10
Error averages by case: (0.807 0.915 0.827 0.806 0.894 0.912 0.734 0.911 0.898 0.74)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 60.432
Average program size in population (points): 82.532
Average percent parens in population: 0.267
Minimum age in population: 7.0
Maximum age in population: 7.0
Average age in population: 7.0
Median age in population: 7.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.01
Error (vector) diversity:			 0.041
Behavioral diversity:				 0.397
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 4662931
--- Timings ---
Current time: 1559594158935 milliseconds
Total Time:          18.3 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         8.9 seconds, 48.8%
Fitness Testing:      6.3 seconds, 34.3%
Report:               3.0 seconds, 16.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 486
Test mean error for best: 0.48600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -89                 | Program output: -9                 
Correct output: 63                  | Program output: 63                 
Correct output: -98                 | Program output: -98                
Correct output: 44                  | Program output: 44                 
Correct output: 50                  | Program output: 50                 
Correct output: -65                 | Program output: -65                
Correct output: -27                 | Program output: 10                 
Correct output: -72                 | Program output: -10                
Correct output: -25                 | Program output: 97                 
Correct output: -93                 | Program output: -93                
Correct output: 95                  | Program output: 95                 
Correct output: -79                 | Program output: -79                
Correct output: 99                  | Program output: 99                 
Correct output: -97                 | Program output: -97                
Correct output: -55                 | Program output: -55                
Correct output: 0                   | Program output: 0                  
Correct output: 24                  | Program output: 29                 
Correct output: 26                  | Program output: 26                 
Correct output: 24                  | Program output: 24                 
Correct output: 8                   | Program output: 91                 
Correct output: 19                  | Program output: 34                 
Correct output: 8                   | Program output: 51                 
Correct output: 7                   | Program output: 7                  
Correct output: 23                  | Program output: 27                 
Correct output: 7                   | Program output: 7                  
Correct output: 3                   | Program output: 7                  
Correct output: 8                   | Program output: 8                  
Correct output: 5                   | Program output: 49                 
Correct output: 18                  | Program output: 52                 
Correct output: 13                  | Program output: 13                 
Correct output: 44                  | Program output: 49                 
Correct output: 16                  | Program output: 62                 
Correct output: 42                  | Program output: 65                 
Correct output: 2                   | Program output:                    
Correct output: 2                   | Program output: 77                 
Correct output: -55                 | Program output: 14                 
Correct output: -85                 | Program output: -64                
Correct output: -16                 | Program output: -16                
Correct output: -75                 | Program output: 3                  
Correct output: -59                 | Program output: -51                
Correct output: -99                 | Program output: -42                
Correct output: -91                 | Program output: -91                
Correct output: -74                 | Program output: -74                
Correct output: -10                 | Program output: 48                 
Correct output: -31                 | Program output: -31                
Correct output: -88                 | Program output: 15                 
Correct output: -28                 | Program output: -28                
Correct output: -59                 | Program output: -59                
Correct output: -58                 | Program output: -58                
Correct output: -59                 | Program output: 76                 
Correct output: -99                 | Program output: -99                
Correct output: -79                 | Program output: -79                
Correct output: -77                 | Program output: -77                
Correct output: -44                 | Program output: -44                
Correct output: -15                 | Program output: 14                 
Correct output: -34                 | Program output: -24                
Correct output: -93                 | Program output: -10                
Correct output: -98                 | Program output: -98                
Correct output: -39                 | Program output: 34                 
Correct output: -67                 | Program output: 33                 
Correct output: -56                 | Program output: -27                
Correct output: 11                  | Program output: 93                 
Correct output: -92                 | Program output: 24                 
Correct output: -45                 | Program output: -45                
Correct output: 24                  | Program output: 25                 
Correct output: -100                | Program output: -69                
Correct output: -36                 | Program output: -19                
Correct output: -62                 | Program output: 67                 
Correct output: -79                 | Program output: 81                 
Correct output: -48                 | Program output: -48                
Correct output: -22                 | Program output: 99                 
Correct output: -62                 | Program output: -62                
Correct output: -98                 | Program output: -98                
Correct output: -73                 | Program output: -73                
Correct output: -50                 | Program output: -50                
Correct output: -40                 | Program output: 0                  
Correct output: -76                 | Program output: -73                
Correct output: -54                 | Program output: -54                
Correct output: -54                 | Program output: -54                
Correct output: -70                 | Program output: -64                
Correct output: -36                 | Program output: -36                
Correct output: -70                 | Program output: -70                
Correct output: -42                 | Program output: 68                 
Correct output: -37                 | Program output: -37                
Correct output: 0                   | Program output: 75                 
Correct output: -55                 | Program output: -43                
Correct output: -11                 | Program output: -11                
Correct output: -81                 | Program output: -81                
Correct output: -96                 | Program output: 14                 
Correct output: -99                 | Program output: -55                
Correct output: -83                 | Program output: -82                
Correct output: -45                 | Program output: -45                
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: 86                 
Correct output: -45                 | Program output: -35                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_inc} {:close 0, :instruction in3} {:close 1, :instruction exec_k} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_div} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_yank} {:close 1, :instruction exec_noop} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_while} {:close 0, :instruction integer_max} {:close 0, :instruction exec_yank} {:close 0, :instruction 2} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_div} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_empty})
Lexicase best program: (boolean_dup_times integer_flush exec_rot (boolean_xor integer_inc) (in3 exec_k () (integer_eq integer_dec) integer_min) (in2 in4 exec_rot () (boolean_not exec_dup (exec_stackdepth exec_yankdup exec_s_when_autoconstructing (integer_empty print_integer boolean_yank) (integer_gte integer_div) (exec_do*while (exec_flush) integer_eq integer_empty print_boolean exec_yank) exec_noop) integer_mult) (boolean_shove boolean_eq integer_empty integer_empty boolean_yankdup integer_shove exec_while (integer_max exec_yank 2 boolean_yank integer_gt integer_gt boolean_and integer_div in4 exec_yank integer_gt) integer_empty exec_empty)))
Lexicase best errors: [0 0 1 0 0 0 0 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 66
Percent parens: 0.227
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_inc} {:close 0, :instruction in3} {:close 1, :instruction exec_k} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_div} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_yank} {:close 1, :instruction exec_noop} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_while} {:close 0, :instruction integer_max} {:close 0, :instruction exec_yank} {:close 0, :instruction 2} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_div} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_empty})
Zero cases best program: (boolean_dup_times integer_flush exec_rot (boolean_xor integer_inc) (in3 exec_k () (integer_eq integer_dec) integer_min) (in2 in4 exec_rot () (boolean_not exec_dup (exec_stackdepth exec_yankdup exec_s_when_autoconstructing (integer_empty print_integer boolean_yank) (integer_gte integer_div) (exec_do*while (exec_flush) integer_eq integer_empty print_boolean exec_yank) exec_noop) integer_mult) (boolean_shove boolean_eq integer_empty integer_empty boolean_yankdup integer_shove exec_while (integer_max exec_yank 2 boolean_yank integer_gt integer_gt boolean_and integer_div in4 exec_yank integer_gt) integer_empty exec_empty)))
Zero cases best errors: [0 0 1 0 0 0 0 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 66
Percent parens: 0.227
--- Lexicase Population Statistics ---
Count of elite individuals by case: (53 17 268 17 52 434 55 434 17 270)
Population mean number of elite cases: 1.62
Count of perfect (error zero) individuals by case: (53 17 268 17 52 434 55 434 17 270)
Population mean number of perfect (error zero) cases: 1.62
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_rot} {:close 0, :instruction integer_flush} {:close 2, :instruction exec_do*times} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_inc} {:close 0, :instruction in3} {:close 2, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_k} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_add} {:close 0, :instruction exec_while} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_empty})
Best program: (exec_rot (integer_flush exec_do*times ()) (exec_rot (integer_inc) (in3 exec_k_when_autoconstructing () () exec_k () (integer_eq integer_dec) integer_min) (integer_yankdup in2 boolean_eq in4 exec_s_when_autoconstructing (boolean_not exec_dup (exec_stackdepth integer_dup_items) exec_yankdup exec_s_when_autoconstructing (integer_empty print_integer boolean_yank) (exec_do*while (boolean_or exec_flush) integer_eq integer_empty print_boolean exec_yank) (integer_mult) boolean_shove integer_empty integer_empty integer_dup_items boolean_rot) (integer_add) (exec_while (exec_yank boolean_yank integer_gt exec_pop (integer_div) integer_eq integer_gt) exec_empty))) ())
Errors: [0 0 1 0 0 0 0 0 0 1]
Total: 2
Mean: 0.2
Genome size: 48
Size: 70
Percent parens: 0.314
--- Population Statistics ---
Average total errors in population: 8.383
Median total errors in population: 10
Error averages by case: (0.947 0.983 0.732 0.983 0.948 0.566 0.945 0.566 0.983 0.73)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 61.091
Average program size in population (points): 85.697
Average percent parens in population: 0.286
Minimum age in population: 8.0
Maximum age in population: 8.0
Average age in population: 8.0
Median age in population: 8.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.009
Error (vector) diversity:			 0.018
Behavioral diversity:				 0.252
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 5062312
--- Timings ---
Current time: 1559594160741 milliseconds
Total Time:          20.1 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        10.1 seconds, 50.0%
Fitness Testing:      6.7 seconds, 33.2%
Report:               3.3 seconds, 16.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 435
Test mean error for best: 0.43500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -89                 | Program output: -89                
Correct output: 63                  | Program output: 78                 
Correct output: -98                 | Program output: -39                
Correct output: 44                  | Program output: 44                 
Correct output: 50                  | Program output: 50                 
Correct output: -65                 | Program output: -65                
Correct output: -27                 | Program output: -27                
Correct output: -72                 | Program output: -72                
Correct output: -25                 | Program output: -25                
Correct output: -93                 | Program output: 89                 
Correct output: 95                  | Program output: 95                 
Correct output: -79                 | Program output: -79                
Correct output: 99                  | Program output: 99                 
Correct output: -97                 | Program output: -97                
Correct output: -55                 | Program output: -55                
Correct output: 0                   | Program output: 15                 
Correct output: 24                  | Program output: 24                 
Correct output: 26                  | Program output: 59                 
Correct output: 24                  | Program output: 30                 
Correct output: 8                   | Program output: 8                  
Correct output: 19                  | Program output: 19                 
Correct output: 8                   | Program output: 8                  
Correct output: 7                   | Program output: 40                 
Correct output: 23                  | Program output: 23                 
Correct output: 7                   | Program output: 85                 
Correct output: 3                   | Program output: 3                  
Correct output: 8                   | Program output: 33                 
Correct output: 5                   | Program output: 5                  
Correct output: 18                  | Program output: 18                 
Correct output: 13                  | Program output: 39                 
Correct output: 44                  | Program output: 44                 
Correct output: 16                  | Program output: 16                 
Correct output: 42                  | Program output: 42                 
Correct output: 2                   | Program output: 2                  
Correct output: 2                   | Program output: 2                  
Correct output: -55                 | Program output: -10                
Correct output: -85                 | Program output: -85                
Correct output: -16                 | Program output: 13                 
Correct output: -75                 | Program output: -75                
Correct output: -59                 | Program output: -59                
Correct output: -99                 | Program output: -86                
Correct output: -91                 | Program output: -29                
Correct output: -74                 | Program output: -35                
Correct output: -10                 | Program output: -9                 
Correct output: -31                 | Program output: 56                 
Correct output: -88                 | Program output: -88                
Correct output: -28                 | Program output: 20                 
Correct output: -59                 | Program output: 34                 
Correct output: -58                 | Program output: -49                
Correct output: -59                 | Program output: -59                
Correct output: -99                 | Program output: 27                 
Correct output: -79                 | Program output: 37                 
Correct output: -77                 | Program output: -54                
Correct output: -44                 | Program output: -34                
Correct output: -15                 | Program output: -15                
Correct output: -34                 | Program output: -34                
Correct output: -93                 | Program output: -93                
Correct output: -98                 | Program output: 31                 
Correct output: -39                 | Program output: -39                
Correct output: -67                 | Program output: -67                
Correct output: -56                 | Program output: -56                
Correct output: 11                  | Program output: 11                 
Correct output: -92                 | Program output: -92                
Correct output: -45                 | Program output: 23                 
Correct output: 24                  | Program output: 24                 
Correct output: -100                | Program output: -100               
Correct output: -36                 | Program output: -11                
Correct output: -62                 | Program output: -62                
Correct output: -79                 | Program output: -79                
Correct output: -48                 | Program output: 50                 
Correct output: -22                 | Program output: -22                
Correct output: -62                 | Program output: 42                 
Correct output: -98                 | Program output: -68                
Correct output: -73                 | Program output: 51                 
Correct output: -50                 | Program output: -34                
Correct output: -40                 | Program output: -40                
Correct output: -76                 | Program output: -76                
Correct output: -54                 | Program output: -19                
Correct output: -54                 | Program output: -50                
Correct output: -70                 | Program output: -70                
Correct output: -36                 | Program output: -12                
Correct output: -70                 | Program output: -20                
Correct output: -42                 | Program output: -42                
Correct output: -37                 | Program output: -34                
Correct output: 0                   | Program output: 0                  
Correct output: -55                 | Program output: -55                
Correct output: -11                 | Program output: 44                 
Correct output: -81                 | Program output: -78                
Correct output: -96                 | Program output: -96                
Correct output: -99                 | Program output: -99                
Correct output: -83                 | Program output: -83                
Correct output: -45                 | Program output: -35                
Correct output: -75                 | Program output: -28                
Correct output: -92                 | Program output: -92                
Correct output: -45                 | Program output: -45                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_flush} {:close 2, :instruction exec_do*times} {:close 0, :instruction in4} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_do*while} {:close 1, :instruction in1} {:close 0, :instruction 38} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction tag_exec_98} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction -75} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_when} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_while} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_stackdepth})
Lexicase best program: (boolean_eq boolean_swap exec_dup_items exec_rot (integer_flush exec_do*times ()) (in4 exec_rot (integer_inc) (integer_rot exec_k () (exec_yank integer_dec) integer_min) (in2 exec_if (boolean_not exec_do*while () in1) (38 exec_yankdup print_integer integer_yankdup) tag_exec_98 (exec_flush) integer_empty integer_eq boolean_invert_second_then_and integer_div exec_rot (exec_dup_times (boolean_invert_first_then_and) boolean_yankdup -75 integer_fromboolean) (exec_y (boolean_shove boolean_swap boolean_rot exec_do*times (integer_empty boolean_invert_first_then_and) exec_when () exec_y (boolean_yank integer_lte boolean_invert_second_then_and exec_s_when_autoconstructing (integer_empty integer_dup integer_dup_items boolean_not exec_do*range (boolean_rot) integer_shove exec_while (exec_dup (boolean_yank) integer_max integer_gt boolean_dup integer_mult) integer_empty exec_empty integer_lte exec_do*count (boolean_dup_items exec_stackdepth)) () ()))) ())) ())
Lexicase best errors: [0 0 0 1 0 0 0 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 97
Percent parens: 0.299
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_flush} {:close 2, :instruction exec_do*times} {:close 0, :instruction in4} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_do*while} {:close 1, :instruction in1} {:close 0, :instruction 38} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction tag_exec_98} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction -75} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_when} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_while} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_stackdepth})
Zero cases best program: (boolean_eq boolean_swap exec_dup_items exec_rot (integer_flush exec_do*times ()) (in4 exec_rot (integer_inc) (integer_rot exec_k () (exec_yank integer_dec) integer_min) (in2 exec_if (boolean_not exec_do*while () in1) (38 exec_yankdup print_integer integer_yankdup) tag_exec_98 (exec_flush) integer_empty integer_eq boolean_invert_second_then_and integer_div exec_rot (exec_dup_times (boolean_invert_first_then_and) boolean_yankdup -75 integer_fromboolean) (exec_y (boolean_shove boolean_swap boolean_rot exec_do*times (integer_empty boolean_invert_first_then_and) exec_when () exec_y (boolean_yank integer_lte boolean_invert_second_then_and exec_s_when_autoconstructing (integer_empty integer_dup integer_dup_items boolean_not exec_do*range (boolean_rot) integer_shove exec_while (exec_dup (boolean_yank) integer_max integer_gt boolean_dup integer_mult) integer_empty exec_empty integer_lte exec_do*count (boolean_dup_items exec_stackdepth)) () ()))) ())) ())
Zero cases best errors: [0 0 0 1 0 0 0 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 97
Percent parens: 0.299
--- Lexicase Population Statistics ---
Count of elite individuals by case: (72 187 189 175 201 72 158 189 57 145)
Population mean number of elite cases: 1.45
Count of perfect (error zero) individuals by case: (72 187 189 175 201 72 158 189 57 145)
Population mean number of perfect (error zero) cases: 1.45
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_flush} {:close 2, :instruction exec_do*times} {:close 0, :instruction in4} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_do*while} {:close 1, :instruction in1} {:close 0, :instruction 38} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction tag_exec_98} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction -75} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_when} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_while} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_stackdepth})
Best program: (boolean_eq boolean_swap exec_dup_items exec_rot (integer_flush exec_do*times ()) (in4 exec_rot (integer_inc) (integer_rot exec_k () (exec_yank integer_dec) integer_min) (in2 exec_if (boolean_not exec_do*while () in1) (38 exec_yankdup print_integer integer_yankdup) tag_exec_98 (exec_flush) integer_empty integer_eq boolean_invert_second_then_and integer_div exec_rot (exec_dup_times (boolean_invert_first_then_and) boolean_yankdup -75 integer_fromboolean) (exec_y (boolean_shove boolean_swap boolean_rot exec_do*times (integer_empty boolean_invert_first_then_and) exec_when () exec_y (boolean_yank integer_lte boolean_invert_second_then_and exec_s_when_autoconstructing (integer_empty integer_dup integer_dup_items boolean_not exec_do*range (boolean_rot) integer_shove exec_while (exec_dup (boolean_yank) integer_max integer_gt boolean_dup integer_mult) integer_empty exec_empty integer_lte exec_do*count (boolean_dup_items exec_stackdepth)) () ()))) ())) ())
Errors: [0 0 0 1 0 0 0 0 0 1]
Total: 2
Mean: 0.2
Genome size: 68
Size: 97
Percent parens: 0.299
--- Population Statistics ---
Average total errors in population: 8.555
Median total errors in population: 10
Error averages by case: (0.928 0.813 0.811 0.825 0.799 0.928 0.842 0.811 0.943 0.855)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 55.773
Average program size in population (points): 78.246
Average percent parens in population: 0.285
Minimum age in population: 9.0
Maximum age in population: 9.0
Average age in population: 9.0
Median age in population: 9.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.009
Error (vector) diversity:			 0.036
Behavioral diversity:				 0.435
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 5653891
--- Timings ---
Current time: 1559594163185 milliseconds
Total Time:          22.1 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        11.2 seconds, 50.4%
Fitness Testing:      7.3 seconds, 33.0%
Report:               3.6 seconds, 16.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 435
Test mean error for best: 0.43500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -89                 | Program output: -89                
Correct output: 63                  | Program output: 78                 
Correct output: -98                 | Program output: -39                
Correct output: 44                  | Program output: 44                 
Correct output: 50                  | Program output: 50                 
Correct output: -65                 | Program output: -65                
Correct output: -27                 | Program output: -27                
Correct output: -72                 | Program output: -72                
Correct output: -25                 | Program output: -25                
Correct output: -93                 | Program output: 89                 
Correct output: 95                  | Program output: 95                 
Correct output: -79                 | Program output: -79                
Correct output: 99                  | Program output: 99                 
Correct output: -97                 | Program output: -97                
Correct output: -55                 | Program output: -55                
Correct output: 0                   | Program output: 15                 
Correct output: 24                  | Program output: 24                 
Correct output: 26                  | Program output: 59                 
Correct output: 24                  | Program output: 30                 
Correct output: 8                   | Program output: 8                  
Correct output: 19                  | Program output: 19                 
Correct output: 8                   | Program output: 8                  
Correct output: 7                   | Program output: 40                 
Correct output: 23                  | Program output: 23                 
Correct output: 7                   | Program output: 85                 
Correct output: 3                   | Program output: 3                  
Correct output: 8                   | Program output: 33                 
Correct output: 5                   | Program output: 5                  
Correct output: 18                  | Program output: 18                 
Correct output: 13                  | Program output: 39                 
Correct output: 44                  | Program output: 44                 
Correct output: 16                  | Program output: 16                 
Correct output: 42                  | Program output: 42                 
Correct output: 2                   | Program output: 2                  
Correct output: 2                   | Program output: 2                  
Correct output: -55                 | Program output: -10                
Correct output: -85                 | Program output: -85                
Correct output: -16                 | Program output: 13                 
Correct output: -75                 | Program output: -75                
Correct output: -59                 | Program output: -59                
Correct output: -99                 | Program output: -86                
Correct output: -91                 | Program output: -29                
Correct output: -74                 | Program output: -35                
Correct output: -10                 | Program output: -9                 
Correct output: -31                 | Program output: 56                 
Correct output: -88                 | Program output: -88                
Correct output: -28                 | Program output: 20                 
Correct output: -59                 | Program output: 34                 
Correct output: -58                 | Program output: -49                
Correct output: -59                 | Program output: -59                
Correct output: -99                 | Program output: 27                 
Correct output: -79                 | Program output: 37                 
Correct output: -77                 | Program output: -54                
Correct output: -44                 | Program output: -34                
Correct output: -15                 | Program output: -15                
Correct output: -34                 | Program output: -34                
Correct output: -93                 | Program output: -93                
Correct output: -98                 | Program output: 31                 
Correct output: -39                 | Program output: -39                
Correct output: -67                 | Program output: -67                
Correct output: -56                 | Program output: -56                
Correct output: 11                  | Program output: 11                 
Correct output: -92                 | Program output: -92                
Correct output: -45                 | Program output: 23                 
Correct output: 24                  | Program output: 24                 
Correct output: -100                | Program output: -100               
Correct output: -36                 | Program output: -11                
Correct output: -62                 | Program output: -62                
Correct output: -79                 | Program output: -79                
Correct output: -48                 | Program output: 50                 
Correct output: -22                 | Program output: -22                
Correct output: -62                 | Program output: 42                 
Correct output: -98                 | Program output: -68                
Correct output: -73                 | Program output: 51                 
Correct output: -50                 | Program output: -34                
Correct output: -40                 | Program output: -40                
Correct output: -76                 | Program output: -76                
Correct output: -54                 | Program output: -19                
Correct output: -54                 | Program output: -50                
Correct output: -70                 | Program output: -70                
Correct output: -36                 | Program output: -12                
Correct output: -70                 | Program output: -20                
Correct output: -42                 | Program output: -42                
Correct output: -37                 | Program output: -34                
Correct output: 0                   | Program output: 0                  
Correct output: -55                 | Program output: -55                
Correct output: -11                 | Program output: 44                 
Correct output: -81                 | Program output: -78                
Correct output: -96                 | Program output: -96                
Correct output: -99                 | Program output: -99                
Correct output: -83                 | Program output: -83                
Correct output: -45                 | Program output: -35                
Correct output: -75                 | Program output: -28                
Correct output: -92                 | Program output: -92                
Correct output: -45                 | Program output: -45                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_flush} {:close 2, :instruction exec_do*times} {:close 0, :instruction in4} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_if} {:close 1, :instruction integer_inc} {:close 1, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 2, :instruction tagged_71} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_do*while} {:close 1, :instruction in1} {:close 0, :instruction 38} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction tag_exec_98} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_when} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_while} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_stackdepth})
Lexicase best program: (boolean_eq boolean_swap exec_dup_items exec_rot (integer_flush exec_do*times ()) (in4 exec_rot (exec_if (integer_inc) (exec_k () (exec_yank tagged_71)) integer_dec) (integer_min) (in2 exec_if (boolean_not boolean_and exec_do*while () in1) (38 exec_yankdup print_integer integer_yankdup) tag_exec_98 (exec_flush) integer_empty boolean_invert_second_then_and integer_div exec_rot (exec_dup_times (integer_eq boolean_invert_first_then_and) boolean_yankdup integer_fromboolean) (exec_y (boolean_shove boolean_swap boolean_rot exec_noop exec_do*times (integer_empty boolean_invert_first_then_and) exec_when () exec_y (boolean_yank integer_lte exec_swap () (exec_s_when_autoconstructing (integer_empty integer_dup integer_dup_items boolean_not exec_do*range (boolean_rot) integer_shove exec_while (exec_dup (boolean_yank) integer_max integer_gt boolean_dup integer_mult) integer_empty exec_empty integer_lte boolean_dup_items exec_stackdepth) () ())))) ())) ())
Lexicase best errors: [0 0 0 1 1 0 0 1 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 101
Percent parens: 0.317
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_flush} {:close 2, :instruction exec_do*times} {:close 0, :instruction in4} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_if} {:close 1, :instruction integer_inc} {:close 1, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 2, :instruction tagged_71} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_do*while} {:close 1, :instruction in1} {:close 0, :instruction 38} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction tag_exec_98} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_when} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_while} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_stackdepth})
Zero cases best program: (boolean_eq boolean_swap exec_dup_items exec_rot (integer_flush exec_do*times ()) (in4 exec_rot (exec_if (integer_inc) (exec_k () (exec_yank tagged_71)) integer_dec) (integer_min) (in2 exec_if (boolean_not boolean_and exec_do*while () in1) (38 exec_yankdup print_integer integer_yankdup) tag_exec_98 (exec_flush) integer_empty boolean_invert_second_then_and integer_div exec_rot (exec_dup_times (integer_eq boolean_invert_first_then_and) boolean_yankdup integer_fromboolean) (exec_y (boolean_shove boolean_swap boolean_rot exec_noop exec_do*times (integer_empty boolean_invert_first_then_and) exec_when () exec_y (boolean_yank integer_lte exec_swap () (exec_s_when_autoconstructing (integer_empty integer_dup integer_dup_items boolean_not exec_do*range (boolean_rot) integer_shove exec_while (exec_dup (boolean_yank) integer_max integer_gt boolean_dup integer_mult) integer_empty exec_empty integer_lte boolean_dup_items exec_stackdepth) () ())))) ())) ())
Zero cases best errors: [0 0 0 1 1 0 0 1 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 101
Percent parens: 0.317
--- Lexicase Population Statistics ---
Count of elite individuals by case: (419 306 306 120 87 114 368 54 113 121)
Population mean number of elite cases: 2.01
Count of perfect (error zero) individuals by case: (419 306 306 120 87 114 368 54 113 121)
Population mean number of perfect (error zero) cases: 2.01
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_flush} {:close 2, :instruction exec_do*times} {:close 0, :instruction in4} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_do*while} {:close 1, :instruction in1} {:close 0, :instruction 38} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction tag_exec_98} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction -75} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_when} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_stackdepth})
Best program: (boolean_eq boolean_swap exec_dup_items exec_rot (integer_flush exec_do*times ()) (in4 exec_rot (integer_inc) (integer_rot exec_k () (exec_yank integer_dec) integer_min) (in2 exec_if (boolean_not exec_do*while () in1) (38 exec_yankdup print_integer integer_yankdup) tag_exec_98 (exec_flush) integer_empty boolean_invert_second_then_and integer_div exec_rot (exec_dup_times (boolean_invert_first_then_and) boolean_yankdup -75 integer_fromboolean) (boolean_shove boolean_swap exec_rot (boolean_rot exec_do*times (integer_empty boolean_invert_first_then_and) exec_when () exec_y (boolean_yank integer_lte boolean_invert_second_then_and exec_s_when_autoconstructing (integer_empty integer_dup integer_dup_items boolean_not boolean_invert_first_then_and) (exec_do*range (boolean_rot) integer_shove exec_while (boolean_invert_second_then_and) boolean_yank) (integer_max integer_gt integer_mult) integer_empty exec_empty integer_lte boolean_dup_items exec_stackdepth)) () ()) ())) ())
Errors: [0 0 0 1 0 1 0 1 1 0]
Total: 4
Mean: 0.4
Genome size: 66
Size: 95
Percent parens: 0.305
--- Population Statistics ---
Average total errors in population: 7.992
Median total errors in population: 10
Error averages by case: (0.581 0.694 0.694 0.88 0.913 0.886 0.632 0.946 0.887 0.879)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 61.49
Average program size in population (points): 86.28
Average percent parens in population: 0.285
Minimum age in population: 10.0
Maximum age in population: 10.0
Average age in population: 10.0
Median age in population: 10.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.007
Error (vector) diversity:			 0.04
Behavioral diversity:				 0.305
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 6545034
--- Timings ---
Current time: 1559594165891 milliseconds
Total Time:          24.8 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        12.3 seconds, 49.5%
Fitness Testing:      8.1 seconds, 32.8%
Report:               4.3 seconds, 17.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 435
Test mean error for best: 0.43500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -89                 | Program output: -89                
Correct output: 63                  | Program output: 78                 
Correct output: -98                 | Program output: -39                
Correct output: 44                  | Program output: 44                 
Correct output: 50                  | Program output: 50                 
Correct output: -65                 | Program output: -65                
Correct output: -27                 | Program output: -27                
Correct output: -72                 | Program output: -72                
Correct output: -25                 | Program output: -25                
Correct output: -93                 | Program output: 89                 
Correct output: 95                  | Program output: 95                 
Correct output: -79                 | Program output: -79                
Correct output: 99                  | Program output: 99                 
Correct output: -97                 | Program output: -97                
Correct output: -55                 | Program output: -55                
Correct output: 0                   | Program output: 15                 
Correct output: 24                  | Program output: 24                 
Correct output: 26                  | Program output: 59                 
Correct output: 24                  | Program output: 30                 
Correct output: 8                   | Program output: 8                  
Correct output: 19                  | Program output: 19                 
Correct output: 8                   | Program output: 8                  
Correct output: 7                   | Program output: 40                 
Correct output: 23                  | Program output: 23                 
Correct output: 7                   | Program output: 85                 
Correct output: 3                   | Program output: 3                  
Correct output: 8                   | Program output: 33                 
Correct output: 5                   | Program output: 5                  
Correct output: 18                  | Program output: 18                 
Correct output: 13                  | Program output: 39                 
Correct output: 44                  | Program output: 44                 
Correct output: 16                  | Program output: 16                 
Correct output: 42                  | Program output: 42                 
Correct output: 2                   | Program output: 2                  
Correct output: 2                   | Program output: 2                  
Correct output: -55                 | Program output: -10                
Correct output: -85                 | Program output: -85                
Correct output: -16                 | Program output: 13                 
Correct output: -75                 | Program output: -75                
Correct output: -59                 | Program output: -59                
Correct output: -99                 | Program output: -86                
Correct output: -91                 | Program output: -29                
Correct output: -74                 | Program output: -35                
Correct output: -10                 | Program output: -9                 
Correct output: -31                 | Program output: 56                 
Correct output: -88                 | Program output: -88                
Correct output: -28                 | Program output: 20                 
Correct output: -59                 | Program output: 34                 
Correct output: -58                 | Program output: -49                
Correct output: -59                 | Program output: -59                
Correct output: -99                 | Program output: 27                 
Correct output: -79                 | Program output: 37                 
Correct output: -77                 | Program output: -54                
Correct output: -44                 | Program output: -34                
Correct output: -15                 | Program output: -15                
Correct output: -34                 | Program output: -34                
Correct output: -93                 | Program output: -93                
Correct output: -98                 | Program output: 31                 
Correct output: -39                 | Program output: -39                
Correct output: -67                 | Program output: -67                
Correct output: -56                 | Program output: -56                
Correct output: 11                  | Program output: 11                 
Correct output: -92                 | Program output: -92                
Correct output: -45                 | Program output: 23                 
Correct output: 24                  | Program output: 24                 
Correct output: -100                | Program output: -100               
Correct output: -36                 | Program output: -11                
Correct output: -62                 | Program output: -62                
Correct output: -79                 | Program output: -79                
Correct output: -48                 | Program output: 50                 
Correct output: -22                 | Program output: -22                
Correct output: -62                 | Program output: 42                 
Correct output: -98                 | Program output: -68                
Correct output: -73                 | Program output: 51                 
Correct output: -50                 | Program output: -34                
Correct output: -40                 | Program output: -40                
Correct output: -76                 | Program output: -76                
Correct output: -54                 | Program output: -19                
Correct output: -54                 | Program output: -50                
Correct output: -70                 | Program output: -70                
Correct output: -36                 | Program output: -12                
Correct output: -70                 | Program output: -20                
Correct output: -42                 | Program output: -42                
Correct output: -37                 | Program output: -34                
Correct output: 0                   | Program output: 0                  
Correct output: -55                 | Program output: -55                
Correct output: -11                 | Program output: 44                 
Correct output: -81                 | Program output: -78                
Correct output: -96                 | Program output: -96                
Correct output: -99                 | Program output: -99                
Correct output: -83                 | Program output: -83                
Correct output: -45                 | Program output: -35                
Correct output: -75                 | Program output: -28                
Correct output: -92                 | Program output: -92                
Correct output: -45                 | Program output: -45                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_rot} {:close 2, :instruction exec_do*times} {:close 0, :instruction in4} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_k} {:close 0, :instruction 86} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_do*while} {:close 1, :instruction in1} {:close 0, :instruction 38} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction tag_exec_98} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_div} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction -75} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_when} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_while} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_max} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_k} {:close 0, :instruction exec_stackdepth})
Lexicase best program: (boolean_eq boolean_swap exec_dup_items exec_rot (exec_do*times ()) (in4 boolean_yank exec_rot (integer_inc) (integer_rot exec_k () (86 integer_dec) integer_min) (exec_if (boolean_not exec_do*while () in1) (38 exec_yankdup print_integer integer_yankdup) tag_exec_98 (exec_y_when_autoconstructing (exec_pop (integer_eq integer_div exec_rot (boolean_invert_first_then_and) (boolean_yankdup -75 integer_yankdup integer_fromboolean) (exec_y (boolean_shove boolean_swap boolean_yankdup exec_do*times (integer_empty boolean_invert_first_then_and) exec_when () exec_y (boolean_yank integer_lte exec_s_when_autoconstructing (integer_empty integer_dup integer_dup_items exec_do*range (boolean_rot) integer_shove integer_mult exec_while (exec_dup (boolean_yank) integer_max exec_k_when_autoconstructing (integer_gt boolean_dup integer_mult) (integer_empty exec_empty exec_rot (boolean_stackdepth integer_lte exec_do*count (boolean_dup_items exec_k () (exec_stackdepth))) () ()))) () ())))))))) ())
Lexicase best errors: [0 0 1 0 0 0 0 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 106
Percent parens: 0.349
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_rot} {:close 2, :instruction exec_do*times} {:close 0, :instruction in4} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_k} {:close 0, :instruction 86} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_do*while} {:close 1, :instruction in1} {:close 0, :instruction 38} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction tag_exec_98} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_div} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction -75} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_when} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_while} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_max} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_k} {:close 0, :instruction exec_stackdepth})
Zero cases best program: (boolean_eq boolean_swap exec_dup_items exec_rot (exec_do*times ()) (in4 boolean_yank exec_rot (integer_inc) (integer_rot exec_k () (86 integer_dec) integer_min) (exec_if (boolean_not exec_do*while () in1) (38 exec_yankdup print_integer integer_yankdup) tag_exec_98 (exec_y_when_autoconstructing (exec_pop (integer_eq integer_div exec_rot (boolean_invert_first_then_and) (boolean_yankdup -75 integer_yankdup integer_fromboolean) (exec_y (boolean_shove boolean_swap boolean_yankdup exec_do*times (integer_empty boolean_invert_first_then_and) exec_when () exec_y (boolean_yank integer_lte exec_s_when_autoconstructing (integer_empty integer_dup integer_dup_items exec_do*range (boolean_rot) integer_shove integer_mult exec_while (exec_dup (boolean_yank) integer_max exec_k_when_autoconstructing (integer_gt boolean_dup integer_mult) (integer_empty exec_empty exec_rot (boolean_stackdepth integer_lte exec_do*count (boolean_dup_items exec_k () (exec_stackdepth))) () ()))) () ())))))))) ())
Zero cases best errors: [0 0 1 0 0 0 0 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 106
Percent parens: 0.349
--- Lexicase Population Statistics ---
Count of elite individuals by case: (185 134 124 339 183 197 155 279 120 155)
Population mean number of elite cases: 1.87
Count of perfect (error zero) individuals by case: (185 134 124 339 183 197 155 279 120 155)
Population mean number of perfect (error zero) cases: 1.87
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_flush} {:close 2, :instruction exec_do*times} {:close 0, :instruction in4} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_k} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_do*while} {:close 1, :instruction in1} {:close 0, :instruction 38} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction tag_exec_98} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction in2} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction -75} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_when} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_while} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_stackdepth})
Best program: (boolean_eq boolean_swap exec_dup_items exec_rot (integer_flush exec_do*times ()) (in4 exec_rot (integer_inc) (integer_rot exec_k () (print_boolean integer_dec) integer_min) (in2 exec_if (boolean_not exec_do*while () in1) (38 exec_yankdup print_integer boolean_pop integer_yankdup) exec_dup_times (boolean_dup_items tag_exec_98 (exec_flush) integer_empty integer_eq exec_noop boolean_invert_second_then_and integer_div in2 exec_rot (exec_dup_times (boolean_yankdup integer_mod -75 exec_y (boolean_swap boolean_rot exec_do*times (integer_empty boolean_invert_first_then_and) exec_when () exec_y (boolean_yank boolean_invert_second_then_and exec_s_when_autoconstructing (integer_empty integer_dup integer_dup_items boolean_not exec_do*range (exec_if (boolean_rot) (integer_shove exec_while (exec_dup (boolean_yank) integer_max integer_gt boolean_dup integer_mult) integer_empty exec_empty integer_lte exec_do*count (boolean_dup_items exec_stackdepth)))) () ())))) () ()))) ())
Errors: [0 0 1 0 0 0 0 0 1 0]
Total: 2
Mean: 0.2
Genome size: 71
Size: 103
Percent parens: 0.311
--- Population Statistics ---
Average total errors in population: 8.129
Median total errors in population: 10
Error averages by case: (0.815 0.866 0.876 0.661 0.817 0.803 0.845 0.721 0.88 0.845)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 57.533
Average program size in population (points): 79.96
Average percent parens in population: 0.277
Minimum age in population: 11.0
Maximum age in population: 11.0
Average age in population: 11.0
Median age in population: 11.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.009
Error (vector) diversity:			 0.056
Behavioral diversity:				 0.316
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 7287750
--- Timings ---
Current time: 1559594168382 milliseconds
Total Time:          27.5 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        13.4 seconds, 48.8%
Fitness Testing:      8.9 seconds, 32.5%
Report:               5.0 seconds, 18.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 198
Test mean error for best: 0.19800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -89                 | Program output: -89                
Correct output: 63                  | Program output: 63                 
Correct output: -98                 | Program output: -98                
Correct output: 44                  | Program output: 44                 
Correct output: 50                  | Program output: 50                 
Correct output: -65                 | Program output: -65                
Correct output: -27                 | Program output: -27                
Correct output: -72                 | Program output: -72                
Correct output: -25                 | Program output: -25                
Correct output: -93                 | Program output: -93                
Correct output: 95                  | Program output: 95                 
Correct output: -79                 | Program output: -79                
Correct output: 99                  | Program output: 99                 
Correct output: -97                 | Program output: -97                
Correct output: -55                 | Program output: -55                
Correct output: 0                   | Program output: 0                  
Correct output: 24                  | Program output: 24                 
Correct output: 26                  | Program output: 26                 
Correct output: 24                  | Program output: 24                 
Correct output: 8                   | Program output: 8                  
Correct output: 19                  | Program output: 19                 
Correct output: 8                   | Program output: 8                  
Correct output: 7                   | Program output: 7                  
Correct output: 23                  | Program output: 23                 
Correct output: 7                   | Program output: 7                  
Correct output: 3                   | Program output: 7                  
Correct output: 8                   | Program output: 8                  
Correct output: 5                   | Program output: 5                  
Correct output: 18                  | Program output: 52                 
Correct output: 13                  | Program output: 13                 
Correct output: 44                  | Program output: 44                 
Correct output: 16                  | Program output: 16                 
Correct output: 42                  | Program output: 42                 
Correct output: 2                   | Program output: 2                  
Correct output: 2                   | Program output: 45                 
Correct output: -55                 | Program output: -55                
Correct output: -85                 | Program output: -64                
Correct output: -16                 | Program output: -16                
Correct output: -75                 | Program output: -75                
Correct output: -59                 | Program output: -51                
Correct output: -99                 | Program output: -99                
Correct output: -91                 | Program output: -91                
Correct output: -74                 | Program output: -74                
Correct output: -10                 | Program output: -10                
Correct output: -31                 | Program output: -31                
Correct output: -88                 | Program output: -88                
Correct output: -28                 | Program output: -28                
Correct output: -59                 | Program output: -59                
Correct output: -58                 | Program output: -58                
Correct output: -59                 | Program output: -59                
Correct output: -99                 | Program output: -99                
Correct output: -79                 | Program output: -79                
Correct output: -77                 | Program output: -77                
Correct output: -44                 | Program output: -44                
Correct output: -15                 | Program output: 14                 
Correct output: -34                 | Program output: -24                
Correct output: -93                 | Program output: -93                
Correct output: -98                 | Program output: -98                
Correct output: -39                 | Program output: 34                 
Correct output: -67                 | Program output: -67                
Correct output: -56                 | Program output: -56                
Correct output: 11                  | Program output: 62                 
Correct output: -92                 | Program output: 5                  
Correct output: -45                 | Program output: -45                
Correct output: 24                  | Program output: 25                 
Correct output: -100                | Program output: -69                
Correct output: -36                 | Program output: -36                
Correct output: -62                 | Program output: -62                
Correct output: -79                 | Program output: -79                
Correct output: -48                 | Program output: -48                
Correct output: -22                 | Program output: -22                
Correct output: -62                 | Program output: -62                
Correct output: -98                 | Program output: -98                
Correct output: -73                 | Program output: -73                
Correct output: -50                 | Program output: -50                
Correct output: -40                 | Program output: 0                  
Correct output: -76                 | Program output: -76                
Correct output: -54                 | Program output: -54                
Correct output: -54                 | Program output: -54                
Correct output: -70                 | Program output: -64                
Correct output: -36                 | Program output: -36                
Correct output: -70                 | Program output: -70                
Correct output: -42                 | Program output: -42                
Correct output: -37                 | Program output: -37                
Correct output: 0                   | Program output: 0                  
Correct output: -55                 | Program output: -55                
Correct output: -11                 | Program output: -11                
Correct output: -81                 | Program output: -81                
Correct output: -96                 | Program output: -94                
Correct output: -99                 | Program output: -55                
Correct output: -83                 | Program output: -82                
Correct output: -45                 | Program output: -45                
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -70                
Correct output: -45                 | Program output: -35                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_rot} {:close 1, :instruction integer_inc} {:close 0, :instruction in3} {:close 1, :instruction exec_k} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_div} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_add} {:close 1, :instruction print_integer} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction integer_max} {:close 0, :instruction exec_yank} {:close 0, :instruction 2} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction integer_empty})
Lexicase best program: (exec_rot (integer_inc) (in3 exec_k () (integer_eq integer_dec) integer_min) (in2 in4 integer_min exec_rot () (exec_noop exec_stackdepth boolean_empty exec_yankdup exec_s_when_autoconstructing (integer_empty print_integer boolean_yank) (integer_gte integer_div) (exec_do*while (boolean_yankdup exec_flush) integer_empty boolean_pop exec_do*count (print_boolean integer_add) print_integer) exec_noop) (integer_gte boolean_shove boolean_and integer_gte) boolean_eq boolean_yankdup exec_while (integer_max exec_yank 2 integer_empty integer_gt exec_swap () (exec_stackdepth boolean_or) in4 integer_empty)))
Lexicase best errors: [0 0 0 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 65
Percent parens: 0.262
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_rot} {:close 1, :instruction integer_inc} {:close 0, :instruction in3} {:close 1, :instruction exec_k} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_div} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_add} {:close 1, :instruction print_integer} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction integer_max} {:close 0, :instruction exec_yank} {:close 0, :instruction 2} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction integer_empty})
Zero cases best program: (exec_rot (integer_inc) (in3 exec_k () (integer_eq integer_dec) integer_min) (in2 in4 integer_min exec_rot () (exec_noop exec_stackdepth boolean_empty exec_yankdup exec_s_when_autoconstructing (integer_empty print_integer boolean_yank) (integer_gte integer_div) (exec_do*while (boolean_yankdup exec_flush) integer_empty boolean_pop exec_do*count (print_boolean integer_add) print_integer) exec_noop) (integer_gte boolean_shove boolean_and integer_gte) boolean_eq boolean_yankdup exec_while (integer_max exec_yank 2 integer_empty integer_gt exec_swap () (exec_stackdepth boolean_or) in4 integer_empty)))
Zero cases best errors: [0 0 0 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 65
Percent parens: 0.262
--- Lexicase Population Statistics ---
Count of elite individuals by case: (209 165 97 95 208 93 237 199 313 203)
Population mean number of elite cases: 1.82
Count of perfect (error zero) individuals by case: (209 165 97 95 208 93 237 199 313 203)
Population mean number of perfect (error zero) cases: 1.82
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_rot} {:close 1, :instruction integer_inc} {:close 0, :instruction in3} {:close 1, :instruction exec_k} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_div} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_add} {:close 1, :instruction print_integer} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_while} {:close 0, :instruction integer_max} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction 2} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction in4} {:close 0, :instruction integer_empty})
Best program: (exec_rot (integer_inc) (in3 exec_k () (integer_eq integer_dec) integer_min) (in2 in4 integer_min exec_rot () (exec_noop exec_stackdepth boolean_flush boolean_empty exec_yankdup exec_s_when_autoconstructing (integer_empty print_integer boolean_yank) (integer_gte integer_div) (exec_do*while (exec_flush) integer_empty boolean_pop exec_do*count (print_boolean integer_add) print_integer) exec_noop) (boolean_shove integer_gte) boolean_eq boolean_yankdup integer_shove exec_while (integer_max exec_yank exec_s_when_autoconstructing (2 integer_empty boolean_yank integer_gt exec_swap () (exec_stackdepth integer_div in4 integer_empty)) () ())))
Errors: [0 0 0 0 0 0 0 1 0 0]
Total: 1
Mean: 0.1
Genome size: 49
Size: 69
Percent parens: 0.290
--- Population Statistics ---
Average total errors in population: 8.181
Median total errors in population: 10
Error averages by case: (0.791 0.835 0.903 0.905 0.792 0.907 0.763 0.801 0.687 0.797)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 58.186
Average program size in population (points): 81.742
Average percent parens in population: 0.284
Minimum age in population: 12.0
Maximum age in population: 12.0
Average age in population: 12.0
Median age in population: 12.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.01
Error (vector) diversity:			 0.038
Behavioral diversity:				 0.296
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 7855365
--- Timings ---
Current time: 1559594170291 milliseconds
Total Time:          29.7 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        14.5 seconds, 48.8%
Fitness Testing:      9.5 seconds, 31.9%
Report:               5.6 seconds, 19.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 198
Test mean error for best: 0.19800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -89                 | Program output: -89                
Correct output: 63                  | Program output: 63                 
Correct output: -98                 | Program output: -98                
Correct output: 44                  | Program output: 44                 
Correct output: 50                  | Program output: 50                 
Correct output: -65                 | Program output: -65                
Correct output: -27                 | Program output: -27                
Correct output: -72                 | Program output: -72                
Correct output: -25                 | Program output: -25                
Correct output: -93                 | Program output: -93                
Correct output: 95                  | Program output: 95                 
Correct output: -79                 | Program output: -79                
Correct output: 99                  | Program output: 99                 
Correct output: -97                 | Program output: -97                
Correct output: -55                 | Program output: -55                
Correct output: 0                   | Program output: 0                  
Correct output: 24                  | Program output: 24                 
Correct output: 26                  | Program output: 26                 
Correct output: 24                  | Program output: 24                 
Correct output: 8                   | Program output: 8                  
Correct output: 19                  | Program output: 19                 
Correct output: 8                   | Program output: 8                  
Correct output: 7                   | Program output: 7                  
Correct output: 23                  | Program output: 23                 
Correct output: 7                   | Program output: 7                  
Correct output: 3                   | Program output: 7                  
Correct output: 8                   | Program output: 8                  
Correct output: 5                   | Program output: 5                  
Correct output: 18                  | Program output: 52                 
Correct output: 13                  | Program output: 13                 
Correct output: 44                  | Program output: 44                 
Correct output: 16                  | Program output: 16                 
Correct output: 42                  | Program output: 42                 
Correct output: 2                   | Program output: 2                  
Correct output: 2                   | Program output: 45                 
Correct output: -55                 | Program output: -55                
Correct output: -85                 | Program output: -64                
Correct output: -16                 | Program output: -16                
Correct output: -75                 | Program output: -75                
Correct output: -59                 | Program output: -51                
Correct output: -99                 | Program output: -99                
Correct output: -91                 | Program output: -91                
Correct output: -74                 | Program output: -74                
Correct output: -10                 | Program output: -10                
Correct output: -31                 | Program output: -31                
Correct output: -88                 | Program output: -88                
Correct output: -28                 | Program output: -28                
Correct output: -59                 | Program output: -59                
Correct output: -58                 | Program output: -58                
Correct output: -59                 | Program output: -59                
Correct output: -99                 | Program output: -99                
Correct output: -79                 | Program output: -79                
Correct output: -77                 | Program output: -77                
Correct output: -44                 | Program output: -44                
Correct output: -15                 | Program output: 14                 
Correct output: -34                 | Program output: -24                
Correct output: -93                 | Program output: -93                
Correct output: -98                 | Program output: -98                
Correct output: -39                 | Program output: 34                 
Correct output: -67                 | Program output: -67                
Correct output: -56                 | Program output: -56                
Correct output: 11                  | Program output: 62                 
Correct output: -92                 | Program output: 5                  
Correct output: -45                 | Program output: -45                
Correct output: 24                  | Program output: 25                 
Correct output: -100                | Program output: -69                
Correct output: -36                 | Program output: -36                
Correct output: -62                 | Program output: -62                
Correct output: -79                 | Program output: -79                
Correct output: -48                 | Program output: -48                
Correct output: -22                 | Program output: -22                
Correct output: -62                 | Program output: -62                
Correct output: -98                 | Program output: -98                
Correct output: -73                 | Program output: -73                
Correct output: -50                 | Program output: -50                
Correct output: -40                 | Program output: 0                  
Correct output: -76                 | Program output: -76                
Correct output: -54                 | Program output: -54                
Correct output: -54                 | Program output: -54                
Correct output: -70                 | Program output: -64                
Correct output: -36                 | Program output: -36                
Correct output: -70                 | Program output: -70                
Correct output: -42                 | Program output: -42                
Correct output: -37                 | Program output: -37                
Correct output: 0                   | Program output: 0                  
Correct output: -55                 | Program output: -55                
Correct output: -11                 | Program output: -11                
Correct output: -81                 | Program output: -81                
Correct output: -96                 | Program output: -94                
Correct output: -99                 | Program output: -55                
Correct output: -83                 | Program output: -82                
Correct output: -45                 | Program output: -45                
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -70                
Correct output: -45                 | Program output: -35                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_rot} {:close 1, :instruction integer_inc} {:close 0, :instruction in3} {:close 1, :instruction exec_k} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_add} {:close 0, :instruction integer_lt} {:close 1, :instruction print_integer} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_while} {:close 0, :instruction integer_max} {:close 0, :instruction exec_yank} {:close 0, :instruction 2} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction integer_empty})
Lexicase best program: (exec_rot (integer_inc) (in3 exec_k () (integer_eq integer_dec) integer_min) (in2 in4 integer_min exec_rot () (boolean_yank exec_stackdepth exec_yankdup exec_s_when_autoconstructing (integer_empty print_integer boolean_yank) (exec_do*while (integer_lte exec_flush) boolean_pop exec_do*count (print_boolean integer_add) integer_lt print_integer) (exec_noop) boolean_shove integer_gte) (boolean_eq boolean_yankdup integer_shove exec_while (integer_max exec_yank 2 boolean_yank integer_gt integer_fromboolean exec_s_when_autoconstructing (exec_stackdepth in4 integer_empty) () ()))))
Lexicase best errors: [0 0 0 0 1 0 0 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 62
Percent parens: 0.290
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_rot} {:close 1, :instruction integer_inc} {:close 0, :instruction in3} {:close 1, :instruction exec_k} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_add} {:close 0, :instruction integer_lt} {:close 1, :instruction print_integer} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_while} {:close 0, :instruction integer_max} {:close 0, :instruction exec_yank} {:close 0, :instruction 2} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction integer_empty})
Zero cases best program: (exec_rot (integer_inc) (in3 exec_k () (integer_eq integer_dec) integer_min) (in2 in4 integer_min exec_rot () (boolean_yank exec_stackdepth exec_yankdup exec_s_when_autoconstructing (integer_empty print_integer boolean_yank) (exec_do*while (integer_lte exec_flush) boolean_pop exec_do*count (print_boolean integer_add) integer_lt print_integer) (exec_noop) boolean_shove integer_gte) (boolean_eq boolean_yankdup integer_shove exec_while (integer_max exec_yank 2 boolean_yank integer_gt integer_fromboolean exec_s_when_autoconstructing (exec_stackdepth in4 integer_empty) () ()))))
Zero cases best errors: [0 0 0 0 1 0 0 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 62
Percent parens: 0.290
--- Lexicase Population Statistics ---
Count of elite individuals by case: (408 161 172 167 99 263 175 348 94 270)
Population mean number of elite cases: 2.16
Count of perfect (error zero) individuals by case: (408 161 172 167 99 263 175 348 94 270)
Population mean number of perfect (error zero) cases: 2.16
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_rot} {:close 1, :instruction integer_inc} {:close 0, :instruction in3} {:close 1, :instruction exec_k} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_div} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_add} {:close 1, :instruction print_integer} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_while} {:close 0, :instruction exec_yank} {:close 0, :instruction 2} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction exec_flush} {:close 0, :instruction in4} {:close 0, :instruction integer_empty})
Best program: (exec_rot (integer_inc) (in3 exec_k () (integer_eq integer_dec) integer_min) (in2 in4 integer_min exec_rot () (exec_noop exec_stackdepth boolean_empty exec_yankdup exec_s_when_autoconstructing (print_integer boolean_yank) (integer_gte integer_div) (exec_do*while (integer_lte exec_flush) integer_empty boolean_eq) boolean_pop exec_do*count (print_boolean integer_add) print_integer) (integer_gte) boolean_eq boolean_yankdup integer_shove exec_while (exec_yank 2 integer_empty boolean_yank integer_gt exec_swap () (exec_stackdepth integer_div exec_flush in4 integer_empty))))
Errors: [0 0 0 0 1 0 0 0 1 0]
Total: 2
Mean: 0.2
Genome size: 46
Size: 63
Percent parens: 0.270
--- Population Statistics ---
Average total errors in population: 7.843
Median total errors in population: 10
Error averages by case: (0.592 0.839 0.828 0.833 0.901 0.737 0.825 0.652 0.906 0.73)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 52.869
Average program size in population (points): 73.258
Average percent parens in population: 0.276
Minimum age in population: 13.0
Maximum age in population: 13.0
Average age in population: 13.0
Median age in population: 13.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.009
Error (vector) diversity:			 0.053
Behavioral diversity:				 0.312
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 8391887
--- Timings ---
Current time: 1559594172145 milliseconds
Total Time:          31.6 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        15.6 seconds, 49.4%
Fitness Testing:     10.0 seconds, 31.7%
Report:               5.9 seconds, 18.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 0
Test mean error for best: 0.00000
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -89                 | Program output: -89                
Correct output: 63                  | Program output: 63                 
Correct output: -98                 | Program output: -98                
Correct output: 44                  | Program output: 44                 
Correct output: 50                  | Program output: 50                 
Correct output: -65                 | Program output: -65                
Correct output: -27                 | Program output: -27                
Correct output: -72                 | Program output: -72                
Correct output: -25                 | Program output: -25                
Correct output: -93                 | Program output: -93                
Correct output: 95                  | Program output: 95                 
Correct output: -79                 | Program output: -79                
Correct output: 99                  | Program output: 99                 
Correct output: -97                 | Program output: -97                
Correct output: -55                 | Program output: -55                
Correct output: 0                   | Program output: 0                  
Correct output: 24                  | Program output: 24                 
Correct output: 26                  | Program output: 26                 
Correct output: 24                  | Program output: 24                 
Correct output: 8                   | Program output: 8                  
Correct output: 19                  | Program output: 19                 
Correct output: 8                   | Program output: 8                  
Correct output: 7                   | Program output: 7                  
Correct output: 23                  | Program output: 23                 
Correct output: 7                   | Program output: 7                  
Correct output: 3                   | Program output: 3                  
Correct output: 8                   | Program output: 8                  
Correct output: 5                   | Program output: 5                  
Correct output: 18                  | Program output: 18                 
Correct output: 13                  | Program output: 13                 
Correct output: 44                  | Program output: 44                 
Correct output: 16                  | Program output: 16                 
Correct output: 42                  | Program output: 42                 
Correct output: 2                   | Program output: 2                  
Correct output: 2                   | Program output: 2                  
Correct output: -55                 | Program output: -55                
Correct output: -85                 | Program output: -85                
Correct output: -16                 | Program output: -16                
Correct output: -75                 | Program output: -75                
Correct output: -59                 | Program output: -59                
Correct output: -99                 | Program output: -99                
Correct output: -91                 | Program output: -91                
Correct output: -74                 | Program output: -74                
Correct output: -10                 | Program output: -10                
Correct output: -31                 | Program output: -31                
Correct output: -88                 | Program output: -88                
Correct output: -28                 | Program output: -28                
Correct output: -59                 | Program output: -59                
Correct output: -58                 | Program output: -58                
Correct output: -59                 | Program output: -59                
Correct output: -99                 | Program output: -99                
Correct output: -79                 | Program output: -79                
Correct output: -77                 | Program output: -77                
Correct output: -44                 | Program output: -44                
Correct output: -15                 | Program output: -15                
Correct output: -34                 | Program output: -34                
Correct output: -93                 | Program output: -93                
Correct output: -98                 | Program output: -98                
Correct output: -39                 | Program output: -39                
Correct output: -67                 | Program output: -67                
Correct output: -56                 | Program output: -56                
Correct output: 11                  | Program output: 11                 
Correct output: -92                 | Program output: -92                
Correct output: -45                 | Program output: -45                
Correct output: 24                  | Program output: 24                 
Correct output: -100                | Program output: -100               
Correct output: -36                 | Program output: -36                
Correct output: -62                 | Program output: -62                
Correct output: -79                 | Program output: -79                
Correct output: -48                 | Program output: -48                
Correct output: -22                 | Program output: -22                
Correct output: -62                 | Program output: -62                
Correct output: -98                 | Program output: -98                
Correct output: -73                 | Program output: -73                
Correct output: -50                 | Program output: -50                
Correct output: -40                 | Program output: -40                
Correct output: -76                 | Program output: -76                
Correct output: -54                 | Program output: -54                
Correct output: -54                 | Program output: -54                
Correct output: -70                 | Program output: -70                
Correct output: -36                 | Program output: -36                
Correct output: -70                 | Program output: -70                
Correct output: -42                 | Program output: -42                
Correct output: -37                 | Program output: -37                
Correct output: 0                   | Program output: 0                  
Correct output: -55                 | Program output: -55                
Correct output: -11                 | Program output: -11                
Correct output: -81                 | Program output: -81                
Correct output: -96                 | Program output: -96                
Correct output: -99                 | Program output: -99                
Correct output: -83                 | Program output: -83                
Correct output: -45                 | Program output: -45                
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -92                
Correct output: -45                 | Program output: -45                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_rot} {:close 1, :instruction integer_inc} {:close 0, :instruction in3} {:close 1, :instruction exec_k} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_div} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_gte} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_while} {:close 0, :instruction integer_max} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction tag_exec_774} {:close 0, :instruction 2} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 0, :instruction integer_empty})
Lexicase best program: (exec_rot (integer_inc) (in3 exec_k () (integer_eq integer_dec) integer_min) (in2 in4 integer_min exec_rot () (exec_noop exec_stackdepth boolean_empty exec_yankdup exec_s_when_autoconstructing (boolean_invert_second_then_and integer_empty print_integer boolean_yank) (integer_gte integer_div) (exec_do*while (integer_lte exec_flush) integer_empty boolean_pop exec_do*count (print_boolean integer_add) boolean_flush exec_noop) boolean_shove integer_gte) (in1 integer_min boolean_eq boolean_yankdup integer_shove exec_while (integer_max integer_flush exec_yank tag_exec_774 (2 integer_empty boolean_yank integer_gt exec_swap () (boolean_empty exec_stackdepth boolean_shove integer_div boolean_dup in4 integer_empty))))))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 74
Percent parens: 0.243
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_rot} {:close 1, :instruction integer_inc} {:close 0, :instruction in3} {:close 1, :instruction exec_k} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_div} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_gte} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_while} {:close 0, :instruction integer_max} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction tag_exec_774} {:close 0, :instruction 2} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 0, :instruction integer_empty})
Zero cases best program: (exec_rot (integer_inc) (in3 exec_k () (integer_eq integer_dec) integer_min) (in2 in4 integer_min exec_rot () (exec_noop exec_stackdepth boolean_empty exec_yankdup exec_s_when_autoconstructing (boolean_invert_second_then_and integer_empty print_integer boolean_yank) (integer_gte integer_div) (exec_do*while (integer_lte exec_flush) integer_empty boolean_pop exec_do*count (print_boolean integer_add) boolean_flush exec_noop) boolean_shove integer_gte) (in1 integer_min boolean_eq boolean_yankdup integer_shove exec_while (integer_max integer_flush exec_yank tag_exec_774 (2 integer_empty boolean_yank integer_gt exec_swap () (boolean_empty exec_stackdepth boolean_shove integer_div boolean_dup in4 integer_empty))))))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 74
Percent parens: 0.243
--- Lexicase Population Statistics ---
Count of elite individuals by case: (224 203 217 255 185 214 205 179 218 181)
Population mean number of elite cases: 2.08
Count of perfect (error zero) individuals by case: (224 203 217 255 185 214 205 179 218 181)
Population mean number of perfect (error zero) cases: 2.08
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_rot} {:close 1, :instruction integer_inc} {:close 0, :instruction in3} {:close 1, :instruction exec_k} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_div} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_gte} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_while} {:close 0, :instruction integer_max} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction tag_exec_774} {:close 0, :instruction 2} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 0, :instruction integer_empty})
Best program: (exec_rot (integer_inc) (in3 exec_k () (integer_eq integer_dec) integer_min) (in2 in4 integer_min exec_rot () (exec_noop exec_stackdepth boolean_empty exec_yankdup exec_s_when_autoconstructing (boolean_invert_second_then_and integer_empty print_integer boolean_yank) (integer_gte integer_div) (exec_do*while (integer_lte exec_flush) integer_empty boolean_pop exec_do*count (print_boolean integer_add) boolean_flush exec_noop) boolean_shove integer_gte) (in1 integer_min boolean_eq boolean_yankdup integer_shove exec_while (integer_max integer_flush exec_yank tag_exec_774 (2 integer_empty boolean_yank integer_gt exec_swap () (boolean_empty exec_stackdepth boolean_shove integer_div boolean_dup in4 integer_empty))))))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 56
Size: 74
Percent parens: 0.243
--- Population Statistics ---
Average total errors in population: 7.919
Median total errors in population: 10
Error averages by case: (0.776 0.797 0.783 0.745 0.815 0.786 0.795 0.821 0.782 0.819)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 54.917
Average program size in population (points): 77.162
Average percent parens in population: 0.286
Minimum age in population: 14.0
Maximum age in population: 14.0
Average age in population: 14.0
Median age in population: 14.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.011
Error (vector) diversity:			 0.046
Behavioral diversity:				 0.302
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 8953784
--- Timings ---
Current time: 1559594174092 milliseconds
Total Time:          33.5 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        16.7 seconds, 49.9%
Fitness Testing:     10.5 seconds, 31.5%
Report:               6.1 seconds, 18.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 14
Successful program: (exec_rot (integer_inc) (in3 exec_k () (integer_eq integer_dec) integer_min) (in2 in4 integer_min exec_rot () (exec_noop exec_stackdepth boolean_empty exec_yankdup exec_s_when_autoconstructing (boolean_invert_second_then_and integer_empty print_integer boolean_yank) (integer_gte integer_div) (exec_do*while (integer_lte exec_flush) integer_empty boolean_pop exec_do*count (print_boolean integer_add) boolean_flush exec_noop) boolean_shove integer_gte) (in1 integer_min boolean_eq boolean_yankdup integer_shove exec_while (integer_max integer_flush exec_yank tag_exec_774 (2 integer_empty boolean_yank integer_gt exec_swap () (boolean_empty exec_stackdepth boolean_shove integer_div boolean_dup in4 integer_empty))))))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 74


Auto-simplifying with starting size: 74
step: 0
program: (exec_rot (integer_inc) (in3 exec_k () (integer_eq integer_dec) integer_min) (in2 in4 integer_min exec_rot () (exec_noop exec_stackdepth boolean_empty exec_yankdup exec_s_when_autoconstructing (boolean_invert_second_then_and integer_empty print_integer boolean_yank) (integer_gte integer_div) (exec_do*while (integer_lte exec_flush) integer_empty boolean_pop exec_do*count (print_boolean integer_add) boolean_flush exec_noop) boolean_shove integer_gte) (in1 integer_min boolean_eq boolean_yankdup integer_shove exec_while (integer_max integer_flush exec_yank tag_exec_774 (2 integer_empty boolean_yank integer_gt exec_swap () (boolean_empty exec_stackdepth boolean_shove integer_div boolean_dup in4 integer_empty))))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 74

step: 500
program: (exec_rot (integer_inc) (in3 exec_k () (integer_eq integer_dec) integer_min) (in2 in4 integer_min exec_rot () (exec_noop exec_stackdepth boolean_empty exec_yankdup exec_s_when_autoconstructing (boolean_invert_second_then_and integer_empty print_integer boolean_yank) (integer_gte integer_div) (exec_do*while (integer_lte exec_flush) integer_empty boolean_pop exec_do*count (print_boolean integer_add) boolean_flush exec_noop) boolean_shove integer_gte) (in1 integer_min boolean_eq boolean_yankdup integer_shove exec_while (integer_max integer_flush exec_yank tag_exec_774 (2 integer_empty boolean_yank integer_gt exec_swap () (boolean_empty exec_stackdepth boolean_shove integer_div boolean_dup in4 integer_empty))))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 74

step: 1000
program: (exec_rot (integer_inc) (in3 exec_k () (integer_eq integer_dec) integer_min) (in2 in4 integer_min exec_rot () (exec_noop exec_stackdepth boolean_empty exec_yankdup exec_s_when_autoconstructing (boolean_invert_second_then_and integer_empty print_integer boolean_yank) (integer_gte integer_div) (exec_do*while (integer_lte exec_flush) integer_empty boolean_pop exec_do*count (print_boolean integer_add) boolean_flush exec_noop) boolean_shove integer_gte) (in1 integer_min boolean_eq boolean_yankdup integer_shove exec_while (integer_max integer_flush exec_yank tag_exec_774 (2 integer_empty boolean_yank integer_gt exec_swap () (boolean_empty exec_stackdepth boolean_shove integer_div boolean_dup in4 integer_empty))))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 74

step: 1500
program: (exec_rot (integer_inc) (in3 exec_k () (integer_eq integer_dec) integer_min) (in2 in4 integer_min exec_rot () (exec_noop exec_stackdepth boolean_empty exec_yankdup exec_s_when_autoconstructing (boolean_invert_second_then_and integer_empty print_integer boolean_yank) (integer_gte integer_div) (exec_do*while (integer_lte exec_flush) integer_empty boolean_pop exec_do*count (print_boolean integer_add) boolean_flush exec_noop) boolean_shove integer_gte) (in1 integer_min boolean_eq boolean_yankdup integer_shove exec_while (integer_max integer_flush exec_yank tag_exec_774 (2 integer_empty boolean_yank integer_gt exec_swap () (boolean_empty exec_stackdepth boolean_shove integer_div boolean_dup in4 integer_empty))))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 74

step: 2000
program: (exec_rot (integer_inc) (in3 exec_k () (integer_eq integer_dec) integer_min) (in2 in4 integer_min exec_rot () (exec_noop exec_stackdepth boolean_empty exec_yankdup exec_s_when_autoconstructing (boolean_invert_second_then_and integer_empty print_integer boolean_yank) (integer_gte integer_div) (exec_do*while (integer_lte exec_flush) integer_empty boolean_pop exec_do*count (print_boolean integer_add) boolean_flush exec_noop) boolean_shove integer_gte) (in1 integer_min boolean_eq boolean_yankdup integer_shove exec_while (integer_max integer_flush exec_yank tag_exec_774 (2 integer_empty boolean_yank integer_gt exec_swap () (boolean_empty exec_stackdepth boolean_shove integer_div boolean_dup in4 integer_empty))))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 74

step: 2500
program: (exec_rot (integer_inc) (in3 exec_k () (integer_eq integer_dec) integer_min) (in2 in4 integer_min exec_rot () (exec_noop exec_stackdepth boolean_empty exec_yankdup exec_s_when_autoconstructing (boolean_invert_second_then_and integer_empty print_integer boolean_yank) (integer_gte integer_div) (exec_do*while (integer_lte exec_flush) integer_empty boolean_pop exec_do*count (print_boolean integer_add) boolean_flush exec_noop) boolean_shove integer_gte) (in1 integer_min boolean_eq boolean_yankdup integer_shove exec_while (integer_max integer_flush exec_yank tag_exec_774 (2 integer_empty boolean_yank integer_gt exec_swap () (boolean_empty exec_stackdepth boolean_shove integer_div boolean_dup in4 integer_empty))))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 74

step: 3000
program: (exec_rot (integer_inc) (in3 exec_k () (integer_eq integer_dec) integer_min) (in2 in4 integer_min exec_rot () (exec_noop exec_stackdepth boolean_empty exec_yankdup exec_s_when_autoconstructing (boolean_invert_second_then_and integer_empty print_integer boolean_yank) (integer_gte integer_div) (exec_do*while (integer_lte exec_flush) integer_empty boolean_pop exec_do*count (print_boolean integer_add) boolean_flush exec_noop) boolean_shove integer_gte) (in1 integer_min boolean_eq boolean_yankdup integer_shove exec_while (integer_max integer_flush exec_yank tag_exec_774 (2 integer_empty boolean_yank integer_gt exec_swap () (boolean_empty exec_stackdepth boolean_shove integer_div boolean_dup in4 integer_empty))))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 74

step: 3500
program: (exec_rot (integer_inc) (in3 exec_k () (integer_eq integer_dec) integer_min) (in2 in4 integer_min exec_rot () (exec_noop exec_stackdepth boolean_empty exec_yankdup exec_s_when_autoconstructing (boolean_invert_second_then_and integer_empty print_integer boolean_yank) (integer_gte integer_div) (exec_do*while (integer_lte exec_flush) integer_empty boolean_pop exec_do*count (print_boolean integer_add) boolean_flush exec_noop) boolean_shove integer_gte) (in1 integer_min boolean_eq boolean_yankdup integer_shove exec_while (integer_max integer_flush exec_yank tag_exec_774 (2 integer_empty boolean_yank integer_gt exec_swap () (boolean_empty exec_stackdepth boolean_shove integer_div boolean_dup in4 integer_empty))))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 74

step: 4000
program: (exec_rot (integer_inc) (in3 exec_k () (integer_eq integer_dec) integer_min) (in2 in4 integer_min exec_rot () (exec_noop exec_stackdepth boolean_empty exec_yankdup exec_s_when_autoconstructing (boolean_invert_second_then_and integer_empty print_integer boolean_yank) (integer_gte integer_div) (exec_do*while (integer_lte exec_flush) integer_empty boolean_pop exec_do*count (print_boolean integer_add) boolean_flush exec_noop) boolean_shove integer_gte) (in1 integer_min boolean_eq boolean_yankdup integer_shove exec_while (integer_max integer_flush exec_yank tag_exec_774 (2 integer_empty boolean_yank integer_gt exec_swap () (boolean_empty exec_stackdepth boolean_shove integer_div boolean_dup in4 integer_empty))))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 74

step: 4500
program: (exec_rot (integer_inc) (in3 exec_k () (integer_eq integer_dec) integer_min) (in2 in4 integer_min exec_rot () (exec_noop exec_stackdepth boolean_empty exec_yankdup exec_s_when_autoconstructing (boolean_invert_second_then_and integer_empty print_integer boolean_yank) (integer_gte integer_div) (exec_do*while (integer_lte exec_flush) integer_empty boolean_pop exec_do*count (print_boolean integer_add) boolean_flush exec_noop) boolean_shove integer_gte) (in1 integer_min boolean_eq boolean_yankdup integer_shove exec_while (integer_max integer_flush exec_yank tag_exec_774 (2 integer_empty boolean_yank integer_gt exec_swap () (boolean_empty exec_stackdepth boolean_shove integer_div boolean_dup in4 integer_empty))))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 74

step: 5000
program: (exec_rot (integer_inc) (in3 exec_k () (integer_eq integer_dec) integer_min) (in2 in4 integer_min exec_rot () (exec_noop exec_stackdepth boolean_empty exec_yankdup exec_s_when_autoconstructing (boolean_invert_second_then_and integer_empty print_integer boolean_yank) (integer_gte integer_div) (exec_do*while (integer_lte exec_flush) integer_empty boolean_pop exec_do*count (print_boolean integer_add) boolean_flush exec_noop) boolean_shove integer_gte) (in1 integer_min boolean_eq boolean_yankdup integer_shove exec_while (integer_max integer_flush exec_yank tag_exec_774 (2 integer_empty boolean_yank integer_gt exec_swap () (boolean_empty exec_stackdepth boolean_shove integer_div boolean_dup in4 integer_empty))))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 74

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 0
Test mean error for best: 0.00000
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -89                 | Program output: -89                
Correct output: 63                  | Program output: 63                 
Correct output: -98                 | Program output: -98                
Correct output: 44                  | Program output: 44                 
Correct output: 50                  | Program output: 50                 
Correct output: -65                 | Program output: -65                
Correct output: -27                 | Program output: -27                
Correct output: -72                 | Program output: -72                
Correct output: -25                 | Program output: -25                
Correct output: -93                 | Program output: -93                
Correct output: 95                  | Program output: 95                 
Correct output: -79                 | Program output: -79                
Correct output: 99                  | Program output: 99                 
Correct output: -97                 | Program output: -97                
Correct output: -55                 | Program output: -55                
Correct output: 0                   | Program output: 0                  
Correct output: 24                  | Program output: 24                 
Correct output: 26                  | Program output: 26                 
Correct output: 24                  | Program output: 24                 
Correct output: 8                   | Program output: 8                  
Correct output: 19                  | Program output: 19                 
Correct output: 8                   | Program output: 8                  
Correct output: 7                   | Program output: 7                  
Correct output: 23                  | Program output: 23                 
Correct output: 7                   | Program output: 7                  
Correct output: 3                   | Program output: 3                  
Correct output: 8                   | Program output: 8                  
Correct output: 5                   | Program output: 5                  
Correct output: 18                  | Program output: 18                 
Correct output: 13                  | Program output: 13                 
Correct output: 44                  | Program output: 44                 
Correct output: 16                  | Program output: 16                 
Correct output: 42                  | Program output: 42                 
Correct output: 2                   | Program output: 2                  
Correct output: 2                   | Program output: 2                  
Correct output: -55                 | Program output: -55                
Correct output: -85                 | Program output: -85                
Correct output: -16                 | Program output: -16                
Correct output: -75                 | Program output: -75                
Correct output: -59                 | Program output: -59                
Correct output: -99                 | Program output: -99                
Correct output: -91                 | Program output: -91                
Correct output: -74                 | Program output: -74                
Correct output: -10                 | Program output: -10                
Correct output: -31                 | Program output: -31                
Correct output: -88                 | Program output: -88                
Correct output: -28                 | Program output: -28                
Correct output: -59                 | Program output: -59                
Correct output: -58                 | Program output: -58                
Correct output: -59                 | Program output: -59                
Correct output: -99                 | Program output: -99                
Correct output: -79                 | Program output: -79                
Correct output: -77                 | Program output: -77                
Correct output: -44                 | Program output: -44                
Correct output: -15                 | Program output: -15                
Correct output: -34                 | Program output: -34                
Correct output: -93                 | Program output: -93                
Correct output: -98                 | Program output: -98                
Correct output: -39                 | Program output: -39                
Correct output: -67                 | Program output: -67                
Correct output: -56                 | Program output: -56                
Correct output: 11                  | Program output: 11                 
Correct output: -92                 | Program output: -92                
Correct output: -45                 | Program output: -45                
Correct output: 24                  | Program output: 24                 
Correct output: -100                | Program output: -100               
Correct output: -36                 | Program output: -36                
Correct output: -62                 | Program output: -62                
Correct output: -79                 | Program output: -79                
Correct output: -48                 | Program output: -48                
Correct output: -22                 | Program output: -22                
Correct output: -62                 | Program output: -62                
Correct output: -98                 | Program output: -98                
Correct output: -73                 | Program output: -73                
Correct output: -50                 | Program output: -50                
Correct output: -40                 | Program output: -40                
Correct output: -76                 | Program output: -76                
Correct output: -54                 | Program output: -54                
Correct output: -54                 | Program output: -54                
Correct output: -70                 | Program output: -70                
Correct output: -36                 | Program output: -36                
Correct output: -70                 | Program output: -70                
Correct output: -42                 | Program output: -42                
Correct output: -37                 | Program output: -37                
Correct output: 0                   | Program output: 0                  
Correct output: -55                 | Program output: -55                
Correct output: -11                 | Program output: -11                
Correct output: -81                 | Program output: -81                
Correct output: -96                 | Program output: -96                
Correct output: -99                 | Program output: -99                
Correct output: -83                 | Program output: -83                
Correct output: -45                 | Program output: -45                
Correct output: -75                 | Program output: -75                
Correct output: -92                 | Program output: -92                
Correct output: -45                 | Program output: -45                
;;******************************
