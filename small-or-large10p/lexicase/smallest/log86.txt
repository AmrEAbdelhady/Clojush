Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 3000 :genetic-operator-probabilities {:uniform-addition-and-deletion,1.0} :uniform-addition-and-deletion-rate 0.09
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x30b9728f clojush.problems.software.smallest$fn__7461@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@24b8a393]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:uniform-addition-and-deletion 1.0}
max-error = 1
max-generations = 3000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-4 -74 -74 -74] -74] [[-85 -85 -85 80] -85] [[8 -100 -100 -100] -100] [[-69 -69 -69 -45] -69] [[12 -92 -92 -92] -92] [[-58 -58 41 -58] -58] [[49 24 49 49] 24] [[-57 -57 -57 17] -57] [[-24 -90 -24 -24] -90] [[67 67 67 -21] -21] [(23 23 23 23) 23] [(52 52 52 52) 52] [(-44 -44 -44 -44) -44] [(-92 -92 -92 -92) -92] [(44 44 44 44) 44] [(72 31 73 48) 31] [(7 0 50 98) 0] [(9 47 9 65) 9] [(63 18 5 60) 5] [(54 96 83 8) 8] [(88 67 55 8) 8] [(18 25 62 84) 18] [(86 11 50 98) 11] [(12 2 66 57) 2] [(40 18 89 86) 18] [(32 11 6 38) 6] [(81 76 98 9) 9] [(74 62 90 100) 62] [(2 66 7 66) 2] [(29 54 13 88) 13] [(51 60 55 23) 23] [(57 44 88 43) 43] [(1 56 95 42) 1] [(48 83 1 46) 1] [(82 26 35 55) 26] [(-84 53 73 92) -84] [(-37 53 -77 39) -77] [(-87 -18 -72 -68) -87] [(38 -2 -46 73) -46] [(18 97 -64 -45) -64] [(-76 97 99 -77) -77] [(-88 4 -41 21) -88] [(-27 20 -95 -81) -95] [(-90 -46 -7 -57) -90] [(4 60 -18 69) -18] [(0 68 -82 66) -82] [(-94 22 -23 -38) -94] [(-30 -25 -54 -46) -54] [(-83 81 59 86) -83] [(-86 34 -71 84) -86] [(-18 61 -88 93) -88] [(49 49 54 -24) -24] [(-15 -90 -85 -10) -90] [(27 65 23 -76) -76] [(24 -46 -98 -9) -98] [(11 -36 -86 89) -86] [(-71 63 50 37) -71] [(-43 -24 -22 10) -43] [(-20 30 -98 -74) -98] [(-22 -83 -94 -24) -94] [(-60 -92 -16 -42) -92] [(37 -97 98 -62) -97] [(-75 48 -50 37) -75] [(-12 38 2 87) -12] [(7 -34 74 -62) -62] [(79 72 72 -33) -33] [(64 -96 84 3) -96] [(64 -69 56 -64) -69] [(-77 -61 -34 -27) -77] [(-97 99 -53 53) -97] [(0 6 -71 45) -71] [(49 -90 49 -92) -92] [(-96 44 -11 -89) -96] [(-17 12 -55 -13) -55] [(-82 -42 76 -67) -82] [(-14 14 27 -80) -80] [(5 -99 -41 -74) -99] [(98 -92 53 22) -92] [(27 -40 -83 -81) -83] [(33 97 -71 -60) -71] [(-24 58 -87 67) -87] [(89 81 -27 -48) -48] [(-60 71 69 97) -60] [(-52 -43 78 -14) -52] [(54 -57 55 -27) -57] [(6 63 23 28) 6] [(77 54 62 72) 54] [(-16 90 -1 -6) -16] [(21 -64 21 80) -64] [(94 -71 85 -60) -71] [(-59 6 95 37) -59] [(-22 -32 20 -72) -72] [(-79 95 -64 -85) -85] [(-38 40 -4 -77) -77] [(100 -19 -32 -42) -42])
uniform-addition-and-deletion-rate = 0.09
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[-4 -74 -74 -74] -74]
Train Case:   6 | Input/Output: [[-85 -85 -85 80] -85]
Train Case:   7 | Input/Output: [[8 -100 -100 -100] -100]
Train Case:   8 | Input/Output: [[-69 -69 -69 -45] -69]
Train Case:   9 | Input/Output: [[12 -92 -92 -92] -92]
Train Case:  10 | Input/Output: [[-58 -58 41 -58] -58]
Train Case:  11 | Input/Output: [[49 24 49 49] 24]
Train Case:  12 | Input/Output: [[-57 -57 -57 17] -57]
Train Case:  13 | Input/Output: [[-24 -90 -24 -24] -90]
Train Case:  14 | Input/Output: [[67 67 67 -21] -21]
Train Case:  15 | Input/Output: [(23 23 23 23) 23]
Train Case:  16 | Input/Output: [(52 52 52 52) 52]
Train Case:  17 | Input/Output: [(-44 -44 -44 -44) -44]
Train Case:  18 | Input/Output: [(-92 -92 -92 -92) -92]
Train Case:  19 | Input/Output: [(44 44 44 44) 44]
Train Case:  20 | Input/Output: [(72 31 73 48) 31]
Train Case:  21 | Input/Output: [(7 0 50 98) 0]
Train Case:  22 | Input/Output: [(9 47 9 65) 9]
Train Case:  23 | Input/Output: [(63 18 5 60) 5]
Train Case:  24 | Input/Output: [(54 96 83 8) 8]
Train Case:  25 | Input/Output: [(88 67 55 8) 8]
Train Case:  26 | Input/Output: [(18 25 62 84) 18]
Train Case:  27 | Input/Output: [(86 11 50 98) 11]
Train Case:  28 | Input/Output: [(12 2 66 57) 2]
Train Case:  29 | Input/Output: [(40 18 89 86) 18]
Train Case:  30 | Input/Output: [(32 11 6 38) 6]
Train Case:  31 | Input/Output: [(81 76 98 9) 9]
Train Case:  32 | Input/Output: [(74 62 90 100) 62]
Train Case:  33 | Input/Output: [(2 66 7 66) 2]
Train Case:  34 | Input/Output: [(29 54 13 88) 13]
Train Case:  35 | Input/Output: [(51 60 55 23) 23]
Train Case:  36 | Input/Output: [(57 44 88 43) 43]
Train Case:  37 | Input/Output: [(1 56 95 42) 1]
Train Case:  38 | Input/Output: [(48 83 1 46) 1]
Train Case:  39 | Input/Output: [(82 26 35 55) 26]
Train Case:  40 | Input/Output: [(-84 53 73 92) -84]
Train Case:  41 | Input/Output: [(-37 53 -77 39) -77]
Train Case:  42 | Input/Output: [(-87 -18 -72 -68) -87]
Train Case:  43 | Input/Output: [(38 -2 -46 73) -46]
Train Case:  44 | Input/Output: [(18 97 -64 -45) -64]
Train Case:  45 | Input/Output: [(-76 97 99 -77) -77]
Train Case:  46 | Input/Output: [(-88 4 -41 21) -88]
Train Case:  47 | Input/Output: [(-27 20 -95 -81) -95]
Train Case:  48 | Input/Output: [(-90 -46 -7 -57) -90]
Train Case:  49 | Input/Output: [(4 60 -18 69) -18]
Train Case:  50 | Input/Output: [(0 68 -82 66) -82]
Train Case:  51 | Input/Output: [(-94 22 -23 -38) -94]
Train Case:  52 | Input/Output: [(-30 -25 -54 -46) -54]
Train Case:  53 | Input/Output: [(-83 81 59 86) -83]
Train Case:  54 | Input/Output: [(-86 34 -71 84) -86]
Train Case:  55 | Input/Output: [(-18 61 -88 93) -88]
Train Case:  56 | Input/Output: [(49 49 54 -24) -24]
Train Case:  57 | Input/Output: [(-15 -90 -85 -10) -90]
Train Case:  58 | Input/Output: [(27 65 23 -76) -76]
Train Case:  59 | Input/Output: [(24 -46 -98 -9) -98]
Train Case:  60 | Input/Output: [(11 -36 -86 89) -86]
Train Case:  61 | Input/Output: [(-71 63 50 37) -71]
Train Case:  62 | Input/Output: [(-43 -24 -22 10) -43]
Train Case:  63 | Input/Output: [(-20 30 -98 -74) -98]
Train Case:  64 | Input/Output: [(-22 -83 -94 -24) -94]
Train Case:  65 | Input/Output: [(-60 -92 -16 -42) -92]
Train Case:  66 | Input/Output: [(37 -97 98 -62) -97]
Train Case:  67 | Input/Output: [(-75 48 -50 37) -75]
Train Case:  68 | Input/Output: [(-12 38 2 87) -12]
Train Case:  69 | Input/Output: [(7 -34 74 -62) -62]
Train Case:  70 | Input/Output: [(79 72 72 -33) -33]
Train Case:  71 | Input/Output: [(64 -96 84 3) -96]
Train Case:  72 | Input/Output: [(64 -69 56 -64) -69]
Train Case:  73 | Input/Output: [(-77 -61 -34 -27) -77]
Train Case:  74 | Input/Output: [(-97 99 -53 53) -97]
Train Case:  75 | Input/Output: [(0 6 -71 45) -71]
Train Case:  76 | Input/Output: [(49 -90 49 -92) -92]
Train Case:  77 | Input/Output: [(-96 44 -11 -89) -96]
Train Case:  78 | Input/Output: [(-17 12 -55 -13) -55]
Train Case:  79 | Input/Output: [(-82 -42 76 -67) -82]
Train Case:  80 | Input/Output: [(-14 14 27 -80) -80]
Train Case:  81 | Input/Output: [(5 -99 -41 -74) -99]
Train Case:  82 | Input/Output: [(98 -92 53 22) -92]
Train Case:  83 | Input/Output: [(27 -40 -83 -81) -83]
Train Case:  84 | Input/Output: [(33 97 -71 -60) -71]
Train Case:  85 | Input/Output: [(-24 58 -87 67) -87]
Train Case:  86 | Input/Output: [(89 81 -27 -48) -48]
Train Case:  87 | Input/Output: [(-60 71 69 97) -60]
Train Case:  88 | Input/Output: [(-52 -43 78 -14) -52]
Train Case:  89 | Input/Output: [(54 -57 55 -27) -57]
Train Case:  90 | Input/Output: [(6 63 23 28) 6]
Train Case:  91 | Input/Output: [(77 54 62 72) 54]
Train Case:  92 | Input/Output: [(-16 90 -1 -6) -16]
Train Case:  93 | Input/Output: [(21 -64 21 80) -64]
Train Case:  94 | Input/Output: [(94 -71 85 -60) -71]
Train Case:  95 | Input/Output: [(-59 6 95 37) -59]
Train Case:  96 | Input/Output: [(-22 -32 20 -72) -72]
Train Case:  97 | Input/Output: [(-79 95 -64 -85) -85]
Train Case:  98 | Input/Output: [(-38 40 -4 -77) -77]
Train Case:  99 | Input/Output: [(100 -19 -32 -42) -42]
Test Case:   0 | Input/Output: [[-25 -25 -25 -72] -72]
Test Case:   1 | Input/Output: [[-91 -6 -91 -91] -91]
Test Case:   2 | Input/Output: [[-35 100 -35 -35] -35]
Test Case:   3 | Input/Output: [[89 14 14 14] 14]
Test Case:   4 | Input/Output: [[77 22 22 22] 22]
Test Case:   5 | Input/Output: [[-26 -81 -81 -81] -81]
Test Case:   6 | Input/Output: [[5 5 -18 5] -18]
Test Case:   7 | Input/Output: [[-12 -12 -92 -12] -92]
Test Case:   8 | Input/Output: [[60 26 60 60] 26]
Test Case:   9 | Input/Output: [[-87 -87 -87 -32] -87]
Test Case:  10 | Input/Output: [[61 96 61 61] 61]
Test Case:  11 | Input/Output: [[-11 -11 -11 -6] -11]
Test Case:  12 | Input/Output: [[-33 -72 -72 -72] -72]
Test Case:  13 | Input/Output: [[79 -37 79 79] -37]
Test Case:  14 | Input/Output: [[-36 -19 -36 -36] -36]
Test Case:  15 | Input/Output: [[48 48 14 48] 14]
Test Case:  16 | Input/Output: [[66 -60 -60 -60] -60]
Test Case:  17 | Input/Output: [[100 100 100 100] 100]
Test Case:  18 | Input/Output: [[-5 -5 -5 -39] -39]
Test Case:  19 | Input/Output: [[98 98 98 30] 30]
Test Case:  20 | Input/Output: [[85 85 85 85] 85]
Test Case:  21 | Input/Output: [[0 0 0 5] 0]
Test Case:  22 | Input/Output: [[1 1 1 60] 1]
Test Case:  23 | Input/Output: [[40 40 98 40] 40]
Test Case:  24 | Input/Output: [[-95 -95 -93 -95] -95]
Test Case:  25 | Input/Output: [[26 26 78 26] 26]
Test Case:  26 | Input/Output: [[94 94 94 11] 11]
Test Case:  27 | Input/Output: [[82 82 82 -4] -4]
Test Case:  28 | Input/Output: [[58 58 36 58] 36]
Test Case:  29 | Input/Output: [[-58 -58 68 -58] -58]
Test Case:  30 | Input/Output: [[41 41 41 66] 41]
Test Case:  31 | Input/Output: [[9 9 9 -22] -22]
Test Case:  32 | Input/Output: [[99 99 71 99] 71]
Test Case:  33 | Input/Output: [[-20 -20 -20 49] -20]
Test Case:  34 | Input/Output: [[77 77 77 10] 10]
Test Case:  35 | Input/Output: [[-93 -35 -35 -35] -93]
Test Case:  36 | Input/Output: [[24 -31 -31 -31] -31]
Test Case:  37 | Input/Output: [[32 32 -53 32] -53]
Test Case:  38 | Input/Output: [[20 20 20 -27] -27]
Test Case:  39 | Input/Output: [[62 62 86 62] 62]
Test Case:  40 | Input/Output: [[-87 -87 -87 -38] -87]
Test Case:  41 | Input/Output: [[3 3 3 -45] -45]
Test Case:  42 | Input/Output: [[-33 -22 -33 -33] -33]
Test Case:  43 | Input/Output: [[45 50 50 50] 45]
Test Case:  44 | Input/Output: [[-53 -53 5 -53] -53]
Test Case:  45 | Input/Output: [[-70 -70 -70 7] -70]
Test Case:  46 | Input/Output: [[88 88 88 -59] -59]
Test Case:  47 | Input/Output: [[-22 96 96 96] -22]
Test Case:  48 | Input/Output: [[5 -77 5 5] -77]
Test Case:  49 | Input/Output: [[4 -6 -6 -6] -6]
Test Case:  50 | Input/Output: [[59 59 59 36] 36]
Test Case:  51 | Input/Output: [[-78 64 -78 -78] -78]
Test Case:  52 | Input/Output: [[23 23 21 23] 21]
Test Case:  53 | Input/Output: [[6 6 6 34] 6]
Test Case:  54 | Input/Output: [[-17 -17 13 -17] -17]
Test Case:  55 | Input/Output: [[1 1 1 82] 1]
Test Case:  56 | Input/Output: [[43 43 -24 43] -24]
Test Case:  57 | Input/Output: [[-73 -52 -73 -73] -73]
Test Case:  58 | Input/Output: [[-73 -42 -73 -73] -73]
Test Case:  59 | Input/Output: [[-64 -64 -64 -44] -64]
Test Case:  60 | Input/Output: [[18 18 20 18] 18]
Test Case:  61 | Input/Output: [[98 -82 98 98] -82]
Test Case:  62 | Input/Output: [[-73 78 -73 -73] -73]
Test Case:  63 | Input/Output: [[68 -30 68 68] -30]
Test Case:  64 | Input/Output: [[18 17 18 18] 17]
Test Case:  65 | Input/Output: [[15 -40 15 15] -40]
Test Case:  66 | Input/Output: [[4 26 4 4] 4]
Test Case:  67 | Input/Output: [[91 97 97 97] 91]
Test Case:  68 | Input/Output: [[-77 9 9 9] -77]
Test Case:  69 | Input/Output: [[-86 41 -86 -86] -86]
Test Case:  70 | Input/Output: [[73 -24 -24 -24] -24]
Test Case:  71 | Input/Output: [[64 64 -81 64] -81]
Test Case:  72 | Input/Output: [[-28 -83 -28 -28] -83]
Test Case:  73 | Input/Output: [[-73 -96 -73 -73] -96]
Test Case:  74 | Input/Output: [[52 57 57 57] 52]
Test Case:  75 | Input/Output: [[-67 75 -67 -67] -67]
Test Case:  76 | Input/Output: [[38 38 38 -70] -70]
Test Case:  77 | Input/Output: [[-49 5 -49 -49] -49]
Test Case:  78 | Input/Output: [[91 91 -21 91] -21]
Test Case:  79 | Input/Output: [[80 -31 80 80] -31]
Test Case:  80 | Input/Output: [[90 90 90 -85] -85]
Test Case:  81 | Input/Output: [[-35 -35 -89 -35] -89]
Test Case:  82 | Input/Output: [[-1 10 -1 -1] -1]
Test Case:  83 | Input/Output: [[-88 -88 -88 89] -88]
Test Case:  84 | Input/Output: [[50 50 50 -78] -78]
Test Case:  85 | Input/Output: [[-72 -30 -72 -72] -72]
Test Case:  86 | Input/Output: [[22 8 8 8] 8]
Test Case:  87 | Input/Output: [[-29 32 32 32] -29]
Test Case:  88 | Input/Output: [[78 78 1 78] 1]
Test Case:  89 | Input/Output: [[-89 -29 -29 -29] -89]
Test Case:  90 | Input/Output: [[47 69 47 47] 47]
Test Case:  91 | Input/Output: [[-13 -13 -13 -9] -13]
Test Case:  92 | Input/Output: [[60 60 60 3] 3]
Test Case:  93 | Input/Output: [[-12 4 4 4] -12]
Test Case:  94 | Input/Output: [[43 43 -80 43] -80]
Test Case:  95 | Input/Output: [[-86 -86 -86 47] -86]
Test Case:  96 | Input/Output: [[44 48 44 44] 44]
Test Case:  97 | Input/Output: [[63 -73 -73 -73] -73]
Test Case:  98 | Input/Output: [[32 40 40 40] 32]
Test Case:  99 | Input/Output: [[-12 72 72 72] -12]
Test Case: 100 | Input/Output: [(5 5 5 5) 5]
Test Case: 101 | Input/Output: [(0 0 0 0) 0]
Test Case: 102 | Input/Output: [(-20 -20 -20 -20) -20]
Test Case: 103 | Input/Output: [(100 100 100 100) 100]
Test Case: 104 | Input/Output: [(42 42 42 42) 42]
Test Case: 105 | Input/Output: [(41 41 41 41) 41]
Test Case: 106 | Input/Output: [(-9 -9 -9 -9) -9]
Test Case: 107 | Input/Output: [(-59 -59 -59 -59) -59]
Test Case: 108 | Input/Output: [(6 6 6 6) 6]
Test Case: 109 | Input/Output: [(-35 -35 -35 -35) -35]
Test Case: 110 | Input/Output: [(3 3 3 3) 3]
Test Case: 111 | Input/Output: [(-65 -65 -65 -65) -65]
Test Case: 112 | Input/Output: [(-20 -20 -20 -20) -20]
Test Case: 113 | Input/Output: [(-6 -6 -6 -6) -6]
Test Case: 114 | Input/Output: [(-24 -24 -24 -24) -24]
Test Case: 115 | Input/Output: [(41 41 41 41) 41]
Test Case: 116 | Input/Output: [(-41 -41 -41 -41) -41]
Test Case: 117 | Input/Output: [(93 93 93 93) 93]
Test Case: 118 | Input/Output: [(-80 -80 -80 -80) -80]
Test Case: 119 | Input/Output: [(98 98 98 98) 98]
Test Case: 120 | Input/Output: [(91 91 91 91) 91]
Test Case: 121 | Input/Output: [(-43 -43 -43 -43) -43]
Test Case: 122 | Input/Output: [(-39 -39 -39 -39) -39]
Test Case: 123 | Input/Output: [(59 59 59 59) 59]
Test Case: 124 | Input/Output: [(-62 -62 -62 -62) -62]
Test Case: 125 | Input/Output: [(-95 -95 -95 -95) -95]
Test Case: 126 | Input/Output: [(-44 -44 -44 -44) -44]
Test Case: 127 | Input/Output: [(53 53 53 53) 53]
Test Case: 128 | Input/Output: [(59 59 59 59) 59]
Test Case: 129 | Input/Output: [(-2 -2 -2 -2) -2]
Test Case: 130 | Input/Output: [(-5 -5 -5 -5) -5]
Test Case: 131 | Input/Output: [(-60 -60 -60 -60) -60]
Test Case: 132 | Input/Output: [(-94 -94 -94 -94) -94]
Test Case: 133 | Input/Output: [(55 55 55 55) 55]
Test Case: 134 | Input/Output: [(28 28 28 28) 28]
Test Case: 135 | Input/Output: [(-60 -60 -60 -60) -60]
Test Case: 136 | Input/Output: [(78 78 78 78) 78]
Test Case: 137 | Input/Output: [(-78 -78 -78 -78) -78]
Test Case: 138 | Input/Output: [(98 98 98 98) 98]
Test Case: 139 | Input/Output: [(-68 -68 -68 -68) -68]
Test Case: 140 | Input/Output: [(-43 -43 -43 -43) -43]
Test Case: 141 | Input/Output: [(13 13 13 13) 13]
Test Case: 142 | Input/Output: [(-24 -24 -24 -24) -24]
Test Case: 143 | Input/Output: [(-25 -25 -25 -25) -25]
Test Case: 144 | Input/Output: [(-41 -41 -41 -41) -41]
Test Case: 145 | Input/Output: [(-44 -44 -44 -44) -44]
Test Case: 146 | Input/Output: [(90 90 90 90) 90]
Test Case: 147 | Input/Output: [(8 8 8 8) 8]
Test Case: 148 | Input/Output: [(-2 -2 -2 -2) -2]
Test Case: 149 | Input/Output: [(-95 -95 -95 -95) -95]
Test Case: 150 | Input/Output: [(-95 -95 -95 -95) -95]
Test Case: 151 | Input/Output: [(-52 -52 -52 -52) -52]
Test Case: 152 | Input/Output: [(53 53 53 53) 53]
Test Case: 153 | Input/Output: [(67 67 67 67) 67]
Test Case: 154 | Input/Output: [(-6 -6 -6 -6) -6]
Test Case: 155 | Input/Output: [(21 21 21 21) 21]
Test Case: 156 | Input/Output: [(-53 -53 -53 -53) -53]
Test Case: 157 | Input/Output: [(41 41 41 41) 41]
Test Case: 158 | Input/Output: [(31 31 31 31) 31]
Test Case: 159 | Input/Output: [(-24 -24 -24 -24) -24]
Test Case: 160 | Input/Output: [(83 83 83 83) 83]
Test Case: 161 | Input/Output: [(-54 -54 -54 -54) -54]
Test Case: 162 | Input/Output: [(21 21 21 21) 21]
Test Case: 163 | Input/Output: [(74 74 74 74) 74]
Test Case: 164 | Input/Output: [(61 61 61 61) 61]
Test Case: 165 | Input/Output: [(-13 -13 -13 -13) -13]
Test Case: 166 | Input/Output: [(84 84 84 84) 84]
Test Case: 167 | Input/Output: [(-11 -11 -11 -11) -11]
Test Case: 168 | Input/Output: [(-82 -82 -82 -82) -82]
Test Case: 169 | Input/Output: [(-11 -11 -11 -11) -11]
Test Case: 170 | Input/Output: [(12 12 12 12) 12]
Test Case: 171 | Input/Output: [(-20 -20 -20 -20) -20]
Test Case: 172 | Input/Output: [(42 42 42 42) 42]
Test Case: 173 | Input/Output: [(-91 -91 -91 -91) -91]
Test Case: 174 | Input/Output: [(-93 -93 -93 -93) -93]
Test Case: 175 | Input/Output: [(87 87 87 87) 87]
Test Case: 176 | Input/Output: [(71 71 71 71) 71]
Test Case: 177 | Input/Output: [(90 90 90 90) 90]
Test Case: 178 | Input/Output: [(61 61 61 61) 61]
Test Case: 179 | Input/Output: [(18 18 18 18) 18]
Test Case: 180 | Input/Output: [(44 44 44 44) 44]
Test Case: 181 | Input/Output: [(-75 -75 -75 -75) -75]
Test Case: 182 | Input/Output: [(93 93 93 93) 93]
Test Case: 183 | Input/Output: [(61 61 61 61) 61]
Test Case: 184 | Input/Output: [(-26 -26 -26 -26) -26]
Test Case: 185 | Input/Output: [(89 89 89 89) 89]
Test Case: 186 | Input/Output: [(-91 -91 -91 -91) -91]
Test Case: 187 | Input/Output: [(-35 -35 -35 -35) -35]
Test Case: 188 | Input/Output: [(-70 -70 -70 -70) -70]
Test Case: 189 | Input/Output: [(-68 -68 -68 -68) -68]
Test Case: 190 | Input/Output: [(-14 -14 -14 -14) -14]
Test Case: 191 | Input/Output: [(74 74 74 74) 74]
Test Case: 192 | Input/Output: [(-26 -26 -26 -26) -26]
Test Case: 193 | Input/Output: [(-13 -13 -13 -13) -13]
Test Case: 194 | Input/Output: [(72 72 72 72) 72]
Test Case: 195 | Input/Output: [(-70 -70 -70 -70) -70]
Test Case: 196 | Input/Output: [(-28 -28 -28 -28) -28]
Test Case: 197 | Input/Output: [(-96 -96 -96 -96) -96]
Test Case: 198 | Input/Output: [(-38 -38 -38 -38) -38]
Test Case: 199 | Input/Output: [(-65 -65 -65 -65) -65]
Test Case: 200 | Input/Output: [(18 60 31 87) 18]
Test Case: 201 | Input/Output: [(5 15 51 63) 5]
Test Case: 202 | Input/Output: [(30 56 2 36) 2]
Test Case: 203 | Input/Output: [(48 79 44 0) 0]
Test Case: 204 | Input/Output: [(25 65 18 71) 18]
Test Case: 205 | Input/Output: [(51 21 73 68) 21]
Test Case: 206 | Input/Output: [(67 30 2 69) 2]
Test Case: 207 | Input/Output: [(55 91 69 42) 42]
Test Case: 208 | Input/Output: [(72 78 62 87) 62]
Test Case: 209 | Input/Output: [(57 15 3 30) 3]
Test Case: 210 | Input/Output: [(21 29 21 95) 21]
Test Case: 211 | Input/Output: [(44 79 32 54) 32]
Test Case: 212 | Input/Output: [(43 76 8 27) 8]
Test Case: 213 | Input/Output: [(54 4 85 77) 4]
Test Case: 214 | Input/Output: [(90 21 91 46) 21]
Test Case: 215 | Input/Output: [(46 84 86 59) 46]
Test Case: 216 | Input/Output: [(7 24 88 51) 7]
Test Case: 217 | Input/Output: [(14 43 79 32) 14]
Test Case: 218 | Input/Output: [(35 30 14 48) 14]
Test Case: 219 | Input/Output: [(25 74 89 76) 25]
Test Case: 220 | Input/Output: [(30 100 56 2) 2]
Test Case: 221 | Input/Output: [(96 41 51 16) 16]
Test Case: 222 | Input/Output: [(4 58 39 21) 4]
Test Case: 223 | Input/Output: [(31 98 46 41) 31]
Test Case: 224 | Input/Output: [(2 73 2 2) 2]
Test Case: 225 | Input/Output: [(72 84 63 86) 63]
Test Case: 226 | Input/Output: [(26 51 33 63) 26]
Test Case: 227 | Input/Output: [(81 14 57 16) 14]
Test Case: 228 | Input/Output: [(39 64 73 58) 39]
Test Case: 229 | Input/Output: [(39 98 53 64) 39]
Test Case: 230 | Input/Output: [(85 70 58 68) 58]
Test Case: 231 | Input/Output: [(100 69 97 10) 10]
Test Case: 232 | Input/Output: [(54 89 73 18) 18]
Test Case: 233 | Input/Output: [(27 8 26 30) 8]
Test Case: 234 | Input/Output: [(19 49 26 14) 14]
Test Case: 235 | Input/Output: [(87 66 19 73) 19]
Test Case: 236 | Input/Output: [(71 8 24 45) 8]
Test Case: 237 | Input/Output: [(87 79 11 75) 11]
Test Case: 238 | Input/Output: [(76 22 91 47) 22]
Test Case: 239 | Input/Output: [(1 55 12 84) 1]
Test Case: 240 | Input/Output: [(24 72 7 29) 7]
Test Case: 241 | Input/Output: [(52 44 32 65) 32]
Test Case: 242 | Input/Output: [(45 48 62 18) 18]
Test Case: 243 | Input/Output: [(27 100 32 2) 2]
Test Case: 244 | Input/Output: [(57 4 48 95) 4]
Test Case: 245 | Input/Output: [(71 99 39 15) 15]
Test Case: 246 | Input/Output: [(5 47 74 81) 5]
Test Case: 247 | Input/Output: [(56 66 64 5) 5]
Test Case: 248 | Input/Output: [(73 64 14 78) 14]
Test Case: 249 | Input/Output: [(100 54 72 70) 54]
Test Case: 250 | Input/Output: [(42 11 15 47) 11]
Test Case: 251 | Input/Output: [(96 100 77 65) 65]
Test Case: 252 | Input/Output: [(16 40 35 58) 16]
Test Case: 253 | Input/Output: [(30 13 17 92) 13]
Test Case: 254 | Input/Output: [(40 98 16 99) 16]
Test Case: 255 | Input/Output: [(34 59 44 6) 6]
Test Case: 256 | Input/Output: [(63 82 79 65) 63]
Test Case: 257 | Input/Output: [(45 30 42 43) 30]
Test Case: 258 | Input/Output: [(22 50 82 52) 22]
Test Case: 259 | Input/Output: [(78 43 53 50) 43]
Test Case: 260 | Input/Output: [(84 63 50 13) 13]
Test Case: 261 | Input/Output: [(58 85 26 68) 26]
Test Case: 262 | Input/Output: [(87 72 3 86) 3]
Test Case: 263 | Input/Output: [(40 33 27 21) 21]
Test Case: 264 | Input/Output: [(47 75 86 36) 36]
Test Case: 265 | Input/Output: [(68 61 18 27) 18]
Test Case: 266 | Input/Output: [(98 65 46 4) 4]
Test Case: 267 | Input/Output: [(57 21 13 57) 13]
Test Case: 268 | Input/Output: [(35 36 65 43) 35]
Test Case: 269 | Input/Output: [(35 97 69 92) 35]
Test Case: 270 | Input/Output: [(12 33 59 82) 12]
Test Case: 271 | Input/Output: [(38 67 100 88) 38]
Test Case: 272 | Input/Output: [(74 67 89 78) 67]
Test Case: 273 | Input/Output: [(20 99 65 63) 20]
Test Case: 274 | Input/Output: [(68 94 88 74) 68]
Test Case: 275 | Input/Output: [(9 60 79 66) 9]
Test Case: 276 | Input/Output: [(96 4 48 47) 4]
Test Case: 277 | Input/Output: [(84 5 83 5) 5]
Test Case: 278 | Input/Output: [(90 53 13 54) 13]
Test Case: 279 | Input/Output: [(13 3 63 74) 3]
Test Case: 280 | Input/Output: [(55 13 49 51) 13]
Test Case: 281 | Input/Output: [(98 26 29 64) 26]
Test Case: 282 | Input/Output: [(57 1 74 46) 1]
Test Case: 283 | Input/Output: [(2 90 85 49) 2]
Test Case: 284 | Input/Output: [(72 42 66 34) 34]
Test Case: 285 | Input/Output: [(89 69 87 25) 25]
Test Case: 286 | Input/Output: [(45 5 76 66) 5]
Test Case: 287 | Input/Output: [(78 94 11 48) 11]
Test Case: 288 | Input/Output: [(94 5 93 59) 5]
Test Case: 289 | Input/Output: [(79 14 85 83) 14]
Test Case: 290 | Input/Output: [(61 65 57 70) 57]
Test Case: 291 | Input/Output: [(92 95 10 14) 10]
Test Case: 292 | Input/Output: [(45 56 3 73) 3]
Test Case: 293 | Input/Output: [(75 57 24 20) 20]
Test Case: 294 | Input/Output: [(90 80 21 86) 21]
Test Case: 295 | Input/Output: [(75 1 41 43) 1]
Test Case: 296 | Input/Output: [(26 42 15 86) 15]
Test Case: 297 | Input/Output: [(47 68 59 22) 22]
Test Case: 298 | Input/Output: [(34 0 67 78) 0]
Test Case: 299 | Input/Output: [(92 94 60 95) 60]
Test Case: 300 | Input/Output: [(90 88 80 25) 25]
Test Case: 301 | Input/Output: [(24 79 27 47) 24]
Test Case: 302 | Input/Output: [(5 44 12 52) 5]
Test Case: 303 | Input/Output: [(59 12 72 83) 12]
Test Case: 304 | Input/Output: [(38 92 63 29) 29]
Test Case: 305 | Input/Output: [(47 69 94 60) 47]
Test Case: 306 | Input/Output: [(45 68 21 90) 21]
Test Case: 307 | Input/Output: [(75 56 65 32) 32]
Test Case: 308 | Input/Output: [(12 33 99 11) 11]
Test Case: 309 | Input/Output: [(21 94 60 55) 21]
Test Case: 310 | Input/Output: [(61 57 56 84) 56]
Test Case: 311 | Input/Output: [(41 41 6 19) 6]
Test Case: 312 | Input/Output: [(17 51 50 47) 17]
Test Case: 313 | Input/Output: [(95 81 95 35) 35]
Test Case: 314 | Input/Output: [(70 18 100 44) 18]
Test Case: 315 | Input/Output: [(53 99 26 17) 17]
Test Case: 316 | Input/Output: [(41 71 100 61) 41]
Test Case: 317 | Input/Output: [(8 27 21 39) 8]
Test Case: 318 | Input/Output: [(79 52 88 64) 52]
Test Case: 319 | Input/Output: [(54 22 56 60) 22]
Test Case: 320 | Input/Output: [(94 83 4 64) 4]
Test Case: 321 | Input/Output: [(48 78 9 36) 9]
Test Case: 322 | Input/Output: [(34 16 85 19) 16]
Test Case: 323 | Input/Output: [(20 2 39 36) 2]
Test Case: 324 | Input/Output: [(58 16 5 84) 5]
Test Case: 325 | Input/Output: [(9 84 14 32) 9]
Test Case: 326 | Input/Output: [(87 91 56 69) 56]
Test Case: 327 | Input/Output: [(31 15 31 15) 15]
Test Case: 328 | Input/Output: [(73 71 69 43) 43]
Test Case: 329 | Input/Output: [(19 50 29 22) 19]
Test Case: 330 | Input/Output: [(56 97 95 92) 56]
Test Case: 331 | Input/Output: [(42 75 92 9) 9]
Test Case: 332 | Input/Output: [(23 9 54 27) 9]
Test Case: 333 | Input/Output: [(12 63 38 94) 12]
Test Case: 334 | Input/Output: [(70 78 61 85) 61]
Test Case: 335 | Input/Output: [(95 72 75 66) 66]
Test Case: 336 | Input/Output: [(13 100 35 47) 13]
Test Case: 337 | Input/Output: [(76 55 88 38) 38]
Test Case: 338 | Input/Output: [(47 61 21 95) 21]
Test Case: 339 | Input/Output: [(13 80 59 91) 13]
Test Case: 340 | Input/Output: [(42 78 51 77) 42]
Test Case: 341 | Input/Output: [(48 30 75 31) 30]
Test Case: 342 | Input/Output: [(20 31 9 54) 9]
Test Case: 343 | Input/Output: [(44 11 15 36) 11]
Test Case: 344 | Input/Output: [(71 69 83 46) 46]
Test Case: 345 | Input/Output: [(25 55 43 34) 25]
Test Case: 346 | Input/Output: [(78 59 97 72) 59]
Test Case: 347 | Input/Output: [(84 2 39 90) 2]
Test Case: 348 | Input/Output: [(100 56 65 46) 46]
Test Case: 349 | Input/Output: [(28 93 26 41) 26]
Test Case: 350 | Input/Output: [(45 85 75 93) 45]
Test Case: 351 | Input/Output: [(39 25 29 28) 25]
Test Case: 352 | Input/Output: [(6 76 70 35) 6]
Test Case: 353 | Input/Output: [(40 3 21 63) 3]
Test Case: 354 | Input/Output: [(65 19 73 69) 19]
Test Case: 355 | Input/Output: [(21 7 13 95) 7]
Test Case: 356 | Input/Output: [(24 12 47 46) 12]
Test Case: 357 | Input/Output: [(67 74 95 66) 66]
Test Case: 358 | Input/Output: [(26 1 97 55) 1]
Test Case: 359 | Input/Output: [(6 80 27 58) 6]
Test Case: 360 | Input/Output: [(94 63 70 95) 63]
Test Case: 361 | Input/Output: [(44 35 10 90) 10]
Test Case: 362 | Input/Output: [(48 6 33 47) 6]
Test Case: 363 | Input/Output: [(40 90 66 92) 40]
Test Case: 364 | Input/Output: [(59 56 48 88) 48]
Test Case: 365 | Input/Output: [(24 99 16 46) 16]
Test Case: 366 | Input/Output: [(14 39 12 57) 12]
Test Case: 367 | Input/Output: [(17 89 52 71) 17]
Test Case: 368 | Input/Output: [(72 93 39 66) 39]
Test Case: 369 | Input/Output: [(88 100 79 44) 44]
Test Case: 370 | Input/Output: [(80 100 77 40) 40]
Test Case: 371 | Input/Output: [(1 58 49 95) 1]
Test Case: 372 | Input/Output: [(5 83 56 33) 5]
Test Case: 373 | Input/Output: [(90 17 32 75) 17]
Test Case: 374 | Input/Output: [(24 57 15 4) 4]
Test Case: 375 | Input/Output: [(3 30 20 28) 3]
Test Case: 376 | Input/Output: [(15 96 63 63) 15]
Test Case: 377 | Input/Output: [(92 43 81 92) 43]
Test Case: 378 | Input/Output: [(98 45 94 35) 35]
Test Case: 379 | Input/Output: [(18 92 67 49) 18]
Test Case: 380 | Input/Output: [(60 57 94 20) 20]
Test Case: 381 | Input/Output: [(18 30 29 45) 18]
Test Case: 382 | Input/Output: [(99 64 93 21) 21]
Test Case: 383 | Input/Output: [(75 25 98 8) 8]
Test Case: 384 | Input/Output: [(86 31 83 23) 23]
Test Case: 385 | Input/Output: [(8 18 74 50) 8]
Test Case: 386 | Input/Output: [(13 55 64 13) 13]
Test Case: 387 | Input/Output: [(70 15 36 64) 15]
Test Case: 388 | Input/Output: [(23 20 16 83) 16]
Test Case: 389 | Input/Output: [(80 61 40 89) 40]
Test Case: 390 | Input/Output: [(51 52 69 43) 43]
Test Case: 391 | Input/Output: [(46 92 19 79) 19]
Test Case: 392 | Input/Output: [(86 74 72 77) 72]
Test Case: 393 | Input/Output: [(65 86 4 22) 4]
Test Case: 394 | Input/Output: [(74 85 79 57) 57]
Test Case: 395 | Input/Output: [(38 2 77 70) 2]
Test Case: 396 | Input/Output: [(9 74 40 100) 9]
Test Case: 397 | Input/Output: [(39 79 38 12) 12]
Test Case: 398 | Input/Output: [(89 73 87 78) 73]
Test Case: 399 | Input/Output: [(55 86 64 42) 42]
Test Case: 400 | Input/Output: [(-56 -100 51 -17) -100]
Test Case: 401 | Input/Output: [(49 28 -90 -9) -90]
Test Case: 402 | Input/Output: [(65 21 67 -90) -90]
Test Case: 403 | Input/Output: [(-82 3 -55 60) -82]
Test Case: 404 | Input/Output: [(-62 94 -51 -91) -91]
Test Case: 405 | Input/Output: [(44 79 25 32) 25]
Test Case: 406 | Input/Output: [(-82 21 21 -98) -98]
Test Case: 407 | Input/Output: [(-85 15 -66 -66) -85]
Test Case: 408 | Input/Output: [(-55 -30 34 -60) -60]
Test Case: 409 | Input/Output: [(67 -55 40 -3) -55]
Test Case: 410 | Input/Output: [(75 -26 81 -80) -80]
Test Case: 411 | Input/Output: [(-73 -66 0 53) -73]
Test Case: 412 | Input/Output: [(13 61 47 5) 5]
Test Case: 413 | Input/Output: [(99 -83 -82 -4) -83]
Test Case: 414 | Input/Output: [(-38 -27 -93 -39) -93]
Test Case: 415 | Input/Output: [(-46 73 3 53) -46]
Test Case: 416 | Input/Output: [(50 3 -23 14) -23]
Test Case: 417 | Input/Output: [(-72 63 93 17) -72]
Test Case: 418 | Input/Output: [(-91 -10 37 -51) -91]
Test Case: 419 | Input/Output: [(86 18 21 64) 18]
Test Case: 420 | Input/Output: [(-97 36 -31 -58) -97]
Test Case: 421 | Input/Output: [(22 92 56 -73) -73]
Test Case: 422 | Input/Output: [(85 20 -51 80) -51]
Test Case: 423 | Input/Output: [(-25 56 97 55) -25]
Test Case: 424 | Input/Output: [(-20 85 -79 -8) -79]
Test Case: 425 | Input/Output: [(-34 69 -51 -59) -59]
Test Case: 426 | Input/Output: [(97 -84 7 -55) -84]
Test Case: 427 | Input/Output: [(-37 -68 21 -37) -68]
Test Case: 428 | Input/Output: [(19 97 -13 60) -13]
Test Case: 429 | Input/Output: [(68 -81 46 -47) -81]
Test Case: 430 | Input/Output: [(6 -49 71 -9) -49]
Test Case: 431 | Input/Output: [(32 64 60 19) 19]
Test Case: 432 | Input/Output: [(-91 -81 28 45) -91]
Test Case: 433 | Input/Output: [(81 -72 -70 58) -72]
Test Case: 434 | Input/Output: [(38 -60 41 45) -60]
Test Case: 435 | Input/Output: [(-98 -19 -46 62) -98]
Test Case: 436 | Input/Output: [(57 -47 3 -94) -94]
Test Case: 437 | Input/Output: [(9 -9 24 -87) -87]
Test Case: 438 | Input/Output: [(59 -85 -85 86) -85]
Test Case: 439 | Input/Output: [(17 25 37 83) 17]
Test Case: 440 | Input/Output: [(24 -17 89 69) -17]
Test Case: 441 | Input/Output: [(-72 19 28 18) -72]
Test Case: 442 | Input/Output: [(-17 -30 -23 -18) -30]
Test Case: 443 | Input/Output: [(87 47 -9 26) -9]
Test Case: 444 | Input/Output: [(-53 77 17 13) -53]
Test Case: 445 | Input/Output: [(-82 -95 27 34) -95]
Test Case: 446 | Input/Output: [(42 45 -45 54) -45]
Test Case: 447 | Input/Output: [(-1 -27 -55 -15) -55]
Test Case: 448 | Input/Output: [(74 -52 -75 28) -75]
Test Case: 449 | Input/Output: [(-67 31 60 -17) -67]
Test Case: 450 | Input/Output: [(-36 -80 -58 -89) -89]
Test Case: 451 | Input/Output: [(-30 91 -35 35) -35]
Test Case: 452 | Input/Output: [(87 -52 -9 -39) -52]
Test Case: 453 | Input/Output: [(0 -3 9 -88) -88]
Test Case: 454 | Input/Output: [(-6 78 27 -64) -64]
Test Case: 455 | Input/Output: [(99 -17 -43 -41) -43]
Test Case: 456 | Input/Output: [(78 4 44 -22) -22]
Test Case: 457 | Input/Output: [(-80 81 -1 94) -80]
Test Case: 458 | Input/Output: [(-84 -51 -39 42) -84]
Test Case: 459 | Input/Output: [(-31 -72 72 27) -72]
Test Case: 460 | Input/Output: [(28 36 47 37) 28]
Test Case: 461 | Input/Output: [(-83 35 93 -10) -83]
Test Case: 462 | Input/Output: [(24 12 59 -96) -96]
Test Case: 463 | Input/Output: [(-100 -16 -1 7) -100]
Test Case: 464 | Input/Output: [(-15 27 58 -78) -78]
Test Case: 465 | Input/Output: [(-48 -51 13 73) -51]
Test Case: 466 | Input/Output: [(32 -16 -1 70) -16]
Test Case: 467 | Input/Output: [(60 18 -75 -54) -75]
Test Case: 468 | Input/Output: [(-11 -41 99 37) -41]
Test Case: 469 | Input/Output: [(24 97 80 66) 24]
Test Case: 470 | Input/Output: [(0 -68 -58 88) -68]
Test Case: 471 | Input/Output: [(61 34 -52 -7) -52]
Test Case: 472 | Input/Output: [(-49 81 -56 -57) -57]
Test Case: 473 | Input/Output: [(1 65 -51 -50) -51]
Test Case: 474 | Input/Output: [(-86 38 51 55) -86]
Test Case: 475 | Input/Output: [(30 83 -45 -24) -45]
Test Case: 476 | Input/Output: [(-79 -44 -24 25) -79]
Test Case: 477 | Input/Output: [(36 64 -26 32) -26]
Test Case: 478 | Input/Output: [(74 -13 -32 44) -32]
Test Case: 479 | Input/Output: [(-20 38 56 -61) -61]
Test Case: 480 | Input/Output: [(-8 -46 42 -28) -46]
Test Case: 481 | Input/Output: [(-63 -92 -22 -26) -92]
Test Case: 482 | Input/Output: [(50 -59 48 87) -59]
Test Case: 483 | Input/Output: [(-2 -89 -25 83) -89]
Test Case: 484 | Input/Output: [(-39 59 -3 8) -39]
Test Case: 485 | Input/Output: [(98 81 -56 -31) -56]
Test Case: 486 | Input/Output: [(89 94 57 42) 42]
Test Case: 487 | Input/Output: [(15 57 -68 -15) -68]
Test Case: 488 | Input/Output: [(32 -68 45 -1) -68]
Test Case: 489 | Input/Output: [(58 1 78 -79) -79]
Test Case: 490 | Input/Output: [(54 54 62 60) 54]
Test Case: 491 | Input/Output: [(-67 12 44 -22) -67]
Test Case: 492 | Input/Output: [(-88 -81 -31 -56) -88]
Test Case: 493 | Input/Output: [(-7 0 28 -99) -99]
Test Case: 494 | Input/Output: [(67 -57 -83 39) -83]
Test Case: 495 | Input/Output: [(96 -29 16 -47) -47]
Test Case: 496 | Input/Output: [(4 54 53 76) 4]
Test Case: 497 | Input/Output: [(-53 -53 2 85) -53]
Test Case: 498 | Input/Output: [(5 41 14 10) 5]
Test Case: 499 | Input/Output: [(-49 -2 -26 23) -49]
Test Case: 500 | Input/Output: [(-39 -43 95 -57) -57]
Test Case: 501 | Input/Output: [(-80 -80 13 65) -80]
Test Case: 502 | Input/Output: [(34 -16 56 54) -16]
Test Case: 503 | Input/Output: [(92 5 82 -4) -4]
Test Case: 504 | Input/Output: [(-74 63 99 75) -74]
Test Case: 505 | Input/Output: [(77 31 -68 -12) -68]
Test Case: 506 | Input/Output: [(95 39 49 83) 39]
Test Case: 507 | Input/Output: [(21 -63 24 57) -63]
Test Case: 508 | Input/Output: [(-21 -13 23 98) -21]
Test Case: 509 | Input/Output: [(35 43 -24 -27) -27]
Test Case: 510 | Input/Output: [(69 -29 69 -8) -29]
Test Case: 511 | Input/Output: [(-95 60 19 -89) -95]
Test Case: 512 | Input/Output: [(37 -81 -38 74) -81]
Test Case: 513 | Input/Output: [(37 59 -84 82) -84]
Test Case: 514 | Input/Output: [(-87 93 61 -37) -87]
Test Case: 515 | Input/Output: [(75 -22 71 53) -22]
Test Case: 516 | Input/Output: [(-20 27 43 -83) -83]
Test Case: 517 | Input/Output: [(29 -31 -19 -81) -81]
Test Case: 518 | Input/Output: [(69 6 52 -1) -1]
Test Case: 519 | Input/Output: [(93 12 85 25) 12]
Test Case: 520 | Input/Output: [(-16 80 37 -27) -27]
Test Case: 521 | Input/Output: [(86 27 4 -54) -54]
Test Case: 522 | Input/Output: [(8 -66 91 4) -66]
Test Case: 523 | Input/Output: [(-52 -19 -5 -6) -52]
Test Case: 524 | Input/Output: [(44 27 83 -55) -55]
Test Case: 525 | Input/Output: [(-74 58 -11 22) -74]
Test Case: 526 | Input/Output: [(16 95 -6 56) -6]
Test Case: 527 | Input/Output: [(70 90 -86 63) -86]
Test Case: 528 | Input/Output: [(69 -15 -19 54) -19]
Test Case: 529 | Input/Output: [(-25 -1 58 10) -25]
Test Case: 530 | Input/Output: [(-16 43 -88 14) -88]
Test Case: 531 | Input/Output: [(-47 25 -2 38) -47]
Test Case: 532 | Input/Output: [(-100 -48 64 97) -100]
Test Case: 533 | Input/Output: [(63 94 71 79) 63]
Test Case: 534 | Input/Output: [(-57 60 -81 26) -81]
Test Case: 535 | Input/Output: [(-86 -61 -91 5) -91]
Test Case: 536 | Input/Output: [(4 31 81 -42) -42]
Test Case: 537 | Input/Output: [(80 -31 -1 -57) -57]
Test Case: 538 | Input/Output: [(-7 39 -59 -64) -64]
Test Case: 539 | Input/Output: [(70 -68 -8 -90) -90]
Test Case: 540 | Input/Output: [(46 -48 61 60) -48]
Test Case: 541 | Input/Output: [(-74 64 78 73) -74]
Test Case: 542 | Input/Output: [(-66 -64 -89 -61) -89]
Test Case: 543 | Input/Output: [(76 20 -36 -95) -95]
Test Case: 544 | Input/Output: [(20 11 58 96) 11]
Test Case: 545 | Input/Output: [(31 -35 76 -50) -50]
Test Case: 546 | Input/Output: [(-87 37 -78 66) -87]
Test Case: 547 | Input/Output: [(28 14 -30 53) -30]
Test Case: 548 | Input/Output: [(-49 -35 98 -44) -49]
Test Case: 549 | Input/Output: [(36 -81 22 98) -81]
Test Case: 550 | Input/Output: [(-13 27 67 67) -13]
Test Case: 551 | Input/Output: [(40 -38 43 -79) -79]
Test Case: 552 | Input/Output: [(-40 -75 -64 -29) -75]
Test Case: 553 | Input/Output: [(74 29 -9 46) -9]
Test Case: 554 | Input/Output: [(-73 85 55 62) -73]
Test Case: 555 | Input/Output: [(67 58 5 -9) -9]
Test Case: 556 | Input/Output: [(81 -34 -83 -35) -83]
Test Case: 557 | Input/Output: [(8 15 30 -10) -10]
Test Case: 558 | Input/Output: [(-78 -99 8 -8) -99]
Test Case: 559 | Input/Output: [(-33 -95 -87 -87) -95]
Test Case: 560 | Input/Output: [(-16 -76 5 -41) -76]
Test Case: 561 | Input/Output: [(12 -99 20 -10) -99]
Test Case: 562 | Input/Output: [(9 91 17 -57) -57]
Test Case: 563 | Input/Output: [(83 -68 -43 -74) -74]
Test Case: 564 | Input/Output: [(21 56 69 -86) -86]
Test Case: 565 | Input/Output: [(95 27 -68 -53) -68]
Test Case: 566 | Input/Output: [(37 -35 -96 58) -96]
Test Case: 567 | Input/Output: [(-88 73 90 -85) -88]
Test Case: 568 | Input/Output: [(93 -80 -91 -80) -91]
Test Case: 569 | Input/Output: [(16 55 -36 20) -36]
Test Case: 570 | Input/Output: [(-45 60 -5 -83) -83]
Test Case: 571 | Input/Output: [(89 -80 -11 -35) -80]
Test Case: 572 | Input/Output: [(10 -76 89 -100) -100]
Test Case: 573 | Input/Output: [(2 -32 92 80) -32]
Test Case: 574 | Input/Output: [(64 -64 -1 -37) -64]
Test Case: 575 | Input/Output: [(58 -9 26 -68) -68]
Test Case: 576 | Input/Output: [(57 -39 49 19) -39]
Test Case: 577 | Input/Output: [(24 32 39 79) 24]
Test Case: 578 | Input/Output: [(-7 -1 -32 -80) -80]
Test Case: 579 | Input/Output: [(94 -98 -82 -92) -98]
Test Case: 580 | Input/Output: [(-86 -91 -87 54) -91]
Test Case: 581 | Input/Output: [(37 48 -64 10) -64]
Test Case: 582 | Input/Output: [(-19 -16 31 77) -19]
Test Case: 583 | Input/Output: [(32 -38 27 -57) -57]
Test Case: 584 | Input/Output: [(25 -7 -97 -79) -97]
Test Case: 585 | Input/Output: [(-70 -6 15 60) -70]
Test Case: 586 | Input/Output: [(12 -38 7 11) -38]
Test Case: 587 | Input/Output: [(-40 -4 59 36) -40]
Test Case: 588 | Input/Output: [(-48 63 79 34) -48]
Test Case: 589 | Input/Output: [(41 -7 -84 9) -84]
Test Case: 590 | Input/Output: [(98 82 -68 77) -68]
Test Case: 591 | Input/Output: [(48 -100 2 -37) -100]
Test Case: 592 | Input/Output: [(70 65 -39 -86) -86]
Test Case: 593 | Input/Output: [(66 44 75 -11) -11]
Test Case: 594 | Input/Output: [(96 -98 34 88) -98]
Test Case: 595 | Input/Output: [(-32 54 -50 89) -50]
Test Case: 596 | Input/Output: [(-85 -72 -48 -85) -85]
Test Case: 597 | Input/Output: [(-65 3 96 -82) -82]
Test Case: 598 | Input/Output: [(-30 -88 -73 -82) -88]
Test Case: 599 | Input/Output: [(-53 -15 90 41) -53]
Test Case: 600 | Input/Output: [(-18 -70 60 86) -70]
Test Case: 601 | Input/Output: [(84 77 6 100) 6]
Test Case: 602 | Input/Output: [(-54 -29 100 61) -54]
Test Case: 603 | Input/Output: [(45 -24 100 -44) -44]
Test Case: 604 | Input/Output: [(-42 17 -47 84) -47]
Test Case: 605 | Input/Output: [(-34 -9 77 19) -34]
Test Case: 606 | Input/Output: [(28 -9 89 -96) -96]
Test Case: 607 | Input/Output: [(56 -69 59 49) -69]
Test Case: 608 | Input/Output: [(8 41 97 -55) -55]
Test Case: 609 | Input/Output: [(-1 -74 -32 36) -74]
Test Case: 610 | Input/Output: [(31 6 35 20) 6]
Test Case: 611 | Input/Output: [(-65 -100 67 23) -100]
Test Case: 612 | Input/Output: [(-11 1 -21 47) -21]
Test Case: 613 | Input/Output: [(1 14 74 -77) -77]
Test Case: 614 | Input/Output: [(71 -39 -58 -7) -58]
Test Case: 615 | Input/Output: [(88 -92 -25 -9) -92]
Test Case: 616 | Input/Output: [(67 57 63 -14) -14]
Test Case: 617 | Input/Output: [(4 0 84 2) 0]
Test Case: 618 | Input/Output: [(73 89 40 44) 40]
Test Case: 619 | Input/Output: [(-30 -100 87 -18) -100]
Test Case: 620 | Input/Output: [(-24 -52 47 42) -52]
Test Case: 621 | Input/Output: [(-54 -41 2 82) -54]
Test Case: 622 | Input/Output: [(-63 -61 2 -27) -63]
Test Case: 623 | Input/Output: [(-61 -35 -87 9) -87]
Test Case: 624 | Input/Output: [(30 44 86 28) 28]
Test Case: 625 | Input/Output: [(48 49 62 36) 36]
Test Case: 626 | Input/Output: [(-89 18 60 74) -89]
Test Case: 627 | Input/Output: [(60 -41 -2 67) -41]
Test Case: 628 | Input/Output: [(16 55 -86 -60) -86]
Test Case: 629 | Input/Output: [(-2 85 28 23) -2]
Test Case: 630 | Input/Output: [(-9 -94 39 71) -94]
Test Case: 631 | Input/Output: [(54 62 -38 -50) -50]
Test Case: 632 | Input/Output: [(45 -94 -39 -58) -94]
Test Case: 633 | Input/Output: [(16 -8 86 -37) -37]
Test Case: 634 | Input/Output: [(-71 59 -29 -59) -71]
Test Case: 635 | Input/Output: [(33 47 -22 -25) -25]
Test Case: 636 | Input/Output: [(44 -2 -51 -48) -51]
Test Case: 637 | Input/Output: [(84 -48 70 44) -48]
Test Case: 638 | Input/Output: [(-47 -4 -92 69) -92]
Test Case: 639 | Input/Output: [(73 -16 83 -85) -85]
Test Case: 640 | Input/Output: [(63 -36 32 98) -36]
Test Case: 641 | Input/Output: [(-96 -9 -70 44) -96]
Test Case: 642 | Input/Output: [(-42 -25 42 39) -42]
Test Case: 643 | Input/Output: [(-27 -51 -37 62) -51]
Test Case: 644 | Input/Output: [(67 15 84 -72) -72]
Test Case: 645 | Input/Output: [(-38 -85 8 40) -85]
Test Case: 646 | Input/Output: [(-8 58 -43 -97) -97]
Test Case: 647 | Input/Output: [(49 68 21 -70) -70]
Test Case: 648 | Input/Output: [(39 -40 56 23) -40]
Test Case: 649 | Input/Output: [(56 -100 12 -23) -100]
Test Case: 650 | Input/Output: [(21 36 36 -95) -95]
Test Case: 651 | Input/Output: [(-60 100 -43 72) -60]
Test Case: 652 | Input/Output: [(-82 31 -46 26) -82]
Test Case: 653 | Input/Output: [(-14 87 84 -31) -31]
Test Case: 654 | Input/Output: [(81 -56 73 -60) -60]
Test Case: 655 | Input/Output: [(4 75 86 99) 4]
Test Case: 656 | Input/Output: [(31 26 -44 -9) -44]
Test Case: 657 | Input/Output: [(-46 21 -68 58) -68]
Test Case: 658 | Input/Output: [(1 26 -30 -78) -78]
Test Case: 659 | Input/Output: [(-65 -57 -90 -6) -90]
Test Case: 660 | Input/Output: [(-22 -64 62 10) -64]
Test Case: 661 | Input/Output: [(-54 80 -68 99) -68]
Test Case: 662 | Input/Output: [(54 -71 78 -15) -71]
Test Case: 663 | Input/Output: [(-19 53 -40 -7) -40]
Test Case: 664 | Input/Output: [(-31 93 -85 -9) -85]
Test Case: 665 | Input/Output: [(-63 51 -81 -90) -90]
Test Case: 666 | Input/Output: [(32 71 19 15) 15]
Test Case: 667 | Input/Output: [(-14 39 -38 74) -38]
Test Case: 668 | Input/Output: [(98 93 85 -30) -30]
Test Case: 669 | Input/Output: [(7 -39 -12 82) -39]
Test Case: 670 | Input/Output: [(-55 70 -33 -41) -55]
Test Case: 671 | Input/Output: [(97 -53 25 41) -53]
Test Case: 672 | Input/Output: [(9 56 -96 -54) -96]
Test Case: 673 | Input/Output: [(78 -20 -57 15) -57]
Test Case: 674 | Input/Output: [(-66 -35 -77 45) -77]
Test Case: 675 | Input/Output: [(7 -80 -66 88) -80]
Test Case: 676 | Input/Output: [(-50 -83 -73 45) -83]
Test Case: 677 | Input/Output: [(-92 58 -80 -96) -96]
Test Case: 678 | Input/Output: [(19 -100 31 -97) -100]
Test Case: 679 | Input/Output: [(-60 -29 37 -88) -88]
Test Case: 680 | Input/Output: [(-2 -91 -38 86) -91]
Test Case: 681 | Input/Output: [(88 26 27 19) 19]
Test Case: 682 | Input/Output: [(-3 82 -5 24) -5]
Test Case: 683 | Input/Output: [(77 -2 65 -57) -57]
Test Case: 684 | Input/Output: [(22 -23 49 18) -23]
Test Case: 685 | Input/Output: [(-20 -92 30 12) -92]
Test Case: 686 | Input/Output: [(-51 -12 39 -90) -90]
Test Case: 687 | Input/Output: [(-98 -98 83 -48) -98]
Test Case: 688 | Input/Output: [(4 92 73 -93) -93]
Test Case: 689 | Input/Output: [(-19 -9 7 14) -19]
Test Case: 690 | Input/Output: [(56 53 -35 -42) -42]
Test Case: 691 | Input/Output: [(29 49 77 52) 29]
Test Case: 692 | Input/Output: [(52 75 -14 -9) -14]
Test Case: 693 | Input/Output: [(-53 -29 -78 -84) -84]
Test Case: 694 | Input/Output: [(-67 10 90 9) -67]
Test Case: 695 | Input/Output: [(0 52 98 51) 0]
Test Case: 696 | Input/Output: [(-90 59 73 -82) -90]
Test Case: 697 | Input/Output: [(9 -30 100 69) -30]
Test Case: 698 | Input/Output: [(-30 -80 51 -30) -80]
Test Case: 699 | Input/Output: [(-43 -47 74 -7) -47]
Test Case: 700 | Input/Output: [(73 -6 71 -39) -39]
Test Case: 701 | Input/Output: [(99 -79 45 -50) -79]
Test Case: 702 | Input/Output: [(-21 -37 4 60) -37]
Test Case: 703 | Input/Output: [(63 -27 86 24) -27]
Test Case: 704 | Input/Output: [(-63 44 -31 -88) -88]
Test Case: 705 | Input/Output: [(52 73 12 -78) -78]
Test Case: 706 | Input/Output: [(-10 -93 -47 -9) -93]
Test Case: 707 | Input/Output: [(-97 -23 -26 -57) -97]
Test Case: 708 | Input/Output: [(-43 14 -2 61) -43]
Test Case: 709 | Input/Output: [(32 12 -6 41) -6]
Test Case: 710 | Input/Output: [(14 47 -50 -58) -58]
Test Case: 711 | Input/Output: [(62 56 -63 3) -63]
Test Case: 712 | Input/Output: [(-34 -96 14 59) -96]
Test Case: 713 | Input/Output: [(18 21 81 -6) -6]
Test Case: 714 | Input/Output: [(98 -10 -39 87) -39]
Test Case: 715 | Input/Output: [(-83 -34 -11 -42) -83]
Test Case: 716 | Input/Output: [(-7 -73 11 79) -73]
Test Case: 717 | Input/Output: [(65 50 -26 -2) -26]
Test Case: 718 | Input/Output: [(-22 -63 -67 18) -67]
Test Case: 719 | Input/Output: [(63 -100 -75 -4) -100]
Test Case: 720 | Input/Output: [(-50 23 51 96) -50]
Test Case: 721 | Input/Output: [(-85 -32 33 -75) -85]
Test Case: 722 | Input/Output: [(-37 -78 -32 61) -78]
Test Case: 723 | Input/Output: [(52 27 57 71) 27]
Test Case: 724 | Input/Output: [(59 91 -5 -90) -90]
Test Case: 725 | Input/Output: [(-48 -5 72 50) -48]
Test Case: 726 | Input/Output: [(47 -17 78 -38) -38]
Test Case: 727 | Input/Output: [(-79 -77 -11 -42) -79]
Test Case: 728 | Input/Output: [(32 67 38 -81) -81]
Test Case: 729 | Input/Output: [(29 -49 -5 -15) -49]
Test Case: 730 | Input/Output: [(54 36 -90 -25) -90]
Test Case: 731 | Input/Output: [(-66 -80 -25 90) -80]
Test Case: 732 | Input/Output: [(95 85 48 -47) -47]
Test Case: 733 | Input/Output: [(63 -37 59 53) -37]
Test Case: 734 | Input/Output: [(-3 -91 31 75) -91]
Test Case: 735 | Input/Output: [(68 64 -25 52) -25]
Test Case: 736 | Input/Output: [(-29 -18 -30 21) -30]
Test Case: 737 | Input/Output: [(-23 -87 97 45) -87]
Test Case: 738 | Input/Output: [(-83 -81 82 -12) -83]
Test Case: 739 | Input/Output: [(-89 -19 18 -66) -89]
Test Case: 740 | Input/Output: [(85 -73 44 -96) -96]
Test Case: 741 | Input/Output: [(-80 85 -25 3) -80]
Test Case: 742 | Input/Output: [(-24 -56 -36 -11) -56]
Test Case: 743 | Input/Output: [(63 -5 -98 -10) -98]
Test Case: 744 | Input/Output: [(-1 -45 -74 -53) -74]
Test Case: 745 | Input/Output: [(-49 74 52 62) -49]
Test Case: 746 | Input/Output: [(-12 55 -58 21) -58]
Test Case: 747 | Input/Output: [(-82 -68 -15 -76) -82]
Test Case: 748 | Input/Output: [(-43 -76 -12 -30) -76]
Test Case: 749 | Input/Output: [(-81 -62 69 -47) -81]
Test Case: 750 | Input/Output: [(99 -78 56 21) -78]
Test Case: 751 | Input/Output: [(49 27 84 -52) -52]
Test Case: 752 | Input/Output: [(31 39 -57 -15) -57]
Test Case: 753 | Input/Output: [(-64 -70 78 54) -70]
Test Case: 754 | Input/Output: [(-97 76 -36 23) -97]
Test Case: 755 | Input/Output: [(-68 -66 64 83) -68]
Test Case: 756 | Input/Output: [(74 44 -97 50) -97]
Test Case: 757 | Input/Output: [(-40 -43 21 29) -43]
Test Case: 758 | Input/Output: [(-16 -11 -9 97) -16]
Test Case: 759 | Input/Output: [(6 -44 -89 -39) -89]
Test Case: 760 | Input/Output: [(31 68 34 -89) -89]
Test Case: 761 | Input/Output: [(-20 6 -34 -13) -34]
Test Case: 762 | Input/Output: [(-76 -56 -26 -42) -76]
Test Case: 763 | Input/Output: [(80 -16 0 -13) -16]
Test Case: 764 | Input/Output: [(11 97 -45 -67) -67]
Test Case: 765 | Input/Output: [(-21 5 -64 54) -64]
Test Case: 766 | Input/Output: [(-86 -23 51 33) -86]
Test Case: 767 | Input/Output: [(-82 -20 -91 -73) -91]
Test Case: 768 | Input/Output: [(-79 4 -85 78) -85]
Test Case: 769 | Input/Output: [(65 41 -36 -78) -78]
Test Case: 770 | Input/Output: [(36 -82 63 -60) -82]
Test Case: 771 | Input/Output: [(-30 -67 -21 89) -67]
Test Case: 772 | Input/Output: [(-31 -81 -46 68) -81]
Test Case: 773 | Input/Output: [(-85 6 33 76) -85]
Test Case: 774 | Input/Output: [(-29 -12 -98 34) -98]
Test Case: 775 | Input/Output: [(-47 -51 -87 -42) -87]
Test Case: 776 | Input/Output: [(-13 42 -79 19) -79]
Test Case: 777 | Input/Output: [(37 19 45 86) 19]
Test Case: 778 | Input/Output: [(-67 81 -75 67) -75]
Test Case: 779 | Input/Output: [(17 -58 6 56) -58]
Test Case: 780 | Input/Output: [(7 -22 39 -57) -57]
Test Case: 781 | Input/Output: [(6 27 -93 -74) -93]
Test Case: 782 | Input/Output: [(-20 17 -72 81) -72]
Test Case: 783 | Input/Output: [(-35 -69 2 -76) -76]
Test Case: 784 | Input/Output: [(-34 -48 -78 -23) -78]
Test Case: 785 | Input/Output: [(-2 47 20 -43) -43]
Test Case: 786 | Input/Output: [(60 -38 37 -47) -47]
Test Case: 787 | Input/Output: [(-1 11 -31 6) -31]
Test Case: 788 | Input/Output: [(41 -22 -79 69) -79]
Test Case: 789 | Input/Output: [(5 -42 93 28) -42]
Test Case: 790 | Input/Output: [(29 96 -97 24) -97]
Test Case: 791 | Input/Output: [(-95 76 1 26) -95]
Test Case: 792 | Input/Output: [(-25 24 -64 6) -64]
Test Case: 793 | Input/Output: [(92 -64 -9 -19) -64]
Test Case: 794 | Input/Output: [(31 40 74 -37) -37]
Test Case: 795 | Input/Output: [(-60 -48 85 96) -60]
Test Case: 796 | Input/Output: [(-94 -60 51 73) -94]
Test Case: 797 | Input/Output: [(-96 -19 62 -56) -96]
Test Case: 798 | Input/Output: [(59 23 47 -48) -48]
Test Case: 799 | Input/Output: [(-42 10 -15 74) -42]
Test Case: 800 | Input/Output: [(-5 67 -75 -96) -96]
Test Case: 801 | Input/Output: [(-20 -55 -12 -39) -55]
Test Case: 802 | Input/Output: [(40 59 -96 61) -96]
Test Case: 803 | Input/Output: [(-62 74 -43 72) -62]
Test Case: 804 | Input/Output: [(63 79 -61 -97) -97]
Test Case: 805 | Input/Output: [(-66 36 -6 -49) -66]
Test Case: 806 | Input/Output: [(10 -82 -84 75) -84]
Test Case: 807 | Input/Output: [(-49 -59 -59 98) -59]
Test Case: 808 | Input/Output: [(-55 -4 -5 2) -55]
Test Case: 809 | Input/Output: [(-24 36 95 20) -24]
Test Case: 810 | Input/Output: [(40 60 -20 36) -20]
Test Case: 811 | Input/Output: [(18 58 21 -3) -3]
Test Case: 812 | Input/Output: [(-55 -18 70 -31) -55]
Test Case: 813 | Input/Output: [(-24 -99 -51 70) -99]
Test Case: 814 | Input/Output: [(33 46 -69 -65) -69]
Test Case: 815 | Input/Output: [(77 -56 39 58) -56]
Test Case: 816 | Input/Output: [(-96 -68 48 -81) -96]
Test Case: 817 | Input/Output: [(-97 19 46 38) -97]
Test Case: 818 | Input/Output: [(-22 -82 78 28) -82]
Test Case: 819 | Input/Output: [(19 -42 90 88) -42]
Test Case: 820 | Input/Output: [(62 -7 -51 19) -51]
Test Case: 821 | Input/Output: [(58 46 -37 35) -37]
Test Case: 822 | Input/Output: [(-70 -58 -4 -26) -70]
Test Case: 823 | Input/Output: [(-48 -98 -2 0) -98]
Test Case: 824 | Input/Output: [(58 -80 58 -12) -80]
Test Case: 825 | Input/Output: [(65 -70 -34 82) -70]
Test Case: 826 | Input/Output: [(21 -1 -3 -86) -86]
Test Case: 827 | Input/Output: [(80 86 -20 -99) -99]
Test Case: 828 | Input/Output: [(13 29 11 44) 11]
Test Case: 829 | Input/Output: [(71 -85 25 20) -85]
Test Case: 830 | Input/Output: [(84 -47 -80 -38) -80]
Test Case: 831 | Input/Output: [(-35 80 -55 88) -55]
Test Case: 832 | Input/Output: [(-33 52 67 0) -33]
Test Case: 833 | Input/Output: [(78 17 9 -83) -83]
Test Case: 834 | Input/Output: [(88 45 -17 74) -17]
Test Case: 835 | Input/Output: [(53 -43 2 18) -43]
Test Case: 836 | Input/Output: [(23 92 -48 -30) -48]
Test Case: 837 | Input/Output: [(-86 -92 34 -11) -92]
Test Case: 838 | Input/Output: [(51 34 -44 67) -44]
Test Case: 839 | Input/Output: [(50 54 -91 -98) -98]
Test Case: 840 | Input/Output: [(72 -57 -88 -25) -88]
Test Case: 841 | Input/Output: [(63 -43 70 29) -43]
Test Case: 842 | Input/Output: [(36 -35 22 0) -35]
Test Case: 843 | Input/Output: [(100 53 40 33) 33]
Test Case: 844 | Input/Output: [(62 -68 -41 -94) -94]
Test Case: 845 | Input/Output: [(21 47 50 -93) -93]
Test Case: 846 | Input/Output: [(20 6 -6 33) -6]
Test Case: 847 | Input/Output: [(90 17 -53 -30) -53]
Test Case: 848 | Input/Output: [(23 50 81 18) 18]
Test Case: 849 | Input/Output: [(-93 72 46 -78) -93]
Test Case: 850 | Input/Output: [(-55 29 -86 -94) -94]
Test Case: 851 | Input/Output: [(-19 -53 40 96) -53]
Test Case: 852 | Input/Output: [(-2 2 29 -21) -21]
Test Case: 853 | Input/Output: [(-84 -15 22 -45) -84]
Test Case: 854 | Input/Output: [(-65 -12 -61 73) -65]
Test Case: 855 | Input/Output: [(-91 12 -30 -26) -91]
Test Case: 856 | Input/Output: [(81 -55 12 63) -55]
Test Case: 857 | Input/Output: [(71 61 -13 -65) -65]
Test Case: 858 | Input/Output: [(41 53 75 -27) -27]
Test Case: 859 | Input/Output: [(-15 62 -1 -30) -30]
Test Case: 860 | Input/Output: [(-29 61 85 30) -29]
Test Case: 861 | Input/Output: [(32 -64 94 7) -64]
Test Case: 862 | Input/Output: [(-83 -15 12 -68) -83]
Test Case: 863 | Input/Output: [(47 -20 66 -76) -76]
Test Case: 864 | Input/Output: [(-41 -37 -93 71) -93]
Test Case: 865 | Input/Output: [(-28 6 97 54) -28]
Test Case: 866 | Input/Output: [(23 -94 34 69) -94]
Test Case: 867 | Input/Output: [(-61 -53 -45 -47) -61]
Test Case: 868 | Input/Output: [(79 -58 61 96) -58]
Test Case: 869 | Input/Output: [(38 85 -94 91) -94]
Test Case: 870 | Input/Output: [(-30 90 -22 -46) -46]
Test Case: 871 | Input/Output: [(17 -21 32 -56) -56]
Test Case: 872 | Input/Output: [(95 21 -81 24) -81]
Test Case: 873 | Input/Output: [(86 -67 -69 -43) -69]
Test Case: 874 | Input/Output: [(-91 -24 65 -78) -91]
Test Case: 875 | Input/Output: [(59 -66 -90 42) -90]
Test Case: 876 | Input/Output: [(6 5 51 -4) -4]
Test Case: 877 | Input/Output: [(13 -67 95 51) -67]
Test Case: 878 | Input/Output: [(-40 -61 -67 -66) -67]
Test Case: 879 | Input/Output: [(68 59 80 -20) -20]
Test Case: 880 | Input/Output: [(78 -56 48 45) -56]
Test Case: 881 | Input/Output: [(-58 9 44 -9) -58]
Test Case: 882 | Input/Output: [(-89 -1 61 73) -89]
Test Case: 883 | Input/Output: [(-56 -40 -86 -55) -86]
Test Case: 884 | Input/Output: [(50 -33 -34 11) -34]
Test Case: 885 | Input/Output: [(-100 51 -71 -84) -100]
Test Case: 886 | Input/Output: [(16 37 58 -66) -66]
Test Case: 887 | Input/Output: [(-18 26 -65 97) -65]
Test Case: 888 | Input/Output: [(-20 -2 -100 25) -100]
Test Case: 889 | Input/Output: [(49 -39 -56 -84) -84]
Test Case: 890 | Input/Output: [(-38 -28 -98 -9) -98]
Test Case: 891 | Input/Output: [(47 -50 -59 -26) -59]
Test Case: 892 | Input/Output: [(56 17 -23 -71) -71]
Test Case: 893 | Input/Output: [(-91 -32 -19 -42) -91]
Test Case: 894 | Input/Output: [(54 -44 -66 72) -66]
Test Case: 895 | Input/Output: [(79 9 -11 94) -11]
Test Case: 896 | Input/Output: [(-9 70 -44 53) -44]
Test Case: 897 | Input/Output: [(16 88 0 25) 0]
Test Case: 898 | Input/Output: [(95 18 -15 17) -15]
Test Case: 899 | Input/Output: [(-82 50 36 -96) -96]
Test Case: 900 | Input/Output: [(-5 -92 51 97) -92]
Test Case: 901 | Input/Output: [(60 -52 -91 19) -91]
Test Case: 902 | Input/Output: [(-81 -10 35 78) -81]
Test Case: 903 | Input/Output: [(-78 -69 57 50) -78]
Test Case: 904 | Input/Output: [(-56 65 37 -18) -56]
Test Case: 905 | Input/Output: [(-88 -17 24 100) -88]
Test Case: 906 | Input/Output: [(99 -78 10 -12) -78]
Test Case: 907 | Input/Output: [(23 -24 55 19) -24]
Test Case: 908 | Input/Output: [(-50 55 -27 61) -50]
Test Case: 909 | Input/Output: [(-30 41 91 83) -30]
Test Case: 910 | Input/Output: [(60 31 63 -48) -48]
Test Case: 911 | Input/Output: [(-87 19 63 -36) -87]
Test Case: 912 | Input/Output: [(74 -8 0 -93) -93]
Test Case: 913 | Input/Output: [(-65 71 25 -27) -65]
Test Case: 914 | Input/Output: [(19 74 42 -75) -75]
Test Case: 915 | Input/Output: [(-59 19 -82 18) -82]
Test Case: 916 | Input/Output: [(62 -2 34 76) -2]
Test Case: 917 | Input/Output: [(82 -41 -68 37) -68]
Test Case: 918 | Input/Output: [(-87 47 -60 81) -87]
Test Case: 919 | Input/Output: [(1 0 39 -86) -86]
Test Case: 920 | Input/Output: [(15 -71 -15 1) -71]
Test Case: 921 | Input/Output: [(-30 82 -60 79) -60]
Test Case: 922 | Input/Output: [(-82 -24 -21 80) -82]
Test Case: 923 | Input/Output: [(69 -28 32 77) -28]
Test Case: 924 | Input/Output: [(-94 -21 -53 -44) -94]
Test Case: 925 | Input/Output: [(25 39 38 41) 25]
Test Case: 926 | Input/Output: [(2 89 19 -24) -24]
Test Case: 927 | Input/Output: [(49 -33 -55 -42) -55]
Test Case: 928 | Input/Output: [(90 -75 39 -31) -75]
Test Case: 929 | Input/Output: [(-74 58 -92 46) -92]
Test Case: 930 | Input/Output: [(-41 62 100 80) -41]
Test Case: 931 | Input/Output: [(-76 24 37 46) -76]
Test Case: 932 | Input/Output: [(-97 38 33 -74) -97]
Test Case: 933 | Input/Output: [(-9 78 -97 35) -97]
Test Case: 934 | Input/Output: [(70 -4 -84 -21) -84]
Test Case: 935 | Input/Output: [(6 35 0 23) 0]
Test Case: 936 | Input/Output: [(75 -62 -9 -58) -62]
Test Case: 937 | Input/Output: [(-44 -32 -59 17) -59]
Test Case: 938 | Input/Output: [(-25 -61 94 49) -61]
Test Case: 939 | Input/Output: [(-7 -25 50 -63) -63]
Test Case: 940 | Input/Output: [(-3 17 79 -60) -60]
Test Case: 941 | Input/Output: [(2 -51 96 -51) -51]
Test Case: 942 | Input/Output: [(-69 -42 36 -92) -92]
Test Case: 943 | Input/Output: [(-54 42 48 22) -54]
Test Case: 944 | Input/Output: [(26 -74 68 -16) -74]
Test Case: 945 | Input/Output: [(31 33 -47 68) -47]
Test Case: 946 | Input/Output: [(33 43 73 -45) -45]
Test Case: 947 | Input/Output: [(-55 82 38 79) -55]
Test Case: 948 | Input/Output: [(-78 -25 96 78) -78]
Test Case: 949 | Input/Output: [(-17 -50 -43 -78) -78]
Test Case: 950 | Input/Output: [(-100 96 -72 -86) -100]
Test Case: 951 | Input/Output: [(-19 -50 -73 53) -73]
Test Case: 952 | Input/Output: [(-38 10 -67 53) -67]
Test Case: 953 | Input/Output: [(-82 18 -17 -75) -82]
Test Case: 954 | Input/Output: [(4 5 24 -64) -64]
Test Case: 955 | Input/Output: [(47 78 76 -86) -86]
Test Case: 956 | Input/Output: [(-19 -49 -78 -40) -78]
Test Case: 957 | Input/Output: [(96 3 -42 -17) -42]
Test Case: 958 | Input/Output: [(32 46 -42 -95) -95]
Test Case: 959 | Input/Output: [(-65 57 75 -57) -65]
Test Case: 960 | Input/Output: [(60 17 84 44) 17]
Test Case: 961 | Input/Output: [(41 -98 81 69) -98]
Test Case: 962 | Input/Output: [(-93 24 68 35) -93]
Test Case: 963 | Input/Output: [(-43 -76 69 86) -76]
Test Case: 964 | Input/Output: [(98 -6 92 -96) -96]
Test Case: 965 | Input/Output: [(-87 -97 4 60) -97]
Test Case: 966 | Input/Output: [(95 -48 19 25) -48]
Test Case: 967 | Input/Output: [(-42 -21 -31 69) -42]
Test Case: 968 | Input/Output: [(77 44 -48 -86) -86]
Test Case: 969 | Input/Output: [(-33 17 39 -33) -33]
Test Case: 970 | Input/Output: [(-41 -62 36 -88) -88]
Test Case: 971 | Input/Output: [(84 -73 -25 -98) -98]
Test Case: 972 | Input/Output: [(-76 78 26 82) -76]
Test Case: 973 | Input/Output: [(-37 55 42 -81) -81]
Test Case: 974 | Input/Output: [(57 -75 -94 33) -94]
Test Case: 975 | Input/Output: [(28 10 57 44) 10]
Test Case: 976 | Input/Output: [(-54 98 14 -67) -67]
Test Case: 977 | Input/Output: [(56 -38 63 32) -38]
Test Case: 978 | Input/Output: [(27 43 3 -34) -34]
Test Case: 979 | Input/Output: [(-20 -9 -75 -48) -75]
Test Case: 980 | Input/Output: [(-61 76 -62 31) -62]
Test Case: 981 | Input/Output: [(-18 -96 -95 -49) -96]
Test Case: 982 | Input/Output: [(-53 79 78 -59) -59]
Test Case: 983 | Input/Output: [(-3 -60 6 -78) -78]
Test Case: 984 | Input/Output: [(-36 -81 -41 51) -81]
Test Case: 985 | Input/Output: [(-87 4 45 -2) -87]
Test Case: 986 | Input/Output: [(-12 -99 -93 81) -99]
Test Case: 987 | Input/Output: [(90 -12 54 75) -12]
Test Case: 988 | Input/Output: [(85 -77 -96 74) -96]
Test Case: 989 | Input/Output: [(-54 18 90 -6) -54]
Test Case: 990 | Input/Output: [(58 -97 25 -19) -97]
Test Case: 991 | Input/Output: [(-24 1 36 -33) -33]
Test Case: 992 | Input/Output: [(56 -2 -77 0) -77]
Test Case: 993 | Input/Output: [(-4 30 -96 -14) -96]
Test Case: 994 | Input/Output: [(9 87 -6 43) -6]
Test Case: 995 | Input/Output: [(-12 -44 66 -79) -79]
Test Case: 996 | Input/Output: [(-6 -81 -35 -86) -86]
Test Case: 997 | Input/Output: [(-23 25 35 -20) -23]
Test Case: 998 | Input/Output: [(-19 -57 5 39) -57]
Test Case: 999 | Input/Output: [(29 73 -61 22) -61]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x30b9728f clojush.problems.software.smallest$fn__7461@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@24b8a393]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:uniform-addition-and-deletion 1.0}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 3000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
random-screen = false
random-seed = -81 7 19 -27 -40 10 -35 -21 24 -56 -61 105 85 -20 -26 -67
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-4 -74 -74 -74] -74] [[-85 -85 -85 80] -85] [[8 -100 -100 -100] -100] [[-69 -69 -69 -45] -69] [[12 -92 -92 -92] -92] [[-58 -58 41 -58] -58] [[49 24 49 49] 24] [[-57 -57 -57 17] -57] [[-24 -90 -24 -24] -90] [[67 67 67 -21] -21] [(23 23 23 23) 23] [(52 52 52 52) 52] [(-44 -44 -44 -44) -44] [(-92 -92 -92 -92) -92] [(44 44 44 44) 44] [(72 31 73 48) 31] [(7 0 50 98) 0] [(9 47 9 65) 9] [(63 18 5 60) 5] [(54 96 83 8) 8] [(88 67 55 8) 8] [(18 25 62 84) 18] [(86 11 50 98) 11] [(12 2 66 57) 2] [(40 18 89 86) 18] [(32 11 6 38) 6] [(81 76 98 9) 9] [(74 62 90 100) 62] [(2 66 7 66) 2] [(29 54 13 88) 13] [(51 60 55 23) 23] [(57 44 88 43) 43] [(1 56 95 42) 1] [(48 83 1 46) 1] [(82 26 35 55) 26] [(-84 53 73 92) -84] [(-37 53 -77 39) -77] [(-87 -18 -72 -68) -87] [(38 -2 -46 73) -46] [(18 97 -64 -45) -64] [(-76 97 99 -77) -77] [(-88 4 -41 21) -88] [(-27 20 -95 -81) -95] [(-90 -46 -7 -57) -90] [(4 60 -18 69) -18] [(0 68 -82 66) -82] [(-94 22 -23 -38) -94] [(-30 -25 -54 -46) -54] [(-83 81 59 86) -83] [(-86 34 -71 84) -86] [(-18 61 -88 93) -88] [(49 49 54 -24) -24] [(-15 -90 -85 -10) -90] [(27 65 23 -76) -76] [(24 -46 -98 -9) -98] [(11 -36 -86 89) -86] [(-71 63 50 37) -71] [(-43 -24 -22 10) -43] [(-20 30 -98 -74) -98] [(-22 -83 -94 -24) -94] [(-60 -92 -16 -42) -92] [(37 -97 98 -62) -97] [(-75 48 -50 37) -75] [(-12 38 2 87) -12] [(7 -34 74 -62) -62] [(79 72 72 -33) -33] [(64 -96 84 3) -96] [(64 -69 56 -64) -69] [(-77 -61 -34 -27) -77] [(-97 99 -53 53) -97] [(0 6 -71 45) -71] [(49 -90 49 -92) -92] [(-96 44 -11 -89) -96] [(-17 12 -55 -13) -55] [(-82 -42 76 -67) -82] [(-14 14 27 -80) -80] [(5 -99 -41 -74) -99] [(98 -92 53 22) -92] [(27 -40 -83 -81) -83] [(33 97 -71 -60) -71] [(-24 58 -87 67) -87] [(89 81 -27 -48) -48] [(-60 71 69 97) -60] [(-52 -43 78 -14) -52] [(54 -57 55 -27) -57] [(6 63 23 28) 6] [(77 54 62 72) 54] [(-16 90 -1 -6) -16] [(21 -64 21 80) -64] [(94 -71 85 -60) -71] [(-59 6 95 37) -59] [(-22 -32 20 -72) -72] [(-79 95 -64 -85) -85] [(-38 40 -4 -77) -77] [(100 -19 -32 -42) -42])
uniform-addition-and-deletion-rate = 0.09
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 643
Test mean error for best: 0.64300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -74                 | Program output: -74                
Correct output: -85                 | Program output: -85                
Correct output: -100                | Program output: -100               
Correct output: -69                 | Program output: -69                
Correct output: -92                 | Program output: -92                
Correct output: -58                 | Program output: 41                 
Correct output: 24                  | Program output: 49                 
Correct output: -57                 | Program output: -57                
Correct output: -90                 | Program output: -24                
Correct output: -21                 | Program output: 67                 
Correct output: 23                  | Program output: 23                 
Correct output: 52                  | Program output: 52                 
Correct output: -44                 | Program output: -44                
Correct output: -92                 | Program output: -92                
Correct output: 44                  | Program output: 44                 
Correct output: 31                  | Program output: 73                 
Correct output: 0                   | Program output: 50                 
Correct output: 9                   | Program output: 9                  
Correct output: 5                   | Program output: 5                  
Correct output: 8                   | Program output: 83                 
Correct output: 8                   | Program output: 55                 
Correct output: 18                  | Program output: 62                 
Correct output: 11                  | Program output: 50                 
Correct output: 2                   | Program output: 66                 
Correct output: 18                  | Program output: 89                 
Correct output: 6                   | Program output: 6                  
Correct output: 9                   | Program output: 98                 
Correct output: 62                  | Program output: 90                 
Correct output: 2                   | Program output: 7                  
Correct output: 13                  | Program output: 13                 
Correct output: 23                  | Program output: 55                 
Correct output: 43                  | Program output: 88                 
Correct output: 1                   | Program output: 95                 
Correct output: 1                   | Program output: 1                  
Correct output: 26                  | Program output: 35                 
Correct output: -84                 | Program output: 73                 
Correct output: -77                 | Program output: -77                
Correct output: -87                 | Program output: -72                
Correct output: -46                 | Program output: -46                
Correct output: -64                 | Program output: -64                
Correct output: -77                 | Program output: 99                 
Correct output: -88                 | Program output: -41                
Correct output: -95                 | Program output: -95                
Correct output: -90                 | Program output: -7                 
Correct output: -18                 | Program output: -18                
Correct output: -82                 | Program output: -82                
Correct output: -94                 | Program output: -23                
Correct output: -54                 | Program output: -54                
Correct output: -83                 | Program output: 59                 
Correct output: -86                 | Program output: -71                
Correct output: -88                 | Program output: -88                
Correct output: -24                 | Program output: 54                 
Correct output: -90                 | Program output: -85                
Correct output: -76                 | Program output: 23                 
Correct output: -98                 | Program output: -98                
Correct output: -86                 | Program output: -86                
Correct output: -71                 | Program output: 50                 
Correct output: -43                 | Program output: -22                
Correct output: -98                 | Program output: -98                
Correct output: -94                 | Program output: -94                
Correct output: -92                 | Program output: -16                
Correct output: -97                 | Program output: 98                 
Correct output: -75                 | Program output: -50                
Correct output: -12                 | Program output: 2                  
Correct output: -62                 | Program output: 74                 
Correct output: -33                 | Program output: 72                 
Correct output: -96                 | Program output: 84                 
Correct output: -69                 | Program output: 56                 
Correct output: -77                 | Program output: -34                
Correct output: -97                 | Program output: -53                
Correct output: -71                 | Program output: -71                
Correct output: -92                 | Program output: 49                 
Correct output: -96                 | Program output: -11                
Correct output: -55                 | Program output: -55                
Correct output: -82                 | Program output: 76                 
Correct output: -80                 | Program output: 27                 
Correct output: -99                 | Program output: -41                
Correct output: -92                 | Program output: 53                 
Correct output: -83                 | Program output: -83                
Correct output: -71                 | Program output: -71                
Correct output: -87                 | Program output: -87                
Correct output: -48                 | Program output: -27                
Correct output: -60                 | Program output: 69                 
Correct output: -52                 | Program output: 78                 
Correct output: -57                 | Program output: 55                 
Correct output: 6                   | Program output: 23                 
Correct output: 54                  | Program output: 62                 
Correct output: -16                 | Program output: -1                 
Correct output: -64                 | Program output: 21                 
Correct output: -71                 | Program output: 85                 
Correct output: -59                 | Program output: 95                 
Correct output: -72                 | Program output: 20                 
Correct output: -85                 | Program output: -64                
Correct output: -77                 | Program output: -4                 
Correct output: -42                 | Program output: -32                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_add} {:close 0, :instruction exec_s} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction exec_yank} {:close 1, :instruction 61} {:close 0, :instruction in2} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_and} {:close 1, :instruction 71} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_add} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_eq} {:close 1, :instruction exec_when} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 1, :instruction in3} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction tagged_880} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction in4} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_max} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_exec} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_items})
Lexicase best program: (exec_when (boolean_stackdepth exec_dup_times (exec_swap () (boolean_pop integer_lte integer_add exec_s (integer_inc integer_swap) (exec_do*count (boolean_stackdepth exec_dup_times () integer_mod integer_lt exec_yankdup exec_while (exec_yank) 61) in2 boolean_shove boolean_not) (exec_empty integer_stackdepth boolean_and 71) exec_shove () integer_min integer_fromboolean exec_empty integer_add) integer_eq integer_eq) exec_when () integer_dec integer_max in3) boolean_dup boolean_stackdepth exec_noop exec_dup_items boolean_dup_times tagged_880 integer_empty exec_rot (print_integer integer_stackdepth integer_flush in4 boolean_yank integer_mod exec_dup_times (exec_dup_times (boolean_yankdup) exec_when (integer_yank integer_add integer_gte integer_sub integer_max integer_sub exec_dup (integer_dup_items print_exec (integer_dup_times) exec_do*times (integer_shove exec_dup_items))))) () ())
Lexicase best errors: [1 0 0 1 1 1 0 1 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 90
Percent parens: 0.244
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_add} {:close 0, :instruction exec_s} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction exec_yank} {:close 1, :instruction 61} {:close 0, :instruction in2} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_and} {:close 1, :instruction 71} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_add} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_eq} {:close 1, :instruction exec_when} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 1, :instruction in3} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction tagged_880} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction in4} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_max} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_exec} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_items})
Zero cases best program: (exec_when (boolean_stackdepth exec_dup_times (exec_swap () (boolean_pop integer_lte integer_add exec_s (integer_inc integer_swap) (exec_do*count (boolean_stackdepth exec_dup_times () integer_mod integer_lt exec_yankdup exec_while (exec_yank) 61) in2 boolean_shove boolean_not) (exec_empty integer_stackdepth boolean_and 71) exec_shove () integer_min integer_fromboolean exec_empty integer_add) integer_eq integer_eq) exec_when () integer_dec integer_max in3) boolean_dup boolean_stackdepth exec_noop exec_dup_items boolean_dup_times tagged_880 integer_empty exec_rot (print_integer integer_stackdepth integer_flush in4 boolean_yank integer_mod exec_dup_times (exec_dup_times (boolean_yankdup) exec_when (integer_yank integer_add integer_gte integer_sub integer_max integer_sub exec_dup (integer_dup_items print_exec (integer_dup_times) exec_do*times (integer_shove exec_dup_items))))) () ())
Zero cases best errors: [1 0 0 1 1 1 0 1 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 90
Percent parens: 0.244
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 3 3 1000 1000 1 3 2 1 3)
Population mean number of elite cases: 3.02
Count of perfect (error zero) individuals by case: (0 3 3 0 0 1 3 2 1 3)
Population mean number of perfect (error zero) cases: 0.02
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_when} {:close 0, :instruction integer_add} {:close 2, :instruction integer_sub} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_min} {:close 0, :instruction exec_while} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_xor})
Best program: (print_integer integer_mult exec_k (exec_eq boolean_dup integer_stackdepth boolean_stackdepth integer_yank integer_gt exec_dup_items boolean_invert_second_then_and exec_when () integer_add integer_sub) () boolean_dup in3 exec_s_when_autoconstructing () (exec_dup (integer_dup_times) boolean_pop print_boolean boolean_rot boolean_empty print_integer integer_yank exec_s (integer_lt boolean_flush) (integer_dup_items exec_yankdup exec_yankdup integer_eq exec_rot (exec_s (exec_yank integer_eq boolean_dup_items) (exec_s_when_autoconstructing () (boolean_empty) (integer_shove integer_dup_times boolean_invert_first_then_and integer_mult integer_min exec_while (integer_gte integer_dec boolean_empty boolean_frominteger exec_flush boolean_rot exec_dup (boolean_and in3 boolean_shove boolean_dup_items integer_div boolean_flush exec_stackdepth print_integer exec_pop (boolean_xor))))) ()) () ()) ()) ())
Errors: [1 0 0 1 1 1 0 1 1 0]
Total: 6
Mean: 0.6
Genome size: 62
Size: 85
Percent parens: 0.271
--- Population Statistics ---
Average total errors in population: 9.984
Median total errors in population: 10
Error averages by case: (1.0 0.997 0.997 1.0 1.0 0.999 0.997 0.998 0.999 0.997)
Error minima by case: (1 0 0 1 1 0 0 0 0 0)
Average genome size in population (length): 49.787
Average program size in population (points): 68.716
Average percent parens in population: 0.280
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.263
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 488913
--- Timings ---
Current time: 1559594107650 milliseconds
Total Time:           1.9 seconds
Initialization:       0.1 seconds,  5.4%
Reproduction:         0.7 seconds, 37.7%
Fitness Testing:      1.1 seconds, 56.8%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 643
Test mean error for best: 0.64300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -74                 | Program output: -74                
Correct output: -85                 | Program output: -85                
Correct output: -100                | Program output: -100               
Correct output: -69                 | Program output: -69                
Correct output: -92                 | Program output: -92                
Correct output: -58                 | Program output: 41                 
Correct output: 24                  | Program output: 49                 
Correct output: -57                 | Program output: -57                
Correct output: -90                 | Program output: -24                
Correct output: -21                 | Program output: 67                 
Correct output: 23                  | Program output: 23                 
Correct output: 52                  | Program output: 52                 
Correct output: -44                 | Program output: -44                
Correct output: -92                 | Program output: -92                
Correct output: 44                  | Program output: 44                 
Correct output: 31                  | Program output: 73                 
Correct output: 0                   | Program output: 50                 
Correct output: 9                   | Program output: 9                  
Correct output: 5                   | Program output: 5                  
Correct output: 8                   | Program output: 83                 
Correct output: 8                   | Program output: 55                 
Correct output: 18                  | Program output: 62                 
Correct output: 11                  | Program output: 50                 
Correct output: 2                   | Program output: 66                 
Correct output: 18                  | Program output: 89                 
Correct output: 6                   | Program output: 6                  
Correct output: 9                   | Program output: 98                 
Correct output: 62                  | Program output: 90                 
Correct output: 2                   | Program output: 7                  
Correct output: 13                  | Program output: 13                 
Correct output: 23                  | Program output: 55                 
Correct output: 43                  | Program output: 88                 
Correct output: 1                   | Program output: 95                 
Correct output: 1                   | Program output: 1                  
Correct output: 26                  | Program output: 35                 
Correct output: -84                 | Program output: 73                 
Correct output: -77                 | Program output: -77                
Correct output: -87                 | Program output: -72                
Correct output: -46                 | Program output: -46                
Correct output: -64                 | Program output: -64                
Correct output: -77                 | Program output: 99                 
Correct output: -88                 | Program output: -41                
Correct output: -95                 | Program output: -95                
Correct output: -90                 | Program output: -7                 
Correct output: -18                 | Program output: -18                
Correct output: -82                 | Program output: -82                
Correct output: -94                 | Program output: -23                
Correct output: -54                 | Program output: -54                
Correct output: -83                 | Program output: 59                 
Correct output: -86                 | Program output: -71                
Correct output: -88                 | Program output: -88                
Correct output: -24                 | Program output: 54                 
Correct output: -90                 | Program output: -85                
Correct output: -76                 | Program output: 23                 
Correct output: -98                 | Program output: -98                
Correct output: -86                 | Program output: -86                
Correct output: -71                 | Program output: 50                 
Correct output: -43                 | Program output: -22                
Correct output: -98                 | Program output: -98                
Correct output: -94                 | Program output: -94                
Correct output: -92                 | Program output: -16                
Correct output: -97                 | Program output: 98                 
Correct output: -75                 | Program output: -50                
Correct output: -12                 | Program output: 2                  
Correct output: -62                 | Program output: 74                 
Correct output: -33                 | Program output: 72                 
Correct output: -96                 | Program output: 84                 
Correct output: -69                 | Program output: 56                 
Correct output: -77                 | Program output: -34                
Correct output: -97                 | Program output: -53                
Correct output: -71                 | Program output: -71                
Correct output: -92                 | Program output: 49                 
Correct output: -96                 | Program output: -11                
Correct output: -55                 | Program output: -55                
Correct output: -82                 | Program output: 76                 
Correct output: -80                 | Program output: 27                 
Correct output: -99                 | Program output: -41                
Correct output: -92                 | Program output: 53                 
Correct output: -83                 | Program output: -83                
Correct output: -71                 | Program output: -71                
Correct output: -87                 | Program output: -87                
Correct output: -48                 | Program output: -27                
Correct output: -60                 | Program output: 69                 
Correct output: -52                 | Program output: 78                 
Correct output: -57                 | Program output: 55                 
Correct output: 6                   | Program output: 23                 
Correct output: 54                  | Program output: 62                 
Correct output: -16                 | Program output: -1                 
Correct output: -64                 | Program output: 21                 
Correct output: -71                 | Program output: 85                 
Correct output: -59                 | Program output: 95                 
Correct output: -72                 | Program output: 20                 
Correct output: -85                 | Program output: -64                
Correct output: -77                 | Program output: -4                 
Correct output: -42                 | Program output: -32                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_when} {:close 2, :instruction integer_sub} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k} {:close 0, :instruction exec_while} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_xor})
Lexicase best program: (print_integer integer_mult exec_k (exec_eq boolean_dup integer_stackdepth boolean_stackdepth integer_yank integer_gt exec_dup_items boolean_invert_second_then_and exec_when () integer_sub) () boolean_dup in3 exec_s_when_autoconstructing () (exec_dup (integer_dup_times) boolean_pop print_boolean boolean_rot boolean_stackdepth boolean_dup_items boolean_empty print_integer integer_yank exec_s (integer_lt exec_do*while (boolean_flush) integer_dup_items exec_yankdup exec_yankdup integer_eq exec_rot (exec_s (exec_yank integer_eq boolean_dup_items) (exec_s_when_autoconstructing () (integer_shove boolean_invert_first_then_and integer_mult integer_min exec_k (exec_while (integer_gte integer_dec boolean_empty exec_flush boolean_rot exec_dup (boolean_and in3 boolean_shove boolean_dup_items integer_div boolean_flush exec_stackdepth exec_dup_times () print_integer exec_pop (boolean_xor)))) ()) ()) ()) () ()) () ()) ())
Lexicase best errors: [1 0 1 0 1 1 1 0 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 90
Percent parens: 0.300
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_when} {:close 2, :instruction integer_sub} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k} {:close 0, :instruction exec_while} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_xor})
Zero cases best program: (print_integer integer_mult exec_k (exec_eq boolean_dup integer_stackdepth boolean_stackdepth integer_yank integer_gt exec_dup_items boolean_invert_second_then_and exec_when () integer_sub) () boolean_dup in3 exec_s_when_autoconstructing () (exec_dup (integer_dup_times) boolean_pop print_boolean boolean_rot boolean_stackdepth boolean_dup_items boolean_empty print_integer integer_yank exec_s (integer_lt exec_do*while (boolean_flush) integer_dup_items exec_yankdup exec_yankdup integer_eq exec_rot (exec_s (exec_yank integer_eq boolean_dup_items) (exec_s_when_autoconstructing () (integer_shove boolean_invert_first_then_and integer_mult integer_min exec_k (exec_while (integer_gte integer_dec boolean_empty exec_flush boolean_rot exec_dup (boolean_and in3 boolean_shove boolean_dup_items integer_div boolean_flush exec_stackdepth exec_dup_times () print_integer exec_pop (boolean_xor)))) ()) ()) ()) () ()) () ()) ())
Zero cases best errors: [1 0 1 0 1 1 1 0 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 90
Percent parens: 0.300
--- Lexicase Population Statistics ---
Count of elite individuals by case: (2 159 253 175 3 251 4 421 165 166)
Population mean number of elite cases: 1.60
Count of perfect (error zero) individuals by case: (2 159 253 175 3 251 4 421 165 166)
Population mean number of perfect (error zero) cases: 1.60
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_when} {:close 0, :instruction integer_add} {:close 2, :instruction integer_sub} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_min} {:close 0, :instruction exec_while} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor})
Best program: (print_integer integer_mult exec_k (exec_eq boolean_dup boolean_stackdepth integer_yank integer_gt exec_dup_items boolean_invert_second_then_and exec_when () integer_add integer_sub) () boolean_dup in3 exec_s_when_autoconstructing () (exec_dup (integer_dup_times) boolean_pop print_boolean boolean_rot print_integer integer_yank exec_s (integer_lt boolean_flush) (integer_dup_items exec_yankdup exec_yankdup integer_eq exec_rot (exec_s (integer_eq boolean_dup_items) (exec_s_when_autoconstructing () (boolean_empty) (integer_shove exec_k_when_autoconstructing (integer_dup_times boolean_invert_first_then_and integer_mult integer_min exec_while (integer_gte integer_dec boolean_empty boolean_frominteger exec_flush boolean_rot exec_dup (boolean_and in3 boolean_shove exec_shove () boolean_dup_items integer_div boolean_flush exec_stackdepth print_integer boolean_xor))) ())) ()) () ()) ()) ())
Errors: [1 0 1 0 1 1 1 0 0 0]
Total: 5
Mean: 0.5
Genome size: 60
Size: 85
Percent parens: 0.294
--- Population Statistics ---
Average total errors in population: 8.401
Median total errors in population: 10
Error averages by case: (0.998 0.841 0.747 0.825 0.997 0.749 0.996 0.579 0.835 0.834)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 65.718
Average program size in population (points): 88.757
Average percent parens in population: 0.257
Minimum age in population: 1.0
Maximum age in population: 1.0
Average age in population: 1.0
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.006
Error (vector) diversity:			 0.02
Behavioral diversity:				 0.257
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 1105118
--- Timings ---
Current time: 1559594110092 milliseconds
Total Time:           4.4 seconds
Initialization:       0.1 seconds,  2.4%
Reproduction:         1.8 seconds, 41.0%
Fitness Testing:      2.0 seconds, 44.7%
Report:               0.5 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 646
Test mean error for best: 0.64600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -74                 | Program output: -4                 
Correct output: -85                 | Program output: -85                
Correct output: -100                | Program output: 8                  
Correct output: -69                 | Program output: -69                
Correct output: -92                 | Program output: 12                 
Correct output: -58                 | Program output: -58                
Correct output: 24                  | Program output: 49                 
Correct output: -57                 | Program output: -57                
Correct output: -90                 | Program output: -24                
Correct output: -21                 | Program output: 67                 
Correct output: 23                  | Program output: 23                 
Correct output: 52                  | Program output: 52                 
Correct output: -44                 | Program output: -44                
Correct output: -92                 | Program output: -92                
Correct output: 44                  | Program output: 44                 
Correct output: 31                  | Program output: 72                 
Correct output: 0                   | Program output: 7                  
Correct output: 9                   | Program output: 9                  
Correct output: 5                   | Program output: 63                 
Correct output: 8                   | Program output: 54                 
Correct output: 8                   | Program output: 88                 
Correct output: 18                  | Program output: 18                 
Correct output: 11                  | Program output: 86                 
Correct output: 2                   | Program output: 12                 
Correct output: 18                  | Program output: 40                 
Correct output: 6                   | Program output: 32                 
Correct output: 9                   | Program output: 81                 
Correct output: 62                  | Program output: 74                 
Correct output: 2                   | Program output: 2                  
Correct output: 13                  | Program output: 29                 
Correct output: 23                  | Program output: 51                 
Correct output: 43                  | Program output: 57                 
Correct output: 1                   | Program output: 1                  
Correct output: 1                   | Program output: 48                 
Correct output: 26                  | Program output: 82                 
Correct output: -84                 | Program output: -84                
Correct output: -77                 | Program output: -37                
Correct output: -87                 | Program output: -87                
Correct output: -46                 | Program output: 38                 
Correct output: -64                 | Program output: 18                 
Correct output: -77                 | Program output: -76                
Correct output: -88                 | Program output: -88                
Correct output: -95                 | Program output: -27                
Correct output: -90                 | Program output: -90                
Correct output: -18                 | Program output: 4                  
Correct output: -82                 | Program output: 0                  
Correct output: -94                 | Program output: -94                
Correct output: -54                 | Program output: -30                
Correct output: -83                 | Program output: -83                
Correct output: -86                 | Program output: -86                
Correct output: -88                 | Program output: -18                
Correct output: -24                 | Program output: 49                 
Correct output: -90                 | Program output: -15                
Correct output: -76                 | Program output: 27                 
Correct output: -98                 | Program output: 24                 
Correct output: -86                 | Program output: 11                 
Correct output: -71                 | Program output: -71                
Correct output: -43                 | Program output: -43                
Correct output: -98                 | Program output: -20                
Correct output: -94                 | Program output: -22                
Correct output: -92                 | Program output: -60                
Correct output: -97                 | Program output: 37                 
Correct output: -75                 | Program output: -75                
Correct output: -12                 | Program output: -12                
Correct output: -62                 | Program output: 7                  
Correct output: -33                 | Program output: 79                 
Correct output: -96                 | Program output: 64                 
Correct output: -69                 | Program output: 64                 
Correct output: -77                 | Program output: -77                
Correct output: -97                 | Program output: -97                
Correct output: -71                 | Program output: 0                  
Correct output: -92                 | Program output: 49                 
Correct output: -96                 | Program output: -96                
Correct output: -55                 | Program output: -17                
Correct output: -82                 | Program output: -82                
Correct output: -80                 | Program output: -14                
Correct output: -99                 | Program output: 5                  
Correct output: -92                 | Program output: 98                 
Correct output: -83                 | Program output: 27                 
Correct output: -71                 | Program output: 33                 
Correct output: -87                 | Program output: -24                
Correct output: -48                 | Program output: 89                 
Correct output: -60                 | Program output: -60                
Correct output: -52                 | Program output: -52                
Correct output: -57                 | Program output: 54                 
Correct output: 6                   | Program output: 6                  
Correct output: 54                  | Program output: 77                 
Correct output: -16                 | Program output: -16                
Correct output: -64                 | Program output: 21                 
Correct output: -71                 | Program output: 94                 
Correct output: -59                 | Program output: -59                
Correct output: -72                 | Program output: -22                
Correct output: -85                 | Program output: -79                
Correct output: -77                 | Program output: -38                
Correct output: -42                 | Program output: 100                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mult} {:close 1, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s} {:close 0, :instruction integer_gte} {:close 2, :instruction integer_gt} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction 15} {:close 0, :instruction integer_max} {:close 1, :instruction integer_gte} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction -11} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_if} {:close 1, :instruction integer_eq} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_while} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_empty} {:close 1, :instruction print_newline} {:close 0, :instruction exec_while} {:close 1, :instruction exec_k} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_inc} {:close 2, :instruction exec_do*count})
Lexicase best program: (integer_mult exec_dup_items print_integer exec_s (integer_gte integer_gt) () (in1) print_integer 15 integer_max integer_gte integer_swap boolean_dup_items boolean_dup boolean_invert_first_then_and exec_dup_items -11 exec_noop exec_pop (exec_empty exec_if (integer_eq) (exec_do*times () exec_while () integer_yank boolean_swap) integer_gte integer_rot exec_rot (integer_max boolean_swap integer_yank integer_inc exec_empty exec_s (boolean_empty exec_dup () integer_dup_items boolean_pop) (integer_empty print_newline) (exec_while (exec_k () (integer_shove boolean_and boolean_flush) boolean_pop boolean_yankdup print_integer boolean_not exec_do*range (boolean_dup_items integer_pop) integer_inc exec_do*count ()))) () ()))
Lexicase best errors: [1 0 0 1 1 1 0 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 76
Percent parens: 0.276
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mult} {:close 1, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s} {:close 0, :instruction integer_gte} {:close 2, :instruction integer_gt} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction 15} {:close 0, :instruction integer_max} {:close 1, :instruction integer_gte} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction -11} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_if} {:close 1, :instruction integer_eq} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_while} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_empty} {:close 1, :instruction print_newline} {:close 0, :instruction exec_while} {:close 1, :instruction exec_k} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_inc} {:close 2, :instruction exec_do*count})
Zero cases best program: (integer_mult exec_dup_items print_integer exec_s (integer_gte integer_gt) () (in1) print_integer 15 integer_max integer_gte integer_swap boolean_dup_items boolean_dup boolean_invert_first_then_and exec_dup_items -11 exec_noop exec_pop (exec_empty exec_if (integer_eq) (exec_do*times () exec_while () integer_yank boolean_swap) integer_gte integer_rot exec_rot (integer_max boolean_swap integer_yank integer_inc exec_empty exec_s (boolean_empty exec_dup () integer_dup_items boolean_pop) (integer_empty print_newline) (exec_while (exec_k () (integer_shove boolean_and boolean_flush) boolean_pop boolean_yankdup print_integer boolean_not exec_do*range (boolean_dup_items integer_pop) integer_inc exec_do*count ()))) () ()))
Zero cases best errors: [1 0 0 1 1 1 0 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 76
Percent parens: 0.276
--- Lexicase Population Statistics ---
Count of elite individuals by case: (91 88 89 25 93 161 89 160 90 357)
Population mean number of elite cases: 1.24
Count of perfect (error zero) individuals by case: (91 88 89 25 93 161 89 160 90 357)
Population mean number of perfect (error zero) cases: 1.24
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_shove} {:close 0, :instruction integer_div} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 2, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 0, :instruction integer_min} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction -11} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_if} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_empty} {:close 1, :instruction tagged_642} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_k} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mod} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_inc} {:close 2, :instruction exec_do*count})
Best program: (exec_shove () integer_div exec_empty print_integer exec_s (integer_swap integer_gte integer_gt) () (integer_flush in1) print_integer integer_max integer_min integer_swap boolean_dup_items boolean_dup boolean_invert_first_then_and -11 exec_noop exec_pop (exec_empty exec_if (exec_do*times () integer_yank boolean_stackdepth integer_div boolean_swap) (integer_inc boolean_dup_items integer_max integer_rot exec_rot (boolean_swap exec_empty tagged_642) (integer_dup_items integer_empty exec_dup_times (exec_k () (integer_shove boolean_yankdup exec_shove (boolean_flush) boolean_pop integer_dec integer_sub exec_stackdepth print_integer boolean_not integer_mod print_boolean exec_do*range (boolean_dup_items integer_pop) integer_inc exec_do*count ()))) ())))
Errors: [1 0 0 1 1 1 0 1 0 0]
Total: 5
Mean: 0.5
Genome size: 56
Size: 74
Percent parens: 0.243
--- Population Statistics ---
Average total errors in population: 8.757
Median total errors in population: 10
Error averages by case: (0.909 0.912 0.911 0.975 0.907 0.839 0.911 0.84 0.91 0.643)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 67.999
Average program size in population (points): 91.577
Average percent parens in population: 0.255
Minimum age in population: 2.0
Maximum age in population: 2.0
Average age in population: 2.0
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.006
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.286
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1746900
--- Timings ---
Current time: 1559594112342 milliseconds
Total Time:           6.9 seconds
Initialization:       0.1 seconds,  1.5%
Reproduction:         3.0 seconds, 43.0%
Fitness Testing:      2.8 seconds, 41.0%
Report:               1.0 seconds, 14.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 544
Test mean error for best: 0.54400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -74                 | Program output: -74                
Correct output: -85                 | Program output: -85                
Correct output: -100                | Program output: -100               
Correct output: -69                 | Program output: -45                
Correct output: -92                 | Program output: -92                
Correct output: -58                 | Program output: -58                
Correct output: 24                  | Program output: 49                 
Correct output: -57                 | Program output: -57                
Correct output: -90                 | Program output: -24                
Correct output: -21                 | Program output: -21                
Correct output: 23                  | Program output: 23                 
Correct output: 52                  | Program output: 52                 
Correct output: -44                 | Program output: -44                
Correct output: -92                 | Program output: -92                
Correct output: 44                  | Program output: 44                 
Correct output: 31                  | Program output: 73                 
Correct output: 0                   | Program output: 50                 
Correct output: 9                   | Program output: 9                  
Correct output: 5                   | Program output: 5                  
Correct output: 8                   | Program output: 83                 
Correct output: 8                   | Program output: 55                 
Correct output: 18                  | Program output: 62                 
Correct output: 11                  | Program output: 50                 
Correct output: 2                   | Program output: 66                 
Correct output: 18                  | Program output: 89                 
Correct output: 6                   | Program output: 6                  
Correct output: 9                   | Program output: 98                 
Correct output: 62                  | Program output: 90                 
Correct output: 2                   | Program output: 7                  
Correct output: 13                  | Program output: 13                 
Correct output: 23                  | Program output: 55                 
Correct output: 43                  | Program output: 88                 
Correct output: 1                   | Program output: 95                 
Correct output: 1                   | Program output: 1                  
Correct output: 26                  | Program output: 35                 
Correct output: -84                 | Program output: 73                 
Correct output: -77                 | Program output: -77                
Correct output: -87                 | Program output: -68                
Correct output: -46                 | Program output: -46                
Correct output: -64                 | Program output: -45                
Correct output: -77                 | Program output: -77                
Correct output: -88                 | Program output: -41                
Correct output: -95                 | Program output: -81                
Correct output: -90                 | Program output: -57                
Correct output: -18                 | Program output: -18                
Correct output: -82                 | Program output: -82                
Correct output: -94                 | Program output: -38                
Correct output: -54                 | Program output: -46                
Correct output: -83                 | Program output: 59                 
Correct output: -86                 | Program output: -71                
Correct output: -88                 | Program output: -88                
Correct output: -24                 | Program output: -24                
Correct output: -90                 | Program output: -10                
Correct output: -76                 | Program output: -76                
Correct output: -98                 | Program output: -9                 
Correct output: -86                 | Program output: -86                
Correct output: -71                 | Program output: 50                 
Correct output: -43                 | Program output: -22                
Correct output: -98                 | Program output: -74                
Correct output: -94                 | Program output: -24                
Correct output: -92                 | Program output: -42                
Correct output: -97                 | Program output: -62                
Correct output: -75                 | Program output: -50                
Correct output: -12                 | Program output: 2                  
Correct output: -62                 | Program output: -62                
Correct output: -33                 | Program output: -33                
Correct output: -96                 | Program output: 84                 
Correct output: -69                 | Program output: -64                
Correct output: -77                 | Program output: -27                
Correct output: -97                 | Program output: -53                
Correct output: -71                 | Program output: -71                
Correct output: -92                 | Program output: -92                
Correct output: -96                 | Program output: -89                
Correct output: -55                 | Program output: -13                
Correct output: -82                 | Program output: -67                
Correct output: -80                 | Program output: -80                
Correct output: -99                 | Program output: -74                
Correct output: -92                 | Program output: 53                 
Correct output: -83                 | Program output: -81                
Correct output: -71                 | Program output: -60                
Correct output: -87                 | Program output: -87                
Correct output: -48                 | Program output: -48                
Correct output: -60                 | Program output: 69                 
Correct output: -52                 | Program output: -14                
Correct output: -57                 | Program output: -27                
Correct output: 6                   | Program output: 23                 
Correct output: 54                  | Program output: 62                 
Correct output: -16                 | Program output: -6                 
Correct output: -64                 | Program output: 21                 
Correct output: -71                 | Program output: -60                
Correct output: -59                 | Program output: 95                 
Correct output: -72                 | Program output: -72                
Correct output: -85                 | Program output: -85                
Correct output: -77                 | Program output: -77                
Correct output: -42                 | Program output: -42                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction print_integer} {:close 0, :instruction integer_add} {:close 0, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_lt} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_when} {:close 0, :instruction integer_add} {:close 2, :instruction integer_sub} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup} {:close 0, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_yank} {:close 0, :instruction in2} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_xor})
Lexicase best program: (print_integer integer_add exec_k (exec_eq integer_dup integer_stackdepth integer_dup_items boolean_stackdepth integer_lt) (integer_empty) integer_yank boolean_yank integer_gt exec_dup_items boolean_invert_second_then_and exec_when () integer_add integer_sub boolean_dup in3 exec_s_when_autoconstructing () (boolean_yank exec_dup (in4 integer_dup_times) print_boolean boolean_rot boolean_empty print_integer integer_yank exec_s (integer_lt boolean_flush) (exec_yankdup exec_yankdup exec_rot (exec_s (boolean_empty boolean_frominteger exec_swap (exec_yank integer_eq boolean_dup_items) (exec_s_when_autoconstructing () (integer_yank) (in2 boolean_empty) integer_dup_times exec_flush boolean_invert_first_then_and integer_gte exec_yank integer_dec boolean_empty boolean_frominteger exec_flush exec_dup (boolean_and exec_swap () (in3 boolean_yankdup exec_y_when_autoconstructing (boolean_dup_items boolean_flush boolean_yank integer_empty exec_stackdepth exec_dup_items print_integer exec_pop (exec_do*times (boolean_xor))))))) () ()) () ()) ()) ())
Lexicase best errors: [1 0 0 0 1 1 0 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 100
Percent parens: 0.280
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction print_integer} {:close 0, :instruction integer_add} {:close 0, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_lt} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_when} {:close 0, :instruction integer_add} {:close 2, :instruction integer_sub} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup} {:close 0, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_yank} {:close 0, :instruction in2} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_xor})
Zero cases best program: (print_integer integer_add exec_k (exec_eq integer_dup integer_stackdepth integer_dup_items boolean_stackdepth integer_lt) (integer_empty) integer_yank boolean_yank integer_gt exec_dup_items boolean_invert_second_then_and exec_when () integer_add integer_sub boolean_dup in3 exec_s_when_autoconstructing () (boolean_yank exec_dup (in4 integer_dup_times) print_boolean boolean_rot boolean_empty print_integer integer_yank exec_s (integer_lt boolean_flush) (exec_yankdup exec_yankdup exec_rot (exec_s (boolean_empty boolean_frominteger exec_swap (exec_yank integer_eq boolean_dup_items) (exec_s_when_autoconstructing () (integer_yank) (in2 boolean_empty) integer_dup_times exec_flush boolean_invert_first_then_and integer_gte exec_yank integer_dec boolean_empty boolean_frominteger exec_flush exec_dup (boolean_and exec_swap () (in3 boolean_yankdup exec_y_when_autoconstructing (boolean_dup_items boolean_flush boolean_yank integer_empty exec_stackdepth exec_dup_items print_integer exec_pop (exec_do*times (boolean_xor))))))) () ()) () ()) ()) ())
Zero cases best errors: [1 0 0 0 1 1 0 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 100
Percent parens: 0.280
--- Lexicase Population Statistics ---
Count of elite individuals by case: (69 196 21 24 290 294 104 452 93 33)
Population mean number of elite cases: 1.58
Count of perfect (error zero) individuals by case: (69 196 21 24 290 294 104 452 93 33)
Population mean number of perfect (error zero) cases: 1.58
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_when} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_eq} {:close 0, :instruction 73} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction print_integer})
Best program: (print_integer exec_s_when_autoconstructing (integer_mult exec_k (boolean_invert_first_then_and boolean_dup integer_stackdepth boolean_stackdepth integer_yank integer_gt exec_dup_items boolean_invert_second_then_and exec_when () integer_add boolean_dup in3 exec_s_when_autoconstructing () (exec_dup (in4 integer_dup_times) boolean_pop boolean_empty print_integer boolean_invert_second_then_and integer_yank exec_s (integer_lt boolean_flush) (exec_yankdup exec_yankdup exec_dup_times () integer_eq exec_rot (exec_s (exec_yank integer_eq 73 integer_sub boolean_dup_items) (boolean_empty) (integer_shove boolean_invert_first_then_and integer_mult exec_while (integer_dec boolean_empty boolean_frominteger integer_dup exec_flush boolean_rot boolean_eq exec_rot (exec_dup (boolean_and in2 in3 exec_do*times (boolean_shove integer_shove boolean_dup_items boolean_flush exec_stackdepth print_integer))) () ()))) () ()) ()) ()) ()) () ())
Errors: [1 0 0 0 1 1 0 0 1 0]
Total: 4
Mean: 0.4
Genome size: 63
Size: 90
Percent parens: 0.300
--- Population Statistics ---
Average total errors in population: 8.424
Median total errors in population: 9
Error averages by case: (0.931 0.804 0.979 0.976 0.71 0.706 0.896 0.548 0.907 0.967)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 64.637
Average program size in population (points): 87.178
Average percent parens in population: 0.256
Minimum age in population: 3.0
Maximum age in population: 3.0
Average age in population: 3.0
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.006
Error (vector) diversity:			 0.023
Behavioral diversity:				 0.262
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 2313107
--- Timings ---
Current time: 1559594114711 milliseconds
Total Time:           8.9 seconds
Initialization:       0.1 seconds,  1.2%
Reproduction:         4.1 seconds, 45.8%
Fitness Testing:      3.5 seconds, 38.9%
Report:               1.3 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 544
Test mean error for best: 0.54400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -74                 | Program output: -74                
Correct output: -85                 | Program output: -85                
Correct output: -100                | Program output: -100               
Correct output: -69                 | Program output: -45                
Correct output: -92                 | Program output: -92                
Correct output: -58                 | Program output: -58                
Correct output: 24                  | Program output: 49                 
Correct output: -57                 | Program output: -57                
Correct output: -90                 | Program output: -24                
Correct output: -21                 | Program output: -21                
Correct output: 23                  | Program output: 23                 
Correct output: 52                  | Program output: 52                 
Correct output: -44                 | Program output: -44                
Correct output: -92                 | Program output: -92                
Correct output: 44                  | Program output: 44                 
Correct output: 31                  | Program output: 73                 
Correct output: 0                   | Program output: 50                 
Correct output: 9                   | Program output: 9                  
Correct output: 5                   | Program output: 5                  
Correct output: 8                   | Program output: 83                 
Correct output: 8                   | Program output: 55                 
Correct output: 18                  | Program output: 62                 
Correct output: 11                  | Program output: 50                 
Correct output: 2                   | Program output: 66                 
Correct output: 18                  | Program output: 89                 
Correct output: 6                   | Program output: 6                  
Correct output: 9                   | Program output: 98                 
Correct output: 62                  | Program output: 90                 
Correct output: 2                   | Program output: 7                  
Correct output: 13                  | Program output: 13                 
Correct output: 23                  | Program output: 55                 
Correct output: 43                  | Program output: 88                 
Correct output: 1                   | Program output: 95                 
Correct output: 1                   | Program output: 1                  
Correct output: 26                  | Program output: 35                 
Correct output: -84                 | Program output: 73                 
Correct output: -77                 | Program output: -77                
Correct output: -87                 | Program output: -68                
Correct output: -46                 | Program output: -46                
Correct output: -64                 | Program output: -45                
Correct output: -77                 | Program output: -77                
Correct output: -88                 | Program output: -41                
Correct output: -95                 | Program output: -81                
Correct output: -90                 | Program output: -57                
Correct output: -18                 | Program output: -18                
Correct output: -82                 | Program output: -82                
Correct output: -94                 | Program output: -38                
Correct output: -54                 | Program output: -46                
Correct output: -83                 | Program output: 59                 
Correct output: -86                 | Program output: -71                
Correct output: -88                 | Program output: -88                
Correct output: -24                 | Program output: -24                
Correct output: -90                 | Program output: -10                
Correct output: -76                 | Program output: -76                
Correct output: -98                 | Program output: -9                 
Correct output: -86                 | Program output: -86                
Correct output: -71                 | Program output: 50                 
Correct output: -43                 | Program output: -22                
Correct output: -98                 | Program output: -74                
Correct output: -94                 | Program output: -24                
Correct output: -92                 | Program output: -42                
Correct output: -97                 | Program output: -62                
Correct output: -75                 | Program output: -50                
Correct output: -12                 | Program output: 2                  
Correct output: -62                 | Program output: -62                
Correct output: -33                 | Program output: -33                
Correct output: -96                 | Program output: 84                 
Correct output: -69                 | Program output: -64                
Correct output: -77                 | Program output: -27                
Correct output: -97                 | Program output: -53                
Correct output: -71                 | Program output: -71                
Correct output: -92                 | Program output: -92                
Correct output: -96                 | Program output: -89                
Correct output: -55                 | Program output: -13                
Correct output: -82                 | Program output: -67                
Correct output: -80                 | Program output: -80                
Correct output: -99                 | Program output: -74                
Correct output: -92                 | Program output: 53                 
Correct output: -83                 | Program output: -81                
Correct output: -71                 | Program output: -60                
Correct output: -87                 | Program output: -87                
Correct output: -48                 | Program output: -48                
Correct output: -60                 | Program output: 69                 
Correct output: -52                 | Program output: -14                
Correct output: -57                 | Program output: -27                
Correct output: 6                   | Program output: 23                 
Correct output: 54                  | Program output: 62                 
Correct output: -16                 | Program output: -6                 
Correct output: -64                 | Program output: 21                 
Correct output: -71                 | Program output: -60                
Correct output: -59                 | Program output: 95                 
Correct output: -72                 | Program output: -72                
Correct output: -85                 | Program output: -85                
Correct output: -77                 | Program output: -77                
Correct output: -42                 | Program output: -42                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_when} {:close 0, :instruction integer_add} {:close 0, :instruction exec_k} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_y} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_flush} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_min} {:close 0, :instruction exec_while} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_xor})
Lexicase best program: (print_integer integer_mult integer_min exec_k (integer_stackdepth boolean_stackdepth integer_gt exec_dup_items exec_when () integer_add exec_k (in3 boolean_pop exec_noop in4 exec_do*times (boolean_empty print_integer integer_yank boolean_flush) boolean_dup_times exec_y (exec_yankdup exec_yankdup integer_min exec_s (exec_yank boolean_flush) (exec_s_when_autoconstructing () (boolean_empty) (integer_mult boolean_not integer_min exec_while (integer_pop integer_dec boolean_empty boolean_frominteger exec_flush exec_dup (in3 integer_div boolean_flush exec_stackdepth print_integer exec_pop (boolean_xor))))) ())) ()) ())
Lexicase best errors: [1 1 0 0 1 0 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 64
Percent parens: 0.266
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_when} {:close 0, :instruction integer_add} {:close 0, :instruction exec_k} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_y} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_flush} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_min} {:close 0, :instruction exec_while} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_xor})
Zero cases best program: (print_integer integer_mult integer_min exec_k (integer_stackdepth boolean_stackdepth integer_gt exec_dup_items exec_when () integer_add exec_k (in3 boolean_pop exec_noop in4 exec_do*times (boolean_empty print_integer integer_yank boolean_flush) boolean_dup_times exec_y (exec_yankdup exec_yankdup integer_min exec_s (exec_yank boolean_flush) (exec_s_when_autoconstructing () (boolean_empty) (integer_mult boolean_not integer_min exec_while (integer_pop integer_dec boolean_empty boolean_frominteger exec_flush exec_dup (in3 integer_div boolean_flush exec_stackdepth print_integer exec_pop (boolean_xor))))) ())) ()) ())
Zero cases best errors: [1 1 0 0 1 0 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 64
Percent parens: 0.266
--- Lexicase Population Statistics ---
Count of elite individuals by case: (142 102 203 199 141 199 288 296 349 199)
Population mean number of elite cases: 2.12
Count of perfect (error zero) individuals by case: (142 102 203 199 141 199 288 296 349 199)
Population mean number of perfect (error zero) cases: 2.12
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction print_integer} {:close 0, :instruction integer_add} {:close 0, :instruction exec_k} {:close 0, :instruction exec_s} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_lt} {:close 1, :instruction integer_empty} {:close 0, :instruction tag_integer_814} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_when} {:close 0, :instruction integer_add} {:close 2, :instruction integer_sub} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup} {:close 0, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yank} {:close 1, :instruction in1} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times})
Best program: (print_integer integer_add exec_k (exec_s (exec_eq integer_dup integer_stackdepth integer_dup_items boolean_stackdepth integer_lt) (integer_empty) (tag_integer_814 integer_yank boolean_yank) integer_gt boolean_invert_second_then_and exec_when () integer_add integer_sub) () boolean_dup in3 exec_s_when_autoconstructing () (boolean_yank exec_dup (in4 integer_dup_times) print_boolean boolean_rot print_integer integer_yank exec_s (integer_lt boolean_flush) (exec_yankdup exec_rot (exec_s (boolean_empty boolean_frominteger exec_swap (exec_yank integer_eq boolean_dup_items) (integer_yank) in2 integer_dup_times exec_flush integer_gte exec_stackdepth) (exec_yank integer_dec boolean_empty boolean_frominteger exec_flush exec_dup (boolean_and exec_swap () (boolean_yankdup exec_y_when_autoconstructing (boolean_dup_items integer_rot boolean_flush boolean_yank in1) integer_empty exec_stackdepth exec_dup_items print_integer exec_do*times ()))) ()) () ()) ()) ())
Errors: [1 1 0 0 1 0 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 68
Size: 95
Percent parens: 0.284
--- Population Statistics ---
Average total errors in population: 7.882
Median total errors in population: 9
Error averages by case: (0.858 0.898 0.797 0.801 0.859 0.801 0.712 0.704 0.651 0.801)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 64.274
Average program size in population (points): 87.869
Average percent parens in population: 0.266
Minimum age in population: 4.0
Maximum age in population: 4.0
Average age in population: 4.0
Median age in population: 4.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.007
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.248
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 2972871
--- Timings ---
Current time: 1559594117029 milliseconds
Total Time:          11.4 seconds
Initialization:       0.1 seconds,  0.9%
Reproduction:         5.2 seconds, 46.1%
Fitness Testing:      4.2 seconds, 36.6%
Report:               1.9 seconds, 16.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 424
Test mean error for best: 0.42400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -74                 | Program output: -74                
Correct output: -85                 | Program output: -85                
Correct output: -100                | Program output: -100               
Correct output: -69                 | Program output: -69                
Correct output: -92                 | Program output: -92                
Correct output: -58                 | Program output: -58                
Correct output: 24                  | Program output: 49                 
Correct output: -57                 | Program output: -57                
Correct output: -90                 | Program output: -24                
Correct output: -21                 | Program output: 67                 
Correct output: 23                  | Program output: 23                 
Correct output: 52                  | Program output: 52                 
Correct output: -44                 | Program output: -44                
Correct output: -92                 | Program output: -92                
Correct output: 44                  | Program output: 44                 
Correct output: 31                  | Program output: 72                 
Correct output: 0                   | Program output: 7                  
Correct output: 9                   | Program output: 9                  
Correct output: 5                   | Program output: 5                  
Correct output: 8                   | Program output: 54                 
Correct output: 8                   | Program output: 55                 
Correct output: 18                  | Program output: 18                 
Correct output: 11                  | Program output: 50                 
Correct output: 2                   | Program output: 12                 
Correct output: 18                  | Program output: 40                 
Correct output: 6                   | Program output: 6                  
Correct output: 9                   | Program output: 81                 
Correct output: 62                  | Program output: 74                 
Correct output: 2                   | Program output: 2                  
Correct output: 13                  | Program output: 13                 
Correct output: 23                  | Program output: 51                 
Correct output: 43                  | Program output: 57                 
Correct output: 1                   | Program output: 1                  
Correct output: 1                   | Program output: 1                  
Correct output: 26                  | Program output: 35                 
Correct output: -84                 | Program output: -84                
Correct output: -77                 | Program output: -77                
Correct output: -87                 | Program output: -87                
Correct output: -46                 | Program output: -46                
Correct output: -64                 | Program output: -64                
Correct output: -77                 | Program output: -76                
Correct output: -88                 | Program output: -88                
Correct output: -95                 | Program output: -95                
Correct output: -90                 | Program output: -90                
Correct output: -18                 | Program output: -18                
Correct output: -82                 | Program output: -82                
Correct output: -94                 | Program output: -94                
Correct output: -54                 | Program output: -54                
Correct output: -83                 | Program output: -83                
Correct output: -86                 | Program output: -86                
Correct output: -88                 | Program output: -88                
Correct output: -24                 | Program output: 49                 
Correct output: -90                 | Program output: -85                
Correct output: -76                 | Program output: 23                 
Correct output: -98                 | Program output: -98                
Correct output: -86                 | Program output: -86                
Correct output: -71                 | Program output: -71                
Correct output: -43                 | Program output: -43                
Correct output: -98                 | Program output: -98                
Correct output: -94                 | Program output: -94                
Correct output: -92                 | Program output: -60                
Correct output: -97                 | Program output: 37                 
Correct output: -75                 | Program output: -75                
Correct output: -12                 | Program output: -12                
Correct output: -62                 | Program output: 7                  
Correct output: -33                 | Program output: 72                 
Correct output: -96                 | Program output: 64                 
Correct output: -69                 | Program output: 56                 
Correct output: -77                 | Program output: -77                
Correct output: -97                 | Program output: -97                
Correct output: -71                 | Program output: -71                
Correct output: -92                 | Program output: 49                 
Correct output: -96                 | Program output: -96                
Correct output: -55                 | Program output: -55                
Correct output: -82                 | Program output: -82                
Correct output: -80                 | Program output: -14                
Correct output: -99                 | Program output: -41                
Correct output: -92                 | Program output: 53                 
Correct output: -83                 | Program output: -83                
Correct output: -71                 | Program output: -71                
Correct output: -87                 | Program output: -87                
Correct output: -48                 | Program output: -27                
Correct output: -60                 | Program output: -60                
Correct output: -52                 | Program output: -52                
Correct output: -57                 | Program output: 54                 
Correct output: 6                   | Program output: 6                  
Correct output: 54                  | Program output: 62                 
Correct output: -16                 | Program output: -16                
Correct output: -64                 | Program output: 21                 
Correct output: -71                 | Program output: 85                 
Correct output: -59                 | Program output: -59                
Correct output: -72                 | Program output: -22                
Correct output: -85                 | Program output: -79                
Correct output: -77                 | Program output: -38                
Correct output: -42                 | Program output: -32                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction print_integer} {:close 1, :instruction integer_add} {:close 0, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_lt} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_when} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yank} {:close 2, :instruction integer_sub} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction in3} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction 75} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 1, :instruction integer_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction in2} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_yank} {:close 0, :instruction in2} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times})
Lexicase best program: (print_integer integer_add exec_k (exec_eq integer_dup boolean_dup_times integer_stackdepth integer_lt) (integer_empty) integer_yank boolean_yank integer_gt exec_dup_items exec_when () in1 integer_add boolean_yank integer_sub boolean_dup boolean_eq exec_if (integer_yank in3 exec_s_when_autoconstructing () (boolean_yank 75 integer_pop) (exec_dup (integer_min integer_dup_times) print_boolean boolean_empty print_integer integer_yank exec_s (in2 integer_lt boolean_flush) (exec_yankdup exec_yankdup exec_rot (exec_s (boolean_empty boolean_frominteger exec_swap (exec_yank integer_gt) (integer_eq boolean_dup_items) exec_s_when_autoconstructing () (integer_yank) (in2 boolean_empty) integer_dup_times exec_flush boolean_invert_first_then_and exec_yank boolean_invert_second_then_and integer_dec boolean_empty exec_flush exec_dup (exec_swap () (in3 boolean_yankdup exec_y_when_autoconstructing (integer_swap exec_dup_items print_integer exec_do*times ())))) () ()) () ()) ())) ())
Lexicase best errors: [1 0 0 0 0 0 1 1 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 99
Percent parens: 0.293
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction print_integer} {:close 1, :instruction integer_add} {:close 0, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_lt} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_when} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yank} {:close 2, :instruction integer_sub} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction in3} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction 75} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 1, :instruction integer_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction in2} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_yank} {:close 0, :instruction in2} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times})
Zero cases best program: (print_integer integer_add exec_k (exec_eq integer_dup boolean_dup_times integer_stackdepth integer_lt) (integer_empty) integer_yank boolean_yank integer_gt exec_dup_items exec_when () in1 integer_add boolean_yank integer_sub boolean_dup boolean_eq exec_if (integer_yank in3 exec_s_when_autoconstructing () (boolean_yank 75 integer_pop) (exec_dup (integer_min integer_dup_times) print_boolean boolean_empty print_integer integer_yank exec_s (in2 integer_lt boolean_flush) (exec_yankdup exec_yankdup exec_rot (exec_s (boolean_empty boolean_frominteger exec_swap (exec_yank integer_gt) (integer_eq boolean_dup_items) exec_s_when_autoconstructing () (integer_yank) (in2 boolean_empty) integer_dup_times exec_flush boolean_invert_first_then_and exec_yank boolean_invert_second_then_and integer_dec boolean_empty exec_flush exec_dup (exec_swap () (in3 boolean_yankdup exec_y_when_autoconstructing (integer_swap exec_dup_items print_integer exec_do*times ())))) () ()) () ()) ())) ())
Zero cases best errors: [1 0 0 0 0 0 1 1 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 99
Percent parens: 0.293
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 123 258 117 124 113 399 395 2 285)
Population mean number of elite cases: 1.82
Count of perfect (error zero) individuals by case: (1 123 258 117 124 113 399 395 2 285)
Population mean number of perfect (error zero) cases: 1.82
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction print_integer} {:close 1, :instruction integer_add} {:close 0, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_lt} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_when} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yank} {:close 2, :instruction integer_sub} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction in3} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction 75} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 1, :instruction integer_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction in2} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_yank} {:close 0, :instruction in2} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times})
Best program: (print_integer integer_add exec_k (exec_eq integer_dup boolean_dup_times integer_stackdepth integer_lt) (integer_empty) integer_yank boolean_yank integer_gt exec_dup_items exec_when () in1 integer_add boolean_yank integer_sub boolean_dup boolean_eq exec_if (integer_yank in3 exec_s_when_autoconstructing () (boolean_yank 75 integer_pop) (exec_dup (integer_min integer_dup_times) print_boolean boolean_empty print_integer integer_yank exec_s (in2 integer_lt boolean_flush) (exec_yankdup exec_yankdup exec_rot (exec_s (boolean_empty boolean_frominteger exec_swap (exec_yank integer_gt) (integer_eq boolean_dup_items) exec_s_when_autoconstructing () (integer_yank) (in2 boolean_empty) integer_dup_times exec_flush boolean_invert_first_then_and exec_yank boolean_invert_second_then_and integer_dec boolean_empty exec_flush exec_dup (exec_swap () (in3 boolean_yankdup exec_y_when_autoconstructing (integer_swap exec_dup_items print_integer exec_do*times ())))) () ()) () ()) ())) ())
Errors: [1 0 0 0 0 0 1 1 1 0]
Total: 4
Mean: 0.4
Genome size: 70
Size: 99
Percent parens: 0.293
--- Population Statistics ---
Average total errors in population: 8.183
Median total errors in population: 8
Error averages by case: (0.999 0.877 0.742 0.883 0.876 0.887 0.601 0.605 0.998 0.715)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 65.798
Average program size in population (points): 91.185
Average percent parens in population: 0.276
Minimum age in population: 5.0
Maximum age in population: 5.0
Average age in population: 5.0
Median age in population: 5.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.007
Error (vector) diversity:			 0.026
Behavioral diversity:				 0.245
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 3585035
--- Timings ---
Current time: 1559594119336 milliseconds
Total Time:          13.7 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:         6.4 seconds, 46.8%
Fitness Testing:      4.8 seconds, 35.3%
Report:               2.3 seconds, 17.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 421
Test mean error for best: 0.42100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -74                 | Program output: -74                
Correct output: -85                 | Program output: -85                
Correct output: -100                | Program output: -100               
Correct output: -69                 | Program output: -69                
Correct output: -92                 | Program output: -92                
Correct output: -58                 | Program output: -58                
Correct output: 24                  | Program output: 49                 
Correct output: -57                 | Program output: -57                
Correct output: -90                 | Program output: -24                
Correct output: -21                 | Program output: -21                
Correct output: 23                  | Program output: 23                 
Correct output: 52                  | Program output: 52                 
Correct output: -44                 | Program output: -44                
Correct output: -92                 | Program output: -92                
Correct output: 44                  | Program output: 44                 
Correct output: 31                  | Program output: 48                 
Correct output: 0                   | Program output: 7                  
Correct output: 9                   | Program output: 9                  
Correct output: 5                   | Program output: 60                 
Correct output: 8                   | Program output: 8                  
Correct output: 8                   | Program output: 8                  
Correct output: 18                  | Program output: 18                 
Correct output: 11                  | Program output: 86                 
Correct output: 2                   | Program output: 12                 
Correct output: 18                  | Program output: 40                 
Correct output: 6                   | Program output: 32                 
Correct output: 9                   | Program output: 9                  
Correct output: 62                  | Program output: 74                 
Correct output: 2                   | Program output: 2                  
Correct output: 13                  | Program output: 29                 
Correct output: 23                  | Program output: 23                 
Correct output: 43                  | Program output: 43                 
Correct output: 1                   | Program output: 1                  
Correct output: 1                   | Program output: 46                 
Correct output: 26                  | Program output: 55                 
Correct output: -84                 | Program output: -84                
Correct output: -77                 | Program output: -37                
Correct output: -87                 | Program output: -87                
Correct output: -46                 | Program output: 38                 
Correct output: -64                 | Program output: -45                
Correct output: -77                 | Program output: -77                
Correct output: -88                 | Program output: -88                
Correct output: -95                 | Program output: -81                
Correct output: -90                 | Program output: -90                
Correct output: -18                 | Program output: 4                  
Correct output: -82                 | Program output: 0                  
Correct output: -94                 | Program output: -94                
Correct output: -54                 | Program output: -46                
Correct output: -83                 | Program output: -83                
Correct output: -86                 | Program output: -86                
Correct output: -88                 | Program output: -18                
Correct output: -24                 | Program output: -24                
Correct output: -90                 | Program output: -15                
Correct output: -76                 | Program output: -76                
Correct output: -98                 | Program output: -9                 
Correct output: -86                 | Program output: 11                 
Correct output: -71                 | Program output: -71                
Correct output: -43                 | Program output: -43                
Correct output: -98                 | Program output: -74                
Correct output: -94                 | Program output: -24                
Correct output: -92                 | Program output: -60                
Correct output: -97                 | Program output: -62                
Correct output: -75                 | Program output: -75                
Correct output: -12                 | Program output: -12                
Correct output: -62                 | Program output: -62                
Correct output: -33                 | Program output: -33                
Correct output: -96                 | Program output: 3                  
Correct output: -69                 | Program output: -64                
Correct output: -77                 | Program output: -77                
Correct output: -97                 | Program output: -97                
Correct output: -71                 | Program output: 0                  
Correct output: -92                 | Program output: -92                
Correct output: -96                 | Program output: -96                
Correct output: -55                 | Program output: -17                
Correct output: -82                 | Program output: -82                
Correct output: -80                 | Program output: -80                
Correct output: -99                 | Program output: -74                
Correct output: -92                 | Program output: 22                 
Correct output: -83                 | Program output: -81                
Correct output: -71                 | Program output: -60                
Correct output: -87                 | Program output: -24                
Correct output: -48                 | Program output: -48                
Correct output: -60                 | Program output: -60                
Correct output: -52                 | Program output: -52                
Correct output: -57                 | Program output: -27                
Correct output: 6                   | Program output: 6                  
Correct output: 54                  | Program output: 72                 
Correct output: -16                 | Program output: -16                
Correct output: -64                 | Program output: 21                 
Correct output: -71                 | Program output: -60                
Correct output: -59                 | Program output: -59                
Correct output: -72                 | Program output: -72                
Correct output: -85                 | Program output: -85                
Correct output: -77                 | Program output: -77                
Correct output: -42                 | Program output: -42                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_add} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_lt} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_when} {:close 0, :instruction in1} {:close 2, :instruction integer_sub} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_if} {:close 0, :instruction in3} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 1, :instruction integer_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_empty} {:close 1, :instruction tagged_500} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_while} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dec} {:close 0, :instruction in3} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times})
Lexicase best program: (integer_add exec_k (exec_yankdup exec_eq integer_dup integer_stackdepth integer_dup_items boolean_stackdepth integer_lt) (integer_empty) boolean_yank integer_gt boolean_not exec_dup_items exec_when () in1 integer_sub boolean_eq exec_if (in3 exec_s_when_autoconstructing () (boolean_yank integer_pop) (exec_dup (in4 integer_min integer_dup_times) print_boolean boolean_empty tagged_500) print_integer integer_yank exec_s (integer_lt boolean_flush) (boolean_dup exec_yankdup exec_yankdup exec_rot (exec_s (boolean_frominteger integer_rot integer_sub exec_swap (exec_yank boolean_invert_second_then_and) (integer_empty integer_eq boolean_dup_items) exec_s_when_autoconstructing () (exec_while () integer_yank) (integer_eq in2 boolean_empty) integer_dup_times exec_flush boolean_invert_first_then_and exec_yank boolean_invert_second_then_and exec_do*count (integer_dec in3 boolean_empty exec_flush exec_dup (exec_swap () (in3 exec_y_when_autoconstructing (boolean_flush boolean_yank integer_swap exec_dup_items print_integer exec_do*times ()))))) () ()) () ()) ()) ())
Lexicase best errors: [0 1 0 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 106
Percent parens: 0.292
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_add} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_lt} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_when} {:close 0, :instruction in1} {:close 2, :instruction integer_sub} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_if} {:close 0, :instruction in3} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 1, :instruction integer_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_empty} {:close 1, :instruction tagged_500} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_while} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dec} {:close 0, :instruction in3} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times})
Zero cases best program: (integer_add exec_k (exec_yankdup exec_eq integer_dup integer_stackdepth integer_dup_items boolean_stackdepth integer_lt) (integer_empty) boolean_yank integer_gt boolean_not exec_dup_items exec_when () in1 integer_sub boolean_eq exec_if (in3 exec_s_when_autoconstructing () (boolean_yank integer_pop) (exec_dup (in4 integer_min integer_dup_times) print_boolean boolean_empty tagged_500) print_integer integer_yank exec_s (integer_lt boolean_flush) (boolean_dup exec_yankdup exec_yankdup exec_rot (exec_s (boolean_frominteger integer_rot integer_sub exec_swap (exec_yank boolean_invert_second_then_and) (integer_empty integer_eq boolean_dup_items) exec_s_when_autoconstructing () (exec_while () integer_yank) (integer_eq in2 boolean_empty) integer_dup_times exec_flush boolean_invert_first_then_and exec_yank boolean_invert_second_then_and exec_do*count (integer_dec in3 boolean_empty exec_flush exec_dup (exec_swap () (in3 exec_y_when_autoconstructing (boolean_flush boolean_yank integer_swap exec_dup_items print_integer exec_do*times ()))))) () ()) () ()) ()) ())
Zero cases best errors: [0 1 0 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 106
Percent parens: 0.292
--- Lexicase Population Statistics ---
Count of elite individuals by case: (154 86 130 128 155 161 170 86 130 171)
Population mean number of elite cases: 1.37
Count of perfect (error zero) individuals by case: (154 86 130 128 155 161 170 86 130 171)
Population mean number of perfect (error zero) cases: 1.37
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction print_integer} {:close 0, :instruction integer_add} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_add} {:close 0, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_when} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yank} {:close 2, :instruction integer_sub} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_if} {:close 0, :instruction in3} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_yank} {:close 0, :instruction in2} {:close 1, :instruction boolean_empty} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction tag_boolean_472} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*times})
Best program: (print_integer integer_add integer_empty integer_add exec_k (exec_eq integer_dup integer_stackdepth integer_dup_items integer_mod exec_swap (boolean_stackdepth integer_lt) (integer_yank boolean_yank) integer_gt exec_dup_items exec_when () in1 integer_add boolean_yank integer_sub) () boolean_dup boolean_flush boolean_eq exec_if (in3 exec_s_when_autoconstructing () (boolean_yank integer_pop) (exec_dup (in4 integer_min integer_dup_times) integer_yankdup boolean_empty print_integer integer_yank boolean_invert_second_then_and exec_s (integer_lt exec_yankdup exec_yankdup integer_yank exec_rot (exec_s (boolean_empty boolean_frominteger exec_swap (in1 integer_eq boolean_dup_items) (exec_s_when_autoconstructing () (integer_yank) (in2 boolean_empty) boolean_yank) integer_dup_times boolean_eq boolean_invert_first_then_and exec_yank boolean_dup boolean_invert_second_then_and integer_dec boolean_empty exec_flush integer_pop exec_dup (exec_swap () (in3 boolean_yankdup exec_while (exec_if (boolean_flush boolean_yank tag_boolean_472 integer_swap exec_dup_items print_integer boolean_shove exec_do*times ()) ())))) () ()) () ()) () ())) ())
Errors: [0 1 0 0 0 0 0 1 0 0]
Total: 2
Mean: 0.2
Genome size: 81
Size: 114
Percent parens: 0.289
--- Population Statistics ---
Average total errors in population: 8.629
Median total errors in population: 10
Error averages by case: (0.846 0.914 0.87 0.872 0.845 0.839 0.83 0.914 0.87 0.829)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 70.485
Average program size in population (points): 98.755
Average percent parens in population: 0.286
Minimum age in population: 6.0
Maximum age in population: 6.0
Average age in population: 6.0
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.007
Error (vector) diversity:			 0.019
Behavioral diversity:				 0.264
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 4187919
--- Timings ---
Current time: 1559594121551 milliseconds
Total Time:          15.9 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         7.5 seconds, 47.4%
Fitness Testing:      5.5 seconds, 34.4%
Report:               2.8 seconds, 17.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 209
Test mean error for best: 0.20900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -74                 | Program output: -74                
Correct output: -85                 | Program output: -85                
Correct output: -100                | Program output: -100               
Correct output: -69                 | Program output: -69                
Correct output: -92                 | Program output: -92                
Correct output: -58                 | Program output: -58                
Correct output: 24                  | Program output: 49                 
Correct output: -57                 | Program output: -57                
Correct output: -90                 | Program output: -24                
Correct output: -21                 | Program output: -21                
Correct output: 23                  | Program output: 23                 
Correct output: 52                  | Program output: 52                 
Correct output: -44                 | Program output: -44                
Correct output: -92                 | Program output: -92                
Correct output: 44                  | Program output: 44                 
Correct output: 31                  | Program output: 48                 
Correct output: 0                   | Program output: 7                  
Correct output: 9                   | Program output: 9                  
Correct output: 5                   | Program output: 5                  
Correct output: 8                   | Program output: 8                  
Correct output: 8                   | Program output: 8                  
Correct output: 18                  | Program output: 18                 
Correct output: 11                  | Program output: 50                 
Correct output: 2                   | Program output: 12                 
Correct output: 18                  | Program output: 40                 
Correct output: 6                   | Program output: 6                  
Correct output: 9                   | Program output: 9                  
Correct output: 62                  | Program output: 74                 
Correct output: 2                   | Program output: 2                  
Correct output: 13                  | Program output: 13                 
Correct output: 23                  | Program output: 23                 
Correct output: 43                  | Program output: 43                 
Correct output: 1                   | Program output: 1                  
Correct output: 1                   | Program output: 1                  
Correct output: 26                  | Program output: 35                 
Correct output: -84                 | Program output: -84                
Correct output: -77                 | Program output: -77                
Correct output: -87                 | Program output: -87                
Correct output: -46                 | Program output: -46                
Correct output: -64                 | Program output: -64                
Correct output: -77                 | Program output: -77                
Correct output: -88                 | Program output: -88                
Correct output: -95                 | Program output: -95                
Correct output: -90                 | Program output: -90                
Correct output: -18                 | Program output: -18                
Correct output: -82                 | Program output: -82                
Correct output: -94                 | Program output: -94                
Correct output: -54                 | Program output: -54                
Correct output: -83                 | Program output: -83                
Correct output: -86                 | Program output: -86                
Correct output: -88                 | Program output: -88                
Correct output: -24                 | Program output: -24                
Correct output: -90                 | Program output: -85                
Correct output: -76                 | Program output: -76                
Correct output: -98                 | Program output: -98                
Correct output: -86                 | Program output: -86                
Correct output: -71                 | Program output: -71                
Correct output: -43                 | Program output: -43                
Correct output: -98                 | Program output: -98                
Correct output: -94                 | Program output: -94                
Correct output: -92                 | Program output: -60                
Correct output: -97                 | Program output: -62                
Correct output: -75                 | Program output: -75                
Correct output: -12                 | Program output: -12                
Correct output: -62                 | Program output: -62                
Correct output: -33                 | Program output: -33                
Correct output: -96                 | Program output: 3                  
Correct output: -69                 | Program output: -64                
Correct output: -77                 | Program output: -77                
Correct output: -97                 | Program output: -97                
Correct output: -71                 | Program output: -71                
Correct output: -92                 | Program output: -92                
Correct output: -96                 | Program output: -96                
Correct output: -55                 | Program output: -55                
Correct output: -82                 | Program output: -82                
Correct output: -80                 | Program output: -80                
Correct output: -99                 | Program output: -74                
Correct output: -92                 | Program output: 22                 
Correct output: -83                 | Program output: -83                
Correct output: -71                 | Program output: -71                
Correct output: -87                 | Program output: -87                
Correct output: -48                 | Program output: -48                
Correct output: -60                 | Program output: -60                
Correct output: -52                 | Program output: -52                
Correct output: -57                 | Program output: -27                
Correct output: 6                   | Program output: 6                  
Correct output: 54                  | Program output: 62                 
Correct output: -16                 | Program output: -16                
Correct output: -64                 | Program output: 21                 
Correct output: -71                 | Program output: -60                
Correct output: -59                 | Program output: -59                
Correct output: -72                 | Program output: -72                
Correct output: -85                 | Program output: -85                
Correct output: -77                 | Program output: -77                
Correct output: -42                 | Program output: -42                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction print_integer} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_add} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_lt} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_when} {:close 0, :instruction exec_do*times} {:close 0, :instruction in1} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_if} {:close 0, :instruction in3} {:close 1, :instruction integer_min} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 1, :instruction integer_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer})
Lexicase best program: (print_integer integer_add exec_do*count (integer_add) exec_eq integer_dup integer_stackdepth integer_dup_items boolean_stackdepth integer_lt integer_empty boolean_yank integer_gt exec_dup_items exec_when () exec_do*times (in1 integer_rot boolean_dup boolean_eq) exec_if (in3 integer_min) (integer_pop) exec_dup (in4 integer_min integer_dup_times) print_boolean boolean_empty print_integer boolean_dup_times integer_yank integer_lt boolean_flush exec_yankdup exec_rot (exec_s (integer_yankdup boolean_empty boolean_xor exec_swap (exec_yank integer_eq boolean_dup_items) (exec_s_when_autoconstructing () (integer_yank) (integer_dup_times exec_flush boolean_invert_first_then_and boolean_invert_second_then_and exec_flush exec_dup (exec_swap () (in3 exec_y_when_autoconstructing (boolean_not boolean_eq boolean_yank integer_swap print_integer)))))) () ()) () ())
Lexicase best errors: [0 0 0 1 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 83
Percent parens: 0.265
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction print_integer} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_add} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_lt} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_when} {:close 0, :instruction exec_do*times} {:close 0, :instruction in1} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_if} {:close 0, :instruction in3} {:close 1, :instruction integer_min} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 1, :instruction integer_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer})
Zero cases best program: (print_integer integer_add exec_do*count (integer_add) exec_eq integer_dup integer_stackdepth integer_dup_items boolean_stackdepth integer_lt integer_empty boolean_yank integer_gt exec_dup_items exec_when () exec_do*times (in1 integer_rot boolean_dup boolean_eq) exec_if (in3 integer_min) (integer_pop) exec_dup (in4 integer_min integer_dup_times) print_boolean boolean_empty print_integer boolean_dup_times integer_yank integer_lt boolean_flush exec_yankdup exec_rot (exec_s (integer_yankdup boolean_empty boolean_xor exec_swap (exec_yank integer_eq boolean_dup_items) (exec_s_when_autoconstructing () (integer_yank) (integer_dup_times exec_flush boolean_invert_first_then_and boolean_invert_second_then_and exec_flush exec_dup (exec_swap () (in3 exec_y_when_autoconstructing (boolean_not boolean_eq boolean_yank integer_swap print_integer)))))) () ()) () ())
Zero cases best errors: [0 0 0 1 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 83
Percent parens: 0.265
--- Lexicase Population Statistics ---
Count of elite individuals by case: (234 202 189 83 205 351 202 348 38 188)
Population mean number of elite cases: 2.04
Count of perfect (error zero) individuals by case: (234 202 189 83 205 351 202 348 38 188)
Population mean number of perfect (error zero) cases: 2.04
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction print_integer} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_add} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_lt} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_when} {:close 0, :instruction exec_do*times} {:close 0, :instruction in1} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_if} {:close 0, :instruction in3} {:close 1, :instruction integer_min} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 1, :instruction integer_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer})
Best program: (print_integer integer_add exec_do*count (integer_add) exec_eq integer_dup integer_stackdepth integer_dup_items boolean_stackdepth integer_lt integer_empty boolean_yank integer_gt exec_dup_items exec_when () exec_do*times (in1 integer_rot boolean_dup boolean_eq) exec_if (in3 integer_min) (integer_pop) exec_dup (in4 integer_min integer_dup_times) print_boolean boolean_empty print_integer boolean_dup_times integer_yank integer_lt boolean_flush exec_yankdup exec_rot (exec_s (integer_yankdup boolean_empty boolean_xor exec_swap (exec_yank integer_eq boolean_dup_items) (exec_s_when_autoconstructing () (integer_yank) (integer_dup_times exec_flush boolean_invert_first_then_and boolean_invert_second_then_and exec_flush exec_dup (exec_swap () (in3 exec_y_when_autoconstructing (boolean_not boolean_eq boolean_yank integer_swap print_integer)))))) () ()) () ())
Errors: [0 0 0 1 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 61
Size: 83
Percent parens: 0.265
--- Population Statistics ---
Average total errors in population: 7.96
Median total errors in population: 10
Error averages by case: (0.766 0.798 0.811 0.917 0.795 0.649 0.798 0.652 0.962 0.812)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 71.396
Average program size in population (points): 99.885
Average percent parens in population: 0.284
Minimum age in population: 7.0
Maximum age in population: 7.0
Average age in population: 7.0
Median age in population: 7.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.01
Error (vector) diversity:			 0.028
Behavioral diversity:				 0.243
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 4787512
--- Timings ---
Current time: 1559594123677 milliseconds
Total Time:          18.1 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         8.6 seconds, 47.8%
Fitness Testing:      6.1 seconds, 33.6%
Report:               3.3 seconds, 18.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 424
Test mean error for best: 0.42400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -74                 | Program output: -74                
Correct output: -85                 | Program output: -85                
Correct output: -100                | Program output: -100               
Correct output: -69                 | Program output: -69                
Correct output: -92                 | Program output: -92                
Correct output: -58                 | Program output: -58                
Correct output: 24                  | Program output: 49                 
Correct output: -57                 | Program output: -57                
Correct output: -90                 | Program output: -24                
Correct output: -21                 | Program output: 67                 
Correct output: 23                  | Program output: 23                 
Correct output: 52                  | Program output: 52                 
Correct output: -44                 | Program output: -44                
Correct output: -92                 | Program output: -92                
Correct output: 44                  | Program output: 44                 
Correct output: 31                  | Program output: 72                 
Correct output: 0                   | Program output: 7                  
Correct output: 9                   | Program output: 9                  
Correct output: 5                   | Program output: 5                  
Correct output: 8                   | Program output: 54                 
Correct output: 8                   | Program output: 55                 
Correct output: 18                  | Program output: 18                 
Correct output: 11                  | Program output: 50                 
Correct output: 2                   | Program output: 12                 
Correct output: 18                  | Program output: 40                 
Correct output: 6                   | Program output: 6                  
Correct output: 9                   | Program output: 81                 
Correct output: 62                  | Program output: 74                 
Correct output: 2                   | Program output: 2                  
Correct output: 13                  | Program output: 13                 
Correct output: 23                  | Program output: 51                 
Correct output: 43                  | Program output: 57                 
Correct output: 1                   | Program output: 1                  
Correct output: 1                   | Program output: 1                  
Correct output: 26                  | Program output: 35                 
Correct output: -84                 | Program output: -84                
Correct output: -77                 | Program output: -77                
Correct output: -87                 | Program output: -87                
Correct output: -46                 | Program output: -46                
Correct output: -64                 | Program output: -64                
Correct output: -77                 | Program output: -76                
Correct output: -88                 | Program output: -88                
Correct output: -95                 | Program output: -95                
Correct output: -90                 | Program output: -90                
Correct output: -18                 | Program output: -18                
Correct output: -82                 | Program output: -82                
Correct output: -94                 | Program output: -94                
Correct output: -54                 | Program output: -54                
Correct output: -83                 | Program output: -83                
Correct output: -86                 | Program output: -86                
Correct output: -88                 | Program output: -88                
Correct output: -24                 | Program output: 49                 
Correct output: -90                 | Program output: -85                
Correct output: -76                 | Program output: 23                 
Correct output: -98                 | Program output: -98                
Correct output: -86                 | Program output: -86                
Correct output: -71                 | Program output: -71                
Correct output: -43                 | Program output: -43                
Correct output: -98                 | Program output: -98                
Correct output: -94                 | Program output: -94                
Correct output: -92                 | Program output: -60                
Correct output: -97                 | Program output: 37                 
Correct output: -75                 | Program output: -75                
Correct output: -12                 | Program output: -12                
Correct output: -62                 | Program output: 7                  
Correct output: -33                 | Program output: 72                 
Correct output: -96                 | Program output: 64                 
Correct output: -69                 | Program output: 56                 
Correct output: -77                 | Program output: -77                
Correct output: -97                 | Program output: -97                
Correct output: -71                 | Program output: -71                
Correct output: -92                 | Program output: 49                 
Correct output: -96                 | Program output: -96                
Correct output: -55                 | Program output: -55                
Correct output: -82                 | Program output: -82                
Correct output: -80                 | Program output: -14                
Correct output: -99                 | Program output: -41                
Correct output: -92                 | Program output: 53                 
Correct output: -83                 | Program output: -83                
Correct output: -71                 | Program output: -71                
Correct output: -87                 | Program output: -87                
Correct output: -48                 | Program output: -27                
Correct output: -60                 | Program output: -60                
Correct output: -52                 | Program output: -52                
Correct output: -57                 | Program output: 54                 
Correct output: 6                   | Program output: 6                  
Correct output: 54                  | Program output: 62                 
Correct output: -16                 | Program output: -16                
Correct output: -64                 | Program output: 21                 
Correct output: -71                 | Program output: 85                 
Correct output: -59                 | Program output: -59                
Correct output: -72                 | Program output: -22                
Correct output: -85                 | Program output: -79                
Correct output: -77                 | Program output: -38                
Correct output: -42                 | Program output: -32                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction print_integer} {:close 2, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_add} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_lt} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_when} {:close 0, :instruction exec_do*times} {:close 0, :instruction in1} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_if} {:close 0, :instruction in3} {:close 1, :instruction integer_min} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 1, :instruction integer_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_k} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_swap})
Lexicase best program: (print_integer boolean_dup_items integer_add exec_do*count (integer_add) exec_eq integer_dup exec_do*count (integer_stackdepth integer_dup_items boolean_stackdepth integer_lt) integer_empty boolean_yank integer_gt exec_dup_items exec_when () exec_do*times (in1 integer_rot boolean_dup boolean_eq) exec_if (in3 integer_min) (integer_pop) exec_dup (in4 integer_min integer_dup_times) print_boolean boolean_empty print_integer boolean_dup_times integer_yank boolean_flush exec_rot (exec_k (exec_s (integer_yankdup boolean_empty boolean_xor exec_swap (boolean_rot exec_yank integer_eq boolean_dup_items) (exec_s_when_autoconstructing () (integer_yank) (integer_dup_times integer_mod exec_flush boolean_invert_first_then_and boolean_invert_second_then_and exec_flush exec_swap () (in3 exec_y_when_autoconstructing (boolean_not integer_dup boolean_eq boolean_yank integer_swap))))) () ()) ()) () ())
Lexicase best errors: [0 0 0 0 0 0 1 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 87
Percent parens: 0.276
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction print_integer} {:close 2, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_add} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_lt} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_when} {:close 0, :instruction exec_do*times} {:close 0, :instruction in1} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_if} {:close 0, :instruction in3} {:close 1, :instruction integer_min} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 1, :instruction integer_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_k} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_swap})
Zero cases best program: (print_integer boolean_dup_items integer_add exec_do*count (integer_add) exec_eq integer_dup exec_do*count (integer_stackdepth integer_dup_items boolean_stackdepth integer_lt) integer_empty boolean_yank integer_gt exec_dup_items exec_when () exec_do*times (in1 integer_rot boolean_dup boolean_eq) exec_if (in3 integer_min) (integer_pop) exec_dup (in4 integer_min integer_dup_times) print_boolean boolean_empty print_integer boolean_dup_times integer_yank boolean_flush exec_rot (exec_k (exec_s (integer_yankdup boolean_empty boolean_xor exec_swap (boolean_rot exec_yank integer_eq boolean_dup_items) (exec_s_when_autoconstructing () (integer_yank) (integer_dup_times integer_mod exec_flush boolean_invert_first_then_and boolean_invert_second_then_and exec_flush exec_swap () (in3 exec_y_when_autoconstructing (boolean_not integer_dup boolean_eq boolean_yank integer_swap))))) () ()) ()) () ())
Zero cases best errors: [0 0 0 0 0 0 1 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 87
Percent parens: 0.276
--- Lexicase Population Statistics ---
Count of elite individuals by case: (163 180 226 429 217 421 12 210 32 166)
Population mean number of elite cases: 2.06
Count of perfect (error zero) individuals by case: (163 180 226 429 217 421 12 210 32 166)
Population mean number of perfect (error zero) cases: 2.06
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction print_integer} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_add} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_lt} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_when} {:close 0, :instruction exec_do*times} {:close 0, :instruction in1} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_if} {:close 0, :instruction in3} {:close 1, :instruction integer_min} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 1, :instruction integer_dup_times} {:close 0, :instruction print_boolean} {:close 2, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer})
Best program: (print_integer integer_add exec_do*count (exec_pop (integer_add) exec_eq integer_dup integer_stackdepth integer_dup_items boolean_stackdepth integer_lt) integer_empty boolean_yank integer_gt exec_dup_items exec_when () exec_do*times (in1 integer_rot boolean_dup boolean_eq) exec_if (in3 integer_min) (integer_pop) exec_dup (integer_min integer_dup_times) print_boolean exec_when () print_integer boolean_dup_times integer_yank integer_lt boolean_flush exec_yankdup exec_s (integer_yankdup boolean_empty boolean_xor boolean_xor exec_swap (exec_yank boolean_dup_items) (exec_s_when_autoconstructing (integer_yank) (integer_dup_times exec_flush boolean_invert_first_then_and boolean_invert_second_then_and exec_flush exec_dup (exec_swap () (in3 exec_y_when_autoconstructing (boolean_not boolean_eq boolean_flush) boolean_yank exec_eq integer_swap print_integer))) ())) () ())
Errors: [0 0 0 0 0 0 1 0 1 0]
Total: 2
Mean: 0.2
Genome size: 62
Size: 83
Percent parens: 0.253
--- Population Statistics ---
Average total errors in population: 7.944
Median total errors in population: 10
Error averages by case: (0.837 0.82 0.774 0.571 0.783 0.579 0.988 0.79 0.968 0.834)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 62.661
Average program size in population (points): 85.899
Average percent parens in population: 0.269
Minimum age in population: 8.0
Maximum age in population: 8.0
Average age in population: 8.0
Median age in population: 8.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.009
Error (vector) diversity:			 0.045
Behavioral diversity:				 0.243
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 5264845
--- Timings ---
Current time: 1559594125596 milliseconds
Total Time:          20.1 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:         9.7 seconds, 48.5%
Fitness Testing:      6.6 seconds, 32.7%
Report:               3.7 seconds, 18.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 419
Test mean error for best: 0.41900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -74                 | Program output: -74                
Correct output: -85                 | Program output: -85                
Correct output: -100                | Program output: -100               
Correct output: -69                 | Program output: -69                
Correct output: -92                 | Program output: -92                
Correct output: -58                 | Program output: -58                
Correct output: 24                  | Program output: 24                 
Correct output: -57                 | Program output: -57                
Correct output: -90                 | Program output: -90                
Correct output: -21                 | Program output: 67                 
Correct output: 23                  | Program output: 23                 
Correct output: 52                  | Program output: 52                 
Correct output: -44                 | Program output: -44                
Correct output: -92                 | Program output: -92                
Correct output: 44                  | Program output: 44                 
Correct output: 31                  | Program output: 31                 
Correct output: 0                   | Program output: 0                  
Correct output: 9                   | Program output: 9                  
Correct output: 5                   | Program output: 5                  
Correct output: 8                   | Program output: 83                 
Correct output: 8                   | Program output: 55                 
Correct output: 18                  | Program output: 25                 
Correct output: 11                  | Program output: 11                 
Correct output: 2                   | Program output: 2                  
Correct output: 18                  | Program output: 18                 
Correct output: 6                   | Program output: 6                  
Correct output: 9                   | Program output: 76                 
Correct output: 62                  | Program output: 62                 
Correct output: 2                   | Program output: 7                  
Correct output: 13                  | Program output: 13                 
Correct output: 23                  | Program output: 55                 
Correct output: 43                  | Program output: 44                 
Correct output: 1                   | Program output: 56                 
Correct output: 1                   | Program output: 1                  
Correct output: 26                  | Program output: 26                 
Correct output: -84                 | Program output: 53                 
Correct output: -77                 | Program output: -77                
Correct output: -87                 | Program output: -72                
Correct output: -46                 | Program output: -46                
Correct output: -64                 | Program output: -64                
Correct output: -77                 | Program output: 97                 
Correct output: -88                 | Program output: -41                
Correct output: -95                 | Program output: -95                
Correct output: -90                 | Program output: -46                
Correct output: -18                 | Program output: -18                
Correct output: -82                 | Program output: -82                
Correct output: -94                 | Program output: -23                
Correct output: -54                 | Program output: -54                
Correct output: -83                 | Program output: 59                 
Correct output: -86                 | Program output: -71                
Correct output: -88                 | Program output: -88                
Correct output: -24                 | Program output: 49                 
Correct output: -90                 | Program output: -90                
Correct output: -76                 | Program output: 23                 
Correct output: -98                 | Program output: -98                
Correct output: -86                 | Program output: -86                
Correct output: -71                 | Program output: 50                 
Correct output: -43                 | Program output: -24                
Correct output: -98                 | Program output: -98                
Correct output: -94                 | Program output: -94                
Correct output: -92                 | Program output: -92                
Correct output: -97                 | Program output: -97                
Correct output: -75                 | Program output: -50                
Correct output: -12                 | Program output: 2                  
Correct output: -62                 | Program output: -34                
Correct output: -33                 | Program output: 72                 
Correct output: -96                 | Program output: -96                
Correct output: -69                 | Program output: -69                
Correct output: -77                 | Program output: -61                
Correct output: -97                 | Program output: -53                
Correct output: -71                 | Program output: -71                
Correct output: -92                 | Program output: -90                
Correct output: -96                 | Program output: -11                
Correct output: -55                 | Program output: -55                
Correct output: -82                 | Program output: -42                
Correct output: -80                 | Program output: 14                 
Correct output: -99                 | Program output: -99                
Correct output: -92                 | Program output: -92                
Correct output: -83                 | Program output: -83                
Correct output: -71                 | Program output: -71                
Correct output: -87                 | Program output: -87                
Correct output: -48                 | Program output: -27                
Correct output: -60                 | Program output: 69                 
Correct output: -52                 | Program output: -43                
Correct output: -57                 | Program output: -57                
Correct output: 6                   | Program output: 23                 
Correct output: 54                  | Program output: 54                 
Correct output: -16                 | Program output: -1                 
Correct output: -64                 | Program output: -64                
Correct output: -71                 | Program output: -71                
Correct output: -59                 | Program output: 6                  
Correct output: -72                 | Program output: -32                
Correct output: -85                 | Program output: -64                
Correct output: -77                 | Program output: -4                 
Correct output: -42                 | Program output: -32                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_add} {:close 1, :instruction integer_add} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_lt} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_when} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction tag_integer_663} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_eq} {:close 0, :instruction in3} {:close 2, :instruction integer_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 1, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_y} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_yank} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_when} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_while} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in4} {:close 0, :instruction tag_integer_451} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*times})
Lexicase best program: (integer_add integer_add exec_eq integer_dup exec_dup () integer_stackdepth integer_dup_items integer_lt integer_empty boolean_yank integer_gt exec_when () in1 integer_add tag_integer_663 in2 in3 exec_when (in3 boolean_dup boolean_eq) in3 integer_swap exec_s_when_autoconstructing () (boolean_yank integer_pop) (exec_dup (integer_min integer_dup_times) print_integer integer_max integer_yank exec_s (integer_lt integer_gte) (boolean_invert_second_then_and integer_sub exec_k (exec_yankdup in2) (exec_rot (exec_s (boolean_empty boolean_yankdup boolean_and integer_yank exec_swap (exec_y (integer_gt) boolean_dup_items) (exec_s_when_autoconstructing () (integer_yank) (boolean_empty) integer_dup_times exec_flush boolean_invert_first_then_and exec_when () integer_sub boolean_empty exec_while (exec_dup (exec_swap () (in3 boolean_yankdup in4 tag_integer_451 boolean_flush integer_dec) boolean_yank integer_swap boolean_dup_times print_integer integer_eq exec_do*times ())))) () ()) () ())) ()))
Lexicase best errors: [0 0 1 0 0 1 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 105
Percent parens: 0.295
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_add} {:close 1, :instruction integer_add} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_lt} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_when} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction tag_integer_663} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_eq} {:close 0, :instruction in3} {:close 2, :instruction integer_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 1, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_y} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_yank} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_when} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_while} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in4} {:close 0, :instruction tag_integer_451} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*times})
Zero cases best program: (integer_add integer_add exec_eq integer_dup exec_dup () integer_stackdepth integer_dup_items integer_lt integer_empty boolean_yank integer_gt exec_when () in1 integer_add tag_integer_663 in2 in3 exec_when (in3 boolean_dup boolean_eq) in3 integer_swap exec_s_when_autoconstructing () (boolean_yank integer_pop) (exec_dup (integer_min integer_dup_times) print_integer integer_max integer_yank exec_s (integer_lt integer_gte) (boolean_invert_second_then_and integer_sub exec_k (exec_yankdup in2) (exec_rot (exec_s (boolean_empty boolean_yankdup boolean_and integer_yank exec_swap (exec_y (integer_gt) boolean_dup_items) (exec_s_when_autoconstructing () (integer_yank) (boolean_empty) integer_dup_times exec_flush boolean_invert_first_then_and exec_when () integer_sub boolean_empty exec_while (exec_dup (exec_swap () (in3 boolean_yankdup in4 tag_integer_451 boolean_flush integer_dec) boolean_yank integer_swap boolean_dup_times print_integer integer_eq exec_do*times ())))) () ()) () ())) ()))
Zero cases best errors: [0 0 1 0 0 1 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 105
Percent parens: 0.295
--- Lexicase Population Statistics ---
Count of elite individuals by case: (201 183 174 463 179 198 427 183 412 185)
Population mean number of elite cases: 2.61
Count of perfect (error zero) individuals by case: (201 183 174 463 179 198 427 183 412 185)
Population mean number of perfect (error zero) cases: 2.61
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_add} {:close 1, :instruction integer_add} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_lt} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_when} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_663} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_eq} {:close 0, :instruction in3} {:close 2, :instruction integer_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 2, :instruction exec_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_yank} {:close 0, :instruction in2} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_while} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction tag_integer_451} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*times})
Best program: (integer_add integer_add exec_eq integer_dup exec_dup () integer_stackdepth integer_dup_items integer_lt integer_empty boolean_yank integer_gt exec_when () in1 tag_integer_663 in2 in3 exec_when (in3 boolean_dup boolean_eq) in3 integer_swap exec_s_when_autoconstructing () (boolean_yank integer_pop) (exec_dup (integer_min integer_dup_times) integer_yank print_integer exec_dup_items) integer_yank exec_s (integer_lt integer_gte) (boolean_invert_second_then_and integer_sub exec_k (exec_yankdup in2) (exec_rot (exec_s (exec_dup_items boolean_empty boolean_yankdup boolean_flush boolean_and exec_swap (in3 integer_gt) (boolean_dup_items) exec_s_when_autoconstructing () (integer_yank) (in2 boolean_empty) integer_dup_times exec_flush boolean_invert_first_then_and exec_when () boolean_empty exec_while (exec_dup (exec_swap () (in3 boolean_yankdup in4 exec_y_when_autoconstructing (in4 tag_integer_451 boolean_flush integer_dec) boolean_yank boolean_stackdepth integer_swap print_integer integer_eq exec_do*times ())))) () ()) () ())) ())
Errors: [0 0 1 0 0 1 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 77
Size: 108
Percent parens: 0.287
--- Population Statistics ---
Average total errors in population: 7.395
Median total errors in population: 9
Error averages by case: (0.799 0.817 0.826 0.537 0.821 0.802 0.573 0.817 0.588 0.815)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 66.899
Average program size in population (points): 92.852
Average percent parens in population: 0.277
Minimum age in population: 9.0
Maximum age in population: 9.0
Average age in population: 9.0
Median age in population: 9.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.009
Error (vector) diversity:			 0.045
Behavioral diversity:				 0.266
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 5743519
--- Timings ---
Current time: 1559594127620 milliseconds
Total Time:          22.0 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        10.9 seconds, 49.3%
Fitness Testing:      7.1 seconds, 32.1%
Report:               4.0 seconds, 18.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 209
Test mean error for best: 0.20900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -74                 | Program output: -74                
Correct output: -85                 | Program output: -85                
Correct output: -100                | Program output: -100               
Correct output: -69                 | Program output: -69                
Correct output: -92                 | Program output: -92                
Correct output: -58                 | Program output: -58                
Correct output: 24                  | Program output: 49                 
Correct output: -57                 | Program output: -57                
Correct output: -90                 | Program output: -24                
Correct output: -21                 | Program output: -21                
Correct output: 23                  | Program output: 23                 
Correct output: 52                  | Program output: 52                 
Correct output: -44                 | Program output: -44                
Correct output: -92                 | Program output: -92                
Correct output: 44                  | Program output: 44                 
Correct output: 31                  | Program output: 48                 
Correct output: 0                   | Program output: 7                  
Correct output: 9                   | Program output: 9                  
Correct output: 5                   | Program output: 5                  
Correct output: 8                   | Program output: 8                  
Correct output: 8                   | Program output: 8                  
Correct output: 18                  | Program output: 18                 
Correct output: 11                  | Program output: 50                 
Correct output: 2                   | Program output: 12                 
Correct output: 18                  | Program output: 40                 
Correct output: 6                   | Program output: 6                  
Correct output: 9                   | Program output: 9                  
Correct output: 62                  | Program output: 74                 
Correct output: 2                   | Program output: 2                  
Correct output: 13                  | Program output: 13                 
Correct output: 23                  | Program output: 23                 
Correct output: 43                  | Program output: 43                 
Correct output: 1                   | Program output: 1                  
Correct output: 1                   | Program output: 1                  
Correct output: 26                  | Program output: 35                 
Correct output: -84                 | Program output: -84                
Correct output: -77                 | Program output: -77                
Correct output: -87                 | Program output: -87                
Correct output: -46                 | Program output: -46                
Correct output: -64                 | Program output: -64                
Correct output: -77                 | Program output: -77                
Correct output: -88                 | Program output: -88                
Correct output: -95                 | Program output: -95                
Correct output: -90                 | Program output: -90                
Correct output: -18                 | Program output: -18                
Correct output: -82                 | Program output: -82                
Correct output: -94                 | Program output: -94                
Correct output: -54                 | Program output: -54                
Correct output: -83                 | Program output: -83                
Correct output: -86                 | Program output: -86                
Correct output: -88                 | Program output: -88                
Correct output: -24                 | Program output: -24                
Correct output: -90                 | Program output: -85                
Correct output: -76                 | Program output: -76                
Correct output: -98                 | Program output: -98                
Correct output: -86                 | Program output: -86                
Correct output: -71                 | Program output: -71                
Correct output: -43                 | Program output: -43                
Correct output: -98                 | Program output: -98                
Correct output: -94                 | Program output: -94                
Correct output: -92                 | Program output: -60                
Correct output: -97                 | Program output: -62                
Correct output: -75                 | Program output: -75                
Correct output: -12                 | Program output: -12                
Correct output: -62                 | Program output: -62                
Correct output: -33                 | Program output: -33                
Correct output: -96                 | Program output: 3                  
Correct output: -69                 | Program output: -64                
Correct output: -77                 | Program output: -77                
Correct output: -97                 | Program output: -97                
Correct output: -71                 | Program output: -71                
Correct output: -92                 | Program output: -92                
Correct output: -96                 | Program output: -96                
Correct output: -55                 | Program output: -55                
Correct output: -82                 | Program output: -82                
Correct output: -80                 | Program output: -80                
Correct output: -99                 | Program output: -74                
Correct output: -92                 | Program output: 22                 
Correct output: -83                 | Program output: -83                
Correct output: -71                 | Program output: -71                
Correct output: -87                 | Program output: -87                
Correct output: -48                 | Program output: -48                
Correct output: -60                 | Program output: -60                
Correct output: -52                 | Program output: -52                
Correct output: -57                 | Program output: -27                
Correct output: 6                   | Program output: 6                  
Correct output: 54                  | Program output: 62                 
Correct output: -16                 | Program output: -16                
Correct output: -64                 | Program output: 21                 
Correct output: -71                 | Program output: -60                
Correct output: -59                 | Program output: -59                
Correct output: -72                 | Program output: -72                
Correct output: -85                 | Program output: -85                
Correct output: -77                 | Program output: -77                
Correct output: -42                 | Program output: -42                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_add} {:close 1, :instruction integer_add} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_lt} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_dup} {:close 1, :instruction exec_when} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup} {:close 2, :instruction integer_swap} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 1, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 1, :instruction integer_div} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_yank} {:close 1, :instruction boolean_rot} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_while} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_swap} {:close 0, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tag_integer_451} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*times})
Lexicase best program: (integer_add integer_add exec_eq integer_dup exec_dup () exec_s (integer_stackdepth integer_dup_items integer_lt) (integer_empty) (boolean_yank) integer_gt integer_dup exec_when () in1 integer_add in2 in3 integer_min in3 boolean_dup boolean_eq in3 boolean_dup integer_swap boolean_yank integer_pop exec_dup (integer_min integer_dup_times) print_integer integer_yank exec_s (integer_div) (integer_gte) (integer_sub exec_k (exec_yankdup in2) (exec_shove () exec_rot (exec_s (boolean_yankdup boolean_empty boolean_yankdup boolean_rot exec_swap (boolean_frominteger integer_gt) (boolean_dup_items) exec_s_when_autoconstructing () (exec_shove () exec_shove (integer_yank) boolean_rot) (boolean_empty) exec_dup_items exec_flush integer_inc exec_shove () boolean_invert_first_then_and boolean_empty exec_while (exec_dup (integer_yank exec_swap () (in4 exec_y_when_autoconstructing (tag_integer_451 boolean_yank integer_swap boolean_invert_second_then_and print_integer boolean_or exec_do*times ()))))) () ()) () ())))
Lexicase best errors: [1 0 0 1 0 0 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 108
Percent parens: 0.306
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_add} {:close 1, :instruction integer_add} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_lt} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_dup} {:close 1, :instruction exec_when} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup} {:close 2, :instruction integer_swap} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 1, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s} {:close 1, :instruction integer_div} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_yank} {:close 1, :instruction boolean_rot} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_while} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_swap} {:close 0, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tag_integer_451} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*times})
Zero cases best program: (integer_add integer_add exec_eq integer_dup exec_dup () exec_s (integer_stackdepth integer_dup_items integer_lt) (integer_empty) (boolean_yank) integer_gt integer_dup exec_when () in1 integer_add in2 in3 integer_min in3 boolean_dup boolean_eq in3 boolean_dup integer_swap boolean_yank integer_pop exec_dup (integer_min integer_dup_times) print_integer integer_yank exec_s (integer_div) (integer_gte) (integer_sub exec_k (exec_yankdup in2) (exec_shove () exec_rot (exec_s (boolean_yankdup boolean_empty boolean_yankdup boolean_rot exec_swap (boolean_frominteger integer_gt) (boolean_dup_items) exec_s_when_autoconstructing () (exec_shove () exec_shove (integer_yank) boolean_rot) (boolean_empty) exec_dup_items exec_flush integer_inc exec_shove () boolean_invert_first_then_and boolean_empty exec_while (exec_dup (integer_yank exec_swap () (in4 exec_y_when_autoconstructing (tag_integer_451 boolean_yank integer_swap boolean_invert_second_then_and print_integer boolean_or exec_do*times ()))))) () ()) () ())))
Zero cases best errors: [1 0 0 1 0 0 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 108
Percent parens: 0.306
--- Lexicase Population Statistics ---
Count of elite individuals by case: (101 168 181 92 247 233 184 199 337 335)
Population mean number of elite cases: 2.08
Count of perfect (error zero) individuals by case: (101 168 181 92 247 233 184 199 337 335)
Population mean number of perfect (error zero) cases: 2.08
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_add} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_lt} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_when} {:close 0, :instruction exec_do*times} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_min} {:close 0, :instruction exec_dup} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 1, :instruction integer_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_empty} {:close 2, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction print_integer})
Best program: (print_integer exec_do*count (integer_add) exec_eq integer_stackdepth integer_dup_items exec_y_when_autoconstructing (boolean_stackdepth exec_yank) integer_lt integer_empty boolean_yank integer_dup integer_gt exec_dup_items exec_when () exec_do*times (in1 boolean_dup boolean_eq) integer_lt exec_if (exec_k_when_autoconstructing (in3 boolean_swap integer_min) (exec_dup (in4 integer_min integer_dup_times) print_boolean boolean_empty print_integer)) (print_integer boolean_dup_times integer_stackdepth integer_yank integer_lt boolean_flush) exec_yankdup exec_rot (exec_s (integer_yankdup boolean_xor exec_swap (exec_yank integer_eq boolean_dup_items) (boolean_invert_first_then_and exec_s_when_autoconstructing () (integer_yank) (integer_flush) integer_dup_times exec_dup (exec_swap () (exec_yank in3 exec_y_when_autoconstructing (boolean_not boolean_eq boolean_yank integer_swap integer_inc print_integer))))) () ()) () ())
Errors: [0 1 0 0 1 0 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 64
Size: 89
Percent parens: 0.281
--- Population Statistics ---
Average total errors in population: 7.923
Median total errors in population: 9
Error averages by case: (0.899 0.832 0.819 0.908 0.753 0.767 0.816 0.801 0.663 0.665)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 69.406
Average program size in population (points): 96.926
Average percent parens in population: 0.282
Minimum age in population: 10.0
Maximum age in population: 10.0
Average age in population: 10.0
Median age in population: 10.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.008
Error (vector) diversity:			 0.045
Behavioral diversity:				 0.303
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 6245307
--- Timings ---
Current time: 1559594129792 milliseconds
Total Time:          24.1 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        12.0 seconds, 49.7%
Fitness Testing:      7.6 seconds, 31.7%
Report:               4.4 seconds, 18.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 204
Test mean error for best: 0.20400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -74                 | Program output: -74                
Correct output: -85                 | Program output: -85                
Correct output: -100                | Program output: -100               
Correct output: -69                 | Program output: -69                
Correct output: -92                 | Program output: -92                
Correct output: -58                 | Program output: -58                
Correct output: 24                  | Program output: 24                 
Correct output: -57                 | Program output: -57                
Correct output: -90                 | Program output: -90                
Correct output: -21                 | Program output: -21                
Correct output: 23                  | Program output: 23                 
Correct output: 52                  | Program output: 52                 
Correct output: -44                 | Program output: -44                
Correct output: -92                 | Program output: -92                
Correct output: 44                  | Program output: 44                 
Correct output: 31                  | Program output: 31                 
Correct output: 0                   | Program output: 0                  
Correct output: 9                   | Program output: 9                  
Correct output: 5                   | Program output: 5                  
Correct output: 8                   | Program output: 8                  
Correct output: 8                   | Program output: 8                  
Correct output: 18                  | Program output: 25                 
Correct output: 11                  | Program output: 11                 
Correct output: 2                   | Program output: 2                  
Correct output: 18                  | Program output: 18                 
Correct output: 6                   | Program output: 6                  
Correct output: 9                   | Program output: 9                  
Correct output: 62                  | Program output: 62                 
Correct output: 2                   | Program output: 7                  
Correct output: 13                  | Program output: 13                 
Correct output: 23                  | Program output: 23                 
Correct output: 43                  | Program output: 43                 
Correct output: 1                   | Program output: 42                 
Correct output: 1                   | Program output: 1                  
Correct output: 26                  | Program output: 26                 
Correct output: -84                 | Program output: 53                 
Correct output: -77                 | Program output: -77                
Correct output: -87                 | Program output: -72                
Correct output: -46                 | Program output: -46                
Correct output: -64                 | Program output: -64                
Correct output: -77                 | Program output: -77                
Correct output: -88                 | Program output: -41                
Correct output: -95                 | Program output: -95                
Correct output: -90                 | Program output: -57                
Correct output: -18                 | Program output: -18                
Correct output: -82                 | Program output: -82                
Correct output: -94                 | Program output: -38                
Correct output: -54                 | Program output: -54                
Correct output: -83                 | Program output: 59                 
Correct output: -86                 | Program output: -71                
Correct output: -88                 | Program output: -88                
Correct output: -24                 | Program output: -24                
Correct output: -90                 | Program output: -90                
Correct output: -76                 | Program output: -76                
Correct output: -98                 | Program output: -98                
Correct output: -86                 | Program output: -86                
Correct output: -71                 | Program output: 37                 
Correct output: -43                 | Program output: -24                
Correct output: -98                 | Program output: -98                
Correct output: -94                 | Program output: -94                
Correct output: -92                 | Program output: -92                
Correct output: -97                 | Program output: -97                
Correct output: -75                 | Program output: -50                
Correct output: -12                 | Program output: 2                  
Correct output: -62                 | Program output: -62                
Correct output: -33                 | Program output: -33                
Correct output: -96                 | Program output: -96                
Correct output: -69                 | Program output: -69                
Correct output: -77                 | Program output: -61                
Correct output: -97                 | Program output: -53                
Correct output: -71                 | Program output: -71                
Correct output: -92                 | Program output: -92                
Correct output: -96                 | Program output: -89                
Correct output: -55                 | Program output: -55                
Correct output: -82                 | Program output: -67                
Correct output: -80                 | Program output: -80                
Correct output: -99                 | Program output: -99                
Correct output: -92                 | Program output: -92                
Correct output: -83                 | Program output: -83                
Correct output: -71                 | Program output: -71                
Correct output: -87                 | Program output: -87                
Correct output: -48                 | Program output: -48                
Correct output: -60                 | Program output: 69                 
Correct output: -52                 | Program output: -43                
Correct output: -57                 | Program output: -57                
Correct output: 6                   | Program output: 23                 
Correct output: 54                  | Program output: 54                 
Correct output: -16                 | Program output: -6                 
Correct output: -64                 | Program output: -64                
Correct output: -71                 | Program output: -71                
Correct output: -59                 | Program output: 6                  
Correct output: -72                 | Program output: -72                
Correct output: -85                 | Program output: -85                
Correct output: -77                 | Program output: -77                
Correct output: -42                 | Program output: -42                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction print_integer} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_lt} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_when} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction in3} {:close 1, :instruction integer_min} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 1, :instruction integer_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_eq} {:close 0, :instruction in1} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction print_integer})
Lexicase best program: (print_integer integer_add exec_do*count (exec_eq boolean_pop integer_dup integer_stackdepth integer_dup_items integer_lt) integer_empty boolean_yank exec_y_when_autoconstructing (boolean_yank exec_when () integer_rot boolean_dup boolean_eq) in2 exec_if (in3 integer_min) (boolean_yankdup) integer_div in4 integer_min integer_dup_times print_boolean integer_min print_integer exec_do*while (boolean_dup_times exec_yankdup exec_flush integer_rot boolean_dup_times) exec_rot (exec_dup (exec_s (integer_yankdup boolean_empty boolean_yank boolean_xor boolean_not exec_swap (exec_yank integer_eq in1 boolean_dup_items) (integer_yank) integer_dup_times exec_flush boolean_invert_second_then_and exec_flush exec_dup (exec_swap () (in3 integer_swap exec_eq print_integer))) () ())) () ())
Lexicase best errors: [0 0 0 0 0 0 0 0 1 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 78
Percent parens: 0.244
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction print_integer} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_lt} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_when} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction in3} {:close 1, :instruction integer_min} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 1, :instruction integer_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_eq} {:close 0, :instruction in1} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction print_integer})
Zero cases best program: (print_integer integer_add exec_do*count (exec_eq boolean_pop integer_dup integer_stackdepth integer_dup_items integer_lt) integer_empty boolean_yank exec_y_when_autoconstructing (boolean_yank exec_when () integer_rot boolean_dup boolean_eq) in2 exec_if (in3 integer_min) (boolean_yankdup) integer_div in4 integer_min integer_dup_times print_boolean integer_min print_integer exec_do*while (boolean_dup_times exec_yankdup exec_flush integer_rot boolean_dup_times) exec_rot (exec_dup (exec_s (integer_yankdup boolean_empty boolean_yank boolean_xor boolean_not exec_swap (exec_yank integer_eq in1 boolean_dup_items) (integer_yank) integer_dup_times exec_flush boolean_invert_second_then_and exec_flush exec_dup (exec_swap () (in3 integer_swap exec_eq print_integer))) () ())) () ())
Zero cases best errors: [0 0 0 0 0 0 0 0 1 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 78
Percent parens: 0.244
--- Lexicase Population Statistics ---
Count of elite individuals by case: (155 255 140 254 238 155 236 155 249 253)
Population mean number of elite cases: 2.09
Count of perfect (error zero) individuals by case: (155 255 140 254 238 155 236 155 249 253)
Population mean number of perfect (error zero) cases: 2.09
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction print_integer} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_lt} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_when} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction in3} {:close 1, :instruction integer_min} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 1, :instruction integer_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_eq} {:close 0, :instruction in1} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction print_integer})
Best program: (print_integer integer_add exec_do*count (exec_eq boolean_pop integer_dup integer_stackdepth integer_dup_items integer_lt) integer_empty boolean_yank exec_y_when_autoconstructing (boolean_yank exec_when () integer_rot boolean_dup boolean_eq) in2 exec_if (in3 integer_min) (boolean_yankdup) integer_div in4 integer_min integer_dup_times print_boolean integer_min print_integer exec_do*while (boolean_dup_times exec_yankdup exec_flush integer_rot boolean_dup_times) exec_rot (exec_dup (exec_s (integer_yankdup boolean_empty boolean_yank boolean_xor boolean_not exec_swap (exec_yank integer_eq in1 boolean_dup_items) (integer_yank) integer_dup_times exec_flush boolean_invert_second_then_and exec_flush exec_dup (exec_swap () (in3 integer_swap exec_eq print_integer))) () ())) () ())
Errors: [0 0 0 0 0 0 0 0 1 0]
Total: 1
Mean: 0.1
Genome size: 59
Size: 78
Percent parens: 0.244
--- Population Statistics ---
Average total errors in population: 7.91
Median total errors in population: 9
Error averages by case: (0.845 0.745 0.86 0.746 0.762 0.845 0.764 0.845 0.751 0.747)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 69.343
Average program size in population (points): 96.622
Average percent parens in population: 0.280
Minimum age in population: 11.0
Maximum age in population: 11.0
Average age in population: 11.0
Median age in population: 11.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.01
Error (vector) diversity:			 0.042
Behavioral diversity:				 0.282
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 6767959
--- Timings ---
Current time: 1559594131751 milliseconds
Total Time:          26.3 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        13.1 seconds, 49.9%
Fitness Testing:      8.2 seconds, 31.1%
Report:               4.9 seconds, 18.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 0
Test mean error for best: 0.00000
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -74                 | Program output: -74                
Correct output: -85                 | Program output: -85                
Correct output: -100                | Program output: -100               
Correct output: -69                 | Program output: -69                
Correct output: -92                 | Program output: -92                
Correct output: -58                 | Program output: -58                
Correct output: 24                  | Program output: 24                 
Correct output: -57                 | Program output: -57                
Correct output: -90                 | Program output: -90                
Correct output: -21                 | Program output: -21                
Correct output: 23                  | Program output: 23                 
Correct output: 52                  | Program output: 52                 
Correct output: -44                 | Program output: -44                
Correct output: -92                 | Program output: -92                
Correct output: 44                  | Program output: 44                 
Correct output: 31                  | Program output: 31                 
Correct output: 0                   | Program output: 0                  
Correct output: 9                   | Program output: 9                  
Correct output: 5                   | Program output: 5                  
Correct output: 8                   | Program output: 8                  
Correct output: 8                   | Program output: 8                  
Correct output: 18                  | Program output: 18                 
Correct output: 11                  | Program output: 11                 
Correct output: 2                   | Program output: 2                  
Correct output: 18                  | Program output: 18                 
Correct output: 6                   | Program output: 6                  
Correct output: 9                   | Program output: 9                  
Correct output: 62                  | Program output: 62                 
Correct output: 2                   | Program output: 2                  
Correct output: 13                  | Program output: 13                 
Correct output: 23                  | Program output: 23                 
Correct output: 43                  | Program output: 43                 
Correct output: 1                   | Program output: 1                  
Correct output: 1                   | Program output: 1                  
Correct output: 26                  | Program output: 26                 
Correct output: -84                 | Program output: -84                
Correct output: -77                 | Program output: -77                
Correct output: -87                 | Program output: -87                
Correct output: -46                 | Program output: -46                
Correct output: -64                 | Program output: -64                
Correct output: -77                 | Program output: -77                
Correct output: -88                 | Program output: -88                
Correct output: -95                 | Program output: -95                
Correct output: -90                 | Program output: -90                
Correct output: -18                 | Program output: -18                
Correct output: -82                 | Program output: -82                
Correct output: -94                 | Program output: -94                
Correct output: -54                 | Program output: -54                
Correct output: -83                 | Program output: -83                
Correct output: -86                 | Program output: -86                
Correct output: -88                 | Program output: -88                
Correct output: -24                 | Program output: -24                
Correct output: -90                 | Program output: -90                
Correct output: -76                 | Program output: -76                
Correct output: -98                 | Program output: -98                
Correct output: -86                 | Program output: -86                
Correct output: -71                 | Program output: -71                
Correct output: -43                 | Program output: -43                
Correct output: -98                 | Program output: -98                
Correct output: -94                 | Program output: -94                
Correct output: -92                 | Program output: -92                
Correct output: -97                 | Program output: -97                
Correct output: -75                 | Program output: -75                
Correct output: -12                 | Program output: -12                
Correct output: -62                 | Program output: -62                
Correct output: -33                 | Program output: -33                
Correct output: -96                 | Program output: -96                
Correct output: -69                 | Program output: -69                
Correct output: -77                 | Program output: -77                
Correct output: -97                 | Program output: -97                
Correct output: -71                 | Program output: -71                
Correct output: -92                 | Program output: -92                
Correct output: -96                 | Program output: -96                
Correct output: -55                 | Program output: -55                
Correct output: -82                 | Program output: -82                
Correct output: -80                 | Program output: -80                
Correct output: -99                 | Program output: -99                
Correct output: -92                 | Program output: -92                
Correct output: -83                 | Program output: -83                
Correct output: -71                 | Program output: -71                
Correct output: -87                 | Program output: -87                
Correct output: -48                 | Program output: -48                
Correct output: -60                 | Program output: -60                
Correct output: -52                 | Program output: -52                
Correct output: -57                 | Program output: -57                
Correct output: 6                   | Program output: 6                  
Correct output: 54                  | Program output: 54                 
Correct output: -16                 | Program output: -16                
Correct output: -64                 | Program output: -64                
Correct output: -71                 | Program output: -71                
Correct output: -59                 | Program output: -59                
Correct output: -72                 | Program output: -72                
Correct output: -85                 | Program output: -85                
Correct output: -77                 | Program output: -77                
Correct output: -42                 | Program output: -42                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction print_integer} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_pop} {:close 2, :instruction integer_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction -1} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_when} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_eq} {:close 0, :instruction in2} {:close 2, :instruction in1} {:close 0, :instruction exec_if} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 1, :instruction integer_min} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 1, :instruction integer_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_exec_967} {:close 1, :instruction tagged_284} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction print_integer})
Lexicase best program: (print_integer integer_add exec_do*count (exec_eq boolean_pop integer_swap) integer_dup integer_stackdepth -1 integer_dup_items integer_lt integer_gte integer_empty boolean_yank exec_y_when_autoconstructing (boolean_yank exec_when () integer_rot boolean_dup boolean_eq) in2 in1 exec_if (in3 integer_min integer_min) (boolean_yankdup) integer_div in4 integer_min integer_dup_times print_boolean print_integer exec_do*while (boolean_dup_times exec_yankdup) exec_yankdup exec_flush integer_rot boolean_dup_times exec_rot (exec_dup (exec_s (exec_k (integer_yankdup boolean_empty integer_pop boolean_yank boolean_xor tag_exec_967 (tagged_284) exec_swap (exec_yank integer_eq boolean_dup_items) (integer_yank) exec_y_when_autoconstructing (integer_dup_times exec_flush boolean_pop boolean_invert_second_then_and exec_flush exec_dup (exec_swap () (integer_swap exec_eq print_integer)))) ()) () ())) () ())
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 90
Percent parens: 0.256
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction print_integer} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_pop} {:close 2, :instruction integer_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction -1} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_when} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_eq} {:close 0, :instruction in2} {:close 2, :instruction in1} {:close 0, :instruction exec_if} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 1, :instruction integer_min} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 1, :instruction integer_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_exec_967} {:close 1, :instruction tagged_284} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction print_integer})
Zero cases best program: (print_integer integer_add exec_do*count (exec_eq boolean_pop integer_swap) integer_dup integer_stackdepth -1 integer_dup_items integer_lt integer_gte integer_empty boolean_yank exec_y_when_autoconstructing (boolean_yank exec_when () integer_rot boolean_dup boolean_eq) in2 in1 exec_if (in3 integer_min integer_min) (boolean_yankdup) integer_div in4 integer_min integer_dup_times print_boolean print_integer exec_do*while (boolean_dup_times exec_yankdup) exec_yankdup exec_flush integer_rot boolean_dup_times exec_rot (exec_dup (exec_s (exec_k (integer_yankdup boolean_empty integer_pop boolean_yank boolean_xor tag_exec_967 (tagged_284) exec_swap (exec_yank integer_eq boolean_dup_items) (integer_yank) exec_y_when_autoconstructing (integer_dup_times exec_flush boolean_pop boolean_invert_second_then_and exec_flush exec_dup (exec_swap () (integer_swap exec_eq print_integer)))) ()) () ())) () ())
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 90
Percent parens: 0.256
--- Lexicase Population Statistics ---
Count of elite individuals by case: (125 481 278 341 124 125 279 328 124 480)
Population mean number of elite cases: 2.68
Count of perfect (error zero) individuals by case: (125 481 278 341 124 125 279 328 124 480)
Population mean number of perfect (error zero) cases: 2.68
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction print_integer} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_pop} {:close 2, :instruction integer_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction -1} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_when} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_eq} {:close 0, :instruction in2} {:close 2, :instruction in1} {:close 0, :instruction exec_if} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 1, :instruction integer_min} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 1, :instruction integer_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_exec_967} {:close 1, :instruction tagged_284} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction print_integer})
Best program: (print_integer integer_add exec_do*count (exec_eq boolean_pop integer_swap) integer_dup integer_stackdepth -1 integer_dup_items integer_lt integer_gte integer_empty boolean_yank exec_y_when_autoconstructing (boolean_yank exec_when () integer_rot boolean_dup boolean_eq) in2 in1 exec_if (in3 integer_min integer_min) (boolean_yankdup) integer_div in4 integer_min integer_dup_times print_boolean print_integer exec_do*while (boolean_dup_times exec_yankdup) exec_yankdup exec_flush integer_rot boolean_dup_times exec_rot (exec_dup (exec_s (exec_k (integer_yankdup boolean_empty integer_pop boolean_yank boolean_xor tag_exec_967 (tagged_284) exec_swap (exec_yank integer_eq boolean_dup_items) (integer_yank) exec_y_when_autoconstructing (integer_dup_times exec_flush boolean_pop boolean_invert_second_then_and exec_flush exec_dup (exec_swap () (integer_swap exec_eq print_integer)))) ()) () ())) () ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 67
Size: 90
Percent parens: 0.256
--- Population Statistics ---
Average total errors in population: 7.315
Median total errors in population: 9
Error averages by case: (0.875 0.519 0.722 0.659 0.876 0.875 0.721 0.672 0.876 0.52)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 63.93
Average program size in population (points): 87.185
Average percent parens in population: 0.262
Minimum age in population: 12.0
Maximum age in population: 12.0
Average age in population: 12.0
Median age in population: 12.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.011
Error (vector) diversity:			 0.032
Behavioral diversity:				 0.241
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 7186295
--- Timings ---
Current time: 1559594133660 milliseconds
Total Time:          28.1 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        14.2 seconds, 50.6%
Fitness Testing:      8.6 seconds, 30.6%
Report:               5.2 seconds, 18.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 12
Successful program: (print_integer integer_add exec_do*count (exec_eq boolean_pop integer_swap) integer_dup integer_stackdepth -1 integer_dup_items integer_lt integer_gte integer_empty boolean_yank exec_y_when_autoconstructing (boolean_yank exec_when () integer_rot boolean_dup boolean_eq) in2 in1 exec_if (in3 integer_min integer_min) (boolean_yankdup) integer_div in4 integer_min integer_dup_times print_boolean print_integer exec_do*while (boolean_dup_times exec_yankdup) exec_yankdup exec_flush integer_rot boolean_dup_times exec_rot (exec_dup (exec_s (exec_k (integer_yankdup boolean_empty integer_pop boolean_yank boolean_xor tag_exec_967 (tagged_284) exec_swap (exec_yank integer_eq boolean_dup_items) (integer_yank) exec_y_when_autoconstructing (integer_dup_times exec_flush boolean_pop boolean_invert_second_then_and exec_flush exec_dup (exec_swap () (integer_swap exec_eq print_integer)))) ()) () ())) () ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 90


Auto-simplifying with starting size: 90
step: 0
program: (print_integer integer_add exec_do*count (exec_eq boolean_pop integer_swap) integer_dup integer_stackdepth -1 integer_dup_items integer_lt integer_gte integer_empty boolean_yank exec_y_when_autoconstructing (boolean_yank exec_when () integer_rot boolean_dup boolean_eq) in2 in1 exec_if (in3 integer_min integer_min) (boolean_yankdup) integer_div in4 integer_min integer_dup_times print_boolean print_integer exec_do*while (boolean_dup_times exec_yankdup) exec_yankdup exec_flush integer_rot boolean_dup_times exec_rot (exec_dup (exec_s (exec_k (integer_yankdup boolean_empty integer_pop boolean_yank boolean_xor tag_exec_967 (tagged_284) exec_swap (exec_yank integer_eq boolean_dup_items) (integer_yank) exec_y_when_autoconstructing (integer_dup_times exec_flush boolean_pop boolean_invert_second_then_and exec_flush exec_dup (exec_swap () (integer_swap exec_eq print_integer)))) ()) () ())) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 90

step: 500
program: (print_integer integer_add exec_do*count (exec_eq boolean_pop integer_swap) integer_dup integer_stackdepth -1 integer_dup_items integer_lt integer_gte integer_empty boolean_yank exec_y_when_autoconstructing (boolean_yank exec_when () integer_rot boolean_dup boolean_eq) in2 in1 exec_if (in3 integer_min integer_min) (boolean_yankdup) integer_div in4 integer_min integer_dup_times print_boolean print_integer exec_do*while (boolean_dup_times exec_yankdup) exec_yankdup exec_flush integer_rot boolean_dup_times exec_rot (exec_dup (exec_s (exec_k (integer_yankdup boolean_empty integer_pop boolean_yank boolean_xor tag_exec_967 (tagged_284) exec_swap (exec_yank integer_eq boolean_dup_items) (integer_yank) exec_y_when_autoconstructing (integer_dup_times exec_flush boolean_pop boolean_invert_second_then_and exec_flush exec_dup (exec_swap () (integer_swap exec_eq print_integer)))) ()) () ())) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 90

step: 1000
program: (print_integer integer_add exec_do*count (exec_eq boolean_pop integer_swap) integer_dup integer_stackdepth -1 integer_dup_items integer_lt integer_gte integer_empty boolean_yank exec_y_when_autoconstructing (boolean_yank exec_when () integer_rot boolean_dup boolean_eq) in2 in1 exec_if (in3 integer_min integer_min) (boolean_yankdup) integer_div in4 integer_min integer_dup_times print_boolean print_integer exec_do*while (boolean_dup_times exec_yankdup) exec_yankdup exec_flush integer_rot boolean_dup_times exec_rot (exec_dup (exec_s (exec_k (integer_yankdup boolean_empty integer_pop boolean_yank boolean_xor tag_exec_967 (tagged_284) exec_swap (exec_yank integer_eq boolean_dup_items) (integer_yank) exec_y_when_autoconstructing (integer_dup_times exec_flush boolean_pop boolean_invert_second_then_and exec_flush exec_dup (exec_swap () (integer_swap exec_eq print_integer)))) ()) () ())) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 90

step: 1500
program: (print_integer integer_add exec_do*count (exec_eq boolean_pop integer_swap) integer_dup integer_stackdepth -1 integer_dup_items integer_lt integer_gte integer_empty boolean_yank exec_y_when_autoconstructing (boolean_yank exec_when () integer_rot boolean_dup boolean_eq) in2 in1 exec_if (in3 integer_min integer_min) (boolean_yankdup) integer_div in4 integer_min integer_dup_times print_boolean print_integer exec_do*while (boolean_dup_times exec_yankdup) exec_yankdup exec_flush integer_rot boolean_dup_times exec_rot (exec_dup (exec_s (exec_k (integer_yankdup boolean_empty integer_pop boolean_yank boolean_xor tag_exec_967 (tagged_284) exec_swap (exec_yank integer_eq boolean_dup_items) (integer_yank) exec_y_when_autoconstructing (integer_dup_times exec_flush boolean_pop boolean_invert_second_then_and exec_flush exec_dup (exec_swap () (integer_swap exec_eq print_integer)))) ()) () ())) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 90

step: 2000
program: (print_integer integer_add exec_do*count (exec_eq boolean_pop integer_swap) integer_dup integer_stackdepth -1 integer_dup_items integer_lt integer_gte integer_empty boolean_yank exec_y_when_autoconstructing (boolean_yank exec_when () integer_rot boolean_dup boolean_eq) in2 in1 exec_if (in3 integer_min integer_min) (boolean_yankdup) integer_div in4 integer_min integer_dup_times print_boolean print_integer exec_do*while (boolean_dup_times exec_yankdup) exec_yankdup exec_flush integer_rot boolean_dup_times exec_rot (exec_dup (exec_s (exec_k (integer_yankdup boolean_empty integer_pop boolean_yank boolean_xor tag_exec_967 (tagged_284) exec_swap (exec_yank integer_eq boolean_dup_items) (integer_yank) exec_y_when_autoconstructing (integer_dup_times exec_flush boolean_pop boolean_invert_second_then_and exec_flush exec_dup (exec_swap () (integer_swap exec_eq print_integer)))) ()) () ())) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 90

step: 2500
program: (print_integer integer_add exec_do*count (exec_eq boolean_pop integer_swap) integer_dup integer_stackdepth -1 integer_dup_items integer_lt integer_gte integer_empty boolean_yank exec_y_when_autoconstructing (boolean_yank exec_when () integer_rot boolean_dup boolean_eq) in2 in1 exec_if (in3 integer_min integer_min) (boolean_yankdup) integer_div in4 integer_min integer_dup_times print_boolean print_integer exec_do*while (boolean_dup_times exec_yankdup) exec_yankdup exec_flush integer_rot boolean_dup_times exec_rot (exec_dup (exec_s (exec_k (integer_yankdup boolean_empty integer_pop boolean_yank boolean_xor tag_exec_967 (tagged_284) exec_swap (exec_yank integer_eq boolean_dup_items) (integer_yank) exec_y_when_autoconstructing (integer_dup_times exec_flush boolean_pop boolean_invert_second_then_and exec_flush exec_dup (exec_swap () (integer_swap exec_eq print_integer)))) ()) () ())) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 90

step: 3000
program: (print_integer integer_add exec_do*count (exec_eq boolean_pop integer_swap) integer_dup integer_stackdepth -1 integer_dup_items integer_lt integer_gte integer_empty boolean_yank exec_y_when_autoconstructing (boolean_yank exec_when () integer_rot boolean_dup boolean_eq) in2 in1 exec_if (in3 integer_min integer_min) (boolean_yankdup) integer_div in4 integer_min integer_dup_times print_boolean print_integer exec_do*while (boolean_dup_times exec_yankdup) exec_yankdup exec_flush integer_rot boolean_dup_times exec_rot (exec_dup (exec_s (exec_k (integer_yankdup boolean_empty integer_pop boolean_yank boolean_xor tag_exec_967 (tagged_284) exec_swap (exec_yank integer_eq boolean_dup_items) (integer_yank) exec_y_when_autoconstructing (integer_dup_times exec_flush boolean_pop boolean_invert_second_then_and exec_flush exec_dup (exec_swap () (integer_swap exec_eq print_integer)))) ()) () ())) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 90

step: 3500
program: (print_integer integer_add exec_do*count (exec_eq boolean_pop integer_swap) integer_dup integer_stackdepth -1 integer_dup_items integer_lt integer_gte integer_empty boolean_yank exec_y_when_autoconstructing (boolean_yank exec_when () integer_rot boolean_dup boolean_eq) in2 in1 exec_if (in3 integer_min integer_min) (boolean_yankdup) integer_div in4 integer_min integer_dup_times print_boolean print_integer exec_do*while (boolean_dup_times exec_yankdup) exec_yankdup exec_flush integer_rot boolean_dup_times exec_rot (exec_dup (exec_s (exec_k (integer_yankdup boolean_empty integer_pop boolean_yank boolean_xor tag_exec_967 (tagged_284) exec_swap (exec_yank integer_eq boolean_dup_items) (integer_yank) exec_y_when_autoconstructing (integer_dup_times exec_flush boolean_pop boolean_invert_second_then_and exec_flush exec_dup (exec_swap () (integer_swap exec_eq print_integer)))) ()) () ())) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 90

step: 4000
program: (print_integer integer_add exec_do*count (exec_eq boolean_pop integer_swap) integer_dup integer_stackdepth -1 integer_dup_items integer_lt integer_gte integer_empty boolean_yank exec_y_when_autoconstructing (boolean_yank exec_when () integer_rot boolean_dup boolean_eq) in2 in1 exec_if (in3 integer_min integer_min) (boolean_yankdup) integer_div in4 integer_min integer_dup_times print_boolean print_integer exec_do*while (boolean_dup_times exec_yankdup) exec_yankdup exec_flush integer_rot boolean_dup_times exec_rot (exec_dup (exec_s (exec_k (integer_yankdup boolean_empty integer_pop boolean_yank boolean_xor tag_exec_967 (tagged_284) exec_swap (exec_yank integer_eq boolean_dup_items) (integer_yank) exec_y_when_autoconstructing (integer_dup_times exec_flush boolean_pop boolean_invert_second_then_and exec_flush exec_dup (exec_swap () (integer_swap exec_eq print_integer)))) ()) () ())) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 90

step: 4500
program: (print_integer integer_add exec_do*count (exec_eq boolean_pop integer_swap) integer_dup integer_stackdepth -1 integer_dup_items integer_lt integer_gte integer_empty boolean_yank exec_y_when_autoconstructing (boolean_yank exec_when () integer_rot boolean_dup boolean_eq) in2 in1 exec_if (in3 integer_min integer_min) (boolean_yankdup) integer_div in4 integer_min integer_dup_times print_boolean print_integer exec_do*while (boolean_dup_times exec_yankdup) exec_yankdup exec_flush integer_rot boolean_dup_times exec_rot (exec_dup (exec_s (exec_k (integer_yankdup boolean_empty integer_pop boolean_yank boolean_xor tag_exec_967 (tagged_284) exec_swap (exec_yank integer_eq boolean_dup_items) (integer_yank) exec_y_when_autoconstructing (integer_dup_times exec_flush boolean_pop boolean_invert_second_then_and exec_flush exec_dup (exec_swap () (integer_swap exec_eq print_integer)))) ()) () ())) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 90

step: 5000
program: (print_integer integer_add exec_do*count (exec_eq boolean_pop integer_swap) integer_dup integer_stackdepth -1 integer_dup_items integer_lt integer_gte integer_empty boolean_yank exec_y_when_autoconstructing (boolean_yank exec_when () integer_rot boolean_dup boolean_eq) in2 in1 exec_if (in3 integer_min integer_min) (boolean_yankdup) integer_div in4 integer_min integer_dup_times print_boolean print_integer exec_do*while (boolean_dup_times exec_yankdup) exec_yankdup exec_flush integer_rot boolean_dup_times exec_rot (exec_dup (exec_s (exec_k (integer_yankdup boolean_empty integer_pop boolean_yank boolean_xor tag_exec_967 (tagged_284) exec_swap (exec_yank integer_eq boolean_dup_items) (integer_yank) exec_y_when_autoconstructing (integer_dup_times exec_flush boolean_pop boolean_invert_second_then_and exec_flush exec_dup (exec_swap () (integer_swap exec_eq print_integer)))) ()) () ())) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 90

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 0
Test mean error for best: 0.00000
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -74                 | Program output: -74                
Correct output: -85                 | Program output: -85                
Correct output: -100                | Program output: -100               
Correct output: -69                 | Program output: -69                
Correct output: -92                 | Program output: -92                
Correct output: -58                 | Program output: -58                
Correct output: 24                  | Program output: 24                 
Correct output: -57                 | Program output: -57                
Correct output: -90                 | Program output: -90                
Correct output: -21                 | Program output: -21                
Correct output: 23                  | Program output: 23                 
Correct output: 52                  | Program output: 52                 
Correct output: -44                 | Program output: -44                
Correct output: -92                 | Program output: -92                
Correct output: 44                  | Program output: 44                 
Correct output: 31                  | Program output: 31                 
Correct output: 0                   | Program output: 0                  
Correct output: 9                   | Program output: 9                  
Correct output: 5                   | Program output: 5                  
Correct output: 8                   | Program output: 8                  
Correct output: 8                   | Program output: 8                  
Correct output: 18                  | Program output: 18                 
Correct output: 11                  | Program output: 11                 
Correct output: 2                   | Program output: 2                  
Correct output: 18                  | Program output: 18                 
Correct output: 6                   | Program output: 6                  
Correct output: 9                   | Program output: 9                  
Correct output: 62                  | Program output: 62                 
Correct output: 2                   | Program output: 2                  
Correct output: 13                  | Program output: 13                 
Correct output: 23                  | Program output: 23                 
Correct output: 43                  | Program output: 43                 
Correct output: 1                   | Program output: 1                  
Correct output: 1                   | Program output: 1                  
Correct output: 26                  | Program output: 26                 
Correct output: -84                 | Program output: -84                
Correct output: -77                 | Program output: -77                
Correct output: -87                 | Program output: -87                
Correct output: -46                 | Program output: -46                
Correct output: -64                 | Program output: -64                
Correct output: -77                 | Program output: -77                
Correct output: -88                 | Program output: -88                
Correct output: -95                 | Program output: -95                
Correct output: -90                 | Program output: -90                
Correct output: -18                 | Program output: -18                
Correct output: -82                 | Program output: -82                
Correct output: -94                 | Program output: -94                
Correct output: -54                 | Program output: -54                
Correct output: -83                 | Program output: -83                
Correct output: -86                 | Program output: -86                
Correct output: -88                 | Program output: -88                
Correct output: -24                 | Program output: -24                
Correct output: -90                 | Program output: -90                
Correct output: -76                 | Program output: -76                
Correct output: -98                 | Program output: -98                
Correct output: -86                 | Program output: -86                
Correct output: -71                 | Program output: -71                
Correct output: -43                 | Program output: -43                
Correct output: -98                 | Program output: -98                
Correct output: -94                 | Program output: -94                
Correct output: -92                 | Program output: -92                
Correct output: -97                 | Program output: -97                
Correct output: -75                 | Program output: -75                
Correct output: -12                 | Program output: -12                
Correct output: -62                 | Program output: -62                
Correct output: -33                 | Program output: -33                
Correct output: -96                 | Program output: -96                
Correct output: -69                 | Program output: -69                
Correct output: -77                 | Program output: -77                
Correct output: -97                 | Program output: -97                
Correct output: -71                 | Program output: -71                
Correct output: -92                 | Program output: -92                
Correct output: -96                 | Program output: -96                
Correct output: -55                 | Program output: -55                
Correct output: -82                 | Program output: -82                
Correct output: -80                 | Program output: -80                
Correct output: -99                 | Program output: -99                
Correct output: -92                 | Program output: -92                
Correct output: -83                 | Program output: -83                
Correct output: -71                 | Program output: -71                
Correct output: -87                 | Program output: -87                
Correct output: -48                 | Program output: -48                
Correct output: -60                 | Program output: -60                
Correct output: -52                 | Program output: -52                
Correct output: -57                 | Program output: -57                
Correct output: 6                   | Program output: 6                  
Correct output: 54                  | Program output: 54                 
Correct output: -16                 | Program output: -16                
Correct output: -64                 | Program output: -64                
Correct output: -71                 | Program output: -71                
Correct output: -59                 | Program output: -59                
Correct output: -72                 | Program output: -72                
Correct output: -85                 | Program output: -85                
Correct output: -77                 | Program output: -77                
Correct output: -42                 | Program output: -42                
;;******************************
