Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 3000 :genetic-operator-probabilities {:uniform-addition-and-deletion,1.0} :uniform-addition-and-deletion-rate 0.09
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x30b9728f clojush.problems.software.smallest$fn__7461@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@24b8a393]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:uniform-addition-and-deletion 1.0}
max-error = 1
max-generations = 3000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-95 -48 -48 -48] -95] [[18 -44 -44 -44] -44] [[58 58 58 81] 58] [[27 27 -52 27] -52] [[10 -28 10 10] -28] [[-10 8 -10 -10] -10] [[98 98 64 98] 64] [[-82 -82 -82 46] -82] [[-35 -35 -48 -35] -48] [[-17 -55 -55 -55] -55] [(-89 -89 -89 -89) -89] [(65 65 65 65) 65] [(85 85 85 85) 85] [(95 95 95 95) 95] [(-59 -59 -59 -59) -59] [(96 35 59 35) 35] [(98 37 70 94) 37] [(32 65 69 55) 32] [(98 6 28 0) 0] [(69 54 9 1) 1] [(79 35 0 93) 0] [(49 29 84 42) 29] [(29 20 47 81) 20] [(81 16 45 19) 16] [(11 4 29 4) 4] [(53 47 2 94) 2] [(31 79 52 61) 31] [(1 78 27 94) 1] [(29 30 19 44) 19] [(16 11 95 66) 11] [(73 26 31 39) 26] [(78 58 54 82) 54] [(81 24 52 45) 24] [(33 51 97 44) 33] [(6 79 4 30) 4] [(-47 79 -18 -95) -95] [(-23 -65 48 9) -65] [(-57 27 -72 61) -72] [(63 22 89 78) 22] [(90 -63 81 -14) -63] [(-93 8 -53 3) -93] [(-47 38 -3 24) -47] [(-23 -2 24 62) -23] [(67 21 94 -4) -4] [(26 2 -97 -59) -97] [(60 -12 -84 32) -84] [(12 32 47 35) 12] [(-56 90 64 -87) -87] [(59 -2 -47 -20) -47] [(-93 -30 -10 -100) -100] [(29 39 7 58) 7] [(-29 94 -11 -96) -96] [(55 -54 79 38) -54] [(37 -17 43 42) -17] [(91 -44 -6 -94) -94] [(-41 -30 -22 -10) -41] [(29 -67 -39 42) -67] [(22 -13 -81 -25) -81] [(-7 57 -80 -50) -80] [(-33 -31 -17 96) -33] [(-69 -48 41 -96) -96] [(24 15 -38 90) -38] [(-49 -100 34 -46) -100] [(73 15 48 68) 15] [(66 -2 9 90) -2] [(82 -63 -38 -66) -66] [(83 -86 17 99) -86] [(13 56 -39 -89) -89] [(-2 45 -95 35) -95] [(-3 -67 -60 19) -67] [(-65 69 -43 16) -65] [(-36 -91 -7 -76) -91] [(70 38 -43 -78) -78] [(1 -53 70 81) -53] [(-29 -23 30 20) -29] [(-2 93 64 -42) -42] [(-80 -39 -100 -60) -100] [(-96 -89 68 -80) -96] [(-21 44 -43 -61) -61] [(-28 72 -55 -21) -55] [(-92 12 -29 40) -92] [(-23 -7 8 98) -23] [(-100 46 -50 3) -100] [(-90 93 -62 76) -90] [(72 -28 -44 -32) -44] [(-6 -95 37 -58) -95] [(-78 50 -17 -62) -78] [(-88 3 -19 32) -88] [(28 4 -67 4) -67] [(10 81 81 -21) -21] [(45 83 69 34) 34] [(12 39 68 44) 12] [(88 64 -92 -61) -92] [(75 74 59 22) 22] [(-58 18 19 97) -58])
uniform-addition-and-deletion-rate = 0.09
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[-95 -48 -48 -48] -95]
Train Case:   6 | Input/Output: [[18 -44 -44 -44] -44]
Train Case:   7 | Input/Output: [[58 58 58 81] 58]
Train Case:   8 | Input/Output: [[27 27 -52 27] -52]
Train Case:   9 | Input/Output: [[10 -28 10 10] -28]
Train Case:  10 | Input/Output: [[-10 8 -10 -10] -10]
Train Case:  11 | Input/Output: [[98 98 64 98] 64]
Train Case:  12 | Input/Output: [[-82 -82 -82 46] -82]
Train Case:  13 | Input/Output: [[-35 -35 -48 -35] -48]
Train Case:  14 | Input/Output: [[-17 -55 -55 -55] -55]
Train Case:  15 | Input/Output: [(-89 -89 -89 -89) -89]
Train Case:  16 | Input/Output: [(65 65 65 65) 65]
Train Case:  17 | Input/Output: [(85 85 85 85) 85]
Train Case:  18 | Input/Output: [(95 95 95 95) 95]
Train Case:  19 | Input/Output: [(-59 -59 -59 -59) -59]
Train Case:  20 | Input/Output: [(96 35 59 35) 35]
Train Case:  21 | Input/Output: [(98 37 70 94) 37]
Train Case:  22 | Input/Output: [(32 65 69 55) 32]
Train Case:  23 | Input/Output: [(98 6 28 0) 0]
Train Case:  24 | Input/Output: [(69 54 9 1) 1]
Train Case:  25 | Input/Output: [(79 35 0 93) 0]
Train Case:  26 | Input/Output: [(49 29 84 42) 29]
Train Case:  27 | Input/Output: [(29 20 47 81) 20]
Train Case:  28 | Input/Output: [(81 16 45 19) 16]
Train Case:  29 | Input/Output: [(11 4 29 4) 4]
Train Case:  30 | Input/Output: [(53 47 2 94) 2]
Train Case:  31 | Input/Output: [(31 79 52 61) 31]
Train Case:  32 | Input/Output: [(1 78 27 94) 1]
Train Case:  33 | Input/Output: [(29 30 19 44) 19]
Train Case:  34 | Input/Output: [(16 11 95 66) 11]
Train Case:  35 | Input/Output: [(73 26 31 39) 26]
Train Case:  36 | Input/Output: [(78 58 54 82) 54]
Train Case:  37 | Input/Output: [(81 24 52 45) 24]
Train Case:  38 | Input/Output: [(33 51 97 44) 33]
Train Case:  39 | Input/Output: [(6 79 4 30) 4]
Train Case:  40 | Input/Output: [(-47 79 -18 -95) -95]
Train Case:  41 | Input/Output: [(-23 -65 48 9) -65]
Train Case:  42 | Input/Output: [(-57 27 -72 61) -72]
Train Case:  43 | Input/Output: [(63 22 89 78) 22]
Train Case:  44 | Input/Output: [(90 -63 81 -14) -63]
Train Case:  45 | Input/Output: [(-93 8 -53 3) -93]
Train Case:  46 | Input/Output: [(-47 38 -3 24) -47]
Train Case:  47 | Input/Output: [(-23 -2 24 62) -23]
Train Case:  48 | Input/Output: [(67 21 94 -4) -4]
Train Case:  49 | Input/Output: [(26 2 -97 -59) -97]
Train Case:  50 | Input/Output: [(60 -12 -84 32) -84]
Train Case:  51 | Input/Output: [(12 32 47 35) 12]
Train Case:  52 | Input/Output: [(-56 90 64 -87) -87]
Train Case:  53 | Input/Output: [(59 -2 -47 -20) -47]
Train Case:  54 | Input/Output: [(-93 -30 -10 -100) -100]
Train Case:  55 | Input/Output: [(29 39 7 58) 7]
Train Case:  56 | Input/Output: [(-29 94 -11 -96) -96]
Train Case:  57 | Input/Output: [(55 -54 79 38) -54]
Train Case:  58 | Input/Output: [(37 -17 43 42) -17]
Train Case:  59 | Input/Output: [(91 -44 -6 -94) -94]
Train Case:  60 | Input/Output: [(-41 -30 -22 -10) -41]
Train Case:  61 | Input/Output: [(29 -67 -39 42) -67]
Train Case:  62 | Input/Output: [(22 -13 -81 -25) -81]
Train Case:  63 | Input/Output: [(-7 57 -80 -50) -80]
Train Case:  64 | Input/Output: [(-33 -31 -17 96) -33]
Train Case:  65 | Input/Output: [(-69 -48 41 -96) -96]
Train Case:  66 | Input/Output: [(24 15 -38 90) -38]
Train Case:  67 | Input/Output: [(-49 -100 34 -46) -100]
Train Case:  68 | Input/Output: [(73 15 48 68) 15]
Train Case:  69 | Input/Output: [(66 -2 9 90) -2]
Train Case:  70 | Input/Output: [(82 -63 -38 -66) -66]
Train Case:  71 | Input/Output: [(83 -86 17 99) -86]
Train Case:  72 | Input/Output: [(13 56 -39 -89) -89]
Train Case:  73 | Input/Output: [(-2 45 -95 35) -95]
Train Case:  74 | Input/Output: [(-3 -67 -60 19) -67]
Train Case:  75 | Input/Output: [(-65 69 -43 16) -65]
Train Case:  76 | Input/Output: [(-36 -91 -7 -76) -91]
Train Case:  77 | Input/Output: [(70 38 -43 -78) -78]
Train Case:  78 | Input/Output: [(1 -53 70 81) -53]
Train Case:  79 | Input/Output: [(-29 -23 30 20) -29]
Train Case:  80 | Input/Output: [(-2 93 64 -42) -42]
Train Case:  81 | Input/Output: [(-80 -39 -100 -60) -100]
Train Case:  82 | Input/Output: [(-96 -89 68 -80) -96]
Train Case:  83 | Input/Output: [(-21 44 -43 -61) -61]
Train Case:  84 | Input/Output: [(-28 72 -55 -21) -55]
Train Case:  85 | Input/Output: [(-92 12 -29 40) -92]
Train Case:  86 | Input/Output: [(-23 -7 8 98) -23]
Train Case:  87 | Input/Output: [(-100 46 -50 3) -100]
Train Case:  88 | Input/Output: [(-90 93 -62 76) -90]
Train Case:  89 | Input/Output: [(72 -28 -44 -32) -44]
Train Case:  90 | Input/Output: [(-6 -95 37 -58) -95]
Train Case:  91 | Input/Output: [(-78 50 -17 -62) -78]
Train Case:  92 | Input/Output: [(-88 3 -19 32) -88]
Train Case:  93 | Input/Output: [(28 4 -67 4) -67]
Train Case:  94 | Input/Output: [(10 81 81 -21) -21]
Train Case:  95 | Input/Output: [(45 83 69 34) 34]
Train Case:  96 | Input/Output: [(12 39 68 44) 12]
Train Case:  97 | Input/Output: [(88 64 -92 -61) -92]
Train Case:  98 | Input/Output: [(75 74 59 22) 22]
Train Case:  99 | Input/Output: [(-58 18 19 97) -58]
Test Case:   0 | Input/Output: [[-53 75 -53 -53] -53]
Test Case:   1 | Input/Output: [[23 23 23 -95] -95]
Test Case:   2 | Input/Output: [[-6 -6 -24 -6] -24]
Test Case:   3 | Input/Output: [[44 44 -8 44] -8]
Test Case:   4 | Input/Output: [[12 30 12 12] 12]
Test Case:   5 | Input/Output: [[-73 -38 -73 -73] -73]
Test Case:   6 | Input/Output: [[97 -14 -14 -14] -14]
Test Case:   7 | Input/Output: [[42 42 42 -31] -31]
Test Case:   8 | Input/Output: [[-70 -70 -70 -24] -70]
Test Case:   9 | Input/Output: [[9 -24 -24 -24] -24]
Test Case:  10 | Input/Output: [[-25 -91 -25 -25] -91]
Test Case:  11 | Input/Output: [[-91 -91 -91 44] -91]
Test Case:  12 | Input/Output: [[80 80 -62 80] -62]
Test Case:  13 | Input/Output: [[15 -12 -12 -12] -12]
Test Case:  14 | Input/Output: [[49 49 61 49] 49]
Test Case:  15 | Input/Output: [[75 -18 75 75] -18]
Test Case:  16 | Input/Output: [[12 12 18 12] 12]
Test Case:  17 | Input/Output: [[8 8 -4 8] -4]
Test Case:  18 | Input/Output: [[33 33 33 28] 28]
Test Case:  19 | Input/Output: [[69 69 69 -47] -47]
Test Case:  20 | Input/Output: [[99 99 71 99] 71]
Test Case:  21 | Input/Output: [[75 75 99 75] 75]
Test Case:  22 | Input/Output: [[-15 31 31 31] -15]
Test Case:  23 | Input/Output: [[65 -100 -100 -100] -100]
Test Case:  24 | Input/Output: [[-54 -54 -54 -33] -54]
Test Case:  25 | Input/Output: [[-23 41 41 41] -23]
Test Case:  26 | Input/Output: [[4 4 4 66] 4]
Test Case:  27 | Input/Output: [[90 90 100 90] 90]
Test Case:  28 | Input/Output: [[63 63 63 43] 43]
Test Case:  29 | Input/Output: [[12 12 -40 12] -40]
Test Case:  30 | Input/Output: [[-94 90 90 90] -94]
Test Case:  31 | Input/Output: [[97 40 40 40] 40]
Test Case:  32 | Input/Output: [[-15 -15 -78 -15] -78]
Test Case:  33 | Input/Output: [[-23 38 38 38] -23]
Test Case:  34 | Input/Output: [[84 84 84 -11] -11]
Test Case:  35 | Input/Output: [[-23 -23 -23 -13] -23]
Test Case:  36 | Input/Output: [[-61 -61 -61 -28] -61]
Test Case:  37 | Input/Output: [[21 -40 -40 -40] -40]
Test Case:  38 | Input/Output: [[-13 12 12 12] -13]
Test Case:  39 | Input/Output: [[-41 -38 -38 -38] -41]
Test Case:  40 | Input/Output: [[72 72 72 11] 11]
Test Case:  41 | Input/Output: [[-52 -52 -52 -32] -52]
Test Case:  42 | Input/Output: [[-71 48 48 48] -71]
Test Case:  43 | Input/Output: [[84 84 84 25] 25]
Test Case:  44 | Input/Output: [[-19 -19 -19 -3] -19]
Test Case:  45 | Input/Output: [[91 91 91 -15] -15]
Test Case:  46 | Input/Output: [[-57 -57 -57 -23] -57]
Test Case:  47 | Input/Output: [[-88 29 -88 -88] -88]
Test Case:  48 | Input/Output: [[-21 59 -21 -21] -21]
Test Case:  49 | Input/Output: [[-12 -19 -12 -12] -19]
Test Case:  50 | Input/Output: [[-45 -63 -63 -63] -63]
Test Case:  51 | Input/Output: [[-46 -46 -46 -13] -46]
Test Case:  52 | Input/Output: [[-38 -89 -38 -38] -89]
Test Case:  53 | Input/Output: [[26 26 49 26] 26]
Test Case:  54 | Input/Output: [[-11 -11 98 -11] -11]
Test Case:  55 | Input/Output: [[-60 -60 -90 -60] -90]
Test Case:  56 | Input/Output: [[21 21 -30 21] -30]
Test Case:  57 | Input/Output: [[63 63 88 63] 63]
Test Case:  58 | Input/Output: [[-83 86 -83 -83] -83]
Test Case:  59 | Input/Output: [[51 51 -66 51] -66]
Test Case:  60 | Input/Output: [[-61 -61 -45 -61] -61]
Test Case:  61 | Input/Output: [[-30 -30 59 -30] -30]
Test Case:  62 | Input/Output: [[53 -7 53 53] -7]
Test Case:  63 | Input/Output: [[-87 -87 -87 92] -87]
Test Case:  64 | Input/Output: [[91 91 98 91] 91]
Test Case:  65 | Input/Output: [[-88 -88 48 -88] -88]
Test Case:  66 | Input/Output: [[3 -43 3 3] -43]
Test Case:  67 | Input/Output: [[-26 -26 -7 -26] -26]
Test Case:  68 | Input/Output: [[12 12 -85 12] -85]
Test Case:  69 | Input/Output: [[-53 -53 -96 -53] -96]
Test Case:  70 | Input/Output: [[-60 -84 -60 -60] -84]
Test Case:  71 | Input/Output: [[66 66 79 66] 66]
Test Case:  72 | Input/Output: [[74 54 54 54] 54]
Test Case:  73 | Input/Output: [[53 53 -44 53] -44]
Test Case:  74 | Input/Output: [[-46 -26 -26 -26] -46]
Test Case:  75 | Input/Output: [[-38 -38 -53 -38] -53]
Test Case:  76 | Input/Output: [[28 68 68 68] 28]
Test Case:  77 | Input/Output: [[20 20 20 5] 5]
Test Case:  78 | Input/Output: [[14 14 9 14] 9]
Test Case:  79 | Input/Output: [[12 7 7 7] 7]
Test Case:  80 | Input/Output: [[-53 -59 -59 -59] -59]
Test Case:  81 | Input/Output: [[54 54 54 -100] -100]
Test Case:  82 | Input/Output: [[95 -16 95 95] -16]
Test Case:  83 | Input/Output: [[-53 -53 76 -53] -53]
Test Case:  84 | Input/Output: [[55 55 55 89] 55]
Test Case:  85 | Input/Output: [[35 35 35 -5] -5]
Test Case:  86 | Input/Output: [[89 89 89 -53] -53]
Test Case:  87 | Input/Output: [[-54 -54 -54 -86] -86]
Test Case:  88 | Input/Output: [[30 -75 30 30] -75]
Test Case:  89 | Input/Output: [[45 95 95 95] 45]
Test Case:  90 | Input/Output: [[-28 -28 -28 64] -28]
Test Case:  91 | Input/Output: [[-100 73 73 73] -100]
Test Case:  92 | Input/Output: [[-59 -59 -59 52] -59]
Test Case:  93 | Input/Output: [[3 3 3 37] 3]
Test Case:  94 | Input/Output: [[96 96 96 100] 96]
Test Case:  95 | Input/Output: [[81 -59 -59 -59] -59]
Test Case:  96 | Input/Output: [[-73 -73 -73 -12] -73]
Test Case:  97 | Input/Output: [[55 55 -77 55] -77]
Test Case:  98 | Input/Output: [[14 -26 -26 -26] -26]
Test Case:  99 | Input/Output: [[90 90 90 -86] -86]
Test Case: 100 | Input/Output: [(12 12 12 12) 12]
Test Case: 101 | Input/Output: [(51 51 51 51) 51]
Test Case: 102 | Input/Output: [(-68 -68 -68 -68) -68]
Test Case: 103 | Input/Output: [(49 49 49 49) 49]
Test Case: 104 | Input/Output: [(64 64 64 64) 64]
Test Case: 105 | Input/Output: [(40 40 40 40) 40]
Test Case: 106 | Input/Output: [(-74 -74 -74 -74) -74]
Test Case: 107 | Input/Output: [(-6 -6 -6 -6) -6]
Test Case: 108 | Input/Output: [(-11 -11 -11 -11) -11]
Test Case: 109 | Input/Output: [(45 45 45 45) 45]
Test Case: 110 | Input/Output: [(42 42 42 42) 42]
Test Case: 111 | Input/Output: [(-76 -76 -76 -76) -76]
Test Case: 112 | Input/Output: [(-24 -24 -24 -24) -24]
Test Case: 113 | Input/Output: [(-77 -77 -77 -77) -77]
Test Case: 114 | Input/Output: [(61 61 61 61) 61]
Test Case: 115 | Input/Output: [(52 52 52 52) 52]
Test Case: 116 | Input/Output: [(-62 -62 -62 -62) -62]
Test Case: 117 | Input/Output: [(-95 -95 -95 -95) -95]
Test Case: 118 | Input/Output: [(-11 -11 -11 -11) -11]
Test Case: 119 | Input/Output: [(-64 -64 -64 -64) -64]
Test Case: 120 | Input/Output: [(83 83 83 83) 83]
Test Case: 121 | Input/Output: [(45 45 45 45) 45]
Test Case: 122 | Input/Output: [(25 25 25 25) 25]
Test Case: 123 | Input/Output: [(-7 -7 -7 -7) -7]
Test Case: 124 | Input/Output: [(92 92 92 92) 92]
Test Case: 125 | Input/Output: [(-79 -79 -79 -79) -79]
Test Case: 126 | Input/Output: [(21 21 21 21) 21]
Test Case: 127 | Input/Output: [(-13 -13 -13 -13) -13]
Test Case: 128 | Input/Output: [(7 7 7 7) 7]
Test Case: 129 | Input/Output: [(71 71 71 71) 71]
Test Case: 130 | Input/Output: [(53 53 53 53) 53]
Test Case: 131 | Input/Output: [(-97 -97 -97 -97) -97]
Test Case: 132 | Input/Output: [(97 97 97 97) 97]
Test Case: 133 | Input/Output: [(-86 -86 -86 -86) -86]
Test Case: 134 | Input/Output: [(69 69 69 69) 69]
Test Case: 135 | Input/Output: [(-17 -17 -17 -17) -17]
Test Case: 136 | Input/Output: [(48 48 48 48) 48]
Test Case: 137 | Input/Output: [(-13 -13 -13 -13) -13]
Test Case: 138 | Input/Output: [(11 11 11 11) 11]
Test Case: 139 | Input/Output: [(-1 -1 -1 -1) -1]
Test Case: 140 | Input/Output: [(-91 -91 -91 -91) -91]
Test Case: 141 | Input/Output: [(44 44 44 44) 44]
Test Case: 142 | Input/Output: [(-44 -44 -44 -44) -44]
Test Case: 143 | Input/Output: [(-44 -44 -44 -44) -44]
Test Case: 144 | Input/Output: [(-91 -91 -91 -91) -91]
Test Case: 145 | Input/Output: [(-59 -59 -59 -59) -59]
Test Case: 146 | Input/Output: [(96 96 96 96) 96]
Test Case: 147 | Input/Output: [(56 56 56 56) 56]
Test Case: 148 | Input/Output: [(99 99 99 99) 99]
Test Case: 149 | Input/Output: [(31 31 31 31) 31]
Test Case: 150 | Input/Output: [(-54 -54 -54 -54) -54]
Test Case: 151 | Input/Output: [(97 97 97 97) 97]
Test Case: 152 | Input/Output: [(69 69 69 69) 69]
Test Case: 153 | Input/Output: [(-94 -94 -94 -94) -94]
Test Case: 154 | Input/Output: [(90 90 90 90) 90]
Test Case: 155 | Input/Output: [(90 90 90 90) 90]
Test Case: 156 | Input/Output: [(-53 -53 -53 -53) -53]
Test Case: 157 | Input/Output: [(-44 -44 -44 -44) -44]
Test Case: 158 | Input/Output: [(52 52 52 52) 52]
Test Case: 159 | Input/Output: [(40 40 40 40) 40]
Test Case: 160 | Input/Output: [(34 34 34 34) 34]
Test Case: 161 | Input/Output: [(-37 -37 -37 -37) -37]
Test Case: 162 | Input/Output: [(-69 -69 -69 -69) -69]
Test Case: 163 | Input/Output: [(70 70 70 70) 70]
Test Case: 164 | Input/Output: [(-70 -70 -70 -70) -70]
Test Case: 165 | Input/Output: [(1 1 1 1) 1]
Test Case: 166 | Input/Output: [(92 92 92 92) 92]
Test Case: 167 | Input/Output: [(-52 -52 -52 -52) -52]
Test Case: 168 | Input/Output: [(-79 -79 -79 -79) -79]
Test Case: 169 | Input/Output: [(3 3 3 3) 3]
Test Case: 170 | Input/Output: [(97 97 97 97) 97]
Test Case: 171 | Input/Output: [(29 29 29 29) 29]
Test Case: 172 | Input/Output: [(78 78 78 78) 78]
Test Case: 173 | Input/Output: [(-2 -2 -2 -2) -2]
Test Case: 174 | Input/Output: [(32 32 32 32) 32]
Test Case: 175 | Input/Output: [(90 90 90 90) 90]
Test Case: 176 | Input/Output: [(-7 -7 -7 -7) -7]
Test Case: 177 | Input/Output: [(-48 -48 -48 -48) -48]
Test Case: 178 | Input/Output: [(14 14 14 14) 14]
Test Case: 179 | Input/Output: [(-6 -6 -6 -6) -6]
Test Case: 180 | Input/Output: [(-58 -58 -58 -58) -58]
Test Case: 181 | Input/Output: [(7 7 7 7) 7]
Test Case: 182 | Input/Output: [(-88 -88 -88 -88) -88]
Test Case: 183 | Input/Output: [(-59 -59 -59 -59) -59]
Test Case: 184 | Input/Output: [(-48 -48 -48 -48) -48]
Test Case: 185 | Input/Output: [(-87 -87 -87 -87) -87]
Test Case: 186 | Input/Output: [(-39 -39 -39 -39) -39]
Test Case: 187 | Input/Output: [(5 5 5 5) 5]
Test Case: 188 | Input/Output: [(57 57 57 57) 57]
Test Case: 189 | Input/Output: [(-41 -41 -41 -41) -41]
Test Case: 190 | Input/Output: [(-85 -85 -85 -85) -85]
Test Case: 191 | Input/Output: [(58 58 58 58) 58]
Test Case: 192 | Input/Output: [(51 51 51 51) 51]
Test Case: 193 | Input/Output: [(73 73 73 73) 73]
Test Case: 194 | Input/Output: [(-48 -48 -48 -48) -48]
Test Case: 195 | Input/Output: [(-70 -70 -70 -70) -70]
Test Case: 196 | Input/Output: [(84 84 84 84) 84]
Test Case: 197 | Input/Output: [(-69 -69 -69 -69) -69]
Test Case: 198 | Input/Output: [(1 1 1 1) 1]
Test Case: 199 | Input/Output: [(76 76 76 76) 76]
Test Case: 200 | Input/Output: [(14 95 54 27) 14]
Test Case: 201 | Input/Output: [(9 80 92 44) 9]
Test Case: 202 | Input/Output: [(1 68 18 34) 1]
Test Case: 203 | Input/Output: [(7 87 43 64) 7]
Test Case: 204 | Input/Output: [(87 73 71 42) 42]
Test Case: 205 | Input/Output: [(36 31 13 25) 13]
Test Case: 206 | Input/Output: [(89 33 55 5) 5]
Test Case: 207 | Input/Output: [(76 37 82 41) 37]
Test Case: 208 | Input/Output: [(97 5 86 16) 5]
Test Case: 209 | Input/Output: [(9 36 92 17) 9]
Test Case: 210 | Input/Output: [(44 90 42 61) 42]
Test Case: 211 | Input/Output: [(68 23 79 38) 23]
Test Case: 212 | Input/Output: [(64 2 72 55) 2]
Test Case: 213 | Input/Output: [(97 3 95 86) 3]
Test Case: 214 | Input/Output: [(85 2 10 46) 2]
Test Case: 215 | Input/Output: [(87 23 47 24) 23]
Test Case: 216 | Input/Output: [(57 73 18 64) 18]
Test Case: 217 | Input/Output: [(64 27 90 42) 27]
Test Case: 218 | Input/Output: [(30 55 97 70) 30]
Test Case: 219 | Input/Output: [(14 58 96 34) 14]
Test Case: 220 | Input/Output: [(76 38 84 79) 38]
Test Case: 221 | Input/Output: [(79 85 34 12) 12]
Test Case: 222 | Input/Output: [(4 36 1 64) 1]
Test Case: 223 | Input/Output: [(84 78 61 24) 24]
Test Case: 224 | Input/Output: [(38 69 91 54) 38]
Test Case: 225 | Input/Output: [(5 57 69 94) 5]
Test Case: 226 | Input/Output: [(86 69 42 16) 16]
Test Case: 227 | Input/Output: [(74 6 8 72) 6]
Test Case: 228 | Input/Output: [(10 16 78 64) 10]
Test Case: 229 | Input/Output: [(84 3 72 13) 3]
Test Case: 230 | Input/Output: [(28 88 29 24) 24]
Test Case: 231 | Input/Output: [(84 87 67 0) 0]
Test Case: 232 | Input/Output: [(89 25 20 100) 20]
Test Case: 233 | Input/Output: [(40 72 31 26) 26]
Test Case: 234 | Input/Output: [(87 49 97 100) 49]
Test Case: 235 | Input/Output: [(78 98 60 80) 60]
Test Case: 236 | Input/Output: [(17 59 72 85) 17]
Test Case: 237 | Input/Output: [(9 15 11 72) 9]
Test Case: 238 | Input/Output: [(51 2 29 73) 2]
Test Case: 239 | Input/Output: [(17 81 0 76) 0]
Test Case: 240 | Input/Output: [(12 47 84 17) 12]
Test Case: 241 | Input/Output: [(16 67 84 93) 16]
Test Case: 242 | Input/Output: [(2 45 85 57) 2]
Test Case: 243 | Input/Output: [(63 9 98 56) 9]
Test Case: 244 | Input/Output: [(79 1 31 8) 1]
Test Case: 245 | Input/Output: [(38 19 16 17) 16]
Test Case: 246 | Input/Output: [(27 33 15 68) 15]
Test Case: 247 | Input/Output: [(5 77 61 13) 5]
Test Case: 248 | Input/Output: [(17 8 20 40) 8]
Test Case: 249 | Input/Output: [(37 12 21 43) 12]
Test Case: 250 | Input/Output: [(42 87 27 88) 27]
Test Case: 251 | Input/Output: [(36 13 0 60) 0]
Test Case: 252 | Input/Output: [(12 65 57 83) 12]
Test Case: 253 | Input/Output: [(94 51 31 95) 31]
Test Case: 254 | Input/Output: [(16 22 9 51) 9]
Test Case: 255 | Input/Output: [(59 64 76 39) 39]
Test Case: 256 | Input/Output: [(79 62 4 32) 4]
Test Case: 257 | Input/Output: [(84 75 72 64) 64]
Test Case: 258 | Input/Output: [(87 27 26 78) 26]
Test Case: 259 | Input/Output: [(31 2 3 7) 2]
Test Case: 260 | Input/Output: [(51 43 61 3) 3]
Test Case: 261 | Input/Output: [(87 3 25 91) 3]
Test Case: 262 | Input/Output: [(46 48 21 32) 21]
Test Case: 263 | Input/Output: [(23 29 83 26) 23]
Test Case: 264 | Input/Output: [(44 6 84 93) 6]
Test Case: 265 | Input/Output: [(66 9 32 11) 9]
Test Case: 266 | Input/Output: [(55 30 99 53) 30]
Test Case: 267 | Input/Output: [(97 7 70 89) 7]
Test Case: 268 | Input/Output: [(91 96 19 13) 13]
Test Case: 269 | Input/Output: [(76 13 2 96) 2]
Test Case: 270 | Input/Output: [(34 87 16 91) 16]
Test Case: 271 | Input/Output: [(63 39 43 40) 39]
Test Case: 272 | Input/Output: [(78 10 85 12) 10]
Test Case: 273 | Input/Output: [(46 69 64 34) 34]
Test Case: 274 | Input/Output: [(17 10 7 29) 7]
Test Case: 275 | Input/Output: [(47 46 46 67) 46]
Test Case: 276 | Input/Output: [(43 77 46 31) 31]
Test Case: 277 | Input/Output: [(16 87 20 93) 16]
Test Case: 278 | Input/Output: [(72 70 40 32) 32]
Test Case: 279 | Input/Output: [(86 86 57 72) 57]
Test Case: 280 | Input/Output: [(30 55 19 1) 1]
Test Case: 281 | Input/Output: [(81 36 37 84) 36]
Test Case: 282 | Input/Output: [(7 19 61 17) 7]
Test Case: 283 | Input/Output: [(74 31 28 92) 28]
Test Case: 284 | Input/Output: [(70 55 16 88) 16]
Test Case: 285 | Input/Output: [(8 82 22 57) 8]
Test Case: 286 | Input/Output: [(78 81 62 44) 44]
Test Case: 287 | Input/Output: [(59 67 87 46) 46]
Test Case: 288 | Input/Output: [(28 64 22 40) 22]
Test Case: 289 | Input/Output: [(53 18 20 47) 18]
Test Case: 290 | Input/Output: [(99 19 69 25) 19]
Test Case: 291 | Input/Output: [(66 62 5 7) 5]
Test Case: 292 | Input/Output: [(50 67 18 34) 18]
Test Case: 293 | Input/Output: [(63 96 22 68) 22]
Test Case: 294 | Input/Output: [(27 98 70 97) 27]
Test Case: 295 | Input/Output: [(90 60 20 45) 20]
Test Case: 296 | Input/Output: [(12 6 42 11) 6]
Test Case: 297 | Input/Output: [(72 63 45 86) 45]
Test Case: 298 | Input/Output: [(55 14 6 29) 6]
Test Case: 299 | Input/Output: [(46 71 11 87) 11]
Test Case: 300 | Input/Output: [(6 19 86 8) 6]
Test Case: 301 | Input/Output: [(7 11 17 26) 7]
Test Case: 302 | Input/Output: [(83 63 86 88) 63]
Test Case: 303 | Input/Output: [(17 63 92 19) 17]
Test Case: 304 | Input/Output: [(3 44 65 32) 3]
Test Case: 305 | Input/Output: [(23 88 33 94) 23]
Test Case: 306 | Input/Output: [(48 88 53 81) 48]
Test Case: 307 | Input/Output: [(88 78 44 24) 24]
Test Case: 308 | Input/Output: [(68 97 47 1) 1]
Test Case: 309 | Input/Output: [(61 49 13 79) 13]
Test Case: 310 | Input/Output: [(20 2 11 0) 0]
Test Case: 311 | Input/Output: [(99 32 96 4) 4]
Test Case: 312 | Input/Output: [(54 60 78 74) 54]
Test Case: 313 | Input/Output: [(63 9 27 8) 8]
Test Case: 314 | Input/Output: [(21 21 41 24) 21]
Test Case: 315 | Input/Output: [(16 21 17 81) 16]
Test Case: 316 | Input/Output: [(31 82 19 66) 19]
Test Case: 317 | Input/Output: [(42 85 47 17) 17]
Test Case: 318 | Input/Output: [(22 44 12 95) 12]
Test Case: 319 | Input/Output: [(97 72 47 53) 47]
Test Case: 320 | Input/Output: [(58 71 41 3) 3]
Test Case: 321 | Input/Output: [(0 6 28 2) 0]
Test Case: 322 | Input/Output: [(63 100 10 74) 10]
Test Case: 323 | Input/Output: [(11 89 75 18) 11]
Test Case: 324 | Input/Output: [(81 76 34 35) 34]
Test Case: 325 | Input/Output: [(53 4 37 5) 4]
Test Case: 326 | Input/Output: [(14 79 39 9) 9]
Test Case: 327 | Input/Output: [(14 44 35 33) 14]
Test Case: 328 | Input/Output: [(69 37 21 62) 21]
Test Case: 329 | Input/Output: [(6 39 67 53) 6]
Test Case: 330 | Input/Output: [(78 57 86 26) 26]
Test Case: 331 | Input/Output: [(87 85 76 5) 5]
Test Case: 332 | Input/Output: [(2 43 73 38) 2]
Test Case: 333 | Input/Output: [(40 44 41 5) 5]
Test Case: 334 | Input/Output: [(28 96 22 31) 22]
Test Case: 335 | Input/Output: [(31 81 82 5) 5]
Test Case: 336 | Input/Output: [(72 30 98 82) 30]
Test Case: 337 | Input/Output: [(38 89 35 71) 35]
Test Case: 338 | Input/Output: [(12 31 82 45) 12]
Test Case: 339 | Input/Output: [(54 51 26 65) 26]
Test Case: 340 | Input/Output: [(17 33 76 35) 17]
Test Case: 341 | Input/Output: [(82 72 90 88) 72]
Test Case: 342 | Input/Output: [(72 98 93 13) 13]
Test Case: 343 | Input/Output: [(41 69 74 66) 41]
Test Case: 344 | Input/Output: [(36 1 82 8) 1]
Test Case: 345 | Input/Output: [(60 36 37 49) 36]
Test Case: 346 | Input/Output: [(27 59 94 71) 27]
Test Case: 347 | Input/Output: [(32 82 3 6) 3]
Test Case: 348 | Input/Output: [(76 18 49 32) 18]
Test Case: 349 | Input/Output: [(12 74 10 28) 10]
Test Case: 350 | Input/Output: [(38 85 40 8) 8]
Test Case: 351 | Input/Output: [(25 74 78 88) 25]
Test Case: 352 | Input/Output: [(90 73 91 29) 29]
Test Case: 353 | Input/Output: [(34 31 95 25) 25]
Test Case: 354 | Input/Output: [(7 24 11 55) 7]
Test Case: 355 | Input/Output: [(96 16 8 6) 6]
Test Case: 356 | Input/Output: [(7 1 59 68) 1]
Test Case: 357 | Input/Output: [(17 44 75 24) 17]
Test Case: 358 | Input/Output: [(38 34 26 44) 26]
Test Case: 359 | Input/Output: [(73 12 99 37) 12]
Test Case: 360 | Input/Output: [(46 29 29 46) 29]
Test Case: 361 | Input/Output: [(9 73 16 69) 9]
Test Case: 362 | Input/Output: [(49 70 42 44) 42]
Test Case: 363 | Input/Output: [(19 36 93 25) 19]
Test Case: 364 | Input/Output: [(1 98 59 59) 1]
Test Case: 365 | Input/Output: [(32 28 92 21) 21]
Test Case: 366 | Input/Output: [(7 26 89 5) 5]
Test Case: 367 | Input/Output: [(32 25 12 18) 12]
Test Case: 368 | Input/Output: [(15 9 92 73) 9]
Test Case: 369 | Input/Output: [(35 27 99 87) 27]
Test Case: 370 | Input/Output: [(21 18 31 36) 18]
Test Case: 371 | Input/Output: [(5 75 74 58) 5]
Test Case: 372 | Input/Output: [(53 17 52 80) 17]
Test Case: 373 | Input/Output: [(87 52 98 56) 52]
Test Case: 374 | Input/Output: [(79 16 56 66) 16]
Test Case: 375 | Input/Output: [(34 7 93 45) 7]
Test Case: 376 | Input/Output: [(23 57 46 41) 23]
Test Case: 377 | Input/Output: [(98 88 67 33) 33]
Test Case: 378 | Input/Output: [(26 50 57 46) 26]
Test Case: 379 | Input/Output: [(20 88 91 9) 9]
Test Case: 380 | Input/Output: [(79 16 4 39) 4]
Test Case: 381 | Input/Output: [(88 88 1 56) 1]
Test Case: 382 | Input/Output: [(38 94 83 34) 34]
Test Case: 383 | Input/Output: [(75 14 100 21) 14]
Test Case: 384 | Input/Output: [(38 34 18 48) 18]
Test Case: 385 | Input/Output: [(62 0 52 90) 0]
Test Case: 386 | Input/Output: [(47 69 34 21) 21]
Test Case: 387 | Input/Output: [(37 40 46 58) 37]
Test Case: 388 | Input/Output: [(40 22 78 32) 22]
Test Case: 389 | Input/Output: [(25 4 70 33) 4]
Test Case: 390 | Input/Output: [(15 65 65 3) 3]
Test Case: 391 | Input/Output: [(24 24 26 25) 24]
Test Case: 392 | Input/Output: [(87 69 23 50) 23]
Test Case: 393 | Input/Output: [(19 90 74 28) 19]
Test Case: 394 | Input/Output: [(13 87 1 62) 1]
Test Case: 395 | Input/Output: [(95 82 2 68) 2]
Test Case: 396 | Input/Output: [(68 19 58 95) 19]
Test Case: 397 | Input/Output: [(39 2 42 100) 2]
Test Case: 398 | Input/Output: [(70 91 22 95) 22]
Test Case: 399 | Input/Output: [(40 47 24 41) 24]
Test Case: 400 | Input/Output: [(-21 -89 -87 -66) -89]
Test Case: 401 | Input/Output: [(-54 45 44 54) -54]
Test Case: 402 | Input/Output: [(-60 15 -83 66) -83]
Test Case: 403 | Input/Output: [(-12 23 46 -82) -82]
Test Case: 404 | Input/Output: [(78 -27 56 8) -27]
Test Case: 405 | Input/Output: [(-46 83 -81 63) -81]
Test Case: 406 | Input/Output: [(-42 97 -84 -19) -84]
Test Case: 407 | Input/Output: [(59 -39 -72 100) -72]
Test Case: 408 | Input/Output: [(-1 24 -83 30) -83]
Test Case: 409 | Input/Output: [(26 -30 -56 53) -56]
Test Case: 410 | Input/Output: [(11 -92 -35 46) -92]
Test Case: 411 | Input/Output: [(-34 -64 -42 9) -64]
Test Case: 412 | Input/Output: [(83 -10 45 90) -10]
Test Case: 413 | Input/Output: [(-92 66 -16 95) -92]
Test Case: 414 | Input/Output: [(-67 48 -60 45) -67]
Test Case: 415 | Input/Output: [(45 83 -81 29) -81]
Test Case: 416 | Input/Output: [(-17 60 -29 28) -29]
Test Case: 417 | Input/Output: [(9 -49 -7 36) -49]
Test Case: 418 | Input/Output: [(-12 -52 99 74) -52]
Test Case: 419 | Input/Output: [(-70 -49 -15 -63) -70]
Test Case: 420 | Input/Output: [(-36 4 6 84) -36]
Test Case: 421 | Input/Output: [(4 85 30 2) 2]
Test Case: 422 | Input/Output: [(29 -55 -43 27) -55]
Test Case: 423 | Input/Output: [(70 -80 70 63) -80]
Test Case: 424 | Input/Output: [(70 -33 50 20) -33]
Test Case: 425 | Input/Output: [(29 8 41 6) 6]
Test Case: 426 | Input/Output: [(51 2 -71 50) -71]
Test Case: 427 | Input/Output: [(13 -40 -38 -48) -48]
Test Case: 428 | Input/Output: [(-15 -97 -25 19) -97]
Test Case: 429 | Input/Output: [(67 -100 -76 54) -100]
Test Case: 430 | Input/Output: [(-30 -69 82 -31) -69]
Test Case: 431 | Input/Output: [(42 27 68 82) 27]
Test Case: 432 | Input/Output: [(-22 -80 99 -84) -84]
Test Case: 433 | Input/Output: [(-72 7 74 54) -72]
Test Case: 434 | Input/Output: [(-15 28 9 3) -15]
Test Case: 435 | Input/Output: [(58 14 1 100) 1]
Test Case: 436 | Input/Output: [(50 -66 16 27) -66]
Test Case: 437 | Input/Output: [(86 -95 32 -70) -95]
Test Case: 438 | Input/Output: [(43 -20 -80 -77) -80]
Test Case: 439 | Input/Output: [(-64 61 -27 94) -64]
Test Case: 440 | Input/Output: [(-20 74 82 -13) -20]
Test Case: 441 | Input/Output: [(-17 -93 -31 -29) -93]
Test Case: 442 | Input/Output: [(60 5 -30 -90) -90]
Test Case: 443 | Input/Output: [(-64 52 -19 -32) -64]
Test Case: 444 | Input/Output: [(-17 -77 -45 -11) -77]
Test Case: 445 | Input/Output: [(23 45 82 42) 23]
Test Case: 446 | Input/Output: [(5 58 -60 -63) -63]
Test Case: 447 | Input/Output: [(-34 4 -69 -50) -69]
Test Case: 448 | Input/Output: [(50 -98 4 -87) -98]
Test Case: 449 | Input/Output: [(-71 6 53 29) -71]
Test Case: 450 | Input/Output: [(-78 -79 66 -39) -79]
Test Case: 451 | Input/Output: [(-98 92 36 -44) -98]
Test Case: 452 | Input/Output: [(7 -46 -37 -25) -46]
Test Case: 453 | Input/Output: [(-34 89 -66 76) -66]
Test Case: 454 | Input/Output: [(-29 -74 -62 -33) -74]
Test Case: 455 | Input/Output: [(-3 -54 -14 -66) -66]
Test Case: 456 | Input/Output: [(31 -77 -52 84) -77]
Test Case: 457 | Input/Output: [(-70 95 18 -80) -80]
Test Case: 458 | Input/Output: [(-40 -60 -32 39) -60]
Test Case: 459 | Input/Output: [(80 38 42 76) 38]
Test Case: 460 | Input/Output: [(-85 83 41 -95) -95]
Test Case: 461 | Input/Output: [(-72 25 -16 -84) -84]
Test Case: 462 | Input/Output: [(-12 -72 60 64) -72]
Test Case: 463 | Input/Output: [(97 15 38 -38) -38]
Test Case: 464 | Input/Output: [(79 0 9 -99) -99]
Test Case: 465 | Input/Output: [(-16 19 -83 21) -83]
Test Case: 466 | Input/Output: [(27 -48 51 60) -48]
Test Case: 467 | Input/Output: [(-20 32 -50 -6) -50]
Test Case: 468 | Input/Output: [(-80 33 20 -78) -80]
Test Case: 469 | Input/Output: [(25 -77 -58 25) -77]
Test Case: 470 | Input/Output: [(46 71 -31 91) -31]
Test Case: 471 | Input/Output: [(-21 67 79 21) -21]
Test Case: 472 | Input/Output: [(-81 -79 71 42) -81]
Test Case: 473 | Input/Output: [(53 79 32 48) 32]
Test Case: 474 | Input/Output: [(-19 -27 -77 -90) -90]
Test Case: 475 | Input/Output: [(-41 -15 -17 -77) -77]
Test Case: 476 | Input/Output: [(-8 66 -77 -72) -77]
Test Case: 477 | Input/Output: [(-54 -34 6 79) -54]
Test Case: 478 | Input/Output: [(-6 29 -79 87) -79]
Test Case: 479 | Input/Output: [(-56 -83 52 -38) -83]
Test Case: 480 | Input/Output: [(-59 15 100 -5) -59]
Test Case: 481 | Input/Output: [(-41 84 71 55) -41]
Test Case: 482 | Input/Output: [(-42 -83 -71 -55) -83]
Test Case: 483 | Input/Output: [(94 -73 -20 55) -73]
Test Case: 484 | Input/Output: [(-34 -89 -50 6) -89]
Test Case: 485 | Input/Output: [(74 -62 -53 81) -62]
Test Case: 486 | Input/Output: [(-56 -35 -8 27) -56]
Test Case: 487 | Input/Output: [(3 99 -98 -15) -98]
Test Case: 488 | Input/Output: [(-11 -37 77 23) -37]
Test Case: 489 | Input/Output: [(-96 29 52 90) -96]
Test Case: 490 | Input/Output: [(-12 46 96 -53) -53]
Test Case: 491 | Input/Output: [(91 -40 4 -17) -40]
Test Case: 492 | Input/Output: [(33 -93 -14 17) -93]
Test Case: 493 | Input/Output: [(-61 82 42 -7) -61]
Test Case: 494 | Input/Output: [(86 76 35 15) 15]
Test Case: 495 | Input/Output: [(66 30 16 -20) -20]
Test Case: 496 | Input/Output: [(4 -84 100 8) -84]
Test Case: 497 | Input/Output: [(-22 24 -73 -14) -73]
Test Case: 498 | Input/Output: [(-48 55 32 75) -48]
Test Case: 499 | Input/Output: [(-78 64 95 -24) -78]
Test Case: 500 | Input/Output: [(-88 -52 -91 -66) -91]
Test Case: 501 | Input/Output: [(88 -38 -45 62) -45]
Test Case: 502 | Input/Output: [(-7 -54 -25 30) -54]
Test Case: 503 | Input/Output: [(99 94 46 -7) -7]
Test Case: 504 | Input/Output: [(69 -89 -57 1) -89]
Test Case: 505 | Input/Output: [(94 36 42 -97) -97]
Test Case: 506 | Input/Output: [(66 63 -26 43) -26]
Test Case: 507 | Input/Output: [(14 43 25 -31) -31]
Test Case: 508 | Input/Output: [(-48 -93 16 87) -93]
Test Case: 509 | Input/Output: [(-70 -41 92 93) -70]
Test Case: 510 | Input/Output: [(54 66 4 87) 4]
Test Case: 511 | Input/Output: [(67 -56 -18 -87) -87]
Test Case: 512 | Input/Output: [(-18 -50 91 13) -50]
Test Case: 513 | Input/Output: [(-100 81 -70 95) -100]
Test Case: 514 | Input/Output: [(93 -63 -31 70) -63]
Test Case: 515 | Input/Output: [(-69 -15 36 -41) -69]
Test Case: 516 | Input/Output: [(-2 -4 54 64) -4]
Test Case: 517 | Input/Output: [(32 -93 -40 31) -93]
Test Case: 518 | Input/Output: [(-76 -2 -13 90) -76]
Test Case: 519 | Input/Output: [(16 79 19 37) 16]
Test Case: 520 | Input/Output: [(-46 -92 94 -81) -92]
Test Case: 521 | Input/Output: [(-30 -6 -29 -63) -63]
Test Case: 522 | Input/Output: [(99 -84 -60 14) -84]
Test Case: 523 | Input/Output: [(77 16 52 26) 16]
Test Case: 524 | Input/Output: [(3 -57 0 -46) -57]
Test Case: 525 | Input/Output: [(-2 -100 43 -89) -100]
Test Case: 526 | Input/Output: [(-54 -26 -98 4) -98]
Test Case: 527 | Input/Output: [(86 -24 -30 78) -30]
Test Case: 528 | Input/Output: [(-8 37 75 0) -8]
Test Case: 529 | Input/Output: [(94 75 -74 -10) -74]
Test Case: 530 | Input/Output: [(65 41 -38 -59) -59]
Test Case: 531 | Input/Output: [(28 69 -58 -28) -58]
Test Case: 532 | Input/Output: [(58 66 42 -11) -11]
Test Case: 533 | Input/Output: [(-83 -31 26 55) -83]
Test Case: 534 | Input/Output: [(58 57 16 72) 16]
Test Case: 535 | Input/Output: [(-63 32 -28 87) -63]
Test Case: 536 | Input/Output: [(58 -8 -86 46) -86]
Test Case: 537 | Input/Output: [(48 -48 13 8) -48]
Test Case: 538 | Input/Output: [(38 72 75 51) 38]
Test Case: 539 | Input/Output: [(-69 -95 93 73) -95]
Test Case: 540 | Input/Output: [(-94 49 96 -82) -94]
Test Case: 541 | Input/Output: [(62 17 -82 -36) -82]
Test Case: 542 | Input/Output: [(-70 -46 28 13) -70]
Test Case: 543 | Input/Output: [(81 26 -89 -41) -89]
Test Case: 544 | Input/Output: [(39 50 -27 99) -27]
Test Case: 545 | Input/Output: [(-61 6 76 -66) -66]
Test Case: 546 | Input/Output: [(1 -43 -59 62) -59]
Test Case: 547 | Input/Output: [(-22 0 92 -23) -23]
Test Case: 548 | Input/Output: [(95 -69 12 70) -69]
Test Case: 549 | Input/Output: [(34 17 -5 -32) -32]
Test Case: 550 | Input/Output: [(-8 87 -8 -88) -88]
Test Case: 551 | Input/Output: [(34 68 46 -32) -32]
Test Case: 552 | Input/Output: [(9 -81 -31 -23) -81]
Test Case: 553 | Input/Output: [(96 -59 -93 27) -93]
Test Case: 554 | Input/Output: [(47 -62 60 -46) -62]
Test Case: 555 | Input/Output: [(-49 27 -97 60) -97]
Test Case: 556 | Input/Output: [(5 23 -27 -81) -81]
Test Case: 557 | Input/Output: [(-10 72 61 -12) -12]
Test Case: 558 | Input/Output: [(73 -34 44 83) -34]
Test Case: 559 | Input/Output: [(0 -95 24 -16) -95]
Test Case: 560 | Input/Output: [(-43 -95 81 66) -95]
Test Case: 561 | Input/Output: [(-13 39 -92 -41) -92]
Test Case: 562 | Input/Output: [(68 37 -16 -32) -32]
Test Case: 563 | Input/Output: [(-69 44 24 5) -69]
Test Case: 564 | Input/Output: [(-14 -45 21 75) -45]
Test Case: 565 | Input/Output: [(14 83 98 80) 14]
Test Case: 566 | Input/Output: [(59 48 -10 77) -10]
Test Case: 567 | Input/Output: [(-16 0 -65 41) -65]
Test Case: 568 | Input/Output: [(-48 37 14 57) -48]
Test Case: 569 | Input/Output: [(7 -35 91 -26) -35]
Test Case: 570 | Input/Output: [(47 33 65 -7) -7]
Test Case: 571 | Input/Output: [(19 -29 97 -84) -84]
Test Case: 572 | Input/Output: [(51 -69 -96 -2) -96]
Test Case: 573 | Input/Output: [(24 88 77 -82) -82]
Test Case: 574 | Input/Output: [(71 -39 64 44) -39]
Test Case: 575 | Input/Output: [(-93 0 -99 -28) -99]
Test Case: 576 | Input/Output: [(23 3 98 77) 3]
Test Case: 577 | Input/Output: [(-63 -93 -8 -48) -93]
Test Case: 578 | Input/Output: [(61 12 11 -65) -65]
Test Case: 579 | Input/Output: [(45 55 49 42) 42]
Test Case: 580 | Input/Output: [(-98 -47 -99 -22) -99]
Test Case: 581 | Input/Output: [(-74 90 60 -45) -74]
Test Case: 582 | Input/Output: [(83 73 90 18) 18]
Test Case: 583 | Input/Output: [(-64 51 -16 22) -64]
Test Case: 584 | Input/Output: [(69 -24 6 34) -24]
Test Case: 585 | Input/Output: [(95 -20 -59 0) -59]
Test Case: 586 | Input/Output: [(-83 79 13 99) -83]
Test Case: 587 | Input/Output: [(-46 98 71 89) -46]
Test Case: 588 | Input/Output: [(25 88 2 -16) -16]
Test Case: 589 | Input/Output: [(-62 -44 -10 32) -62]
Test Case: 590 | Input/Output: [(-93 23 -76 -82) -93]
Test Case: 591 | Input/Output: [(61 20 94 61) 20]
Test Case: 592 | Input/Output: [(-8 -18 72 -53) -53]
Test Case: 593 | Input/Output: [(-5 23 53 50) -5]
Test Case: 594 | Input/Output: [(-37 46 -60 97) -60]
Test Case: 595 | Input/Output: [(100 23 -70 -81) -81]
Test Case: 596 | Input/Output: [(71 40 0 -34) -34]
Test Case: 597 | Input/Output: [(45 -62 89 100) -62]
Test Case: 598 | Input/Output: [(-41 87 11 47) -41]
Test Case: 599 | Input/Output: [(-76 15 -56 62) -76]
Test Case: 600 | Input/Output: [(-57 -92 100 -14) -92]
Test Case: 601 | Input/Output: [(36 -37 -53 -93) -93]
Test Case: 602 | Input/Output: [(75 -67 -17 -79) -79]
Test Case: 603 | Input/Output: [(10 -66 4 -9) -66]
Test Case: 604 | Input/Output: [(-66 62 -28 -33) -66]
Test Case: 605 | Input/Output: [(4 24 -62 -73) -73]
Test Case: 606 | Input/Output: [(-4 -39 50 6) -39]
Test Case: 607 | Input/Output: [(-57 -16 -55 -5) -57]
Test Case: 608 | Input/Output: [(-98 68 -58 3) -98]
Test Case: 609 | Input/Output: [(86 69 -64 -71) -71]
Test Case: 610 | Input/Output: [(-65 -58 3 46) -65]
Test Case: 611 | Input/Output: [(-88 5 -74 -44) -88]
Test Case: 612 | Input/Output: [(5 44 -50 60) -50]
Test Case: 613 | Input/Output: [(50 -98 79 53) -98]
Test Case: 614 | Input/Output: [(-16 50 2 18) -16]
Test Case: 615 | Input/Output: [(-83 57 83 100) -83]
Test Case: 616 | Input/Output: [(77 -10 -20 17) -20]
Test Case: 617 | Input/Output: [(37 -19 57 94) -19]
Test Case: 618 | Input/Output: [(26 -59 -89 80) -89]
Test Case: 619 | Input/Output: [(-81 -94 43 -13) -94]
Test Case: 620 | Input/Output: [(-53 37 -75 -9) -75]
Test Case: 621 | Input/Output: [(-1 70 -95 -66) -95]
Test Case: 622 | Input/Output: [(-88 44 -18 85) -88]
Test Case: 623 | Input/Output: [(-42 -24 -10 -66) -66]
Test Case: 624 | Input/Output: [(-40 47 57 53) -40]
Test Case: 625 | Input/Output: [(97 32 54 -51) -51]
Test Case: 626 | Input/Output: [(75 34 35 56) 34]
Test Case: 627 | Input/Output: [(3 56 -17 4) -17]
Test Case: 628 | Input/Output: [(59 -4 83 -4) -4]
Test Case: 629 | Input/Output: [(13 -27 -72 63) -72]
Test Case: 630 | Input/Output: [(-23 -65 38 80) -65]
Test Case: 631 | Input/Output: [(15 -52 46 -78) -78]
Test Case: 632 | Input/Output: [(-27 75 82 59) -27]
Test Case: 633 | Input/Output: [(59 -7 -44 62) -44]
Test Case: 634 | Input/Output: [(46 -33 13 35) -33]
Test Case: 635 | Input/Output: [(33 3 -7 -81) -81]
Test Case: 636 | Input/Output: [(47 25 32 -15) -15]
Test Case: 637 | Input/Output: [(31 -54 -95 -11) -95]
Test Case: 638 | Input/Output: [(95 -37 74 4) -37]
Test Case: 639 | Input/Output: [(12 59 23 -83) -83]
Test Case: 640 | Input/Output: [(-95 -40 -9 80) -95]
Test Case: 641 | Input/Output: [(87 83 -90 20) -90]
Test Case: 642 | Input/Output: [(-75 -15 -38 -66) -75]
Test Case: 643 | Input/Output: [(17 -7 -25 42) -25]
Test Case: 644 | Input/Output: [(58 73 61 -4) -4]
Test Case: 645 | Input/Output: [(80 -61 -56 -81) -81]
Test Case: 646 | Input/Output: [(84 -6 -7 47) -7]
Test Case: 647 | Input/Output: [(-35 -75 -51 -60) -75]
Test Case: 648 | Input/Output: [(7 -85 12 75) -85]
Test Case: 649 | Input/Output: [(-21 -80 28 85) -80]
Test Case: 650 | Input/Output: [(-55 90 -63 -66) -66]
Test Case: 651 | Input/Output: [(-44 -31 -99 -89) -99]
Test Case: 652 | Input/Output: [(26 83 86 -8) -8]
Test Case: 653 | Input/Output: [(-12 -70 9 -75) -75]
Test Case: 654 | Input/Output: [(-11 99 -46 65) -46]
Test Case: 655 | Input/Output: [(53 -16 20 99) -16]
Test Case: 656 | Input/Output: [(54 63 93 95) 54]
Test Case: 657 | Input/Output: [(62 -24 -31 -82) -82]
Test Case: 658 | Input/Output: [(63 -7 -59 -80) -80]
Test Case: 659 | Input/Output: [(-78 -91 -35 92) -91]
Test Case: 660 | Input/Output: [(25 7 -17 59) -17]
Test Case: 661 | Input/Output: [(-89 -15 40 -23) -89]
Test Case: 662 | Input/Output: [(89 -26 -23 30) -26]
Test Case: 663 | Input/Output: [(-27 45 -71 53) -71]
Test Case: 664 | Input/Output: [(26 89 61 22) 22]
Test Case: 665 | Input/Output: [(-41 45 73 21) -41]
Test Case: 666 | Input/Output: [(11 42 -42 82) -42]
Test Case: 667 | Input/Output: [(-53 83 -36 -75) -75]
Test Case: 668 | Input/Output: [(96 50 -85 -61) -85]
Test Case: 669 | Input/Output: [(7 -96 -42 -69) -96]
Test Case: 670 | Input/Output: [(-1 -84 -83 -78) -84]
Test Case: 671 | Input/Output: [(79 4 56 55) 4]
Test Case: 672 | Input/Output: [(-3 -57 -54 -17) -57]
Test Case: 673 | Input/Output: [(-76 -40 -35 41) -76]
Test Case: 674 | Input/Output: [(93 100 81 -1) -1]
Test Case: 675 | Input/Output: [(12 -43 -39 50) -43]
Test Case: 676 | Input/Output: [(-19 -22 66 -76) -76]
Test Case: 677 | Input/Output: [(16 95 -85 -97) -97]
Test Case: 678 | Input/Output: [(-78 40 -11 -72) -78]
Test Case: 679 | Input/Output: [(-63 78 25 92) -63]
Test Case: 680 | Input/Output: [(36 24 -50 -100) -100]
Test Case: 681 | Input/Output: [(-25 90 97 -89) -89]
Test Case: 682 | Input/Output: [(47 26 -100 -85) -100]
Test Case: 683 | Input/Output: [(75 -38 -41 52) -41]
Test Case: 684 | Input/Output: [(17 76 -78 -37) -78]
Test Case: 685 | Input/Output: [(78 -45 58 -48) -48]
Test Case: 686 | Input/Output: [(20 11 -46 -20) -46]
Test Case: 687 | Input/Output: [(23 62 46 -87) -87]
Test Case: 688 | Input/Output: [(-30 -64 52 35) -64]
Test Case: 689 | Input/Output: [(85 40 11 1) 1]
Test Case: 690 | Input/Output: [(0 84 2 -8) -8]
Test Case: 691 | Input/Output: [(45 -23 91 -12) -23]
Test Case: 692 | Input/Output: [(-11 -58 46 -74) -74]
Test Case: 693 | Input/Output: [(-77 2 80 -59) -77]
Test Case: 694 | Input/Output: [(65 4 -51 13) -51]
Test Case: 695 | Input/Output: [(52 86 18 -96) -96]
Test Case: 696 | Input/Output: [(-95 21 -10 61) -95]
Test Case: 697 | Input/Output: [(68 93 96 -24) -24]
Test Case: 698 | Input/Output: [(-97 -48 -32 96) -97]
Test Case: 699 | Input/Output: [(-94 -4 -49 -24) -94]
Test Case: 700 | Input/Output: [(97 -37 94 -7) -37]
Test Case: 701 | Input/Output: [(89 -66 55 42) -66]
Test Case: 702 | Input/Output: [(-100 -19 18 32) -100]
Test Case: 703 | Input/Output: [(-83 -4 -29 87) -83]
Test Case: 704 | Input/Output: [(-92 31 -78 -58) -92]
Test Case: 705 | Input/Output: [(15 36 72 41) 15]
Test Case: 706 | Input/Output: [(-73 42 -71 86) -73]
Test Case: 707 | Input/Output: [(78 95 -38 -37) -38]
Test Case: 708 | Input/Output: [(-19 -65 85 -23) -65]
Test Case: 709 | Input/Output: [(-4 82 38 67) -4]
Test Case: 710 | Input/Output: [(9 -82 24 -6) -82]
Test Case: 711 | Input/Output: [(-82 -67 62 -95) -95]
Test Case: 712 | Input/Output: [(0 -3 8 -19) -19]
Test Case: 713 | Input/Output: [(-73 84 59 -56) -73]
Test Case: 714 | Input/Output: [(2 80 -38 52) -38]
Test Case: 715 | Input/Output: [(34 -87 -60 -69) -87]
Test Case: 716 | Input/Output: [(-5 -80 -82 4) -82]
Test Case: 717 | Input/Output: [(-93 60 53 97) -93]
Test Case: 718 | Input/Output: [(42 51 69 77) 42]
Test Case: 719 | Input/Output: [(34 -38 -39 -94) -94]
Test Case: 720 | Input/Output: [(3 -38 -63 -5) -63]
Test Case: 721 | Input/Output: [(29 -15 -94 83) -94]
Test Case: 722 | Input/Output: [(-12 -64 -31 28) -64]
Test Case: 723 | Input/Output: [(69 -72 82 -79) -79]
Test Case: 724 | Input/Output: [(-5 -6 54 -8) -8]
Test Case: 725 | Input/Output: [(71 80 99 45) 45]
Test Case: 726 | Input/Output: [(-82 12 25 -54) -82]
Test Case: 727 | Input/Output: [(-92 -92 100 -60) -92]
Test Case: 728 | Input/Output: [(1 38 69 12) 1]
Test Case: 729 | Input/Output: [(57 58 61 -27) -27]
Test Case: 730 | Input/Output: [(12 -78 17 26) -78]
Test Case: 731 | Input/Output: [(34 -33 49 35) -33]
Test Case: 732 | Input/Output: [(-31 91 -47 16) -47]
Test Case: 733 | Input/Output: [(68 -80 40 -82) -82]
Test Case: 734 | Input/Output: [(88 8 44 -50) -50]
Test Case: 735 | Input/Output: [(-94 94 -5 -12) -94]
Test Case: 736 | Input/Output: [(18 -1 51 11) -1]
Test Case: 737 | Input/Output: [(51 98 55 63) 51]
Test Case: 738 | Input/Output: [(89 -67 -50 -81) -81]
Test Case: 739 | Input/Output: [(31 -77 98 -28) -77]
Test Case: 740 | Input/Output: [(-81 -20 -74 9) -81]
Test Case: 741 | Input/Output: [(8 -76 -2 31) -76]
Test Case: 742 | Input/Output: [(-1 -34 -89 34) -89]
Test Case: 743 | Input/Output: [(16 -74 -47 -50) -74]
Test Case: 744 | Input/Output: [(-44 48 -59 71) -59]
Test Case: 745 | Input/Output: [(68 -17 -91 61) -91]
Test Case: 746 | Input/Output: [(-52 -59 10 4) -59]
Test Case: 747 | Input/Output: [(99 49 -26 44) -26]
Test Case: 748 | Input/Output: [(-24 -36 51 62) -36]
Test Case: 749 | Input/Output: [(-49 51 -62 82) -62]
Test Case: 750 | Input/Output: [(-19 59 -20 -7) -20]
Test Case: 751 | Input/Output: [(57 -100 -100 98) -100]
Test Case: 752 | Input/Output: [(-62 -75 2 65) -75]
Test Case: 753 | Input/Output: [(-75 -78 -80 3) -80]
Test Case: 754 | Input/Output: [(82 52 -89 -17) -89]
Test Case: 755 | Input/Output: [(55 -64 -99 91) -99]
Test Case: 756 | Input/Output: [(-49 87 65 -31) -49]
Test Case: 757 | Input/Output: [(81 99 61 43) 43]
Test Case: 758 | Input/Output: [(-32 33 -25 -64) -64]
Test Case: 759 | Input/Output: [(13 -53 -77 57) -77]
Test Case: 760 | Input/Output: [(74 76 -46 -9) -46]
Test Case: 761 | Input/Output: [(-77 50 96 -99) -99]
Test Case: 762 | Input/Output: [(30 -59 -95 -68) -95]
Test Case: 763 | Input/Output: [(12 12 -50 -10) -50]
Test Case: 764 | Input/Output: [(-2 -11 7 84) -11]
Test Case: 765 | Input/Output: [(1 7 -64 53) -64]
Test Case: 766 | Input/Output: [(37 -59 -98 50) -98]
Test Case: 767 | Input/Output: [(100 26 -60 57) -60]
Test Case: 768 | Input/Output: [(-1 7 -80 14) -80]
Test Case: 769 | Input/Output: [(-94 -58 -43 70) -94]
Test Case: 770 | Input/Output: [(-10 -32 7 -1) -32]
Test Case: 771 | Input/Output: [(40 -1 -89 3) -89]
Test Case: 772 | Input/Output: [(-30 -83 31 15) -83]
Test Case: 773 | Input/Output: [(56 95 15 -67) -67]
Test Case: 774 | Input/Output: [(-86 15 98 -60) -86]
Test Case: 775 | Input/Output: [(80 34 23 -92) -92]
Test Case: 776 | Input/Output: [(90 -22 63 -45) -45]
Test Case: 777 | Input/Output: [(69 -60 24 -67) -67]
Test Case: 778 | Input/Output: [(38 -19 15 -12) -19]
Test Case: 779 | Input/Output: [(16 -54 86 14) -54]
Test Case: 780 | Input/Output: [(36 54 -23 -61) -61]
Test Case: 781 | Input/Output: [(-97 21 52 -7) -97]
Test Case: 782 | Input/Output: [(24 96 51 -24) -24]
Test Case: 783 | Input/Output: [(-77 32 58 -98) -98]
Test Case: 784 | Input/Output: [(85 -78 -57 40) -78]
Test Case: 785 | Input/Output: [(-8 -69 93 78) -69]
Test Case: 786 | Input/Output: [(-54 70 85 96) -54]
Test Case: 787 | Input/Output: [(-18 -87 27 34) -87]
Test Case: 788 | Input/Output: [(22 -42 49 -60) -60]
Test Case: 789 | Input/Output: [(-32 -53 -78 -19) -78]
Test Case: 790 | Input/Output: [(-62 -18 -73 -90) -90]
Test Case: 791 | Input/Output: [(-69 60 55 -19) -69]
Test Case: 792 | Input/Output: [(-13 -13 7 6) -13]
Test Case: 793 | Input/Output: [(-24 98 -53 14) -53]
Test Case: 794 | Input/Output: [(54 54 2 96) 2]
Test Case: 795 | Input/Output: [(-96 -9 -14 26) -96]
Test Case: 796 | Input/Output: [(-32 83 71 -91) -91]
Test Case: 797 | Input/Output: [(-83 -77 -60 -77) -83]
Test Case: 798 | Input/Output: [(20 73 46 -6) -6]
Test Case: 799 | Input/Output: [(21 7 100 -3) -3]
Test Case: 800 | Input/Output: [(-15 61 -43 30) -43]
Test Case: 801 | Input/Output: [(49 93 93 53) 49]
Test Case: 802 | Input/Output: [(-70 27 25 -48) -70]
Test Case: 803 | Input/Output: [(30 51 4 60) 4]
Test Case: 804 | Input/Output: [(-25 -84 20 -65) -84]
Test Case: 805 | Input/Output: [(7 -7 -84 -46) -84]
Test Case: 806 | Input/Output: [(-30 49 65 -80) -80]
Test Case: 807 | Input/Output: [(76 -72 48 28) -72]
Test Case: 808 | Input/Output: [(-27 43 0 -29) -29]
Test Case: 809 | Input/Output: [(8 -24 -91 64) -91]
Test Case: 810 | Input/Output: [(98 49 62 28) 28]
Test Case: 811 | Input/Output: [(-54 -39 91 -16) -54]
Test Case: 812 | Input/Output: [(37 -9 56 2) -9]
Test Case: 813 | Input/Output: [(-31 71 71 -2) -31]
Test Case: 814 | Input/Output: [(26 42 30 -83) -83]
Test Case: 815 | Input/Output: [(-47 80 12 -52) -52]
Test Case: 816 | Input/Output: [(27 -14 -67 -18) -67]
Test Case: 817 | Input/Output: [(-91 72 10 15) -91]
Test Case: 818 | Input/Output: [(12 -26 -83 -6) -83]
Test Case: 819 | Input/Output: [(-16 100 -31 65) -31]
Test Case: 820 | Input/Output: [(3 75 70 -28) -28]
Test Case: 821 | Input/Output: [(-2 -69 91 95) -69]
Test Case: 822 | Input/Output: [(20 27 73 26) 20]
Test Case: 823 | Input/Output: [(-1 1 29 -72) -72]
Test Case: 824 | Input/Output: [(4 63 62 -3) -3]
Test Case: 825 | Input/Output: [(-42 88 39 -11) -42]
Test Case: 826 | Input/Output: [(-71 31 -92 44) -92]
Test Case: 827 | Input/Output: [(-78 27 -100 -58) -100]
Test Case: 828 | Input/Output: [(-98 -100 -23 -56) -100]
Test Case: 829 | Input/Output: [(35 -94 -17 -27) -94]
Test Case: 830 | Input/Output: [(30 -9 82 4) -9]
Test Case: 831 | Input/Output: [(68 -44 70 11) -44]
Test Case: 832 | Input/Output: [(-10 41 -32 16) -32]
Test Case: 833 | Input/Output: [(2 13 84 -98) -98]
Test Case: 834 | Input/Output: [(41 96 28 28) 28]
Test Case: 835 | Input/Output: [(-85 30 -61 -93) -93]
Test Case: 836 | Input/Output: [(43 19 -99 -67) -99]
Test Case: 837 | Input/Output: [(64 32 -87 -10) -87]
Test Case: 838 | Input/Output: [(-58 1 -3 85) -58]
Test Case: 839 | Input/Output: [(-41 50 66 39) -41]
Test Case: 840 | Input/Output: [(72 -51 -34 64) -51]
Test Case: 841 | Input/Output: [(-33 39 -92 33) -92]
Test Case: 842 | Input/Output: [(-60 -93 -46 -75) -93]
Test Case: 843 | Input/Output: [(17 -9 -2 99) -9]
Test Case: 844 | Input/Output: [(-39 39 9 37) -39]
Test Case: 845 | Input/Output: [(-31 -45 -7 67) -45]
Test Case: 846 | Input/Output: [(-84 -97 75 58) -97]
Test Case: 847 | Input/Output: [(-20 15 74 10) -20]
Test Case: 848 | Input/Output: [(-84 -61 -28 5) -84]
Test Case: 849 | Input/Output: [(13 91 -25 -50) -50]
Test Case: 850 | Input/Output: [(84 73 12 95) 12]
Test Case: 851 | Input/Output: [(-42 -38 18 -49) -49]
Test Case: 852 | Input/Output: [(48 -99 -57 89) -99]
Test Case: 853 | Input/Output: [(-20 27 -86 -89) -89]
Test Case: 854 | Input/Output: [(-61 -39 89 76) -61]
Test Case: 855 | Input/Output: [(20 50 -67 -51) -67]
Test Case: 856 | Input/Output: [(97 -34 2 81) -34]
Test Case: 857 | Input/Output: [(68 -94 12 -33) -94]
Test Case: 858 | Input/Output: [(-81 -77 78 -74) -81]
Test Case: 859 | Input/Output: [(82 -42 96 68) -42]
Test Case: 860 | Input/Output: [(-48 -88 14 -61) -88]
Test Case: 861 | Input/Output: [(-27 -82 -82 62) -82]
Test Case: 862 | Input/Output: [(69 -76 3 26) -76]
Test Case: 863 | Input/Output: [(-13 -78 50 6) -78]
Test Case: 864 | Input/Output: [(80 50 -43 65) -43]
Test Case: 865 | Input/Output: [(9 50 5 -32) -32]
Test Case: 866 | Input/Output: [(16 67 1 18) 1]
Test Case: 867 | Input/Output: [(-10 96 45 -66) -66]
Test Case: 868 | Input/Output: [(-76 -60 51 89) -76]
Test Case: 869 | Input/Output: [(2 -38 86 -40) -40]
Test Case: 870 | Input/Output: [(-63 71 93 64) -63]
Test Case: 871 | Input/Output: [(-54 -17 88 -23) -54]
Test Case: 872 | Input/Output: [(-29 -13 -98 -84) -98]
Test Case: 873 | Input/Output: [(21 50 -14 97) -14]
Test Case: 874 | Input/Output: [(-91 -47 48 -53) -91]
Test Case: 875 | Input/Output: [(-36 69 1 -17) -36]
Test Case: 876 | Input/Output: [(-55 73 -43 -50) -55]
Test Case: 877 | Input/Output: [(49 32 62 9) 9]
Test Case: 878 | Input/Output: [(-73 -31 43 63) -73]
Test Case: 879 | Input/Output: [(57 -32 64 96) -32]
Test Case: 880 | Input/Output: [(65 -59 60 -61) -61]
Test Case: 881 | Input/Output: [(93 -14 -75 19) -75]
Test Case: 882 | Input/Output: [(56 31 -20 10) -20]
Test Case: 883 | Input/Output: [(-87 73 76 -86) -87]
Test Case: 884 | Input/Output: [(-21 -81 71 53) -81]
Test Case: 885 | Input/Output: [(44 -40 -33 97) -40]
Test Case: 886 | Input/Output: [(-43 64 -55 45) -55]
Test Case: 887 | Input/Output: [(-17 71 70 35) -17]
Test Case: 888 | Input/Output: [(16 -63 -38 51) -63]
Test Case: 889 | Input/Output: [(37 67 -33 68) -33]
Test Case: 890 | Input/Output: [(-18 -65 -13 11) -65]
Test Case: 891 | Input/Output: [(2 43 -85 61) -85]
Test Case: 892 | Input/Output: [(-56 97 98 66) -56]
Test Case: 893 | Input/Output: [(-47 -86 65 -36) -86]
Test Case: 894 | Input/Output: [(-52 10 98 -29) -52]
Test Case: 895 | Input/Output: [(56 15 42 -7) -7]
Test Case: 896 | Input/Output: [(-20 -99 -76 47) -99]
Test Case: 897 | Input/Output: [(76 -49 4 90) -49]
Test Case: 898 | Input/Output: [(40 91 80 94) 40]
Test Case: 899 | Input/Output: [(45 10 -89 -11) -89]
Test Case: 900 | Input/Output: [(-80 -46 24 46) -80]
Test Case: 901 | Input/Output: [(6 89 -85 -24) -85]
Test Case: 902 | Input/Output: [(97 37 -66 84) -66]
Test Case: 903 | Input/Output: [(-88 33 79 22) -88]
Test Case: 904 | Input/Output: [(57 98 -41 -75) -75]
Test Case: 905 | Input/Output: [(15 -17 -8 16) -17]
Test Case: 906 | Input/Output: [(-36 20 61 -67) -67]
Test Case: 907 | Input/Output: [(-62 -25 15 -63) -63]
Test Case: 908 | Input/Output: [(91 19 -37 -67) -67]
Test Case: 909 | Input/Output: [(6 14 -21 80) -21]
Test Case: 910 | Input/Output: [(48 92 82 48) 48]
Test Case: 911 | Input/Output: [(33 47 -30 90) -30]
Test Case: 912 | Input/Output: [(52 -31 -79 -20) -79]
Test Case: 913 | Input/Output: [(-31 34 36 44) -31]
Test Case: 914 | Input/Output: [(65 90 -85 76) -85]
Test Case: 915 | Input/Output: [(-56 -22 27 -78) -78]
Test Case: 916 | Input/Output: [(-90 -54 88 30) -90]
Test Case: 917 | Input/Output: [(41 62 -75 -92) -92]
Test Case: 918 | Input/Output: [(-78 64 -24 2) -78]
Test Case: 919 | Input/Output: [(-11 15 42 -63) -63]
Test Case: 920 | Input/Output: [(68 9 45 -58) -58]
Test Case: 921 | Input/Output: [(54 6 49 -97) -97]
Test Case: 922 | Input/Output: [(-17 83 63 -6) -17]
Test Case: 923 | Input/Output: [(14 40 87 -47) -47]
Test Case: 924 | Input/Output: [(-90 -30 -1 -59) -90]
Test Case: 925 | Input/Output: [(-38 4 -74 34) -74]
Test Case: 926 | Input/Output: [(18 69 53 70) 18]
Test Case: 927 | Input/Output: [(25 76 1 63) 1]
Test Case: 928 | Input/Output: [(-84 -37 1 -76) -84]
Test Case: 929 | Input/Output: [(-26 -70 61 90) -70]
Test Case: 930 | Input/Output: [(-82 68 67 -46) -82]
Test Case: 931 | Input/Output: [(88 67 30 76) 30]
Test Case: 932 | Input/Output: [(-9 -31 -81 -20) -81]
Test Case: 933 | Input/Output: [(58 7 -73 -100) -100]
Test Case: 934 | Input/Output: [(-52 9 41 -45) -52]
Test Case: 935 | Input/Output: [(68 -26 -67 87) -67]
Test Case: 936 | Input/Output: [(-10 91 46 -47) -47]
Test Case: 937 | Input/Output: [(-99 -29 87 -33) -99]
Test Case: 938 | Input/Output: [(-85 55 35 75) -85]
Test Case: 939 | Input/Output: [(-33 -69 -36 -44) -69]
Test Case: 940 | Input/Output: [(-26 41 50 51) -26]
Test Case: 941 | Input/Output: [(42 -4 76 -95) -95]
Test Case: 942 | Input/Output: [(58 -57 -75 44) -75]
Test Case: 943 | Input/Output: [(99 33 -47 55) -47]
Test Case: 944 | Input/Output: [(18 41 42 47) 18]
Test Case: 945 | Input/Output: [(-77 59 64 18) -77]
Test Case: 946 | Input/Output: [(-36 83 -73 85) -73]
Test Case: 947 | Input/Output: [(-11 3 46 -60) -60]
Test Case: 948 | Input/Output: [(-82 2 -69 60) -82]
Test Case: 949 | Input/Output: [(69 -63 16 24) -63]
Test Case: 950 | Input/Output: [(100 55 63 50) 50]
Test Case: 951 | Input/Output: [(5 -89 -68 -20) -89]
Test Case: 952 | Input/Output: [(-25 -68 25 -72) -72]
Test Case: 953 | Input/Output: [(-93 -1 -59 -25) -93]
Test Case: 954 | Input/Output: [(26 13 30 -80) -80]
Test Case: 955 | Input/Output: [(-28 64 -45 -61) -61]
Test Case: 956 | Input/Output: [(25 -64 -24 -29) -64]
Test Case: 957 | Input/Output: [(8 7 -78 41) -78]
Test Case: 958 | Input/Output: [(75 30 -12 -68) -68]
Test Case: 959 | Input/Output: [(45 -74 -4 40) -74]
Test Case: 960 | Input/Output: [(77 -26 -4 -19) -26]
Test Case: 961 | Input/Output: [(84 -10 14 59) -10]
Test Case: 962 | Input/Output: [(-99 74 67 43) -99]
Test Case: 963 | Input/Output: [(54 18 -22 41) -22]
Test Case: 964 | Input/Output: [(-19 78 38 55) -19]
Test Case: 965 | Input/Output: [(65 0 22 -54) -54]
Test Case: 966 | Input/Output: [(-28 -65 44 6) -65]
Test Case: 967 | Input/Output: [(3 -65 -30 -83) -83]
Test Case: 968 | Input/Output: [(35 -10 98 -67) -67]
Test Case: 969 | Input/Output: [(-7 67 82 33) -7]
Test Case: 970 | Input/Output: [(-79 55 85 87) -79]
Test Case: 971 | Input/Output: [(-28 -70 93 69) -70]
Test Case: 972 | Input/Output: [(-57 -95 -32 -85) -95]
Test Case: 973 | Input/Output: [(6 -1 -23 -62) -62]
Test Case: 974 | Input/Output: [(-76 35 -98 -51) -98]
Test Case: 975 | Input/Output: [(77 -53 -31 -46) -53]
Test Case: 976 | Input/Output: [(-33 45 51 -60) -60]
Test Case: 977 | Input/Output: [(52 40 -44 60) -44]
Test Case: 978 | Input/Output: [(-54 4 -16 -97) -97]
Test Case: 979 | Input/Output: [(-56 -32 89 72) -56]
Test Case: 980 | Input/Output: [(8 36 19 70) 8]
Test Case: 981 | Input/Output: [(-26 19 48 -52) -52]
Test Case: 982 | Input/Output: [(-48 -30 -13 53) -48]
Test Case: 983 | Input/Output: [(34 -70 -49 68) -70]
Test Case: 984 | Input/Output: [(54 -44 -50 9) -50]
Test Case: 985 | Input/Output: [(48 60 6 29) 6]
Test Case: 986 | Input/Output: [(-31 63 71 -63) -63]
Test Case: 987 | Input/Output: [(75 64 -46 -24) -46]
Test Case: 988 | Input/Output: [(-97 -26 10 -51) -97]
Test Case: 989 | Input/Output: [(10 48 52 85) 10]
Test Case: 990 | Input/Output: [(-58 68 14 35) -58]
Test Case: 991 | Input/Output: [(0 -76 -75 89) -76]
Test Case: 992 | Input/Output: [(-28 -97 25 -78) -97]
Test Case: 993 | Input/Output: [(3 89 64 25) 3]
Test Case: 994 | Input/Output: [(-99 -33 -42 86) -99]
Test Case: 995 | Input/Output: [(21 64 54 2) 2]
Test Case: 996 | Input/Output: [(11 48 28 -10) -10]
Test Case: 997 | Input/Output: [(41 -73 29 7) -73]
Test Case: 998 | Input/Output: [(45 -12 -58 10) -58]
Test Case: 999 | Input/Output: [(26 -2 -89 -4) -89]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x30b9728f clojush.problems.software.smallest$fn__7461@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@24b8a393]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:uniform-addition-and-deletion 1.0}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 3000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
random-screen = false
random-seed = -30 -28 121 19 60 -126 -23 19 -119 -20 20 -52 -36 -34 22 -34
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-95 -48 -48 -48] -95] [[18 -44 -44 -44] -44] [[58 58 58 81] 58] [[27 27 -52 27] -52] [[10 -28 10 10] -28] [[-10 8 -10 -10] -10] [[98 98 64 98] 64] [[-82 -82 -82 46] -82] [[-35 -35 -48 -35] -48] [[-17 -55 -55 -55] -55] [(-89 -89 -89 -89) -89] [(65 65 65 65) 65] [(85 85 85 85) 85] [(95 95 95 95) 95] [(-59 -59 -59 -59) -59] [(96 35 59 35) 35] [(98 37 70 94) 37] [(32 65 69 55) 32] [(98 6 28 0) 0] [(69 54 9 1) 1] [(79 35 0 93) 0] [(49 29 84 42) 29] [(29 20 47 81) 20] [(81 16 45 19) 16] [(11 4 29 4) 4] [(53 47 2 94) 2] [(31 79 52 61) 31] [(1 78 27 94) 1] [(29 30 19 44) 19] [(16 11 95 66) 11] [(73 26 31 39) 26] [(78 58 54 82) 54] [(81 24 52 45) 24] [(33 51 97 44) 33] [(6 79 4 30) 4] [(-47 79 -18 -95) -95] [(-23 -65 48 9) -65] [(-57 27 -72 61) -72] [(63 22 89 78) 22] [(90 -63 81 -14) -63] [(-93 8 -53 3) -93] [(-47 38 -3 24) -47] [(-23 -2 24 62) -23] [(67 21 94 -4) -4] [(26 2 -97 -59) -97] [(60 -12 -84 32) -84] [(12 32 47 35) 12] [(-56 90 64 -87) -87] [(59 -2 -47 -20) -47] [(-93 -30 -10 -100) -100] [(29 39 7 58) 7] [(-29 94 -11 -96) -96] [(55 -54 79 38) -54] [(37 -17 43 42) -17] [(91 -44 -6 -94) -94] [(-41 -30 -22 -10) -41] [(29 -67 -39 42) -67] [(22 -13 -81 -25) -81] [(-7 57 -80 -50) -80] [(-33 -31 -17 96) -33] [(-69 -48 41 -96) -96] [(24 15 -38 90) -38] [(-49 -100 34 -46) -100] [(73 15 48 68) 15] [(66 -2 9 90) -2] [(82 -63 -38 -66) -66] [(83 -86 17 99) -86] [(13 56 -39 -89) -89] [(-2 45 -95 35) -95] [(-3 -67 -60 19) -67] [(-65 69 -43 16) -65] [(-36 -91 -7 -76) -91] [(70 38 -43 -78) -78] [(1 -53 70 81) -53] [(-29 -23 30 20) -29] [(-2 93 64 -42) -42] [(-80 -39 -100 -60) -100] [(-96 -89 68 -80) -96] [(-21 44 -43 -61) -61] [(-28 72 -55 -21) -55] [(-92 12 -29 40) -92] [(-23 -7 8 98) -23] [(-100 46 -50 3) -100] [(-90 93 -62 76) -90] [(72 -28 -44 -32) -44] [(-6 -95 37 -58) -95] [(-78 50 -17 -62) -78] [(-88 3 -19 32) -88] [(28 4 -67 4) -67] [(10 81 81 -21) -21] [(45 83 69 34) 34] [(12 39 68 44) 12] [(88 64 -92 -61) -92] [(75 74 59 22) 22] [(-58 18 19 97) -58])
uniform-addition-and-deletion-rate = 0.09
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 650
Test mean error for best: 0.65000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -95                 | Program output: -95                
Correct output: -44                 | Program output: 18                 
Correct output: 58                  | Program output: 58                 
Correct output: -52                 | Program output: 27                 
Correct output: -28                 | Program output: 10                 
Correct output: -10                 | Program output: -10                
Correct output: 64                  | Program output: 98                 
Correct output: -82                 | Program output: -82                
Correct output: -48                 | Program output: -35                
Correct output: -55                 | Program output: -17                
Correct output: -89                 | Program output: -89                
Correct output: 65                  | Program output: 65                 
Correct output: 85                  | Program output: 85                 
Correct output: 95                  | Program output: 95                 
Correct output: -59                 | Program output: -59                
Correct output: 35                  | Program output: 96                 
Correct output: 37                  | Program output: 98                 
Correct output: 32                  | Program output: 32                 
Correct output: 0                   | Program output: 98                 
Correct output: 1                   | Program output: 69                 
Correct output: 0                   | Program output: 79                 
Correct output: 29                  | Program output: 49                 
Correct output: 20                  | Program output: 29                 
Correct output: 16                  | Program output: 81                 
Correct output: 4                   | Program output: 11                 
Correct output: 2                   | Program output: 53                 
Correct output: 31                  | Program output: 31                 
Correct output: 1                   | Program output: 1                  
Correct output: 19                  | Program output: 29                 
Correct output: 11                  | Program output: 16                 
Correct output: 26                  | Program output: 73                 
Correct output: 54                  | Program output: 78                 
Correct output: 24                  | Program output: 81                 
Correct output: 33                  | Program output: 33                 
Correct output: 4                   | Program output: 6                  
Correct output: -95                 | Program output: -47                
Correct output: -65                 | Program output: -23                
Correct output: -72                 | Program output: -57                
Correct output: 22                  | Program output: 63                 
Correct output: -63                 | Program output: 90                 
Correct output: -93                 | Program output: -93                
Correct output: -47                 | Program output: -47                
Correct output: -23                 | Program output: -23                
Correct output: -4                  | Program output: 67                 
Correct output: -97                 | Program output: 26                 
Correct output: -84                 | Program output: 60                 
Correct output: 12                  | Program output: 12                 
Correct output: -87                 | Program output: -56                
Correct output: -47                 | Program output: 59                 
Correct output: -100                | Program output: -93                
Correct output: 7                   | Program output: 29                 
Correct output: -96                 | Program output: -29                
Correct output: -54                 | Program output: 55                 
Correct output: -17                 | Program output: 37                 
Correct output: -94                 | Program output: 91                 
Correct output: -41                 | Program output: -41                
Correct output: -67                 | Program output: 29                 
Correct output: -81                 | Program output: 22                 
Correct output: -80                 | Program output: -7                 
Correct output: -33                 | Program output: -33                
Correct output: -96                 | Program output: -69                
Correct output: -38                 | Program output: 24                 
Correct output: -100                | Program output: -49                
Correct output: 15                  | Program output: 73                 
Correct output: -2                  | Program output: 66                 
Correct output: -66                 | Program output: 82                 
Correct output: -86                 | Program output: 83                 
Correct output: -89                 | Program output: 13                 
Correct output: -95                 | Program output: -2                 
Correct output: -67                 | Program output: -3                 
Correct output: -65                 | Program output: -65                
Correct output: -91                 | Program output: -36                
Correct output: -78                 | Program output: 70                 
Correct output: -53                 | Program output: 1                  
Correct output: -29                 | Program output: -29                
Correct output: -42                 | Program output: -2                 
Correct output: -100                | Program output: -80                
Correct output: -96                 | Program output: -96                
Correct output: -61                 | Program output: -21                
Correct output: -55                 | Program output: -28                
Correct output: -92                 | Program output: -92                
Correct output: -23                 | Program output: -23                
Correct output: -100                | Program output: -100               
Correct output: -90                 | Program output: -90                
Correct output: -44                 | Program output: 72                 
Correct output: -95                 | Program output: -6                 
Correct output: -78                 | Program output: -78                
Correct output: -88                 | Program output: -88                
Correct output: -67                 | Program output: 28                 
Correct output: -21                 | Program output: 10                 
Correct output: 34                  | Program output: 45                 
Correct output: 12                  | Program output: 12                 
Correct output: -92                 | Program output: 88                 
Correct output: 22                  | Program output: 75                 
Correct output: -58                 | Program output: -58                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction boolean_swap} {:close 2, :instruction exec_shove} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_y} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_swap} {:close 1, :instruction print_integer} {:close 0, :instruction tag_boolean_63} {:close 0, :instruction exec_eq} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_not} {:close 1, :instruction boolean_shove} {:close 0, :instruction print_exec} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup} {:close 0, :instruction -11} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_flush})
Lexicase best program: (exec_eq boolean_swap exec_shove () in1 print_integer integer_flush boolean_invert_first_then_and print_integer boolean_invert_first_then_and integer_pop integer_div exec_dup_items exec_dup_times () integer_sub exec_y () in4 exec_stackdepth exec_yankdup integer_yankdup exec_swap (print_integer) (tag_boolean_63 exec_eq in3 boolean_not boolean_not integer_dup_times integer_gt integer_dec integer_eq boolean_not) boolean_shove print_exec (integer_inc boolean_dup -11 boolean_invert_second_then_and exec_flush exec_do*count (integer_flush)))
Lexicase best errors: [0 0 1 0 1 1 0 0 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 48
Percent parens: 0.167
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction boolean_swap} {:close 2, :instruction exec_shove} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_y} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_swap} {:close 1, :instruction print_integer} {:close 0, :instruction tag_boolean_63} {:close 0, :instruction exec_eq} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_not} {:close 1, :instruction boolean_shove} {:close 0, :instruction print_exec} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup} {:close 0, :instruction -11} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_flush})
Zero cases best program: (exec_eq boolean_swap exec_shove () in1 print_integer integer_flush boolean_invert_first_then_and print_integer boolean_invert_first_then_and integer_pop integer_div exec_dup_items exec_dup_times () integer_sub exec_y () in4 exec_stackdepth exec_yankdup integer_yankdup exec_swap (print_integer) (tag_boolean_63 exec_eq in3 boolean_not boolean_not integer_dup_times integer_gt integer_dec integer_eq boolean_not) boolean_shove print_exec (integer_inc boolean_dup -11 boolean_invert_second_then_and exec_flush exec_do*count (integer_flush)))
Zero cases best errors: [0 0 1 0 1 1 0 0 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 48
Percent parens: 0.167
--- Lexicase Population Statistics ---
Count of elite individuals by case: (12 8 3 3 4 3 2 2 4 3)
Population mean number of elite cases: 0.04
Count of perfect (error zero) individuals by case: (12 8 3 3 4 3 2 2 4 3)
Population mean number of perfect (error zero) cases: 0.04
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_add} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 1, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction integer_pop} {:close 1, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_yank} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction integer_add} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction exec_flush} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_empty} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_invert_second_then_and})
Best program: (integer_dup_items exec_dup_times (integer_min) boolean_dup_items integer_lt integer_rot integer_mult exec_empty integer_dec integer_dec integer_mod integer_add integer_gt exec_dup_items integer_add in1 in3 in1 integer_add integer_pop in2 integer_dup exec_stackdepth exec_dup_items exec_shove (integer_rot) boolean_yank in2 boolean_frominteger integer_sub print_integer integer_add exec_stackdepth integer_div integer_fromboolean exec_flush exec_do*count (boolean_shove exec_empty) print_boolean exec_s (integer_dup_times boolean_and integer_dup_times integer_lt exec_empty exec_yank boolean_invert_second_then_and) () ())
Errors: [0 0 1 0 1 1 0 0 1 1]
Total: 5
Mean: 0.5
Genome size: 48
Size: 55
Percent parens: 0.127
--- Population Statistics ---
Average total errors in population: 9.956
Median total errors in population: 10
Error averages by case: (0.988 0.992 0.997 0.997 0.996 0.997 0.998 0.998 0.996 0.997)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 52.1
Average program size in population (points): 71.45
Average percent parens in population: 0.276
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.281
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 500458
--- Timings ---
Current time: 1559594110028 milliseconds
Total Time:           2.6 seconds
Initialization:       0.1 seconds,  3.8%
Reproduction:         0.8 seconds, 29.2%
Fitness Testing:      1.7 seconds, 66.9%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 632
Test mean error for best: 0.63200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -95                 | Program output: -48                
Correct output: -44                 | Program output: -44                
Correct output: 58                  | Program output: 58                 
Correct output: -52                 | Program output: 27                 
Correct output: -28                 | Program output: -28                
Correct output: -10                 | Program output: 8                  
Correct output: 64                  | Program output: 98                 
Correct output: -82                 | Program output: -82                
Correct output: -48                 | Program output: -35                
Correct output: -55                 | Program output: -55                
Correct output: -89                 | Program output: -89                
Correct output: 65                  | Program output: 65                 
Correct output: 85                  | Program output: 85                 
Correct output: 95                  | Program output: 95                 
Correct output: -59                 | Program output: -59                
Correct output: 35                  | Program output: 35                 
Correct output: 37                  | Program output: 37                 
Correct output: 32                  | Program output: 65                 
Correct output: 0                   | Program output: 6                  
Correct output: 1                   | Program output: 54                 
Correct output: 0                   | Program output: 35                 
Correct output: 29                  | Program output: 29                 
Correct output: 20                  | Program output: 20                 
Correct output: 16                  | Program output: 16                 
Correct output: 4                   | Program output: 4                  
Correct output: 2                   | Program output: 47                 
Correct output: 31                  | Program output: 79                 
Correct output: 1                   | Program output: 78                 
Correct output: 19                  | Program output: 30                 
Correct output: 11                  | Program output: 11                 
Correct output: 26                  | Program output: 26                 
Correct output: 54                  | Program output: 58                 
Correct output: 24                  | Program output: 24                 
Correct output: 33                  | Program output: 51                 
Correct output: 4                   | Program output: 79                 
Correct output: -95                 | Program output: 79                 
Correct output: -65                 | Program output: -65                
Correct output: -72                 | Program output: 27                 
Correct output: 22                  | Program output: 22                 
Correct output: -63                 | Program output: -63                
Correct output: -93                 | Program output: 8                  
Correct output: -47                 | Program output: 38                 
Correct output: -23                 | Program output: -2                 
Correct output: -4                  | Program output: 21                 
Correct output: -97                 | Program output: 2                  
Correct output: -84                 | Program output: -12                
Correct output: 12                  | Program output: 32                 
Correct output: -87                 | Program output: 90                 
Correct output: -47                 | Program output: -2                 
Correct output: -100                | Program output: -30                
Correct output: 7                   | Program output: 39                 
Correct output: -96                 | Program output: 94                 
Correct output: -54                 | Program output: -54                
Correct output: -17                 | Program output: -17                
Correct output: -94                 | Program output: -44                
Correct output: -41                 | Program output: -30                
Correct output: -67                 | Program output: -67                
Correct output: -81                 | Program output: -13                
Correct output: -80                 | Program output: 57                 
Correct output: -33                 | Program output: -31                
Correct output: -96                 | Program output: -48                
Correct output: -38                 | Program output: 15                 
Correct output: -100                | Program output: -100               
Correct output: 15                  | Program output: 15                 
Correct output: -2                  | Program output: -2                 
Correct output: -66                 | Program output: -63                
Correct output: -86                 | Program output: -86                
Correct output: -89                 | Program output: 56                 
Correct output: -95                 | Program output: 45                 
Correct output: -67                 | Program output: -67                
Correct output: -65                 | Program output: 69                 
Correct output: -91                 | Program output: -91                
Correct output: -78                 | Program output: 38                 
Correct output: -53                 | Program output: -53                
Correct output: -29                 | Program output: -23                
Correct output: -42                 | Program output: 93                 
Correct output: -100                | Program output: -39                
Correct output: -96                 | Program output: -89                
Correct output: -61                 | Program output: 44                 
Correct output: -55                 | Program output: 72                 
Correct output: -92                 | Program output: 12                 
Correct output: -23                 | Program output: -7                 
Correct output: -100                | Program output: 46                 
Correct output: -90                 | Program output: 93                 
Correct output: -44                 | Program output: -28                
Correct output: -95                 | Program output: -95                
Correct output: -78                 | Program output: 50                 
Correct output: -88                 | Program output: 3                  
Correct output: -67                 | Program output: 4                  
Correct output: -21                 | Program output: 81                 
Correct output: 34                  | Program output: 83                 
Correct output: 12                  | Program output: 39                 
Correct output: -92                 | Program output: 64                 
Correct output: 22                  | Program output: 74                 
Correct output: -58                 | Program output: 18                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_add} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction boolean_and} {:close 0, :instruction in3} {:close 1, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_eq} {:close 1, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_yank} {:close 0, :instruction in2} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction integer_add} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_div} {:close 2, :instruction exec_flush} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_invert_second_then_and})
Lexicase best program: (integer_dup_items exec_dup_times (integer_min) boolean_dup_items integer_lt integer_rot boolean_swap integer_mult exec_empty integer_dec integer_dec integer_mod integer_add integer_gt exec_dup_items integer_add in1 boolean_and in3 in1 integer_add integer_pop exec_eq in2 integer_dup exec_stackdepth exec_shove (integer_rot) boolean_yank in2 integer_sub print_integer integer_add exec_stackdepth integer_div exec_flush exec_do*count (boolean_shove exec_empty) exec_s (integer_dup_times boolean_and integer_dup_times exec_s_when_autoconstructing (integer_lt boolean_shove exec_yank boolean_invert_second_then_and) () ()) () ())
Lexicase best errors: [0 1 0 1 1 1 1 1 0 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 58
Percent parens: 0.172
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_add} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction boolean_and} {:close 0, :instruction in3} {:close 1, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_eq} {:close 1, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_yank} {:close 0, :instruction in2} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction integer_add} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_div} {:close 2, :instruction exec_flush} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_invert_second_then_and})
Zero cases best program: (integer_dup_items exec_dup_times (integer_min) boolean_dup_items integer_lt integer_rot boolean_swap integer_mult exec_empty integer_dec integer_dec integer_mod integer_add integer_gt exec_dup_items integer_add in1 boolean_and in3 in1 integer_add integer_pop exec_eq in2 integer_dup exec_stackdepth exec_shove (integer_rot) boolean_yank in2 integer_sub print_integer integer_add exec_stackdepth integer_div exec_flush exec_do*count (boolean_shove exec_empty) exec_s (integer_dup_times boolean_and integer_dup_times exec_s_when_autoconstructing (integer_lt boolean_shove exec_yank boolean_invert_second_then_and) () ()) () ())
Zero cases best errors: [0 1 0 1 1 1 1 1 0 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 58
Percent parens: 0.172
--- Lexicase Population Statistics ---
Count of elite individuals by case: (114 63 116 173 82 83 86 178 177 368)
Population mean number of elite cases: 1.44
Count of perfect (error zero) individuals by case: (114 63 116 173 82 83 86 178 177 368)
Population mean number of perfect (error zero) cases: 1.44
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_lt} {:close 1, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction in2} {:close 1, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_eq} {:close 0, :instruction in1} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup_items} {:close 2, :instruction integer_gte} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_while} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_swap} {:close 1, :instruction integer_gte} {:close 1, :instruction 85} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_noop} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gte} {:close 0, :instruction -40} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_dup_items} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_stackdepth})
Best program: (integer_lt integer_eq in2 exec_do*while (boolean_dup_items integer_min in2 integer_dup_times) print_integer boolean_shove print_integer boolean_shove integer_sub boolean_pop print_integer boolean_dup_items boolean_invert_second_then_and exec_k (boolean_rot exec_eq boolean_flush integer_yank exec_pop () integer_shove boolean_frominteger boolean_yankdup boolean_dup exec_eq in1 exec_noop) (boolean_not exec_dup_items print_boolean) exec_do*range (integer_dup_items integer_gte) exec_s (boolean_dup_items integer_swap exec_while () exec_dup (boolean_or boolean_shove integer_eq exec_s_when_autoconstructing (boolean_swap) (integer_gte) (85) exec_do*times () integer_swap boolean_frominteger exec_while (integer_dup_times integer_flush exec_noop) integer_gte) boolean_dup integer_swap integer_mod integer_dup_items) (integer_min boolean_stackdepth) (integer_dup_items exec_when (in3 integer_dup_times) integer_inc integer_gte -40 integer_gt in2 exec_k () (boolean_rot integer_eq boolean_yankdup boolean_and integer_div boolean_xor) exec_if (boolean_not integer_gte exec_dup_items) (exec_while () boolean_frominteger) integer_swap integer_empty exec_k_when_autoconstructing (print_integer boolean_pop) (exec_do*while (exec_y_when_autoconstructing (print_exec (boolean_eq integer_mult integer_mult) exec_y_when_autoconstructing (boolean_eq exec_do*while (integer_yank boolean_and exec_eq exec_stackdepth)))))))
Errors: [0 1 0 1 1 1 1 1 0 0]
Total: 6
Mean: 0.6
Genome size: 102
Size: 131
Percent parens: 0.221
--- Population Statistics ---
Average total errors in population: 8.56
Median total errors in population: 10
Error averages by case: (0.886 0.937 0.884 0.827 0.918 0.917 0.914 0.822 0.823 0.632)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 51.872
Average program size in population (points): 66.006
Average percent parens in population: 0.206
Minimum age in population: 1.0
Maximum age in population: 1.0
Average age in population: 1.0
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.999
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.999
Total error diversity:				 0.005
Error (vector) diversity:			 0.028
Behavioral diversity:				 0.256
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 1127603
--- Timings ---
Current time: 1559594112607 milliseconds
Total Time:           5.0 seconds
Initialization:       0.1 seconds,  2.0%
Reproduction:         1.9 seconds, 37.5%
Fitness Testing:      2.6 seconds, 52.0%
Report:               0.4 seconds,  8.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 483
Test mean error for best: 0.48300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -95                 | Program output: -48                
Correct output: -44                 | Program output: -44                
Correct output: 58                  | Program output: 58                 
Correct output: -52                 | Program output: -52                
Correct output: -28                 | Program output: 0N                 
Correct output: -10                 | Program output: -10                
Correct output: 64                  | Program output: 64                 
Correct output: -82                 | Program output: -82                
Correct output: -48                 | Program output: -48                
Correct output: -55                 | Program output: -55                
Correct output: -89                 | Program output: -89                
Correct output: 65                  | Program output: 65                 
Correct output: 85                  | Program output: 85                 
Correct output: 95                  | Program output: 95                 
Correct output: -59                 | Program output: -59                
Correct output: 35                  | Program output: 59                 
Correct output: 37                  | Program output: 70                 
Correct output: 32                  | Program output: 32                 
Correct output: 0                   | Program output: 28                 
Correct output: 1                   | Program output: 9                  
Correct output: 0                   | Program output: 0                  
Correct output: 29                  | Program output: 49                 
Correct output: 20                  | Program output: 29                 
Correct output: 16                  | Program output: 45                 
Correct output: 4                   | Program output: 1                  
Correct output: 2                   | Program output: 2                  
Correct output: 31                  | Program output: 31                 
Correct output: 1                   | Program output: 1                  
Correct output: 19                  | Program output: 19                 
Correct output: 11                  | Program output: 16                 
Correct output: 26                  | Program output: 31                 
Correct output: 54                  | Program output: 54                 
Correct output: 24                  | Program output: 52                 
Correct output: 33                  | Program output: 33                 
Correct output: 4                   | Program output: 4                  
Correct output: -95                 | Program output: -47                
Correct output: -65                 | Program output: 0N                 
Correct output: -72                 | Program output: -72                
Correct output: 22                  | Program output: 63                 
Correct output: -63                 | Program output: -1N                
Correct output: -93                 | Program output: -93                
Correct output: -47                 | Program output: -47                
Correct output: -23                 | Program output: 11N                
Correct output: -4                  | Program output: 67                 
Correct output: -97                 | Program output: 0N                 
Correct output: -84                 | Program output: -84                
Correct output: 12                  | Program output: 12                 
Correct output: -87                 | Program output: -56                
Correct output: -47                 | Program output: -47                
Correct output: -100                | Program output: -10                
Correct output: 7                   | Program output: 7                  
Correct output: -96                 | Program output: -29                
Correct output: -54                 | Program output: -1N                
Correct output: -17                 | Program output: -2N                
Correct output: -94                 | Program output: -6                 
Correct output: -41                 | Program output: -22                
Correct output: -67                 | Program output: -39                
Correct output: -81                 | Program output: -81                
Correct output: -80                 | Program output: -80                
Correct output: -33                 | Program output: -17                
Correct output: -96                 | Program output: 1N                 
Correct output: -38                 | Program output: -38                
Correct output: -100                | Program output: 0N                 
Correct output: 15                  | Program output: 48                 
Correct output: -2                  | Program output: -33                
Correct output: -66                 | Program output: -38                
Correct output: -86                 | Program output: 0N                 
Correct output: -89                 | Program output: -39                
Correct output: -95                 | Program output: -95                
Correct output: -67                 | Program output: -60                
Correct output: -65                 | Program output: -65                
Correct output: -91                 | Program output: -7                 
Correct output: -78                 | Program output: -43                
Correct output: -53                 | Program output: 0N                 
Correct output: -29                 | Program output: 1N                 
Correct output: -42                 | Program output: -2                 
Correct output: -100                | Program output: -100               
Correct output: -96                 | Program output: 1N                 
Correct output: -61                 | Program output: -43                
Correct output: -55                 | Program output: -55                
Correct output: -92                 | Program output: -92                
Correct output: -23                 | Program output: 3N                 
Correct output: -100                | Program output: -100               
Correct output: -90                 | Program output: -90                
Correct output: -44                 | Program output: -44                
Correct output: -95                 | Program output: 0N                 
Correct output: -78                 | Program output: -78                
Correct output: -88                 | Program output: -88                
Correct output: -67                 | Program output: 0N                 
Correct output: -21                 | Program output: 10                 
Correct output: 34                  | Program output: 45                 
Correct output: 12                  | Program output: 12                 
Correct output: -92                 | Program output: -92                
Correct output: 22                  | Program output: 59                 
Correct output: -58                 | Program output: -58                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_min} {:close 1, :instruction integer_dup_times} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 2, :instruction boolean_shove} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 1, :instruction print_boolean} {:close 2, :instruction integer_gte} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_while} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_gte} {:close 1, :instruction 85} {:close 1, :instruction exec_do*times} {:close 0, :instruction 77} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_when} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_not} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_dup_items} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_and})
Lexicase best program: (in3 in2 exec_do*while (exec_stackdepth boolean_dup_items integer_min integer_dup_times) exec_k_when_autoconstructing () (print_integer boolean_shove boolean_shove) exec_pop (integer_shove) integer_sub boolean_pop integer_lte exec_k (boolean_rot exec_eq boolean_flush boolean_empty) (exec_shove (exec_pop () integer_shove boolean_frominteger boolean_dup exec_eq boolean_dup_times in1 exec_noop) boolean_not exec_dup_items print_boolean) integer_gte integer_sub integer_swap exec_while () exec_dup (boolean_or boolean_shove integer_eq boolean_swap) exec_yankdup integer_gte 85 exec_do*times () 77 integer_inc integer_swap integer_dup_times integer_flush integer_swap integer_mod integer_min boolean_stackdepth integer_dup_items exec_when (integer_dup_times) integer_inc integer_gte integer_gt in2 exec_k () (boolean_rot integer_eq boolean_yankdup integer_div boolean_xor) integer_shove boolean_not boolean_frominteger integer_gte exec_dup_items exec_empty exec_dup_items exec_while () boolean_frominteger exec_stackdepth integer_swap integer_eq integer_empty exec_k_when_autoconstructing (exec_swap (exec_stackdepth print_integer boolean_xor) (boolean_pop) integer_dup_items exec_do*while (exec_y_when_autoconstructing (integer_mod) exec_do*while (exec_stackdepth boolean_eq integer_mult exec_y_when_autoconstructing (boolean_eq exec_do*while (exec_noop boolean_and))))) ())
Lexicase best errors: [0 0 1 0 0 1 0 1 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 125
Percent parens: 0.200
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_min} {:close 1, :instruction integer_dup_times} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 2, :instruction boolean_shove} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 1, :instruction print_boolean} {:close 2, :instruction integer_gte} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_while} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_gte} {:close 1, :instruction 85} {:close 1, :instruction exec_do*times} {:close 0, :instruction 77} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_when} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_not} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_dup_items} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_and})
Zero cases best program: (in3 in2 exec_do*while (exec_stackdepth boolean_dup_items integer_min integer_dup_times) exec_k_when_autoconstructing () (print_integer boolean_shove boolean_shove) exec_pop (integer_shove) integer_sub boolean_pop integer_lte exec_k (boolean_rot exec_eq boolean_flush boolean_empty) (exec_shove (exec_pop () integer_shove boolean_frominteger boolean_dup exec_eq boolean_dup_times in1 exec_noop) boolean_not exec_dup_items print_boolean) integer_gte integer_sub integer_swap exec_while () exec_dup (boolean_or boolean_shove integer_eq boolean_swap) exec_yankdup integer_gte 85 exec_do*times () 77 integer_inc integer_swap integer_dup_times integer_flush integer_swap integer_mod integer_min boolean_stackdepth integer_dup_items exec_when (integer_dup_times) integer_inc integer_gte integer_gt in2 exec_k () (boolean_rot integer_eq boolean_yankdup integer_div boolean_xor) integer_shove boolean_not boolean_frominteger integer_gte exec_dup_items exec_empty exec_dup_items exec_while () boolean_frominteger exec_stackdepth integer_swap integer_eq integer_empty exec_k_when_autoconstructing (exec_swap (exec_stackdepth print_integer boolean_xor) (boolean_pop) integer_dup_items exec_do*while (exec_y_when_autoconstructing (integer_mod) exec_do*while (exec_stackdepth boolean_eq integer_mult exec_y_when_autoconstructing (boolean_eq exec_do*while (exec_noop boolean_and))))) ())
Zero cases best errors: [0 0 1 0 0 1 0 1 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 125
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (98 122 132 155 98 134 295 134 122 68)
Population mean number of elite cases: 1.36
Count of perfect (error zero) individuals by case: (98 122 132 155 98 134 295 134 122 68)
Population mean number of perfect (error zero) cases: 1.36
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_min} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_add} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 1, :instruction in1} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_div} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction print_integer} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_lte} {:close 2, :instruction exec_flush} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_empty} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_y} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_invert_second_then_and})
Best program: (integer_dup_items integer_min integer_lt exec_empty integer_sub integer_dec integer_swap integer_dec integer_add integer_gt exec_dup_items integer_add in1 in3 in1 exec_y_when_autoconstructing (in2) integer_dup exec_stackdepth exec_dup_items exec_shove (integer_div integer_rot) boolean_yank integer_min in2 boolean_frominteger print_integer integer_empty integer_add exec_stackdepth integer_div integer_fromboolean integer_lte exec_flush exec_do*count (boolean_shove exec_empty) print_boolean exec_s (integer_dup_times boolean_and integer_dup_times integer_lt exec_y (exec_empty exec_yank boolean_invert_second_then_and)) () ())
Errors: [0 0 1 1 0 0 1 0 0 1]
Total: 4
Mean: 0.4
Genome size: 48
Size: 56
Percent parens: 0.143
--- Population Statistics ---
Average total errors in population: 8.642
Median total errors in population: 10
Error averages by case: (0.902 0.878 0.868 0.845 0.902 0.866 0.705 0.866 0.878 0.932)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 54.809
Average program size in population (points): 68.503
Average percent parens in population: 0.190
Minimum age in population: 2.0
Maximum age in population: 2.0
Average age in population: 2.0
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.007
Error (vector) diversity:			 0.029
Behavioral diversity:				 0.283
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1783086
--- Timings ---
Current time: 1559594114928 milliseconds
Total Time:           7.6 seconds
Initialization:       0.1 seconds,  1.3%
Reproduction:         3.0 seconds, 40.1%
Fitness Testing:      3.4 seconds, 44.7%
Report:               1.1 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 413
Test mean error for best: 0.41300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -95                 | Program output: -48                
Correct output: -44                 | Program output: -44                
Correct output: 58                  | Program output: 58                 
Correct output: -52                 | Program output: -52                
Correct output: -28                 | Program output: -28                
Correct output: -10                 | Program output: -10                
Correct output: 64                  | Program output: 64                 
Correct output: -82                 | Program output: -82                
Correct output: -48                 | Program output: -48                
Correct output: -55                 | Program output: -55                
Correct output: -89                 | Program output: -89                
Correct output: 65                  | Program output: 65                 
Correct output: 85                  | Program output: 85                 
Correct output: 95                  | Program output: 95                 
Correct output: -59                 | Program output: -59                
Correct output: 35                  | Program output: 35                 
Correct output: 37                  | Program output: 37                 
Correct output: 32                  | Program output: 65                 
Correct output: 0                   | Program output: 6                  
Correct output: 1                   | Program output: 9                  
Correct output: 0                   | Program output: 0                  
Correct output: 29                  | Program output: 29                 
Correct output: 20                  | Program output: 20                 
Correct output: 16                  | Program output: 16                 
Correct output: 4                   | Program output: 4                  
Correct output: 2                   | Program output: 2                  
Correct output: 31                  | Program output: 52                 
Correct output: 1                   | Program output: 27                 
Correct output: 19                  | Program output: 19                 
Correct output: 11                  | Program output: 11                 
Correct output: 26                  | Program output: 26                 
Correct output: 54                  | Program output: 54                 
Correct output: 24                  | Program output: 24                 
Correct output: 33                  | Program output: 51                 
Correct output: 4                   | Program output: 4                  
Correct output: -95                 | Program output: -18                
Correct output: -65                 | Program output: -65                
Correct output: -72                 | Program output: -72                
Correct output: 22                  | Program output: 22                 
Correct output: -63                 | Program output: -63                
Correct output: -93                 | Program output: -53                
Correct output: -47                 | Program output: -3                 
Correct output: -23                 | Program output: -2                 
Correct output: -4                  | Program output: 21                 
Correct output: -97                 | Program output: -97                
Correct output: -84                 | Program output: -84                
Correct output: 12                  | Program output: 32                 
Correct output: -87                 | Program output: 64                 
Correct output: -47                 | Program output: -47                
Correct output: -100                | Program output: -30                
Correct output: 7                   | Program output: 7                  
Correct output: -96                 | Program output: -11                
Correct output: -54                 | Program output: -54                
Correct output: -17                 | Program output: -17                
Correct output: -94                 | Program output: -44                
Correct output: -41                 | Program output: -30                
Correct output: -67                 | Program output: -67                
Correct output: -81                 | Program output: -81                
Correct output: -80                 | Program output: -80                
Correct output: -33                 | Program output: -31                
Correct output: -96                 | Program output: -48                
Correct output: -38                 | Program output: -38                
Correct output: -100                | Program output: -100               
Correct output: 15                  | Program output: 15                 
Correct output: -2                  | Program output: -2                 
Correct output: -66                 | Program output: -63                
Correct output: -86                 | Program output: -86                
Correct output: -89                 | Program output: -39                
Correct output: -95                 | Program output: -95                
Correct output: -67                 | Program output: -67                
Correct output: -65                 | Program output: -43                
Correct output: -91                 | Program output: -91                
Correct output: -78                 | Program output: -43                
Correct output: -53                 | Program output: -53                
Correct output: -29                 | Program output: -23                
Correct output: -42                 | Program output: 64                 
Correct output: -100                | Program output: -100               
Correct output: -96                 | Program output: -89                
Correct output: -61                 | Program output: -43                
Correct output: -55                 | Program output: -55                
Correct output: -92                 | Program output: -29                
Correct output: -23                 | Program output: -7                 
Correct output: -100                | Program output: -50                
Correct output: -90                 | Program output: -62                
Correct output: -44                 | Program output: -44                
Correct output: -95                 | Program output: -95                
Correct output: -78                 | Program output: -17                
Correct output: -88                 | Program output: -19                
Correct output: -67                 | Program output: -67                
Correct output: -21                 | Program output: 81                 
Correct output: 34                  | Program output: 69                 
Correct output: 12                  | Program output: 39                 
Correct output: -92                 | Program output: -92                
Correct output: 22                  | Program output: 59                 
Correct output: -58                 | Program output: 18                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_if} {:close 1, :instruction integer_eq} {:close 1, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_min} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 2, :instruction boolean_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_dup_items} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_empty} {:close 2, :instruction integer_gte} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_while} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_rot} {:close 0, :instruction tag_integer_8} {:close 1, :instruction integer_gte} {:close 1, :instruction 85} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_noop} {:close 0, :instruction 77} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_gte} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction in2} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_mod} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_and})
Lexicase best program: (exec_if (integer_eq) (in3) in2 exec_do*while (exec_stackdepth boolean_dup_items integer_min integer_dup_times) boolean_dup_times print_integer boolean_shove boolean_shove integer_shove integer_sub boolean_pop integer_lte boolean_dup_items exec_k (boolean_rot exec_eq boolean_flush boolean_empty) (integer_yank exec_shove (integer_dup integer_shove boolean_swap boolean_yankdup boolean_dup exec_eq exec_noop) exec_dup_items print_boolean) boolean_empty integer_gte integer_swap exec_while () exec_dup (exec_y_when_autoconstructing (boolean_or boolean_shove integer_eq boolean_swap) boolean_rot tag_integer_8 integer_gte) 85 exec_do*times () exec_noop 77 exec_noop integer_inc integer_swap integer_flush boolean_yank integer_gte print_integer integer_mod integer_dup_items integer_min in2 boolean_stackdepth exec_when (integer_empty) integer_empty in3 integer_dup_times integer_inc integer_gte integer_gt exec_k () (boolean_rot integer_eq boolean_yankdup boolean_and print_integer integer_div boolean_xor) integer_shove boolean_not integer_gte exec_dup_items integer_gte exec_while () boolean_frominteger exec_stackdepth integer_empty exec_k_when_autoconstructing (print_integer boolean_xor) (boolean_pop) integer_dup_items exec_do*while (integer_gt exec_y_when_autoconstructing (integer_mod) print_exec (boolean_eq integer_mult exec_y_when_autoconstructing (boolean_eq integer_mod exec_do*while (boolean_and)))))
Lexicase best errors: [0 0 1 1 0 1 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 127
Percent parens: 0.173
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_if} {:close 1, :instruction integer_eq} {:close 1, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_min} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 2, :instruction boolean_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_dup_items} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_empty} {:close 2, :instruction integer_gte} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_while} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_rot} {:close 0, :instruction tag_integer_8} {:close 1, :instruction integer_gte} {:close 1, :instruction 85} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_noop} {:close 0, :instruction 77} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_gte} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction in2} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_when} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_mod} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_and})
Zero cases best program: (exec_if (integer_eq) (in3) in2 exec_do*while (exec_stackdepth boolean_dup_items integer_min integer_dup_times) boolean_dup_times print_integer boolean_shove boolean_shove integer_shove integer_sub boolean_pop integer_lte boolean_dup_items exec_k (boolean_rot exec_eq boolean_flush boolean_empty) (integer_yank exec_shove (integer_dup integer_shove boolean_swap boolean_yankdup boolean_dup exec_eq exec_noop) exec_dup_items print_boolean) boolean_empty integer_gte integer_swap exec_while () exec_dup (exec_y_when_autoconstructing (boolean_or boolean_shove integer_eq boolean_swap) boolean_rot tag_integer_8 integer_gte) 85 exec_do*times () exec_noop 77 exec_noop integer_inc integer_swap integer_flush boolean_yank integer_gte print_integer integer_mod integer_dup_items integer_min in2 boolean_stackdepth exec_when (integer_empty) integer_empty in3 integer_dup_times integer_inc integer_gte integer_gt exec_k () (boolean_rot integer_eq boolean_yankdup boolean_and print_integer integer_div boolean_xor) integer_shove boolean_not integer_gte exec_dup_items integer_gte exec_while () boolean_frominteger exec_stackdepth integer_empty exec_k_when_autoconstructing (print_integer boolean_xor) (boolean_pop) integer_dup_items exec_do*while (integer_gt exec_y_when_autoconstructing (integer_mod) print_exec (boolean_eq integer_mult exec_y_when_autoconstructing (boolean_eq integer_mod exec_do*while (boolean_and)))))
Zero cases best errors: [0 0 1 1 0 1 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 127
Percent parens: 0.173
--- Lexicase Population Statistics ---
Count of elite individuals by case: (293 161 64 64 188 62 184 332 189 137)
Population mean number of elite cases: 1.67
Count of perfect (error zero) individuals by case: (293 161 64 64 188 62 184 332 189 137)
Population mean number of perfect (error zero) cases: 1.67
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_eq} {:close 1, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_min} {:close 1, :instruction integer_dup_times} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 2, :instruction boolean_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_mod} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_eq} {:close 0, :instruction in1} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 1, :instruction print_boolean} {:close 0, :instruction tag_boolean_974} {:close 2, :instruction integer_gte} {:close 1, :instruction exec_while} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_div} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_gte} {:close 1, :instruction 85} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_dup_items} {:close 0, :instruction 77} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_k} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_not} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_dup_items} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_mod} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_and})
Best program: (integer_eq in3 in2 exec_do*while (exec_stackdepth boolean_dup_items integer_min integer_dup_times) exec_k_when_autoconstructing () (print_integer boolean_shove boolean_shove) integer_shove integer_sub boolean_pop integer_lte boolean_dup_items exec_k (boolean_rot exec_eq boolean_flush integer_mod) (boolean_empty) integer_yank exec_shove (exec_pop () exec_when (integer_shove exec_flush boolean_frominteger boolean_yankdup exec_eq in1 exec_noop) boolean_not exec_dup_items print_boolean) tag_boolean_974 integer_gte exec_while () exec_dup (boolean_or integer_div integer_eq boolean_rot integer_gte) 85 exec_do*times () exec_dup_items 77 integer_inc boolean_empty integer_swap integer_dup_times exec_yankdup integer_flush integer_gte integer_mod integer_dup_items integer_min boolean_stackdepth integer_dup_items exec_noop exec_noop exec_when (in3 integer_dup_times) integer_inc integer_gte integer_gt exec_k () (integer_rot boolean_rot boolean_or) integer_eq boolean_yankdup boolean_and integer_div boolean_xor integer_shove exec_s () (boolean_not boolean_frominteger) () integer_gte exec_y_when_autoconstructing (exec_rot (exec_dup_items) (exec_dup_items) (exec_stackdepth integer_swap integer_empty exec_k_when_autoconstructing (print_integer boolean_xor) (boolean_pop) integer_dup_items exec_do*while (exec_y_when_autoconstructing (integer_mod) print_exec (boolean_eq exec_flush integer_mult exec_stackdepth boolean_xor) exec_y_when_autoconstructing (boolean_eq exec_do*while (integer_yank boolean_and))))))
Errors: [0 0 1 1 0 1 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 110
Size: 139
Percent parens: 0.209
--- Population Statistics ---
Average total errors in population: 8.326
Median total errors in population: 10
Error averages by case: (0.707 0.839 0.936 0.936 0.812 0.938 0.816 0.668 0.811 0.863)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 63.875
Average program size in population (points): 78.262
Average percent parens in population: 0.176
Minimum age in population: 3.0
Maximum age in population: 3.0
Average age in population: 3.0
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.008
Error (vector) diversity:			 0.033
Behavioral diversity:				 0.347
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 2497019
--- Timings ---
Current time: 1559594117442 milliseconds
Total Time:           9.8 seconds
Initialization:       0.1 seconds,  1.0%
Reproduction:         4.2 seconds, 42.4%
Fitness Testing:      4.2 seconds, 42.5%
Report:               1.4 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 276
Test mean error for best: 0.27600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -95                 | Program output: -95                
Correct output: -44                 | Program output: -44                
Correct output: 58                  | Program output: 58                 
Correct output: -52                 | Program output: -52                
Correct output: -28                 | Program output: 0N                 
Correct output: -10                 | Program output: -10                
Correct output: 64                  | Program output: 64                 
Correct output: -82                 | Program output: -82                
Correct output: -48                 | Program output: -48                
Correct output: -55                 | Program output: -55                
Correct output: -89                 | Program output: -89                
Correct output: 65                  | Program output: 65                 
Correct output: 85                  | Program output: 85                 
Correct output: 95                  | Program output: 95                 
Correct output: -59                 | Program output: -59                
Correct output: 35                  | Program output: 35                 
Correct output: 37                  | Program output: 70                 
Correct output: 32                  | Program output: 32                 
Correct output: 0                   | Program output: 0                  
Correct output: 1                   | Program output: 1                  
Correct output: 0                   | Program output: 0                  
Correct output: 29                  | Program output: 42                 
Correct output: 20                  | Program output: 29                 
Correct output: 16                  | Program output: 19                 
Correct output: 4                   | Program output: 2N                 
Correct output: 2                   | Program output: 2                  
Correct output: 31                  | Program output: 31                 
Correct output: 1                   | Program output: 1                  
Correct output: 19                  | Program output: 19                 
Correct output: 11                  | Program output: 16                 
Correct output: 26                  | Program output: 31                 
Correct output: 54                  | Program output: 54                 
Correct output: 24                  | Program output: 45                 
Correct output: 33                  | Program output: 33                 
Correct output: 4                   | Program output: 4                  
Correct output: -95                 | Program output: -95                
Correct output: -65                 | Program output: -23                
Correct output: -72                 | Program output: -72                
Correct output: 22                  | Program output: 63                 
Correct output: -63                 | Program output: 0N                 
Correct output: -93                 | Program output: -93                
Correct output: -47                 | Program output: -47                
Correct output: -23                 | Program output: -31                
Correct output: -4                  | Program output: -4                 
Correct output: -97                 | Program output: 0N                 
Correct output: -84                 | Program output: -84                
Correct output: 12                  | Program output: 12                 
Correct output: -87                 | Program output: -87                
Correct output: -47                 | Program output: -47                
Correct output: -100                | Program output: -93                
Correct output: 7                   | Program output: 7                  
Correct output: -96                 | Program output: -96                
Correct output: -54                 | Program output: 0N                 
Correct output: -17                 | Program output: -2N                
Correct output: -94                 | Program output: -6                 
Correct output: -41                 | Program output: -41                
Correct output: -67                 | Program output: -39                
Correct output: -81                 | Program output: -81                
Correct output: -80                 | Program output: -80                
Correct output: -33                 | Program output: -33                
Correct output: -96                 | Program output: -69                
Correct output: -38                 | Program output: -38                
Correct output: -100                | Program output: -49                
Correct output: 15                  | Program output: 48                 
Correct output: -2                  | Program output: -45                
Correct output: -66                 | Program output: -38                
Correct output: -86                 | Program output: -1N                
Correct output: -89                 | Program output: -89                
Correct output: -95                 | Program output: -95                
Correct output: -67                 | Program output: -60                
Correct output: -65                 | Program output: -65                
Correct output: -91                 | Program output: -36                
Correct output: -78                 | Program output: -78                
Correct output: -53                 | Program output: -1N                
Correct output: -29                 | Program output: -29                
Correct output: -42                 | Program output: -42                
Correct output: -100                | Program output: -100               
Correct output: -96                 | Program output: -96                
Correct output: -61                 | Program output: -61                
Correct output: -55                 | Program output: -55                
Correct output: -92                 | Program output: -92                
Correct output: -23                 | Program output: -23                
Correct output: -100                | Program output: -100               
Correct output: -90                 | Program output: -90                
Correct output: -44                 | Program output: -44                
Correct output: -95                 | Program output: -6                 
Correct output: -78                 | Program output: -78                
Correct output: -88                 | Program output: -88                
Correct output: -67                 | Program output: 0N                 
Correct output: -21                 | Program output: -21                
Correct output: 34                  | Program output: 34                 
Correct output: 12                  | Program output: 12                 
Correct output: -92                 | Program output: -92                
Correct output: 22                  | Program output: 22                 
Correct output: -58                 | Program output: -58                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_min} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_add} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 1, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in4} {:close 1, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_div} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction integer_div} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_lte} {:close 2, :instruction exec_flush} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_lt} {:close 0, :instruction print_exec} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_y} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_invert_second_then_and})
Lexicase best program: (integer_dup_items integer_min integer_lt exec_empty integer_sub integer_dec integer_swap integer_dec integer_inc integer_add integer_gt exec_dup_items integer_add in1 in3 in1 integer_min exec_y_when_autoconstructing (in4 in2) integer_dup exec_stackdepth exec_dup_items exec_shove (integer_div integer_rot) boolean_yank integer_min in2 boolean_frominteger boolean_invert_first_then_and print_integer integer_max integer_empty integer_add integer_div integer_fromboolean integer_lte exec_flush exec_do*count (exec_empty) exec_s (integer_dup integer_dup_times integer_dup_times boolean_eq integer_lte) (integer_lt print_exec (exec_empty exec_y (exec_yank boolean_invert_second_then_and))) ())
Lexicase best errors: [0 0 1 0 0 0 0 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 62
Percent parens: 0.145
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_min} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_add} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 1, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in4} {:close 1, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_div} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction integer_div} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_lte} {:close 2, :instruction exec_flush} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_lt} {:close 0, :instruction print_exec} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_y} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_invert_second_then_and})
Zero cases best program: (integer_dup_items integer_min integer_lt exec_empty integer_sub integer_dec integer_swap integer_dec integer_inc integer_add integer_gt exec_dup_items integer_add in1 in3 in1 integer_min exec_y_when_autoconstructing (in4 in2) integer_dup exec_stackdepth exec_dup_items exec_shove (integer_div integer_rot) boolean_yank integer_min in2 boolean_frominteger boolean_invert_first_then_and print_integer integer_max integer_empty integer_add integer_div integer_fromboolean integer_lte exec_flush exec_do*count (exec_empty) exec_s (integer_dup integer_dup_times integer_dup_times boolean_eq integer_lte) (integer_lt print_exec (exec_empty exec_y (exec_yank boolean_invert_second_then_and))) ())
Zero cases best errors: [0 0 1 0 0 0 0 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 62
Percent parens: 0.145
--- Lexicase Population Statistics ---
Count of elite individuals by case: (200 157 221 153 223 26 24 26 26 302)
Population mean number of elite cases: 1.36
Count of perfect (error zero) individuals by case: (200 157 221 153 223 26 24 26 26 302)
Population mean number of perfect (error zero) cases: 1.36
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_min} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_add} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 1, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in4} {:close 1, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_div} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction integer_div} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_lte} {:close 2, :instruction exec_flush} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_lt} {:close 0, :instruction print_exec} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_y} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_invert_second_then_and})
Best program: (integer_dup_items integer_min integer_lt exec_empty integer_sub integer_dec integer_swap integer_dec integer_inc integer_add integer_gt exec_dup_items integer_add in1 in3 in1 integer_min exec_y_when_autoconstructing (in4 in2) integer_dup exec_stackdepth exec_dup_items exec_shove (integer_div integer_rot) boolean_yank integer_min in2 boolean_frominteger boolean_invert_first_then_and print_integer integer_max integer_empty integer_add integer_div integer_fromboolean integer_lte exec_flush exec_do*count (exec_empty) exec_s (integer_dup integer_dup_times integer_dup_times boolean_eq integer_lte) (integer_lt print_exec (exec_empty exec_y (exec_yank boolean_invert_second_then_and))) ())
Errors: [0 0 1 0 0 0 0 0 0 1]
Total: 2
Mean: 0.2
Genome size: 53
Size: 62
Percent parens: 0.145
--- Population Statistics ---
Average total errors in population: 8.642
Median total errors in population: 10
Error averages by case: (0.8 0.843 0.779 0.847 0.777 0.974 0.976 0.974 0.974 0.698)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 99.021
Average program size in population (points): 123.371
Average percent parens in population: 0.195
Minimum age in population: 4.0
Maximum age in population: 4.0
Average age in population: 4.0
Median age in population: 4.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.009
Error (vector) diversity:			 0.028
Behavioral diversity:				 0.415
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 3638919
--- Timings ---
Current time: 1559594120174 milliseconds
Total Time:          12.7 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:         5.3 seconds, 42.0%
Fitness Testing:      5.2 seconds, 41.4%
Report:               2.0 seconds, 15.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 413
Test mean error for best: 0.41300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -95                 | Program output: -48                
Correct output: -44                 | Program output: -44                
Correct output: 58                  | Program output: 58                 
Correct output: -52                 | Program output: -52                
Correct output: -28                 | Program output: -28                
Correct output: -10                 | Program output: -10                
Correct output: 64                  | Program output: 64                 
Correct output: -82                 | Program output: -82                
Correct output: -48                 | Program output: -48                
Correct output: -55                 | Program output: -55                
Correct output: -89                 | Program output: -89                
Correct output: 65                  | Program output: 65                 
Correct output: 85                  | Program output: 85                 
Correct output: 95                  | Program output: 95                 
Correct output: -59                 | Program output: -59                
Correct output: 35                  | Program output: 35                 
Correct output: 37                  | Program output: 37                 
Correct output: 32                  | Program output: 65                 
Correct output: 0                   | Program output: 6                  
Correct output: 1                   | Program output: 9                  
Correct output: 0                   | Program output: 0                  
Correct output: 29                  | Program output: 29                 
Correct output: 20                  | Program output: 20                 
Correct output: 16                  | Program output: 16                 
Correct output: 4                   | Program output: 4                  
Correct output: 2                   | Program output: 2                  
Correct output: 31                  | Program output: 52                 
Correct output: 1                   | Program output: 27                 
Correct output: 19                  | Program output: 19                 
Correct output: 11                  | Program output: 11                 
Correct output: 26                  | Program output: 26                 
Correct output: 54                  | Program output: 54                 
Correct output: 24                  | Program output: 24                 
Correct output: 33                  | Program output: 51                 
Correct output: 4                   | Program output: 4                  
Correct output: -95                 | Program output: -18                
Correct output: -65                 | Program output: -65                
Correct output: -72                 | Program output: -72                
Correct output: 22                  | Program output: 22                 
Correct output: -63                 | Program output: -63                
Correct output: -93                 | Program output: -53                
Correct output: -47                 | Program output: -3                 
Correct output: -23                 | Program output: -2                 
Correct output: -4                  | Program output: 21                 
Correct output: -97                 | Program output: -97                
Correct output: -84                 | Program output: -84                
Correct output: 12                  | Program output: 32                 
Correct output: -87                 | Program output: 64                 
Correct output: -47                 | Program output: -47                
Correct output: -100                | Program output: -30                
Correct output: 7                   | Program output: 7                  
Correct output: -96                 | Program output: -11                
Correct output: -54                 | Program output: -54                
Correct output: -17                 | Program output: -17                
Correct output: -94                 | Program output: -44                
Correct output: -41                 | Program output: -30                
Correct output: -67                 | Program output: -67                
Correct output: -81                 | Program output: -81                
Correct output: -80                 | Program output: -80                
Correct output: -33                 | Program output: -31                
Correct output: -96                 | Program output: -48                
Correct output: -38                 | Program output: -38                
Correct output: -100                | Program output: -100               
Correct output: 15                  | Program output: 15                 
Correct output: -2                  | Program output: -2                 
Correct output: -66                 | Program output: -63                
Correct output: -86                 | Program output: -86                
Correct output: -89                 | Program output: -39                
Correct output: -95                 | Program output: -95                
Correct output: -67                 | Program output: -67                
Correct output: -65                 | Program output: -43                
Correct output: -91                 | Program output: -91                
Correct output: -78                 | Program output: -43                
Correct output: -53                 | Program output: -53                
Correct output: -29                 | Program output: -23                
Correct output: -42                 | Program output: 64                 
Correct output: -100                | Program output: -100               
Correct output: -96                 | Program output: -89                
Correct output: -61                 | Program output: -43                
Correct output: -55                 | Program output: -55                
Correct output: -92                 | Program output: -29                
Correct output: -23                 | Program output: -7                 
Correct output: -100                | Program output: -50                
Correct output: -90                 | Program output: -62                
Correct output: -44                 | Program output: -44                
Correct output: -95                 | Program output: -95                
Correct output: -78                 | Program output: -17                
Correct output: -88                 | Program output: -19                
Correct output: -67                 | Program output: -67                
Correct output: -21                 | Program output: 81                 
Correct output: 34                  | Program output: 69                 
Correct output: 12                  | Program output: 39                 
Correct output: -92                 | Program output: -92                
Correct output: 22                  | Program output: 59                 
Correct output: -58                 | Program output: 18                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_min} {:close 1, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 2, :instruction boolean_shove} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_not} {:close 1, :instruction print_boolean} {:close 2, :instruction integer_gte} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_while} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_gte} {:close 1, :instruction 85} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction -13} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_k} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_not} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_dup_items} {:close 0, :instruction print_exec} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_dup_items} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_max} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_and})
Lexicase best program: (in3 in2 exec_stackdepth boolean_dup_items integer_min integer_dup_times print_integer boolean_shove boolean_shove exec_pop (integer_shove) boolean_pop integer_lte in4 boolean_rot exec_eq boolean_flush integer_lt exec_shove (boolean_frominteger boolean_dup exec_eq boolean_dup_times exec_do*while (in1 exec_noop) exec_if (boolean_not print_boolean) (integer_gte)) integer_swap exec_while () exec_dup (boolean_dup_times) boolean_shove integer_eq exec_yankdup integer_gte 85 exec_do*times () integer_inc integer_dup_times integer_flush integer_swap boolean_stackdepth -13 integer_mult integer_dup_times boolean_dup_times integer_inc integer_gte integer_gt exec_k () (integer_eq boolean_yankdup boolean_xor) exec_do*times () boolean_not boolean_frominteger integer_gte exec_dup_items print_exec (exec_empty exec_dup_items) boolean_frominteger exec_stackdepth integer_swap integer_eq integer_empty exec_k_when_autoconstructing (exec_swap (exec_stackdepth integer_max) (print_integer boolean_xor) exec_y_when_autoconstructing (exec_do*while (exec_do*range (boolean_eq integer_mult boolean_eq exec_do*while (integer_empty exec_noop boolean_and))))) ())
Lexicase best errors: [1 0 0 0 0 0 0 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 106
Percent parens: 0.198
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_min} {:close 1, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 2, :instruction boolean_shove} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_not} {:close 1, :instruction print_boolean} {:close 2, :instruction integer_gte} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_while} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_gte} {:close 1, :instruction 85} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction -13} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_k} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_not} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_dup_items} {:close 0, :instruction print_exec} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_dup_items} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_max} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_and})
Zero cases best program: (in3 in2 exec_stackdepth boolean_dup_items integer_min integer_dup_times print_integer boolean_shove boolean_shove exec_pop (integer_shove) boolean_pop integer_lte in4 boolean_rot exec_eq boolean_flush integer_lt exec_shove (boolean_frominteger boolean_dup exec_eq boolean_dup_times exec_do*while (in1 exec_noop) exec_if (boolean_not print_boolean) (integer_gte)) integer_swap exec_while () exec_dup (boolean_dup_times) boolean_shove integer_eq exec_yankdup integer_gte 85 exec_do*times () integer_inc integer_dup_times integer_flush integer_swap boolean_stackdepth -13 integer_mult integer_dup_times boolean_dup_times integer_inc integer_gte integer_gt exec_k () (integer_eq boolean_yankdup boolean_xor) exec_do*times () boolean_not boolean_frominteger integer_gte exec_dup_items print_exec (exec_empty exec_dup_items) boolean_frominteger exec_stackdepth integer_swap integer_eq integer_empty exec_k_when_autoconstructing (exec_swap (exec_stackdepth integer_max) (print_integer boolean_xor) exec_y_when_autoconstructing (exec_do*while (exec_do*range (boolean_eq integer_mult boolean_eq exec_do*while (integer_empty exec_noop boolean_and))))) ())
Zero cases best errors: [1 0 0 0 0 0 0 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 106
Percent parens: 0.198
--- Lexicase Population Statistics ---
Count of elite individuals by case: (243 138 530 137 135 137 475 188 63 244)
Population mean number of elite cases: 2.29
Count of perfect (error zero) individuals by case: (243 138 530 137 135 137 475 188 63 244)
Population mean number of perfect (error zero) cases: 2.29
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_shove} {:close 1, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_min} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_not} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 2, :instruction boolean_shove} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_not} {:close 1, :instruction print_boolean} {:close 2, :instruction integer_gte} {:close 1, :instruction exec_while} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_gte} {:close 1, :instruction 85} {:close 1, :instruction exec_do*times} {:close 0, :instruction 77} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_while} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_or} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_not} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_dup_items} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_mod} {:close 0, :instruction print_exec} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_and})
Best program: (integer_shove in3 in2 exec_stackdepth boolean_dup_items integer_min integer_dup_times boolean_not exec_k_when_autoconstructing () (print_integer boolean_shove boolean_shove) integer_shove exec_shove (boolean_pop integer_lte boolean_dup_items print_integer exec_k (boolean_rot boolean_flush integer_dec boolean_empty) (integer_yank exec_shove (integer_dup_items exec_pop () exec_when (integer_shove boolean_frominteger boolean_yankdup boolean_dup boolean_rot) exec_eq exec_noop) boolean_not print_boolean) integer_gte) exec_while () exec_dup (integer_dup_times) integer_eq boolean_rot integer_gte 85 exec_do*times () 77 integer_inc integer_swap integer_gt integer_yank integer_flush integer_gte integer_mod integer_min boolean_stackdepth integer_dup_items exec_k_when_autoconstructing (exec_noop) (boolean_or exec_while () integer_dup_times) integer_inc integer_gt in2 exec_k () (boolean_rot boolean_dup_items boolean_or) integer_dup_items integer_eq boolean_yankdup print_exec (boolean_and integer_div boolean_xor) integer_mult boolean_not boolean_frominteger integer_gte exec_y_when_autoconstructing (exec_dup_items) exec_dup_items exec_do*count (integer_swap exec_k_when_autoconstructing (boolean_pop) (boolean_pop) integer_dup_items exec_y_when_autoconstructing (integer_mod) print_exec (integer_mult boolean_xor) exec_y_when_autoconstructing (integer_yank integer_yank boolean_and)))
Errors: [1 0 0 0 0 0 0 0 1 0]
Total: 2
Mean: 0.2
Genome size: 98
Size: 123
Percent parens: 0.203
--- Population Statistics ---
Average total errors in population: 7.71
Median total errors in population: 8
Error averages by case: (0.757 0.862 0.47 0.863 0.865 0.863 0.525 0.812 0.937 0.756)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 55.693
Average program size in population (points): 66.827
Average percent parens in population: 0.161
Minimum age in population: 5.0
Maximum age in population: 5.0
Average age in population: 5.0
Median age in population: 5.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.009
Error (vector) diversity:			 0.084
Behavioral diversity:				 0.438
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 4173069
--- Timings ---
Current time: 1559594122438 milliseconds
Total Time:          14.9 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         6.4 seconds, 43.1%
Fitness Testing:      5.9 seconds, 39.4%
Report:               2.5 seconds, 16.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 216
Test mean error for best: 0.21600
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 1
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 1
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 1
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 1
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 1
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 1
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 1
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 1
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 1
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 1
Test Case  208 | Error: 1
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 1
Test Case  212 | Error: 1
Test Case  213 | Error: 1
Test Case  214 | Error: 1
Test Case  215 | Error: 1
Test Case  216 | Error: 0
Test Case  217 | Error: 1
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 1
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 1
Test Case  228 | Error: 0
Test Case  229 | Error: 1
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 1
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 1
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 1
Test Case  244 | Error: 1
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 1
Test Case  249 | Error: 1
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 1
Test Case  260 | Error: 0
Test Case  261 | Error: 1
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 1
Test Case  265 | Error: 1
Test Case  266 | Error: 1
Test Case  267 | Error: 1
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 1
Test Case  272 | Error: 1
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 1
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 1
Test Case  290 | Error: 1
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 1
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 1
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 1
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 1
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 1
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 1
Test Case  345 | Error: 1
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 1
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 1
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 1
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 1
Test Case  369 | Error: 1
Test Case  370 | Error: 1
Test Case  371 | Error: 0
Test Case  372 | Error: 1
Test Case  373 | Error: 1
Test Case  374 | Error: 1
Test Case  375 | Error: 1
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 1
Test Case  384 | Error: 0
Test Case  385 | Error: 1
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 1
Test Case  389 | Error: 1
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 1
Test Case  397 | Error: 1
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 1
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 1
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 1
Test Case  411 | Error: 1
Test Case  412 | Error: 1
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 1
Test Case  418 | Error: 1
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 1
Test Case  423 | Error: 1
Test Case  424 | Error: 1
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 1
Test Case  429 | Error: 1
Test Case  430 | Error: 1
Test Case  431 | Error: 1
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 1
Test Case  437 | Error: 1
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 1
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 1
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 1
Test Case  449 | Error: 0
Test Case  450 | Error: 1
Test Case  451 | Error: 0
Test Case  452 | Error: 1
Test Case  453 | Error: 0
Test Case  454 | Error: 1
Test Case  455 | Error: 0
Test Case  456 | Error: 1
Test Case  457 | Error: 0
Test Case  458 | Error: 1
Test Case  459 | Error: 1
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 1
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 1
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 1
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 1
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 1
Test Case  483 | Error: 1
Test Case  484 | Error: 1
Test Case  485 | Error: 1
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 1
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 1
Test Case  492 | Error: 1
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 1
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 1
Test Case  503 | Error: 0
Test Case  504 | Error: 1
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 1
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 1
Test Case  513 | Error: 0
Test Case  514 | Error: 1
Test Case  515 | Error: 0
Test Case  516 | Error: 1
Test Case  517 | Error: 1
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 1
Test Case  521 | Error: 0
Test Case  522 | Error: 1
Test Case  523 | Error: 1
Test Case  524 | Error: 1
Test Case  525 | Error: 1
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 1
Test Case  538 | Error: 0
Test Case  539 | Error: 1
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 1
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 1
Test Case  553 | Error: 0
Test Case  554 | Error: 1
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 1
Test Case  559 | Error: 1
Test Case  560 | Error: 1
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 1
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 1
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 1
Test Case  575 | Error: 0
Test Case  576 | Error: 1
Test Case  577 | Error: 1
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 1
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 1
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 1
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 1
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 1
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 1
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 1
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 1
Test Case  618 | Error: 0
Test Case  619 | Error: 1
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 1
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 1
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 1
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 1
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 1
Test Case  648 | Error: 1
Test Case  649 | Error: 1
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 1
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 1
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 1
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 1
Test Case  670 | Error: 1
Test Case  671 | Error: 1
Test Case  672 | Error: 1
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 1
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 1
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 1
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 1
Test Case  701 | Error: 1
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 1
Test Case  709 | Error: 0
Test Case  710 | Error: 1
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 1
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 1
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 1
Test Case  731 | Error: 1
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 1
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 1
Test Case  740 | Error: 0
Test Case  741 | Error: 1
Test Case  742 | Error: 0
Test Case  743 | Error: 1
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 1
Test Case  747 | Error: 0
Test Case  748 | Error: 1
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 1
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 1
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 1
Test Case  771 | Error: 0
Test Case  772 | Error: 1
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 1
Test Case  779 | Error: 1
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 1
Test Case  785 | Error: 1
Test Case  786 | Error: 0
Test Case  787 | Error: 1
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 1
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 1
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 1
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 1
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 1
Test Case  829 | Error: 1
Test Case  830 | Error: 1
Test Case  831 | Error: 1
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 1
Test Case  841 | Error: 0
Test Case  842 | Error: 1
Test Case  843 | Error: 1
Test Case  844 | Error: 0
Test Case  845 | Error: 1
Test Case  846 | Error: 1
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 1
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 1
Test Case  857 | Error: 1
Test Case  858 | Error: 0
Test Case  859 | Error: 1
Test Case  860 | Error: 1
Test Case  861 | Error: 0
Test Case  862 | Error: 1
Test Case  863 | Error: 1
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 1
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 1
Test Case  885 | Error: 1
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 1
Test Case  889 | Error: 0
Test Case  890 | Error: 1
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 1
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 1
Test Case  897 | Error: 1
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 1
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 1
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 1
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 1
Test Case  950 | Error: 0
Test Case  951 | Error: 1
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 1
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 1
Test Case  960 | Error: 1
Test Case  961 | Error: 1
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 1
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 1
Test Case  972 | Error: 1
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 1
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 1
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 1
Test Case  992 | Error: 1
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 1
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -95                 | Program output: -95                
Correct output: -44                 | Program output: -44                
Correct output: 58                  | Program output: 58                 
Correct output: -52                 | Program output: -52                
Correct output: -28                 | Program output: 10                 
Correct output: -10                 | Program output: -10                
Correct output: 64                  | Program output: 64                 
Correct output: -82                 | Program output: -82                
Correct output: -48                 | Program output: -48                
Correct output: -55                 | Program output: -55                
Correct output: -89                 | Program output: -89                
Correct output: 65                  | Program output: 65                 
Correct output: 85                  | Program output: 85                 
Correct output: 95                  | Program output: 95                 
Correct output: -59                 | Program output: -59                
Correct output: 35                  | Program output: 35                 
Correct output: 37                  | Program output: 70                 
Correct output: 32                  | Program output: 32                 
Correct output: 0                   | Program output: 0                  
Correct output: 1                   | Program output: 1                  
Correct output: 0                   | Program output: 0                  
Correct output: 29                  | Program output: 42                 
Correct output: 20                  | Program output: 29                 
Correct output: 16                  | Program output: 19                 
Correct output: 4                   | Program output: 4                  
Correct output: 2                   | Program output: 2                  
Correct output: 31                  | Program output: 31                 
Correct output: 1                   | Program output: 1                  
Correct output: 19                  | Program output: 19                 
Correct output: 11                  | Program output: 16                 
Correct output: 26                  | Program output: 31                 
Correct output: 54                  | Program output: 54                 
Correct output: 24                  | Program output: 45                 
Correct output: 33                  | Program output: 33                 
Correct output: 4                   | Program output: 4                  
Correct output: -95                 | Program output: -95                
Correct output: -65                 | Program output: -23                
Correct output: -72                 | Program output: -72                
Correct output: 22                  | Program output: 63                 
Correct output: -63                 | Program output: -14                
Correct output: -93                 | Program output: -93                
Correct output: -47                 | Program output: -47                
Correct output: -23                 | Program output: -23                
Correct output: -4                  | Program output: -4                 
Correct output: -97                 | Program output: -97                
Correct output: -84                 | Program output: -84                
Correct output: 12                  | Program output: 12                 
Correct output: -87                 | Program output: -87                
Correct output: -47                 | Program output: -47                
Correct output: -100                | Program output: -100               
Correct output: 7                   | Program output: 7                  
Correct output: -96                 | Program output: -96                
Correct output: -54                 | Program output: 38                 
Correct output: -17                 | Program output: 37                 
Correct output: -94                 | Program output: -94                
Correct output: -41                 | Program output: -41                
Correct output: -67                 | Program output: -39                
Correct output: -81                 | Program output: -81                
Correct output: -80                 | Program output: -80                
Correct output: -33                 | Program output: -33                
Correct output: -96                 | Program output: -96                
Correct output: -38                 | Program output: -38                
Correct output: -100                | Program output: -49                
Correct output: 15                  | Program output: 48                 
Correct output: -2                  | Program output: 9                  
Correct output: -66                 | Program output: -66                
Correct output: -86                 | Program output: 17                 
Correct output: -89                 | Program output: -89                
Correct output: -95                 | Program output: -95                
Correct output: -67                 | Program output: -60                
Correct output: -65                 | Program output: -65                
Correct output: -91                 | Program output: -76                
Correct output: -78                 | Program output: -78                
Correct output: -53                 | Program output: 1                  
Correct output: -29                 | Program output: -29                
Correct output: -42                 | Program output: -42                
Correct output: -100                | Program output: -100               
Correct output: -96                 | Program output: -96                
Correct output: -61                 | Program output: -61                
Correct output: -55                 | Program output: -55                
Correct output: -92                 | Program output: -92                
Correct output: -23                 | Program output: -23                
Correct output: -100                | Program output: -100               
Correct output: -90                 | Program output: -90                
Correct output: -44                 | Program output: -44                
Correct output: -95                 | Program output: -58                
Correct output: -78                 | Program output: -78                
Correct output: -88                 | Program output: -88                
Correct output: -67                 | Program output: -67                
Correct output: -21                 | Program output: -21                
Correct output: 34                  | Program output: 34                 
Correct output: 12                  | Program output: 12                 
Correct output: -92                 | Program output: -92                
Correct output: 22                  | Program output: 22                 
Correct output: -58                 | Program output: -58                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_add} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction in3} {:close 1, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in4} {:close 1, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_frominteger} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction integer_div} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_lte} {:close 2, :instruction exec_flush} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_lt} {:close 0, :instruction print_exec} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_y} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_invert_second_then_and})
Lexicase best program: (integer_dup_items integer_lt exec_empty integer_sub integer_swap integer_inc integer_add integer_gt exec_dup_items integer_add in3 in1 integer_min exec_y_when_autoconstructing (in4 in2) integer_dup exec_stackdepth exec_dup_items exec_shove (integer_rot) boolean_yank integer_min in2 boolean_eq boolean_frominteger boolean_invert_first_then_and print_integer integer_max integer_empty integer_add integer_div integer_fromboolean integer_lte exec_flush exec_do*count (exec_empty) exec_s (integer_dup_times boolean_eq integer_lte) (integer_lt print_exec (exec_empty exec_y (exec_yank boolean_invert_second_then_and))) ())
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 56
Percent parens: 0.161
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_add} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction in3} {:close 1, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in4} {:close 1, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_frominteger} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction integer_div} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_lte} {:close 2, :instruction exec_flush} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_lt} {:close 0, :instruction print_exec} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_y} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_invert_second_then_and})
Zero cases best program: (integer_dup_items integer_lt exec_empty integer_sub integer_swap integer_inc integer_add integer_gt exec_dup_items integer_add in3 in1 integer_min exec_y_when_autoconstructing (in4 in2) integer_dup exec_stackdepth exec_dup_items exec_shove (integer_rot) boolean_yank integer_min in2 boolean_eq boolean_frominteger boolean_invert_first_then_and print_integer integer_max integer_empty integer_add integer_div integer_fromboolean integer_lte exec_flush exec_do*count (exec_empty) exec_s (integer_dup_times boolean_eq integer_lte) (integer_lt print_exec (exec_empty exec_y (exec_yank boolean_invert_second_then_and))) ())
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 56
Percent parens: 0.161
--- Lexicase Population Statistics ---
Count of elite individuals by case: (148 149 153 151 216 195 497 201 146 213)
Population mean number of elite cases: 2.07
Count of perfect (error zero) individuals by case: (148 149 153 151 216 195 497 201 146 213)
Population mean number of perfect (error zero) cases: 2.07
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_lt} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 1, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in4} {:close 1, :instruction in2} {:close 0, :instruction tagged_766} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_lte} {:close 2, :instruction exec_flush} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_lt} {:close 0, :instruction print_exec} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_y} {:close 0, :instruction exec_yank})
Best program: (integer_lt integer_dup_items exec_empty integer_dec integer_inc integer_gt exec_dup_items integer_add in1 in3 in1 integer_min exec_y_when_autoconstructing (in4 in2) tagged_766 exec_stackdepth integer_dup exec_stackdepth boolean_dup_items exec_dup_items exec_shove (boolean_eq integer_div integer_rot) boolean_yank exec_swap (integer_min in2 boolean_frominteger boolean_invert_first_then_and) () print_integer integer_max integer_empty integer_add integer_div exec_s (integer_fromboolean integer_lte) (exec_flush) () exec_empty integer_dup_times integer_dup_times boolean_eq integer_lte exec_do*while (integer_lt print_exec (integer_shove exec_y (exec_yank))))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 51
Size: 62
Percent parens: 0.177
--- Population Statistics ---
Average total errors in population: 7.931
Median total errors in population: 9
Error averages by case: (0.852 0.851 0.847 0.849 0.784 0.805 0.503 0.799 0.854 0.787)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 60.213
Average program size in population (points): 73.701
Average percent parens in population: 0.176
Minimum age in population: 6.0
Maximum age in population: 6.0
Average age in population: 6.0
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.011
Error (vector) diversity:			 0.058
Behavioral diversity:				 0.365
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 4724988
--- Timings ---
Current time: 1559594124552 milliseconds
Total Time:          17.2 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         7.6 seconds, 44.0%
Fitness Testing:      6.5 seconds, 37.7%
Report:               3.1 seconds, 17.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 6
Successful program: (integer_lt integer_dup_items exec_empty integer_dec integer_inc integer_gt exec_dup_items integer_add in1 in3 in1 integer_min exec_y_when_autoconstructing (in4 in2) tagged_766 exec_stackdepth integer_dup exec_stackdepth boolean_dup_items exec_dup_items exec_shove (boolean_eq integer_div integer_rot) boolean_yank exec_swap (integer_min in2 boolean_frominteger boolean_invert_first_then_and) () print_integer integer_max integer_empty integer_add integer_div exec_s (integer_fromboolean integer_lte) (exec_flush) () exec_empty integer_dup_times integer_dup_times boolean_eq integer_lte exec_do*while (integer_lt print_exec (integer_shove exec_y (exec_yank))))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 62


Auto-simplifying with starting size: 62
step: 0
program: (integer_lt integer_dup_items exec_empty integer_dec integer_inc integer_gt exec_dup_items integer_add in1 in3 in1 integer_min exec_y_when_autoconstructing (in4 in2) tagged_766 exec_stackdepth integer_dup exec_stackdepth boolean_dup_items exec_dup_items exec_shove (boolean_eq integer_div integer_rot) boolean_yank exec_swap (integer_min in2 boolean_frominteger boolean_invert_first_then_and) () print_integer integer_max integer_empty integer_add integer_div exec_s (integer_fromboolean integer_lte) (exec_flush) () exec_empty integer_dup_times integer_dup_times boolean_eq integer_lte exec_do*while (integer_lt print_exec (integer_shove exec_y (exec_yank))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 62

step: 500
program: (integer_lt integer_dup_items exec_empty integer_dec integer_inc integer_gt exec_dup_items integer_add in1 in3 in1 integer_min exec_y_when_autoconstructing (in4 in2) tagged_766 exec_stackdepth integer_dup exec_stackdepth boolean_dup_items exec_dup_items exec_shove (boolean_eq integer_div integer_rot) boolean_yank exec_swap (integer_min in2 boolean_frominteger boolean_invert_first_then_and) () print_integer integer_max integer_empty integer_add integer_div exec_s (integer_fromboolean integer_lte) (exec_flush) () exec_empty integer_dup_times integer_dup_times boolean_eq integer_lte exec_do*while (integer_lt print_exec (integer_shove exec_y (exec_yank))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 62

step: 1000
program: (integer_lt integer_dup_items exec_empty integer_dec integer_inc integer_gt exec_dup_items integer_add in1 in3 in1 integer_min exec_y_when_autoconstructing (in4 in2) tagged_766 exec_stackdepth integer_dup exec_stackdepth boolean_dup_items exec_dup_items exec_shove (boolean_eq integer_div integer_rot) boolean_yank exec_swap (integer_min in2 boolean_frominteger boolean_invert_first_then_and) () print_integer integer_max integer_empty integer_add integer_div exec_s (integer_fromboolean integer_lte) (exec_flush) () exec_empty integer_dup_times integer_dup_times boolean_eq integer_lte exec_do*while (integer_lt print_exec (integer_shove exec_y (exec_yank))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 62

step: 1500
program: (integer_lt integer_dup_items exec_empty integer_dec integer_inc integer_gt exec_dup_items integer_add in1 in3 in1 integer_min exec_y_when_autoconstructing (in4 in2) tagged_766 exec_stackdepth integer_dup exec_stackdepth boolean_dup_items exec_dup_items exec_shove (boolean_eq integer_div integer_rot) boolean_yank exec_swap (integer_min in2 boolean_frominteger boolean_invert_first_then_and) () print_integer integer_max integer_empty integer_add integer_div exec_s (integer_fromboolean integer_lte) (exec_flush) () exec_empty integer_dup_times integer_dup_times boolean_eq integer_lte exec_do*while (integer_lt print_exec (integer_shove exec_y (exec_yank))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 62

step: 2000
program: (integer_lt integer_dup_items exec_empty integer_dec integer_inc integer_gt exec_dup_items integer_add in1 in3 in1 integer_min exec_y_when_autoconstructing (in4 in2) tagged_766 exec_stackdepth integer_dup exec_stackdepth boolean_dup_items exec_dup_items exec_shove (boolean_eq integer_div integer_rot) boolean_yank exec_swap (integer_min in2 boolean_frominteger boolean_invert_first_then_and) () print_integer integer_max integer_empty integer_add integer_div exec_s (integer_fromboolean integer_lte) (exec_flush) () exec_empty integer_dup_times integer_dup_times boolean_eq integer_lte exec_do*while (integer_lt print_exec (integer_shove exec_y (exec_yank))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 62

step: 2500
program: (integer_lt integer_dup_items exec_empty integer_dec integer_inc integer_gt exec_dup_items integer_add in1 in3 in1 integer_min exec_y_when_autoconstructing (in4 in2) tagged_766 exec_stackdepth integer_dup exec_stackdepth boolean_dup_items exec_dup_items exec_shove (boolean_eq integer_div integer_rot) boolean_yank exec_swap (integer_min in2 boolean_frominteger boolean_invert_first_then_and) () print_integer integer_max integer_empty integer_add integer_div exec_s (integer_fromboolean integer_lte) (exec_flush) () exec_empty integer_dup_times integer_dup_times boolean_eq integer_lte exec_do*while (integer_lt print_exec (integer_shove exec_y (exec_yank))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 62

step: 3000
program: (integer_lt integer_dup_items exec_empty integer_dec integer_inc integer_gt exec_dup_items integer_add in1 in3 in1 integer_min exec_y_when_autoconstructing (in4 in2) tagged_766 exec_stackdepth integer_dup exec_stackdepth boolean_dup_items exec_dup_items exec_shove (boolean_eq integer_div integer_rot) boolean_yank exec_swap (integer_min in2 boolean_frominteger boolean_invert_first_then_and) () print_integer integer_max integer_empty integer_add integer_div exec_s (integer_fromboolean integer_lte) (exec_flush) () exec_empty integer_dup_times integer_dup_times boolean_eq integer_lte exec_do*while (integer_lt print_exec (integer_shove exec_y (exec_yank))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 62

step: 3500
program: (integer_lt integer_dup_items exec_empty integer_dec integer_inc integer_gt exec_dup_items integer_add in1 in3 in1 integer_min exec_y_when_autoconstructing (in4 in2) tagged_766 exec_stackdepth integer_dup exec_stackdepth boolean_dup_items exec_dup_items exec_shove (boolean_eq integer_div integer_rot) boolean_yank exec_swap (integer_min in2 boolean_frominteger boolean_invert_first_then_and) () print_integer integer_max integer_empty integer_add integer_div exec_s (integer_fromboolean integer_lte) (exec_flush) () exec_empty integer_dup_times integer_dup_times boolean_eq integer_lte exec_do*while (integer_lt print_exec (integer_shove exec_y (exec_yank))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 62

step: 4000
program: (integer_lt integer_dup_items exec_empty integer_dec integer_inc integer_gt exec_dup_items integer_add in1 in3 in1 integer_min exec_y_when_autoconstructing (in4 in2) tagged_766 exec_stackdepth integer_dup exec_stackdepth boolean_dup_items exec_dup_items exec_shove (boolean_eq integer_div integer_rot) boolean_yank exec_swap (integer_min in2 boolean_frominteger boolean_invert_first_then_and) () print_integer integer_max integer_empty integer_add integer_div exec_s (integer_fromboolean integer_lte) (exec_flush) () exec_empty integer_dup_times integer_dup_times boolean_eq integer_lte exec_do*while (integer_lt print_exec (integer_shove exec_y (exec_yank))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 62

step: 4500
program: (integer_lt integer_dup_items exec_empty integer_dec integer_inc integer_gt exec_dup_items integer_add in1 in3 in1 integer_min exec_y_when_autoconstructing (in4 in2) tagged_766 exec_stackdepth integer_dup exec_stackdepth boolean_dup_items exec_dup_items exec_shove (boolean_eq integer_div integer_rot) boolean_yank exec_swap (integer_min in2 boolean_frominteger boolean_invert_first_then_and) () print_integer integer_max integer_empty integer_add integer_div exec_s (integer_fromboolean integer_lte) (exec_flush) () exec_empty integer_dup_times integer_dup_times boolean_eq integer_lte exec_do*while (integer_lt print_exec (integer_shove exec_y (exec_yank))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 62

step: 5000
program: (integer_lt integer_dup_items exec_empty integer_dec integer_inc integer_gt exec_dup_items integer_add in1 in3 in1 integer_min exec_y_when_autoconstructing (in4 in2) tagged_766 exec_stackdepth integer_dup exec_stackdepth boolean_dup_items exec_dup_items exec_shove (boolean_eq integer_div integer_rot) boolean_yank exec_swap (integer_min in2 boolean_frominteger boolean_invert_first_then_and) () print_integer integer_max integer_empty integer_add integer_div exec_s (integer_fromboolean integer_lte) (exec_flush) () exec_empty integer_dup_times integer_dup_times boolean_eq integer_lte exec_do*while (integer_lt print_exec (integer_shove exec_y (exec_yank))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 62

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 216
Test mean error for best: 0.21600
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 1
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 1
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 1
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 1
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 1
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 1
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 1
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 1
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 1
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 1
Test Case  208 | Error: 1
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 1
Test Case  212 | Error: 1
Test Case  213 | Error: 1
Test Case  214 | Error: 1
Test Case  215 | Error: 1
Test Case  216 | Error: 0
Test Case  217 | Error: 1
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 1
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 1
Test Case  228 | Error: 0
Test Case  229 | Error: 1
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 1
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 1
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 1
Test Case  244 | Error: 1
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 1
Test Case  249 | Error: 1
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 1
Test Case  260 | Error: 0
Test Case  261 | Error: 1
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 1
Test Case  265 | Error: 1
Test Case  266 | Error: 1
Test Case  267 | Error: 1
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 1
Test Case  272 | Error: 1
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 1
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 1
Test Case  290 | Error: 1
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 1
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 1
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 1
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 1
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 1
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 1
Test Case  345 | Error: 1
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 1
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 1
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 1
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 1
Test Case  369 | Error: 1
Test Case  370 | Error: 1
Test Case  371 | Error: 0
Test Case  372 | Error: 1
Test Case  373 | Error: 1
Test Case  374 | Error: 1
Test Case  375 | Error: 1
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 1
Test Case  384 | Error: 0
Test Case  385 | Error: 1
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 1
Test Case  389 | Error: 1
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 1
Test Case  397 | Error: 1
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 1
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 1
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 1
Test Case  411 | Error: 1
Test Case  412 | Error: 1
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 1
Test Case  418 | Error: 1
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 1
Test Case  423 | Error: 1
Test Case  424 | Error: 1
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 1
Test Case  429 | Error: 1
Test Case  430 | Error: 1
Test Case  431 | Error: 1
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 1
Test Case  437 | Error: 1
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 1
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 1
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 1
Test Case  449 | Error: 0
Test Case  450 | Error: 1
Test Case  451 | Error: 0
Test Case  452 | Error: 1
Test Case  453 | Error: 0
Test Case  454 | Error: 1
Test Case  455 | Error: 0
Test Case  456 | Error: 1
Test Case  457 | Error: 0
Test Case  458 | Error: 1
Test Case  459 | Error: 1
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 1
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 1
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 1
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 1
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 1
Test Case  483 | Error: 1
Test Case  484 | Error: 1
Test Case  485 | Error: 1
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 1
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 1
Test Case  492 | Error: 1
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 1
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 1
Test Case  503 | Error: 0
Test Case  504 | Error: 1
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 1
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 1
Test Case  513 | Error: 0
Test Case  514 | Error: 1
Test Case  515 | Error: 0
Test Case  516 | Error: 1
Test Case  517 | Error: 1
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 1
Test Case  521 | Error: 0
Test Case  522 | Error: 1
Test Case  523 | Error: 1
Test Case  524 | Error: 1
Test Case  525 | Error: 1
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 1
Test Case  538 | Error: 0
Test Case  539 | Error: 1
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 1
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 1
Test Case  553 | Error: 0
Test Case  554 | Error: 1
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 1
Test Case  559 | Error: 1
Test Case  560 | Error: 1
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 1
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 1
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 1
Test Case  575 | Error: 0
Test Case  576 | Error: 1
Test Case  577 | Error: 1
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 1
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 1
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 1
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 1
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 1
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 1
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 1
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 1
Test Case  618 | Error: 0
Test Case  619 | Error: 1
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 1
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 1
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 1
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 1
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 1
Test Case  648 | Error: 1
Test Case  649 | Error: 1
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 1
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 1
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 1
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 1
Test Case  670 | Error: 1
Test Case  671 | Error: 1
Test Case  672 | Error: 1
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 1
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 1
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 1
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 1
Test Case  701 | Error: 1
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 1
Test Case  709 | Error: 0
Test Case  710 | Error: 1
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 1
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 1
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 1
Test Case  731 | Error: 1
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 1
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 1
Test Case  740 | Error: 0
Test Case  741 | Error: 1
Test Case  742 | Error: 0
Test Case  743 | Error: 1
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 1
Test Case  747 | Error: 0
Test Case  748 | Error: 1
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 1
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 1
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 1
Test Case  771 | Error: 0
Test Case  772 | Error: 1
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 1
Test Case  779 | Error: 1
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 1
Test Case  785 | Error: 1
Test Case  786 | Error: 0
Test Case  787 | Error: 1
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 1
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 1
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 1
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 1
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 1
Test Case  829 | Error: 1
Test Case  830 | Error: 1
Test Case  831 | Error: 1
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 1
Test Case  841 | Error: 0
Test Case  842 | Error: 1
Test Case  843 | Error: 1
Test Case  844 | Error: 0
Test Case  845 | Error: 1
Test Case  846 | Error: 1
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 1
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 1
Test Case  857 | Error: 1
Test Case  858 | Error: 0
Test Case  859 | Error: 1
Test Case  860 | Error: 1
Test Case  861 | Error: 0
Test Case  862 | Error: 1
Test Case  863 | Error: 1
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 1
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 1
Test Case  885 | Error: 1
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 1
Test Case  889 | Error: 0
Test Case  890 | Error: 1
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 1
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 1
Test Case  897 | Error: 1
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 1
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 1
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 1
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 1
Test Case  950 | Error: 0
Test Case  951 | Error: 1
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 1
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 1
Test Case  960 | Error: 1
Test Case  961 | Error: 1
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 1
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 1
Test Case  972 | Error: 1
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 1
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 1
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 1
Test Case  992 | Error: 1
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 1
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -95                 | Program output: -95                
Correct output: -44                 | Program output: -44                
Correct output: 58                  | Program output: 58                 
Correct output: -52                 | Program output: -52                
Correct output: -28                 | Program output: 10                 
Correct output: -10                 | Program output: -10                
Correct output: 64                  | Program output: 64                 
Correct output: -82                 | Program output: -82                
Correct output: -48                 | Program output: -48                
Correct output: -55                 | Program output: -55                
Correct output: -89                 | Program output: -89                
Correct output: 65                  | Program output: 65                 
Correct output: 85                  | Program output: 85                 
Correct output: 95                  | Program output: 95                 
Correct output: -59                 | Program output: -59                
Correct output: 35                  | Program output: 35                 
Correct output: 37                  | Program output: 70                 
Correct output: 32                  | Program output: 32                 
Correct output: 0                   | Program output: 0                  
Correct output: 1                   | Program output: 1                  
Correct output: 0                   | Program output: 0                  
Correct output: 29                  | Program output: 42                 
Correct output: 20                  | Program output: 29                 
Correct output: 16                  | Program output: 19                 
Correct output: 4                   | Program output: 4                  
Correct output: 2                   | Program output: 2                  
Correct output: 31                  | Program output: 31                 
Correct output: 1                   | Program output: 1                  
Correct output: 19                  | Program output: 19                 
Correct output: 11                  | Program output: 16                 
Correct output: 26                  | Program output: 31                 
Correct output: 54                  | Program output: 54                 
Correct output: 24                  | Program output: 45                 
Correct output: 33                  | Program output: 33                 
Correct output: 4                   | Program output: 4                  
Correct output: -95                 | Program output: -95                
Correct output: -65                 | Program output: -23                
Correct output: -72                 | Program output: -72                
Correct output: 22                  | Program output: 63                 
Correct output: -63                 | Program output: -14                
Correct output: -93                 | Program output: -93                
Correct output: -47                 | Program output: -47                
Correct output: -23                 | Program output: -23                
Correct output: -4                  | Program output: -4                 
Correct output: -97                 | Program output: -97                
Correct output: -84                 | Program output: -84                
Correct output: 12                  | Program output: 12                 
Correct output: -87                 | Program output: -87                
Correct output: -47                 | Program output: -47                
Correct output: -100                | Program output: -100               
Correct output: 7                   | Program output: 7                  
Correct output: -96                 | Program output: -96                
Correct output: -54                 | Program output: 38                 
Correct output: -17                 | Program output: 37                 
Correct output: -94                 | Program output: -94                
Correct output: -41                 | Program output: -41                
Correct output: -67                 | Program output: -39                
Correct output: -81                 | Program output: -81                
Correct output: -80                 | Program output: -80                
Correct output: -33                 | Program output: -33                
Correct output: -96                 | Program output: -96                
Correct output: -38                 | Program output: -38                
Correct output: -100                | Program output: -49                
Correct output: 15                  | Program output: 48                 
Correct output: -2                  | Program output: 9                  
Correct output: -66                 | Program output: -66                
Correct output: -86                 | Program output: 17                 
Correct output: -89                 | Program output: -89                
Correct output: -95                 | Program output: -95                
Correct output: -67                 | Program output: -60                
Correct output: -65                 | Program output: -65                
Correct output: -91                 | Program output: -76                
Correct output: -78                 | Program output: -78                
Correct output: -53                 | Program output: 1                  
Correct output: -29                 | Program output: -29                
Correct output: -42                 | Program output: -42                
Correct output: -100                | Program output: -100               
Correct output: -96                 | Program output: -96                
Correct output: -61                 | Program output: -61                
Correct output: -55                 | Program output: -55                
Correct output: -92                 | Program output: -92                
Correct output: -23                 | Program output: -23                
Correct output: -100                | Program output: -100               
Correct output: -90                 | Program output: -90                
Correct output: -44                 | Program output: -44                
Correct output: -95                 | Program output: -58                
Correct output: -78                 | Program output: -78                
Correct output: -88                 | Program output: -88                
Correct output: -67                 | Program output: -67                
Correct output: -21                 | Program output: -21                
Correct output: 34                  | Program output: 34                 
Correct output: 12                  | Program output: 12                 
Correct output: -92                 | Program output: -92                
Correct output: 22                  | Program output: 22                 
Correct output: -58                 | Program output: -58                
;;******************************
