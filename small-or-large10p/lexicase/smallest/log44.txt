Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 3000 :genetic-operator-probabilities {:uniform-addition-and-deletion,1.0} :uniform-addition-and-deletion-rate 0.09
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x30b9728f clojush.problems.software.smallest$fn__7461@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@24b8a393]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:uniform-addition-and-deletion 1.0}
max-error = 1
max-generations = 3000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[38 38 38 44] 38] [[-98 -98 -98 26] -98] [[70 70 70 -27] -27] [[75 -42 75 75] -42] [[7 -91 7 7] -91] [[56 -82 -82 -82] -82] [[-94 -86 -86 -86] -94] [[-26 -26 98 -26] -26] [[50 50 50 -100] -100] [[-14 -14 -14 92] -14] [(-68 -68 -68 -68) -68] [(-54 -54 -54 -54) -54] [(23 23 23 23) 23] [(15 15 15 15) 15] [(-71 -71 -71 -71) -71] [(100 62 73 56) 56] [(3 40 72 26) 3] [(3 94 22 79) 3] [(91 54 67 13) 13] [(89 74 37 31) 31] [(60 6 77 52) 6] [(50 8 23 99) 8] [(22 77 67 30) 22] [(34 16 80 86) 16] [(17 10 46 49) 10] [(73 100 6 76) 6] [(25 51 3 51) 3] [(12 74 19 37) 12] [(58 1 93 67) 1] [(51 23 51 85) 23] [(1 79 17 45) 1] [(28 98 87 17) 17] [(93 4 80 60) 4] [(48 61 90 32) 32] [(39 99 56 93) 39] [(0 -22 -93 -100) -100] [(-36 -40 44 -65) -65] [(64 63 14 1) 1] [(96 -70 -35 -48) -70] [(-30 65 -1 83) -30] [(30 62 58 32) 30] [(-69 81 -64 30) -69] [(11 95 61 -42) -42] [(54 35 95 -3) -3] [(100 79 8 84) 8] [(88 25 -78 -67) -78] [(52 -44 34 -71) -71] [(-31 29 -17 -75) -75] [(-4 32 -62 -50) -62] [(20 -66 72 49) -66] [(50 68 69 -13) -13] [(20 -22 -74 -55) -74] [(-81 78 -56 29) -81] [(-70 -39 -19 17) -70] [(-81 3 2 -70) -81] [(-28 38 9 86) -28] [(93 -52 -46 89) -52] [(52 47 20 -63) -63] [(-49 42 96 62) -49] [(-70 -27 -43 -46) -70] [(9 -76 41 -18) -76] [(51 84 37 65) 37] [(-15 -96 96 -44) -96] [(-12 -45 25 -88) -88] [(77 90 17 9) 9] [(35 1 15 2) 1] [(-61 -27 -87 -20) -87] [(-43 0 88 -93) -93] [(41 1 60 69) 1] [(-58 -52 -84 60) -84] [(-77 90 21 3) -77] [(-60 -24 94 -33) -60] [(78 23 60 29) 23] [(97 83 71 22) 22] [(27 -93 3 -1) -93] [(51 -46 14 54) -46] [(-94 96 0 98) -94] [(5 89 -38 -16) -38] [(-48 57 -6 96) -48] [(55 -13 -75 -60) -75] [(-17 -26 94 -43) -43] [(-13 94 100 43) -13] [(54 -43 -75 -35) -75] [(-64 -41 98 -59) -64] [(17 18 10 -11) -11] [(-9 71 -53 -99) -99] [(-35 87 14 51) -35] [(-12 -49 -67 -17) -67] [(-84 -6 -18 47) -84] [(-78 -100 -26 59) -100] [(71 -37 -88 3) -88] [(-28 -52 -81 72) -81] [(62 4 21 -9) -9] [(-100 -69 -67 67) -100] [(-83 48 -30 -31) -83])
uniform-addition-and-deletion-rate = 0.09
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[38 38 38 44] 38]
Train Case:   6 | Input/Output: [[-98 -98 -98 26] -98]
Train Case:   7 | Input/Output: [[70 70 70 -27] -27]
Train Case:   8 | Input/Output: [[75 -42 75 75] -42]
Train Case:   9 | Input/Output: [[7 -91 7 7] -91]
Train Case:  10 | Input/Output: [[56 -82 -82 -82] -82]
Train Case:  11 | Input/Output: [[-94 -86 -86 -86] -94]
Train Case:  12 | Input/Output: [[-26 -26 98 -26] -26]
Train Case:  13 | Input/Output: [[50 50 50 -100] -100]
Train Case:  14 | Input/Output: [[-14 -14 -14 92] -14]
Train Case:  15 | Input/Output: [(-68 -68 -68 -68) -68]
Train Case:  16 | Input/Output: [(-54 -54 -54 -54) -54]
Train Case:  17 | Input/Output: [(23 23 23 23) 23]
Train Case:  18 | Input/Output: [(15 15 15 15) 15]
Train Case:  19 | Input/Output: [(-71 -71 -71 -71) -71]
Train Case:  20 | Input/Output: [(100 62 73 56) 56]
Train Case:  21 | Input/Output: [(3 40 72 26) 3]
Train Case:  22 | Input/Output: [(3 94 22 79) 3]
Train Case:  23 | Input/Output: [(91 54 67 13) 13]
Train Case:  24 | Input/Output: [(89 74 37 31) 31]
Train Case:  25 | Input/Output: [(60 6 77 52) 6]
Train Case:  26 | Input/Output: [(50 8 23 99) 8]
Train Case:  27 | Input/Output: [(22 77 67 30) 22]
Train Case:  28 | Input/Output: [(34 16 80 86) 16]
Train Case:  29 | Input/Output: [(17 10 46 49) 10]
Train Case:  30 | Input/Output: [(73 100 6 76) 6]
Train Case:  31 | Input/Output: [(25 51 3 51) 3]
Train Case:  32 | Input/Output: [(12 74 19 37) 12]
Train Case:  33 | Input/Output: [(58 1 93 67) 1]
Train Case:  34 | Input/Output: [(51 23 51 85) 23]
Train Case:  35 | Input/Output: [(1 79 17 45) 1]
Train Case:  36 | Input/Output: [(28 98 87 17) 17]
Train Case:  37 | Input/Output: [(93 4 80 60) 4]
Train Case:  38 | Input/Output: [(48 61 90 32) 32]
Train Case:  39 | Input/Output: [(39 99 56 93) 39]
Train Case:  40 | Input/Output: [(0 -22 -93 -100) -100]
Train Case:  41 | Input/Output: [(-36 -40 44 -65) -65]
Train Case:  42 | Input/Output: [(64 63 14 1) 1]
Train Case:  43 | Input/Output: [(96 -70 -35 -48) -70]
Train Case:  44 | Input/Output: [(-30 65 -1 83) -30]
Train Case:  45 | Input/Output: [(30 62 58 32) 30]
Train Case:  46 | Input/Output: [(-69 81 -64 30) -69]
Train Case:  47 | Input/Output: [(11 95 61 -42) -42]
Train Case:  48 | Input/Output: [(54 35 95 -3) -3]
Train Case:  49 | Input/Output: [(100 79 8 84) 8]
Train Case:  50 | Input/Output: [(88 25 -78 -67) -78]
Train Case:  51 | Input/Output: [(52 -44 34 -71) -71]
Train Case:  52 | Input/Output: [(-31 29 -17 -75) -75]
Train Case:  53 | Input/Output: [(-4 32 -62 -50) -62]
Train Case:  54 | Input/Output: [(20 -66 72 49) -66]
Train Case:  55 | Input/Output: [(50 68 69 -13) -13]
Train Case:  56 | Input/Output: [(20 -22 -74 -55) -74]
Train Case:  57 | Input/Output: [(-81 78 -56 29) -81]
Train Case:  58 | Input/Output: [(-70 -39 -19 17) -70]
Train Case:  59 | Input/Output: [(-81 3 2 -70) -81]
Train Case:  60 | Input/Output: [(-28 38 9 86) -28]
Train Case:  61 | Input/Output: [(93 -52 -46 89) -52]
Train Case:  62 | Input/Output: [(52 47 20 -63) -63]
Train Case:  63 | Input/Output: [(-49 42 96 62) -49]
Train Case:  64 | Input/Output: [(-70 -27 -43 -46) -70]
Train Case:  65 | Input/Output: [(9 -76 41 -18) -76]
Train Case:  66 | Input/Output: [(51 84 37 65) 37]
Train Case:  67 | Input/Output: [(-15 -96 96 -44) -96]
Train Case:  68 | Input/Output: [(-12 -45 25 -88) -88]
Train Case:  69 | Input/Output: [(77 90 17 9) 9]
Train Case:  70 | Input/Output: [(35 1 15 2) 1]
Train Case:  71 | Input/Output: [(-61 -27 -87 -20) -87]
Train Case:  72 | Input/Output: [(-43 0 88 -93) -93]
Train Case:  73 | Input/Output: [(41 1 60 69) 1]
Train Case:  74 | Input/Output: [(-58 -52 -84 60) -84]
Train Case:  75 | Input/Output: [(-77 90 21 3) -77]
Train Case:  76 | Input/Output: [(-60 -24 94 -33) -60]
Train Case:  77 | Input/Output: [(78 23 60 29) 23]
Train Case:  78 | Input/Output: [(97 83 71 22) 22]
Train Case:  79 | Input/Output: [(27 -93 3 -1) -93]
Train Case:  80 | Input/Output: [(51 -46 14 54) -46]
Train Case:  81 | Input/Output: [(-94 96 0 98) -94]
Train Case:  82 | Input/Output: [(5 89 -38 -16) -38]
Train Case:  83 | Input/Output: [(-48 57 -6 96) -48]
Train Case:  84 | Input/Output: [(55 -13 -75 -60) -75]
Train Case:  85 | Input/Output: [(-17 -26 94 -43) -43]
Train Case:  86 | Input/Output: [(-13 94 100 43) -13]
Train Case:  87 | Input/Output: [(54 -43 -75 -35) -75]
Train Case:  88 | Input/Output: [(-64 -41 98 -59) -64]
Train Case:  89 | Input/Output: [(17 18 10 -11) -11]
Train Case:  90 | Input/Output: [(-9 71 -53 -99) -99]
Train Case:  91 | Input/Output: [(-35 87 14 51) -35]
Train Case:  92 | Input/Output: [(-12 -49 -67 -17) -67]
Train Case:  93 | Input/Output: [(-84 -6 -18 47) -84]
Train Case:  94 | Input/Output: [(-78 -100 -26 59) -100]
Train Case:  95 | Input/Output: [(71 -37 -88 3) -88]
Train Case:  96 | Input/Output: [(-28 -52 -81 72) -81]
Train Case:  97 | Input/Output: [(62 4 21 -9) -9]
Train Case:  98 | Input/Output: [(-100 -69 -67 67) -100]
Train Case:  99 | Input/Output: [(-83 48 -30 -31) -83]
Test Case:   0 | Input/Output: [[-42 -24 -42 -42] -42]
Test Case:   1 | Input/Output: [[-66 -66 -66 93] -66]
Test Case:   2 | Input/Output: [[37 37 -23 37] -23]
Test Case:   3 | Input/Output: [[25 25 -38 25] -38]
Test Case:   4 | Input/Output: [[44 -5 44 44] -5]
Test Case:   5 | Input/Output: [[13 9 9 9] 9]
Test Case:   6 | Input/Output: [[10 -22 -22 -22] -22]
Test Case:   7 | Input/Output: [[-71 -93 -93 -93] -93]
Test Case:   8 | Input/Output: [[24 24 24 37] 24]
Test Case:   9 | Input/Output: [[5 65 5 5] 5]
Test Case:  10 | Input/Output: [[73 73 99 73] 73]
Test Case:  11 | Input/Output: [[-53 20 -53 -53] -53]
Test Case:  12 | Input/Output: [[-87 65 -87 -87] -87]
Test Case:  13 | Input/Output: [[-82 -44 -44 -44] -82]
Test Case:  14 | Input/Output: [[-8 79 79 79] -8]
Test Case:  15 | Input/Output: [[67 43 67 67] 43]
Test Case:  16 | Input/Output: [[-39 -39 -19 -39] -39]
Test Case:  17 | Input/Output: [[-59 -59 51 -59] -59]
Test Case:  18 | Input/Output: [[-90 16 16 16] -90]
Test Case:  19 | Input/Output: [[-28 -11 -28 -28] -28]
Test Case:  20 | Input/Output: [[73 46 73 73] 46]
Test Case:  21 | Input/Output: [[-90 39 39 39] -90]
Test Case:  22 | Input/Output: [[-66 -68 -68 -68] -68]
Test Case:  23 | Input/Output: [[9 9 9 -90] -90]
Test Case:  24 | Input/Output: [[36 -13 -13 -13] -13]
Test Case:  25 | Input/Output: [[33 -82 33 33] -82]
Test Case:  26 | Input/Output: [[48 1 48 48] 1]
Test Case:  27 | Input/Output: [[60 -57 60 60] -57]
Test Case:  28 | Input/Output: [[-9 32 -9 -9] -9]
Test Case:  29 | Input/Output: [[-79 -79 -31 -79] -79]
Test Case:  30 | Input/Output: [[26 26 69 26] 26]
Test Case:  31 | Input/Output: [[53 53 53 26] 26]
Test Case:  32 | Input/Output: [[23 23 -1 23] -1]
Test Case:  33 | Input/Output: [[-37 -37 -37 -78] -78]
Test Case:  34 | Input/Output: [[-74 -63 -74 -74] -74]
Test Case:  35 | Input/Output: [[25 56 56 56] 25]
Test Case:  36 | Input/Output: [[78 -60 -60 -60] -60]
Test Case:  37 | Input/Output: [[62 -32 -32 -32] -32]
Test Case:  38 | Input/Output: [[17 71 71 71] 17]
Test Case:  39 | Input/Output: [[33 43 43 43] 33]
Test Case:  40 | Input/Output: [[11 11 -79 11] -79]
Test Case:  41 | Input/Output: [[71 28 71 71] 28]
Test Case:  42 | Input/Output: [[-31 8 -31 -31] -31]
Test Case:  43 | Input/Output: [[-75 -75 -75 13] -75]
Test Case:  44 | Input/Output: [[49 -45 49 49] -45]
Test Case:  45 | Input/Output: [[-10 36 36 36] -10]
Test Case:  46 | Input/Output: [[-1 -1 -1 -64] -64]
Test Case:  47 | Input/Output: [[-33 -33 -33 -56] -56]
Test Case:  48 | Input/Output: [[-39 -39 -39 -44] -44]
Test Case:  49 | Input/Output: [[-89 -55 -89 -89] -89]
Test Case:  50 | Input/Output: [[25 25 6 25] 6]
Test Case:  51 | Input/Output: [[84 84 55 84] 55]
Test Case:  52 | Input/Output: [[-94 -94 -22 -94] -94]
Test Case:  53 | Input/Output: [[-94 -32 -32 -32] -94]
Test Case:  54 | Input/Output: [[56 56 28 56] 28]
Test Case:  55 | Input/Output: [[16 -2 -2 -2] -2]
Test Case:  56 | Input/Output: [[90 -87 -87 -87] -87]
Test Case:  57 | Input/Output: [[10 10 -85 10] -85]
Test Case:  58 | Input/Output: [[-79 97 97 97] -79]
Test Case:  59 | Input/Output: [[-77 -77 8 -77] -77]
Test Case:  60 | Input/Output: [[54 77 77 77] 54]
Test Case:  61 | Input/Output: [[-87 -87 -87 55] -87]
Test Case:  62 | Input/Output: [[53 53 -22 53] -22]
Test Case:  63 | Input/Output: [[-84 -35 -84 -84] -84]
Test Case:  64 | Input/Output: [[91 43 91 91] 43]
Test Case:  65 | Input/Output: [[20 20 20 -27] -27]
Test Case:  66 | Input/Output: [[-25 -25 -25 -46] -46]
Test Case:  67 | Input/Output: [[45 -35 -35 -35] -35]
Test Case:  68 | Input/Output: [[83 83 83 -14] -14]
Test Case:  69 | Input/Output: [[-18 47 -18 -18] -18]
Test Case:  70 | Input/Output: [[-17 52 -17 -17] -17]
Test Case:  71 | Input/Output: [[36 -93 36 36] -93]
Test Case:  72 | Input/Output: [[35 28 35 35] 28]
Test Case:  73 | Input/Output: [[-22 -22 -22 -21] -22]
Test Case:  74 | Input/Output: [[-37 21 21 21] -37]
Test Case:  75 | Input/Output: [[47 8 47 47] 8]
Test Case:  76 | Input/Output: [[-66 -66 -64 -66] -66]
Test Case:  77 | Input/Output: [[-63 -66 -63 -63] -66]
Test Case:  78 | Input/Output: [[-49 -8 -49 -49] -49]
Test Case:  79 | Input/Output: [[-93 -93 -43 -93] -93]
Test Case:  80 | Input/Output: [[15 97 97 97] 15]
Test Case:  81 | Input/Output: [[90 90 90 -36] -36]
Test Case:  82 | Input/Output: [[-17 -88 -88 -88] -88]
Test Case:  83 | Input/Output: [[-56 -56 -56 74] -56]
Test Case:  84 | Input/Output: [[-68 -68 -68 40] -68]
Test Case:  85 | Input/Output: [[-71 -71 -71 26] -71]
Test Case:  86 | Input/Output: [[-47 -47 -47 52] -47]
Test Case:  87 | Input/Output: [[31 -74 31 31] -74]
Test Case:  88 | Input/Output: [[63 63 -2 63] -2]
Test Case:  89 | Input/Output: [[72 -4 -4 -4] -4]
Test Case:  90 | Input/Output: [[81 -23 81 81] -23]
Test Case:  91 | Input/Output: [[-34 -34 -64 -34] -64]
Test Case:  92 | Input/Output: [[-46 -91 -46 -46] -91]
Test Case:  93 | Input/Output: [[49 41 49 49] 41]
Test Case:  94 | Input/Output: [[-99 -99 -68 -99] -99]
Test Case:  95 | Input/Output: [[-44 86 -44 -44] -44]
Test Case:  96 | Input/Output: [[24 24 -23 24] -23]
Test Case:  97 | Input/Output: [[-7 -7 -7 3] -7]
Test Case:  98 | Input/Output: [[63 -42 63 63] -42]
Test Case:  99 | Input/Output: [[27 27 -56 27] -56]
Test Case: 100 | Input/Output: [(-10 -10 -10 -10) -10]
Test Case: 101 | Input/Output: [(-26 -26 -26 -26) -26]
Test Case: 102 | Input/Output: [(-7 -7 -7 -7) -7]
Test Case: 103 | Input/Output: [(-62 -62 -62 -62) -62]
Test Case: 104 | Input/Output: [(-65 -65 -65 -65) -65]
Test Case: 105 | Input/Output: [(84 84 84 84) 84]
Test Case: 106 | Input/Output: [(-58 -58 -58 -58) -58]
Test Case: 107 | Input/Output: [(-23 -23 -23 -23) -23]
Test Case: 108 | Input/Output: [(65 65 65 65) 65]
Test Case: 109 | Input/Output: [(15 15 15 15) 15]
Test Case: 110 | Input/Output: [(46 46 46 46) 46]
Test Case: 111 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 112 | Input/Output: [(-77 -77 -77 -77) -77]
Test Case: 113 | Input/Output: [(49 49 49 49) 49]
Test Case: 114 | Input/Output: [(80 80 80 80) 80]
Test Case: 115 | Input/Output: [(55 55 55 55) 55]
Test Case: 116 | Input/Output: [(-63 -63 -63 -63) -63]
Test Case: 117 | Input/Output: [(-48 -48 -48 -48) -48]
Test Case: 118 | Input/Output: [(-22 -22 -22 -22) -22]
Test Case: 119 | Input/Output: [(-67 -67 -67 -67) -67]
Test Case: 120 | Input/Output: [(-81 -81 -81 -81) -81]
Test Case: 121 | Input/Output: [(-14 -14 -14 -14) -14]
Test Case: 122 | Input/Output: [(58 58 58 58) 58]
Test Case: 123 | Input/Output: [(33 33 33 33) 33]
Test Case: 124 | Input/Output: [(85 85 85 85) 85]
Test Case: 125 | Input/Output: [(-58 -58 -58 -58) -58]
Test Case: 126 | Input/Output: [(39 39 39 39) 39]
Test Case: 127 | Input/Output: [(-52 -52 -52 -52) -52]
Test Case: 128 | Input/Output: [(-93 -93 -93 -93) -93]
Test Case: 129 | Input/Output: [(-8 -8 -8 -8) -8]
Test Case: 130 | Input/Output: [(-35 -35 -35 -35) -35]
Test Case: 131 | Input/Output: [(-35 -35 -35 -35) -35]
Test Case: 132 | Input/Output: [(-6 -6 -6 -6) -6]
Test Case: 133 | Input/Output: [(55 55 55 55) 55]
Test Case: 134 | Input/Output: [(6 6 6 6) 6]
Test Case: 135 | Input/Output: [(-31 -31 -31 -31) -31]
Test Case: 136 | Input/Output: [(-14 -14 -14 -14) -14]
Test Case: 137 | Input/Output: [(-83 -83 -83 -83) -83]
Test Case: 138 | Input/Output: [(-6 -6 -6 -6) -6]
Test Case: 139 | Input/Output: [(-24 -24 -24 -24) -24]
Test Case: 140 | Input/Output: [(3 3 3 3) 3]
Test Case: 141 | Input/Output: [(-76 -76 -76 -76) -76]
Test Case: 142 | Input/Output: [(-3 -3 -3 -3) -3]
Test Case: 143 | Input/Output: [(22 22 22 22) 22]
Test Case: 144 | Input/Output: [(10 10 10 10) 10]
Test Case: 145 | Input/Output: [(-67 -67 -67 -67) -67]
Test Case: 146 | Input/Output: [(82 82 82 82) 82]
Test Case: 147 | Input/Output: [(70 70 70 70) 70]
Test Case: 148 | Input/Output: [(55 55 55 55) 55]
Test Case: 149 | Input/Output: [(93 93 93 93) 93]
Test Case: 150 | Input/Output: [(57 57 57 57) 57]
Test Case: 151 | Input/Output: [(71 71 71 71) 71]
Test Case: 152 | Input/Output: [(-73 -73 -73 -73) -73]
Test Case: 153 | Input/Output: [(64 64 64 64) 64]
Test Case: 154 | Input/Output: [(18 18 18 18) 18]
Test Case: 155 | Input/Output: [(0 0 0 0) 0]
Test Case: 156 | Input/Output: [(-94 -94 -94 -94) -94]
Test Case: 157 | Input/Output: [(-94 -94 -94 -94) -94]
Test Case: 158 | Input/Output: [(92 92 92 92) 92]
Test Case: 159 | Input/Output: [(-36 -36 -36 -36) -36]
Test Case: 160 | Input/Output: [(89 89 89 89) 89]
Test Case: 161 | Input/Output: [(-66 -66 -66 -66) -66]
Test Case: 162 | Input/Output: [(67 67 67 67) 67]
Test Case: 163 | Input/Output: [(35 35 35 35) 35]
Test Case: 164 | Input/Output: [(46 46 46 46) 46]
Test Case: 165 | Input/Output: [(-32 -32 -32 -32) -32]
Test Case: 166 | Input/Output: [(-69 -69 -69 -69) -69]
Test Case: 167 | Input/Output: [(-73 -73 -73 -73) -73]
Test Case: 168 | Input/Output: [(-79 -79 -79 -79) -79]
Test Case: 169 | Input/Output: [(84 84 84 84) 84]
Test Case: 170 | Input/Output: [(88 88 88 88) 88]
Test Case: 171 | Input/Output: [(-51 -51 -51 -51) -51]
Test Case: 172 | Input/Output: [(-85 -85 -85 -85) -85]
Test Case: 173 | Input/Output: [(-81 -81 -81 -81) -81]
Test Case: 174 | Input/Output: [(19 19 19 19) 19]
Test Case: 175 | Input/Output: [(-60 -60 -60 -60) -60]
Test Case: 176 | Input/Output: [(-20 -20 -20 -20) -20]
Test Case: 177 | Input/Output: [(58 58 58 58) 58]
Test Case: 178 | Input/Output: [(78 78 78 78) 78]
Test Case: 179 | Input/Output: [(-7 -7 -7 -7) -7]
Test Case: 180 | Input/Output: [(-74 -74 -74 -74) -74]
Test Case: 181 | Input/Output: [(-60 -60 -60 -60) -60]
Test Case: 182 | Input/Output: [(-6 -6 -6 -6) -6]
Test Case: 183 | Input/Output: [(4 4 4 4) 4]
Test Case: 184 | Input/Output: [(-36 -36 -36 -36) -36]
Test Case: 185 | Input/Output: [(93 93 93 93) 93]
Test Case: 186 | Input/Output: [(72 72 72 72) 72]
Test Case: 187 | Input/Output: [(100 100 100 100) 100]
Test Case: 188 | Input/Output: [(80 80 80 80) 80]
Test Case: 189 | Input/Output: [(93 93 93 93) 93]
Test Case: 190 | Input/Output: [(15 15 15 15) 15]
Test Case: 191 | Input/Output: [(-3 -3 -3 -3) -3]
Test Case: 192 | Input/Output: [(-5 -5 -5 -5) -5]
Test Case: 193 | Input/Output: [(82 82 82 82) 82]
Test Case: 194 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 195 | Input/Output: [(-6 -6 -6 -6) -6]
Test Case: 196 | Input/Output: [(-24 -24 -24 -24) -24]
Test Case: 197 | Input/Output: [(-50 -50 -50 -50) -50]
Test Case: 198 | Input/Output: [(21 21 21 21) 21]
Test Case: 199 | Input/Output: [(98 98 98 98) 98]
Test Case: 200 | Input/Output: [(66 76 92 61) 61]
Test Case: 201 | Input/Output: [(53 22 79 69) 22]
Test Case: 202 | Input/Output: [(8 40 35 53) 8]
Test Case: 203 | Input/Output: [(62 37 87 96) 37]
Test Case: 204 | Input/Output: [(94 54 22 45) 22]
Test Case: 205 | Input/Output: [(14 10 42 10) 10]
Test Case: 206 | Input/Output: [(45 99 65 4) 4]
Test Case: 207 | Input/Output: [(51 15 62 48) 15]
Test Case: 208 | Input/Output: [(8 16 53 66) 8]
Test Case: 209 | Input/Output: [(55 60 88 63) 55]
Test Case: 210 | Input/Output: [(97 61 28 48) 28]
Test Case: 211 | Input/Output: [(59 54 0 33) 0]
Test Case: 212 | Input/Output: [(83 86 44 0) 0]
Test Case: 213 | Input/Output: [(83 17 72 79) 17]
Test Case: 214 | Input/Output: [(37 48 81 71) 37]
Test Case: 215 | Input/Output: [(50 52 11 88) 11]
Test Case: 216 | Input/Output: [(64 84 42 94) 42]
Test Case: 217 | Input/Output: [(23 55 76 47) 23]
Test Case: 218 | Input/Output: [(82 96 71 72) 71]
Test Case: 219 | Input/Output: [(23 99 87 30) 23]
Test Case: 220 | Input/Output: [(18 34 79 100) 18]
Test Case: 221 | Input/Output: [(85 11 4 86) 4]
Test Case: 222 | Input/Output: [(6 9 24 48) 6]
Test Case: 223 | Input/Output: [(97 37 59 44) 37]
Test Case: 224 | Input/Output: [(72 3 85 87) 3]
Test Case: 225 | Input/Output: [(52 61 100 91) 52]
Test Case: 226 | Input/Output: [(77 53 68 0) 0]
Test Case: 227 | Input/Output: [(12 89 87 96) 12]
Test Case: 228 | Input/Output: [(18 82 65 4) 4]
Test Case: 229 | Input/Output: [(19 89 52 56) 19]
Test Case: 230 | Input/Output: [(34 83 31 57) 31]
Test Case: 231 | Input/Output: [(96 31 60 16) 16]
Test Case: 232 | Input/Output: [(61 61 5 7) 5]
Test Case: 233 | Input/Output: [(76 3 99 6) 3]
Test Case: 234 | Input/Output: [(4 42 86 63) 4]
Test Case: 235 | Input/Output: [(38 75 90 17) 17]
Test Case: 236 | Input/Output: [(39 29 66 72) 29]
Test Case: 237 | Input/Output: [(25 98 32 61) 25]
Test Case: 238 | Input/Output: [(51 25 58 67) 25]
Test Case: 239 | Input/Output: [(44 28 62 44) 28]
Test Case: 240 | Input/Output: [(83 64 43 84) 43]
Test Case: 241 | Input/Output: [(84 14 4 72) 4]
Test Case: 242 | Input/Output: [(33 78 65 34) 33]
Test Case: 243 | Input/Output: [(38 75 41 13) 13]
Test Case: 244 | Input/Output: [(59 69 39 81) 39]
Test Case: 245 | Input/Output: [(59 14 85 95) 14]
Test Case: 246 | Input/Output: [(36 31 85 66) 31]
Test Case: 247 | Input/Output: [(28 33 75 30) 28]
Test Case: 248 | Input/Output: [(3 14 45 15) 3]
Test Case: 249 | Input/Output: [(95 31 5 73) 5]
Test Case: 250 | Input/Output: [(50 71 92 45) 45]
Test Case: 251 | Input/Output: [(33 8 65 66) 8]
Test Case: 252 | Input/Output: [(78 51 27 19) 19]
Test Case: 253 | Input/Output: [(63 86 78 85) 63]
Test Case: 254 | Input/Output: [(20 90 38 17) 17]
Test Case: 255 | Input/Output: [(15 50 44 0) 0]
Test Case: 256 | Input/Output: [(73 61 72 78) 61]
Test Case: 257 | Input/Output: [(45 95 61 30) 30]
Test Case: 258 | Input/Output: [(15 80 72 40) 15]
Test Case: 259 | Input/Output: [(85 26 85 91) 26]
Test Case: 260 | Input/Output: [(39 58 50 74) 39]
Test Case: 261 | Input/Output: [(51 97 40 40) 40]
Test Case: 262 | Input/Output: [(34 26 53 64) 26]
Test Case: 263 | Input/Output: [(60 24 72 85) 24]
Test Case: 264 | Input/Output: [(76 2 66 20) 2]
Test Case: 265 | Input/Output: [(46 90 62 24) 24]
Test Case: 266 | Input/Output: [(55 33 75 5) 5]
Test Case: 267 | Input/Output: [(18 0 6 73) 0]
Test Case: 268 | Input/Output: [(64 69 34 59) 34]
Test Case: 269 | Input/Output: [(60 13 36 75) 13]
Test Case: 270 | Input/Output: [(22 32 2 91) 2]
Test Case: 271 | Input/Output: [(30 91 59 43) 30]
Test Case: 272 | Input/Output: [(48 92 32 79) 32]
Test Case: 273 | Input/Output: [(90 43 61 12) 12]
Test Case: 274 | Input/Output: [(28 81 22 90) 22]
Test Case: 275 | Input/Output: [(14 84 18 41) 14]
Test Case: 276 | Input/Output: [(39 69 76 73) 39]
Test Case: 277 | Input/Output: [(0 27 65 5) 0]
Test Case: 278 | Input/Output: [(80 91 47 32) 32]
Test Case: 279 | Input/Output: [(28 23 0 5) 0]
Test Case: 280 | Input/Output: [(92 93 84 37) 37]
Test Case: 281 | Input/Output: [(85 72 60 45) 45]
Test Case: 282 | Input/Output: [(98 62 49 52) 49]
Test Case: 283 | Input/Output: [(75 96 60 9) 9]
Test Case: 284 | Input/Output: [(13 86 15 90) 13]
Test Case: 285 | Input/Output: [(53 36 84 84) 36]
Test Case: 286 | Input/Output: [(39 66 73 87) 39]
Test Case: 287 | Input/Output: [(67 42 23 45) 23]
Test Case: 288 | Input/Output: [(24 79 58 14) 14]
Test Case: 289 | Input/Output: [(42 1 82 25) 1]
Test Case: 290 | Input/Output: [(5 7 60 40) 5]
Test Case: 291 | Input/Output: [(7 29 5 90) 5]
Test Case: 292 | Input/Output: [(31 50 18 76) 18]
Test Case: 293 | Input/Output: [(100 47 28 52) 28]
Test Case: 294 | Input/Output: [(100 53 4 52) 4]
Test Case: 295 | Input/Output: [(59 63 32 4) 4]
Test Case: 296 | Input/Output: [(77 44 96 93) 44]
Test Case: 297 | Input/Output: [(42 15 40 29) 15]
Test Case: 298 | Input/Output: [(66 17 80 98) 17]
Test Case: 299 | Input/Output: [(48 69 86 46) 46]
Test Case: 300 | Input/Output: [(54 75 60 61) 54]
Test Case: 301 | Input/Output: [(73 3 51 55) 3]
Test Case: 302 | Input/Output: [(60 52 32 19) 19]
Test Case: 303 | Input/Output: [(62 19 39 3) 3]
Test Case: 304 | Input/Output: [(62 68 19 81) 19]
Test Case: 305 | Input/Output: [(57 76 5 30) 5]
Test Case: 306 | Input/Output: [(70 75 8 0) 0]
Test Case: 307 | Input/Output: [(38 16 52 70) 16]
Test Case: 308 | Input/Output: [(98 68 35 86) 35]
Test Case: 309 | Input/Output: [(1 39 17 97) 1]
Test Case: 310 | Input/Output: [(31 85 45 64) 31]
Test Case: 311 | Input/Output: [(21 1 87 71) 1]
Test Case: 312 | Input/Output: [(59 57 46 87) 46]
Test Case: 313 | Input/Output: [(92 27 55 19) 19]
Test Case: 314 | Input/Output: [(45 20 68 94) 20]
Test Case: 315 | Input/Output: [(11 82 58 71) 11]
Test Case: 316 | Input/Output: [(53 90 56 68) 53]
Test Case: 317 | Input/Output: [(84 3 44 8) 3]
Test Case: 318 | Input/Output: [(1 55 39 27) 1]
Test Case: 319 | Input/Output: [(67 93 64 60) 60]
Test Case: 320 | Input/Output: [(71 29 76 83) 29]
Test Case: 321 | Input/Output: [(20 95 38 82) 20]
Test Case: 322 | Input/Output: [(74 82 23 78) 23]
Test Case: 323 | Input/Output: [(48 6 63 84) 6]
Test Case: 324 | Input/Output: [(69 5 19 68) 5]
Test Case: 325 | Input/Output: [(78 69 26 34) 26]
Test Case: 326 | Input/Output: [(40 53 76 7) 7]
Test Case: 327 | Input/Output: [(83 51 69 2) 2]
Test Case: 328 | Input/Output: [(21 77 75 98) 21]
Test Case: 329 | Input/Output: [(21 34 31 34) 21]
Test Case: 330 | Input/Output: [(56 76 70 1) 1]
Test Case: 331 | Input/Output: [(26 62 44 14) 14]
Test Case: 332 | Input/Output: [(18 52 73 87) 18]
Test Case: 333 | Input/Output: [(15 39 73 24) 15]
Test Case: 334 | Input/Output: [(11 50 76 49) 11]
Test Case: 335 | Input/Output: [(60 40 9 59) 9]
Test Case: 336 | Input/Output: [(41 14 31 76) 14]
Test Case: 337 | Input/Output: [(67 19 72 19) 19]
Test Case: 338 | Input/Output: [(90 16 54 15) 15]
Test Case: 339 | Input/Output: [(38 47 10 43) 10]
Test Case: 340 | Input/Output: [(14 60 92 86) 14]
Test Case: 341 | Input/Output: [(83 28 35 45) 28]
Test Case: 342 | Input/Output: [(2 34 52 17) 2]
Test Case: 343 | Input/Output: [(64 76 100 40) 40]
Test Case: 344 | Input/Output: [(74 79 50 74) 50]
Test Case: 345 | Input/Output: [(10 42 37 36) 10]
Test Case: 346 | Input/Output: [(100 3 74 57) 3]
Test Case: 347 | Input/Output: [(88 54 87 99) 54]
Test Case: 348 | Input/Output: [(24 62 47 46) 24]
Test Case: 349 | Input/Output: [(50 43 48 16) 16]
Test Case: 350 | Input/Output: [(78 78 86 8) 8]
Test Case: 351 | Input/Output: [(27 32 24 74) 24]
Test Case: 352 | Input/Output: [(84 79 99 46) 46]
Test Case: 353 | Input/Output: [(87 69 81 48) 48]
Test Case: 354 | Input/Output: [(92 75 67 64) 64]
Test Case: 355 | Input/Output: [(3 3 63 93) 3]
Test Case: 356 | Input/Output: [(14 30 13 16) 13]
Test Case: 357 | Input/Output: [(46 59 4 24) 4]
Test Case: 358 | Input/Output: [(54 12 7 58) 7]
Test Case: 359 | Input/Output: [(99 69 74 98) 69]
Test Case: 360 | Input/Output: [(81 32 70 41) 32]
Test Case: 361 | Input/Output: [(6 28 70 40) 6]
Test Case: 362 | Input/Output: [(27 66 25 61) 25]
Test Case: 363 | Input/Output: [(77 30 42 21) 21]
Test Case: 364 | Input/Output: [(67 47 97 63) 47]
Test Case: 365 | Input/Output: [(45 29 80 16) 16]
Test Case: 366 | Input/Output: [(91 61 41 86) 41]
Test Case: 367 | Input/Output: [(48 72 23 89) 23]
Test Case: 368 | Input/Output: [(71 26 51 54) 26]
Test Case: 369 | Input/Output: [(84 38 51 74) 38]
Test Case: 370 | Input/Output: [(71 2 62 56) 2]
Test Case: 371 | Input/Output: [(24 89 5 40) 5]
Test Case: 372 | Input/Output: [(25 45 3 71) 3]
Test Case: 373 | Input/Output: [(4 74 73 56) 4]
Test Case: 374 | Input/Output: [(44 56 50 74) 44]
Test Case: 375 | Input/Output: [(60 36 59 19) 19]
Test Case: 376 | Input/Output: [(81 55 8 33) 8]
Test Case: 377 | Input/Output: [(35 16 60 100) 16]
Test Case: 378 | Input/Output: [(26 97 45 39) 26]
Test Case: 379 | Input/Output: [(75 84 93 56) 56]
Test Case: 380 | Input/Output: [(54 42 32 16) 16]
Test Case: 381 | Input/Output: [(0 97 21 72) 0]
Test Case: 382 | Input/Output: [(91 53 32 94) 32]
Test Case: 383 | Input/Output: [(57 58 27 64) 27]
Test Case: 384 | Input/Output: [(76 48 24 94) 24]
Test Case: 385 | Input/Output: [(10 40 58 59) 10]
Test Case: 386 | Input/Output: [(2 41 69 20) 2]
Test Case: 387 | Input/Output: [(41 2 84 15) 2]
Test Case: 388 | Input/Output: [(18 81 85 40) 18]
Test Case: 389 | Input/Output: [(19 2 15 57) 2]
Test Case: 390 | Input/Output: [(25 84 29 26) 25]
Test Case: 391 | Input/Output: [(100 84 75 88) 75]
Test Case: 392 | Input/Output: [(7 18 82 78) 7]
Test Case: 393 | Input/Output: [(66 75 80 53) 53]
Test Case: 394 | Input/Output: [(71 80 81 59) 59]
Test Case: 395 | Input/Output: [(60 49 74 69) 49]
Test Case: 396 | Input/Output: [(24 26 21 93) 21]
Test Case: 397 | Input/Output: [(7 2 35 66) 2]
Test Case: 398 | Input/Output: [(75 42 90 94) 42]
Test Case: 399 | Input/Output: [(8 27 80 31) 8]
Test Case: 400 | Input/Output: [(-45 19 -65 -45) -65]
Test Case: 401 | Input/Output: [(-19 54 26 -31) -31]
Test Case: 402 | Input/Output: [(-36 -25 61 15) -36]
Test Case: 403 | Input/Output: [(51 -76 -80 62) -80]
Test Case: 404 | Input/Output: [(-74 -35 75 -84) -84]
Test Case: 405 | Input/Output: [(46 16 -53 34) -53]
Test Case: 406 | Input/Output: [(26 -67 72 -35) -67]
Test Case: 407 | Input/Output: [(20 -39 -76 -73) -76]
Test Case: 408 | Input/Output: [(-5 -98 -5 -45) -98]
Test Case: 409 | Input/Output: [(21 80 64 73) 21]
Test Case: 410 | Input/Output: [(79 4 -24 -83) -83]
Test Case: 411 | Input/Output: [(-44 -52 85 -17) -52]
Test Case: 412 | Input/Output: [(-97 -35 -77 94) -97]
Test Case: 413 | Input/Output: [(66 -79 0 86) -79]
Test Case: 414 | Input/Output: [(7 -57 79 -72) -72]
Test Case: 415 | Input/Output: [(-96 89 78 -34) -96]
Test Case: 416 | Input/Output: [(-66 -45 18 86) -66]
Test Case: 417 | Input/Output: [(97 -79 11 43) -79]
Test Case: 418 | Input/Output: [(83 41 19 24) 19]
Test Case: 419 | Input/Output: [(-42 56 -34 27) -42]
Test Case: 420 | Input/Output: [(-67 1 -90 -12) -90]
Test Case: 421 | Input/Output: [(56 80 9 -6) -6]
Test Case: 422 | Input/Output: [(19 -15 66 39) -15]
Test Case: 423 | Input/Output: [(65 95 41 -49) -49]
Test Case: 424 | Input/Output: [(-10 27 94 -28) -28]
Test Case: 425 | Input/Output: [(38 -91 57 -16) -91]
Test Case: 426 | Input/Output: [(-77 -91 97 -71) -91]
Test Case: 427 | Input/Output: [(6 58 -61 94) -61]
Test Case: 428 | Input/Output: [(-98 -65 -73 38) -98]
Test Case: 429 | Input/Output: [(-89 8 -6 -50) -89]
Test Case: 430 | Input/Output: [(-68 -96 29 18) -96]
Test Case: 431 | Input/Output: [(27 -40 42 32) -40]
Test Case: 432 | Input/Output: [(-53 -76 14 3) -76]
Test Case: 433 | Input/Output: [(25 20 84 -50) -50]
Test Case: 434 | Input/Output: [(61 97 0 -73) -73]
Test Case: 435 | Input/Output: [(80 -87 -92 -3) -92]
Test Case: 436 | Input/Output: [(61 -5 93 63) -5]
Test Case: 437 | Input/Output: [(98 99 -43 18) -43]
Test Case: 438 | Input/Output: [(-65 32 62 1) -65]
Test Case: 439 | Input/Output: [(42 -72 -69 -5) -72]
Test Case: 440 | Input/Output: [(-87 65 -1 17) -87]
Test Case: 441 | Input/Output: [(-32 17 22 -62) -62]
Test Case: 442 | Input/Output: [(21 -40 31 93) -40]
Test Case: 443 | Input/Output: [(42 -97 -69 -38) -97]
Test Case: 444 | Input/Output: [(93 37 18 2) 2]
Test Case: 445 | Input/Output: [(-86 90 45 78) -86]
Test Case: 446 | Input/Output: [(-78 21 -74 15) -78]
Test Case: 447 | Input/Output: [(-67 26 20 1) -67]
Test Case: 448 | Input/Output: [(95 -24 66 -23) -24]
Test Case: 449 | Input/Output: [(96 28 94 29) 28]
Test Case: 450 | Input/Output: [(30 33 -12 77) -12]
Test Case: 451 | Input/Output: [(38 47 -19 -8) -19]
Test Case: 452 | Input/Output: [(16 79 29 56) 16]
Test Case: 453 | Input/Output: [(53 85 59 37) 37]
Test Case: 454 | Input/Output: [(-97 65 -92 -87) -97]
Test Case: 455 | Input/Output: [(78 73 -98 44) -98]
Test Case: 456 | Input/Output: [(74 -30 15 -89) -89]
Test Case: 457 | Input/Output: [(-52 -15 -95 29) -95]
Test Case: 458 | Input/Output: [(-58 21 30 -23) -58]
Test Case: 459 | Input/Output: [(43 -31 64 55) -31]
Test Case: 460 | Input/Output: [(42 -96 58 -81) -96]
Test Case: 461 | Input/Output: [(22 24 -83 50) -83]
Test Case: 462 | Input/Output: [(51 -18 -53 -97) -97]
Test Case: 463 | Input/Output: [(43 34 85 5) 5]
Test Case: 464 | Input/Output: [(-19 40 70 66) -19]
Test Case: 465 | Input/Output: [(-17 40 45 -87) -87]
Test Case: 466 | Input/Output: [(-5 -17 -30 -50) -50]
Test Case: 467 | Input/Output: [(26 -27 31 -81) -81]
Test Case: 468 | Input/Output: [(-89 23 -83 61) -89]
Test Case: 469 | Input/Output: [(78 -87 -65 91) -87]
Test Case: 470 | Input/Output: [(13 -3 -20 73) -20]
Test Case: 471 | Input/Output: [(84 -75 51 14) -75]
Test Case: 472 | Input/Output: [(-25 65 25 -17) -25]
Test Case: 473 | Input/Output: [(-95 -96 19 -79) -96]
Test Case: 474 | Input/Output: [(72 77 51 7) 7]
Test Case: 475 | Input/Output: [(52 -72 32 78) -72]
Test Case: 476 | Input/Output: [(1 61 -26 77) -26]
Test Case: 477 | Input/Output: [(35 -25 -7 53) -25]
Test Case: 478 | Input/Output: [(85 -16 21 -57) -57]
Test Case: 479 | Input/Output: [(-52 66 63 20) -52]
Test Case: 480 | Input/Output: [(89 -5 35 -1) -5]
Test Case: 481 | Input/Output: [(-16 17 -87 48) -87]
Test Case: 482 | Input/Output: [(-4 -34 91 4) -34]
Test Case: 483 | Input/Output: [(31 74 -31 93) -31]
Test Case: 484 | Input/Output: [(-61 60 79 95) -61]
Test Case: 485 | Input/Output: [(-41 -71 -51 70) -71]
Test Case: 486 | Input/Output: [(-21 65 66 66) -21]
Test Case: 487 | Input/Output: [(89 7 -11 -82) -82]
Test Case: 488 | Input/Output: [(-3 75 -70 -28) -70]
Test Case: 489 | Input/Output: [(11 59 27 -2) -2]
Test Case: 490 | Input/Output: [(24 1 -14 41) -14]
Test Case: 491 | Input/Output: [(36 32 52 -70) -70]
Test Case: 492 | Input/Output: [(55 -23 34 -65) -65]
Test Case: 493 | Input/Output: [(59 58 -7 -22) -22]
Test Case: 494 | Input/Output: [(30 99 -70 39) -70]
Test Case: 495 | Input/Output: [(67 20 -92 -68) -92]
Test Case: 496 | Input/Output: [(-85 42 29 10) -85]
Test Case: 497 | Input/Output: [(-84 -23 -45 -71) -84]
Test Case: 498 | Input/Output: [(-50 -56 80 -98) -98]
Test Case: 499 | Input/Output: [(-84 -92 36 -49) -92]
Test Case: 500 | Input/Output: [(-89 -11 -62 34) -89]
Test Case: 501 | Input/Output: [(55 76 -86 -68) -86]
Test Case: 502 | Input/Output: [(-30 2 76 19) -30]
Test Case: 503 | Input/Output: [(3 88 72 -56) -56]
Test Case: 504 | Input/Output: [(10 -57 59 71) -57]
Test Case: 505 | Input/Output: [(8 -97 -95 -40) -97]
Test Case: 506 | Input/Output: [(-27 -36 -70 -8) -70]
Test Case: 507 | Input/Output: [(74 5 89 13) 5]
Test Case: 508 | Input/Output: [(-28 69 -39 43) -39]
Test Case: 509 | Input/Output: [(-81 52 -24 0) -81]
Test Case: 510 | Input/Output: [(-47 48 -84 -48) -84]
Test Case: 511 | Input/Output: [(-68 85 -95 72) -95]
Test Case: 512 | Input/Output: [(-84 -15 -99 -33) -99]
Test Case: 513 | Input/Output: [(-8 34 -78 -49) -78]
Test Case: 514 | Input/Output: [(-23 13 -81 11) -81]
Test Case: 515 | Input/Output: [(68 60 13 -100) -100]
Test Case: 516 | Input/Output: [(3 19 75 -40) -40]
Test Case: 517 | Input/Output: [(-21 -8 100 -99) -99]
Test Case: 518 | Input/Output: [(75 89 -73 -66) -73]
Test Case: 519 | Input/Output: [(52 6 21 26) 6]
Test Case: 520 | Input/Output: [(39 71 -47 -62) -62]
Test Case: 521 | Input/Output: [(-12 -52 -50 -86) -86]
Test Case: 522 | Input/Output: [(-68 12 44 -27) -68]
Test Case: 523 | Input/Output: [(58 -21 -7 47) -21]
Test Case: 524 | Input/Output: [(74 -37 62 20) -37]
Test Case: 525 | Input/Output: [(34 -87 22 -5) -87]
Test Case: 526 | Input/Output: [(-45 56 65 -19) -45]
Test Case: 527 | Input/Output: [(54 -99 20 31) -99]
Test Case: 528 | Input/Output: [(42 1 86 82) 1]
Test Case: 529 | Input/Output: [(-2 20 -37 20) -37]
Test Case: 530 | Input/Output: [(-78 21 18 55) -78]
Test Case: 531 | Input/Output: [(27 6 -85 68) -85]
Test Case: 532 | Input/Output: [(-94 -5 -11 15) -94]
Test Case: 533 | Input/Output: [(-100 -46 -81 -12) -100]
Test Case: 534 | Input/Output: [(-69 -81 11 16) -81]
Test Case: 535 | Input/Output: [(-74 -3 -76 -24) -76]
Test Case: 536 | Input/Output: [(64 1 -73 -44) -73]
Test Case: 537 | Input/Output: [(74 -34 -29 19) -34]
Test Case: 538 | Input/Output: [(32 -6 -16 -35) -35]
Test Case: 539 | Input/Output: [(-90 -31 -74 89) -90]
Test Case: 540 | Input/Output: [(31 45 20 22) 20]
Test Case: 541 | Input/Output: [(-15 -84 30 -43) -84]
Test Case: 542 | Input/Output: [(85 7 48 -99) -99]
Test Case: 543 | Input/Output: [(54 36 -48 -86) -86]
Test Case: 544 | Input/Output: [(58 58 -57 31) -57]
Test Case: 545 | Input/Output: [(26 -25 -73 46) -73]
Test Case: 546 | Input/Output: [(-43 -1 9 -24) -43]
Test Case: 547 | Input/Output: [(-17 -38 60 90) -38]
Test Case: 548 | Input/Output: [(12 76 -33 19) -33]
Test Case: 549 | Input/Output: [(36 89 -45 44) -45]
Test Case: 550 | Input/Output: [(66 28 74 -13) -13]
Test Case: 551 | Input/Output: [(-92 -95 -21 74) -95]
Test Case: 552 | Input/Output: [(-48 32 -10 -29) -48]
Test Case: 553 | Input/Output: [(-49 -57 -10 1) -57]
Test Case: 554 | Input/Output: [(80 -3 18 -81) -81]
Test Case: 555 | Input/Output: [(52 -87 45 14) -87]
Test Case: 556 | Input/Output: [(-25 -76 100 -43) -76]
Test Case: 557 | Input/Output: [(6 30 -85 -73) -85]
Test Case: 558 | Input/Output: [(-19 -22 36 -26) -26]
Test Case: 559 | Input/Output: [(-26 48 58 87) -26]
Test Case: 560 | Input/Output: [(-47 -44 -77 74) -77]
Test Case: 561 | Input/Output: [(45 -50 -61 -50) -61]
Test Case: 562 | Input/Output: [(-30 -61 7 -49) -61]
Test Case: 563 | Input/Output: [(72 68 -66 -17) -66]
Test Case: 564 | Input/Output: [(-91 -95 -46 85) -95]
Test Case: 565 | Input/Output: [(-66 -41 -36 73) -66]
Test Case: 566 | Input/Output: [(65 -56 -60 -100) -100]
Test Case: 567 | Input/Output: [(-49 74 76 82) -49]
Test Case: 568 | Input/Output: [(82 30 -31 17) -31]
Test Case: 569 | Input/Output: [(48 6 69 55) 6]
Test Case: 570 | Input/Output: [(-75 35 0 25) -75]
Test Case: 571 | Input/Output: [(7 52 79 -56) -56]
Test Case: 572 | Input/Output: [(34 49 -1 -1) -1]
Test Case: 573 | Input/Output: [(60 39 57 29) 29]
Test Case: 574 | Input/Output: [(-21 -47 91 -43) -47]
Test Case: 575 | Input/Output: [(42 -63 -67 59) -67]
Test Case: 576 | Input/Output: [(-35 -28 98 59) -35]
Test Case: 577 | Input/Output: [(-91 -97 -88 -41) -97]
Test Case: 578 | Input/Output: [(-94 93 34 94) -94]
Test Case: 579 | Input/Output: [(-5 32 -67 19) -67]
Test Case: 580 | Input/Output: [(-93 -1 -62 90) -93]
Test Case: 581 | Input/Output: [(97 82 18 -56) -56]
Test Case: 582 | Input/Output: [(-23 35 -58 67) -58]
Test Case: 583 | Input/Output: [(95 48 -59 -83) -83]
Test Case: 584 | Input/Output: [(5 43 -50 79) -50]
Test Case: 585 | Input/Output: [(29 -33 -67 -58) -67]
Test Case: 586 | Input/Output: [(31 -29 -17 10) -29]
Test Case: 587 | Input/Output: [(11 -85 9 -18) -85]
Test Case: 588 | Input/Output: [(90 -72 -6 -79) -79]
Test Case: 589 | Input/Output: [(28 -61 59 53) -61]
Test Case: 590 | Input/Output: [(98 -13 -21 -54) -54]
Test Case: 591 | Input/Output: [(49 1 -27 -34) -34]
Test Case: 592 | Input/Output: [(52 -19 -65 -33) -65]
Test Case: 593 | Input/Output: [(46 52 27 -65) -65]
Test Case: 594 | Input/Output: [(-45 77 -99 -40) -99]
Test Case: 595 | Input/Output: [(97 -54 -87 -37) -87]
Test Case: 596 | Input/Output: [(93 39 41 -26) -26]
Test Case: 597 | Input/Output: [(-4 -35 53 -40) -40]
Test Case: 598 | Input/Output: [(39 -70 20 -24) -70]
Test Case: 599 | Input/Output: [(-86 33 -98 -24) -98]
Test Case: 600 | Input/Output: [(-19 -98 -34 46) -98]
Test Case: 601 | Input/Output: [(-68 28 -49 -68) -68]
Test Case: 602 | Input/Output: [(11 5 32 -73) -73]
Test Case: 603 | Input/Output: [(56 -99 59 -27) -99]
Test Case: 604 | Input/Output: [(-37 -53 15 37) -53]
Test Case: 605 | Input/Output: [(69 47 -65 -45) -65]
Test Case: 606 | Input/Output: [(-80 31 64 -86) -86]
Test Case: 607 | Input/Output: [(44 -60 -24 -14) -60]
Test Case: 608 | Input/Output: [(-93 -15 5 21) -93]
Test Case: 609 | Input/Output: [(64 -53 -32 91) -53]
Test Case: 610 | Input/Output: [(-49 -83 12 63) -83]
Test Case: 611 | Input/Output: [(-24 -56 79 -10) -56]
Test Case: 612 | Input/Output: [(-65 -29 -10 1) -65]
Test Case: 613 | Input/Output: [(-70 -9 -25 -49) -70]
Test Case: 614 | Input/Output: [(4 -70 -39 -86) -86]
Test Case: 615 | Input/Output: [(-96 -25 32 65) -96]
Test Case: 616 | Input/Output: [(57 28 98 -13) -13]
Test Case: 617 | Input/Output: [(64 34 18 -16) -16]
Test Case: 618 | Input/Output: [(-32 -15 -38 -85) -85]
Test Case: 619 | Input/Output: [(57 -98 -2 28) -98]
Test Case: 620 | Input/Output: [(28 -41 74 -10) -41]
Test Case: 621 | Input/Output: [(-78 64 -86 -73) -86]
Test Case: 622 | Input/Output: [(78 92 19 -60) -60]
Test Case: 623 | Input/Output: [(88 26 3 -88) -88]
Test Case: 624 | Input/Output: [(-49 -68 56 33) -68]
Test Case: 625 | Input/Output: [(21 31 8 30) 8]
Test Case: 626 | Input/Output: [(83 16 45 -74) -74]
Test Case: 627 | Input/Output: [(-43 -59 -53 62) -59]
Test Case: 628 | Input/Output: [(60 -42 -25 -42) -42]
Test Case: 629 | Input/Output: [(-36 93 98 77) -36]
Test Case: 630 | Input/Output: [(-49 -36 37 40) -49]
Test Case: 631 | Input/Output: [(-2 45 -58 27) -58]
Test Case: 632 | Input/Output: [(92 55 79 60) 55]
Test Case: 633 | Input/Output: [(57 -48 -28 -79) -79]
Test Case: 634 | Input/Output: [(-31 42 -67 12) -67]
Test Case: 635 | Input/Output: [(72 78 98 94) 72]
Test Case: 636 | Input/Output: [(47 11 100 13) 11]
Test Case: 637 | Input/Output: [(98 -60 -43 3) -60]
Test Case: 638 | Input/Output: [(51 41 -40 -87) -87]
Test Case: 639 | Input/Output: [(92 -58 52 -73) -73]
Test Case: 640 | Input/Output: [(1 59 64 -85) -85]
Test Case: 641 | Input/Output: [(50 -87 31 10) -87]
Test Case: 642 | Input/Output: [(-63 -22 74 67) -63]
Test Case: 643 | Input/Output: [(-45 66 74 34) -45]
Test Case: 644 | Input/Output: [(-51 -44 18 -17) -51]
Test Case: 645 | Input/Output: [(-62 82 32 7) -62]
Test Case: 646 | Input/Output: [(99 22 57 -100) -100]
Test Case: 647 | Input/Output: [(45 49 44 93) 44]
Test Case: 648 | Input/Output: [(-91 14 35 14) -91]
Test Case: 649 | Input/Output: [(53 -55 75 90) -55]
Test Case: 650 | Input/Output: [(-10 16 -45 32) -45]
Test Case: 651 | Input/Output: [(56 -87 63 21) -87]
Test Case: 652 | Input/Output: [(23 77 -72 5) -72]
Test Case: 653 | Input/Output: [(62 -48 81 -76) -76]
Test Case: 654 | Input/Output: [(-7 -31 -61 -5) -61]
Test Case: 655 | Input/Output: [(-17 -71 14 -87) -87]
Test Case: 656 | Input/Output: [(43 85 18 7) 7]
Test Case: 657 | Input/Output: [(68 -2 83 55) -2]
Test Case: 658 | Input/Output: [(-84 30 -62 79) -84]
Test Case: 659 | Input/Output: [(-23 85 -40 -52) -52]
Test Case: 660 | Input/Output: [(63 99 -26 51) -26]
Test Case: 661 | Input/Output: [(-31 18 -62 -12) -62]
Test Case: 662 | Input/Output: [(13 32 -82 21) -82]
Test Case: 663 | Input/Output: [(96 90 15 0) 0]
Test Case: 664 | Input/Output: [(85 21 -83 -83) -83]
Test Case: 665 | Input/Output: [(-17 27 -78 71) -78]
Test Case: 666 | Input/Output: [(21 -7 45 -59) -59]
Test Case: 667 | Input/Output: [(-16 71 53 -75) -75]
Test Case: 668 | Input/Output: [(77 56 23 -2) -2]
Test Case: 669 | Input/Output: [(83 4 -65 33) -65]
Test Case: 670 | Input/Output: [(-17 -58 -79 59) -79]
Test Case: 671 | Input/Output: [(-45 -39 -48 -64) -64]
Test Case: 672 | Input/Output: [(71 35 -21 17) -21]
Test Case: 673 | Input/Output: [(57 92 44 -30) -30]
Test Case: 674 | Input/Output: [(-94 -98 99 21) -98]
Test Case: 675 | Input/Output: [(-85 -36 63 -5) -85]
Test Case: 676 | Input/Output: [(24 84 6 -61) -61]
Test Case: 677 | Input/Output: [(53 -46 88 -66) -66]
Test Case: 678 | Input/Output: [(-20 47 -93 -74) -93]
Test Case: 679 | Input/Output: [(-18 -52 -65 65) -65]
Test Case: 680 | Input/Output: [(-35 34 -1 79) -35]
Test Case: 681 | Input/Output: [(51 -50 -4 -49) -50]
Test Case: 682 | Input/Output: [(0 -32 17 -79) -79]
Test Case: 683 | Input/Output: [(76 -55 -73 -9) -73]
Test Case: 684 | Input/Output: [(11 71 -24 73) -24]
Test Case: 685 | Input/Output: [(99 -6 -63 92) -63]
Test Case: 686 | Input/Output: [(60 -98 27 -90) -98]
Test Case: 687 | Input/Output: [(-93 -92 3 27) -93]
Test Case: 688 | Input/Output: [(25 -64 40 45) -64]
Test Case: 689 | Input/Output: [(16 8 -3 -86) -86]
Test Case: 690 | Input/Output: [(98 -21 -79 0) -79]
Test Case: 691 | Input/Output: [(97 -3 -49 92) -49]
Test Case: 692 | Input/Output: [(-54 9 -62 64) -62]
Test Case: 693 | Input/Output: [(57 -97 -25 -15) -97]
Test Case: 694 | Input/Output: [(-38 -54 76 80) -54]
Test Case: 695 | Input/Output: [(44 2 -78 -21) -78]
Test Case: 696 | Input/Output: [(-96 -42 27 -7) -96]
Test Case: 697 | Input/Output: [(51 -79 34 -74) -79]
Test Case: 698 | Input/Output: [(58 3 -59 -53) -59]
Test Case: 699 | Input/Output: [(30 -75 77 -39) -75]
Test Case: 700 | Input/Output: [(-74 -79 70 -44) -79]
Test Case: 701 | Input/Output: [(-49 -58 -7 -8) -58]
Test Case: 702 | Input/Output: [(92 -49 1 87) -49]
Test Case: 703 | Input/Output: [(64 26 -72 -84) -84]
Test Case: 704 | Input/Output: [(34 28 53 -87) -87]
Test Case: 705 | Input/Output: [(85 -76 44 0) -76]
Test Case: 706 | Input/Output: [(99 0 -22 83) -22]
Test Case: 707 | Input/Output: [(8 -92 54 -60) -92]
Test Case: 708 | Input/Output: [(19 -82 -64 45) -82]
Test Case: 709 | Input/Output: [(-95 -29 -83 -51) -95]
Test Case: 710 | Input/Output: [(-66 -97 17 -29) -97]
Test Case: 711 | Input/Output: [(-39 66 -16 -18) -39]
Test Case: 712 | Input/Output: [(-44 -5 -2 16) -44]
Test Case: 713 | Input/Output: [(42 -63 8 -90) -90]
Test Case: 714 | Input/Output: [(31 62 -90 -63) -90]
Test Case: 715 | Input/Output: [(13 11 86 1) 1]
Test Case: 716 | Input/Output: [(-38 10 -75 -98) -98]
Test Case: 717 | Input/Output: [(-50 -61 -69 66) -69]
Test Case: 718 | Input/Output: [(38 -34 85 -87) -87]
Test Case: 719 | Input/Output: [(30 -62 40 18) -62]
Test Case: 720 | Input/Output: [(-34 97 -21 -53) -53]
Test Case: 721 | Input/Output: [(-33 -68 -79 52) -79]
Test Case: 722 | Input/Output: [(-28 -35 86 61) -35]
Test Case: 723 | Input/Output: [(-3 93 82 -81) -81]
Test Case: 724 | Input/Output: [(73 84 52 35) 35]
Test Case: 725 | Input/Output: [(-86 -15 -48 22) -86]
Test Case: 726 | Input/Output: [(27 90 79 75) 27]
Test Case: 727 | Input/Output: [(38 -28 63 84) -28]
Test Case: 728 | Input/Output: [(41 -77 -100 86) -100]
Test Case: 729 | Input/Output: [(85 -42 79 16) -42]
Test Case: 730 | Input/Output: [(-24 45 -65 -62) -65]
Test Case: 731 | Input/Output: [(-36 17 85 16) -36]
Test Case: 732 | Input/Output: [(-100 -95 34 37) -100]
Test Case: 733 | Input/Output: [(66 -53 33 1) -53]
Test Case: 734 | Input/Output: [(-33 -53 11 90) -53]
Test Case: 735 | Input/Output: [(-14 38 -29 -2) -29]
Test Case: 736 | Input/Output: [(90 100 7 -42) -42]
Test Case: 737 | Input/Output: [(75 32 -62 56) -62]
Test Case: 738 | Input/Output: [(13 90 -75 -69) -75]
Test Case: 739 | Input/Output: [(8 -25 -72 -14) -72]
Test Case: 740 | Input/Output: [(-31 -98 72 -93) -98]
Test Case: 741 | Input/Output: [(91 42 61 20) 20]
Test Case: 742 | Input/Output: [(-7 -76 -42 -51) -76]
Test Case: 743 | Input/Output: [(3 10 -76 -41) -76]
Test Case: 744 | Input/Output: [(84 -32 -66 -68) -68]
Test Case: 745 | Input/Output: [(92 92 82 -43) -43]
Test Case: 746 | Input/Output: [(76 -64 -82 -70) -82]
Test Case: 747 | Input/Output: [(-71 -81 -40 -18) -81]
Test Case: 748 | Input/Output: [(8 -82 13 39) -82]
Test Case: 749 | Input/Output: [(23 -72 -94 -1) -94]
Test Case: 750 | Input/Output: [(-65 -14 86 15) -65]
Test Case: 751 | Input/Output: [(78 -9 66 -5) -9]
Test Case: 752 | Input/Output: [(52 66 95 -59) -59]
Test Case: 753 | Input/Output: [(67 -89 40 71) -89]
Test Case: 754 | Input/Output: [(-68 -4 41 -16) -68]
Test Case: 755 | Input/Output: [(-16 -16 55 -85) -85]
Test Case: 756 | Input/Output: [(57 55 -24 42) -24]
Test Case: 757 | Input/Output: [(-32 1 33 0) -32]
Test Case: 758 | Input/Output: [(-41 97 -29 7) -41]
Test Case: 759 | Input/Output: [(12 57 30 -84) -84]
Test Case: 760 | Input/Output: [(-65 48 27 62) -65]
Test Case: 761 | Input/Output: [(-87 24 74 71) -87]
Test Case: 762 | Input/Output: [(39 82 73 -70) -70]
Test Case: 763 | Input/Output: [(15 36 75 -71) -71]
Test Case: 764 | Input/Output: [(79 -67 24 -51) -67]
Test Case: 765 | Input/Output: [(62 -99 -90 76) -99]
Test Case: 766 | Input/Output: [(-14 20 40 34) -14]
Test Case: 767 | Input/Output: [(-11 64 -11 36) -11]
Test Case: 768 | Input/Output: [(-36 45 -48 -29) -48]
Test Case: 769 | Input/Output: [(-81 49 -61 92) -81]
Test Case: 770 | Input/Output: [(-36 -81 86 -37) -81]
Test Case: 771 | Input/Output: [(-25 67 -53 36) -53]
Test Case: 772 | Input/Output: [(-91 48 7 11) -91]
Test Case: 773 | Input/Output: [(48 -96 15 69) -96]
Test Case: 774 | Input/Output: [(33 -47 -65 8) -65]
Test Case: 775 | Input/Output: [(29 98 44 -60) -60]
Test Case: 776 | Input/Output: [(62 15 -98 76) -98]
Test Case: 777 | Input/Output: [(-86 67 29 36) -86]
Test Case: 778 | Input/Output: [(43 -33 84 -69) -69]
Test Case: 779 | Input/Output: [(80 99 51 21) 21]
Test Case: 780 | Input/Output: [(91 70 31 -69) -69]
Test Case: 781 | Input/Output: [(72 -93 7 -58) -93]
Test Case: 782 | Input/Output: [(29 85 -81 -26) -81]
Test Case: 783 | Input/Output: [(27 42 23 -94) -94]
Test Case: 784 | Input/Output: [(3 22 -19 22) -19]
Test Case: 785 | Input/Output: [(90 -97 -35 -56) -97]
Test Case: 786 | Input/Output: [(10 -77 57 26) -77]
Test Case: 787 | Input/Output: [(83 -66 3 -59) -66]
Test Case: 788 | Input/Output: [(-37 -41 -42 -58) -58]
Test Case: 789 | Input/Output: [(-21 -68 -69 -59) -69]
Test Case: 790 | Input/Output: [(-74 60 74 -79) -79]
Test Case: 791 | Input/Output: [(-10 76 13 -49) -49]
Test Case: 792 | Input/Output: [(38 34 -12 1) -12]
Test Case: 793 | Input/Output: [(83 88 -69 -41) -69]
Test Case: 794 | Input/Output: [(48 -43 -36 -46) -46]
Test Case: 795 | Input/Output: [(-14 -9 34 30) -14]
Test Case: 796 | Input/Output: [(71 73 28 66) 28]
Test Case: 797 | Input/Output: [(85 68 81 52) 52]
Test Case: 798 | Input/Output: [(-83 91 -27 -2) -83]
Test Case: 799 | Input/Output: [(22 -44 10 56) -44]
Test Case: 800 | Input/Output: [(-75 -4 -66 -57) -75]
Test Case: 801 | Input/Output: [(-31 33 58 6) -31]
Test Case: 802 | Input/Output: [(55 -99 23 -57) -99]
Test Case: 803 | Input/Output: [(-1 81 61 -65) -65]
Test Case: 804 | Input/Output: [(57 100 89 -19) -19]
Test Case: 805 | Input/Output: [(37 44 50 69) 37]
Test Case: 806 | Input/Output: [(-91 -97 -85 -63) -97]
Test Case: 807 | Input/Output: [(-91 3 40 -25) -91]
Test Case: 808 | Input/Output: [(-58 98 22 58) -58]
Test Case: 809 | Input/Output: [(-97 88 90 -69) -97]
Test Case: 810 | Input/Output: [(-63 -23 9 86) -63]
Test Case: 811 | Input/Output: [(25 -56 12 -73) -73]
Test Case: 812 | Input/Output: [(-46 89 -97 15) -97]
Test Case: 813 | Input/Output: [(25 73 94 88) 25]
Test Case: 814 | Input/Output: [(28 -12 34 98) -12]
Test Case: 815 | Input/Output: [(29 -44 -78 61) -78]
Test Case: 816 | Input/Output: [(-17 -80 -35 -16) -80]
Test Case: 817 | Input/Output: [(-55 -37 -9 60) -55]
Test Case: 818 | Input/Output: [(68 10 -52 -23) -52]
Test Case: 819 | Input/Output: [(45 1 -72 67) -72]
Test Case: 820 | Input/Output: [(-64 -98 74 -1) -98]
Test Case: 821 | Input/Output: [(74 -99 13 88) -99]
Test Case: 822 | Input/Output: [(-2 2 -27 16) -27]
Test Case: 823 | Input/Output: [(-8 -49 -95 4) -95]
Test Case: 824 | Input/Output: [(6 75 -47 -90) -90]
Test Case: 825 | Input/Output: [(69 -4 0 -6) -6]
Test Case: 826 | Input/Output: [(46 -49 36 22) -49]
Test Case: 827 | Input/Output: [(55 53 64 -16) -16]
Test Case: 828 | Input/Output: [(5 4 51 -24) -24]
Test Case: 829 | Input/Output: [(-30 76 4 84) -30]
Test Case: 830 | Input/Output: [(-49 75 -15 0) -49]
Test Case: 831 | Input/Output: [(90 38 76 -93) -93]
Test Case: 832 | Input/Output: [(100 15 -44 -16) -44]
Test Case: 833 | Input/Output: [(96 -89 77 -26) -89]
Test Case: 834 | Input/Output: [(66 -17 63 46) -17]
Test Case: 835 | Input/Output: [(54 57 -57 98) -57]
Test Case: 836 | Input/Output: [(65 -54 66 33) -54]
Test Case: 837 | Input/Output: [(-96 -98 -46 93) -98]
Test Case: 838 | Input/Output: [(-47 31 26 -51) -51]
Test Case: 839 | Input/Output: [(61 -19 -80 7) -80]
Test Case: 840 | Input/Output: [(95 74 -73 -33) -73]
Test Case: 841 | Input/Output: [(66 42 11 49) 11]
Test Case: 842 | Input/Output: [(-32 -77 73 -4) -77]
Test Case: 843 | Input/Output: [(-98 28 22 41) -98]
Test Case: 844 | Input/Output: [(-65 -7 34 61) -65]
Test Case: 845 | Input/Output: [(-13 55 -16 22) -16]
Test Case: 846 | Input/Output: [(94 -44 -43 -87) -87]
Test Case: 847 | Input/Output: [(64 -93 70 86) -93]
Test Case: 848 | Input/Output: [(10 -77 -32 -36) -77]
Test Case: 849 | Input/Output: [(-36 32 -100 59) -100]
Test Case: 850 | Input/Output: [(80 -63 51 17) -63]
Test Case: 851 | Input/Output: [(41 -37 -10 -37) -37]
Test Case: 852 | Input/Output: [(-12 -93 -94 -17) -94]
Test Case: 853 | Input/Output: [(-29 -76 38 58) -76]
Test Case: 854 | Input/Output: [(85 -24 -27 1) -27]
Test Case: 855 | Input/Output: [(43 -18 26 -48) -48]
Test Case: 856 | Input/Output: [(-6 63 74 -3) -6]
Test Case: 857 | Input/Output: [(-43 68 -95 55) -95]
Test Case: 858 | Input/Output: [(-71 -28 -91 63) -91]
Test Case: 859 | Input/Output: [(75 26 -6 86) -6]
Test Case: 860 | Input/Output: [(-85 -38 54 51) -85]
Test Case: 861 | Input/Output: [(-71 -1 92 64) -71]
Test Case: 862 | Input/Output: [(-60 -4 -6 -45) -60]
Test Case: 863 | Input/Output: [(55 -55 24 96) -55]
Test Case: 864 | Input/Output: [(-90 -1 -36 -60) -90]
Test Case: 865 | Input/Output: [(-15 19 -26 53) -26]
Test Case: 866 | Input/Output: [(-1 19 -47 -81) -81]
Test Case: 867 | Input/Output: [(87 -45 -3 -80) -80]
Test Case: 868 | Input/Output: [(78 58 -44 -29) -44]
Test Case: 869 | Input/Output: [(-78 -35 -18 72) -78]
Test Case: 870 | Input/Output: [(-86 84 78 -90) -90]
Test Case: 871 | Input/Output: [(73 -14 47 -47) -47]
Test Case: 872 | Input/Output: [(-80 1 -64 -92) -92]
Test Case: 873 | Input/Output: [(-44 73 98 22) -44]
Test Case: 874 | Input/Output: [(24 -87 71 -95) -95]
Test Case: 875 | Input/Output: [(-12 24 24 -70) -70]
Test Case: 876 | Input/Output: [(63 3 72 23) 3]
Test Case: 877 | Input/Output: [(59 -81 70 -94) -94]
Test Case: 878 | Input/Output: [(-98 88 83 31) -98]
Test Case: 879 | Input/Output: [(60 74 -100 -19) -100]
Test Case: 880 | Input/Output: [(73 49 -19 0) -19]
Test Case: 881 | Input/Output: [(-34 -97 -26 54) -97]
Test Case: 882 | Input/Output: [(10 34 -42 43) -42]
Test Case: 883 | Input/Output: [(47 -28 5 65) -28]
Test Case: 884 | Input/Output: [(93 97 17 69) 17]
Test Case: 885 | Input/Output: [(68 -95 -35 8) -95]
Test Case: 886 | Input/Output: [(-44 0 39 -22) -44]
Test Case: 887 | Input/Output: [(70 -83 9 51) -83]
Test Case: 888 | Input/Output: [(-80 98 19 15) -80]
Test Case: 889 | Input/Output: [(9 65 99 100) 9]
Test Case: 890 | Input/Output: [(80 83 -13 83) -13]
Test Case: 891 | Input/Output: [(39 -62 64 15) -62]
Test Case: 892 | Input/Output: [(-79 -80 5 82) -80]
Test Case: 893 | Input/Output: [(-2 99 3 -73) -73]
Test Case: 894 | Input/Output: [(56 1 71 -18) -18]
Test Case: 895 | Input/Output: [(18 70 7 38) 7]
Test Case: 896 | Input/Output: [(100 -80 69 -14) -80]
Test Case: 897 | Input/Output: [(87 -90 -68 -69) -90]
Test Case: 898 | Input/Output: [(-60 -84 -28 -31) -84]
Test Case: 899 | Input/Output: [(-6 -33 42 -25) -33]
Test Case: 900 | Input/Output: [(-59 14 -19 -48) -59]
Test Case: 901 | Input/Output: [(-96 30 72 -47) -96]
Test Case: 902 | Input/Output: [(-73 -53 -16 -9) -73]
Test Case: 903 | Input/Output: [(49 89 8 5) 5]
Test Case: 904 | Input/Output: [(9 -68 -97 39) -97]
Test Case: 905 | Input/Output: [(51 49 14 -85) -85]
Test Case: 906 | Input/Output: [(-39 -5 -70 71) -70]
Test Case: 907 | Input/Output: [(-75 72 -71 -78) -78]
Test Case: 908 | Input/Output: [(-76 7 -78 16) -78]
Test Case: 909 | Input/Output: [(-80 53 -13 69) -80]
Test Case: 910 | Input/Output: [(-51 -8 1 35) -51]
Test Case: 911 | Input/Output: [(87 85 -55 -49) -55]
Test Case: 912 | Input/Output: [(13 -83 77 100) -83]
Test Case: 913 | Input/Output: [(39 -70 -6 40) -70]
Test Case: 914 | Input/Output: [(33 -24 0 -71) -71]
Test Case: 915 | Input/Output: [(25 -39 93 34) -39]
Test Case: 916 | Input/Output: [(81 -49 -4 -23) -49]
Test Case: 917 | Input/Output: [(80 7 17 16) 7]
Test Case: 918 | Input/Output: [(-71 -8 -4 23) -71]
Test Case: 919 | Input/Output: [(25 13 33 22) 13]
Test Case: 920 | Input/Output: [(90 -23 -69 67) -69]
Test Case: 921 | Input/Output: [(97 49 82 -21) -21]
Test Case: 922 | Input/Output: [(38 -91 10 2) -91]
Test Case: 923 | Input/Output: [(-89 81 55 -90) -90]
Test Case: 924 | Input/Output: [(90 -90 33 -40) -90]
Test Case: 925 | Input/Output: [(28 -83 -34 -27) -83]
Test Case: 926 | Input/Output: [(-8 61 -74 29) -74]
Test Case: 927 | Input/Output: [(-12 -40 -4 20) -40]
Test Case: 928 | Input/Output: [(65 -89 -17 -84) -89]
Test Case: 929 | Input/Output: [(58 50 -76 55) -76]
Test Case: 930 | Input/Output: [(-92 85 -11 -80) -92]
Test Case: 931 | Input/Output: [(60 -7 -57 20) -57]
Test Case: 932 | Input/Output: [(-84 97 -36 15) -84]
Test Case: 933 | Input/Output: [(21 -20 90 60) -20]
Test Case: 934 | Input/Output: [(14 39 55 22) 14]
Test Case: 935 | Input/Output: [(-45 34 -54 46) -54]
Test Case: 936 | Input/Output: [(98 -21 66 37) -21]
Test Case: 937 | Input/Output: [(-84 10 -57 -71) -84]
Test Case: 938 | Input/Output: [(80 94 20 16) 16]
Test Case: 939 | Input/Output: [(9 -53 -39 -84) -84]
Test Case: 940 | Input/Output: [(28 8 -31 51) -31]
Test Case: 941 | Input/Output: [(63 16 -11 -11) -11]
Test Case: 942 | Input/Output: [(-74 16 98 24) -74]
Test Case: 943 | Input/Output: [(15 -33 -25 -50) -50]
Test Case: 944 | Input/Output: [(-66 -5 16 79) -66]
Test Case: 945 | Input/Output: [(22 -46 -88 -16) -88]
Test Case: 946 | Input/Output: [(-68 -41 51 -26) -68]
Test Case: 947 | Input/Output: [(-80 -98 -80 -99) -99]
Test Case: 948 | Input/Output: [(71 -26 -53 -33) -53]
Test Case: 949 | Input/Output: [(47 96 -22 92) -22]
Test Case: 950 | Input/Output: [(94 -92 -80 30) -92]
Test Case: 951 | Input/Output: [(51 -30 52 57) -30]
Test Case: 952 | Input/Output: [(-81 -10 -100 100) -100]
Test Case: 953 | Input/Output: [(30 84 19 -13) -13]
Test Case: 954 | Input/Output: [(8 -43 26 -60) -60]
Test Case: 955 | Input/Output: [(32 -56 -85 -1) -85]
Test Case: 956 | Input/Output: [(94 -7 17 38) -7]
Test Case: 957 | Input/Output: [(54 -14 66 -29) -29]
Test Case: 958 | Input/Output: [(-41 1 75 -69) -69]
Test Case: 959 | Input/Output: [(-46 89 13 10) -46]
Test Case: 960 | Input/Output: [(36 -73 -58 54) -73]
Test Case: 961 | Input/Output: [(5 -28 -67 -73) -73]
Test Case: 962 | Input/Output: [(-91 84 45 -29) -91]
Test Case: 963 | Input/Output: [(-67 -60 -91 -63) -91]
Test Case: 964 | Input/Output: [(-74 48 -53 38) -74]
Test Case: 965 | Input/Output: [(0 68 -16 -22) -22]
Test Case: 966 | Input/Output: [(97 -89 -43 -74) -89]
Test Case: 967 | Input/Output: [(-53 -37 16 -67) -67]
Test Case: 968 | Input/Output: [(84 -71 -1 -81) -81]
Test Case: 969 | Input/Output: [(-56 2 93 -68) -68]
Test Case: 970 | Input/Output: [(-41 57 72 77) -41]
Test Case: 971 | Input/Output: [(38 24 76 14) 14]
Test Case: 972 | Input/Output: [(52 13 -59 94) -59]
Test Case: 973 | Input/Output: [(86 90 40 5) 5]
Test Case: 974 | Input/Output: [(27 73 -66 36) -66]
Test Case: 975 | Input/Output: [(-57 -57 32 -6) -57]
Test Case: 976 | Input/Output: [(-72 78 -2 -68) -72]
Test Case: 977 | Input/Output: [(52 -66 -42 78) -66]
Test Case: 978 | Input/Output: [(19 61 -62 17) -62]
Test Case: 979 | Input/Output: [(-74 -18 58 -25) -74]
Test Case: 980 | Input/Output: [(-58 4 40 -80) -80]
Test Case: 981 | Input/Output: [(-97 69 -56 96) -97]
Test Case: 982 | Input/Output: [(-31 44 30 64) -31]
Test Case: 983 | Input/Output: [(44 65 15 -94) -94]
Test Case: 984 | Input/Output: [(25 -54 51 67) -54]
Test Case: 985 | Input/Output: [(-10 -61 -23 89) -61]
Test Case: 986 | Input/Output: [(84 -77 -24 0) -77]
Test Case: 987 | Input/Output: [(100 -16 14 -32) -32]
Test Case: 988 | Input/Output: [(-19 -82 95 75) -82]
Test Case: 989 | Input/Output: [(73 55 -84 7) -84]
Test Case: 990 | Input/Output: [(-98 -48 -13 -77) -98]
Test Case: 991 | Input/Output: [(-84 -31 -5 -86) -86]
Test Case: 992 | Input/Output: [(57 -5 -14 31) -14]
Test Case: 993 | Input/Output: [(-51 5 83 25) -51]
Test Case: 994 | Input/Output: [(-51 -68 -94 73) -94]
Test Case: 995 | Input/Output: [(85 32 98 19) 19]
Test Case: 996 | Input/Output: [(89 -80 -69 -53) -80]
Test Case: 997 | Input/Output: [(-72 33 -53 12) -72]
Test Case: 998 | Input/Output: [(-92 -93 95 -74) -93]
Test Case: 999 | Input/Output: [(-54 88 -41 96) -54]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x30b9728f clojush.problems.software.smallest$fn__7461@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@24b8a393]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:uniform-addition-and-deletion 1.0}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 3000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
random-screen = false
random-seed = -121 4 25 -41 23 -78 -96 85 119 65 22 -11 24 69 97 69
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[38 38 38 44] 38] [[-98 -98 -98 26] -98] [[70 70 70 -27] -27] [[75 -42 75 75] -42] [[7 -91 7 7] -91] [[56 -82 -82 -82] -82] [[-94 -86 -86 -86] -94] [[-26 -26 98 -26] -26] [[50 50 50 -100] -100] [[-14 -14 -14 92] -14] [(-68 -68 -68 -68) -68] [(-54 -54 -54 -54) -54] [(23 23 23 23) 23] [(15 15 15 15) 15] [(-71 -71 -71 -71) -71] [(100 62 73 56) 56] [(3 40 72 26) 3] [(3 94 22 79) 3] [(91 54 67 13) 13] [(89 74 37 31) 31] [(60 6 77 52) 6] [(50 8 23 99) 8] [(22 77 67 30) 22] [(34 16 80 86) 16] [(17 10 46 49) 10] [(73 100 6 76) 6] [(25 51 3 51) 3] [(12 74 19 37) 12] [(58 1 93 67) 1] [(51 23 51 85) 23] [(1 79 17 45) 1] [(28 98 87 17) 17] [(93 4 80 60) 4] [(48 61 90 32) 32] [(39 99 56 93) 39] [(0 -22 -93 -100) -100] [(-36 -40 44 -65) -65] [(64 63 14 1) 1] [(96 -70 -35 -48) -70] [(-30 65 -1 83) -30] [(30 62 58 32) 30] [(-69 81 -64 30) -69] [(11 95 61 -42) -42] [(54 35 95 -3) -3] [(100 79 8 84) 8] [(88 25 -78 -67) -78] [(52 -44 34 -71) -71] [(-31 29 -17 -75) -75] [(-4 32 -62 -50) -62] [(20 -66 72 49) -66] [(50 68 69 -13) -13] [(20 -22 -74 -55) -74] [(-81 78 -56 29) -81] [(-70 -39 -19 17) -70] [(-81 3 2 -70) -81] [(-28 38 9 86) -28] [(93 -52 -46 89) -52] [(52 47 20 -63) -63] [(-49 42 96 62) -49] [(-70 -27 -43 -46) -70] [(9 -76 41 -18) -76] [(51 84 37 65) 37] [(-15 -96 96 -44) -96] [(-12 -45 25 -88) -88] [(77 90 17 9) 9] [(35 1 15 2) 1] [(-61 -27 -87 -20) -87] [(-43 0 88 -93) -93] [(41 1 60 69) 1] [(-58 -52 -84 60) -84] [(-77 90 21 3) -77] [(-60 -24 94 -33) -60] [(78 23 60 29) 23] [(97 83 71 22) 22] [(27 -93 3 -1) -93] [(51 -46 14 54) -46] [(-94 96 0 98) -94] [(5 89 -38 -16) -38] [(-48 57 -6 96) -48] [(55 -13 -75 -60) -75] [(-17 -26 94 -43) -43] [(-13 94 100 43) -13] [(54 -43 -75 -35) -75] [(-64 -41 98 -59) -64] [(17 18 10 -11) -11] [(-9 71 -53 -99) -99] [(-35 87 14 51) -35] [(-12 -49 -67 -17) -67] [(-84 -6 -18 47) -84] [(-78 -100 -26 59) -100] [(71 -37 -88 3) -88] [(-28 -52 -81 72) -81] [(62 4 21 -9) -9] [(-100 -69 -67 67) -100] [(-83 48 -30 -31) -83])
uniform-addition-and-deletion-rate = 0.09
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 634
Test mean error for best: 0.63400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 38                  | Program output: 38                 
Correct output: -98                 | Program output: -98                
Correct output: -27                 | Program output: 70                 
Correct output: -42                 | Program output: -42                
Correct output: -91                 | Program output: -91                
Correct output: -82                 | Program output: -82                
Correct output: -94                 | Program output: -86                
Correct output: -26                 | Program output: -26                
Correct output: -100                | Program output: 50                 
Correct output: -14                 | Program output: -14                
Correct output: -68                 | Program output: -68                
Correct output: -54                 | Program output: -54                
Correct output: 23                  | Program output: 23                 
Correct output: 15                  | Program output: 15                 
Correct output: -71                 | Program output: -71                
Correct output: 56                  | Program output: 62                 
Correct output: 3                   | Program output: 40                 
Correct output: 3                   | Program output: 94                 
Correct output: 13                  | Program output: 54                 
Correct output: 31                  | Program output: 74                 
Correct output: 6                   | Program output: 6                  
Correct output: 8                   | Program output: 8                  
Correct output: 22                  | Program output: 77                 
Correct output: 16                  | Program output: 16                 
Correct output: 10                  | Program output: 10                 
Correct output: 6                   | Program output: 100                
Correct output: 3                   | Program output: 51                 
Correct output: 12                  | Program output: 74                 
Correct output: 1                   | Program output: 1                  
Correct output: 23                  | Program output: 23                 
Correct output: 1                   | Program output: 79                 
Correct output: 17                  | Program output: 98                 
Correct output: 4                   | Program output: 4                  
Correct output: 32                  | Program output: 61                 
Correct output: 39                  | Program output: 99                 
Correct output: -100                | Program output: -22                
Correct output: -65                 | Program output: -40                
Correct output: 1                   | Program output: 63                 
Correct output: -70                 | Program output: -70                
Correct output: -30                 | Program output: 65                 
Correct output: 30                  | Program output: 62                 
Correct output: -69                 | Program output: 81                 
Correct output: -42                 | Program output: 95                 
Correct output: -3                  | Program output: 35                 
Correct output: 8                   | Program output: 79                 
Correct output: -78                 | Program output: 25                 
Correct output: -71                 | Program output: -44                
Correct output: -75                 | Program output: 29                 
Correct output: -62                 | Program output: 32                 
Correct output: -66                 | Program output: -66                
Correct output: -13                 | Program output: 68                 
Correct output: -74                 | Program output: -22                
Correct output: -81                 | Program output: 78                 
Correct output: -70                 | Program output: -39                
Correct output: -81                 | Program output: 3                  
Correct output: -28                 | Program output: 38                 
Correct output: -52                 | Program output: -52                
Correct output: -63                 | Program output: 47                 
Correct output: -49                 | Program output: 42                 
Correct output: -70                 | Program output: -27                
Correct output: -76                 | Program output: -76                
Correct output: 37                  | Program output: 84                 
Correct output: -96                 | Program output: -96                
Correct output: -88                 | Program output: -45                
Correct output: 9                   | Program output: 90                 
Correct output: 1                   | Program output: 1                  
Correct output: -87                 | Program output: -27                
Correct output: -93                 | Program output: 0                  
Correct output: 1                   | Program output: 1                  
Correct output: -84                 | Program output: -52                
Correct output: -77                 | Program output: 90                 
Correct output: -60                 | Program output: -24                
Correct output: 23                  | Program output: 23                 
Correct output: 22                  | Program output: 83                 
Correct output: -93                 | Program output: -93                
Correct output: -46                 | Program output: -46                
Correct output: -94                 | Program output: 96                 
Correct output: -38                 | Program output: 89                 
Correct output: -48                 | Program output: 57                 
Correct output: -75                 | Program output: -13                
Correct output: -43                 | Program output: -26                
Correct output: -13                 | Program output: 94                 
Correct output: -75                 | Program output: -43                
Correct output: -64                 | Program output: -41                
Correct output: -11                 | Program output: 18                 
Correct output: -99                 | Program output: 71                 
Correct output: -35                 | Program output: 87                 
Correct output: -67                 | Program output: -49                
Correct output: -84                 | Program output: -6                 
Correct output: -100                | Program output: -100               
Correct output: -88                 | Program output: -37                
Correct output: -81                 | Program output: -52                
Correct output: -9                  | Program output: 4                  
Correct output: -100                | Program output: -69                
Correct output: -83                 | Program output: 48                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 1, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_rot} {:close 0, :instruction tagged_474} {:close 1, :instruction tagged_828} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_lte} {:close 2, :instruction integer_dup} {:close 1, :instruction exec_while} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction in2} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gte} {:close 2, :instruction boolean_stackdepth} {:close 2, :instruction integer_mult} {:close 0, :instruction integer_lt} {:close 0, :instruction 29} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_pop} {:close 1, :instruction print_boolean} {:close 1, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_sub} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction -66} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction in4} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_newline} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction tag_boolean_145} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_yank})
Lexicase best program: (integer_fromboolean boolean_dup_times print_integer in1 integer_mod boolean_frominteger boolean_invert_first_then_and exec_do*while (boolean_rot tagged_474 tagged_828) print_integer integer_gte integer_inc integer_pop integer_lte integer_lte integer_dup exec_while () exec_y_when_autoconstructing (integer_eq integer_pop exec_do*count (integer_lte boolean_invert_first_then_and integer_div in2 integer_sub integer_dup print_integer) boolean_xor integer_pop boolean_eq integer_lte exec_stackdepth boolean_invert_first_then_and exec_do*range (integer_gte boolean_stackdepth)) integer_mult integer_lt 29 boolean_pop integer_min boolean_or exec_s_when_autoconstructing (exec_pop (print_boolean) in1) (in4 exec_k_when_autoconstructing (boolean_or integer_sub) (exec_empty) exec_stackdepth boolean_and) (integer_mult) exec_pop (boolean_invert_second_then_and exec_do*while () integer_lte exec_s_when_autoconstructing (exec_if (exec_do*times (integer_dup integer_dup_times -66 exec_yankdup integer_lte boolean_stackdepth integer_gte in4 integer_dec boolean_dup) print_newline integer_stackdepth boolean_pop boolean_flush exec_dup_items) (exec_swap (tag_boolean_145 integer_dec) (integer_yankdup exec_yank))) () ()))
Lexicase best errors: [0 1 1 0 0 0 1 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 106
Percent parens: 0.208
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 1, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_rot} {:close 0, :instruction tagged_474} {:close 1, :instruction tagged_828} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_lte} {:close 2, :instruction integer_dup} {:close 1, :instruction exec_while} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction in2} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gte} {:close 2, :instruction boolean_stackdepth} {:close 2, :instruction integer_mult} {:close 0, :instruction integer_lt} {:close 0, :instruction 29} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_pop} {:close 1, :instruction print_boolean} {:close 1, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_sub} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction -66} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction in4} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_newline} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction tag_boolean_145} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_yank})
Zero cases best program: (integer_fromboolean boolean_dup_times print_integer in1 integer_mod boolean_frominteger boolean_invert_first_then_and exec_do*while (boolean_rot tagged_474 tagged_828) print_integer integer_gte integer_inc integer_pop integer_lte integer_lte integer_dup exec_while () exec_y_when_autoconstructing (integer_eq integer_pop exec_do*count (integer_lte boolean_invert_first_then_and integer_div in2 integer_sub integer_dup print_integer) boolean_xor integer_pop boolean_eq integer_lte exec_stackdepth boolean_invert_first_then_and exec_do*range (integer_gte boolean_stackdepth)) integer_mult integer_lt 29 boolean_pop integer_min boolean_or exec_s_when_autoconstructing (exec_pop (print_boolean) in1) (in4 exec_k_when_autoconstructing (boolean_or integer_sub) (exec_empty) exec_stackdepth boolean_and) (integer_mult) exec_pop (boolean_invert_second_then_and exec_do*while () integer_lte exec_s_when_autoconstructing (exec_if (exec_do*times (integer_dup integer_dup_times -66 exec_yankdup integer_lte boolean_stackdepth integer_gte in4 integer_dec boolean_dup) print_newline integer_stackdepth boolean_pop boolean_flush exec_dup_items) (exec_swap (tag_boolean_145 integer_dec) (integer_yankdup exec_yank))) () ()))
Zero cases best errors: [0 1 1 0 0 0 1 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 106
Percent parens: 0.208
--- Lexicase Population Statistics ---
Count of elite individuals by case: (2 5 2 1 3 11 3 3 8 12)
Population mean number of elite cases: 0.05
Count of perfect (error zero) individuals by case: (2 5 2 1 3 11 3 3 8 12)
Population mean number of perfect (error zero) cases: 0.05
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 1, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_rot} {:close 0, :instruction tagged_474} {:close 1, :instruction tagged_828} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_lte} {:close 2, :instruction integer_dup} {:close 1, :instruction exec_while} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction in2} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gte} {:close 2, :instruction boolean_stackdepth} {:close 2, :instruction integer_mult} {:close 0, :instruction integer_lt} {:close 0, :instruction 29} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_pop} {:close 1, :instruction print_boolean} {:close 1, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_sub} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction -66} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction in4} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_newline} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction tag_boolean_145} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_yank})
Best program: (integer_fromboolean boolean_dup_times print_integer in1 integer_mod boolean_frominteger boolean_invert_first_then_and exec_do*while (boolean_rot tagged_474 tagged_828) print_integer integer_gte integer_inc integer_pop integer_lte integer_lte integer_dup exec_while () exec_y_when_autoconstructing (integer_eq integer_pop exec_do*count (integer_lte boolean_invert_first_then_and integer_div in2 integer_sub integer_dup print_integer) boolean_xor integer_pop boolean_eq integer_lte exec_stackdepth boolean_invert_first_then_and exec_do*range (integer_gte boolean_stackdepth)) integer_mult integer_lt 29 boolean_pop integer_min boolean_or exec_s_when_autoconstructing (exec_pop (print_boolean) in1) (in4 exec_k_when_autoconstructing (boolean_or integer_sub) (exec_empty) exec_stackdepth boolean_and) (integer_mult) exec_pop (boolean_invert_second_then_and exec_do*while () integer_lte exec_s_when_autoconstructing (exec_if (exec_do*times (integer_dup integer_dup_times -66 exec_yankdup integer_lte boolean_stackdepth integer_gte in4 integer_dec boolean_dup) print_newline integer_stackdepth boolean_pop boolean_flush exec_dup_items) (exec_swap (tag_boolean_145 integer_dec) (integer_yankdup exec_yank))) () ()))
Errors: [0 1 1 0 0 0 1 1 0 0]
Total: 4
Mean: 0.4
Genome size: 84
Size: 106
Percent parens: 0.208
--- Population Statistics ---
Average total errors in population: 9.95
Median total errors in population: 10
Error averages by case: (0.998 0.995 0.998 0.999 0.997 0.989 0.997 0.997 0.992 0.988)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 51.068
Average program size in population (points): 70.547
Average percent parens in population: 0.281
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.285
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 463665
--- Timings ---
Current time: 1559593915807 milliseconds
Total Time:           2.7 seconds
Initialization:       0.1 seconds,  3.6%
Reproduction:         0.8 seconds, 30.2%
Fitness Testing:      1.8 seconds, 66.1%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 669
Test mean error for best: 0.66900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 38                  | Program output: 38                 
Correct output: -98                 | Program output: -98                
Correct output: -27                 | Program output: 70                 
Correct output: -42                 | Program output: 75                 
Correct output: -91                 | Program output: 7                  
Correct output: -82                 | Program output: 56                 
Correct output: -94                 | Program output: -94                
Correct output: -26                 | Program output: -26                
Correct output: -100                | Program output: 50                 
Correct output: -14                 | Program output: -14                
Correct output: -68                 | Program output: -68                
Correct output: -54                 | Program output: -54                
Correct output: 23                  | Program output: 23                 
Correct output: 15                  | Program output: 15                 
Correct output: -71                 | Program output: -71                
Correct output: 56                  | Program output: 100                
Correct output: 3                   | Program output: 3                  
Correct output: 3                   | Program output: 3                  
Correct output: 13                  | Program output: 91                 
Correct output: 31                  | Program output: 89                 
Correct output: 6                   | Program output: 60                 
Correct output: 8                   | Program output: 50                 
Correct output: 22                  | Program output: 22                 
Correct output: 16                  | Program output: 34                 
Correct output: 10                  | Program output: 17                 
Correct output: 6                   | Program output: 73                 
Correct output: 3                   | Program output: 25                 
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 58                 
Correct output: 23                  | Program output: 51                 
Correct output: 1                   | Program output: 1                  
Correct output: 17                  | Program output: 28                 
Correct output: 4                   | Program output: 93                 
Correct output: 32                  | Program output: 48                 
Correct output: 39                  | Program output: 39                 
Correct output: -100                | Program output: 0                  
Correct output: -65                 | Program output: -36                
Correct output: 1                   | Program output: 64                 
Correct output: -70                 | Program output: 96                 
Correct output: -30                 | Program output: -30                
Correct output: 30                  | Program output: 30                 
Correct output: -69                 | Program output: -69                
Correct output: -42                 | Program output: 11                 
Correct output: -3                  | Program output: 54                 
Correct output: 8                   | Program output: 100                
Correct output: -78                 | Program output: 88                 
Correct output: -71                 | Program output: 52                 
Correct output: -75                 | Program output: -31                
Correct output: -62                 | Program output: -4                 
Correct output: -66                 | Program output: 20                 
Correct output: -13                 | Program output: 50                 
Correct output: -74                 | Program output: 20                 
Correct output: -81                 | Program output: -81                
Correct output: -70                 | Program output: -70                
Correct output: -81                 | Program output: -81                
Correct output: -28                 | Program output: -28                
Correct output: -52                 | Program output: 93                 
Correct output: -63                 | Program output: 52                 
Correct output: -49                 | Program output: -49                
Correct output: -70                 | Program output: -70                
Correct output: -76                 | Program output: 9                  
Correct output: 37                  | Program output: 51                 
Correct output: -96                 | Program output: -15                
Correct output: -88                 | Program output: -12                
Correct output: 9                   | Program output: 77                 
Correct output: 1                   | Program output: 35                 
Correct output: -87                 | Program output: -61                
Correct output: -93                 | Program output: -43                
Correct output: 1                   | Program output: 41                 
Correct output: -84                 | Program output: -58                
Correct output: -77                 | Program output: -77                
Correct output: -60                 | Program output: -60                
Correct output: 23                  | Program output: 78                 
Correct output: 22                  | Program output: 97                 
Correct output: -93                 | Program output: 27                 
Correct output: -46                 | Program output: 51                 
Correct output: -94                 | Program output: -94                
Correct output: -38                 | Program output: 5                  
Correct output: -48                 | Program output: -48                
Correct output: -75                 | Program output: 55                 
Correct output: -43                 | Program output: -17                
Correct output: -13                 | Program output: -13                
Correct output: -75                 | Program output: 54                 
Correct output: -64                 | Program output: -64                
Correct output: -11                 | Program output: 17                 
Correct output: -99                 | Program output: -9                 
Correct output: -35                 | Program output: -35                
Correct output: -67                 | Program output: -12                
Correct output: -84                 | Program output: -84                
Correct output: -100                | Program output: -78                
Correct output: -88                 | Program output: 71                 
Correct output: -81                 | Program output: -28                
Correct output: -9                  | Program output: 62                 
Correct output: -100                | Program output: -100               
Correct output: -83                 | Program output: -83                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction in1} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_yank} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 1, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_times} {:close 1, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_sub} {:close 0, :instruction tag_exec_132} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_xor} {:close 1, :instruction in1} {:close 1, :instruction boolean_shove} {:close 1, :instruction exec_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_if} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_add} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_if} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_s_when_autoconstructing})
Lexicase best program: (exec_yankdup integer_dup_items boolean_xor integer_dec exec_eq boolean_pop exec_noop in1 exec_when () boolean_dup_times integer_yank in3 exec_s (integer_shove print_integer boolean_dup print_integer) (exec_pop (integer_mult integer_dec boolean_and) integer_swap exec_y_when_autoconstructing (exec_yank integer_lte integer_inc integer_inc exec_do*range (exec_k (boolean_swap boolean_not integer_shove integer_mod) (integer_swap integer_dup_times in2) boolean_dup integer_stackdepth exec_s_when_autoconstructing (exec_do*count (boolean_not boolean_empty exec_rot (exec_flush boolean_empty) (boolean_swap boolean_stackdepth) () integer_rot print_newline boolean_swap integer_sub) tag_exec_132 (exec_do*while (boolean_yankdup in2 integer_fromboolean boolean_swap boolean_empty exec_do*while (exec_swap (integer_swap integer_div boolean_xor boolean_xor) (in1) boolean_shove) exec_swap () (boolean_shove) integer_dup_items exec_dup_items exec_empty integer_swap exec_yankdup in2 integer_dup_times) boolean_invert_second_then_and exec_rot () (exec_noop exec_if (integer_stackdepth) (exec_do*while (exec_rot (boolean_frominteger integer_add) (exec_flush integer_yank boolean_dup_items exec_rot (exec_if (integer_rot) (exec_s_when_autoconstructing () () ())) () ()) ()))) ())) () ()))) ())
Lexicase best errors: [1 0 1 0 0 0 1 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 132
Percent parens: 0.311
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction in1} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_yank} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 1, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_times} {:close 1, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_sub} {:close 0, :instruction tag_exec_132} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_xor} {:close 1, :instruction in1} {:close 1, :instruction boolean_shove} {:close 1, :instruction exec_swap} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_if} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_add} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_if} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_s_when_autoconstructing})
Zero cases best program: (exec_yankdup integer_dup_items boolean_xor integer_dec exec_eq boolean_pop exec_noop in1 exec_when () boolean_dup_times integer_yank in3 exec_s (integer_shove print_integer boolean_dup print_integer) (exec_pop (integer_mult integer_dec boolean_and) integer_swap exec_y_when_autoconstructing (exec_yank integer_lte integer_inc integer_inc exec_do*range (exec_k (boolean_swap boolean_not integer_shove integer_mod) (integer_swap integer_dup_times in2) boolean_dup integer_stackdepth exec_s_when_autoconstructing (exec_do*count (boolean_not boolean_empty exec_rot (exec_flush boolean_empty) (boolean_swap boolean_stackdepth) () integer_rot print_newline boolean_swap integer_sub) tag_exec_132 (exec_do*while (boolean_yankdup in2 integer_fromboolean boolean_swap boolean_empty exec_do*while (exec_swap (integer_swap integer_div boolean_xor boolean_xor) (in1) boolean_shove) exec_swap () (boolean_shove) integer_dup_items exec_dup_items exec_empty integer_swap exec_yankdup in2 integer_dup_times) boolean_invert_second_then_and exec_rot () (exec_noop exec_if (integer_stackdepth) (exec_do*while (exec_rot (boolean_frominteger integer_add) (exec_flush integer_yank boolean_dup_items exec_rot (exec_if (integer_rot) (exec_s_when_autoconstructing () () ())) () ()) ()))) ())) () ()))) ())
Zero cases best errors: [1 0 1 0 0 0 1 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 132
Percent parens: 0.311
--- Lexicase Population Statistics ---
Count of elite individuals by case: (206 521 107 94 94 210 108 93 101 511)
Population mean number of elite cases: 2.05
Count of perfect (error zero) individuals by case: (206 521 107 94 94 210 108 93 101 511)
Population mean number of perfect (error zero) cases: 2.05
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_dup_items} {:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction integer_div} {:close 1, :instruction integer_mod})
Best program: (exec_dup_items in1 integer_mult integer_gt print_integer integer_div integer_mod)
Errors: [1 0 1 0 0 0 1 0 1 0]
Total: 4
Mean: 0.4
Genome size: 7
Size: 8
Percent parens: 0.125
--- Population Statistics ---
Average total errors in population: 7.955
Median total errors in population: 7
Error averages by case: (0.794 0.479 0.893 0.906 0.906 0.79 0.892 0.907 0.899 0.489)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 69.278
Average program size in population (points): 92.107
Average percent parens in population: 0.247
Minimum age in population: 1.0
Maximum age in population: 1.0
Average age in population: 1.0
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 10
Genome diversity (% unique genomes):	 0.985
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.985
Total error diversity:				 0.007
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.205
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 1146806
--- Timings ---
Current time: 1559593917964 milliseconds
Total Time:           5.2 seconds
Initialization:       0.1 seconds,  1.9%
Reproduction:         1.8 seconds, 35.1%
Fitness Testing:      2.7 seconds, 52.3%
Report:               0.6 seconds, 10.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 425
Test mean error for best: 0.42500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 38                  | Program output: 38                 
Correct output: -98                 | Program output: -98                
Correct output: -27                 | Program output: 70                 
Correct output: -42                 | Program output: -42                
Correct output: -91                 | Program output: -91                
Correct output: -82                 | Program output: -82                
Correct output: -94                 | Program output: -94                
Correct output: -26                 | Program output: -26                
Correct output: -100                | Program output: 50                 
Correct output: -14                 | Program output: -14                
Correct output: -68                 | Program output: -68                
Correct output: -54                 | Program output: -54                
Correct output: 23                  | Program output: 23                 
Correct output: 15                  | Program output: 15                 
Correct output: -71                 | Program output: -71                
Correct output: 56                  | Program output: 62                 
Correct output: 3                   | Program output: 3                  
Correct output: 3                   | Program output: 3                  
Correct output: 13                  | Program output: 54                 
Correct output: 31                  | Program output: 74                 
Correct output: 6                   | Program output: 6                  
Correct output: 8                   | Program output: 8                  
Correct output: 22                  | Program output: 22                 
Correct output: 16                  | Program output: 16                 
Correct output: 10                  | Program output: 10                 
Correct output: 6                   | Program output: 73                 
Correct output: 3                   | Program output: 25                 
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 1                  
Correct output: 23                  | Program output: 23                 
Correct output: 1                   | Program output: 1                  
Correct output: 17                  | Program output: 28                 
Correct output: 4                   | Program output: 4                  
Correct output: 32                  | Program output: 48                 
Correct output: 39                  | Program output: 39                 
Correct output: -100                | Program output: -22                
Correct output: -65                 | Program output: -40                
Correct output: 1                   | Program output: 63                 
Correct output: -70                 | Program output: -70                
Correct output: -30                 | Program output: -30                
Correct output: 30                  | Program output: 30                 
Correct output: -69                 | Program output: -69                
Correct output: -42                 | Program output: 11                 
Correct output: -3                  | Program output: 35                 
Correct output: 8                   | Program output: 79                 
Correct output: -78                 | Program output: 25                 
Correct output: -71                 | Program output: -44                
Correct output: -75                 | Program output: -31                
Correct output: -62                 | Program output: -4                 
Correct output: -66                 | Program output: -66                
Correct output: -13                 | Program output: 50                 
Correct output: -74                 | Program output: -22                
Correct output: -81                 | Program output: -81                
Correct output: -70                 | Program output: -70                
Correct output: -81                 | Program output: -81                
Correct output: -28                 | Program output: -28                
Correct output: -52                 | Program output: -52                
Correct output: -63                 | Program output: 47                 
Correct output: -49                 | Program output: -49                
Correct output: -70                 | Program output: -70                
Correct output: -76                 | Program output: -76                
Correct output: 37                  | Program output: 51                 
Correct output: -96                 | Program output: -96                
Correct output: -88                 | Program output: -45                
Correct output: 9                   | Program output: 77                 
Correct output: 1                   | Program output: 1                  
Correct output: -87                 | Program output: -61                
Correct output: -93                 | Program output: -43                
Correct output: 1                   | Program output: 1                  
Correct output: -84                 | Program output: -58                
Correct output: -77                 | Program output: -77                
Correct output: -60                 | Program output: -60                
Correct output: 23                  | Program output: 23                 
Correct output: 22                  | Program output: 83                 
Correct output: -93                 | Program output: -93                
Correct output: -46                 | Program output: -46                
Correct output: -94                 | Program output: -94                
Correct output: -38                 | Program output: 5                  
Correct output: -48                 | Program output: -48                
Correct output: -75                 | Program output: -13                
Correct output: -43                 | Program output: -26                
Correct output: -13                 | Program output: -13                
Correct output: -75                 | Program output: -43                
Correct output: -64                 | Program output: -64                
Correct output: -11                 | Program output: 17                 
Correct output: -99                 | Program output: -9                 
Correct output: -35                 | Program output: -35                
Correct output: -67                 | Program output: -49                
Correct output: -84                 | Program output: -84                
Correct output: -100                | Program output: -100               
Correct output: -88                 | Program output: -37                
Correct output: -81                 | Program output: -52                
Correct output: -9                  | Program output: 4                  
Correct output: -100                | Program output: -100               
Correct output: -83                 | Program output: -83                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_flush} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction print_integer} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_times} {:close 2, :instruction integer_max} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_add})
Lexicase best program: (integer_flush integer_dup exec_noop exec_noop in2 boolean_dup_times in1 boolean_rot integer_dup exec_do*while (exec_dup_times () integer_min in1 boolean_stackdepth exec_empty boolean_yankdup boolean_frominteger print_integer exec_stackdepth exec_dup_times (integer_max)) integer_dec exec_dup_times (integer_add))
Lexicase best errors: [0 0 0 0 1 1 0 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 29
Percent parens: 0.172
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_flush} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction print_integer} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_times} {:close 2, :instruction integer_max} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_add})
Zero cases best program: (integer_flush integer_dup exec_noop exec_noop in2 boolean_dup_times in1 boolean_rot integer_dup exec_do*while (exec_dup_times () integer_min in1 boolean_stackdepth exec_empty boolean_yankdup boolean_frominteger print_integer exec_stackdepth exec_dup_times (integer_max)) integer_dec exec_dup_times (integer_add))
Zero cases best errors: [0 0 0 0 1 1 0 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 29
Percent parens: 0.172
--- Lexicase Population Statistics ---
Count of elite individuals by case: (622 350 140 598 56 145 342 147 599 342)
Population mean number of elite cases: 3.34
Count of perfect (error zero) individuals by case: (622 350 140 598 56 145 342 147 599 342)
Population mean number of perfect (error zero) cases: 3.34
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_flush} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction print_integer} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_times} {:close 2, :instruction integer_max} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_add})
Best program: (integer_flush integer_dup exec_noop exec_noop in2 boolean_dup_times in1 boolean_rot integer_dup exec_do*while (exec_dup_times () integer_min in1 boolean_stackdepth exec_empty boolean_yankdup boolean_frominteger print_integer exec_stackdepth exec_dup_times (integer_max)) integer_dec exec_dup_times (integer_add))
Errors: [0 0 0 0 1 1 0 1 0 0]
Total: 3
Mean: 0.3
Genome size: 24
Size: 29
Percent parens: 0.172
--- Population Statistics ---
Average total errors in population: 6.659
Median total errors in population: 6
Error averages by case: (0.378 0.65 0.86 0.402 0.944 0.855 0.658 0.853 0.401 0.658)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.589
Average program size in population (points): 46.704
Average percent parens in population: 0.209
Minimum age in population: 2.0
Maximum age in population: 2.0
Average age in population: 2.0
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 18
Genome diversity (% unique genomes):	 0.943
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.943
Total error diversity:				 0.008
Error (vector) diversity:			 0.029
Behavioral diversity:				 0.162
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1575634
--- Timings ---
Current time: 1559593920315 milliseconds
Total Time:           7.2 seconds
Initialization:       0.1 seconds,  1.4%
Reproduction:         3.0 seconds, 41.6%
Fitness Testing:      3.3 seconds, 46.2%
Report:               0.8 seconds, 10.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 425
Test mean error for best: 0.42500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 38                  | Program output: 38                 
Correct output: -98                 | Program output: -98                
Correct output: -27                 | Program output: 70                 
Correct output: -42                 | Program output: -42                
Correct output: -91                 | Program output: -91                
Correct output: -82                 | Program output: -82                
Correct output: -94                 | Program output: -94                
Correct output: -26                 | Program output: -26                
Correct output: -100                | Program output: 50                 
Correct output: -14                 | Program output: -14                
Correct output: -68                 | Program output: -68                
Correct output: -54                 | Program output: -54                
Correct output: 23                  | Program output: 23                 
Correct output: 15                  | Program output: 15                 
Correct output: -71                 | Program output: -71                
Correct output: 56                  | Program output: 62                 
Correct output: 3                   | Program output: 3                  
Correct output: 3                   | Program output: 3                  
Correct output: 13                  | Program output: 54                 
Correct output: 31                  | Program output: 74                 
Correct output: 6                   | Program output: 6                  
Correct output: 8                   | Program output: 8                  
Correct output: 22                  | Program output: 22                 
Correct output: 16                  | Program output: 16                 
Correct output: 10                  | Program output: 10                 
Correct output: 6                   | Program output: 73                 
Correct output: 3                   | Program output: 25                 
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 1                  
Correct output: 23                  | Program output: 23                 
Correct output: 1                   | Program output: 1                  
Correct output: 17                  | Program output: 28                 
Correct output: 4                   | Program output: 4                  
Correct output: 32                  | Program output: 48                 
Correct output: 39                  | Program output: 39                 
Correct output: -100                | Program output: -22                
Correct output: -65                 | Program output: -40                
Correct output: 1                   | Program output: 63                 
Correct output: -70                 | Program output: -70                
Correct output: -30                 | Program output: -30                
Correct output: 30                  | Program output: 30                 
Correct output: -69                 | Program output: -69                
Correct output: -42                 | Program output: 11                 
Correct output: -3                  | Program output: 35                 
Correct output: 8                   | Program output: 79                 
Correct output: -78                 | Program output: 25                 
Correct output: -71                 | Program output: -44                
Correct output: -75                 | Program output: -31                
Correct output: -62                 | Program output: -4                 
Correct output: -66                 | Program output: -66                
Correct output: -13                 | Program output: 50                 
Correct output: -74                 | Program output: -22                
Correct output: -81                 | Program output: -81                
Correct output: -70                 | Program output: -70                
Correct output: -81                 | Program output: -81                
Correct output: -28                 | Program output: -28                
Correct output: -52                 | Program output: -52                
Correct output: -63                 | Program output: 47                 
Correct output: -49                 | Program output: -49                
Correct output: -70                 | Program output: -70                
Correct output: -76                 | Program output: -76                
Correct output: 37                  | Program output: 51                 
Correct output: -96                 | Program output: -96                
Correct output: -88                 | Program output: -45                
Correct output: 9                   | Program output: 77                 
Correct output: 1                   | Program output: 1                  
Correct output: -87                 | Program output: -61                
Correct output: -93                 | Program output: -43                
Correct output: 1                   | Program output: 1                  
Correct output: -84                 | Program output: -58                
Correct output: -77                 | Program output: -77                
Correct output: -60                 | Program output: -60                
Correct output: 23                  | Program output: 23                 
Correct output: 22                  | Program output: 83                 
Correct output: -93                 | Program output: -93                
Correct output: -46                 | Program output: -46                
Correct output: -94                 | Program output: -94                
Correct output: -38                 | Program output: 5                  
Correct output: -48                 | Program output: -48                
Correct output: -75                 | Program output: -13                
Correct output: -43                 | Program output: -26                
Correct output: -13                 | Program output: -13                
Correct output: -75                 | Program output: -43                
Correct output: -64                 | Program output: -64                
Correct output: -11                 | Program output: 17                 
Correct output: -99                 | Program output: -9                 
Correct output: -35                 | Program output: -35                
Correct output: -67                 | Program output: -49                
Correct output: -84                 | Program output: -84                
Correct output: -100                | Program output: -100               
Correct output: -88                 | Program output: -37                
Correct output: -81                 | Program output: -52                
Correct output: -9                  | Program output: 4                  
Correct output: -100                | Program output: -100               
Correct output: -83                 | Program output: -83                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_flush} {:close 1, :instruction integer_dup} {:close 1, :instruction tag_integer_339} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction print_integer} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 2, :instruction integer_max} {:close 0, :instruction integer_dec} {:close 0, :instruction -80} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_add})
Lexicase best program: (integer_flush integer_dup tag_integer_339 exec_noop exec_noop in2 boolean_dup_times in1 integer_dup exec_do*while (exec_dup_times () integer_min in1 boolean_stackdepth exec_empty boolean_yankdup boolean_frominteger print_integer integer_stackdepth) exec_dup_times (integer_max) integer_dec -80 exec_dup_times (integer_add))
Lexicase best errors: [1 0 0 1 0 0 1 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 30
Percent parens: 0.167
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_flush} {:close 1, :instruction integer_dup} {:close 1, :instruction tag_integer_339} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction print_integer} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 2, :instruction integer_max} {:close 0, :instruction integer_dec} {:close 0, :instruction -80} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_add})
Zero cases best program: (integer_flush integer_dup tag_integer_339 exec_noop exec_noop in2 boolean_dup_times in1 integer_dup exec_do*while (exec_dup_times () integer_min in1 boolean_stackdepth exec_empty boolean_yankdup boolean_frominteger print_integer integer_stackdepth) exec_dup_times (integer_max) integer_dec -80 exec_dup_times (integer_add))
Zero cases best errors: [1 0 0 1 0 0 1 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 30
Percent parens: 0.167
--- Lexicase Population Statistics ---
Count of elite individuals by case: (76 247 273 81 281 273 164 159 281 499)
Population mean number of elite cases: 2.33
Count of perfect (error zero) individuals by case: (76 247 273 81 281 273 164 159 281 499)
Population mean number of perfect (error zero) cases: 2.33
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_flush} {:close 1, :instruction integer_dup} {:close 1, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction print_integer} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_times} {:close 2, :instruction integer_max} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_add})
Best program: (integer_flush integer_dup exec_noop in2 boolean_dup_times in1 boolean_rot integer_dup exec_do*while (exec_dup_times () integer_min in1 boolean_stackdepth exec_empty boolean_yankdup boolean_frominteger print_integer exec_stackdepth exec_dup_times (integer_max)) integer_dec exec_dup_times (integer_add))
Errors: [1 0 0 1 0 0 1 1 0 0]
Total: 4
Mean: 0.4
Genome size: 23
Size: 28
Percent parens: 0.179
--- Population Statistics ---
Average total errors in population: 7.666
Median total errors in population: 8
Error averages by case: (0.924 0.753 0.727 0.919 0.719 0.727 0.836 0.841 0.719 0.501)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 24.643
Average program size in population (points): 30.698
Average percent parens in population: 0.195
Minimum age in population: 3.0
Maximum age in population: 3.0
Average age in population: 3.0
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 10
Genome diversity (% unique genomes):	 0.982
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.981
Total error diversity:				 0.007
Error (vector) diversity:			 0.039
Behavioral diversity:				 0.189
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 2288249
--- Timings ---
Current time: 1559593922864 milliseconds
Total Time:           9.8 seconds
Initialization:       0.1 seconds,  1.0%
Reproduction:         4.1 seconds, 42.0%
Fitness Testing:      4.2 seconds, 42.6%
Report:               1.4 seconds, 14.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 425
Test mean error for best: 0.42500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 38                  | Program output: 38                 
Correct output: -98                 | Program output: -98                
Correct output: -27                 | Program output: 70                 
Correct output: -42                 | Program output: -42                
Correct output: -91                 | Program output: -91                
Correct output: -82                 | Program output: -82                
Correct output: -94                 | Program output: -94                
Correct output: -26                 | Program output: -26                
Correct output: -100                | Program output: 50                 
Correct output: -14                 | Program output: -14                
Correct output: -68                 | Program output: -68                
Correct output: -54                 | Program output: -54                
Correct output: 23                  | Program output: 23                 
Correct output: 15                  | Program output: 15                 
Correct output: -71                 | Program output: -71                
Correct output: 56                  | Program output: 62                 
Correct output: 3                   | Program output: 3                  
Correct output: 3                   | Program output: 3                  
Correct output: 13                  | Program output: 54                 
Correct output: 31                  | Program output: 74                 
Correct output: 6                   | Program output: 6                  
Correct output: 8                   | Program output: 8                  
Correct output: 22                  | Program output: 22                 
Correct output: 16                  | Program output: 16                 
Correct output: 10                  | Program output: 10                 
Correct output: 6                   | Program output: 73                 
Correct output: 3                   | Program output: 25                 
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 1                  
Correct output: 23                  | Program output: 23                 
Correct output: 1                   | Program output: 1                  
Correct output: 17                  | Program output: 28                 
Correct output: 4                   | Program output: 4                  
Correct output: 32                  | Program output: 48                 
Correct output: 39                  | Program output: 39                 
Correct output: -100                | Program output: -22                
Correct output: -65                 | Program output: -40                
Correct output: 1                   | Program output: 63                 
Correct output: -70                 | Program output: -70                
Correct output: -30                 | Program output: -30                
Correct output: 30                  | Program output: 30                 
Correct output: -69                 | Program output: -69                
Correct output: -42                 | Program output: 11                 
Correct output: -3                  | Program output: 35                 
Correct output: 8                   | Program output: 79                 
Correct output: -78                 | Program output: 25                 
Correct output: -71                 | Program output: -44                
Correct output: -75                 | Program output: -31                
Correct output: -62                 | Program output: -4                 
Correct output: -66                 | Program output: -66                
Correct output: -13                 | Program output: 50                 
Correct output: -74                 | Program output: -22                
Correct output: -81                 | Program output: -81                
Correct output: -70                 | Program output: -70                
Correct output: -81                 | Program output: -81                
Correct output: -28                 | Program output: -28                
Correct output: -52                 | Program output: -52                
Correct output: -63                 | Program output: 47                 
Correct output: -49                 | Program output: -49                
Correct output: -70                 | Program output: -70                
Correct output: -76                 | Program output: -76                
Correct output: 37                  | Program output: 51                 
Correct output: -96                 | Program output: -96                
Correct output: -88                 | Program output: -45                
Correct output: 9                   | Program output: 77                 
Correct output: 1                   | Program output: 1                  
Correct output: -87                 | Program output: -61                
Correct output: -93                 | Program output: -43                
Correct output: 1                   | Program output: 1                  
Correct output: -84                 | Program output: -58                
Correct output: -77                 | Program output: -77                
Correct output: -60                 | Program output: -60                
Correct output: 23                  | Program output: 23                 
Correct output: 22                  | Program output: 83                 
Correct output: -93                 | Program output: -93                
Correct output: -46                 | Program output: -46                
Correct output: -94                 | Program output: -94                
Correct output: -38                 | Program output: 5                  
Correct output: -48                 | Program output: -48                
Correct output: -75                 | Program output: -13                
Correct output: -43                 | Program output: -26                
Correct output: -13                 | Program output: -13                
Correct output: -75                 | Program output: -43                
Correct output: -64                 | Program output: -64                
Correct output: -11                 | Program output: 17                 
Correct output: -99                 | Program output: -9                 
Correct output: -35                 | Program output: -35                
Correct output: -67                 | Program output: -49                
Correct output: -84                 | Program output: -84                
Correct output: -100                | Program output: -100               
Correct output: -88                 | Program output: -37                
Correct output: -81                 | Program output: -52                
Correct output: -9                  | Program output: 4                  
Correct output: -100                | Program output: -100               
Correct output: -83                 | Program output: -83                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_flush} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_dup} {:close 1, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction print_integer} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_times} {:close 2, :instruction integer_max} {:close 1, :instruction exec_y} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_add})
Lexicase best program: (integer_flush integer_swap integer_dup integer_div exec_noop exec_noop in2 boolean_dup_times in1 boolean_rot integer_dup exec_dup_times () integer_min in1 boolean_stackdepth exec_empty boolean_yankdup boolean_frominteger print_integer exec_stackdepth exec_dup_times (integer_max) exec_y () integer_dec exec_dup_times (integer_add))
Lexicase best errors: [0 0 0 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 31
Percent parens: 0.161
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_flush} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_dup} {:close 1, :instruction integer_div} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction print_integer} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_times} {:close 2, :instruction integer_max} {:close 1, :instruction exec_y} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_add})
Zero cases best program: (integer_flush integer_swap integer_dup integer_div exec_noop exec_noop in2 boolean_dup_times in1 boolean_rot integer_dup exec_dup_times () integer_min in1 boolean_stackdepth exec_empty boolean_yankdup boolean_frominteger print_integer exec_stackdepth exec_dup_times (integer_max) exec_y () integer_dec exec_dup_times (integer_add))
Zero cases best errors: [0 0 0 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 31
Percent parens: 0.161
--- Lexicase Population Statistics ---
Count of elite individuals by case: (203 189 221 252 203 249 538 196 223 220)
Population mean number of elite cases: 2.49
Count of perfect (error zero) individuals by case: (203 189 221 252 203 249 538 196 223 220)
Population mean number of perfect (error zero) cases: 2.49
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_dup} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_flush} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction print_integer} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_times} {:close 2, :instruction integer_max} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_add})
Best program: (integer_dup exec_noop exec_noop boolean_flush in2 boolean_dup_times exec_if (in1 boolean_rot integer_dup exec_do*while (exec_dup_times () integer_min in1 boolean_stackdepth exec_empty boolean_yankdup boolean_frominteger print_integer exec_stackdepth exec_dup_times (integer_max)) integer_dec exec_dup_times (integer_add)) ())
Errors: [0 0 0 0 0 0 0 1 0 0]
Total: 1
Mean: 0.1
Genome size: 25
Size: 32
Percent parens: 0.219
--- Population Statistics ---
Average total errors in population: 7.506
Median total errors in population: 8
Error averages by case: (0.797 0.811 0.779 0.748 0.797 0.751 0.462 0.804 0.777 0.78)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 24.914
Average program size in population (points): 31.723
Average percent parens in population: 0.212
Minimum age in population: 4.0
Maximum age in population: 4.0
Average age in population: 4.0
Median age in population: 4.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 6
Genome diversity (% unique genomes):	 0.993
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.993
Total error diversity:				 0.009
Error (vector) diversity:			 0.031
Behavioral diversity:				 0.216
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 2913349
--- Timings ---
Current time: 1559593925279 milliseconds
Total Time:          12.2 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:         5.2 seconds, 42.8%
Fitness Testing:      4.9 seconds, 40.0%
Report:               2.0 seconds, 16.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 423
Test mean error for best: 0.42300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 38                  | Program output: 38                 
Correct output: -98                 | Program output: -98                
Correct output: -27                 | Program output: -27                
Correct output: -42                 | Program output: 75                 
Correct output: -91                 | Program output: 7                  
Correct output: -82                 | Program output: -82                
Correct output: -94                 | Program output: -86                
Correct output: -26                 | Program output: -26                
Correct output: -100                | Program output: -100               
Correct output: -14                 | Program output: -14                
Correct output: -68                 | Program output: -68                
Correct output: -54                 | Program output: -54                
Correct output: 23                  | Program output: 23                 
Correct output: 15                  | Program output: 15                 
Correct output: -71                 | Program output: -71                
Correct output: 56                  | Program output: 56                 
Correct output: 3                   | Program output: 26                 
Correct output: 3                   | Program output: 22                 
Correct output: 13                  | Program output: 13                 
Correct output: 31                  | Program output: 31                 
Correct output: 6                   | Program output: 52                 
Correct output: 8                   | Program output: 23                 
Correct output: 22                  | Program output: 30                 
Correct output: 16                  | Program output: 80                 
Correct output: 10                  | Program output: 46                 
Correct output: 6                   | Program output: 6                  
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 19                 
Correct output: 1                   | Program output: 67                 
Correct output: 23                  | Program output: 51                 
Correct output: 1                   | Program output: 17                 
Correct output: 17                  | Program output: 17                 
Correct output: 4                   | Program output: 60                 
Correct output: 32                  | Program output: 32                 
Correct output: 39                  | Program output: 56                 
Correct output: -100                | Program output: -100               
Correct output: -65                 | Program output: -65                
Correct output: 1                   | Program output: 1                  
Correct output: -70                 | Program output: -48                
Correct output: -30                 | Program output: -1                 
Correct output: 30                  | Program output: 32                 
Correct output: -69                 | Program output: -64                
Correct output: -42                 | Program output: -42                
Correct output: -3                  | Program output: -3                 
Correct output: 8                   | Program output: 8                  
Correct output: -78                 | Program output: -78                
Correct output: -71                 | Program output: -71                
Correct output: -75                 | Program output: -75                
Correct output: -62                 | Program output: -62                
Correct output: -66                 | Program output: 49                 
Correct output: -13                 | Program output: -13                
Correct output: -74                 | Program output: -74                
Correct output: -81                 | Program output: -56                
Correct output: -70                 | Program output: -19                
Correct output: -81                 | Program output: -70                
Correct output: -28                 | Program output: 9                  
Correct output: -52                 | Program output: -46                
Correct output: -63                 | Program output: -63                
Correct output: -49                 | Program output: 62                 
Correct output: -70                 | Program output: -46                
Correct output: -76                 | Program output: -18                
Correct output: 37                  | Program output: 37                 
Correct output: -96                 | Program output: -44                
Correct output: -88                 | Program output: -88                
Correct output: 9                   | Program output: 9                  
Correct output: 1                   | Program output: 2                  
Correct output: -87                 | Program output: -87                
Correct output: -93                 | Program output: -93                
Correct output: 1                   | Program output: 60                 
Correct output: -84                 | Program output: -84                
Correct output: -77                 | Program output: 3                  
Correct output: -60                 | Program output: -33                
Correct output: 23                  | Program output: 29                 
Correct output: 22                  | Program output: 22                 
Correct output: -93                 | Program output: -1                 
Correct output: -46                 | Program output: 14                 
Correct output: -94                 | Program output: 0                  
Correct output: -38                 | Program output: -38                
Correct output: -48                 | Program output: -6                 
Correct output: -75                 | Program output: -75                
Correct output: -43                 | Program output: -43                
Correct output: -13                 | Program output: 43                 
Correct output: -75                 | Program output: -75                
Correct output: -64                 | Program output: -59                
Correct output: -11                 | Program output: -11                
Correct output: -99                 | Program output: -99                
Correct output: -35                 | Program output: 14                 
Correct output: -67                 | Program output: -67                
Correct output: -84                 | Program output: -18                
Correct output: -100                | Program output: -26                
Correct output: -88                 | Program output: -88                
Correct output: -81                 | Program output: -81                
Correct output: -9                  | Program output: -9                 
Correct output: -100                | Program output: -67                
Correct output: -83                 | Program output: -31                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_noop} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_dup_times} {:close 2, :instruction integer_max} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div})
Lexicase best program: (integer_flush exec_noop exec_noop in3 in4 boolean_rot integer_dup exec_rot () (exec_do*while (in3 integer_min in1 boolean_stackdepth exec_empty boolean_or boolean_yankdup boolean_frominteger exec_empty print_integer exec_do*times (exec_dup_times (integer_max)) integer_dec integer_div)) ())
Lexicase best errors: [1 0 0 0 1 0 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 31
Percent parens: 0.226
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_flush} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_noop} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_dup_times} {:close 2, :instruction integer_max} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div})
Zero cases best program: (integer_flush exec_noop exec_noop in3 in4 boolean_rot integer_dup exec_rot () (exec_do*while (in3 integer_min in1 boolean_stackdepth exec_empty boolean_or boolean_yankdup boolean_frominteger exec_empty print_integer exec_do*times (exec_dup_times (integer_max)) integer_dec integer_div)) ())
Zero cases best errors: [1 0 0 0 1 0 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 31
Percent parens: 0.226
--- Lexicase Population Statistics ---
Count of elite individuals by case: (370 12 589 10 380 12 11 105 553 104)
Population mean number of elite cases: 2.15
Count of perfect (error zero) individuals by case: (370 12 589 10 380 12 11 105 553 104)
Population mean number of perfect (error zero) cases: 2.15
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_flush} {:close 2, :instruction in1} {:close 1, :instruction integer_dup} {:close 2, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_noop} {:close 0, :instruction in4} {:close 0, :instruction exec_k} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction print_integer} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_shove} {:close 2, :instruction integer_max} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_add})
Best program: (integer_flush in1 integer_dup exec_k () () exec_noop exec_noop in4 exec_k (in3 in2 exec_eq boolean_dup_times boolean_rot exec_dup (exec_do*while (exec_dup_times () integer_min in1 boolean_invert_first_then_and) boolean_stackdepth exec_empty boolean_yankdup boolean_frominteger print_integer exec_stackdepth exec_dup_times (integer_shove integer_max)) boolean_empty integer_dec integer_gt exec_dup_times (integer_add)) ())
Errors: [1 0 0 0 1 0 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 33
Size: 43
Percent parens: 0.233
--- Population Statistics ---
Average total errors in population: 7.854
Median total errors in population: 8
Error averages by case: (0.63 0.988 0.411 0.99 0.62 0.988 0.989 0.895 0.447 0.896)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 25.371
Average program size in population (points): 31.806
Average percent parens in population: 0.199
Minimum age in population: 5.0
Maximum age in population: 5.0
Average age in population: 5.0
Median age in population: 5.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.999
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.999
Total error diversity:				 0.008
Error (vector) diversity:			 0.025
Behavioral diversity:				 0.176
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 3471028
--- Timings ---
Current time: 1559593927410 milliseconds
Total Time:          14.5 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         6.3 seconds, 43.4%
Fitness Testing:      5.5 seconds, 38.0%
Report:               2.6 seconds, 17.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 208
Test mean error for best: 0.20800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 38                  | Program output: 38                 
Correct output: -98                 | Program output: -98                
Correct output: -27                 | Program output: 70                 
Correct output: -42                 | Program output: -42                
Correct output: -91                 | Program output: -91                
Correct output: -82                 | Program output: -82                
Correct output: -94                 | Program output: -94                
Correct output: -26                 | Program output: -26                
Correct output: -100                | Program output: 50                 
Correct output: -14                 | Program output: -14                
Correct output: -68                 | Program output: -68                
Correct output: -54                 | Program output: -54                
Correct output: 23                  | Program output: 23                 
Correct output: 15                  | Program output: 15                 
Correct output: -71                 | Program output: -71                
Correct output: 56                  | Program output: 62                 
Correct output: 3                   | Program output: 3                  
Correct output: 3                   | Program output: 3                  
Correct output: 13                  | Program output: 54                 
Correct output: 31                  | Program output: 37                 
Correct output: 6                   | Program output: 6                  
Correct output: 8                   | Program output: 8                  
Correct output: 22                  | Program output: 22                 
Correct output: 16                  | Program output: 16                 
Correct output: 10                  | Program output: 10                 
Correct output: 6                   | Program output: 6                  
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 1                  
Correct output: 23                  | Program output: 23                 
Correct output: 1                   | Program output: 1                  
Correct output: 17                  | Program output: 28                 
Correct output: 4                   | Program output: 4                  
Correct output: 32                  | Program output: 48                 
Correct output: 39                  | Program output: 39                 
Correct output: -100                | Program output: -93                
Correct output: -65                 | Program output: -40                
Correct output: 1                   | Program output: 14                 
Correct output: -70                 | Program output: -70                
Correct output: -30                 | Program output: -30                
Correct output: 30                  | Program output: 30                 
Correct output: -69                 | Program output: -69                
Correct output: -42                 | Program output: 11                 
Correct output: -3                  | Program output: 35                 
Correct output: 8                   | Program output: 8                  
Correct output: -78                 | Program output: -78                
Correct output: -71                 | Program output: -44                
Correct output: -75                 | Program output: -31                
Correct output: -62                 | Program output: -62                
Correct output: -66                 | Program output: -66                
Correct output: -13                 | Program output: 50                 
Correct output: -74                 | Program output: -74                
Correct output: -81                 | Program output: -81                
Correct output: -70                 | Program output: -70                
Correct output: -81                 | Program output: -81                
Correct output: -28                 | Program output: -28                
Correct output: -52                 | Program output: -52                
Correct output: -63                 | Program output: 20                 
Correct output: -49                 | Program output: -49                
Correct output: -70                 | Program output: -70                
Correct output: -76                 | Program output: -76                
Correct output: 37                  | Program output: 37                 
Correct output: -96                 | Program output: -96                
Correct output: -88                 | Program output: -45                
Correct output: 9                   | Program output: 17                 
Correct output: 1                   | Program output: 1                  
Correct output: -87                 | Program output: -87                
Correct output: -93                 | Program output: -43                
Correct output: 1                   | Program output: 1                  
Correct output: -84                 | Program output: -84                
Correct output: -77                 | Program output: -77                
Correct output: -60                 | Program output: -60                
Correct output: 23                  | Program output: 23                 
Correct output: 22                  | Program output: 71                 
Correct output: -93                 | Program output: -93                
Correct output: -46                 | Program output: -46                
Correct output: -94                 | Program output: -94                
Correct output: -38                 | Program output: -38                
Correct output: -48                 | Program output: -48                
Correct output: -75                 | Program output: -75                
Correct output: -43                 | Program output: -26                
Correct output: -13                 | Program output: -13                
Correct output: -75                 | Program output: -75                
Correct output: -64                 | Program output: -64                
Correct output: -11                 | Program output: 10                 
Correct output: -99                 | Program output: -53                
Correct output: -35                 | Program output: -35                
Correct output: -67                 | Program output: -67                
Correct output: -84                 | Program output: -84                
Correct output: -100                | Program output: -100               
Correct output: -88                 | Program output: -88                
Correct output: -81                 | Program output: -81                
Correct output: -9                  | Program output: 4                  
Correct output: -100                | Program output: -100               
Correct output: -83                 | Program output: -83                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in4} {:close 2, :instruction in3} {:close 1, :instruction integer_dup} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_yank} {:close 2, :instruction integer_max} {:close 0, :instruction exec_dup_times})
Lexicase best program: (in4 in3 integer_dup exec_noop integer_shove boolean_dup_times in1 exec_dup (boolean_rot integer_dup exec_do*while (exec_dup_times () integer_min boolean_stackdepth boolean_yankdup boolean_frominteger print_integer integer_dup exec_dup_times (in3 exec_dup_times (exec_yank integer_max)) exec_dup_times ())))
Lexicase best errors: [0 0 1 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 31
Percent parens: 0.226
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in4} {:close 2, :instruction in3} {:close 1, :instruction integer_dup} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_yank} {:close 2, :instruction integer_max} {:close 0, :instruction exec_dup_times})
Zero cases best program: (in4 in3 integer_dup exec_noop integer_shove boolean_dup_times in1 exec_dup (boolean_rot integer_dup exec_do*while (exec_dup_times () integer_min boolean_stackdepth boolean_yankdup boolean_frominteger print_integer integer_dup exec_dup_times (in3 exec_dup_times (exec_yank integer_max)) exec_dup_times ())))
Zero cases best errors: [0 0 1 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 31
Percent parens: 0.226
--- Lexicase Population Statistics ---
Count of elite individuals by case: (572 327 35 565 501 571 453 499 229 283)
Population mean number of elite cases: 4.03
Count of perfect (error zero) individuals by case: (572 327 35 565 501 571 453 499 229 283)
Population mean number of perfect (error zero) cases: 4.03
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_flush} {:close 2, :instruction in1} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_k} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction print_integer} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_shove} {:close 2, :instruction integer_max} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup_times})
Best program: (integer_flush in1 integer_dup exec_noop exec_noop exec_k (in3 in2 boolean_dup_times boolean_rot exec_dup (exec_empty integer_min in1 boolean_invert_second_then_and boolean_invert_first_then_and) boolean_stackdepth exec_empty boolean_yankdup boolean_frominteger print_integer exec_stackdepth exec_dup_times (integer_shove integer_max)) (integer_mod integer_dec integer_gt exec_dup_times ()))
Errors: [0 0 0 0 0 0 0 0 0 1]
Total: 1
Mean: 0.1
Genome size: 29
Size: 35
Percent parens: 0.171
--- Population Statistics ---
Average total errors in population: 5.965
Median total errors in population: 4
Error averages by case: (0.428 0.673 0.965 0.435 0.499 0.429 0.547 0.501 0.771 0.717)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 25.914
Average program size in population (points): 33.475
Average percent parens in population: 0.223
Minimum age in population: 6.0
Maximum age in population: 6.0
Average age in population: 6.0
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 6
Genome diversity (% unique genomes):	 0.989
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.987
Total error diversity:				 0.01
Error (vector) diversity:			 0.055
Behavioral diversity:				 0.206
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 3995984
--- Timings ---
Current time: 1559593929342 milliseconds
Total Time:          16.6 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         7.4 seconds, 44.6%
Fitness Testing:      6.1 seconds, 36.7%
Report:               3.0 seconds, 18.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 245
Test mean error for best: 0.24500
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 1
Test Case    3 | Error: 1
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 1
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 1
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 1
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 1
Test Case   51 | Error: 1
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 1
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 1
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 1
Test Case   63 | Error: 0
Test Case   64 | Error: 1
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 1
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 1
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 1
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 1
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 1
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 1
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 1
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 1
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 1
Test Case  159 | Error: 0
Test Case  160 | Error: 1
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 1
Test Case  170 | Error: 1
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 1
Test Case  186 | Error: 0
Test Case  187 | Error: 1
Test Case  188 | Error: 0
Test Case  189 | Error: 1
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 1
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 1
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 1
Test Case  211 | Error: 1
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 1
Test Case  216 | Error: 1
Test Case  217 | Error: 0
Test Case  218 | Error: 1
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 1
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 1
Test Case  231 | Error: 0
Test Case  232 | Error: 1
Test Case  233 | Error: 1
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 1
Test Case  241 | Error: 1
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 1
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 1
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 1
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 1
Test Case  269 | Error: 0
Test Case  270 | Error: 1
Test Case  271 | Error: 0
Test Case  272 | Error: 1
Test Case  273 | Error: 0
Test Case  274 | Error: 1
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 1
Test Case  280 | Error: 1
Test Case  281 | Error: 0
Test Case  282 | Error: 1
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 1
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 1
Test Case  292 | Error: 1
Test Case  293 | Error: 1
Test Case  294 | Error: 1
Test Case  295 | Error: 0
Test Case  296 | Error: 1
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 1
Test Case  305 | Error: 1
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 1
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 1
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 1
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 1
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 1
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 1
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 1
Test Case  345 | Error: 0
Test Case  346 | Error: 1
Test Case  347 | Error: 1
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 1
Test Case  352 | Error: 1
Test Case  353 | Error: 1
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 1
Test Case  357 | Error: 1
Test Case  358 | Error: 1
Test Case  359 | Error: 1
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 1
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 1
Test Case  367 | Error: 1
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 1
Test Case  372 | Error: 1
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 1
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 1
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 1
Test Case  383 | Error: 1
Test Case  384 | Error: 1
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 1
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 1
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 1
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 1
Test Case  404 | Error: 0
Test Case  405 | Error: 1
Test Case  406 | Error: 0
Test Case  407 | Error: 1
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 1
Test Case  419 | Error: 0
Test Case  420 | Error: 1
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 1
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 1
Test Case  436 | Error: 0
Test Case  437 | Error: 1
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 1
Test Case  450 | Error: 1
Test Case  451 | Error: 1
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 1
Test Case  456 | Error: 0
Test Case  457 | Error: 1
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 1
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 1
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 1
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 1
Test Case  482 | Error: 0
Test Case  483 | Error: 1
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 1
Test Case  489 | Error: 0
Test Case  490 | Error: 1
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 1
Test Case  495 | Error: 1
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 1
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 1
Test Case  507 | Error: 0
Test Case  508 | Error: 1
Test Case  509 | Error: 0
Test Case  510 | Error: 1
Test Case  511 | Error: 1
Test Case  512 | Error: 1
Test Case  513 | Error: 1
Test Case  514 | Error: 1
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 1
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 1
Test Case  530 | Error: 0
Test Case  531 | Error: 1
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 1
Test Case  536 | Error: 1
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 1
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 1
Test Case  545 | Error: 1
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 1
Test Case  549 | Error: 1
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 1
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 1
Test Case  561 | Error: 1
Test Case  562 | Error: 0
Test Case  563 | Error: 1
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 1
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 1
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 1
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 1
Test Case  583 | Error: 0
Test Case  584 | Error: 1
Test Case  585 | Error: 1
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 1
Test Case  593 | Error: 0
Test Case  594 | Error: 1
Test Case  595 | Error: 1
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 1
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 1
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 1
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 1
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 1
Test Case  632 | Error: 1
Test Case  633 | Error: 0
Test Case  634 | Error: 1
Test Case  635 | Error: 1
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 1
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 1
Test Case  651 | Error: 0
Test Case  652 | Error: 1
Test Case  653 | Error: 0
Test Case  654 | Error: 1
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 1
Test Case  661 | Error: 1
Test Case  662 | Error: 1
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 1
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 1
Test Case  670 | Error: 1
Test Case  671 | Error: 0
Test Case  672 | Error: 1
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 1
Test Case  679 | Error: 1
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 1
Test Case  684 | Error: 1
Test Case  685 | Error: 1
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 1
Test Case  691 | Error: 1
Test Case  692 | Error: 1
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 1
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 1
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 1
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 1
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 1
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 1
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 1
Test Case  729 | Error: 0
Test Case  730 | Error: 1
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 1
Test Case  736 | Error: 0
Test Case  737 | Error: 1
Test Case  738 | Error: 1
Test Case  739 | Error: 1
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 1
Test Case  744 | Error: 0
Test Case  745 | Error: 1
Test Case  746 | Error: 1
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 1
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 1
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 1
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 1
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 1
Test Case  775 | Error: 0
Test Case  776 | Error: 1
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 1
Test Case  783 | Error: 0
Test Case  784 | Error: 1
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 1
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 1
Test Case  793 | Error: 1
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 1
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 1
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 1
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 1
Test Case  819 | Error: 1
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 1
Test Case  823 | Error: 1
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 1
Test Case  833 | Error: 1
Test Case  834 | Error: 0
Test Case  835 | Error: 1
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 1
Test Case  840 | Error: 1
Test Case  841 | Error: 1
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 1
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 1
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 1
Test Case  853 | Error: 0
Test Case  854 | Error: 1
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 1
Test Case  858 | Error: 1
Test Case  859 | Error: 1
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 1
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 1
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 1
Test Case  880 | Error: 1
Test Case  881 | Error: 0
Test Case  882 | Error: 1
Test Case  883 | Error: 0
Test Case  884 | Error: 1
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 1
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 1
Test Case  896 | Error: 1
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 1
Test Case  905 | Error: 0
Test Case  906 | Error: 1
Test Case  907 | Error: 0
Test Case  908 | Error: 1
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 1
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 1
Test Case  921 | Error: 1
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 1
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 1
Test Case  930 | Error: 0
Test Case  931 | Error: 1
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 1
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 1
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 1
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 1
Test Case  949 | Error: 1
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 1
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 1
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 1
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 1
Test Case  973 | Error: 0
Test Case  974 | Error: 1
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 1
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 1
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 1
Test Case  993 | Error: 0
Test Case  994 | Error: 1
Test Case  995 | Error: 1
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output:                    
Correct output: 38                  | Program output: 38                 
Correct output: -98                 | Program output: -98                
Correct output: -27                 | Program output: -27                
Correct output: -42                 | Program output: -42                
Correct output: -91                 | Program output: -91                
Correct output: -82                 | Program output: -82                
Correct output: -94                 | Program output: -94                
Correct output: -26                 | Program output: -26                
Correct output: -100                | Program output: -100               
Correct output: -14                 | Program output: -14                
Correct output: -68                 | Program output: -68                
Correct output: -54                 | Program output: -54                
Correct output: 23                  | Program output: 23                 
Correct output: 15                  | Program output: 15                 
Correct output: -71                 | Program output: -71                
Correct output: 56                  | Program output:                    
Correct output: 3                   | Program output: 3                  
Correct output: 3                   | Program output: 3                  
Correct output: 13                  | Program output: 13                 
Correct output: 31                  | Program output: 31                 
Correct output: 6                   | Program output: 6                  
Correct output: 8                   | Program output: 8                  
Correct output: 22                  | Program output: 22                 
Correct output: 16                  | Program output: 16                 
Correct output: 10                  | Program output: 10                 
Correct output: 6                   | Program output: 73                 
Correct output: 3                   | Program output: 25                 
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 1                  
Correct output: 23                  | Program output: 23                 
Correct output: 1                   | Program output: 1                  
Correct output: 17                  | Program output: 17                 
Correct output: 4                   | Program output:                    
Correct output: 32                  | Program output: 32                 
Correct output: 39                  | Program output: 39                 
Correct output: -100                | Program output: -100               
Correct output: -65                 | Program output: -65                
Correct output: 1                   | Program output: 1                  
Correct output: -70                 | Program output: -70                
Correct output: -30                 | Program output: -30                
Correct output: 30                  | Program output: 30                 
Correct output: -69                 | Program output: -69                
Correct output: -42                 | Program output: -42                
Correct output: -3                  | Program output: -3                 
Correct output: 8                   | Program output: 79                 
Correct output: -78                 | Program output: -67                
Correct output: -71                 | Program output: -71                
Correct output: -75                 | Program output: -75                
Correct output: -62                 | Program output: -50                
Correct output: -66                 | Program output: -66                
Correct output: -13                 | Program output: -13                
Correct output: -74                 | Program output: -55                
Correct output: -81                 | Program output: -81                
Correct output: -70                 | Program output: -70                
Correct output: -81                 | Program output: -81                
Correct output: -28                 | Program output: -28                
Correct output: -52                 | Program output: -52                
Correct output: -63                 | Program output: -63                
Correct output: -49                 | Program output: -49                
Correct output: -70                 | Program output: -70                
Correct output: -76                 | Program output: -76                
Correct output: 37                  | Program output: 51                 
Correct output: -96                 | Program output: -96                
Correct output: -88                 | Program output: -88                
Correct output: 9                   | Program output: 9                  
Correct output: 1                   | Program output: 1                  
Correct output: -87                 | Program output: -61                
Correct output: -93                 | Program output: -93                
Correct output: 1                   | Program output: 1                  
Correct output: -84                 | Program output: -58                
Correct output: -77                 | Program output: -77                
Correct output: -60                 | Program output: -60                
Correct output: 23                  | Program output: 23                 
Correct output: 22                  | Program output:                    
Correct output: -93                 | Program output: -93                
Correct output: -46                 | Program output: -46                
Correct output: -94                 | Program output: -94                
Correct output: -38                 | Program output: -16                
Correct output: -48                 | Program output: -48                
Correct output: -75                 | Program output: -60                
Correct output: -43                 | Program output: -43                
Correct output: -13                 | Program output: -13                
Correct output: -75                 | Program output: -43                
Correct output: -64                 | Program output: -64                
Correct output: -11                 | Program output: -11                
Correct output: -99                 | Program output: -99                
Correct output: -35                 | Program output: -35                
Correct output: -67                 | Program output: -49                
Correct output: -84                 | Program output: -84                
Correct output: -100                | Program output: -100               
Correct output: -88                 | Program output: -37                
Correct output: -81                 | Program output: -52                
Correct output: -9                  | Program output: -9                 
Correct output: -100                | Program output: -100               
Correct output: -83                 | Program output: -83                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_flush} {:close 2, :instruction in1} {:close 1, :instruction integer_dup} {:close 2, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_noop} {:close 0, :instruction in4} {:close 0, :instruction exec_k} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction print_integer} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_shove} {:close 2, :instruction integer_max} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_add})
Lexicase best program: (integer_flush in1 integer_dup exec_k () () exec_noop exec_noop in4 exec_k (in3 in2 exec_eq exec_eq boolean_dup_times boolean_rot integer_swap exec_dup (exec_dup_times () integer_min boolean_swap in1 boolean_invert_first_then_and) boolean_stackdepth exec_empty boolean_yankdup boolean_frominteger print_integer exec_stackdepth exec_dup_times (integer_shove integer_max)) (boolean_empty integer_dec integer_gt integer_add))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 42
Percent parens: 0.190
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_flush} {:close 2, :instruction in1} {:close 1, :instruction integer_dup} {:close 2, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_noop} {:close 0, :instruction in4} {:close 0, :instruction exec_k} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction print_integer} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_shove} {:close 2, :instruction integer_max} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_add})
Zero cases best program: (integer_flush in1 integer_dup exec_k () () exec_noop exec_noop in4 exec_k (in3 in2 exec_eq exec_eq boolean_dup_times boolean_rot integer_swap exec_dup (exec_dup_times () integer_min boolean_swap in1 boolean_invert_first_then_and) boolean_stackdepth exec_empty boolean_yankdup boolean_frominteger print_integer exec_stackdepth exec_dup_times (integer_shove integer_max)) (boolean_empty integer_dec integer_gt integer_add))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 42
Percent parens: 0.190
--- Lexicase Population Statistics ---
Count of elite individuals by case: (172 500 132 169 134 167 172 355 134 352)
Population mean number of elite cases: 2.29
Count of perfect (error zero) individuals by case: (172 500 132 169 134 167 172 355 134 352)
Population mean number of perfect (error zero) cases: 2.29
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_flush} {:close 2, :instruction in1} {:close 1, :instruction integer_dup} {:close 2, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_noop} {:close 0, :instruction in4} {:close 0, :instruction exec_k} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction print_integer} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_shove} {:close 2, :instruction integer_max} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_add})
Best program: (integer_flush in1 integer_dup exec_k () () exec_noop exec_noop in4 exec_k (in3 in2 exec_eq exec_eq boolean_dup_times boolean_rot integer_swap exec_dup (exec_dup_times () integer_min boolean_swap in1 boolean_invert_first_then_and) boolean_stackdepth exec_empty boolean_yankdup boolean_frominteger print_integer exec_stackdepth exec_dup_times (integer_shove integer_max)) (boolean_empty integer_dec integer_gt integer_add))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 34
Size: 42
Percent parens: 0.190
--- Population Statistics ---
Average total errors in population: 7.713
Median total errors in population: 9
Error averages by case: (0.828 0.5 0.868 0.831 0.866 0.833 0.828 0.645 0.866 0.648)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 26.715
Average program size in population (points): 33.774
Average percent parens in population: 0.209
Minimum age in population: 7.0
Maximum age in population: 7.0
Average age in population: 7.0
Median age in population: 7.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 4
Genome diversity (% unique genomes):	 0.986
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.985
Total error diversity:				 0.01
Error (vector) diversity:			 0.033
Behavioral diversity:				 0.216
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 4601215
--- Timings ---
Current time: 1559593931420 milliseconds
Total Time:          18.6 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:         8.5 seconds, 45.9%
Fitness Testing:      6.7 seconds, 36.2%
Report:               3.2 seconds, 17.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 7
Successful program: (integer_flush in1 integer_dup exec_k () () exec_noop exec_noop in4 exec_k (in3 in2 exec_eq exec_eq boolean_dup_times boolean_rot integer_swap exec_dup (exec_dup_times () integer_min boolean_swap in1 boolean_invert_first_then_and) boolean_stackdepth exec_empty boolean_yankdup boolean_frominteger print_integer exec_stackdepth exec_dup_times (integer_shove integer_max)) (boolean_empty integer_dec integer_gt integer_add))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 42


Auto-simplifying with starting size: 42
step: 0
program: (integer_flush in1 integer_dup exec_k () () exec_noop exec_noop in4 exec_k (in3 in2 exec_eq exec_eq boolean_dup_times boolean_rot integer_swap exec_dup (exec_dup_times () integer_min boolean_swap in1 boolean_invert_first_then_and) boolean_stackdepth exec_empty boolean_yankdup boolean_frominteger print_integer exec_stackdepth exec_dup_times (integer_shove integer_max)) (boolean_empty integer_dec integer_gt integer_add))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 42

step: 500
program: (integer_flush in1 integer_dup exec_k () () exec_noop exec_noop in4 exec_k (in3 in2 exec_eq exec_eq boolean_dup_times boolean_rot integer_swap exec_dup (exec_dup_times () integer_min boolean_swap in1 boolean_invert_first_then_and) boolean_stackdepth exec_empty boolean_yankdup boolean_frominteger print_integer exec_stackdepth exec_dup_times (integer_shove integer_max)) (boolean_empty integer_dec integer_gt integer_add))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 42

step: 1000
program: (integer_flush in1 integer_dup exec_k () () exec_noop exec_noop in4 exec_k (in3 in2 exec_eq exec_eq boolean_dup_times boolean_rot integer_swap exec_dup (exec_dup_times () integer_min boolean_swap in1 boolean_invert_first_then_and) boolean_stackdepth exec_empty boolean_yankdup boolean_frominteger print_integer exec_stackdepth exec_dup_times (integer_shove integer_max)) (boolean_empty integer_dec integer_gt integer_add))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 42

step: 1500
program: (integer_flush in1 integer_dup exec_k () () exec_noop exec_noop in4 exec_k (in3 in2 exec_eq exec_eq boolean_dup_times boolean_rot integer_swap exec_dup (exec_dup_times () integer_min boolean_swap in1 boolean_invert_first_then_and) boolean_stackdepth exec_empty boolean_yankdup boolean_frominteger print_integer exec_stackdepth exec_dup_times (integer_shove integer_max)) (boolean_empty integer_dec integer_gt integer_add))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 42

step: 2000
program: (integer_flush in1 integer_dup exec_k () () exec_noop exec_noop in4 exec_k (in3 in2 exec_eq exec_eq boolean_dup_times boolean_rot integer_swap exec_dup (exec_dup_times () integer_min boolean_swap in1 boolean_invert_first_then_and) boolean_stackdepth exec_empty boolean_yankdup boolean_frominteger print_integer exec_stackdepth exec_dup_times (integer_shove integer_max)) (boolean_empty integer_dec integer_gt integer_add))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 42

step: 2500
program: (integer_flush in1 integer_dup exec_k () () exec_noop exec_noop in4 exec_k (in3 in2 exec_eq exec_eq boolean_dup_times boolean_rot integer_swap exec_dup (exec_dup_times () integer_min boolean_swap in1 boolean_invert_first_then_and) boolean_stackdepth exec_empty boolean_yankdup boolean_frominteger print_integer exec_stackdepth exec_dup_times (integer_shove integer_max)) (boolean_empty integer_dec integer_gt integer_add))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 42

step: 3000
program: (integer_flush in1 integer_dup exec_k () () exec_noop exec_noop in4 exec_k (in3 in2 exec_eq exec_eq boolean_dup_times boolean_rot integer_swap exec_dup (exec_dup_times () integer_min boolean_swap in1 boolean_invert_first_then_and) boolean_stackdepth exec_empty boolean_yankdup boolean_frominteger print_integer exec_stackdepth exec_dup_times (integer_shove integer_max)) (boolean_empty integer_dec integer_gt integer_add))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 42

step: 3500
program: (integer_flush in1 integer_dup exec_k () () exec_noop exec_noop in4 exec_k (in3 in2 exec_eq exec_eq boolean_dup_times boolean_rot integer_swap exec_dup (exec_dup_times () integer_min boolean_swap in1 boolean_invert_first_then_and) boolean_stackdepth exec_empty boolean_yankdup boolean_frominteger print_integer exec_stackdepth exec_dup_times (integer_shove integer_max)) (boolean_empty integer_dec integer_gt integer_add))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 42

step: 4000
program: (integer_flush in1 integer_dup exec_k () () exec_noop exec_noop in4 exec_k (in3 in2 exec_eq exec_eq boolean_dup_times boolean_rot integer_swap exec_dup (exec_dup_times () integer_min boolean_swap in1 boolean_invert_first_then_and) boolean_stackdepth exec_empty boolean_yankdup boolean_frominteger print_integer exec_stackdepth exec_dup_times (integer_shove integer_max)) (boolean_empty integer_dec integer_gt integer_add))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 42

step: 4500
program: (integer_flush in1 integer_dup exec_k () () exec_noop exec_noop in4 exec_k (in3 in2 exec_eq exec_eq boolean_dup_times boolean_rot integer_swap exec_dup (exec_dup_times () integer_min boolean_swap in1 boolean_invert_first_then_and) boolean_stackdepth exec_empty boolean_yankdup boolean_frominteger print_integer exec_stackdepth exec_dup_times (integer_shove integer_max)) (boolean_empty integer_dec integer_gt integer_add))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 42

step: 5000
program: (integer_flush in1 integer_dup exec_k () () exec_noop exec_noop in4 exec_k (in3 in2 exec_eq exec_eq boolean_dup_times boolean_rot integer_swap exec_dup (exec_dup_times () integer_min boolean_swap in1 boolean_invert_first_then_and) boolean_stackdepth exec_empty boolean_yankdup boolean_frominteger print_integer exec_stackdepth exec_dup_times (integer_shove integer_max)) (boolean_empty integer_dec integer_gt integer_add))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 42

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 245
Test mean error for best: 0.24500
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 1
Test Case    3 | Error: 1
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 1
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 1
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 1
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 1
Test Case   51 | Error: 1
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 1
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 1
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 1
Test Case   63 | Error: 0
Test Case   64 | Error: 1
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 1
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 1
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 1
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 1
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 1
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 1
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 1
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 1
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 1
Test Case  159 | Error: 0
Test Case  160 | Error: 1
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 1
Test Case  170 | Error: 1
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 1
Test Case  186 | Error: 0
Test Case  187 | Error: 1
Test Case  188 | Error: 0
Test Case  189 | Error: 1
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 1
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 1
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 1
Test Case  211 | Error: 1
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 1
Test Case  216 | Error: 1
Test Case  217 | Error: 0
Test Case  218 | Error: 1
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 1
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 1
Test Case  231 | Error: 0
Test Case  232 | Error: 1
Test Case  233 | Error: 1
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 1
Test Case  241 | Error: 1
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 1
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 1
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 1
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 1
Test Case  269 | Error: 0
Test Case  270 | Error: 1
Test Case  271 | Error: 0
Test Case  272 | Error: 1
Test Case  273 | Error: 0
Test Case  274 | Error: 1
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 1
Test Case  280 | Error: 1
Test Case  281 | Error: 0
Test Case  282 | Error: 1
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 1
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 1
Test Case  292 | Error: 1
Test Case  293 | Error: 1
Test Case  294 | Error: 1
Test Case  295 | Error: 0
Test Case  296 | Error: 1
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 1
Test Case  305 | Error: 1
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 1
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 1
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 1
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 1
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 1
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 1
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 1
Test Case  345 | Error: 0
Test Case  346 | Error: 1
Test Case  347 | Error: 1
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 1
Test Case  352 | Error: 1
Test Case  353 | Error: 1
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 1
Test Case  357 | Error: 1
Test Case  358 | Error: 1
Test Case  359 | Error: 1
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 1
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 1
Test Case  367 | Error: 1
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 1
Test Case  372 | Error: 1
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 1
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 1
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 1
Test Case  383 | Error: 1
Test Case  384 | Error: 1
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 1
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 1
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 1
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 1
Test Case  404 | Error: 0
Test Case  405 | Error: 1
Test Case  406 | Error: 0
Test Case  407 | Error: 1
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 1
Test Case  419 | Error: 0
Test Case  420 | Error: 1
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 1
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 1
Test Case  436 | Error: 0
Test Case  437 | Error: 1
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 1
Test Case  450 | Error: 1
Test Case  451 | Error: 1
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 1
Test Case  456 | Error: 0
Test Case  457 | Error: 1
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 1
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 1
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 1
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 1
Test Case  482 | Error: 0
Test Case  483 | Error: 1
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 1
Test Case  489 | Error: 0
Test Case  490 | Error: 1
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 1
Test Case  495 | Error: 1
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 1
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 1
Test Case  507 | Error: 0
Test Case  508 | Error: 1
Test Case  509 | Error: 0
Test Case  510 | Error: 1
Test Case  511 | Error: 1
Test Case  512 | Error: 1
Test Case  513 | Error: 1
Test Case  514 | Error: 1
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 1
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 1
Test Case  530 | Error: 0
Test Case  531 | Error: 1
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 1
Test Case  536 | Error: 1
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 1
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 1
Test Case  545 | Error: 1
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 1
Test Case  549 | Error: 1
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 1
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 1
Test Case  561 | Error: 1
Test Case  562 | Error: 0
Test Case  563 | Error: 1
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 1
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 1
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 1
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 1
Test Case  583 | Error: 0
Test Case  584 | Error: 1
Test Case  585 | Error: 1
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 1
Test Case  593 | Error: 0
Test Case  594 | Error: 1
Test Case  595 | Error: 1
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 1
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 1
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 1
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 1
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 1
Test Case  632 | Error: 1
Test Case  633 | Error: 0
Test Case  634 | Error: 1
Test Case  635 | Error: 1
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 1
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 1
Test Case  651 | Error: 0
Test Case  652 | Error: 1
Test Case  653 | Error: 0
Test Case  654 | Error: 1
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 1
Test Case  661 | Error: 1
Test Case  662 | Error: 1
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 1
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 1
Test Case  670 | Error: 1
Test Case  671 | Error: 0
Test Case  672 | Error: 1
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 1
Test Case  679 | Error: 1
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 1
Test Case  684 | Error: 1
Test Case  685 | Error: 1
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 1
Test Case  691 | Error: 1
Test Case  692 | Error: 1
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 1
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 1
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 1
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 1
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 1
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 1
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 1
Test Case  729 | Error: 0
Test Case  730 | Error: 1
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 1
Test Case  736 | Error: 0
Test Case  737 | Error: 1
Test Case  738 | Error: 1
Test Case  739 | Error: 1
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 1
Test Case  744 | Error: 0
Test Case  745 | Error: 1
Test Case  746 | Error: 1
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 1
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 1
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 1
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 1
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 1
Test Case  775 | Error: 0
Test Case  776 | Error: 1
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 1
Test Case  783 | Error: 0
Test Case  784 | Error: 1
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 1
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 1
Test Case  793 | Error: 1
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 1
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 1
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 1
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 1
Test Case  819 | Error: 1
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 1
Test Case  823 | Error: 1
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 1
Test Case  833 | Error: 1
Test Case  834 | Error: 0
Test Case  835 | Error: 1
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 1
Test Case  840 | Error: 1
Test Case  841 | Error: 1
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 1
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 1
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 1
Test Case  853 | Error: 0
Test Case  854 | Error: 1
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 1
Test Case  858 | Error: 1
Test Case  859 | Error: 1
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 1
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 1
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 1
Test Case  880 | Error: 1
Test Case  881 | Error: 0
Test Case  882 | Error: 1
Test Case  883 | Error: 0
Test Case  884 | Error: 1
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 1
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 1
Test Case  896 | Error: 1
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 1
Test Case  905 | Error: 0
Test Case  906 | Error: 1
Test Case  907 | Error: 0
Test Case  908 | Error: 1
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 1
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 1
Test Case  921 | Error: 1
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 1
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 1
Test Case  930 | Error: 0
Test Case  931 | Error: 1
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 1
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 1
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 1
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 1
Test Case  949 | Error: 1
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 1
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 1
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 1
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 1
Test Case  973 | Error: 0
Test Case  974 | Error: 1
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 1
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 1
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 1
Test Case  993 | Error: 0
Test Case  994 | Error: 1
Test Case  995 | Error: 1
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output:                    
Correct output: 38                  | Program output: 38                 
Correct output: -98                 | Program output: -98                
Correct output: -27                 | Program output: -27                
Correct output: -42                 | Program output: -42                
Correct output: -91                 | Program output: -91                
Correct output: -82                 | Program output: -82                
Correct output: -94                 | Program output: -94                
Correct output: -26                 | Program output: -26                
Correct output: -100                | Program output: -100               
Correct output: -14                 | Program output: -14                
Correct output: -68                 | Program output: -68                
Correct output: -54                 | Program output: -54                
Correct output: 23                  | Program output: 23                 
Correct output: 15                  | Program output: 15                 
Correct output: -71                 | Program output: -71                
Correct output: 56                  | Program output:                    
Correct output: 3                   | Program output: 3                  
Correct output: 3                   | Program output: 3                  
Correct output: 13                  | Program output: 13                 
Correct output: 31                  | Program output: 31                 
Correct output: 6                   | Program output: 6                  
Correct output: 8                   | Program output: 8                  
Correct output: 22                  | Program output: 22                 
Correct output: 16                  | Program output: 16                 
Correct output: 10                  | Program output: 10                 
Correct output: 6                   | Program output: 73                 
Correct output: 3                   | Program output: 25                 
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 1                  
Correct output: 23                  | Program output: 23                 
Correct output: 1                   | Program output: 1                  
Correct output: 17                  | Program output: 17                 
Correct output: 4                   | Program output:                    
Correct output: 32                  | Program output: 32                 
Correct output: 39                  | Program output: 39                 
Correct output: -100                | Program output: -100               
Correct output: -65                 | Program output: -65                
Correct output: 1                   | Program output: 1                  
Correct output: -70                 | Program output: -70                
Correct output: -30                 | Program output: -30                
Correct output: 30                  | Program output: 30                 
Correct output: -69                 | Program output: -69                
Correct output: -42                 | Program output: -42                
Correct output: -3                  | Program output: -3                 
Correct output: 8                   | Program output: 79                 
Correct output: -78                 | Program output: -67                
Correct output: -71                 | Program output: -71                
Correct output: -75                 | Program output: -75                
Correct output: -62                 | Program output: -50                
Correct output: -66                 | Program output: -66                
Correct output: -13                 | Program output: -13                
Correct output: -74                 | Program output: -55                
Correct output: -81                 | Program output: -81                
Correct output: -70                 | Program output: -70                
Correct output: -81                 | Program output: -81                
Correct output: -28                 | Program output: -28                
Correct output: -52                 | Program output: -52                
Correct output: -63                 | Program output: -63                
Correct output: -49                 | Program output: -49                
Correct output: -70                 | Program output: -70                
Correct output: -76                 | Program output: -76                
Correct output: 37                  | Program output: 51                 
Correct output: -96                 | Program output: -96                
Correct output: -88                 | Program output: -88                
Correct output: 9                   | Program output: 9                  
Correct output: 1                   | Program output: 1                  
Correct output: -87                 | Program output: -61                
Correct output: -93                 | Program output: -93                
Correct output: 1                   | Program output: 1                  
Correct output: -84                 | Program output: -58                
Correct output: -77                 | Program output: -77                
Correct output: -60                 | Program output: -60                
Correct output: 23                  | Program output: 23                 
Correct output: 22                  | Program output:                    
Correct output: -93                 | Program output: -93                
Correct output: -46                 | Program output: -46                
Correct output: -94                 | Program output: -94                
Correct output: -38                 | Program output: -16                
Correct output: -48                 | Program output: -48                
Correct output: -75                 | Program output: -60                
Correct output: -43                 | Program output: -43                
Correct output: -13                 | Program output: -13                
Correct output: -75                 | Program output: -43                
Correct output: -64                 | Program output: -64                
Correct output: -11                 | Program output: -11                
Correct output: -99                 | Program output: -99                
Correct output: -35                 | Program output: -35                
Correct output: -67                 | Program output: -49                
Correct output: -84                 | Program output: -84                
Correct output: -100                | Program output: -100               
Correct output: -88                 | Program output: -37                
Correct output: -81                 | Program output: -52                
Correct output: -9                  | Program output: -9                 
Correct output: -100                | Program output: -100               
Correct output: -83                 | Program output: -83                
;;******************************
