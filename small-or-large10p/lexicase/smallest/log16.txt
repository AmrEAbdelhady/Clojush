Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 3000 :genetic-operator-probabilities {:uniform-addition-and-deletion,1.0} :uniform-addition-and-deletion-rate 0.09
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:uniform-addition-and-deletion 1.0}
max-error = 1
max-generations = 3000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-33 -35 -33 -33] -35] [[-25 -25 47 -25] -25] [[-16 -16 84 -16] -16] [[-1 -48 -1 -1] -48] [[-64 -49 -64 -64] -64] [[-88 -75 -75 -75] -88] [[-9 12 -9 -9] -9] [[24 -22 24 24] -22] [[-89 -89 -29 -89] -89] [[48 -3 -3 -3] -3] [(92 92 92 92) 92] [(90 90 90 90) 90] [(-63 -63 -63 -63) -63] [(83 83 83 83) 83] [(-93 -93 -93 -93) -93] [(31 9 57 51) 9] [(20 46 93 8) 8] [(61 23 6 36) 6] [(69 0 4 57) 0] [(66 90 78 9) 9] [(33 50 89 43) 33] [(74 11 24 56) 11] [(11 96 94 81) 11] [(50 97 43 29) 29] [(27 2 1 53) 1] [(45 71 56 86) 45] [(67 40 89 79) 40] [(71 87 60 32) 32] [(10 41 60 32) 10] [(31 6 38 32) 6] [(38 93 59 55) 38] [(4 63 92 43) 4] [(86 17 3 88) 3] [(12 20 50 25) 12] [(19 0 55 94) 0] [(67 -23 57 76) -23] [(-20 -68 86 89) -68] [(-98 80 16 -35) -98] [(7 -40 -32 -63) -63] [(-43 -42 17 -90) -90] [(13 60 90 75) 13] [(71 47 -54 -63) -63] [(34 72 35 -66) -66] [(15 -44 -80 -33) -80] [(10 -98 69 -63) -98] [(-41 -50 -45 -66) -66] [(3 -29 -91 -57) -91] [(39 -89 39 18) -89] [(-3 -64 -99 -43) -99] [(21 21 16 15) 15] [(-48 -62 -59 -90) -90] [(-11 -54 -82 88) -82] [(18 55 13 -29) -29] [(-93 -97 -71 -29) -97] [(81 -9 82 14) -9] [(-45 -51 15 -19) -51] [(-21 -59 -3 65) -59] [(32 -49 21 56) -49] [(-5 -40 -26 77) -40] [(-1 -86 -17 -59) -86] [(8 43 -5 -69) -69] [(85 -9 -14 47) -14] [(-62 50 19 96) -62] [(-74 61 -55 -72) -74] [(-20 26 -43 46) -43] [(-89 -48 16 43) -89] [(36 27 74 22) 22] [(-44 -16 -27 -34) -44] [(-98 -19 -82 -75) -98] [(-23 43 -86 26) -86] [(21 59 -42 65) -42] [(-24 27 92 -66) -66] [(23 -17 -94 8) -94] [(-84 -48 78 -75) -84] [(98 -85 73 99) -85] [(19 -53 -89 79) -89] [(15 55 97 54) 15] [(94 -76 -93 7) -93] [(-73 89 42 -70) -73] [(23 -50 23 -73) -73] [(60 100 -16 -99) -99] [(-29 -89 -55 -2) -89] [(-84 -45 -70 -49) -84] [(37 -17 -4 82) -17] [(78 50 80 37) 37] [(74 85 6 -53) -53] [(-68 66 -20 -33) -68] [(66 -58 -36 73) -58] [(14 47 25 16) 14] [(-77 77 -61 -44) -77] [(81 -28 -33 43) -33] [(32 -96 -59 -51) -96] [(7 -12 43 -33) -33] [(8 -90 -77 -50) -90] [(-46 86 -24 8) -46])
uniform-addition-and-deletion-rate = 0.09
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[-33 -35 -33 -33] -35]
Train Case:   6 | Input/Output: [[-25 -25 47 -25] -25]
Train Case:   7 | Input/Output: [[-16 -16 84 -16] -16]
Train Case:   8 | Input/Output: [[-1 -48 -1 -1] -48]
Train Case:   9 | Input/Output: [[-64 -49 -64 -64] -64]
Train Case:  10 | Input/Output: [[-88 -75 -75 -75] -88]
Train Case:  11 | Input/Output: [[-9 12 -9 -9] -9]
Train Case:  12 | Input/Output: [[24 -22 24 24] -22]
Train Case:  13 | Input/Output: [[-89 -89 -29 -89] -89]
Train Case:  14 | Input/Output: [[48 -3 -3 -3] -3]
Train Case:  15 | Input/Output: [(92 92 92 92) 92]
Train Case:  16 | Input/Output: [(90 90 90 90) 90]
Train Case:  17 | Input/Output: [(-63 -63 -63 -63) -63]
Train Case:  18 | Input/Output: [(83 83 83 83) 83]
Train Case:  19 | Input/Output: [(-93 -93 -93 -93) -93]
Train Case:  20 | Input/Output: [(31 9 57 51) 9]
Train Case:  21 | Input/Output: [(20 46 93 8) 8]
Train Case:  22 | Input/Output: [(61 23 6 36) 6]
Train Case:  23 | Input/Output: [(69 0 4 57) 0]
Train Case:  24 | Input/Output: [(66 90 78 9) 9]
Train Case:  25 | Input/Output: [(33 50 89 43) 33]
Train Case:  26 | Input/Output: [(74 11 24 56) 11]
Train Case:  27 | Input/Output: [(11 96 94 81) 11]
Train Case:  28 | Input/Output: [(50 97 43 29) 29]
Train Case:  29 | Input/Output: [(27 2 1 53) 1]
Train Case:  30 | Input/Output: [(45 71 56 86) 45]
Train Case:  31 | Input/Output: [(67 40 89 79) 40]
Train Case:  32 | Input/Output: [(71 87 60 32) 32]
Train Case:  33 | Input/Output: [(10 41 60 32) 10]
Train Case:  34 | Input/Output: [(31 6 38 32) 6]
Train Case:  35 | Input/Output: [(38 93 59 55) 38]
Train Case:  36 | Input/Output: [(4 63 92 43) 4]
Train Case:  37 | Input/Output: [(86 17 3 88) 3]
Train Case:  38 | Input/Output: [(12 20 50 25) 12]
Train Case:  39 | Input/Output: [(19 0 55 94) 0]
Train Case:  40 | Input/Output: [(67 -23 57 76) -23]
Train Case:  41 | Input/Output: [(-20 -68 86 89) -68]
Train Case:  42 | Input/Output: [(-98 80 16 -35) -98]
Train Case:  43 | Input/Output: [(7 -40 -32 -63) -63]
Train Case:  44 | Input/Output: [(-43 -42 17 -90) -90]
Train Case:  45 | Input/Output: [(13 60 90 75) 13]
Train Case:  46 | Input/Output: [(71 47 -54 -63) -63]
Train Case:  47 | Input/Output: [(34 72 35 -66) -66]
Train Case:  48 | Input/Output: [(15 -44 -80 -33) -80]
Train Case:  49 | Input/Output: [(10 -98 69 -63) -98]
Train Case:  50 | Input/Output: [(-41 -50 -45 -66) -66]
Train Case:  51 | Input/Output: [(3 -29 -91 -57) -91]
Train Case:  52 | Input/Output: [(39 -89 39 18) -89]
Train Case:  53 | Input/Output: [(-3 -64 -99 -43) -99]
Train Case:  54 | Input/Output: [(21 21 16 15) 15]
Train Case:  55 | Input/Output: [(-48 -62 -59 -90) -90]
Train Case:  56 | Input/Output: [(-11 -54 -82 88) -82]
Train Case:  57 | Input/Output: [(18 55 13 -29) -29]
Train Case:  58 | Input/Output: [(-93 -97 -71 -29) -97]
Train Case:  59 | Input/Output: [(81 -9 82 14) -9]
Train Case:  60 | Input/Output: [(-45 -51 15 -19) -51]
Train Case:  61 | Input/Output: [(-21 -59 -3 65) -59]
Train Case:  62 | Input/Output: [(32 -49 21 56) -49]
Train Case:  63 | Input/Output: [(-5 -40 -26 77) -40]
Train Case:  64 | Input/Output: [(-1 -86 -17 -59) -86]
Train Case:  65 | Input/Output: [(8 43 -5 -69) -69]
Train Case:  66 | Input/Output: [(85 -9 -14 47) -14]
Train Case:  67 | Input/Output: [(-62 50 19 96) -62]
Train Case:  68 | Input/Output: [(-74 61 -55 -72) -74]
Train Case:  69 | Input/Output: [(-20 26 -43 46) -43]
Train Case:  70 | Input/Output: [(-89 -48 16 43) -89]
Train Case:  71 | Input/Output: [(36 27 74 22) 22]
Train Case:  72 | Input/Output: [(-44 -16 -27 -34) -44]
Train Case:  73 | Input/Output: [(-98 -19 -82 -75) -98]
Train Case:  74 | Input/Output: [(-23 43 -86 26) -86]
Train Case:  75 | Input/Output: [(21 59 -42 65) -42]
Train Case:  76 | Input/Output: [(-24 27 92 -66) -66]
Train Case:  77 | Input/Output: [(23 -17 -94 8) -94]
Train Case:  78 | Input/Output: [(-84 -48 78 -75) -84]
Train Case:  79 | Input/Output: [(98 -85 73 99) -85]
Train Case:  80 | Input/Output: [(19 -53 -89 79) -89]
Train Case:  81 | Input/Output: [(15 55 97 54) 15]
Train Case:  82 | Input/Output: [(94 -76 -93 7) -93]
Train Case:  83 | Input/Output: [(-73 89 42 -70) -73]
Train Case:  84 | Input/Output: [(23 -50 23 -73) -73]
Train Case:  85 | Input/Output: [(60 100 -16 -99) -99]
Train Case:  86 | Input/Output: [(-29 -89 -55 -2) -89]
Train Case:  87 | Input/Output: [(-84 -45 -70 -49) -84]
Train Case:  88 | Input/Output: [(37 -17 -4 82) -17]
Train Case:  89 | Input/Output: [(78 50 80 37) 37]
Train Case:  90 | Input/Output: [(74 85 6 -53) -53]
Train Case:  91 | Input/Output: [(-68 66 -20 -33) -68]
Train Case:  92 | Input/Output: [(66 -58 -36 73) -58]
Train Case:  93 | Input/Output: [(14 47 25 16) 14]
Train Case:  94 | Input/Output: [(-77 77 -61 -44) -77]
Train Case:  95 | Input/Output: [(81 -28 -33 43) -33]
Train Case:  96 | Input/Output: [(32 -96 -59 -51) -96]
Train Case:  97 | Input/Output: [(7 -12 43 -33) -33]
Train Case:  98 | Input/Output: [(8 -90 -77 -50) -90]
Train Case:  99 | Input/Output: [(-46 86 -24 8) -46]
Test Case:   0 | Input/Output: [[-60 -60 77 -60] -60]
Test Case:   1 | Input/Output: [[-53 -53 -76 -53] -76]
Test Case:   2 | Input/Output: [[34 -76 -76 -76] -76]
Test Case:   3 | Input/Output: [[-32 -32 64 -32] -32]
Test Case:   4 | Input/Output: [[40 -4 -4 -4] -4]
Test Case:   5 | Input/Output: [[-2 -1 -2 -2] -2]
Test Case:   6 | Input/Output: [[53 53 53 -27] -27]
Test Case:   7 | Input/Output: [[-99 -99 -92 -99] -99]
Test Case:   8 | Input/Output: [[-99 -46 -99 -99] -99]
Test Case:   9 | Input/Output: [[-19 -98 -98 -98] -98]
Test Case:  10 | Input/Output: [[50 50 50 -83] -83]
Test Case:  11 | Input/Output: [[-62 -76 -62 -62] -76]
Test Case:  12 | Input/Output: [[-100 -100 88 -100] -100]
Test Case:  13 | Input/Output: [[-2 -97 -2 -2] -97]
Test Case:  14 | Input/Output: [[-32 63 -32 -32] -32]
Test Case:  15 | Input/Output: [[51 26 26 26] 26]
Test Case:  16 | Input/Output: [[17 -2 17 17] -2]
Test Case:  17 | Input/Output: [[86 86 -80 86] -80]
Test Case:  18 | Input/Output: [[-13 -13 -15 -13] -15]
Test Case:  19 | Input/Output: [[-17 -17 -17 3] -17]
Test Case:  20 | Input/Output: [[53 85 53 53] 53]
Test Case:  21 | Input/Output: [[-24 63 63 63] -24]
Test Case:  22 | Input/Output: [[-49 97 97 97] -49]
Test Case:  23 | Input/Output: [[-72 -72 -94 -72] -94]
Test Case:  24 | Input/Output: [[-3 76 -3 -3] -3]
Test Case:  25 | Input/Output: [[54 54 54 -11] -11]
Test Case:  26 | Input/Output: [[-19 46 -19 -19] -19]
Test Case:  27 | Input/Output: [[68 68 68 1] 1]
Test Case:  28 | Input/Output: [[64 -43 64 64] -43]
Test Case:  29 | Input/Output: [[-82 -66 -82 -82] -82]
Test Case:  30 | Input/Output: [[-68 -36 -36 -36] -68]
Test Case:  31 | Input/Output: [[-28 -28 -28 21] -28]
Test Case:  32 | Input/Output: [[53 53 84 53] 53]
Test Case:  33 | Input/Output: [[-65 -65 -43 -65] -65]
Test Case:  34 | Input/Output: [[20 40 40 40] 20]
Test Case:  35 | Input/Output: [[-49 17 17 17] -49]
Test Case:  36 | Input/Output: [[-18 7 -18 -18] -18]
Test Case:  37 | Input/Output: [[-32 -38 -32 -32] -38]
Test Case:  38 | Input/Output: [[-43 31 -43 -43] -43]
Test Case:  39 | Input/Output: [[-6 24 -6 -6] -6]
Test Case:  40 | Input/Output: [[0 0 -53 0] -53]
Test Case:  41 | Input/Output: [[83 83 83 100] 83]
Test Case:  42 | Input/Output: [[48 -29 48 48] -29]
Test Case:  43 | Input/Output: [[22 26 26 26] 22]
Test Case:  44 | Input/Output: [[40 40 6 40] 6]
Test Case:  45 | Input/Output: [[53 53 17 53] 17]
Test Case:  46 | Input/Output: [[67 -73 -73 -73] -73]
Test Case:  47 | Input/Output: [[37 37 -90 37] -90]
Test Case:  48 | Input/Output: [[49 -37 49 49] -37]
Test Case:  49 | Input/Output: [[23 95 23 23] 23]
Test Case:  50 | Input/Output: [[38 43 43 43] 38]
Test Case:  51 | Input/Output: [[-26 -50 -50 -50] -50]
Test Case:  52 | Input/Output: [[91 91 91 -2] -2]
Test Case:  53 | Input/Output: [[-5 -5 -5 24] -5]
Test Case:  54 | Input/Output: [[-85 -85 -85 -54] -85]
Test Case:  55 | Input/Output: [[-9 -9 -17 -9] -17]
Test Case:  56 | Input/Output: [[-69 -69 -69 13] -69]
Test Case:  57 | Input/Output: [[94 94 94 -82] -82]
Test Case:  58 | Input/Output: [[77 32 32 32] 32]
Test Case:  59 | Input/Output: [[-20 76 -20 -20] -20]
Test Case:  60 | Input/Output: [[23 23 -64 23] -64]
Test Case:  61 | Input/Output: [[-62 -62 60 -62] -62]
Test Case:  62 | Input/Output: [[-43 38 -43 -43] -43]
Test Case:  63 | Input/Output: [[88 39 39 39] 39]
Test Case:  64 | Input/Output: [[-47 -47 39 -47] -47]
Test Case:  65 | Input/Output: [[-2 -2 -58 -2] -58]
Test Case:  66 | Input/Output: [[-96 96 96 96] -96]
Test Case:  67 | Input/Output: [[93 50 93 93] 50]
Test Case:  68 | Input/Output: [[-35 -84 -84 -84] -84]
Test Case:  69 | Input/Output: [[-27 34 -27 -27] -27]
Test Case:  70 | Input/Output: [[48 48 76 48] 48]
Test Case:  71 | Input/Output: [[50 50 10 50] 10]
Test Case:  72 | Input/Output: [[-74 -74 -57 -74] -74]
Test Case:  73 | Input/Output: [[21 -5 21 21] -5]
Test Case:  74 | Input/Output: [[-83 -83 -31 -83] -83]
Test Case:  75 | Input/Output: [[-87 0 0 0] -87]
Test Case:  76 | Input/Output: [[84 51 84 84] 51]
Test Case:  77 | Input/Output: [[85 4 4 4] 4]
Test Case:  78 | Input/Output: [[98 67 67 67] 67]
Test Case:  79 | Input/Output: [[60 -12 60 60] -12]
Test Case:  80 | Input/Output: [[78 78 78 -56] -56]
Test Case:  81 | Input/Output: [[21 72 21 21] 21]
Test Case:  82 | Input/Output: [[8 62 8 8] 8]
Test Case:  83 | Input/Output: [[49 20 20 20] 20]
Test Case:  84 | Input/Output: [[18 18 93 18] 18]
Test Case:  85 | Input/Output: [[-21 -21 -21 28] -21]
Test Case:  86 | Input/Output: [[56 56 56 56] 56]
Test Case:  87 | Input/Output: [[82 82 82 -41] -41]
Test Case:  88 | Input/Output: [[-63 20 -63 -63] -63]
Test Case:  89 | Input/Output: [[86 86 65 86] 65]
Test Case:  90 | Input/Output: [[-77 -77 7 -77] -77]
Test Case:  91 | Input/Output: [[-48 89 -48 -48] -48]
Test Case:  92 | Input/Output: [[-71 -71 -71 35] -71]
Test Case:  93 | Input/Output: [[-69 -69 -61 -69] -69]
Test Case:  94 | Input/Output: [[5 5 5 49] 5]
Test Case:  95 | Input/Output: [[76 22 76 76] 22]
Test Case:  96 | Input/Output: [[21 -33 -33 -33] -33]
Test Case:  97 | Input/Output: [[1 1 83 1] 1]
Test Case:  98 | Input/Output: [[100 -54 -54 -54] -54]
Test Case:  99 | Input/Output: [[-97 82 -97 -97] -97]
Test Case: 100 | Input/Output: [(-61 -61 -61 -61) -61]
Test Case: 101 | Input/Output: [(28 28 28 28) 28]
Test Case: 102 | Input/Output: [(7 7 7 7) 7]
Test Case: 103 | Input/Output: [(4 4 4 4) 4]
Test Case: 104 | Input/Output: [(9 9 9 9) 9]
Test Case: 105 | Input/Output: [(-89 -89 -89 -89) -89]
Test Case: 106 | Input/Output: [(4 4 4 4) 4]
Test Case: 107 | Input/Output: [(45 45 45 45) 45]
Test Case: 108 | Input/Output: [(-80 -80 -80 -80) -80]
Test Case: 109 | Input/Output: [(-78 -78 -78 -78) -78]
Test Case: 110 | Input/Output: [(-82 -82 -82 -82) -82]
Test Case: 111 | Input/Output: [(52 52 52 52) 52]
Test Case: 112 | Input/Output: [(-1 -1 -1 -1) -1]
Test Case: 113 | Input/Output: [(-17 -17 -17 -17) -17]
Test Case: 114 | Input/Output: [(-67 -67 -67 -67) -67]
Test Case: 115 | Input/Output: [(70 70 70 70) 70]
Test Case: 116 | Input/Output: [(-34 -34 -34 -34) -34]
Test Case: 117 | Input/Output: [(-68 -68 -68 -68) -68]
Test Case: 118 | Input/Output: [(-50 -50 -50 -50) -50]
Test Case: 119 | Input/Output: [(56 56 56 56) 56]
Test Case: 120 | Input/Output: [(-17 -17 -17 -17) -17]
Test Case: 121 | Input/Output: [(-54 -54 -54 -54) -54]
Test Case: 122 | Input/Output: [(77 77 77 77) 77]
Test Case: 123 | Input/Output: [(86 86 86 86) 86]
Test Case: 124 | Input/Output: [(-98 -98 -98 -98) -98]
Test Case: 125 | Input/Output: [(-63 -63 -63 -63) -63]
Test Case: 126 | Input/Output: [(-24 -24 -24 -24) -24]
Test Case: 127 | Input/Output: [(67 67 67 67) 67]
Test Case: 128 | Input/Output: [(52 52 52 52) 52]
Test Case: 129 | Input/Output: [(36 36 36 36) 36]
Test Case: 130 | Input/Output: [(-80 -80 -80 -80) -80]
Test Case: 131 | Input/Output: [(17 17 17 17) 17]
Test Case: 132 | Input/Output: [(-54 -54 -54 -54) -54]
Test Case: 133 | Input/Output: [(84 84 84 84) 84]
Test Case: 134 | Input/Output: [(47 47 47 47) 47]
Test Case: 135 | Input/Output: [(-50 -50 -50 -50) -50]
Test Case: 136 | Input/Output: [(-29 -29 -29 -29) -29]
Test Case: 137 | Input/Output: [(89 89 89 89) 89]
Test Case: 138 | Input/Output: [(-33 -33 -33 -33) -33]
Test Case: 139 | Input/Output: [(-67 -67 -67 -67) -67]
Test Case: 140 | Input/Output: [(-13 -13 -13 -13) -13]
Test Case: 141 | Input/Output: [(-87 -87 -87 -87) -87]
Test Case: 142 | Input/Output: [(-61 -61 -61 -61) -61]
Test Case: 143 | Input/Output: [(-51 -51 -51 -51) -51]
Test Case: 144 | Input/Output: [(86 86 86 86) 86]
Test Case: 145 | Input/Output: [(24 24 24 24) 24]
Test Case: 146 | Input/Output: [(-23 -23 -23 -23) -23]
Test Case: 147 | Input/Output: [(35 35 35 35) 35]
Test Case: 148 | Input/Output: [(-45 -45 -45 -45) -45]
Test Case: 149 | Input/Output: [(29 29 29 29) 29]
Test Case: 150 | Input/Output: [(93 93 93 93) 93]
Test Case: 151 | Input/Output: [(-50 -50 -50 -50) -50]
Test Case: 152 | Input/Output: [(6 6 6 6) 6]
Test Case: 153 | Input/Output: [(-5 -5 -5 -5) -5]
Test Case: 154 | Input/Output: [(93 93 93 93) 93]
Test Case: 155 | Input/Output: [(8 8 8 8) 8]
Test Case: 156 | Input/Output: [(-48 -48 -48 -48) -48]
Test Case: 157 | Input/Output: [(-100 -100 -100 -100) -100]
Test Case: 158 | Input/Output: [(-90 -90 -90 -90) -90]
Test Case: 159 | Input/Output: [(-59 -59 -59 -59) -59]
Test Case: 160 | Input/Output: [(72 72 72 72) 72]
Test Case: 161 | Input/Output: [(63 63 63 63) 63]
Test Case: 162 | Input/Output: [(89 89 89 89) 89]
Test Case: 163 | Input/Output: [(49 49 49 49) 49]
Test Case: 164 | Input/Output: [(38 38 38 38) 38]
Test Case: 165 | Input/Output: [(73 73 73 73) 73]
Test Case: 166 | Input/Output: [(-22 -22 -22 -22) -22]
Test Case: 167 | Input/Output: [(12 12 12 12) 12]
Test Case: 168 | Input/Output: [(-77 -77 -77 -77) -77]
Test Case: 169 | Input/Output: [(-96 -96 -96 -96) -96]
Test Case: 170 | Input/Output: [(-51 -51 -51 -51) -51]
Test Case: 171 | Input/Output: [(3 3 3 3) 3]
Test Case: 172 | Input/Output: [(-86 -86 -86 -86) -86]
Test Case: 173 | Input/Output: [(46 46 46 46) 46]
Test Case: 174 | Input/Output: [(-18 -18 -18 -18) -18]
Test Case: 175 | Input/Output: [(15 15 15 15) 15]
Test Case: 176 | Input/Output: [(94 94 94 94) 94]
Test Case: 177 | Input/Output: [(-30 -30 -30 -30) -30]
Test Case: 178 | Input/Output: [(57 57 57 57) 57]
Test Case: 179 | Input/Output: [(-10 -10 -10 -10) -10]
Test Case: 180 | Input/Output: [(-46 -46 -46 -46) -46]
Test Case: 181 | Input/Output: [(0 0 0 0) 0]
Test Case: 182 | Input/Output: [(32 32 32 32) 32]
Test Case: 183 | Input/Output: [(26 26 26 26) 26]
Test Case: 184 | Input/Output: [(-17 -17 -17 -17) -17]
Test Case: 185 | Input/Output: [(-31 -31 -31 -31) -31]
Test Case: 186 | Input/Output: [(-3 -3 -3 -3) -3]
Test Case: 187 | Input/Output: [(99 99 99 99) 99]
Test Case: 188 | Input/Output: [(-6 -6 -6 -6) -6]
Test Case: 189 | Input/Output: [(-75 -75 -75 -75) -75]
Test Case: 190 | Input/Output: [(-61 -61 -61 -61) -61]
Test Case: 191 | Input/Output: [(-1 -1 -1 -1) -1]
Test Case: 192 | Input/Output: [(-22 -22 -22 -22) -22]
Test Case: 193 | Input/Output: [(44 44 44 44) 44]
Test Case: 194 | Input/Output: [(-55 -55 -55 -55) -55]
Test Case: 195 | Input/Output: [(68 68 68 68) 68]
Test Case: 196 | Input/Output: [(-43 -43 -43 -43) -43]
Test Case: 197 | Input/Output: [(33 33 33 33) 33]
Test Case: 198 | Input/Output: [(32 32 32 32) 32]
Test Case: 199 | Input/Output: [(24 24 24 24) 24]
Test Case: 200 | Input/Output: [(82 67 99 70) 67]
Test Case: 201 | Input/Output: [(47 34 81 19) 19]
Test Case: 202 | Input/Output: [(95 99 31 50) 31]
Test Case: 203 | Input/Output: [(60 28 94 68) 28]
Test Case: 204 | Input/Output: [(98 63 95 6) 6]
Test Case: 205 | Input/Output: [(44 71 2 99) 2]
Test Case: 206 | Input/Output: [(25 53 16 25) 16]
Test Case: 207 | Input/Output: [(24 36 88 46) 24]
Test Case: 208 | Input/Output: [(96 62 1 52) 1]
Test Case: 209 | Input/Output: [(46 92 54 14) 14]
Test Case: 210 | Input/Output: [(1 97 59 1) 1]
Test Case: 211 | Input/Output: [(93 93 53 33) 33]
Test Case: 212 | Input/Output: [(84 45 78 36) 36]
Test Case: 213 | Input/Output: [(95 80 35 92) 35]
Test Case: 214 | Input/Output: [(37 92 5 99) 5]
Test Case: 215 | Input/Output: [(92 3 2 29) 2]
Test Case: 216 | Input/Output: [(41 76 60 49) 41]
Test Case: 217 | Input/Output: [(32 75 47 93) 32]
Test Case: 218 | Input/Output: [(90 45 61 1) 1]
Test Case: 219 | Input/Output: [(19 85 56 90) 19]
Test Case: 220 | Input/Output: [(4 30 74 8) 4]
Test Case: 221 | Input/Output: [(69 94 10 28) 10]
Test Case: 222 | Input/Output: [(77 9 12 19) 9]
Test Case: 223 | Input/Output: [(20 75 44 86) 20]
Test Case: 224 | Input/Output: [(58 77 10 49) 10]
Test Case: 225 | Input/Output: [(13 66 3 87) 3]
Test Case: 226 | Input/Output: [(28 32 24 57) 24]
Test Case: 227 | Input/Output: [(70 25 50 84) 25]
Test Case: 228 | Input/Output: [(87 6 100 61) 6]
Test Case: 229 | Input/Output: [(18 78 96 53) 18]
Test Case: 230 | Input/Output: [(63 0 47 67) 0]
Test Case: 231 | Input/Output: [(87 60 10 65) 10]
Test Case: 232 | Input/Output: [(22 80 49 55) 22]
Test Case: 233 | Input/Output: [(21 66 72 88) 21]
Test Case: 234 | Input/Output: [(89 65 72 40) 40]
Test Case: 235 | Input/Output: [(14 68 82 99) 14]
Test Case: 236 | Input/Output: [(67 22 41 68) 22]
Test Case: 237 | Input/Output: [(4 64 1 11) 1]
Test Case: 238 | Input/Output: [(54 32 96 84) 32]
Test Case: 239 | Input/Output: [(19 67 3 33) 3]
Test Case: 240 | Input/Output: [(3 74 83 4) 3]
Test Case: 241 | Input/Output: [(23 24 33 38) 23]
Test Case: 242 | Input/Output: [(46 55 74 33) 33]
Test Case: 243 | Input/Output: [(19 21 45 97) 19]
Test Case: 244 | Input/Output: [(95 24 20 3) 3]
Test Case: 245 | Input/Output: [(48 68 66 26) 26]
Test Case: 246 | Input/Output: [(92 82 21 65) 21]
Test Case: 247 | Input/Output: [(4 49 8 45) 4]
Test Case: 248 | Input/Output: [(20 13 48 82) 13]
Test Case: 249 | Input/Output: [(65 59 86 10) 10]
Test Case: 250 | Input/Output: [(7 53 86 30) 7]
Test Case: 251 | Input/Output: [(72 73 24 14) 14]
Test Case: 252 | Input/Output: [(45 100 19 95) 19]
Test Case: 253 | Input/Output: [(76 82 58 72) 58]
Test Case: 254 | Input/Output: [(38 71 55 57) 38]
Test Case: 255 | Input/Output: [(42 13 17 66) 13]
Test Case: 256 | Input/Output: [(82 37 43 57) 37]
Test Case: 257 | Input/Output: [(44 4 82 18) 4]
Test Case: 258 | Input/Output: [(76 48 83 79) 48]
Test Case: 259 | Input/Output: [(8 71 34 40) 8]
Test Case: 260 | Input/Output: [(85 82 68 29) 29]
Test Case: 261 | Input/Output: [(9 27 100 46) 9]
Test Case: 262 | Input/Output: [(43 80 99 58) 43]
Test Case: 263 | Input/Output: [(88 24 61 31) 24]
Test Case: 264 | Input/Output: [(6 70 19 88) 6]
Test Case: 265 | Input/Output: [(99 64 22 4) 4]
Test Case: 266 | Input/Output: [(13 38 28 41) 13]
Test Case: 267 | Input/Output: [(72 74 40 6) 6]
Test Case: 268 | Input/Output: [(31 34 45 31) 31]
Test Case: 269 | Input/Output: [(1 44 36 2) 1]
Test Case: 270 | Input/Output: [(15 17 1 73) 1]
Test Case: 271 | Input/Output: [(91 76 48 36) 36]
Test Case: 272 | Input/Output: [(61 80 91 5) 5]
Test Case: 273 | Input/Output: [(71 82 39 53) 39]
Test Case: 274 | Input/Output: [(15 4 39 18) 4]
Test Case: 275 | Input/Output: [(32 8 92 72) 8]
Test Case: 276 | Input/Output: [(16 13 70 84) 13]
Test Case: 277 | Input/Output: [(9 18 91 1) 1]
Test Case: 278 | Input/Output: [(41 63 43 32) 32]
Test Case: 279 | Input/Output: [(49 8 94 38) 8]
Test Case: 280 | Input/Output: [(76 52 21 83) 21]
Test Case: 281 | Input/Output: [(46 18 9 55) 9]
Test Case: 282 | Input/Output: [(67 83 4 39) 4]
Test Case: 283 | Input/Output: [(91 49 100 69) 49]
Test Case: 284 | Input/Output: [(40 0 48 10) 0]
Test Case: 285 | Input/Output: [(0 61 89 0) 0]
Test Case: 286 | Input/Output: [(66 66 42 68) 42]
Test Case: 287 | Input/Output: [(16 69 28 25) 16]
Test Case: 288 | Input/Output: [(22 94 9 52) 9]
Test Case: 289 | Input/Output: [(52 32 86 21) 21]
Test Case: 290 | Input/Output: [(65 50 97 51) 50]
Test Case: 291 | Input/Output: [(15 80 58 35) 15]
Test Case: 292 | Input/Output: [(77 0 88 54) 0]
Test Case: 293 | Input/Output: [(30 96 6 95) 6]
Test Case: 294 | Input/Output: [(38 39 57 59) 38]
Test Case: 295 | Input/Output: [(74 90 94 4) 4]
Test Case: 296 | Input/Output: [(23 45 90 61) 23]
Test Case: 297 | Input/Output: [(15 71 73 49) 15]
Test Case: 298 | Input/Output: [(70 27 83 88) 27]
Test Case: 299 | Input/Output: [(20 22 79 41) 20]
Test Case: 300 | Input/Output: [(9 12 44 30) 9]
Test Case: 301 | Input/Output: [(31 71 6 86) 6]
Test Case: 302 | Input/Output: [(11 67 44 70) 11]
Test Case: 303 | Input/Output: [(12 43 98 39) 12]
Test Case: 304 | Input/Output: [(70 18 59 90) 18]
Test Case: 305 | Input/Output: [(11 92 62 39) 11]
Test Case: 306 | Input/Output: [(5 53 72 77) 5]
Test Case: 307 | Input/Output: [(6 10 80 66) 6]
Test Case: 308 | Input/Output: [(56 39 44 20) 20]
Test Case: 309 | Input/Output: [(14 30 16 14) 14]
Test Case: 310 | Input/Output: [(21 74 11 86) 11]
Test Case: 311 | Input/Output: [(84 99 87 28) 28]
Test Case: 312 | Input/Output: [(35 60 65 91) 35]
Test Case: 313 | Input/Output: [(98 68 91 1) 1]
Test Case: 314 | Input/Output: [(90 44 59 17) 17]
Test Case: 315 | Input/Output: [(46 7 40 45) 7]
Test Case: 316 | Input/Output: [(13 24 100 24) 13]
Test Case: 317 | Input/Output: [(92 84 11 87) 11]
Test Case: 318 | Input/Output: [(2 100 81 85) 2]
Test Case: 319 | Input/Output: [(48 91 58 100) 48]
Test Case: 320 | Input/Output: [(8 65 83 56) 8]
Test Case: 321 | Input/Output: [(60 33 8 82) 8]
Test Case: 322 | Input/Output: [(56 79 26 24) 24]
Test Case: 323 | Input/Output: [(66 45 7 16) 7]
Test Case: 324 | Input/Output: [(89 49 88 7) 7]
Test Case: 325 | Input/Output: [(35 94 60 97) 35]
Test Case: 326 | Input/Output: [(30 48 36 53) 30]
Test Case: 327 | Input/Output: [(75 30 2 85) 2]
Test Case: 328 | Input/Output: [(6 93 23 79) 6]
Test Case: 329 | Input/Output: [(96 74 2 40) 2]
Test Case: 330 | Input/Output: [(67 86 72 86) 67]
Test Case: 331 | Input/Output: [(98 41 10 77) 10]
Test Case: 332 | Input/Output: [(26 84 29 25) 25]
Test Case: 333 | Input/Output: [(53 48 95 52) 48]
Test Case: 334 | Input/Output: [(84 75 11 34) 11]
Test Case: 335 | Input/Output: [(9 22 61 55) 9]
Test Case: 336 | Input/Output: [(72 26 63 47) 26]
Test Case: 337 | Input/Output: [(12 77 59 5) 5]
Test Case: 338 | Input/Output: [(6 13 71 41) 6]
Test Case: 339 | Input/Output: [(79 58 56 74) 56]
Test Case: 340 | Input/Output: [(82 34 88 11) 11]
Test Case: 341 | Input/Output: [(76 37 47 19) 19]
Test Case: 342 | Input/Output: [(84 98 67 45) 45]
Test Case: 343 | Input/Output: [(57 15 10 77) 10]
Test Case: 344 | Input/Output: [(29 64 88 25) 25]
Test Case: 345 | Input/Output: [(13 92 44 30) 13]
Test Case: 346 | Input/Output: [(10 36 95 95) 10]
Test Case: 347 | Input/Output: [(96 83 63 79) 63]
Test Case: 348 | Input/Output: [(0 8 77 23) 0]
Test Case: 349 | Input/Output: [(21 30 81 75) 21]
Test Case: 350 | Input/Output: [(87 96 9 11) 9]
Test Case: 351 | Input/Output: [(0 39 33 86) 0]
Test Case: 352 | Input/Output: [(45 9 99 32) 9]
Test Case: 353 | Input/Output: [(49 36 68 60) 36]
Test Case: 354 | Input/Output: [(67 85 10 57) 10]
Test Case: 355 | Input/Output: [(95 71 3 10) 3]
Test Case: 356 | Input/Output: [(97 7 50 15) 7]
Test Case: 357 | Input/Output: [(81 28 84 56) 28]
Test Case: 358 | Input/Output: [(64 68 89 99) 64]
Test Case: 359 | Input/Output: [(53 22 9 17) 9]
Test Case: 360 | Input/Output: [(65 22 5 25) 5]
Test Case: 361 | Input/Output: [(50 89 65 87) 50]
Test Case: 362 | Input/Output: [(12 71 41 25) 12]
Test Case: 363 | Input/Output: [(74 66 26 11) 11]
Test Case: 364 | Input/Output: [(62 86 65 6) 6]
Test Case: 365 | Input/Output: [(85 85 51 27) 27]
Test Case: 366 | Input/Output: [(32 92 97 63) 32]
Test Case: 367 | Input/Output: [(51 29 89 12) 12]
Test Case: 368 | Input/Output: [(96 1 93 44) 1]
Test Case: 369 | Input/Output: [(46 89 44 86) 44]
Test Case: 370 | Input/Output: [(19 18 69 12) 12]
Test Case: 371 | Input/Output: [(58 94 29 73) 29]
Test Case: 372 | Input/Output: [(10 22 10 62) 10]
Test Case: 373 | Input/Output: [(10 72 29 16) 10]
Test Case: 374 | Input/Output: [(91 70 80 16) 16]
Test Case: 375 | Input/Output: [(26 34 84 42) 26]
Test Case: 376 | Input/Output: [(64 79 44 5) 5]
Test Case: 377 | Input/Output: [(61 34 5 53) 5]
Test Case: 378 | Input/Output: [(69 21 24 12) 12]
Test Case: 379 | Input/Output: [(49 49 85 67) 49]
Test Case: 380 | Input/Output: [(6 8 89 51) 6]
Test Case: 381 | Input/Output: [(4 94 14 11) 4]
Test Case: 382 | Input/Output: [(97 24 12 63) 12]
Test Case: 383 | Input/Output: [(52 74 42 31) 31]
Test Case: 384 | Input/Output: [(30 48 78 0) 0]
Test Case: 385 | Input/Output: [(83 62 17 92) 17]
Test Case: 386 | Input/Output: [(82 46 61 80) 46]
Test Case: 387 | Input/Output: [(88 8 89 28) 8]
Test Case: 388 | Input/Output: [(76 100 74 14) 14]
Test Case: 389 | Input/Output: [(54 71 59 80) 54]
Test Case: 390 | Input/Output: [(82 46 27 10) 10]
Test Case: 391 | Input/Output: [(26 43 82 38) 26]
Test Case: 392 | Input/Output: [(33 29 73 87) 29]
Test Case: 393 | Input/Output: [(81 53 88 14) 14]
Test Case: 394 | Input/Output: [(43 4 8 42) 4]
Test Case: 395 | Input/Output: [(9 60 69 60) 9]
Test Case: 396 | Input/Output: [(59 52 29 43) 29]
Test Case: 397 | Input/Output: [(32 12 26 80) 12]
Test Case: 398 | Input/Output: [(55 32 83 89) 32]
Test Case: 399 | Input/Output: [(88 92 85 1) 1]
Test Case: 400 | Input/Output: [(34 -57 99 -17) -57]
Test Case: 401 | Input/Output: [(94 16 12 99) 12]
Test Case: 402 | Input/Output: [(-98 9 -74 -99) -99]
Test Case: 403 | Input/Output: [(90 100 -97 -55) -97]
Test Case: 404 | Input/Output: [(-17 -34 -25 30) -34]
Test Case: 405 | Input/Output: [(97 30 -91 -35) -91]
Test Case: 406 | Input/Output: [(43 24 -20 58) -20]
Test Case: 407 | Input/Output: [(32 -51 75 -77) -77]
Test Case: 408 | Input/Output: [(-81 -15 15 -86) -86]
Test Case: 409 | Input/Output: [(-62 93 58 83) -62]
Test Case: 410 | Input/Output: [(-61 -18 -67 30) -67]
Test Case: 411 | Input/Output: [(-42 40 71 10) -42]
Test Case: 412 | Input/Output: [(-30 -67 -36 67) -67]
Test Case: 413 | Input/Output: [(27 44 86 0) 0]
Test Case: 414 | Input/Output: [(58 -31 -73 16) -73]
Test Case: 415 | Input/Output: [(-71 -77 53 -38) -77]
Test Case: 416 | Input/Output: [(-32 -2 19 52) -32]
Test Case: 417 | Input/Output: [(-99 -53 95 -62) -99]
Test Case: 418 | Input/Output: [(-7 -22 1 11) -22]
Test Case: 419 | Input/Output: [(-81 -22 -29 65) -81]
Test Case: 420 | Input/Output: [(45 -59 -30 -94) -94]
Test Case: 421 | Input/Output: [(-44 -71 -88 -76) -88]
Test Case: 422 | Input/Output: [(72 29 17 6) 6]
Test Case: 423 | Input/Output: [(-30 -13 32 -53) -53]
Test Case: 424 | Input/Output: [(-8 -21 95 4) -21]
Test Case: 425 | Input/Output: [(76 29 62 15) 15]
Test Case: 426 | Input/Output: [(2 -59 -2 55) -59]
Test Case: 427 | Input/Output: [(55 -16 -33 -77) -77]
Test Case: 428 | Input/Output: [(40 63 68 -49) -49]
Test Case: 429 | Input/Output: [(-19 -14 -62 -82) -82]
Test Case: 430 | Input/Output: [(-75 6 5 43) -75]
Test Case: 431 | Input/Output: [(23 10 13 53) 10]
Test Case: 432 | Input/Output: [(57 -10 -20 16) -20]
Test Case: 433 | Input/Output: [(-22 31 75 82) -22]
Test Case: 434 | Input/Output: [(-70 9 -3 79) -70]
Test Case: 435 | Input/Output: [(-1 -28 -30 65) -30]
Test Case: 436 | Input/Output: [(-35 64 42 6) -35]
Test Case: 437 | Input/Output: [(-92 3 -69 11) -92]
Test Case: 438 | Input/Output: [(-28 32 -36 -96) -96]
Test Case: 439 | Input/Output: [(-76 -59 68 -55) -76]
Test Case: 440 | Input/Output: [(-28 -19 -68 -56) -68]
Test Case: 441 | Input/Output: [(-6 4 4 89) -6]
Test Case: 442 | Input/Output: [(-63 -92 -5 72) -92]
Test Case: 443 | Input/Output: [(14 -11 -61 95) -61]
Test Case: 444 | Input/Output: [(30 -40 47 -81) -81]
Test Case: 445 | Input/Output: [(88 97 -25 -29) -29]
Test Case: 446 | Input/Output: [(89 43 29 77) 29]
Test Case: 447 | Input/Output: [(64 -50 -4 -48) -50]
Test Case: 448 | Input/Output: [(-38 -40 -4 54) -40]
Test Case: 449 | Input/Output: [(-79 13 -84 67) -84]
Test Case: 450 | Input/Output: [(5 5 64 -10) -10]
Test Case: 451 | Input/Output: [(83 -16 -85 49) -85]
Test Case: 452 | Input/Output: [(-94 -47 12 99) -94]
Test Case: 453 | Input/Output: [(-56 61 -91 59) -91]
Test Case: 454 | Input/Output: [(13 -13 58 -6) -13]
Test Case: 455 | Input/Output: [(17 44 81 59) 17]
Test Case: 456 | Input/Output: [(56 71 31 -30) -30]
Test Case: 457 | Input/Output: [(-93 69 92 76) -93]
Test Case: 458 | Input/Output: [(-61 17 87 -75) -75]
Test Case: 459 | Input/Output: [(93 24 25 5) 5]
Test Case: 460 | Input/Output: [(6 37 -43 -81) -81]
Test Case: 461 | Input/Output: [(-65 58 -26 8) -65]
Test Case: 462 | Input/Output: [(15 64 12 6) 6]
Test Case: 463 | Input/Output: [(-82 47 59 35) -82]
Test Case: 464 | Input/Output: [(-83 83 -24 -16) -83]
Test Case: 465 | Input/Output: [(61 76 36 91) 36]
Test Case: 466 | Input/Output: [(-69 69 9 46) -69]
Test Case: 467 | Input/Output: [(-15 -57 74 89) -57]
Test Case: 468 | Input/Output: [(59 18 -71 98) -71]
Test Case: 469 | Input/Output: [(-61 -47 41 -55) -61]
Test Case: 470 | Input/Output: [(-7 -91 8 99) -91]
Test Case: 471 | Input/Output: [(-92 -53 87 58) -92]
Test Case: 472 | Input/Output: [(-43 57 42 28) -43]
Test Case: 473 | Input/Output: [(-44 -96 -14 -23) -96]
Test Case: 474 | Input/Output: [(54 -94 14 77) -94]
Test Case: 475 | Input/Output: [(-71 -87 79 73) -87]
Test Case: 476 | Input/Output: [(60 43 -51 -97) -97]
Test Case: 477 | Input/Output: [(15 -39 30 55) -39]
Test Case: 478 | Input/Output: [(69 42 79 -70) -70]
Test Case: 479 | Input/Output: [(7 58 -92 -10) -92]
Test Case: 480 | Input/Output: [(93 52 -84 27) -84]
Test Case: 481 | Input/Output: [(61 -51 70 58) -51]
Test Case: 482 | Input/Output: [(100 25 -59 -38) -59]
Test Case: 483 | Input/Output: [(89 -61 -57 37) -61]
Test Case: 484 | Input/Output: [(35 -97 -13 -92) -97]
Test Case: 485 | Input/Output: [(-33 13 27 -73) -73]
Test Case: 486 | Input/Output: [(22 93 8 56) 8]
Test Case: 487 | Input/Output: [(56 -69 10 -69) -69]
Test Case: 488 | Input/Output: [(16 -62 46 -2) -62]
Test Case: 489 | Input/Output: [(-83 10 -14 -20) -83]
Test Case: 490 | Input/Output: [(-49 57 0 -16) -49]
Test Case: 491 | Input/Output: [(54 -66 -76 -26) -76]
Test Case: 492 | Input/Output: [(-3 7 35 -93) -93]
Test Case: 493 | Input/Output: [(-62 31 79 81) -62]
Test Case: 494 | Input/Output: [(-73 48 -76 5) -76]
Test Case: 495 | Input/Output: [(79 -72 49 24) -72]
Test Case: 496 | Input/Output: [(-98 17 64 -47) -98]
Test Case: 497 | Input/Output: [(99 -75 -52 -88) -88]
Test Case: 498 | Input/Output: [(-44 49 22 -93) -93]
Test Case: 499 | Input/Output: [(55 -11 -39 -33) -39]
Test Case: 500 | Input/Output: [(90 24 35 88) 24]
Test Case: 501 | Input/Output: [(-33 -47 94 -35) -47]
Test Case: 502 | Input/Output: [(48 -50 54 -70) -70]
Test Case: 503 | Input/Output: [(84 68 -70 18) -70]
Test Case: 504 | Input/Output: [(-23 93 37 95) -23]
Test Case: 505 | Input/Output: [(42 21 -59 78) -59]
Test Case: 506 | Input/Output: [(6 -36 18 97) -36]
Test Case: 507 | Input/Output: [(97 56 18 -3) -3]
Test Case: 508 | Input/Output: [(-94 -2 3 12) -94]
Test Case: 509 | Input/Output: [(58 9 -93 -51) -93]
Test Case: 510 | Input/Output: [(4 -2 -61 -65) -65]
Test Case: 511 | Input/Output: [(-3 -44 -15 -29) -44]
Test Case: 512 | Input/Output: [(-87 -39 44 62) -87]
Test Case: 513 | Input/Output: [(-76 -85 -21 -46) -85]
Test Case: 514 | Input/Output: [(-79 9 68 16) -79]
Test Case: 515 | Input/Output: [(-85 -70 93 -93) -93]
Test Case: 516 | Input/Output: [(62 -1 -24 -16) -24]
Test Case: 517 | Input/Output: [(78 68 -89 -49) -89]
Test Case: 518 | Input/Output: [(-18 -20 -79 52) -79]
Test Case: 519 | Input/Output: [(44 20 18 -83) -83]
Test Case: 520 | Input/Output: [(-40 -54 97 -54) -54]
Test Case: 521 | Input/Output: [(-17 -60 -25 -82) -82]
Test Case: 522 | Input/Output: [(-94 20 36 24) -94]
Test Case: 523 | Input/Output: [(-74 -68 52 -3) -74]
Test Case: 524 | Input/Output: [(2 -78 61 -22) -78]
Test Case: 525 | Input/Output: [(12 -92 62 90) -92]
Test Case: 526 | Input/Output: [(29 -79 -55 24) -79]
Test Case: 527 | Input/Output: [(-2 -29 28 -48) -48]
Test Case: 528 | Input/Output: [(25 32 13 -49) -49]
Test Case: 529 | Input/Output: [(80 87 10 -59) -59]
Test Case: 530 | Input/Output: [(-92 -12 29 -12) -92]
Test Case: 531 | Input/Output: [(-64 33 76 76) -64]
Test Case: 532 | Input/Output: [(-5 8 -70 40) -70]
Test Case: 533 | Input/Output: [(-4 96 -82 35) -82]
Test Case: 534 | Input/Output: [(77 -4 67 -28) -28]
Test Case: 535 | Input/Output: [(-45 -31 70 72) -45]
Test Case: 536 | Input/Output: [(-22 7 -58 77) -58]
Test Case: 537 | Input/Output: [(86 81 -97 23) -97]
Test Case: 538 | Input/Output: [(9 7 -15 -44) -44]
Test Case: 539 | Input/Output: [(7 21 9 -79) -79]
Test Case: 540 | Input/Output: [(-22 -90 70 13) -90]
Test Case: 541 | Input/Output: [(26 -7 65 98) -7]
Test Case: 542 | Input/Output: [(-48 37 37 -76) -76]
Test Case: 543 | Input/Output: [(-28 44 -27 -82) -82]
Test Case: 544 | Input/Output: [(65 50 -24 -39) -39]
Test Case: 545 | Input/Output: [(82 -87 -50 39) -87]
Test Case: 546 | Input/Output: [(-75 96 96 -56) -75]
Test Case: 547 | Input/Output: [(29 17 62 -8) -8]
Test Case: 548 | Input/Output: [(85 100 -66 -17) -66]
Test Case: 549 | Input/Output: [(-95 90 57 -66) -95]
Test Case: 550 | Input/Output: [(-69 36 -22 -7) -69]
Test Case: 551 | Input/Output: [(-6 68 -73 86) -73]
Test Case: 552 | Input/Output: [(-45 38 -34 -58) -58]
Test Case: 553 | Input/Output: [(48 -72 90 60) -72]
Test Case: 554 | Input/Output: [(-79 -11 95 -45) -79]
Test Case: 555 | Input/Output: [(19 -99 -88 -36) -99]
Test Case: 556 | Input/Output: [(-98 45 87 -4) -98]
Test Case: 557 | Input/Output: [(-47 14 -70 8) -70]
Test Case: 558 | Input/Output: [(77 94 99 -36) -36]
Test Case: 559 | Input/Output: [(-58 -23 68 -50) -58]
Test Case: 560 | Input/Output: [(40 -44 -80 80) -80]
Test Case: 561 | Input/Output: [(-95 65 75 -51) -95]
Test Case: 562 | Input/Output: [(69 -55 -46 -66) -66]
Test Case: 563 | Input/Output: [(76 -77 -20 78) -77]
Test Case: 564 | Input/Output: [(65 61 14 87) 14]
Test Case: 565 | Input/Output: [(-35 77 19 99) -35]
Test Case: 566 | Input/Output: [(-24 43 -21 85) -24]
Test Case: 567 | Input/Output: [(75 7 -6 -76) -76]
Test Case: 568 | Input/Output: [(-87 15 -91 -48) -91]
Test Case: 569 | Input/Output: [(-34 44 -50 51) -50]
Test Case: 570 | Input/Output: [(-50 83 50 -97) -97]
Test Case: 571 | Input/Output: [(14 76 -72 19) -72]
Test Case: 572 | Input/Output: [(24 -77 49 -6) -77]
Test Case: 573 | Input/Output: [(68 35 -75 -20) -75]
Test Case: 574 | Input/Output: [(-31 24 -2 -10) -31]
Test Case: 575 | Input/Output: [(86 -19 69 -36) -36]
Test Case: 576 | Input/Output: [(-17 54 9 90) -17]
Test Case: 577 | Input/Output: [(-99 19 35 80) -99]
Test Case: 578 | Input/Output: [(-49 71 -69 -29) -69]
Test Case: 579 | Input/Output: [(-62 -16 24 -60) -62]
Test Case: 580 | Input/Output: [(30 20 -72 95) -72]
Test Case: 581 | Input/Output: [(-33 27 -94 -63) -94]
Test Case: 582 | Input/Output: [(-72 44 89 96) -72]
Test Case: 583 | Input/Output: [(1 70 15 1) 1]
Test Case: 584 | Input/Output: [(-45 81 -89 63) -89]
Test Case: 585 | Input/Output: [(-47 32 -38 86) -47]
Test Case: 586 | Input/Output: [(-100 66 33 100) -100]
Test Case: 587 | Input/Output: [(-6 -38 9 -60) -60]
Test Case: 588 | Input/Output: [(-17 89 78 -8) -17]
Test Case: 589 | Input/Output: [(54 39 -15 12) -15]
Test Case: 590 | Input/Output: [(59 16 -49 58) -49]
Test Case: 591 | Input/Output: [(-64 -63 28 -97) -97]
Test Case: 592 | Input/Output: [(97 79 -6 0) -6]
Test Case: 593 | Input/Output: [(-60 50 -46 -33) -60]
Test Case: 594 | Input/Output: [(99 -98 5 -36) -98]
Test Case: 595 | Input/Output: [(-57 -15 -43 66) -57]
Test Case: 596 | Input/Output: [(77 17 93 -57) -57]
Test Case: 597 | Input/Output: [(-26 -83 -16 30) -83]
Test Case: 598 | Input/Output: [(-33 48 -9 76) -33]
Test Case: 599 | Input/Output: [(61 -32 6 -62) -62]
Test Case: 600 | Input/Output: [(-93 31 -52 6) -93]
Test Case: 601 | Input/Output: [(25 68 -63 -76) -76]
Test Case: 602 | Input/Output: [(81 58 -86 7) -86]
Test Case: 603 | Input/Output: [(-66 61 -98 -26) -98]
Test Case: 604 | Input/Output: [(-98 65 -28 71) -98]
Test Case: 605 | Input/Output: [(-35 -60 3 80) -60]
Test Case: 606 | Input/Output: [(-19 -7 -99 -36) -99]
Test Case: 607 | Input/Output: [(82 44 34 -6) -6]
Test Case: 608 | Input/Output: [(22 73 11 -32) -32]
Test Case: 609 | Input/Output: [(-38 78 30 77) -38]
Test Case: 610 | Input/Output: [(13 -46 5 -18) -46]
Test Case: 611 | Input/Output: [(38 -38 3 56) -38]
Test Case: 612 | Input/Output: [(10 97 -96 -52) -96]
Test Case: 613 | Input/Output: [(-59 -4 65 89) -59]
Test Case: 614 | Input/Output: [(-95 -1 58 20) -95]
Test Case: 615 | Input/Output: [(47 -82 -4 -99) -99]
Test Case: 616 | Input/Output: [(-39 91 62 94) -39]
Test Case: 617 | Input/Output: [(66 -99 -36 -1) -99]
Test Case: 618 | Input/Output: [(-4 67 -75 -25) -75]
Test Case: 619 | Input/Output: [(-60 59 37 -52) -60]
Test Case: 620 | Input/Output: [(-4 -41 -27 -89) -89]
Test Case: 621 | Input/Output: [(-38 -66 -62 29) -66]
Test Case: 622 | Input/Output: [(-29 74 -52 -68) -68]
Test Case: 623 | Input/Output: [(-11 79 74 8) -11]
Test Case: 624 | Input/Output: [(99 59 2 -8) -8]
Test Case: 625 | Input/Output: [(-20 -4 48 45) -20]
Test Case: 626 | Input/Output: [(97 -100 68 68) -100]
Test Case: 627 | Input/Output: [(31 97 12 35) 12]
Test Case: 628 | Input/Output: [(82 -73 -52 -62) -73]
Test Case: 629 | Input/Output: [(-40 92 -28 -2) -40]
Test Case: 630 | Input/Output: [(50 -12 90 67) -12]
Test Case: 631 | Input/Output: [(96 -70 -13 -89) -89]
Test Case: 632 | Input/Output: [(68 89 94 57) 57]
Test Case: 633 | Input/Output: [(-97 -9 57 -17) -97]
Test Case: 634 | Input/Output: [(-30 52 33 73) -30]
Test Case: 635 | Input/Output: [(41 76 -19 17) -19]
Test Case: 636 | Input/Output: [(-67 -16 -13 31) -67]
Test Case: 637 | Input/Output: [(-60 30 -56 47) -60]
Test Case: 638 | Input/Output: [(7 13 -49 84) -49]
Test Case: 639 | Input/Output: [(61 -11 -64 -50) -64]
Test Case: 640 | Input/Output: [(-86 14 68 57) -86]
Test Case: 641 | Input/Output: [(-70 24 3 -61) -70]
Test Case: 642 | Input/Output: [(40 -2 -45 86) -45]
Test Case: 643 | Input/Output: [(-78 -96 -97 -20) -97]
Test Case: 644 | Input/Output: [(-72 -11 -48 92) -72]
Test Case: 645 | Input/Output: [(62 24 -66 -74) -74]
Test Case: 646 | Input/Output: [(-60 91 -16 -7) -60]
Test Case: 647 | Input/Output: [(5 14 51 91) 5]
Test Case: 648 | Input/Output: [(69 38 59 -35) -35]
Test Case: 649 | Input/Output: [(-13 55 -79 -30) -79]
Test Case: 650 | Input/Output: [(6 95 -80 74) -80]
Test Case: 651 | Input/Output: [(-6 -48 0 -54) -54]
Test Case: 652 | Input/Output: [(31 -4 32 -63) -63]
Test Case: 653 | Input/Output: [(-49 96 -56 64) -56]
Test Case: 654 | Input/Output: [(36 -36 -28 28) -36]
Test Case: 655 | Input/Output: [(-91 -75 90 42) -91]
Test Case: 656 | Input/Output: [(52 -83 32 -25) -83]
Test Case: 657 | Input/Output: [(96 -92 -90 25) -92]
Test Case: 658 | Input/Output: [(-4 86 99 -84) -84]
Test Case: 659 | Input/Output: [(82 -87 -19 -29) -87]
Test Case: 660 | Input/Output: [(76 81 -15 24) -15]
Test Case: 661 | Input/Output: [(-48 -85 -92 -87) -92]
Test Case: 662 | Input/Output: [(58 46 30 39) 30]
Test Case: 663 | Input/Output: [(12 -19 -9 -32) -32]
Test Case: 664 | Input/Output: [(91 20 97 85) 20]
Test Case: 665 | Input/Output: [(-45 2 -19 -83) -83]
Test Case: 666 | Input/Output: [(-78 21 72 45) -78]
Test Case: 667 | Input/Output: [(87 -32 -50 -77) -77]
Test Case: 668 | Input/Output: [(-17 13 15 50) -17]
Test Case: 669 | Input/Output: [(-94 -60 -32 -74) -94]
Test Case: 670 | Input/Output: [(-51 -62 96 -57) -62]
Test Case: 671 | Input/Output: [(-44 57 -45 92) -45]
Test Case: 672 | Input/Output: [(25 -11 12 91) -11]
Test Case: 673 | Input/Output: [(-27 14 -59 72) -59]
Test Case: 674 | Input/Output: [(63 17 -31 -94) -94]
Test Case: 675 | Input/Output: [(-6 50 65 -71) -71]
Test Case: 676 | Input/Output: [(88 52 -56 -59) -59]
Test Case: 677 | Input/Output: [(-5 -84 67 -92) -92]
Test Case: 678 | Input/Output: [(100 -9 86 62) -9]
Test Case: 679 | Input/Output: [(-36 -37 -38 95) -38]
Test Case: 680 | Input/Output: [(-51 1 31 -48) -51]
Test Case: 681 | Input/Output: [(-74 36 -83 36) -83]
Test Case: 682 | Input/Output: [(20 78 10 58) 10]
Test Case: 683 | Input/Output: [(76 -92 -83 81) -92]
Test Case: 684 | Input/Output: [(-100 17 -51 48) -100]
Test Case: 685 | Input/Output: [(11 20 29 5) 5]
Test Case: 686 | Input/Output: [(-62 -77 -43 -65) -77]
Test Case: 687 | Input/Output: [(79 17 -52 76) -52]
Test Case: 688 | Input/Output: [(-36 -89 47 -59) -89]
Test Case: 689 | Input/Output: [(-42 57 -49 -55) -55]
Test Case: 690 | Input/Output: [(3 73 13 66) 3]
Test Case: 691 | Input/Output: [(68 -70 12 -74) -74]
Test Case: 692 | Input/Output: [(-42 -20 33 37) -42]
Test Case: 693 | Input/Output: [(44 -64 88 56) -64]
Test Case: 694 | Input/Output: [(-97 99 4 -90) -97]
Test Case: 695 | Input/Output: [(57 -57 43 11) -57]
Test Case: 696 | Input/Output: [(44 60 18 19) 18]
Test Case: 697 | Input/Output: [(-99 83 -38 -41) -99]
Test Case: 698 | Input/Output: [(89 -30 -28 -24) -30]
Test Case: 699 | Input/Output: [(-94 90 56 83) -94]
Test Case: 700 | Input/Output: [(79 -85 -12 -14) -85]
Test Case: 701 | Input/Output: [(97 27 -5 -100) -100]
Test Case: 702 | Input/Output: [(-61 72 54 47) -61]
Test Case: 703 | Input/Output: [(-75 40 71 64) -75]
Test Case: 704 | Input/Output: [(-35 1 -4 91) -35]
Test Case: 705 | Input/Output: [(42 31 -6 -70) -70]
Test Case: 706 | Input/Output: [(19 -55 -89 -62) -89]
Test Case: 707 | Input/Output: [(-63 93 9 -46) -63]
Test Case: 708 | Input/Output: [(33 57 -90 47) -90]
Test Case: 709 | Input/Output: [(35 -39 -3 25) -39]
Test Case: 710 | Input/Output: [(69 48 54 -19) -19]
Test Case: 711 | Input/Output: [(56 -18 -76 -31) -76]
Test Case: 712 | Input/Output: [(-9 -20 23 79) -20]
Test Case: 713 | Input/Output: [(50 82 -50 6) -50]
Test Case: 714 | Input/Output: [(-2 -83 -32 -1) -83]
Test Case: 715 | Input/Output: [(90 -72 92 -5) -72]
Test Case: 716 | Input/Output: [(-53 7 -34 -62) -62]
Test Case: 717 | Input/Output: [(100 -93 -53 30) -93]
Test Case: 718 | Input/Output: [(-94 79 88 -8) -94]
Test Case: 719 | Input/Output: [(56 -76 25 33) -76]
Test Case: 720 | Input/Output: [(-9 -49 61 59) -49]
Test Case: 721 | Input/Output: [(-91 -9 -20 -69) -91]
Test Case: 722 | Input/Output: [(42 84 -63 9) -63]
Test Case: 723 | Input/Output: [(11 -61 -60 18) -61]
Test Case: 724 | Input/Output: [(-34 -39 -99 -79) -99]
Test Case: 725 | Input/Output: [(89 -26 32 25) -26]
Test Case: 726 | Input/Output: [(74 -70 89 65) -70]
Test Case: 727 | Input/Output: [(65 -44 25 -33) -44]
Test Case: 728 | Input/Output: [(1 -34 -6 -61) -61]
Test Case: 729 | Input/Output: [(-99 10 -53 28) -99]
Test Case: 730 | Input/Output: [(-54 -56 84 32) -56]
Test Case: 731 | Input/Output: [(-1 72 -1 64) -1]
Test Case: 732 | Input/Output: [(82 87 -96 79) -96]
Test Case: 733 | Input/Output: [(-45 -38 -95 -44) -95]
Test Case: 734 | Input/Output: [(15 -38 78 -13) -38]
Test Case: 735 | Input/Output: [(47 92 -66 -51) -66]
Test Case: 736 | Input/Output: [(-10 -67 -32 -48) -67]
Test Case: 737 | Input/Output: [(-64 72 69 12) -64]
Test Case: 738 | Input/Output: [(49 57 -84 -28) -84]
Test Case: 739 | Input/Output: [(80 -88 32 -25) -88]
Test Case: 740 | Input/Output: [(-33 -1 15 -51) -51]
Test Case: 741 | Input/Output: [(-96 52 10 -84) -96]
Test Case: 742 | Input/Output: [(4 51 -79 24) -79]
Test Case: 743 | Input/Output: [(-15 26 55 96) -15]
Test Case: 744 | Input/Output: [(-20 56 -59 29) -59]
Test Case: 745 | Input/Output: [(-46 2 76 84) -46]
Test Case: 746 | Input/Output: [(100 -89 3 76) -89]
Test Case: 747 | Input/Output: [(-87 91 91 68) -87]
Test Case: 748 | Input/Output: [(-32 65 75 24) -32]
Test Case: 749 | Input/Output: [(58 -5 74 72) -5]
Test Case: 750 | Input/Output: [(-89 -53 -69 67) -89]
Test Case: 751 | Input/Output: [(73 61 -68 32) -68]
Test Case: 752 | Input/Output: [(8 79 -38 -29) -38]
Test Case: 753 | Input/Output: [(-96 54 39 -90) -96]
Test Case: 754 | Input/Output: [(75 96 70 94) 70]
Test Case: 755 | Input/Output: [(51 82 79 12) 12]
Test Case: 756 | Input/Output: [(-72 37 -90 21) -90]
Test Case: 757 | Input/Output: [(-10 14 -45 100) -45]
Test Case: 758 | Input/Output: [(-87 43 -52 -60) -87]
Test Case: 759 | Input/Output: [(78 20 -33 -40) -40]
Test Case: 760 | Input/Output: [(-38 -99 -40 -47) -99]
Test Case: 761 | Input/Output: [(49 -41 -10 -55) -55]
Test Case: 762 | Input/Output: [(-83 -69 48 15) -83]
Test Case: 763 | Input/Output: [(-43 6 -41 84) -43]
Test Case: 764 | Input/Output: [(-57 33 -27 -18) -57]
Test Case: 765 | Input/Output: [(-12 -93 64 -17) -93]
Test Case: 766 | Input/Output: [(79 56 50 -78) -78]
Test Case: 767 | Input/Output: [(-72 68 -88 2) -88]
Test Case: 768 | Input/Output: [(55 88 -97 20) -97]
Test Case: 769 | Input/Output: [(18 -80 73 34) -80]
Test Case: 770 | Input/Output: [(92 10 -9 27) -9]
Test Case: 771 | Input/Output: [(4 77 -15 40) -15]
Test Case: 772 | Input/Output: [(-4 77 76 61) -4]
Test Case: 773 | Input/Output: [(-51 -28 54 61) -51]
Test Case: 774 | Input/Output: [(-29 57 60 53) -29]
Test Case: 775 | Input/Output: [(81 -46 -25 23) -46]
Test Case: 776 | Input/Output: [(11 -74 32 70) -74]
Test Case: 777 | Input/Output: [(67 44 94 29) 29]
Test Case: 778 | Input/Output: [(26 -5 -48 78) -48]
Test Case: 779 | Input/Output: [(77 -76 24 -54) -76]
Test Case: 780 | Input/Output: [(-84 -33 -71 -94) -94]
Test Case: 781 | Input/Output: [(-65 50 88 4) -65]
Test Case: 782 | Input/Output: [(-32 -75 -36 38) -75]
Test Case: 783 | Input/Output: [(45 -63 13 58) -63]
Test Case: 784 | Input/Output: [(86 -69 -45 67) -69]
Test Case: 785 | Input/Output: [(65 99 -79 75) -79]
Test Case: 786 | Input/Output: [(-7 -29 96 -20) -29]
Test Case: 787 | Input/Output: [(-31 -18 -39 36) -39]
Test Case: 788 | Input/Output: [(-13 -14 1 12) -14]
Test Case: 789 | Input/Output: [(94 24 36 2) 2]
Test Case: 790 | Input/Output: [(98 -11 31 25) -11]
Test Case: 791 | Input/Output: [(85 -22 -28 -94) -94]
Test Case: 792 | Input/Output: [(-28 69 39 65) -28]
Test Case: 793 | Input/Output: [(-45 -41 -3 -23) -45]
Test Case: 794 | Input/Output: [(9 -77 -6 80) -77]
Test Case: 795 | Input/Output: [(15 -54 81 -3) -54]
Test Case: 796 | Input/Output: [(75 31 49 -96) -96]
Test Case: 797 | Input/Output: [(-4 13 75 36) -4]
Test Case: 798 | Input/Output: [(88 -3 -21 -83) -83]
Test Case: 799 | Input/Output: [(90 -81 8 -6) -81]
Test Case: 800 | Input/Output: [(0 -77 95 -76) -77]
Test Case: 801 | Input/Output: [(21 42 -45 90) -45]
Test Case: 802 | Input/Output: [(38 -67 3 -1) -67]
Test Case: 803 | Input/Output: [(-9 -2 7 -100) -100]
Test Case: 804 | Input/Output: [(-77 80 -24 44) -77]
Test Case: 805 | Input/Output: [(0 42 65 -87) -87]
Test Case: 806 | Input/Output: [(-32 -34 -29 -16) -34]
Test Case: 807 | Input/Output: [(58 5 58 -46) -46]
Test Case: 808 | Input/Output: [(19 0 -26 66) -26]
Test Case: 809 | Input/Output: [(-5 63 -93 17) -93]
Test Case: 810 | Input/Output: [(-77 -20 -20 76) -77]
Test Case: 811 | Input/Output: [(-92 -92 -26 -58) -92]
Test Case: 812 | Input/Output: [(-24 -37 69 -9) -37]
Test Case: 813 | Input/Output: [(24 16 74 -76) -76]
Test Case: 814 | Input/Output: [(96 48 85 -70) -70]
Test Case: 815 | Input/Output: [(45 -84 5 -38) -84]
Test Case: 816 | Input/Output: [(-90 -36 86 -17) -90]
Test Case: 817 | Input/Output: [(-92 -62 -46 -87) -92]
Test Case: 818 | Input/Output: [(62 -79 -79 63) -79]
Test Case: 819 | Input/Output: [(-17 49 95 40) -17]
Test Case: 820 | Input/Output: [(-87 -33 -10 -27) -87]
Test Case: 821 | Input/Output: [(-94 10 41 -36) -94]
Test Case: 822 | Input/Output: [(-48 -68 17 14) -68]
Test Case: 823 | Input/Output: [(-12 -85 -39 -76) -85]
Test Case: 824 | Input/Output: [(-67 73 12 57) -67]
Test Case: 825 | Input/Output: [(-33 -2 -3 -38) -38]
Test Case: 826 | Input/Output: [(86 -75 -24 45) -75]
Test Case: 827 | Input/Output: [(53 68 -68 70) -68]
Test Case: 828 | Input/Output: [(25 67 -11 26) -11]
Test Case: 829 | Input/Output: [(92 77 66 -46) -46]
Test Case: 830 | Input/Output: [(97 87 -57 -83) -83]
Test Case: 831 | Input/Output: [(-51 46 -5 -51) -51]
Test Case: 832 | Input/Output: [(57 -52 -49 81) -52]
Test Case: 833 | Input/Output: [(-13 35 31 60) -13]
Test Case: 834 | Input/Output: [(-61 -2 3 -87) -87]
Test Case: 835 | Input/Output: [(-75 -69 39 -94) -94]
Test Case: 836 | Input/Output: [(24 66 16 -97) -97]
Test Case: 837 | Input/Output: [(-99 42 63 -54) -99]
Test Case: 838 | Input/Output: [(-33 53 87 47) -33]
Test Case: 839 | Input/Output: [(100 95 80 92) 80]
Test Case: 840 | Input/Output: [(79 72 -54 -90) -90]
Test Case: 841 | Input/Output: [(62 10 95 12) 10]
Test Case: 842 | Input/Output: [(94 23 -52 -10) -52]
Test Case: 843 | Input/Output: [(23 -74 85 91) -74]
Test Case: 844 | Input/Output: [(-54 -43 -18 -100) -100]
Test Case: 845 | Input/Output: [(-46 84 55 -40) -46]
Test Case: 846 | Input/Output: [(65 -4 11 53) -4]
Test Case: 847 | Input/Output: [(68 4 -1 -90) -90]
Test Case: 848 | Input/Output: [(2 58 34 3) 2]
Test Case: 849 | Input/Output: [(-66 -73 -15 79) -73]
Test Case: 850 | Input/Output: [(0 -21 16 -14) -21]
Test Case: 851 | Input/Output: [(-81 81 -29 18) -81]
Test Case: 852 | Input/Output: [(81 -25 -9 -7) -25]
Test Case: 853 | Input/Output: [(-88 -83 11 -66) -88]
Test Case: 854 | Input/Output: [(1 -60 -66 -6) -66]
Test Case: 855 | Input/Output: [(-84 27 -55 77) -84]
Test Case: 856 | Input/Output: [(-26 22 42 -71) -71]
Test Case: 857 | Input/Output: [(-44 -94 -19 86) -94]
Test Case: 858 | Input/Output: [(8 -33 -93 -80) -93]
Test Case: 859 | Input/Output: [(-28 -59 91 34) -59]
Test Case: 860 | Input/Output: [(18 -99 61 68) -99]
Test Case: 861 | Input/Output: [(79 91 -37 88) -37]
Test Case: 862 | Input/Output: [(-2 -80 44 -28) -80]
Test Case: 863 | Input/Output: [(-8 -15 26 -79) -79]
Test Case: 864 | Input/Output: [(52 77 -83 -89) -89]
Test Case: 865 | Input/Output: [(38 83 31 64) 31]
Test Case: 866 | Input/Output: [(89 -74 -60 -82) -82]
Test Case: 867 | Input/Output: [(57 2 -14 -18) -18]
Test Case: 868 | Input/Output: [(-88 -31 46 -95) -95]
Test Case: 869 | Input/Output: [(-17 94 69 -50) -50]
Test Case: 870 | Input/Output: [(-3 -74 -51 -79) -79]
Test Case: 871 | Input/Output: [(50 -55 -35 48) -55]
Test Case: 872 | Input/Output: [(61 -14 92 -79) -79]
Test Case: 873 | Input/Output: [(43 -29 91 -31) -31]
Test Case: 874 | Input/Output: [(83 -44 67 14) -44]
Test Case: 875 | Input/Output: [(-12 -1 61 20) -12]
Test Case: 876 | Input/Output: [(28 -68 29 71) -68]
Test Case: 877 | Input/Output: [(-65 1 -54 9) -65]
Test Case: 878 | Input/Output: [(94 -40 81 0) -40]
Test Case: 879 | Input/Output: [(-52 -31 51 -65) -65]
Test Case: 880 | Input/Output: [(-2 -100 30 85) -100]
Test Case: 881 | Input/Output: [(-21 95 -5 -74) -74]
Test Case: 882 | Input/Output: [(23 -53 34 -61) -61]
Test Case: 883 | Input/Output: [(-90 47 -98 -40) -98]
Test Case: 884 | Input/Output: [(1 -68 -82 -64) -82]
Test Case: 885 | Input/Output: [(-21 67 -18 -45) -45]
Test Case: 886 | Input/Output: [(68 -64 38 -46) -64]
Test Case: 887 | Input/Output: [(-86 -77 82 -41) -86]
Test Case: 888 | Input/Output: [(12 19 90 27) 12]
Test Case: 889 | Input/Output: [(-29 40 15 -74) -74]
Test Case: 890 | Input/Output: [(-6 9 -92 48) -92]
Test Case: 891 | Input/Output: [(48 43 -47 -3) -47]
Test Case: 892 | Input/Output: [(5 -20 15 -89) -89]
Test Case: 893 | Input/Output: [(-74 92 -17 52) -74]
Test Case: 894 | Input/Output: [(49 -99 22 -6) -99]
Test Case: 895 | Input/Output: [(67 7 -74 29) -74]
Test Case: 896 | Input/Output: [(-79 31 40 -14) -79]
Test Case: 897 | Input/Output: [(-5 -75 60 -79) -79]
Test Case: 898 | Input/Output: [(-91 9 -99 -55) -99]
Test Case: 899 | Input/Output: [(57 -31 100 4) -31]
Test Case: 900 | Input/Output: [(-24 -54 72 -39) -54]
Test Case: 901 | Input/Output: [(-70 -33 -41 21) -70]
Test Case: 902 | Input/Output: [(37 -13 70 -78) -78]
Test Case: 903 | Input/Output: [(-24 9 -83 -51) -83]
Test Case: 904 | Input/Output: [(71 59 97 31) 31]
Test Case: 905 | Input/Output: [(-89 25 -87 -67) -89]
Test Case: 906 | Input/Output: [(-91 10 40 17) -91]
Test Case: 907 | Input/Output: [(-82 13 10 -94) -94]
Test Case: 908 | Input/Output: [(52 49 -49 -1) -49]
Test Case: 909 | Input/Output: [(70 48 -90 24) -90]
Test Case: 910 | Input/Output: [(-60 -46 44 56) -60]
Test Case: 911 | Input/Output: [(16 69 -87 -77) -87]
Test Case: 912 | Input/Output: [(24 85 -6 -17) -17]
Test Case: 913 | Input/Output: [(-24 58 -23 17) -24]
Test Case: 914 | Input/Output: [(96 -95 77 34) -95]
Test Case: 915 | Input/Output: [(22 -46 30 93) -46]
Test Case: 916 | Input/Output: [(22 8 37 -26) -26]
Test Case: 917 | Input/Output: [(-31 -73 -54 -17) -73]
Test Case: 918 | Input/Output: [(42 -33 55 85) -33]
Test Case: 919 | Input/Output: [(-70 -35 -43 -95) -95]
Test Case: 920 | Input/Output: [(-1 -47 -60 -33) -60]
Test Case: 921 | Input/Output: [(-44 87 10 81) -44]
Test Case: 922 | Input/Output: [(-33 14 -67 -90) -90]
Test Case: 923 | Input/Output: [(99 83 -12 -15) -15]
Test Case: 924 | Input/Output: [(15 -25 -98 99) -98]
Test Case: 925 | Input/Output: [(-81 -29 68 35) -81]
Test Case: 926 | Input/Output: [(-36 77 -51 -36) -51]
Test Case: 927 | Input/Output: [(10 36 56 -65) -65]
Test Case: 928 | Input/Output: [(52 67 -34 -37) -37]
Test Case: 929 | Input/Output: [(31 -37 88 12) -37]
Test Case: 930 | Input/Output: [(87 -19 94 40) -19]
Test Case: 931 | Input/Output: [(61 1 -61 44) -61]
Test Case: 932 | Input/Output: [(-62 -79 -61 49) -79]
Test Case: 933 | Input/Output: [(-34 12 52 -96) -96]
Test Case: 934 | Input/Output: [(-93 -28 -80 91) -93]
Test Case: 935 | Input/Output: [(-83 12 -75 -27) -83]
Test Case: 936 | Input/Output: [(-40 -69 -39 -95) -95]
Test Case: 937 | Input/Output: [(-26 64 -22 -67) -67]
Test Case: 938 | Input/Output: [(-17 81 85 -40) -40]
Test Case: 939 | Input/Output: [(-10 28 78 39) -10]
Test Case: 940 | Input/Output: [(19 83 -97 -10) -97]
Test Case: 941 | Input/Output: [(59 39 40 -2) -2]
Test Case: 942 | Input/Output: [(7 -29 74 -1) -29]
Test Case: 943 | Input/Output: [(64 -34 -74 66) -74]
Test Case: 944 | Input/Output: [(-27 53 -22 53) -27]
Test Case: 945 | Input/Output: [(-97 24 93 -26) -97]
Test Case: 946 | Input/Output: [(9 -96 94 35) -96]
Test Case: 947 | Input/Output: [(48 -49 -17 57) -49]
Test Case: 948 | Input/Output: [(-85 -51 -38 -68) -85]
Test Case: 949 | Input/Output: [(1 72 -30 72) -30]
Test Case: 950 | Input/Output: [(-64 81 -45 -5) -64]
Test Case: 951 | Input/Output: [(-54 90 69 28) -54]
Test Case: 952 | Input/Output: [(54 -86 -37 -61) -86]
Test Case: 953 | Input/Output: [(96 19 -40 75) -40]
Test Case: 954 | Input/Output: [(88 -35 52 -99) -99]
Test Case: 955 | Input/Output: [(-14 73 -45 90) -45]
Test Case: 956 | Input/Output: [(-74 14 -47 -59) -74]
Test Case: 957 | Input/Output: [(43 18 -29 36) -29]
Test Case: 958 | Input/Output: [(-38 -8 -90 30) -90]
Test Case: 959 | Input/Output: [(-100 -10 -2 -16) -100]
Test Case: 960 | Input/Output: [(-75 22 -97 -90) -97]
Test Case: 961 | Input/Output: [(-24 16 18 -24) -24]
Test Case: 962 | Input/Output: [(-28 -13 69 9) -28]
Test Case: 963 | Input/Output: [(-80 89 89 37) -80]
Test Case: 964 | Input/Output: [(-32 -97 83 10) -97]
Test Case: 965 | Input/Output: [(-52 79 65 -47) -52]
Test Case: 966 | Input/Output: [(45 0 -100 -79) -100]
Test Case: 967 | Input/Output: [(52 28 3 -6) -6]
Test Case: 968 | Input/Output: [(4 -50 -29 -40) -50]
Test Case: 969 | Input/Output: [(-100 53 -57 -48) -100]
Test Case: 970 | Input/Output: [(63 -71 -38 -6) -71]
Test Case: 971 | Input/Output: [(38 32 24 26) 24]
Test Case: 972 | Input/Output: [(-8 72 -32 52) -32]
Test Case: 973 | Input/Output: [(57 53 -17 60) -17]
Test Case: 974 | Input/Output: [(-81 -85 -81 85) -85]
Test Case: 975 | Input/Output: [(-45 -22 29 72) -45]
Test Case: 976 | Input/Output: [(-80 41 -82 -80) -82]
Test Case: 977 | Input/Output: [(13 4 -1 -81) -81]
Test Case: 978 | Input/Output: [(4 -13 -79 -40) -79]
Test Case: 979 | Input/Output: [(22 -91 -86 -26) -91]
Test Case: 980 | Input/Output: [(-34 -83 -69 -35) -83]
Test Case: 981 | Input/Output: [(-68 70 74 -88) -88]
Test Case: 982 | Input/Output: [(-49 35 -37 49) -49]
Test Case: 983 | Input/Output: [(0 25 -94 -81) -94]
Test Case: 984 | Input/Output: [(44 -89 46 -96) -96]
Test Case: 985 | Input/Output: [(-14 -78 -41 -80) -80]
Test Case: 986 | Input/Output: [(-36 -14 -85 97) -85]
Test Case: 987 | Input/Output: [(-92 41 85 -42) -92]
Test Case: 988 | Input/Output: [(72 -68 5 68) -68]
Test Case: 989 | Input/Output: [(17 -42 -55 31) -55]
Test Case: 990 | Input/Output: [(-65 -43 -19 -85) -85]
Test Case: 991 | Input/Output: [(-30 -68 -39 -37) -68]
Test Case: 992 | Input/Output: [(74 90 -95 44) -95]
Test Case: 993 | Input/Output: [(-55 69 -28 40) -55]
Test Case: 994 | Input/Output: [(-66 -13 6 95) -66]
Test Case: 995 | Input/Output: [(9 17 -78 34) -78]
Test Case: 996 | Input/Output: [(45 -39 -81 74) -81]
Test Case: 997 | Input/Output: [(-23 94 -42 -94) -94]
Test Case: 998 | Input/Output: [(-20 22 -34 76) -34]
Test Case: 999 | Input/Output: [(-42 55 63 -100) -100]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:uniform-addition-and-deletion 1.0}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 3000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
random-screen = false
random-seed = 24 17 -90 -59 57 -85 78 75 68 0 116 -127 -55 -85 22 63
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-33 -35 -33 -33] -35] [[-25 -25 47 -25] -25] [[-16 -16 84 -16] -16] [[-1 -48 -1 -1] -48] [[-64 -49 -64 -64] -64] [[-88 -75 -75 -75] -88] [[-9 12 -9 -9] -9] [[24 -22 24 24] -22] [[-89 -89 -29 -89] -89] [[48 -3 -3 -3] -3] [(92 92 92 92) 92] [(90 90 90 90) 90] [(-63 -63 -63 -63) -63] [(83 83 83 83) 83] [(-93 -93 -93 -93) -93] [(31 9 57 51) 9] [(20 46 93 8) 8] [(61 23 6 36) 6] [(69 0 4 57) 0] [(66 90 78 9) 9] [(33 50 89 43) 33] [(74 11 24 56) 11] [(11 96 94 81) 11] [(50 97 43 29) 29] [(27 2 1 53) 1] [(45 71 56 86) 45] [(67 40 89 79) 40] [(71 87 60 32) 32] [(10 41 60 32) 10] [(31 6 38 32) 6] [(38 93 59 55) 38] [(4 63 92 43) 4] [(86 17 3 88) 3] [(12 20 50 25) 12] [(19 0 55 94) 0] [(67 -23 57 76) -23] [(-20 -68 86 89) -68] [(-98 80 16 -35) -98] [(7 -40 -32 -63) -63] [(-43 -42 17 -90) -90] [(13 60 90 75) 13] [(71 47 -54 -63) -63] [(34 72 35 -66) -66] [(15 -44 -80 -33) -80] [(10 -98 69 -63) -98] [(-41 -50 -45 -66) -66] [(3 -29 -91 -57) -91] [(39 -89 39 18) -89] [(-3 -64 -99 -43) -99] [(21 21 16 15) 15] [(-48 -62 -59 -90) -90] [(-11 -54 -82 88) -82] [(18 55 13 -29) -29] [(-93 -97 -71 -29) -97] [(81 -9 82 14) -9] [(-45 -51 15 -19) -51] [(-21 -59 -3 65) -59] [(32 -49 21 56) -49] [(-5 -40 -26 77) -40] [(-1 -86 -17 -59) -86] [(8 43 -5 -69) -69] [(85 -9 -14 47) -14] [(-62 50 19 96) -62] [(-74 61 -55 -72) -74] [(-20 26 -43 46) -43] [(-89 -48 16 43) -89] [(36 27 74 22) 22] [(-44 -16 -27 -34) -44] [(-98 -19 -82 -75) -98] [(-23 43 -86 26) -86] [(21 59 -42 65) -42] [(-24 27 92 -66) -66] [(23 -17 -94 8) -94] [(-84 -48 78 -75) -84] [(98 -85 73 99) -85] [(19 -53 -89 79) -89] [(15 55 97 54) 15] [(94 -76 -93 7) -93] [(-73 89 42 -70) -73] [(23 -50 23 -73) -73] [(60 100 -16 -99) -99] [(-29 -89 -55 -2) -89] [(-84 -45 -70 -49) -84] [(37 -17 -4 82) -17] [(78 50 80 37) 37] [(74 85 6 -53) -53] [(-68 66 -20 -33) -68] [(66 -58 -36 73) -58] [(14 47 25 16) 14] [(-77 77 -61 -44) -77] [(81 -28 -33 43) -33] [(32 -96 -59 -51) -96] [(7 -12 43 -33) -33] [(8 -90 -77 -50) -90] [(-46 86 -24 8) -46])
uniform-addition-and-deletion-rate = 0.09
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 640
Test mean error for best: 0.64000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -35                 | Program output: -33                
Correct output: -25                 | Program output: -25                
Correct output: -16                 | Program output: -16                
Correct output: -48                 | Program output: -1                 
Correct output: -64                 | Program output: -64                
Correct output: -88                 | Program output: -75                
Correct output: -9                  | Program output: -9                 
Correct output: -22                 | Program output: 24                 
Correct output: -89                 | Program output: -89                
Correct output: -3                  | Program output: -3                 
Correct output: 92                  | Program output: 92                 
Correct output: 90                  | Program output: 90                 
Correct output: -63                 | Program output: -63                
Correct output: 83                  | Program output: 83                 
Correct output: -93                 | Program output: -93                
Correct output: 9                   | Program output: 51                 
Correct output: 8                   | Program output: 8                  
Correct output: 6                   | Program output: 36                 
Correct output: 0                   | Program output: 57                 
Correct output: 9                   | Program output: 9                  
Correct output: 33                  | Program output: 43                 
Correct output: 11                  | Program output: 56                 
Correct output: 11                  | Program output: 81                 
Correct output: 29                  | Program output: 29                 
Correct output: 1                   | Program output: 53                 
Correct output: 45                  | Program output: 86                 
Correct output: 40                  | Program output: 79                 
Correct output: 32                  | Program output: 32                 
Correct output: 10                  | Program output: 32                 
Correct output: 6                   | Program output: 32                 
Correct output: 38                  | Program output: 55                 
Correct output: 4                   | Program output: 43                 
Correct output: 3                   | Program output: 88                 
Correct output: 12                  | Program output: 25                 
Correct output: 0                   | Program output: 94                 
Correct output: -23                 | Program output: 76                 
Correct output: -68                 | Program output: 89                 
Correct output: -98                 | Program output: -35                
Correct output: -63                 | Program output: -63                
Correct output: -90                 | Program output: -90                
Correct output: 13                  | Program output: 75                 
Correct output: -63                 | Program output: -63                
Correct output: -66                 | Program output: -66                
Correct output: -80                 | Program output: -33                
Correct output: -98                 | Program output: -63                
Correct output: -66                 | Program output: -66                
Correct output: -91                 | Program output: -57                
Correct output: -89                 | Program output: 18                 
Correct output: -99                 | Program output: -43                
Correct output: 15                  | Program output: 15                 
Correct output: -90                 | Program output: -90                
Correct output: -82                 | Program output: 88                 
Correct output: -29                 | Program output: -29                
Correct output: -97                 | Program output: -29                
Correct output: -9                  | Program output: 14                 
Correct output: -51                 | Program output: -19                
Correct output: -59                 | Program output: 65                 
Correct output: -49                 | Program output: 56                 
Correct output: -40                 | Program output: 77                 
Correct output: -86                 | Program output: -59                
Correct output: -69                 | Program output: -69                
Correct output: -14                 | Program output: 47                 
Correct output: -62                 | Program output: 96                 
Correct output: -74                 | Program output: -72                
Correct output: -43                 | Program output: 46                 
Correct output: -89                 | Program output: 43                 
Correct output: 22                  | Program output: 22                 
Correct output: -44                 | Program output: -34                
Correct output: -98                 | Program output: -75                
Correct output: -86                 | Program output: 26                 
Correct output: -42                 | Program output: 65                 
Correct output: -66                 | Program output: -66                
Correct output: -94                 | Program output: 8                  
Correct output: -84                 | Program output: -75                
Correct output: -85                 | Program output: 99                 
Correct output: -89                 | Program output: 79                 
Correct output: 15                  | Program output: 54                 
Correct output: -93                 | Program output: 7                  
Correct output: -73                 | Program output: -70                
Correct output: -73                 | Program output: -73                
Correct output: -99                 | Program output: -99                
Correct output: -89                 | Program output: -2                 
Correct output: -84                 | Program output: -49                
Correct output: -17                 | Program output: 82                 
Correct output: 37                  | Program output: 37                 
Correct output: -53                 | Program output: -53                
Correct output: -68                 | Program output: -33                
Correct output: -58                 | Program output: 73                 
Correct output: 14                  | Program output: 16                 
Correct output: -77                 | Program output: -44                
Correct output: -33                 | Program output: 43                 
Correct output: -96                 | Program output: -51                
Correct output: -33                 | Program output: -33                
Correct output: -90                 | Program output: -50                
Correct output: -46                 | Program output: 8                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_pop} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_shove} {:close 2, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup} {:close 2, :instruction integer_max} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*times} {:close 0, :instruction tagged_449} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_y} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_while} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tag_boolean_774} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_do*times} {:close 1, :instruction in1} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_sub} {:close 1, :instruction print_boolean} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup} {:close 1, :instruction print_newline} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_div} {:close 1, :instruction integer_shove} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_eq} {:close 2, :instruction boolean_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction -59} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_noop} {:close 1, :instruction in1} {:close 2, :instruction print_exec} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction -63})
Lexicase best program: (integer_pop exec_rot () (boolean_shove exec_do*times ()) (print_integer boolean_invert_second_then_and) exec_s_when_autoconstructing (exec_do*times (boolean_dup integer_max)) (integer_eq exec_do*times (tagged_449 boolean_pop exec_noop boolean_empty integer_sub integer_swap boolean_and in4 print_integer boolean_shove in4 integer_dup_items boolean_xor exec_y (integer_sub) exec_while (in3 integer_min boolean_shove exec_do*count (boolean_dup) exec_dup_items exec_if (exec_dup_items boolean_yankdup tag_boolean_774 boolean_dup print_integer integer_max integer_gt integer_lt boolean_or) (exec_do*times (in1) integer_gte exec_flush exec_flush integer_sub print_boolean) boolean_eq) exec_stackdepth integer_min exec_rot (exec_when (integer_empty integer_fromboolean exec_y (integer_dup print_newline) boolean_invert_first_then_and boolean_stackdepth integer_yankdup integer_empty integer_div integer_shove) boolean_eq) (exec_eq boolean_empty) () integer_mod integer_dup_items integer_max integer_fromboolean integer_rot integer_dup_times integer_min boolean_yankdup boolean_shove) exec_k_when_autoconstructing (boolean_invert_first_then_and -59 integer_dup integer_gte integer_dec boolean_swap boolean_swap) (exec_noop in1) print_exec ()) (exec_do*count (boolean_stackdepth integer_dup_times boolean_invert_second_then_and) -63))
Lexicase best errors: [0 0 1 1 0 1 1 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 120
Percent parens: 0.208
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_pop} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_shove} {:close 2, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup} {:close 2, :instruction integer_max} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*times} {:close 0, :instruction tagged_449} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_y} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_while} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tag_boolean_774} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_do*times} {:close 1, :instruction in1} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_sub} {:close 1, :instruction print_boolean} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup} {:close 1, :instruction print_newline} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_div} {:close 1, :instruction integer_shove} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_eq} {:close 2, :instruction boolean_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction -59} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_noop} {:close 1, :instruction in1} {:close 2, :instruction print_exec} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction -63})
Zero cases best program: (integer_pop exec_rot () (boolean_shove exec_do*times ()) (print_integer boolean_invert_second_then_and) exec_s_when_autoconstructing (exec_do*times (boolean_dup integer_max)) (integer_eq exec_do*times (tagged_449 boolean_pop exec_noop boolean_empty integer_sub integer_swap boolean_and in4 print_integer boolean_shove in4 integer_dup_items boolean_xor exec_y (integer_sub) exec_while (in3 integer_min boolean_shove exec_do*count (boolean_dup) exec_dup_items exec_if (exec_dup_items boolean_yankdup tag_boolean_774 boolean_dup print_integer integer_max integer_gt integer_lt boolean_or) (exec_do*times (in1) integer_gte exec_flush exec_flush integer_sub print_boolean) boolean_eq) exec_stackdepth integer_min exec_rot (exec_when (integer_empty integer_fromboolean exec_y (integer_dup print_newline) boolean_invert_first_then_and boolean_stackdepth integer_yankdup integer_empty integer_div integer_shove) boolean_eq) (exec_eq boolean_empty) () integer_mod integer_dup_items integer_max integer_fromboolean integer_rot integer_dup_times integer_min boolean_yankdup boolean_shove) exec_k_when_autoconstructing (boolean_invert_first_then_and -59 integer_dup integer_gte integer_dec boolean_swap boolean_swap) (exec_noop in1) print_exec ()) (exec_do*count (boolean_stackdepth integer_dup_times boolean_invert_second_then_and) -63))
Zero cases best errors: [0 0 1 1 0 1 1 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 120
Percent parens: 0.208
--- Lexicase Population Statistics ---
Count of elite individuals by case: (5 2 4 3 2 3 6 2 3 3)
Population mean number of elite cases: 0.03
Count of perfect (error zero) individuals by case: (5 2 4 3 2 3 6 2 3 3)
Population mean number of perfect (error zero) cases: 0.03
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_div} {:close 1, :instruction integer_min} {:close 0, :instruction tag_boolean_595} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction tagged_707} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction print_newline} {:close 0, :instruction -7} {:close 0, :instruction print_newline} {:close 0, :instruction exec_shove} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_do*range} {:close 2, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_gt} {:close 0, :instruction 96} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_div} {:close 0, :instruction integer_div} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction exec_flush} {:close 1, :instruction integer_shove} {:close 0, :instruction print_newline} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction tag_boolean_445} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_exec} {:close 0, :instruction integer_gte} {:close 0, :instruction in2} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_eq})
Best program: (integer_swap boolean_and exec_shove (integer_gte integer_div integer_min) tag_boolean_595 boolean_invert_first_then_and boolean_invert_first_then_and boolean_not integer_rot exec_y (exec_do*count (exec_if (boolean_flush) (integer_swap exec_dup (print_integer exec_k (tagged_707 integer_pop) (boolean_eq integer_lte boolean_stackdepth integer_div print_newline -7 print_newline exec_shove (print_boolean) exec_do*range (integer_dup)) in4 integer_swap exec_eq integer_shove integer_pop integer_gt) 96 exec_do*times () boolean_yankdup integer_fromboolean) exec_eq integer_gt) exec_while (boolean_yankdup) integer_rot) exec_do*count () exec_swap (boolean_invert_second_then_and) (exec_s (boolean_xor) (integer_div integer_div exec_pop (integer_flush exec_dup_times (boolean_yankdup exec_if (exec_swap (print_integer exec_flush) (integer_shove) print_newline exec_shove () boolean_rot boolean_shove tag_boolean_445 boolean_stackdepth print_exec (integer_gte in2 integer_dup_items boolean_swap) exec_eq) ()))) ()))
Errors: [0 0 1 1 0 1 1 0 0 1]
Total: 5
Mean: 0.5
Genome size: 75
Size: 102
Percent parens: 0.265
--- Population Statistics ---
Average total errors in population: 9.967
Median total errors in population: 10
Error averages by case: (0.995 0.998 0.996 0.997 0.998 0.997 0.994 0.998 0.997 0.997)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.8
Average program size in population (points): 69.894
Average percent parens in population: 0.278
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.278
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 477472
--- Timings ---
Current time: 1559593793446 milliseconds
Total Time:           2.6 seconds
Initialization:       0.1 seconds,  3.8%
Reproduction:         0.7 seconds, 28.5%
Fitness Testing:      1.8 seconds, 67.7%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 664
Test mean error for best: 0.66400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -35                 | Program output: -35                
Correct output: -25                 | Program output: -25                
Correct output: -16                 | Program output: -16                
Correct output: -48                 | Program output: -48                
Correct output: -64                 | Program output: -49                
Correct output: -88                 | Program output: -75                
Correct output: -9                  | Program output: 12                 
Correct output: -22                 | Program output: -22                
Correct output: -89                 | Program output: -89                
Correct output: -3                  | Program output: -3                 
Correct output: 92                  | Program output: 92                 
Correct output: 90                  | Program output: 90                 
Correct output: -63                 | Program output: -63                
Correct output: 83                  | Program output: 83                 
Correct output: -93                 | Program output: -93                
Correct output: 9                   | Program output: 9                  
Correct output: 8                   | Program output: 46                 
Correct output: 6                   | Program output: 23                 
Correct output: 0                   | Program output: 0                  
Correct output: 9                   | Program output: 90                 
Correct output: 33                  | Program output: 50                 
Correct output: 11                  | Program output: 11                 
Correct output: 11                  | Program output: 96                 
Correct output: 29                  | Program output: 97                 
Correct output: 1                   | Program output: 2                  
Correct output: 45                  | Program output: 71                 
Correct output: 40                  | Program output: 40                 
Correct output: 32                  | Program output: 87                 
Correct output: 10                  | Program output: 41                 
Correct output: 6                   | Program output: 6                  
Correct output: 38                  | Program output: 93                 
Correct output: 4                   | Program output: 63                 
Correct output: 3                   | Program output: 17                 
Correct output: 12                  | Program output: 20                 
Correct output: 0                   | Program output: 0                  
Correct output: -23                 | Program output: -23                
Correct output: -68                 | Program output: -68                
Correct output: -98                 | Program output: 80                 
Correct output: -63                 | Program output: -40                
Correct output: -90                 | Program output: -42                
Correct output: 13                  | Program output: 60                 
Correct output: -63                 | Program output: 47                 
Correct output: -66                 | Program output: 72                 
Correct output: -80                 | Program output: -44                
Correct output: -98                 | Program output: -98                
Correct output: -66                 | Program output: -50                
Correct output: -91                 | Program output: -29                
Correct output: -89                 | Program output: -89                
Correct output: -99                 | Program output: -64                
Correct output: 15                  | Program output: 21                 
Correct output: -90                 | Program output: -62                
Correct output: -82                 | Program output: -54                
Correct output: -29                 | Program output: 55                 
Correct output: -97                 | Program output: -97                
Correct output: -9                  | Program output: -9                 
Correct output: -51                 | Program output: -51                
Correct output: -59                 | Program output: -59                
Correct output: -49                 | Program output: -49                
Correct output: -40                 | Program output: -40                
Correct output: -86                 | Program output: -86                
Correct output: -69                 | Program output: 43                 
Correct output: -14                 | Program output: -9                 
Correct output: -62                 | Program output: 50                 
Correct output: -74                 | Program output: 61                 
Correct output: -43                 | Program output: 26                 
Correct output: -89                 | Program output: -48                
Correct output: 22                  | Program output: 27                 
Correct output: -44                 | Program output: -16                
Correct output: -98                 | Program output: -19                
Correct output: -86                 | Program output: 43                 
Correct output: -42                 | Program output: 59                 
Correct output: -66                 | Program output: 27                 
Correct output: -94                 | Program output: -17                
Correct output: -84                 | Program output: -48                
Correct output: -85                 | Program output: -85                
Correct output: -89                 | Program output: -53                
Correct output: 15                  | Program output: 55                 
Correct output: -93                 | Program output: -76                
Correct output: -73                 | Program output: 89                 
Correct output: -73                 | Program output: -50                
Correct output: -99                 | Program output: 100                
Correct output: -89                 | Program output: -89                
Correct output: -84                 | Program output: -45                
Correct output: -17                 | Program output: -17                
Correct output: 37                  | Program output: 50                 
Correct output: -53                 | Program output: 85                 
Correct output: -68                 | Program output: 66                 
Correct output: -58                 | Program output: -58                
Correct output: 14                  | Program output: 47                 
Correct output: -77                 | Program output: 77                 
Correct output: -33                 | Program output: -28                
Correct output: -96                 | Program output: -96                
Correct output: -33                 | Program output: -12                
Correct output: -90                 | Program output: -90                
Correct output: -46                 | Program output: 86                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 0, :instruction tagged_580} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction in3} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_while} {:close 1, :instruction print_exec} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_min} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_swap})
Lexicase best program: (in2 print_integer integer_max tagged_580 integer_dup integer_inc in3 boolean_invert_first_then_and integer_lt exec_rot (exec_y () boolean_rot exec_dup_items boolean_stackdepth exec_do*count (integer_inc exec_pop (exec_y_when_autoconstructing () exec_eq boolean_invert_first_then_and exec_while (print_exec () boolean_xor integer_dup_items boolean_yankdup integer_mod integer_dec boolean_empty exec_dup_times () exec_y (boolean_invert_first_then_and integer_yankdup boolean_empty integer_min integer_gte) exec_y_when_autoconstructing (exec_swap () ()))))) () ())
Lexicase best errors: [0 0 1 1 0 1 0 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 52
Percent parens: 0.288
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 0, :instruction tagged_580} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction in3} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_while} {:close 1, :instruction print_exec} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_min} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_swap})
Zero cases best program: (in2 print_integer integer_max tagged_580 integer_dup integer_inc in3 boolean_invert_first_then_and integer_lt exec_rot (exec_y () boolean_rot exec_dup_items boolean_stackdepth exec_do*count (integer_inc exec_pop (exec_y_when_autoconstructing () exec_eq boolean_invert_first_then_and exec_while (print_exec () boolean_xor integer_dup_items boolean_yankdup integer_mod integer_dec boolean_empty exec_dup_times () exec_y (boolean_invert_first_then_and integer_yankdup boolean_empty integer_min integer_gte) exec_y_when_autoconstructing (exec_swap () ()))))) () ())
Zero cases best errors: [0 0 1 1 0 1 0 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 52
Percent parens: 0.288
--- Lexicase Population Statistics ---
Count of elite individuals by case: (187 187 10 201 184 111 194 111 187 114)
Population mean number of elite cases: 1.49
Count of perfect (error zero) individuals by case: (187 187 10 201 184 111 194 111 187 114)
Population mean number of perfect (error zero) cases: 1.49
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 0, :instruction tagged_580} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_while} {:close 0, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_while} {:close 1, :instruction print_exec} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction in1} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_min} {:close 1, :instruction integer_gte} {:close 1, :instruction exec_swap})
Best program: (in1 in2 print_integer integer_max tagged_580 integer_dup integer_inc exec_while (in3 integer_lt exec_s_when_autoconstructing (exec_rot (exec_y () boolean_rot exec_dup_items boolean_stackdepth integer_inc exec_pop (exec_y_when_autoconstructing () exec_eq boolean_invert_first_then_and exec_while (print_exec () boolean_xor boolean_and exec_do*range (integer_dup_items boolean_yankdup integer_mod boolean_yankdup) in1) boolean_empty exec_dup_times () boolean_invert_first_then_and boolean_empty integer_min integer_gte) exec_swap () ()) () ()) () ()))
Errors: [0 0 1 1 0 1 0 1 0 1]
Total: 5
Mean: 0.5
Genome size: 38
Size: 55
Percent parens: 0.309
--- Population Statistics ---
Average total errors in population: 8.514
Median total errors in population: 9
Error averages by case: (0.813 0.813 0.99 0.799 0.816 0.889 0.806 0.889 0.813 0.886)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 68.686
Average program size in population (points): 90.805
Average percent parens in population: 0.252
Minimum age in population: 1.0
Maximum age in population: 1.0
Average age in population: 1.0
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.999
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.999
Total error diversity:				 0.006
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.179
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 1362715
--- Timings ---
Current time: 1559593795946 milliseconds
Total Time:           5.6 seconds
Initialization:       0.1 seconds,  1.7%
Reproduction:         1.9 seconds, 33.9%
Fitness Testing:      2.8 seconds, 50.4%
Report:               0.8 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 407
Test mean error for best: 0.40700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -35                 | Program output: -35                
Correct output: -25                 | Program output: -25                
Correct output: -16                 | Program output: -16                
Correct output: -48                 | Program output: -48                
Correct output: -64                 | Program output: -64                
Correct output: -88                 | Program output: -88                
Correct output: -9                  | Program output: -9                 
Correct output: -22                 | Program output: -22                
Correct output: -89                 | Program output: -89                
Correct output: -3                  | Program output: -3                 
Correct output: 92                  | Program output: 92                 
Correct output: 90                  | Program output: 90                 
Correct output: -63                 | Program output: -63                
Correct output: 83                  | Program output: 83                 
Correct output: -93                 | Program output: -93                
Correct output: 9                   | Program output: 9                  
Correct output: 8                   | Program output: 20                 
Correct output: 6                   | Program output: 23                 
Correct output: 0                   | Program output: 0                  
Correct output: 9                   | Program output: 66                 
Correct output: 33                  | Program output: 33                 
Correct output: 11                  | Program output: 11                 
Correct output: 11                  | Program output: 11                 
Correct output: 29                  | Program output: 50                 
Correct output: 1                   | Program output: 2                  
Correct output: 45                  | Program output: 45                 
Correct output: 40                  | Program output: 40                 
Correct output: 32                  | Program output: 71                 
Correct output: 10                  | Program output: 10                 
Correct output: 6                   | Program output: 6                  
Correct output: 38                  | Program output: 38                 
Correct output: 4                   | Program output: 4                  
Correct output: 3                   | Program output: 17                 
Correct output: 12                  | Program output: 12                 
Correct output: 0                   | Program output: 0                  
Correct output: -23                 | Program output: -23                
Correct output: -68                 | Program output: -68                
Correct output: -98                 | Program output: -98                
Correct output: -63                 | Program output: -40                
Correct output: -90                 | Program output: -43                
Correct output: 13                  | Program output: 13                 
Correct output: -63                 | Program output: 47                 
Correct output: -66                 | Program output: 34                 
Correct output: -80                 | Program output: -44                
Correct output: -98                 | Program output: -98                
Correct output: -66                 | Program output: -50                
Correct output: -91                 | Program output: -29                
Correct output: -89                 | Program output: -89                
Correct output: -99                 | Program output: -64                
Correct output: 15                  | Program output: 21                 
Correct output: -90                 | Program output: -62                
Correct output: -82                 | Program output: -54                
Correct output: -29                 | Program output: 18                 
Correct output: -97                 | Program output: -97                
Correct output: -9                  | Program output: -9                 
Correct output: -51                 | Program output: -51                
Correct output: -59                 | Program output: -59                
Correct output: -49                 | Program output: -49                
Correct output: -40                 | Program output: -40                
Correct output: -86                 | Program output: -86                
Correct output: -69                 | Program output: 8                  
Correct output: -14                 | Program output: -9                 
Correct output: -62                 | Program output: -62                
Correct output: -74                 | Program output: -74                
Correct output: -43                 | Program output: -20                
Correct output: -89                 | Program output: -89                
Correct output: 22                  | Program output: 27                 
Correct output: -44                 | Program output: -44                
Correct output: -98                 | Program output: -98                
Correct output: -86                 | Program output: -23                
Correct output: -42                 | Program output: 21                 
Correct output: -66                 | Program output: -24                
Correct output: -94                 | Program output: -17                
Correct output: -84                 | Program output: -84                
Correct output: -85                 | Program output: -85                
Correct output: -89                 | Program output: -53                
Correct output: 15                  | Program output: 15                 
Correct output: -93                 | Program output: -76                
Correct output: -73                 | Program output: -73                
Correct output: -73                 | Program output: -50                
Correct output: -99                 | Program output: 60                 
Correct output: -89                 | Program output: -89                
Correct output: -84                 | Program output: -84                
Correct output: -17                 | Program output: -17                
Correct output: 37                  | Program output: 50                 
Correct output: -53                 | Program output: 74                 
Correct output: -68                 | Program output: -68                
Correct output: -58                 | Program output: -58                
Correct output: 14                  | Program output: 14                 
Correct output: -77                 | Program output: -77                
Correct output: -33                 | Program output: -28                
Correct output: -96                 | Program output: -96                
Correct output: -33                 | Program output: -12                
Correct output: -90                 | Program output: -90                
Correct output: -46                 | Program output: -46                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 0, :instruction integer_inc} {:close 0, :instruction tagged_580} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_while} {:close 0, :instruction in3} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_y} {:close 1, :instruction in1} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_min} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_swap})
Lexicase best program: (in1 in2 integer_min print_integer integer_max integer_inc tagged_580 integer_dup integer_inc exec_while (in3 boolean_invert_first_then_and) exec_s_when_autoconstructing (exec_rot (exec_y () boolean_rot exec_dup_items boolean_stackdepth exec_do*count (integer_inc exec_pop (exec_y_when_autoconstructing () exec_eq boolean_invert_first_then_and exec_while (boolean_xor exec_do*range (integer_dup_items boolean_yankdup integer_mod boolean_yankdup) exec_y (in1) integer_yank) integer_dec boolean_empty exec_dup_times () print_boolean exec_eq integer_yankdup integer_min integer_gte) boolean_not exec_y_when_autoconstructing (exec_swap () ()))) () ()) () ())
Lexicase best errors: [0 0 0 0 0 0 0 0 1 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 64
Percent parens: 0.297
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 0, :instruction integer_inc} {:close 0, :instruction tagged_580} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_while} {:close 0, :instruction in3} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_y} {:close 1, :instruction in1} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_min} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_swap})
Zero cases best program: (in1 in2 integer_min print_integer integer_max integer_inc tagged_580 integer_dup integer_inc exec_while (in3 boolean_invert_first_then_and) exec_s_when_autoconstructing (exec_rot (exec_y () boolean_rot exec_dup_items boolean_stackdepth exec_do*count (integer_inc exec_pop (exec_y_when_autoconstructing () exec_eq boolean_invert_first_then_and exec_while (boolean_xor exec_do*range (integer_dup_items boolean_yankdup integer_mod boolean_yankdup) exec_y (in1) integer_yank) integer_dec boolean_empty exec_dup_times () print_boolean exec_eq integer_yankdup integer_min integer_gte) boolean_not exec_y_when_autoconstructing (exec_swap () ()))) () ()) () ())
Zero cases best errors: [0 0 0 0 0 0 0 0 1 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 64
Percent parens: 0.297
--- Lexicase Population Statistics ---
Count of elite individuals by case: (211 442 438 438 225 443 438 550 163 61)
Population mean number of elite cases: 3.41
Count of perfect (error zero) individuals by case: (211 442 438 438 225 443 438 550 163 61)
Population mean number of perfect (error zero) cases: 3.41
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 0, :instruction integer_inc} {:close 0, :instruction tagged_580} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_while} {:close 0, :instruction in3} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_y} {:close 1, :instruction in1} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_min} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_swap})
Best program: (in1 in2 integer_min print_integer integer_max integer_inc tagged_580 integer_dup integer_inc exec_while (in3 boolean_invert_first_then_and) exec_s_when_autoconstructing (exec_rot (exec_y () boolean_rot exec_dup_items boolean_stackdepth exec_do*count (integer_inc exec_pop (exec_y_when_autoconstructing () exec_eq boolean_invert_first_then_and exec_while (boolean_xor exec_do*range (integer_dup_items boolean_yankdup integer_mod boolean_yankdup) exec_y (in1) integer_yank) integer_dec boolean_empty exec_dup_times () print_boolean exec_eq integer_yankdup integer_min integer_gte) boolean_not exec_y_when_autoconstructing (exec_swap () ()))) () ()) () ())
Errors: [0 0 0 0 0 0 0 0 1 1]
Total: 2
Mean: 0.2
Genome size: 45
Size: 64
Percent parens: 0.297
--- Population Statistics ---
Average total errors in population: 6.591
Median total errors in population: 7
Error averages by case: (0.789 0.558 0.562 0.562 0.775 0.557 0.562 0.45 0.837 0.939)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 48.541
Average program size in population (points): 65.591
Average percent parens in population: 0.269
Minimum age in population: 2.0
Maximum age in population: 2.0
Average age in population: 2.0
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.009
Error (vector) diversity:			 0.019
Behavioral diversity:				 0.144
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 2074248
--- Timings ---
Current time: 1559593798685 milliseconds
Total Time:           8.1 seconds
Initialization:       0.1 seconds,  1.2%
Reproduction:         3.3 seconds, 40.3%
Fitness Testing:      3.7 seconds, 45.9%
Report:               1.0 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 407
Test mean error for best: 0.40700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -35                 | Program output: -35                
Correct output: -25                 | Program output: -25                
Correct output: -16                 | Program output: -16                
Correct output: -48                 | Program output: -48                
Correct output: -64                 | Program output: -64                
Correct output: -88                 | Program output: -88                
Correct output: -9                  | Program output: -9                 
Correct output: -22                 | Program output: -22                
Correct output: -89                 | Program output: -89                
Correct output: -3                  | Program output: -3                 
Correct output: 92                  | Program output: 92                 
Correct output: 90                  | Program output: 90                 
Correct output: -63                 | Program output: -63                
Correct output: 83                  | Program output: 83                 
Correct output: -93                 | Program output: -93                
Correct output: 9                   | Program output: 9                  
Correct output: 8                   | Program output: 20                 
Correct output: 6                   | Program output: 23                 
Correct output: 0                   | Program output: 0                  
Correct output: 9                   | Program output: 66                 
Correct output: 33                  | Program output: 33                 
Correct output: 11                  | Program output: 11                 
Correct output: 11                  | Program output: 11                 
Correct output: 29                  | Program output: 50                 
Correct output: 1                   | Program output: 2                  
Correct output: 45                  | Program output: 45                 
Correct output: 40                  | Program output: 40                 
Correct output: 32                  | Program output: 71                 
Correct output: 10                  | Program output: 10                 
Correct output: 6                   | Program output: 6                  
Correct output: 38                  | Program output: 38                 
Correct output: 4                   | Program output: 4                  
Correct output: 3                   | Program output: 17                 
Correct output: 12                  | Program output: 12                 
Correct output: 0                   | Program output: 0                  
Correct output: -23                 | Program output: -23                
Correct output: -68                 | Program output: -68                
Correct output: -98                 | Program output: -98                
Correct output: -63                 | Program output: -40                
Correct output: -90                 | Program output: -43                
Correct output: 13                  | Program output: 13                 
Correct output: -63                 | Program output: 47                 
Correct output: -66                 | Program output: 34                 
Correct output: -80                 | Program output: -44                
Correct output: -98                 | Program output: -98                
Correct output: -66                 | Program output: -50                
Correct output: -91                 | Program output: -29                
Correct output: -89                 | Program output: -89                
Correct output: -99                 | Program output: -64                
Correct output: 15                  | Program output: 21                 
Correct output: -90                 | Program output: -62                
Correct output: -82                 | Program output: -54                
Correct output: -29                 | Program output: 18                 
Correct output: -97                 | Program output: -97                
Correct output: -9                  | Program output: -9                 
Correct output: -51                 | Program output: -51                
Correct output: -59                 | Program output: -59                
Correct output: -49                 | Program output: -49                
Correct output: -40                 | Program output: -40                
Correct output: -86                 | Program output: -86                
Correct output: -69                 | Program output: 8                  
Correct output: -14                 | Program output: -9                 
Correct output: -62                 | Program output: -62                
Correct output: -74                 | Program output: -74                
Correct output: -43                 | Program output: -20                
Correct output: -89                 | Program output: -89                
Correct output: 22                  | Program output: 27                 
Correct output: -44                 | Program output: -44                
Correct output: -98                 | Program output: -98                
Correct output: -86                 | Program output: -23                
Correct output: -42                 | Program output: 21                 
Correct output: -66                 | Program output: -24                
Correct output: -94                 | Program output: -17                
Correct output: -84                 | Program output: -84                
Correct output: -85                 | Program output: -85                
Correct output: -89                 | Program output: -53                
Correct output: 15                  | Program output: 15                 
Correct output: -93                 | Program output: -76                
Correct output: -73                 | Program output: -73                
Correct output: -73                 | Program output: -50                
Correct output: -99                 | Program output: 60                 
Correct output: -89                 | Program output: -89                
Correct output: -84                 | Program output: -84                
Correct output: -17                 | Program output: -17                
Correct output: 37                  | Program output: 50                 
Correct output: -53                 | Program output: 74                 
Correct output: -68                 | Program output: -68                
Correct output: -58                 | Program output: -58                
Correct output: 14                  | Program output: 14                 
Correct output: -77                 | Program output: -77                
Correct output: -33                 | Program output: -28                
Correct output: -96                 | Program output: -96                
Correct output: -33                 | Program output: -12                
Correct output: -90                 | Program output: -90                
Correct output: -46                 | Program output: -46                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 2, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 0, :instruction integer_inc} {:close 0, :instruction tagged_580} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_while} {:close 0, :instruction in3} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction in1} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_min} {:close 1, :instruction integer_gte} {:close 1, :instruction exec_swap})
Lexicase best program: (in1 integer_mult in2 integer_min exec_while () print_integer integer_max integer_inc tagged_580 integer_dup integer_inc boolean_shove exec_while (in3 boolean_invert_first_then_and) exec_s_when_autoconstructing (exec_rot (boolean_rot exec_dup_items boolean_stackdepth exec_do*count (integer_inc exec_pop (boolean_invert_first_then_and exec_while (boolean_xor exec_pop (exec_do*range (integer_dup_items boolean_yankdup integer_yank integer_mod boolean_yankdup) in1) exec_dup_times (integer_yank) integer_dec boolean_empty print_boolean exec_eq integer_yankdup integer_min integer_gte) exec_swap () ()))) () ()) () ())
Lexicase best errors: [0 0 0 0 0 1 0 1 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 61
Percent parens: 0.279
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 2, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 0, :instruction integer_inc} {:close 0, :instruction tagged_580} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_while} {:close 0, :instruction in3} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction in1} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_min} {:close 1, :instruction integer_gte} {:close 1, :instruction exec_swap})
Zero cases best program: (in1 integer_mult in2 integer_min exec_while () print_integer integer_max integer_inc tagged_580 integer_dup integer_inc boolean_shove exec_while (in3 boolean_invert_first_then_and) exec_s_when_autoconstructing (exec_rot (boolean_rot exec_dup_items boolean_stackdepth exec_do*count (integer_inc exec_pop (boolean_invert_first_then_and exec_while (boolean_xor exec_pop (exec_do*range (integer_dup_items boolean_yankdup integer_yank integer_mod boolean_yankdup) in1) exec_dup_times (integer_yank) integer_dec boolean_empty print_boolean exec_eq integer_yankdup integer_min integer_gte) exec_swap () ()))) () ()) () ())
Zero cases best errors: [0 0 0 0 0 1 0 1 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 61
Percent parens: 0.279
--- Lexicase Population Statistics ---
Count of elite individuals by case: (531 531 531 579 707 72 720 74 75 777)
Population mean number of elite cases: 4.60
Count of perfect (error zero) individuals by case: (531 531 531 579 707 72 720 74 75 777)
Population mean number of perfect (error zero) cases: 4.60
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 0, :instruction integer_inc} {:close 0, :instruction tagged_580} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction in3} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_y} {:close 1, :instruction in1} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_min} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_swap})
Best program: (in1 in2 in1 integer_min print_integer integer_max integer_inc tagged_580 integer_dup integer_inc in3 boolean_invert_first_then_and exec_s_when_autoconstructing (exec_rot (exec_y () boolean_rot exec_dup_items boolean_stackdepth exec_do*count (integer_inc exec_pop (exec_y_when_autoconstructing () exec_eq boolean_invert_first_then_and exec_while (boolean_xor exec_do*range (integer_dup_items boolean_yankdup integer_mod boolean_yankdup) exec_y (in1) integer_yank) integer_dec boolean_empty integer_mult exec_dup_times () print_boolean exec_eq integer_yankdup integer_min integer_gte) boolean_not exec_y_when_autoconstructing (exec_swap () ()))) () ()) () ())
Errors: [0 0 0 0 0 1 0 1 1 0]
Total: 3
Mean: 0.3
Genome size: 46
Size: 64
Percent parens: 0.281
--- Population Statistics ---
Average total errors in population: 5.403
Median total errors in population: 4
Error averages by case: (0.469 0.469 0.469 0.421 0.293 0.928 0.28 0.926 0.925 0.223)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.011
Average program size in population (points): 69.319
Average percent parens in population: 0.285
Minimum age in population: 3.0
Maximum age in population: 3.0
Average age in population: 3.0
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.008
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.102
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 2747246
--- Timings ---
Current time: 1559593801254 milliseconds
Total Time:          10.6 seconds
Initialization:       0.1 seconds,  0.9%
Reproduction:         4.4 seconds, 41.4%
Fitness Testing:      4.6 seconds, 43.1%
Report:               1.5 seconds, 14.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 438
Test mean error for best: 0.43800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -35                 | Program output: -35                
Correct output: -25                 | Program output: -25                
Correct output: -16                 | Program output: -16                
Correct output: -48                 | Program output: -48                
Correct output: -64                 | Program output: -64                
Correct output: -88                 | Program output: -75                
Correct output: -9                  | Program output: -9                 
Correct output: -22                 | Program output: -22                
Correct output: -89                 | Program output: -89                
Correct output: -3                  | Program output: -3                 
Correct output: 92                  | Program output: 92                 
Correct output: 90                  | Program output: 90                 
Correct output: -63                 | Program output: -63                
Correct output: 83                  | Program output: 83                 
Correct output: -93                 | Program output: -93                
Correct output: 9                   | Program output: 9                  
Correct output: 8                   | Program output: 46                 
Correct output: 6                   | Program output: 6                  
Correct output: 0                   | Program output: 0                  
Correct output: 9                   | Program output: 78                 
Correct output: 33                  | Program output: 50                 
Correct output: 11                  | Program output: 11                 
Correct output: 11                  | Program output: 94                 
Correct output: 29                  | Program output: 43                 
Correct output: 1                   | Program output: 1                  
Correct output: 45                  | Program output: 56                 
Correct output: 40                  | Program output: 40                 
Correct output: 32                  | Program output: 60                 
Correct output: 10                  | Program output: 41                 
Correct output: 6                   | Program output: 6                  
Correct output: 38                  | Program output: 59                 
Correct output: 4                   | Program output: 63                 
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 20                 
Correct output: 0                   | Program output: 0                  
Correct output: -23                 | Program output: -23                
Correct output: -68                 | Program output: -68                
Correct output: -98                 | Program output: 16                 
Correct output: -63                 | Program output: -40                
Correct output: -90                 | Program output: -42                
Correct output: 13                  | Program output: 60                 
Correct output: -63                 | Program output: -54                
Correct output: -66                 | Program output: 35                 
Correct output: -80                 | Program output: -80                
Correct output: -98                 | Program output: -98                
Correct output: -66                 | Program output: -50                
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -89                
Correct output: -99                 | Program output: -99                
Correct output: 15                  | Program output: 16                 
Correct output: -90                 | Program output: -62                
Correct output: -82                 | Program output: -82                
Correct output: -29                 | Program output: 13                 
Correct output: -97                 | Program output: -97                
Correct output: -9                  | Program output: -9                 
Correct output: -51                 | Program output: -51                
Correct output: -59                 | Program output: -59                
Correct output: -49                 | Program output: -49                
Correct output: -40                 | Program output: -40                
Correct output: -86                 | Program output: -86                
Correct output: -69                 | Program output: -5                 
Correct output: -14                 | Program output: -14                
Correct output: -62                 | Program output: 19                 
Correct output: -74                 | Program output: -55                
Correct output: -43                 | Program output: -43                
Correct output: -89                 | Program output: -48                
Correct output: 22                  | Program output: 27                 
Correct output: -44                 | Program output: -27                
Correct output: -98                 | Program output: -82                
Correct output: -86                 | Program output: -86                
Correct output: -42                 | Program output: -42                
Correct output: -66                 | Program output: 27                 
Correct output: -94                 | Program output: -94                
Correct output: -84                 | Program output: -48                
Correct output: -85                 | Program output: -85                
Correct output: -89                 | Program output: -89                
Correct output: 15                  | Program output: 55                 
Correct output: -93                 | Program output: -93                
Correct output: -73                 | Program output: 42                 
Correct output: -73                 | Program output: -50                
Correct output: -99                 | Program output: -16                
Correct output: -89                 | Program output: -89                
Correct output: -84                 | Program output: -70                
Correct output: -17                 | Program output: -17                
Correct output: 37                  | Program output: 50                 
Correct output: -53                 | Program output: 6                  
Correct output: -68                 | Program output: -20                
Correct output: -58                 | Program output: -58                
Correct output: 14                  | Program output: 25                 
Correct output: -77                 | Program output: -61                
Correct output: -33                 | Program output: -33                
Correct output: -96                 | Program output: -96                
Correct output: -33                 | Program output: -12                
Correct output: -90                 | Program output: -90                
Correct output: -46                 | Program output: -24                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 0, :instruction integer_inc} {:close 0, :instruction tagged_580} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_while} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_y} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 1, :instruction in1} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_dup_times} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_min} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction 7} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_swap})
Lexicase best program: (in3 in2 integer_min print_integer integer_max integer_inc tagged_580 integer_dup integer_inc integer_mult exec_while (boolean_invert_first_then_and) exec_s_when_autoconstructing (exec_rot (exec_y () integer_empty integer_stackdepth boolean_stackdepth exec_do*count (integer_inc exec_pop (exec_y_when_autoconstructing () exec_eq boolean_invert_first_then_and exec_while (boolean_xor exec_do*range (integer_dup_items boolean_yankdup exec_rot () (integer_mod boolean_yankdup) (in2 print_integer in1) integer_yank) integer_dec boolean_empty exec_dup_times () print_boolean exec_shove () exec_eq integer_yankdup integer_min integer_gte) exec_y_when_autoconstructing (7 boolean_dup exec_swap () ())))) () ()) () ())
Lexicase best errors: [1 0 0 1 0 0 1 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 71
Percent parens: 0.310
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 0, :instruction integer_inc} {:close 0, :instruction tagged_580} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_while} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_y} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 1, :instruction in1} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_dup_times} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_min} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction 7} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_swap})
Zero cases best program: (in3 in2 integer_min print_integer integer_max integer_inc tagged_580 integer_dup integer_inc integer_mult exec_while (boolean_invert_first_then_and) exec_s_when_autoconstructing (exec_rot (exec_y () integer_empty integer_stackdepth boolean_stackdepth exec_do*count (integer_inc exec_pop (exec_y_when_autoconstructing () exec_eq boolean_invert_first_then_and exec_while (boolean_xor exec_do*range (integer_dup_items boolean_yankdup exec_rot () (integer_mod boolean_yankdup) (in2 print_integer in1) integer_yank) integer_dec boolean_empty exec_dup_times () print_boolean exec_shove () exec_eq integer_yankdup integer_min integer_gte) exec_y_when_autoconstructing (7 boolean_dup exec_swap () ())))) () ()) () ())
Zero cases best errors: [1 0 0 1 0 0 1 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 71
Percent parens: 0.310
--- Lexicase Population Statistics ---
Count of elite individuals by case: (364 718 725 374 4 4 373 4 4 725)
Population mean number of elite cases: 3.30
Count of perfect (error zero) individuals by case: (364 718 725 374 4 4 373 4 4 725)
Population mean number of perfect (error zero) cases: 3.30
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 0, :instruction integer_inc} {:close 0, :instruction tagged_580} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction in3} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_k} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_y} {:close 1, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_swap})
Best program: (in1 in3 in2 integer_min print_integer integer_max integer_inc tagged_580 integer_dup integer_inc exec_dup_times (exec_while (in3 boolean_invert_first_then_and)) exec_do*range (exec_s_when_autoconstructing (exec_rot (boolean_rot exec_dup_items boolean_stackdepth exec_do*count (integer_inc exec_pop (exec_k (exec_y_when_autoconstructing () exec_eq boolean_invert_first_then_and exec_while (boolean_xor exec_do*range (exec_dup_times (boolean_yankdup boolean_yankdup) exec_y (in1) integer_yankdup integer_yank) integer_dec boolean_empty exec_dup_times () print_boolean exec_eq integer_gte) boolean_not exec_y_when_autoconstructing (exec_swap () ())) ()))) () ()) () ()))
Errors: [1 0 0 1 0 0 1 0 0 0]
Total: 3
Mean: 0.3
Genome size: 46
Size: 69
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 6.705
Median total errors in population: 6
Error averages by case: (0.636 0.282 0.275 0.626 0.996 0.996 0.627 0.996 0.996 0.275)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 45.136
Average program size in population (points): 63.018
Average percent parens in population: 0.282
Minimum age in population: 4.0
Maximum age in population: 4.0
Average age in population: 4.0
Median age in population: 4.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.008
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.07
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 3392479
--- Timings ---
Current time: 1559593803711 milliseconds
Total Time:          13.3 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         5.7 seconds, 42.6%
Fitness Testing:      5.4 seconds, 40.9%
Report:               2.1 seconds, 15.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 205
Test mean error for best: 0.20500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -35                 | Program output: -35                
Correct output: -25                 | Program output: -25                
Correct output: -16                 | Program output: -16                
Correct output: -48                 | Program output: -48                
Correct output: -64                 | Program output: -64                
Correct output: -88                 | Program output: -88                
Correct output: -9                  | Program output: -9                 
Correct output: -22                 | Program output: -22                
Correct output: -89                 | Program output: -89                
Correct output: -3                  | Program output: -3                 
Correct output: 92                  | Program output: 92                 
Correct output: 90                  | Program output: 90                 
Correct output: -63                 | Program output: -63                
Correct output: 83                  | Program output: 83                 
Correct output: -93                 | Program output: -93                
Correct output: 9                   | Program output: 9                  
Correct output: 8                   | Program output: 8                  
Correct output: 6                   | Program output: 23                 
Correct output: 0                   | Program output: 0                  
Correct output: 9                   | Program output: 9                  
Correct output: 33                  | Program output: 33                 
Correct output: 11                  | Program output: 11                 
Correct output: 11                  | Program output: 11                 
Correct output: 29                  | Program output: 29                 
Correct output: 1                   | Program output: 2                  
Correct output: 45                  | Program output: 45                 
Correct output: 40                  | Program output: 40                 
Correct output: 32                  | Program output: 32                 
Correct output: 10                  | Program output: 10                 
Correct output: 6                   | Program output: 6                  
Correct output: 38                  | Program output: 38                 
Correct output: 4                   | Program output: 4                  
Correct output: 3                   | Program output: 17                 
Correct output: 12                  | Program output: 12                 
Correct output: 0                   | Program output: 0                  
Correct output: -23                 | Program output: -23                
Correct output: -68                 | Program output: -68                
Correct output: -98                 | Program output: -98                
Correct output: -63                 | Program output: -63                
Correct output: -90                 | Program output: -90                
Correct output: 13                  | Program output: 13                 
Correct output: -63                 | Program output: -63                
Correct output: -66                 | Program output: -66                
Correct output: -80                 | Program output: -44                
Correct output: -98                 | Program output: -98                
Correct output: -66                 | Program output: -66                
Correct output: -91                 | Program output: -57                
Correct output: -89                 | Program output: -89                
Correct output: -99                 | Program output: -64                
Correct output: 15                  | Program output: 15                 
Correct output: -90                 | Program output: -90                
Correct output: -82                 | Program output: -54                
Correct output: -29                 | Program output: -29                
Correct output: -97                 | Program output: -97                
Correct output: -9                  | Program output: -9                 
Correct output: -51                 | Program output: -51                
Correct output: -59                 | Program output: -59                
Correct output: -49                 | Program output: -49                
Correct output: -40                 | Program output: -40                
Correct output: -86                 | Program output: -86                
Correct output: -69                 | Program output: -69                
Correct output: -14                 | Program output: -9                 
Correct output: -62                 | Program output: -62                
Correct output: -74                 | Program output: -74                
Correct output: -43                 | Program output: -20                
Correct output: -89                 | Program output: -89                
Correct output: 22                  | Program output: 22                 
Correct output: -44                 | Program output: -44                
Correct output: -98                 | Program output: -98                
Correct output: -86                 | Program output: -23                
Correct output: -42                 | Program output: 21                 
Correct output: -66                 | Program output: -66                
Correct output: -94                 | Program output: -17                
Correct output: -84                 | Program output: -84                
Correct output: -85                 | Program output: -85                
Correct output: -89                 | Program output: -53                
Correct output: 15                  | Program output: 15                 
Correct output: -93                 | Program output: -76                
Correct output: -73                 | Program output: -73                
Correct output: -73                 | Program output: -73                
Correct output: -99                 | Program output: -99                
Correct output: -89                 | Program output: -89                
Correct output: -84                 | Program output: -84                
Correct output: -17                 | Program output: -17                
Correct output: 37                  | Program output: 37                 
Correct output: -53                 | Program output: -53                
Correct output: -68                 | Program output: -68                
Correct output: -58                 | Program output: -58                
Correct output: 14                  | Program output: 14                 
Correct output: -77                 | Program output: -77                
Correct output: -33                 | Program output: -28                
Correct output: -96                 | Program output: -96                
Correct output: -33                 | Program output: -33                
Correct output: -90                 | Program output: -90                
Correct output: -46                 | Program output: -46                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup_times} {:close 0, :instruction tagged_580} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_y} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_y_when_autoconstructing})
Lexicase best program: (in1 in4 integer_min in2 integer_min print_integer integer_max exec_dup_times (tagged_580 integer_inc exec_while (exec_y_when_autoconstructing (in3 boolean_invert_first_then_and)) integer_flush exec_s_when_autoconstructing (exec_y () boolean_rot exec_dup_items exec_do*count (integer_inc exec_pop (exec_y_when_autoconstructing () exec_eq in2 in3) exec_yank exec_while (boolean_xor boolean_dup_times exec_do*range (boolean_eq integer_dup_items boolean_yankdup) integer_div integer_yank) boolean_empty exec_y (print_boolean exec_eq integer_yankdup integer_min boolean_not exec_y_when_autoconstructing ()))) () ()))
Lexicase best errors: [0 0 0 0 0 1 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 59
Percent parens: 0.254
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup_times} {:close 0, :instruction tagged_580} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_y} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_y_when_autoconstructing})
Zero cases best program: (in1 in4 integer_min in2 integer_min print_integer integer_max exec_dup_times (tagged_580 integer_inc exec_while (exec_y_when_autoconstructing (in3 boolean_invert_first_then_and)) integer_flush exec_s_when_autoconstructing (exec_y () boolean_rot exec_dup_items exec_do*count (integer_inc exec_pop (exec_y_when_autoconstructing () exec_eq in2 in3) exec_yank exec_while (boolean_xor boolean_dup_times exec_do*range (boolean_eq integer_dup_items boolean_yankdup) integer_div integer_yank) boolean_empty exec_y (print_boolean exec_eq integer_yankdup integer_min boolean_not exec_y_when_autoconstructing ()))) () ()))
Zero cases best errors: [0 0 0 0 0 1 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 59
Percent parens: 0.254
--- Lexicase Population Statistics ---
Count of elite individuals by case: (353 649 650 652 245 437 651 246 826 242)
Population mean number of elite cases: 4.95
Count of perfect (error zero) individuals by case: (353 649 650 652 245 437 651 246 826 242)
Population mean number of perfect (error zero) cases: 4.95
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction tagged_580} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_div} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 1, :instruction in3} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_dup_times} {:close 2, :instruction tag_boolean_947} {:close 0, :instruction exec_y} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_y_when_autoconstructing})
Best program: (in1 in4 integer_min in2 integer_min boolean_empty print_integer exec_yank integer_max boolean_pop exec_dup_times (tagged_580 integer_dup integer_inc exec_while (exec_y_when_autoconstructing (in2 in3 boolean_invert_first_then_and)) exec_s_when_autoconstructing (exec_y () boolean_rot exec_dup_items exec_do*count (integer_div) integer_inc exec_pop (exec_y_when_autoconstructing () exec_eq in3) exec_yank boolean_invert_second_then_and) (exec_while (boolean_xor exec_do*range (boolean_eq integer_dup_items boolean_yankdup) integer_div integer_yank) boolean_empty exec_dup_times () tag_boolean_947) () exec_y (print_boolean exec_do*while (exec_eq exec_do*times (integer_min boolean_not exec_y_when_autoconstructing ())))))
Errors: [0 0 0 0 0 1 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 51
Size: 69
Percent parens: 0.261
--- Population Statistics ---
Average total errors in population: 5.049
Median total errors in population: 4
Error averages by case: (0.647 0.351 0.35 0.348 0.755 0.563 0.349 0.754 0.174 0.758)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 46.387
Average program size in population (points): 66.014
Average percent parens in population: 0.296
Minimum age in population: 5.0
Maximum age in population: 5.0
Average age in population: 5.0
Median age in population: 5.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.01
Error (vector) diversity:			 0.028
Behavioral diversity:				 0.088
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 4045196
--- Timings ---
Current time: 1559593806146 milliseconds
Total Time:          15.6 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         6.8 seconds, 43.6%
Fitness Testing:      6.2 seconds, 40.1%
Report:               2.4 seconds, 15.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 205
Test mean error for best: 0.20500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -35                 | Program output: -35                
Correct output: -25                 | Program output: -25                
Correct output: -16                 | Program output: -16                
Correct output: -48                 | Program output: -48                
Correct output: -64                 | Program output: -64                
Correct output: -88                 | Program output: -88                
Correct output: -9                  | Program output: -9                 
Correct output: -22                 | Program output: -22                
Correct output: -89                 | Program output: -89                
Correct output: -3                  | Program output: -3                 
Correct output: 92                  | Program output: 92                 
Correct output: 90                  | Program output: 90                 
Correct output: -63                 | Program output: -63                
Correct output: 83                  | Program output: 83                 
Correct output: -93                 | Program output: -93                
Correct output: 9                   | Program output: 9                  
Correct output: 8                   | Program output: 8                  
Correct output: 6                   | Program output: 23                 
Correct output: 0                   | Program output: 0                  
Correct output: 9                   | Program output: 9                  
Correct output: 33                  | Program output: 33                 
Correct output: 11                  | Program output: 11                 
Correct output: 11                  | Program output: 11                 
Correct output: 29                  | Program output: 29                 
Correct output: 1                   | Program output: 2                  
Correct output: 45                  | Program output: 45                 
Correct output: 40                  | Program output: 40                 
Correct output: 32                  | Program output: 32                 
Correct output: 10                  | Program output: 10                 
Correct output: 6                   | Program output: 6                  
Correct output: 38                  | Program output: 38                 
Correct output: 4                   | Program output: 4                  
Correct output: 3                   | Program output: 17                 
Correct output: 12                  | Program output: 12                 
Correct output: 0                   | Program output: 0                  
Correct output: -23                 | Program output: -23                
Correct output: -68                 | Program output: -68                
Correct output: -98                 | Program output: -98                
Correct output: -63                 | Program output: -63                
Correct output: -90                 | Program output: -90                
Correct output: 13                  | Program output: 13                 
Correct output: -63                 | Program output: -63                
Correct output: -66                 | Program output: -66                
Correct output: -80                 | Program output: -44                
Correct output: -98                 | Program output: -98                
Correct output: -66                 | Program output: -66                
Correct output: -91                 | Program output: -57                
Correct output: -89                 | Program output: -89                
Correct output: -99                 | Program output: -64                
Correct output: 15                  | Program output: 15                 
Correct output: -90                 | Program output: -90                
Correct output: -82                 | Program output: -54                
Correct output: -29                 | Program output: -29                
Correct output: -97                 | Program output: -97                
Correct output: -9                  | Program output: -9                 
Correct output: -51                 | Program output: -51                
Correct output: -59                 | Program output: -59                
Correct output: -49                 | Program output: -49                
Correct output: -40                 | Program output: -40                
Correct output: -86                 | Program output: -86                
Correct output: -69                 | Program output: -69                
Correct output: -14                 | Program output: -9                 
Correct output: -62                 | Program output: -62                
Correct output: -74                 | Program output: -74                
Correct output: -43                 | Program output: -20                
Correct output: -89                 | Program output: -89                
Correct output: 22                  | Program output: 22                 
Correct output: -44                 | Program output: -44                
Correct output: -98                 | Program output: -98                
Correct output: -86                 | Program output: -23                
Correct output: -42                 | Program output: 21                 
Correct output: -66                 | Program output: -66                
Correct output: -94                 | Program output: -17                
Correct output: -84                 | Program output: -84                
Correct output: -85                 | Program output: -85                
Correct output: -89                 | Program output: -53                
Correct output: 15                  | Program output: 15                 
Correct output: -93                 | Program output: -76                
Correct output: -73                 | Program output: -73                
Correct output: -73                 | Program output: -73                
Correct output: -99                 | Program output: -99                
Correct output: -89                 | Program output: -89                
Correct output: -84                 | Program output: -84                
Correct output: -17                 | Program output: -17                
Correct output: 37                  | Program output: 37                 
Correct output: -53                 | Program output: -53                
Correct output: -68                 | Program output: -68                
Correct output: -58                 | Program output: -58                
Correct output: 14                  | Program output: 14                 
Correct output: -77                 | Program output: -77                
Correct output: -33                 | Program output: -28                
Correct output: -96                 | Program output: -96                
Correct output: -33                 | Program output: -33                
Correct output: -90                 | Program output: -90                
Correct output: -46                 | Program output: -46                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tagged_580} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_eq} {:close 1, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_y} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_eq} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_y_when_autoconstructing})
Lexicase best program: (in1 boolean_empty in4 integer_min in2 exec_do*while (integer_min boolean_empty print_integer integer_max exec_dup_times (exec_dup_items tagged_580 integer_dup integer_inc exec_while (exec_y_when_autoconstructing (boolean_invert_first_then_and)) exec_s_when_autoconstructing (exec_y () boolean_or exec_dup_items exec_do*count (integer_inc exec_pop (exec_yank exec_eq in3) exec_swap (exec_yank exec_while (boolean_xor exec_do*range (boolean_eq integer_lt integer_dup_items boolean_yankdup) integer_div integer_yank) exec_dup_times () integer_fromboolean) (exec_y (print_boolean integer_dup_times exec_do*while (exec_eq print_boolean) integer_min boolean_not exec_y_when_autoconstructing ())))) () ())))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 69
Percent parens: 0.275
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tagged_580} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_eq} {:close 1, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_y} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_eq} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_y_when_autoconstructing})
Zero cases best program: (in1 boolean_empty in4 integer_min in2 exec_do*while (integer_min boolean_empty print_integer integer_max exec_dup_times (exec_dup_items tagged_580 integer_dup integer_inc exec_while (exec_y_when_autoconstructing (boolean_invert_first_then_and)) exec_s_when_autoconstructing (exec_y () boolean_or exec_dup_items exec_do*count (integer_inc exec_pop (exec_yank exec_eq in3) exec_swap (exec_yank exec_while (boolean_xor exec_do*range (boolean_eq integer_lt integer_dup_items boolean_yankdup) integer_div integer_yank) exec_dup_times () integer_fromboolean) (exec_y (print_boolean integer_dup_times exec_do*while (exec_eq print_boolean) integer_min boolean_not exec_y_when_autoconstructing ())))) () ())))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 69
Percent parens: 0.275
--- Lexicase Population Statistics ---
Count of elite individuals by case: (498 498 519 507 505 591 489 604 754 175)
Population mean number of elite cases: 5.14
Count of perfect (error zero) individuals by case: (498 498 519 507 505 591 489 604 754 175)
Population mean number of perfect (error zero) cases: 5.14
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup_times} {:close 0, :instruction tagged_580} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 1, :instruction exec_flush} {:close 2, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_while} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_y_when_autoconstructing})
Best program: (in1 in4 integer_min in2 integer_min boolean_empty print_integer boolean_yank exec_shove () integer_max exec_dup_times (tagged_580 integer_dup integer_inc exec_while (boolean_invert_first_then_and boolean_dup_items integer_shove in3 exec_flush) boolean_invert_first_then_and) exec_y () boolean_rot exec_dup_items exec_do*count (exec_pop (boolean_or exec_y_when_autoconstructing () print_boolean) exec_yank exec_while (exec_s_when_autoconstructing (boolean_xor exec_do*range (integer_min) boolean_eq integer_dup_items boolean_yankdup) (integer_div integer_yank) (boolean_empty exec_dup_times () print_boolean exec_do*while (exec_eq integer_yankdup integer_min boolean_not exec_y_when_autoconstructing ())))))
Errors: [0 0 0 0 0 0 0 0 0 1]
Total: 1
Mean: 0.1
Genome size: 49
Size: 65
Percent parens: 0.246
--- Population Statistics ---
Average total errors in population: 4.86
Median total errors in population: 9/2
Error averages by case: (0.502 0.502 0.481 0.493 0.495 0.409 0.511 0.396 0.246 0.825)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 46.005
Average program size in population (points): 63.76
Average percent parens in population: 0.277
Minimum age in population: 6.0
Maximum age in population: 6.0
Average age in population: 6.0
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.01
Error (vector) diversity:			 0.04
Behavioral diversity:				 0.153
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 4657479
--- Timings ---
Current time: 1559593808224 milliseconds
Total Time:          18.0 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:         7.9 seconds, 43.9%
Fitness Testing:      7.0 seconds, 39.0%
Report:               3.0 seconds, 16.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 192
Test mean error for best: 0.19200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -35                 | Program output: -33                
Correct output: -25                 | Program output: -25                
Correct output: -16                 | Program output: -16                
Correct output: -48                 | Program output: -1                 
Correct output: -64                 | Program output: -64                
Correct output: -88                 | Program output: -88                
Correct output: -9                  | Program output: -9                 
Correct output: -22                 | Program output: 24                 
Correct output: -89                 | Program output: -89                
Correct output: -3                  | Program output: -3                 
Correct output: 92                  | Program output: 92                 
Correct output: 90                  | Program output: 90                 
Correct output: -63                 | Program output: -63                
Correct output: 83                  | Program output: 83                 
Correct output: -93                 | Program output: -93                
Correct output: 9                   | Program output: 31                 
Correct output: 8                   | Program output: 8                  
Correct output: 6                   | Program output: 6                  
Correct output: 0                   | Program output: 4                  
Correct output: 9                   | Program output: 9                  
Correct output: 33                  | Program output: 33                 
Correct output: 11                  | Program output: 24                 
Correct output: 11                  | Program output: 11                 
Correct output: 29                  | Program output: 29                 
Correct output: 1                   | Program output: 1                  
Correct output: 45                  | Program output: 45                 
Correct output: 40                  | Program output: 67                 
Correct output: 32                  | Program output: 32                 
Correct output: 10                  | Program output: 10                 
Correct output: 6                   | Program output: 31                 
Correct output: 38                  | Program output: 38                 
Correct output: 4                   | Program output: 4                  
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 12                 
Correct output: 0                   | Program output: 19                 
Correct output: -23                 | Program output: 57                 
Correct output: -68                 | Program output: -20                
Correct output: -98                 | Program output: -98                
Correct output: -63                 | Program output: -63                
Correct output: -90                 | Program output: -90                
Correct output: 13                  | Program output: 13                 
Correct output: -63                 | Program output: -63                
Correct output: -66                 | Program output: -66                
Correct output: -80                 | Program output: -80                
Correct output: -98                 | Program output: -63                
Correct output: -66                 | Program output: -66                
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: 18                 
Correct output: -99                 | Program output: -99                
Correct output: 15                  | Program output: 15                 
Correct output: -90                 | Program output: -90                
Correct output: -82                 | Program output: -82                
Correct output: -29                 | Program output: -29                
Correct output: -97                 | Program output: -93                
Correct output: -9                  | Program output: 14                 
Correct output: -51                 | Program output: -45                
Correct output: -59                 | Program output: -21                
Correct output: -49                 | Program output: 21                 
Correct output: -40                 | Program output: -26                
Correct output: -86                 | Program output: -59                
Correct output: -69                 | Program output: -69                
Correct output: -14                 | Program output: -14                
Correct output: -62                 | Program output: -62                
Correct output: -74                 | Program output: -74                
Correct output: -43                 | Program output: -43                
Correct output: -89                 | Program output: -89                
Correct output: 22                  | Program output: 22                 
Correct output: -44                 | Program output: -44                
Correct output: -98                 | Program output: -98                
Correct output: -86                 | Program output: -86                
Correct output: -42                 | Program output: -42                
Correct output: -66                 | Program output: -66                
Correct output: -94                 | Program output: -94                
Correct output: -84                 | Program output: -84                
Correct output: -85                 | Program output: 73                 
Correct output: -89                 | Program output: -89                
Correct output: 15                  | Program output: 15                 
Correct output: -93                 | Program output: -93                
Correct output: -73                 | Program output: -73                
Correct output: -73                 | Program output: -73                
Correct output: -99                 | Program output: -99                
Correct output: -89                 | Program output: -55                
Correct output: -84                 | Program output: -84                
Correct output: -17                 | Program output: -4                 
Correct output: 37                  | Program output: 37                 
Correct output: -53                 | Program output: -53                
Correct output: -68                 | Program output: -68                
Correct output: -58                 | Program output: -36                
Correct output: 14                  | Program output: 14                 
Correct output: -77                 | Program output: -77                
Correct output: -33                 | Program output: -33                
Correct output: -96                 | Program output: -59                
Correct output: -33                 | Program output: -33                
Correct output: -90                 | Program output: -77                
Correct output: -46                 | Program output: -46                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup_times} {:close 0, :instruction tagged_580} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_eq} {:close 1, :instruction in3} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_div} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_y} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction exec_y_when_autoconstructing})
Lexicase best program: (in1 in4 in3 integer_min integer_min print_integer exec_yank exec_dup_times (tagged_580 integer_inc exec_while (exec_y_when_autoconstructing (in3 exec_swap (boolean_invert_first_then_and) () print_boolean exec_y () boolean_rot exec_dup_items integer_inc) exec_do*count (exec_pop (exec_eq in3) exec_while (boolean_xor exec_do*range (boolean_eq boolean_yankdup) integer_div exec_dup_items) boolean_empty exec_dup_times () exec_y (print_boolean exec_do*while (exec_eq integer_yankdup exec_yankdup integer_min exec_y_when_autoconstructing ()))))))
Lexicase best errors: [0 0 0 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 56
Percent parens: 0.268
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup_times} {:close 0, :instruction tagged_580} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_eq} {:close 1, :instruction in3} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_div} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_y} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction exec_y_when_autoconstructing})
Zero cases best program: (in1 in4 in3 integer_min integer_min print_integer exec_yank exec_dup_times (tagged_580 integer_inc exec_while (exec_y_when_autoconstructing (in3 exec_swap (boolean_invert_first_then_and) () print_boolean exec_y () boolean_rot exec_dup_items integer_inc) exec_do*count (exec_pop (exec_eq in3) exec_while (boolean_xor exec_do*range (boolean_eq boolean_yankdup) integer_div exec_dup_items) boolean_empty exec_dup_times () exec_y (print_boolean exec_do*while (exec_eq integer_yankdup exec_yankdup integer_min exec_y_when_autoconstructing ()))))))
Zero cases best errors: [0 0 0 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 56
Percent parens: 0.268
--- Lexicase Population Statistics ---
Count of elite individuals by case: (355 349 545 385 382 773 547 569 386 737)
Population mean number of elite cases: 5.03
Count of perfect (error zero) individuals by case: (355 349 545 385 382 773 547 569 386 737)
Population mean number of perfect (error zero) cases: 5.03
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup_times} {:close 0, :instruction tagged_580} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_eq} {:close 1, :instruction in3} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_yank} {:close 2, :instruction -68} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_dup_items} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_y} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction exec_y_when_autoconstructing})
Best program: (in1 in4 in3 integer_min integer_min boolean_empty print_integer integer_eq integer_max exec_dup_times (tagged_580 exec_while (exec_y_when_autoconstructing (in3 exec_swap (boolean_invert_first_then_and) () boolean_flush print_boolean exec_y () boolean_rot exec_dup_items exec_do*count (exec_pop (exec_eq in3) exec_yank exec_while (boolean_yank -68)) exec_do*range (boolean_eq integer_dup_items boolean_yankdup) integer_div integer_yank) exec_dup_items) exec_dup_times () exec_y (print_boolean integer_yank exec_do*while (exec_eq integer_yankdup exec_yankdup integer_min exec_y_when_autoconstructing ()))))
Errors: [0 0 0 0 0 0 0 1 0 0]
Total: 1
Mean: 0.1
Genome size: 46
Size: 61
Percent parens: 0.246
--- Population Statistics ---
Average total errors in population: 4.972
Median total errors in population: 4
Error averages by case: (0.645 0.651 0.455 0.615 0.618 0.227 0.453 0.431 0.614 0.263)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 47.604
Average program size in population (points): 65.725
Average percent parens in population: 0.274
Minimum age in population: 7.0
Maximum age in population: 7.0
Average age in population: 7.0
Median age in population: 7.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.01
Error (vector) diversity:			 0.038
Behavioral diversity:				 0.154
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 5276659
--- Timings ---
Current time: 1559593810631 milliseconds
Total Time:          20.1 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:         9.0 seconds, 44.9%
Fitness Testing:      7.8 seconds, 38.7%
Report:               3.2 seconds, 15.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 202
Test mean error for best: 0.20200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -35                 | Program output: -35                
Correct output: -25                 | Program output: -25                
Correct output: -16                 | Program output: -16                
Correct output: -48                 | Program output: -48                
Correct output: -64                 | Program output: -64                
Correct output: -88                 | Program output: -88                
Correct output: -9                  | Program output: -9                 
Correct output: -22                 | Program output: -22                
Correct output: -89                 | Program output: -89                
Correct output: -3                  | Program output: -3                 
Correct output: 92                  | Program output: 92                 
Correct output: 90                  | Program output: 90                 
Correct output: -63                 | Program output: -63                
Correct output: 83                  | Program output: 83                 
Correct output: -93                 | Program output: -93                
Correct output: 9                   | Program output: 9                  
Correct output: 8                   | Program output: 20                 
Correct output: 6                   | Program output: 6                  
Correct output: 0                   | Program output: 0                  
Correct output: 9                   | Program output: 66                 
Correct output: 33                  | Program output: 33                 
Correct output: 11                  | Program output: 11                 
Correct output: 11                  | Program output: 11                 
Correct output: 29                  | Program output: 43                 
Correct output: 1                   | Program output: 1                  
Correct output: 45                  | Program output: 45                 
Correct output: 40                  | Program output: 40                 
Correct output: 32                  | Program output: 60                 
Correct output: 10                  | Program output: 10                 
Correct output: 6                   | Program output: 6                  
Correct output: 38                  | Program output: 38                 
Correct output: 4                   | Program output: 4                  
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 12                 
Correct output: 0                   | Program output: 0                  
Correct output: -23                 | Program output: -23                
Correct output: -68                 | Program output: -68                
Correct output: -98                 | Program output: -98                
Correct output: -63                 | Program output: -40                
Correct output: -90                 | Program output: -43                
Correct output: 13                  | Program output: 13                 
Correct output: -63                 | Program output: -54                
Correct output: -66                 | Program output: 34                 
Correct output: -80                 | Program output: -80                
Correct output: -98                 | Program output: -98                
Correct output: -66                 | Program output: -50                
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -89                
Correct output: -99                 | Program output: -99                
Correct output: 15                  | Program output: 16                 
Correct output: -90                 | Program output: -62                
Correct output: -82                 | Program output: -82                
Correct output: -29                 | Program output: 13                 
Correct output: -97                 | Program output: -97                
Correct output: -9                  | Program output: -9                 
Correct output: -51                 | Program output: -51                
Correct output: -59                 | Program output: -59                
Correct output: -49                 | Program output: -49                
Correct output: -40                 | Program output: -40                
Correct output: -86                 | Program output: -86                
Correct output: -69                 | Program output: -5                 
Correct output: -14                 | Program output: -14                
Correct output: -62                 | Program output: -62                
Correct output: -74                 | Program output: -74                
Correct output: -43                 | Program output: -43                
Correct output: -89                 | Program output: -89                
Correct output: 22                  | Program output: 27                 
Correct output: -44                 | Program output: -44                
Correct output: -98                 | Program output: -98                
Correct output: -86                 | Program output: -86                
Correct output: -42                 | Program output: -42                
Correct output: -66                 | Program output: -24                
Correct output: -94                 | Program output: -94                
Correct output: -84                 | Program output: -84                
Correct output: -85                 | Program output: -85                
Correct output: -89                 | Program output: -89                
Correct output: 15                  | Program output: 15                 
Correct output: -93                 | Program output: -93                
Correct output: -73                 | Program output: -73                
Correct output: -73                 | Program output: -50                
Correct output: -99                 | Program output: -16                
Correct output: -89                 | Program output: -89                
Correct output: -84                 | Program output: -84                
Correct output: -17                 | Program output: -17                
Correct output: 37                  | Program output: 50                 
Correct output: -53                 | Program output: 6                  
Correct output: -68                 | Program output: -68                
Correct output: -58                 | Program output: -58                
Correct output: 14                  | Program output: 14                 
Correct output: -77                 | Program output: -77                
Correct output: -33                 | Program output: -33                
Correct output: -96                 | Program output: -96                
Correct output: -33                 | Program output: -12                
Correct output: -90                 | Program output: -90                
Correct output: -46                 | Program output: -46                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 0, :instruction tagged_580} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_while} {:close 0, :instruction in3} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_eq} {:close 1, :instruction in3} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_dup_times} {:close 0, :instruction print_newline} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_not})
Lexicase best program: (in1 in4 boolean_or boolean_frominteger in3 integer_min in2 integer_min integer_empty print_integer integer_max tagged_580 integer_dup exec_rot () (boolean_flush integer_inc exec_while (in3 exec_yankdup exec_swap (boolean_invert_first_then_and) () exec_s_when_autoconstructing (exec_y () boolean_rot exec_dup_items exec_pop (exec_eq in3) exec_yank exec_while (exec_do*range (boolean_eq integer_dup_items boolean_yankdup boolean_yankdup) integer_div integer_yank) boolean_shove exec_dup_items) (integer_div boolean_empty exec_dup_times () print_newline print_boolean exec_do*while (exec_stackdepth in4 exec_eq boolean_dup integer_yankdup integer_min boolean_not)) ())) ())
Lexicase best errors: [0 0 0 0 0 1 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 68
Percent parens: 0.235
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 0, :instruction tagged_580} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_while} {:close 0, :instruction in3} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_eq} {:close 1, :instruction in3} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_dup_times} {:close 0, :instruction print_newline} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_not})
Zero cases best program: (in1 in4 boolean_or boolean_frominteger in3 integer_min in2 integer_min integer_empty print_integer integer_max tagged_580 integer_dup exec_rot () (boolean_flush integer_inc exec_while (in3 exec_yankdup exec_swap (boolean_invert_first_then_and) () exec_s_when_autoconstructing (exec_y () boolean_rot exec_dup_items exec_pop (exec_eq in3) exec_yank exec_while (exec_do*range (boolean_eq integer_dup_items boolean_yankdup boolean_yankdup) integer_div integer_yank) boolean_shove exec_dup_items) (integer_div boolean_empty exec_dup_times () print_newline print_boolean exec_do*while (exec_stackdepth in4 exec_eq boolean_dup integer_yankdup integer_min boolean_not)) ())) ())
Zero cases best errors: [0 0 0 0 0 1 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 68
Percent parens: 0.235
--- Lexicase Population Statistics ---
Count of elite individuals by case: (334 333 516 543 545 476 494 750 740 543)
Population mean number of elite cases: 5.27
Count of perfect (error zero) individuals by case: (334 333 516 543 545 476 494 750 740 543)
Population mean number of perfect (error zero) cases: 5.27
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_empty} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_dup_times} {:close 0, :instruction tagged_580} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction print_boolean} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_y} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_eq} {:close 1, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*range} {:close 0, :instruction tag_exec_43} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_dup} {:close 1, :instruction exec_dup_items} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_y} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 2, :instruction boolean_dup} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_y_when_autoconstructing})
Best program: (in1 exec_when (boolean_empty) in3 integer_min in2 integer_min boolean_empty print_integer exec_do*range () exec_dup_times (tagged_580 integer_dup exec_while (exec_y_when_autoconstructing (in3 exec_swap (print_boolean boolean_invert_first_then_and) () print_boolean exec_s_when_autoconstructing (exec_y () integer_fromboolean exec_do*count (exec_pop (exec_shove (exec_eq in3) in3 exec_yank integer_flush boolean_xor exec_do*range (tag_exec_43 (boolean_yankdup) integer_yank) boolean_not boolean_dup) exec_dup_items) exec_dup_times () exec_y (print_boolean exec_rot (boolean_dup) () (exec_eq integer_yankdup exec_yankdup integer_min boolean_not exec_y_when_autoconstructing ()))) () ()))))
Errors: [0 0 0 0 0 1 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 50
Size: 73
Percent parens: 0.315
--- Population Statistics ---
Average total errors in population: 4.726
Median total errors in population: 3
Error averages by case: (0.666 0.667 0.484 0.457 0.455 0.524 0.506 0.25 0.26 0.457)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 48.704
Average program size in population (points): 67.178
Average percent parens in population: 0.274
Minimum age in population: 8.0
Maximum age in population: 8.0
Average age in population: 8.0
Median age in population: 8.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.01
Error (vector) diversity:			 0.043
Behavioral diversity:				 0.166
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 5788722
--- Timings ---
Current time: 1559593812577 milliseconds
Total Time:          22.3 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        10.1 seconds, 45.4%
Fitness Testing:      8.4 seconds, 37.6%
Report:               3.7 seconds, 16.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 0
Test mean error for best: 0.00000
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -35                 | Program output: -35                
Correct output: -25                 | Program output: -25                
Correct output: -16                 | Program output: -16                
Correct output: -48                 | Program output: -48                
Correct output: -64                 | Program output: -64                
Correct output: -88                 | Program output: -88                
Correct output: -9                  | Program output: -9                 
Correct output: -22                 | Program output: -22                
Correct output: -89                 | Program output: -89                
Correct output: -3                  | Program output: -3                 
Correct output: 92                  | Program output: 92                 
Correct output: 90                  | Program output: 90                 
Correct output: -63                 | Program output: -63                
Correct output: 83                  | Program output: 83                 
Correct output: -93                 | Program output: -93                
Correct output: 9                   | Program output: 9                  
Correct output: 8                   | Program output: 8                  
Correct output: 6                   | Program output: 6                  
Correct output: 0                   | Program output: 0                  
Correct output: 9                   | Program output: 9                  
Correct output: 33                  | Program output: 33                 
Correct output: 11                  | Program output: 11                 
Correct output: 11                  | Program output: 11                 
Correct output: 29                  | Program output: 29                 
Correct output: 1                   | Program output: 1                  
Correct output: 45                  | Program output: 45                 
Correct output: 40                  | Program output: 40                 
Correct output: 32                  | Program output: 32                 
Correct output: 10                  | Program output: 10                 
Correct output: 6                   | Program output: 6                  
Correct output: 38                  | Program output: 38                 
Correct output: 4                   | Program output: 4                  
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 12                 
Correct output: 0                   | Program output: 0                  
Correct output: -23                 | Program output: -23                
Correct output: -68                 | Program output: -68                
Correct output: -98                 | Program output: -98                
Correct output: -63                 | Program output: -63                
Correct output: -90                 | Program output: -90                
Correct output: 13                  | Program output: 13                 
Correct output: -63                 | Program output: -63                
Correct output: -66                 | Program output: -66                
Correct output: -80                 | Program output: -80                
Correct output: -98                 | Program output: -98                
Correct output: -66                 | Program output: -66                
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -89                
Correct output: -99                 | Program output: -99                
Correct output: 15                  | Program output: 15                 
Correct output: -90                 | Program output: -90                
Correct output: -82                 | Program output: -82                
Correct output: -29                 | Program output: -29                
Correct output: -97                 | Program output: -97                
Correct output: -9                  | Program output: -9                 
Correct output: -51                 | Program output: -51                
Correct output: -59                 | Program output: -59                
Correct output: -49                 | Program output: -49                
Correct output: -40                 | Program output: -40                
Correct output: -86                 | Program output: -86                
Correct output: -69                 | Program output: -69                
Correct output: -14                 | Program output: -14                
Correct output: -62                 | Program output: -62                
Correct output: -74                 | Program output: -74                
Correct output: -43                 | Program output: -43                
Correct output: -89                 | Program output: -89                
Correct output: 22                  | Program output: 22                 
Correct output: -44                 | Program output: -44                
Correct output: -98                 | Program output: -98                
Correct output: -86                 | Program output: -86                
Correct output: -42                 | Program output: -42                
Correct output: -66                 | Program output: -66                
Correct output: -94                 | Program output: -94                
Correct output: -84                 | Program output: -84                
Correct output: -85                 | Program output: -85                
Correct output: -89                 | Program output: -89                
Correct output: 15                  | Program output: 15                 
Correct output: -93                 | Program output: -93                
Correct output: -73                 | Program output: -73                
Correct output: -73                 | Program output: -73                
Correct output: -99                 | Program output: -99                
Correct output: -89                 | Program output: -89                
Correct output: -84                 | Program output: -84                
Correct output: -17                 | Program output: -17                
Correct output: 37                  | Program output: 37                 
Correct output: -53                 | Program output: -53                
Correct output: -68                 | Program output: -68                
Correct output: -58                 | Program output: -58                
Correct output: 14                  | Program output: 14                 
Correct output: -77                 | Program output: -77                
Correct output: -33                 | Program output: -33                
Correct output: -96                 | Program output: -96                
Correct output: -33                 | Program output: -33                
Correct output: -90                 | Program output: -90                
Correct output: -46                 | Program output: -46                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 0, :instruction in2} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction print_newline} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 1, :instruction in3} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_y} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_not})
Lexicase best program: (in1 in4 boolean_swap in3 exec_dup (integer_min in2 integer_empty) boolean_frominteger integer_min boolean_empty print_integer integer_yank exec_swap (exec_while (exec_y_when_autoconstructing (in3 boolean_xor boolean_frominteger print_newline) boolean_flush boolean_rot exec_dup_items exec_dup_items exec_pop (exec_y_when_autoconstructing () integer_yankdup in3) exec_yank exec_while (boolean_xor exec_do*range (boolean_eq integer_dup_items integer_div integer_yank) boolean_empty exec_dup_times () integer_eq exec_y (print_boolean exec_eq integer_yankdup exec_yankdup integer_min boolean_not)))) ())
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 58
Percent parens: 0.207
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 0, :instruction in2} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction print_newline} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 1, :instruction in3} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_y} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_not})
Zero cases best program: (in1 in4 boolean_swap in3 exec_dup (integer_min in2 integer_empty) boolean_frominteger integer_min boolean_empty print_integer integer_yank exec_swap (exec_while (exec_y_when_autoconstructing (in3 boolean_xor boolean_frominteger print_newline) boolean_flush boolean_rot exec_dup_items exec_dup_items exec_pop (exec_y_when_autoconstructing () integer_yankdup in3) exec_yank exec_while (boolean_xor exec_do*range (boolean_eq integer_dup_items integer_div integer_yank) boolean_empty exec_dup_times () integer_eq exec_y (print_boolean exec_eq integer_yankdup exec_yankdup integer_min boolean_not)))) ())
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 58
Percent parens: 0.207
--- Lexicase Population Statistics ---
Count of elite individuals by case: (472 694 323 481 480 323 323 472 478 538)
Population mean number of elite cases: 4.58
Count of perfect (error zero) individuals by case: (472 694 323 481 480 323 323 472 478 538)
Population mean number of perfect (error zero) cases: 4.58
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 0, :instruction in2} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction print_newline} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 1, :instruction in3} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_y} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_not})
Best program: (in1 in4 boolean_swap in3 exec_dup (integer_min in2 integer_empty) boolean_frominteger integer_min boolean_empty print_integer integer_yank exec_swap (exec_while (exec_y_when_autoconstructing (in3 boolean_xor boolean_frominteger print_newline) boolean_flush boolean_rot exec_dup_items exec_dup_items exec_pop (exec_y_when_autoconstructing () integer_yankdup in3) exec_yank exec_while (boolean_xor exec_do*range (boolean_eq integer_dup_items integer_div integer_yank) boolean_empty exec_dup_times () integer_eq exec_y (print_boolean exec_eq integer_yankdup exec_yankdup integer_min boolean_not)))) ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 46
Size: 58
Percent parens: 0.207
--- Population Statistics ---
Average total errors in population: 5.416
Median total errors in population: 4
Error averages by case: (0.528 0.306 0.677 0.519 0.52 0.677 0.677 0.528 0.522 0.462)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 48.169
Average program size in population (points): 66.235
Average percent parens in population: 0.271
Minimum age in population: 9.0
Maximum age in population: 9.0
Average age in population: 9.0
Median age in population: 9.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.011
Error (vector) diversity:			 0.035
Behavioral diversity:				 0.171
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 6328975
--- Timings ---
Current time: 1559593814595 milliseconds
Total Time:          24.3 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        11.2 seconds, 46.2%
Fitness Testing:      9.1 seconds, 37.3%
Report:               3.9 seconds, 16.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 9
Successful program: (in1 in4 boolean_swap in3 exec_dup (integer_min in2 integer_empty) boolean_frominteger integer_min boolean_empty print_integer integer_yank exec_swap (exec_while (exec_y_when_autoconstructing (in3 boolean_xor boolean_frominteger print_newline) boolean_flush boolean_rot exec_dup_items exec_dup_items exec_pop (exec_y_when_autoconstructing () integer_yankdup in3) exec_yank exec_while (boolean_xor exec_do*range (boolean_eq integer_dup_items integer_div integer_yank) boolean_empty exec_dup_times () integer_eq exec_y (print_boolean exec_eq integer_yankdup exec_yankdup integer_min boolean_not)))) ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 58


Auto-simplifying with starting size: 58
step: 0
program: (in1 in4 boolean_swap in3 exec_dup (integer_min in2 integer_empty) boolean_frominteger integer_min boolean_empty print_integer integer_yank exec_swap (exec_while (exec_y_when_autoconstructing (in3 boolean_xor boolean_frominteger print_newline) boolean_flush boolean_rot exec_dup_items exec_dup_items exec_pop (exec_y_when_autoconstructing () integer_yankdup in3) exec_yank exec_while (boolean_xor exec_do*range (boolean_eq integer_dup_items integer_div integer_yank) boolean_empty exec_dup_times () integer_eq exec_y (print_boolean exec_eq integer_yankdup exec_yankdup integer_min boolean_not)))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 58

step: 500
program: (in1 in4 boolean_swap in3 exec_dup (integer_min in2 integer_empty) boolean_frominteger integer_min boolean_empty print_integer integer_yank exec_swap (exec_while (exec_y_when_autoconstructing (in3 boolean_xor boolean_frominteger print_newline) boolean_flush boolean_rot exec_dup_items exec_dup_items exec_pop (exec_y_when_autoconstructing () integer_yankdup in3) exec_yank exec_while (boolean_xor exec_do*range (boolean_eq integer_dup_items integer_div integer_yank) boolean_empty exec_dup_times () integer_eq exec_y (print_boolean exec_eq integer_yankdup exec_yankdup integer_min boolean_not)))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 58

step: 1000
program: (in1 in4 boolean_swap in3 exec_dup (integer_min in2 integer_empty) boolean_frominteger integer_min boolean_empty print_integer integer_yank exec_swap (exec_while (exec_y_when_autoconstructing (in3 boolean_xor boolean_frominteger print_newline) boolean_flush boolean_rot exec_dup_items exec_dup_items exec_pop (exec_y_when_autoconstructing () integer_yankdup in3) exec_yank exec_while (boolean_xor exec_do*range (boolean_eq integer_dup_items integer_div integer_yank) boolean_empty exec_dup_times () integer_eq exec_y (print_boolean exec_eq integer_yankdup exec_yankdup integer_min boolean_not)))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 58

step: 1500
program: (in1 in4 boolean_swap in3 exec_dup (integer_min in2 integer_empty) boolean_frominteger integer_min boolean_empty print_integer integer_yank exec_swap (exec_while (exec_y_when_autoconstructing (in3 boolean_xor boolean_frominteger print_newline) boolean_flush boolean_rot exec_dup_items exec_dup_items exec_pop (exec_y_when_autoconstructing () integer_yankdup in3) exec_yank exec_while (boolean_xor exec_do*range (boolean_eq integer_dup_items integer_div integer_yank) boolean_empty exec_dup_times () integer_eq exec_y (print_boolean exec_eq integer_yankdup exec_yankdup integer_min boolean_not)))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 58

step: 2000
program: (in1 in4 boolean_swap in3 exec_dup (integer_min in2 integer_empty) boolean_frominteger integer_min boolean_empty print_integer integer_yank exec_swap (exec_while (exec_y_when_autoconstructing (in3 boolean_xor boolean_frominteger print_newline) boolean_flush boolean_rot exec_dup_items exec_dup_items exec_pop (exec_y_when_autoconstructing () integer_yankdup in3) exec_yank exec_while (boolean_xor exec_do*range (boolean_eq integer_dup_items integer_div integer_yank) boolean_empty exec_dup_times () integer_eq exec_y (print_boolean exec_eq integer_yankdup exec_yankdup integer_min boolean_not)))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 58

step: 2500
program: (in1 in4 boolean_swap in3 exec_dup (integer_min in2 integer_empty) boolean_frominteger integer_min boolean_empty print_integer integer_yank exec_swap (exec_while (exec_y_when_autoconstructing (in3 boolean_xor boolean_frominteger print_newline) boolean_flush boolean_rot exec_dup_items exec_dup_items exec_pop (exec_y_when_autoconstructing () integer_yankdup in3) exec_yank exec_while (boolean_xor exec_do*range (boolean_eq integer_dup_items integer_div integer_yank) boolean_empty exec_dup_times () integer_eq exec_y (print_boolean exec_eq integer_yankdup exec_yankdup integer_min boolean_not)))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 58

step: 3000
program: (in1 in4 boolean_swap in3 exec_dup (integer_min in2 integer_empty) boolean_frominteger integer_min boolean_empty print_integer integer_yank exec_swap (exec_while (exec_y_when_autoconstructing (in3 boolean_xor boolean_frominteger print_newline) boolean_flush boolean_rot exec_dup_items exec_dup_items exec_pop (exec_y_when_autoconstructing () integer_yankdup in3) exec_yank exec_while (boolean_xor exec_do*range (boolean_eq integer_dup_items integer_div integer_yank) boolean_empty exec_dup_times () integer_eq exec_y (print_boolean exec_eq integer_yankdup exec_yankdup integer_min boolean_not)))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 58

step: 3500
program: (in1 in4 boolean_swap in3 exec_dup (integer_min in2 integer_empty) boolean_frominteger integer_min boolean_empty print_integer integer_yank exec_swap (exec_while (exec_y_when_autoconstructing (in3 boolean_xor boolean_frominteger print_newline) boolean_flush boolean_rot exec_dup_items exec_dup_items exec_pop (exec_y_when_autoconstructing () integer_yankdup in3) exec_yank exec_while (boolean_xor exec_do*range (boolean_eq integer_dup_items integer_div integer_yank) boolean_empty exec_dup_times () integer_eq exec_y (print_boolean exec_eq integer_yankdup exec_yankdup integer_min boolean_not)))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 58

step: 4000
program: (in1 in4 boolean_swap in3 exec_dup (integer_min in2 integer_empty) boolean_frominteger integer_min boolean_empty print_integer integer_yank exec_swap (exec_while (exec_y_when_autoconstructing (in3 boolean_xor boolean_frominteger print_newline) boolean_flush boolean_rot exec_dup_items exec_dup_items exec_pop (exec_y_when_autoconstructing () integer_yankdup in3) exec_yank exec_while (boolean_xor exec_do*range (boolean_eq integer_dup_items integer_div integer_yank) boolean_empty exec_dup_times () integer_eq exec_y (print_boolean exec_eq integer_yankdup exec_yankdup integer_min boolean_not)))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 58

step: 4500
program: (in1 in4 boolean_swap in3 exec_dup (integer_min in2 integer_empty) boolean_frominteger integer_min boolean_empty print_integer integer_yank exec_swap (exec_while (exec_y_when_autoconstructing (in3 boolean_xor boolean_frominteger print_newline) boolean_flush boolean_rot exec_dup_items exec_dup_items exec_pop (exec_y_when_autoconstructing () integer_yankdup in3) exec_yank exec_while (boolean_xor exec_do*range (boolean_eq integer_dup_items integer_div integer_yank) boolean_empty exec_dup_times () integer_eq exec_y (print_boolean exec_eq integer_yankdup exec_yankdup integer_min boolean_not)))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 58

step: 5000
program: (in1 in4 boolean_swap in3 exec_dup (integer_min in2 integer_empty) boolean_frominteger integer_min boolean_empty print_integer integer_yank exec_swap (exec_while (exec_y_when_autoconstructing (in3 boolean_xor boolean_frominteger print_newline) boolean_flush boolean_rot exec_dup_items exec_dup_items exec_pop (exec_y_when_autoconstructing () integer_yankdup in3) exec_yank exec_while (boolean_xor exec_do*range (boolean_eq integer_dup_items integer_div integer_yank) boolean_empty exec_dup_times () integer_eq exec_y (print_boolean exec_eq integer_yankdup exec_yankdup integer_min boolean_not)))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 58

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 0
Test mean error for best: 0.00000
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -35                 | Program output: -35                
Correct output: -25                 | Program output: -25                
Correct output: -16                 | Program output: -16                
Correct output: -48                 | Program output: -48                
Correct output: -64                 | Program output: -64                
Correct output: -88                 | Program output: -88                
Correct output: -9                  | Program output: -9                 
Correct output: -22                 | Program output: -22                
Correct output: -89                 | Program output: -89                
Correct output: -3                  | Program output: -3                 
Correct output: 92                  | Program output: 92                 
Correct output: 90                  | Program output: 90                 
Correct output: -63                 | Program output: -63                
Correct output: 83                  | Program output: 83                 
Correct output: -93                 | Program output: -93                
Correct output: 9                   | Program output: 9                  
Correct output: 8                   | Program output: 8                  
Correct output: 6                   | Program output: 6                  
Correct output: 0                   | Program output: 0                  
Correct output: 9                   | Program output: 9                  
Correct output: 33                  | Program output: 33                 
Correct output: 11                  | Program output: 11                 
Correct output: 11                  | Program output: 11                 
Correct output: 29                  | Program output: 29                 
Correct output: 1                   | Program output: 1                  
Correct output: 45                  | Program output: 45                 
Correct output: 40                  | Program output: 40                 
Correct output: 32                  | Program output: 32                 
Correct output: 10                  | Program output: 10                 
Correct output: 6                   | Program output: 6                  
Correct output: 38                  | Program output: 38                 
Correct output: 4                   | Program output: 4                  
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 12                 
Correct output: 0                   | Program output: 0                  
Correct output: -23                 | Program output: -23                
Correct output: -68                 | Program output: -68                
Correct output: -98                 | Program output: -98                
Correct output: -63                 | Program output: -63                
Correct output: -90                 | Program output: -90                
Correct output: 13                  | Program output: 13                 
Correct output: -63                 | Program output: -63                
Correct output: -66                 | Program output: -66                
Correct output: -80                 | Program output: -80                
Correct output: -98                 | Program output: -98                
Correct output: -66                 | Program output: -66                
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -89                
Correct output: -99                 | Program output: -99                
Correct output: 15                  | Program output: 15                 
Correct output: -90                 | Program output: -90                
Correct output: -82                 | Program output: -82                
Correct output: -29                 | Program output: -29                
Correct output: -97                 | Program output: -97                
Correct output: -9                  | Program output: -9                 
Correct output: -51                 | Program output: -51                
Correct output: -59                 | Program output: -59                
Correct output: -49                 | Program output: -49                
Correct output: -40                 | Program output: -40                
Correct output: -86                 | Program output: -86                
Correct output: -69                 | Program output: -69                
Correct output: -14                 | Program output: -14                
Correct output: -62                 | Program output: -62                
Correct output: -74                 | Program output: -74                
Correct output: -43                 | Program output: -43                
Correct output: -89                 | Program output: -89                
Correct output: 22                  | Program output: 22                 
Correct output: -44                 | Program output: -44                
Correct output: -98                 | Program output: -98                
Correct output: -86                 | Program output: -86                
Correct output: -42                 | Program output: -42                
Correct output: -66                 | Program output: -66                
Correct output: -94                 | Program output: -94                
Correct output: -84                 | Program output: -84                
Correct output: -85                 | Program output: -85                
Correct output: -89                 | Program output: -89                
Correct output: 15                  | Program output: 15                 
Correct output: -93                 | Program output: -93                
Correct output: -73                 | Program output: -73                
Correct output: -73                 | Program output: -73                
Correct output: -99                 | Program output: -99                
Correct output: -89                 | Program output: -89                
Correct output: -84                 | Program output: -84                
Correct output: -17                 | Program output: -17                
Correct output: 37                  | Program output: 37                 
Correct output: -53                 | Program output: -53                
Correct output: -68                 | Program output: -68                
Correct output: -58                 | Program output: -58                
Correct output: 14                  | Program output: 14                 
Correct output: -77                 | Program output: -77                
Correct output: -33                 | Program output: -33                
Correct output: -96                 | Program output: -96                
Correct output: -33                 | Program output: -33                
Correct output: -90                 | Program output: -90                
Correct output: -46                 | Program output: -46                
;;******************************
