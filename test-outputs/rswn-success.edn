#clojush/run{:age-combining-function :average, :age-mediated-parent-selection false, :alignment-deviation 10, :alternation-rate 0.01, :autoconstructive false, :autoconstructive-boolean-rand-enrichment 0, :autoconstructive-clone-probability 0.0, :autoconstructive-diffmeans-children 10, :autoconstructive-diversification-test :gecco2016, :autoconstructive-entropy 0.0, :autoconstructive-fotd false, :autoconstructive-genome-instructions :all, :autoconstructive-improve-or-diversify false, :autoconstructive-integer-rand-enrichment 0, :autoconstructive-si-children 8, :close-increment-rate 0.2, :close-parens-probabilities [0.772 0.206 0.021 0.001], :csv-columns [:generation :location :total-error :push-program-size], :csv-log-filename "/tmp/clojush.csv", :decimation-ratio 1, :decimation-tournament-size 2, :edn-additional-keys [:generation :location], :edn-keys [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors], :edn-log-filename "/tmp/clojush.edn", :epigenetic-markers [:close], :epsilon-lexicase-epsilon nil, :epsilon-lexicase-probability 1, :error-threshold 100976, :evalpush-limit 1600, :evalpush-time-limit 0, :exit-on-success true, :final-report-simplifications 5000, :genetic-operator-probabilities {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}, :individuals-for-novelty-archive-per-generation 0, :json-log-filename "/tmp/clojush.json", :json-log-program-strings false, :label nil, :lexicase-leakage 0.1, :lexicase-slippage 0, :log-fitnesses-for-all-cases false, :maintain-ancestors false, :max-error 5000, :max-generations 2, :max-genome-size-in-initial-program 400, :max-point-evaluations 1.0E101, :max-points 3200, :meta-error-categories [], :normalization :none, :novelty-distance-metric :euclidean, :novelty-number-of-neighbors-k 25, :parent-reversion-probability 1.0, :parent-selection :lexicase, :pop-when-tagging true, :population-size 5, :print-ancestors-of-solution false, :print-cosmos-data false, :print-csv-logs true, :print-edn-logs true, :print-error-frequencies-by-case false, :print-errors true, :print-history false, :print-homology-data false, :print-json-logs true, :print-selection-counts false, :print-timings false, :problem-specific-initial-report #object[xxx], :random-screen false, :record-host nil, :replace-child-that-exceeds-size-limit-with :random, :report-simplifications 0, :return-simplified-on-failure false, :reuse-errors true, :run-uuid #uuid "00000000-0000-0000-0000-000000000000", :self-mate-avoidance-limit 0, :silent-instruction-probability 0.2, :tag-limit 10000, :top-level-pop-code false, :top-level-push-code false, :total-error-method :sum, :tournament-size 7, :track-instruction-maps false, :uniform-addition-and-deletion-rate 0.01, :uniform-addition-rate 0.01, :uniform-close-mutation-rate 0.1, :uniform-combination-and-deletion-rate 0.01, :uniform-deletion-rate 0.01, :uniform-mutation-constant-tweak-rate 0.5, :uniform-mutation-float-gaussian-standard-deviation 1.0, :uniform-mutation-int-gaussian-standard-deviation 1, :uniform-mutation-rate 0.01, :uniform-mutation-string-char-change-rate 0.1, :uniform-mutation-tag-gaussian-standard-deviation 100, :uniform-silence-mutation-rate 0.1, :use-single-thread true}
#clojush/individual{:generation 0, :location 0, :uuid #uuid "00000000-0000-0000-0000-000000000000", :parent-uuids nil, :genetic-operators :random, :program (string_containschar string_eq char_yank exec_empty integer_fromstring boolean_dup_times string_replacefirst), :genome [{:close 1, :instruction string_containschar} {:close 1, :instruction string_eq} {:close 0, :instruction char_yank} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_fromstring} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction string_replacefirst}], :total-error 101054, :errors [0 1000 1 1000 1 1000 1 1000 1 1000 2 1000 2 1000 2 1000 2 1000 2 1000 2 1000 2 1000 3 1000 3 1000 3 1000 3 1000 3 1000 3 1000 3 1000 3 1000 3 1000 3 1000 3 1000 4 1000 5 1000 5 1000 5 1000 5 1000 5 1000 6 1000 7 1000 7 1000 7 1000 7 1000 7 1000 7 1000 8 1000 8 1000 8 1000 8 1000 9 1000 9 1000 9 1000 9 1000 9 1000 9 1000 9 1000 10 1000 10 1000 11 1000 11 1000 11 1000 11 1000 11 1000 11 1000 11 1000 11 1000 12 1000 12 1000 12 1000 13 1000 14 1000 14 1000 14 1000 14 1000 15 1000 15 1000 15 1000 15 1000 15 1000 15 1000 15 1000 15 1000 15 1000 16 1000 16 1000 16 1000 17 1000 17 1000 17 1000 17 1000 17 1000 18 1000 18 1000 18 1000 18 1000 19 1000 19 1000 20 1000 20 1000 20 1000 20 1000 20 1000 20 1000 20 1000 20 1000 20 1000 20 1000 20 1000 20 1000]}
#clojush/individual{:generation 0, :location 1, :uuid #uuid "00000000-0000-0000-0000-000000000000", :parent-uuids nil, :genetic-operators :random, :program (string_swap string_swap char_flush integer_mult char_dup string_last char_dup_items char_flush string_substring char_shove integer_fromchar char_isdigit string_flush boolean_frominteger tag_string_397 string_nth integer_dec boolean_dup_items exec_s (exec_s () () (integer_flush) print_string tag_exec_541 () boolean_flush char_pop) (string_reverse) (char_shove string_shove print_boolean) string_swap string_take string_conjchar string_rot integer_fromchar exec_while (char_iswhitespace exec_do*while () exec_when (exec_dup_times (string_length integer_mult char_flush integer_pop char_iswhitespace string_replacechar string_conjchar integer_sub string_yank string_substring integer_mult) exec_pop () exec_k (string_dup_times char_eq boolean_dup_times) (string_dup_items integer_fromchar integer_pop exec_flush integer_gt string_empty exec_while (integer_empty boolean_shove integer_dup string_concat) boolean_rot exec_rot () (string_concat char_iswhitespace \d) (string_empty exec_empty char_yankdup integer_min exec_yank string_contains tagged_765)) boolean_not integer_yank boolean_or integer_shove exec_if () (boolean_invert_first_then_and string_butlast char_isletter) string_empty integer_sub char_empty string_frominteger) boolean_frominteger integer_eq char_dup_items exec_when () string_flush boolean_flush string_take exec_empty string_flush integer_swap exec_shove (integer_min string_last exec_while () print_char exec_do*range () string_flush string_emptystring)) exec_yankdup boolean_and char_isdigit char_shove integer_dup_times boolean_stackdepth integer_flush integer_pop char_flush string_parse_to_chars exec_eq exec_do*while (integer_dup_items exec_dup_times (\newline)) boolean_stackdepth string_yank char_iswhitespace boolean_dup_times exec_pop (integer_lt string_eq string_empty exec_pop (exec_stackdepth) string_empty) string_replace integer_div boolean_or boolean_yankdup char_frominteger in1 char_dup exec_y (integer_lte integer_fromchar integer_pop) boolean_empty integer_gt char_dup exec_if (exec_stackdepth) (char_isdigit) string_length boolean_rot string_replacefirstchar string_substring integer_shove string_eq string_stackdepth string_butlast \N integer_max print_exec ()), :genome [{:close 0, :instruction string_swap} {:close 0, :instruction string_swap} {:close 0, :instruction char_flush} {:close 1, :instruction integer_mult} {:close 0, :instruction char_dup} {:close 0, :instruction string_last} {:close 1, :instruction char_dup_items} {:close 0, :instruction char_flush} {:close 1, :instruction string_substring} {:close 0, :instruction char_shove} {:close 0, :instruction integer_fromchar} {:close 0, :instruction char_isdigit} {:close 0, :instruction string_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction tag_string_397} {:close 0, :instruction string_nth} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_s} {:close 2, :instruction exec_s} {:close 1, :instruction integer_flush} {:close 0, :instruction print_string} {:close 1, :instruction tag_exec_541} {:close 0, :instruction boolean_flush} {:close 1, :instruction char_pop} {:close 1, :instruction string_reverse} {:close 0, :instruction char_shove} {:close 0, :instruction string_shove} {:close 1, :instruction print_boolean} {:close 0, :instruction string_swap} {:close 2, :instruction string_take} {:close 1, :instruction string_conjchar} {:close 0, :instruction string_rot} {:close 0, :instruction integer_fromchar} {:close 0, :instruction exec_while} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup_times} {:close 0, :instruction string_length} {:close 0, :instruction integer_mult} {:close 0, :instruction char_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction string_replacechar} {:close 0, :instruction string_conjchar} {:close 0, :instruction integer_sub} {:close 0, :instruction string_yank} {:close 0, :instruction string_substring} {:close 1, :instruction integer_mult} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_k} {:close 0, :instruction string_dup_times} {:close 0, :instruction char_eq} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction string_dup_items} {:close 0, :instruction integer_fromchar} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_gt} {:close 0, :instruction string_empty} {:close 0, :instruction exec_while} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup} {:close 1, :instruction string_concat} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_rot} {:close 0, :instruction string_concat} {:close 0, :instruction char_iswhitespace} {:close 1, :instruction \d} {:close 0, :instruction string_empty} {:close 0, :instruction exec_empty} {:close 0, :instruction char_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction exec_yank} {:close 0, :instruction string_contains} {:close 2, :instruction tagged_765} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_butlast} {:close 1, :instruction char_isletter} {:close 0, :instruction string_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction char_empty} {:close 1, :instruction string_frominteger} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction char_dup_items} {:close 1, :instruction exec_when} {:close 0, :instruction string_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction string_take} {:close 0, :instruction exec_empty} {:close 0, :instruction string_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_min} {:close 0, :instruction string_last} {:close 1, :instruction exec_while} {:close 0, :instruction print_char} {:close 1, :instruction exec_do*range} {:close 0, :instruction string_flush} {:close 3, :instruction string_emptystring} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_and} {:close 0, :instruction char_isdigit} {:close 0, :instruction char_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction char_flush} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup_times} {:close 2, :instruction \newline} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction string_yank} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction string_eq} {:close 0, :instruction string_empty} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction string_empty} {:close 1, :instruction string_replace} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction char_frominteger} {:close 0, :instruction in1} {:close 0, :instruction char_dup} {:close 0, :instruction exec_y} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_fromchar} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction char_dup} {:close 0, :instruction exec_if} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction char_isdigit} {:close 0, :instruction string_length} {:close 0, :instruction boolean_rot} {:close 0, :instruction string_replacefirstchar} {:close 0, :instruction string_substring} {:close 0, :instruction integer_shove} {:close 0, :instruction string_eq} {:close 0, :instruction string_stackdepth} {:close 0, :instruction string_butlast} {:close 0, :instruction \N} {:close 0, :instruction integer_max} {:close 0, :instruction print_exec}], :total-error 101054, :errors [0 1000 1 1000 1 1000 1 1000 1 1000 2 1000 2 1000 2 1000 2 1000 2 1000 2 1000 2 1000 3 1000 3 1000 3 1000 3 1000 3 1000 3 1000 3 1000 3 1000 3 1000 3 1000 3 1000 4 1000 5 1000 5 1000 5 1000 5 1000 5 1000 6 1000 7 1000 7 1000 7 1000 7 1000 7 1000 7 1000 8 1000 8 1000 8 1000 8 1000 9 1000 9 1000 9 1000 9 1000 9 1000 9 1000 9 1000 10 1000 10 1000 11 1000 11 1000 11 1000 11 1000 11 1000 11 1000 11 1000 11 1000 12 1000 12 1000 12 1000 13 1000 14 1000 14 1000 14 1000 14 1000 15 1000 15 1000 15 1000 15 1000 15 1000 15 1000 15 1000 15 1000 15 1000 16 1000 16 1000 16 1000 17 1000 17 1000 17 1000 17 1000 17 1000 18 1000 18 1000 18 1000 18 1000 19 1000 19 1000 20 1000 20 1000 20 1000 20 1000 20 1000 20 1000 20 1000 20 1000 20 1000 20 1000 20 1000 20 1000]}
#clojush/individual{:generation 0, :location 2, :uuid #uuid "00000000-0000-0000-0000-000000000000", :parent-uuids nil, :genetic-operators :random, :program (string_contains string_rot char_dup_items string_parse_to_chars tagged_934 integer_fromchar string_stackdepth exec_do*while (\newline exec_noop exec_yank) integer_dec char_swap string_fromchar print_string string_rest boolean_eq string_replacechar boolean_yankdup char_dup_items char_iswhitespace integer_dup integer_lte integer_swap), :genome [{:close 1, :instruction string_contains} {:close 0, :instruction string_rot} {:close 1, :instruction char_dup_items} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction tagged_934} {:close 0, :instruction integer_fromchar} {:close 0, :instruction string_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction \newline} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction char_swap} {:close 0, :instruction string_fromchar} {:close 0, :instruction print_string} {:close 0, :instruction string_rest} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_replacechar} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction char_dup_items} {:close 1, :instruction char_iswhitespace} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_swap}], :total-error 100976, :errors [1 1000 1 1000 1 1000 0 1000 1 1000 1 1000 1 1000 1 1000 2 1000 2 1000 2 1000 2 1000 2 1000 2 1000 3 1000 2 1000 2 1000 2 1000 2 1000 2 1000 2 1000 3 1000 3 1000 3 1000 4 1000 5 1000 5 1000 5 1000 5 1000 5 1000 6 1000 6 1000 6 1000 6 1000 6 1000 6 1000 7 1000 7 1000 8 1000 7 1000 8 1000 8 1000 8 1000 8 1000 8 1000 8 1000 8 1000 9 1000 9 1000 10 1000 10 1000 10 1000 10 1000 10 1000 10 1000 10 1000 10 1000 11 1000 11 1000 11 1000 12 1000 13 1000 13 1000 13 1000 13 1000 15 1000 14 1000 14 1000 14 1000 14 1000 14 1000 14 1000 14 1000 14 1000 15 1000 15 1000 15 1000 16 1000 16 1000 16 1000 16 1000 16 1000 17 1000 17 1000 17 1000 17 1000 18 1000 18 1000 20 1000 19 1000 20 1000 19 1000 19 1000 19 1000 19 1000 20 1000 20 1000 19 1000 19 1000 19 1000]}
#clojush/individual{:generation 0, :location 3, :uuid #uuid "00000000-0000-0000-0000-000000000000", :parent-uuids nil, :genetic-operators :random, :program (exec_do*count (string_parse_to_chars \c string_empty boolean_or string_replacefirstchar exec_stackdepth char_eq exec_rot (string_butlast string_contains integer_flush boolean_empty string_last boolean_swap boolean_swap) (exec_y () exec_dup_times (integer_yankdup boolean_or integer_fromboolean char_frominteger)) (exec_do*range () integer_fromchar) integer_fromstring) tagged_626 string_split integer_mod char_swap string_substring integer_pop string_split boolean_flush integer_eq string_substring integer_rot string_dup_items boolean_and integer_flush integer_yankdup string_dup boolean_stackdepth print_boolean string_parse_to_chars string_concat print_string integer_lt integer_gte integer_mult string_stackdepth string_containschar boolean_and \newline boolean_or boolean_swap string_parse_to_chars integer_fromboolean integer_swap string_length string_concat string_swap integer_fromchar \space exec_rot () (integer_yank exec_do*range (exec_swap (integer_lt string_parse_to_chars integer_div exec_do*count (exec_do*times () integer_add integer_lt string_rest boolean_not string_empty boolean_or exec_yankdup) tagged_31 integer_rot) (exec_eq boolean_xor) integer_dup string_split \space integer_stackdepth string_nth string_replacefirst integer_div) boolean_empty char_shove integer_add string_conjchar string_first integer_mult) () string_length exec_flush boolean_swap string_replacechar boolean_invert_first_then_and string_dup string_flush boolean_yank boolean_yank char_dup_times string_rot tag_char_546 char_dup_times string_emptystring string_pop boolean_shove string_length char_yankdup char_isletter \space string_parse_to_chars string_conjchar char_eq boolean_swap integer_empty boolean_not integer_yank print_char exec_stackdepth string_parse_to_chars exec_do*range (tag_boolean_757 string_dup_times) string_removechar exec_dup (exec_if (integer_dup) (boolean_not integer_add string_emptystring boolean_not char_allfromstring print_exec (print_newline boolean_dup_items integer_fromstring integer_lte) integer_min boolean_frominteger char_isdigit integer_rot exec_shove (char_frominteger exec_dup_times (tag_integer_43) integer_min char_dup) string_replacechar) string_last) exec_yankdup string_replacechar exec_when (exec_dup_items) exec_yankdup integer_yankdup integer_fromboolean tag_string_638 string_take exec_do*times (exec_do*range () exec_noop) string_split exec_when (string_removechar string_nth) print_newline char_iswhitespace char_rot exec_eq string_replacefirstchar string_split integer_rot string_pop string_shove integer_flush string_emptystring integer_dup_times string_replacechar exec_empty boolean_pop integer_inc print_integer string_take string_reverse exec_empty string_emptystring string_indexofchar string_first string_indexofchar exec_dup (string_shove boolean_invert_second_then_and exec_empty char_pop) integer_flush integer_shove exec_eq boolean_dup_times string_contains exec_shove (integer_mod exec_do*while (exec_rot () (exec_yankdup string_yank) (exec_string_iterate () integer_rot integer_add "^ ?  45z '" string_flush exec_when (string_emptystring char_allfromstring print_boolean boolean_rot exec_flush integer_fromstring) char_yank) char_frominteger integer_add char_empty boolean_pop)) print_string boolean_invert_second_then_and exec_do*while (boolean_or char_pop) integer_inc integer_dup_items tag_string_189 print_newline string_rest char_frominteger string_first boolean_frominteger boolean_frominteger integer_div integer_dup integer_gte string_dup_items exec_yankdup string_butlast integer_lt integer_eq print_newline integer_dup boolean_eq string_substring exec_do*count (char_pop string_take) integer_yankdup string_last char_isletter boolean_pop \newline exec_swap (char_shove string_pop) (string_split boolean_or string_parse_to_chars string_fromboolean) string_first boolean_swap string_yank print_char char_dup exec_k () (char_shove string_replacechar) string_swap exec_flush integer_add boolean_dup exec_empty exec_while (integer_lte exec_while () string_removechar) string_occurrencesofchar \newline boolean_swap char_isletter boolean_yank char_eq string_eq char_iswhitespace char_pop boolean_invert_first_then_and exec_eq integer_max string_frominteger string_substring boolean_dup_items boolean_yankdup string_shove char_empty char_allfromstring exec_when (print_integer string_stackdepth) print_string char_swap char_isdigit string_conjchar exec_swap () (integer_yankdup) integer_dup_items tagged_865 string_frominteger integer_dup_items integer_rot integer_stackdepth string_parse_to_chars boolean_pop char_iswhitespace exec_dup_times (integer_lte) string_yank boolean_stackdepth string_dup integer_eq string_replacefirstchar string_removechar integer_dup_items print_boolean integer_fromchar), :genome [{:close 0, :instruction exec_do*count} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction \c} {:close 0, :instruction string_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction string_replacefirstchar} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction char_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction string_butlast} {:close 0, :instruction string_contains} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction string_last} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_swap} {:close 1, :instruction exec_y} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction char_frominteger} {:close 1, :instruction exec_do*range} {:close 1, :instruction integer_fromchar} {:close 1, :instruction integer_fromstring} {:close 0, :instruction tagged_626} {:close 0, :instruction string_split} {:close 0, :instruction integer_mod} {:close 0, :instruction char_swap} {:close 0, :instruction string_substring} {:close 0, :instruction integer_pop} {:close 0, :instruction string_split} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_eq} {:close 0, :instruction string_substring} {:close 1, :instruction integer_rot} {:close 0, :instruction string_dup_items} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_yankdup} {:close 1, :instruction string_dup} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction string_concat} {:close 0, :instruction print_string} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_mult} {:close 0, :instruction string_stackdepth} {:close 0, :instruction string_containschar} {:close 2, :instruction boolean_and} {:close 0, :instruction \newline} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_swap} {:close 0, :instruction string_length} {:close 1, :instruction string_concat} {:close 0, :instruction string_swap} {:close 0, :instruction integer_fromchar} {:close 0, :instruction \space} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_add} {:close 0, :instruction integer_lt} {:close 0, :instruction string_rest} {:close 0, :instruction boolean_not} {:close 0, :instruction string_empty} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_yankdup} {:close 0, :instruction tagged_31} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_dup} {:close 0, :instruction string_split} {:close 0, :instruction \space} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction string_nth} {:close 0, :instruction string_replacefirst} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_empty} {:close 0, :instruction char_shove} {:close 0, :instruction integer_add} {:close 0, :instruction string_conjchar} {:close 0, :instruction string_first} {:close 2, :instruction integer_mult} {:close 0, :instruction string_length} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_swap} {:close 0, :instruction string_replacechar} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_dup} {:close 2, :instruction string_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction char_dup_times} {:close 0, :instruction string_rot} {:close 0, :instruction tag_char_546} {:close 0, :instruction char_dup_times} {:close 0, :instruction string_emptystring} {:close 0, :instruction string_pop} {:close 0, :instruction boolean_shove} {:close 0, :instruction string_length} {:close 0, :instruction char_yankdup} {:close 0, :instruction char_isletter} {:close 1, :instruction \space} {:close 1, :instruction string_parse_to_chars} {:close 1, :instruction string_conjchar} {:close 0, :instruction char_eq} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 0, :instruction print_char} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction exec_do*range} {:close 0, :instruction tag_boolean_757} {:close 1, :instruction string_dup_times} {:close 1, :instruction string_removechar} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_if} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction string_emptystring} {:close 0, :instruction boolean_not} {:close 0, :instruction char_allfromstring} {:close 0, :instruction print_exec} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_fromstring} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction char_isdigit} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction char_frominteger} {:close 0, :instruction exec_dup_times} {:close 1, :instruction tag_integer_43} {:close 0, :instruction integer_min} {:close 1, :instruction char_dup} {:close 1, :instruction string_replacechar} {:close 1, :instruction string_last} {:close 0, :instruction exec_yankdup} {:close 1, :instruction string_replacechar} {:close 0, :instruction exec_when} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction tag_string_638} {:close 0, :instruction string_take} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_do*range} {:close 2, :instruction exec_noop} {:close 0, :instruction string_split} {:close 0, :instruction exec_when} {:close 0, :instruction string_removechar} {:close 1, :instruction string_nth} {:close 0, :instruction print_newline} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction char_rot} {:close 2, :instruction exec_eq} {:close 0, :instruction string_replacefirstchar} {:close 0, :instruction string_split} {:close 0, :instruction integer_rot} {:close 1, :instruction string_pop} {:close 0, :instruction string_shove} {:close 0, :instruction integer_flush} {:close 1, :instruction string_emptystring} {:close 1, :instruction integer_dup_times} {:close 0, :instruction string_replacechar} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_inc} {:close 0, :instruction print_integer} {:close 0, :instruction string_take} {:close 0, :instruction string_reverse} {:close 0, :instruction exec_empty} {:close 0, :instruction string_emptystring} {:close 1, :instruction string_indexofchar} {:close 0, :instruction string_first} {:close 0, :instruction string_indexofchar} {:close 0, :instruction exec_dup} {:close 0, :instruction string_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_empty} {:close 1, :instruction char_pop} {:close 2, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction string_contains} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_yankdup} {:close 1, :instruction string_yank} {:close 1, :instruction exec_string_iterate} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_add} {:close 0, :instruction "^ ?  45z '"} {:close 0, :instruction string_flush} {:close 0, :instruction exec_when} {:close 0, :instruction string_emptystring} {:close 0, :instruction char_allfromstring} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_fromstring} {:close 1, :instruction char_yank} {:close 0, :instruction char_frominteger} {:close 0, :instruction integer_add} {:close 0, :instruction char_empty} {:close 2, :instruction boolean_pop} {:close 0, :instruction print_string} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_or} {:close 1, :instruction char_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 0, :instruction tag_string_189} {:close 0, :instruction print_newline} {:close 0, :instruction string_rest} {:close 0, :instruction char_frominteger} {:close 0, :instruction string_first} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 1, :instruction string_dup_items} {:close 1, :instruction exec_yankdup} {:close 1, :instruction string_butlast} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_eq} {:close 0, :instruction print_newline} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_eq} {:close 1, :instruction string_substring} {:close 0, :instruction exec_do*count} {:close 0, :instruction char_pop} {:close 1, :instruction string_take} {:close 0, :instruction integer_yankdup} {:close 1, :instruction string_last} {:close 0, :instruction char_isletter} {:close 0, :instruction boolean_pop} {:close 0, :instruction \newline} {:close 0, :instruction exec_swap} {:close 0, :instruction char_shove} {:close 1, :instruction string_pop} {:close 0, :instruction string_split} {:close 0, :instruction boolean_or} {:close 0, :instruction string_parse_to_chars} {:close 1, :instruction string_fromboolean} {:close 0, :instruction string_first} {:close 0, :instruction boolean_swap} {:close 0, :instruction string_yank} {:close 0, :instruction print_char} {:close 0, :instruction char_dup} {:close 1, :instruction exec_k} {:close 0, :instruction char_shove} {:close 1, :instruction string_replacechar} {:close 0, :instruction string_swap} {:close 1, :instruction exec_flush} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_while} {:close 2, :instruction string_removechar} {:close 0, :instruction string_occurrencesofchar} {:close 0, :instruction \newline} {:close 0, :instruction boolean_swap} {:close 0, :instruction char_isletter} {:close 0, :instruction boolean_yank} {:close 0, :instruction char_eq} {:close 1, :instruction string_eq} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction char_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_max} {:close 0, :instruction string_frominteger} {:close 0, :instruction string_substring} {:close 2, :instruction boolean_dup_items} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction string_shove} {:close 1, :instruction char_empty} {:close 1, :instruction char_allfromstring} {:close 0, :instruction exec_when} {:close 0, :instruction print_integer} {:close 1, :instruction string_stackdepth} {:close 0, :instruction print_string} {:close 1, :instruction char_swap} {:close 0, :instruction char_isdigit} {:close 0, :instruction string_conjchar} {:close 1, :instruction exec_swap} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_dup_items} {:close 2, :instruction tagged_865} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_pop} {:close 0, :instruction char_iswhitespace} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_lte} {:close 0, :instruction string_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction string_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction string_replacefirstchar} {:close 0, :instruction string_removechar} {:close 1, :instruction integer_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_fromchar}], :total-error 101054, :errors [0 1000 1 1000 1 1000 1 1000 1 1000 2 1000 2 1000 2 1000 2 1000 2 1000 2 1000 2 1000 3 1000 3 1000 3 1000 3 1000 3 1000 3 1000 3 1000 3 1000 3 1000 3 1000 3 1000 4 1000 5 1000 5 1000 5 1000 5 1000 5 1000 6 1000 7 1000 7 1000 7 1000 7 1000 7 1000 7 1000 8 1000 8 1000 8 1000 8 1000 9 1000 9 1000 9 1000 9 1000 9 1000 9 1000 9 1000 10 1000 10 1000 11 1000 11 1000 11 1000 11 1000 11 1000 11 1000 11 1000 11 1000 12 1000 12 1000 12 1000 13 1000 14 1000 14 1000 14 1000 14 1000 15 1000 15 1000 15 1000 15 1000 15 1000 15 1000 15 1000 15 1000 15 1000 16 1000 16 1000 16 1000 17 1000 17 1000 17 1000 17 1000 17 1000 18 1000 18 1000 18 1000 18 1000 19 1000 19 1000 20 1000 20 1000 20 1000 20 1000 20 1000 20 1000 20 1000 20 1000 20 1000 20 1000 20 1000 20 1000]}
#clojush/individual{:generation 0, :location 4, :uuid #uuid "00000000-0000-0000-0000-000000000000", :parent-uuids nil, :genetic-operators :random, :program (\O integer_mult integer_div print_exec (print_newline string_yank string_rot boolean_dup_times integer_lt char_yankdup boolean_flush) \newline string_substring boolean_frominteger integer_dec string_removechar char_yankdup exec_shove () string_replacefirst boolean_dup_times exec_string_iterate (exec_while (in1 exec_if () () exec_y (integer_inc string_take) boolean_and boolean_empty)) string_fromboolean integer_flush exec_y (string_replacefirst tagged_420 integer_fromstring integer_max integer_eq boolean_dup_items char_rot integer_shove integer_dup_items string_setchar integer_pop) string_length "M` &" string_replace integer_lte char_pop integer_sub print_newline string_substring boolean_rot integer_fromstring integer_inc string_dup_times boolean_shove boolean_not string_pop boolean_not char_eq integer_min string_pop char_frominteger char_yankdup char_dup boolean_dup_times char_pop char_isletter print_string integer_lt string_shove string_rot exec_pop (string_parse_to_chars string_shove tagged_379 string_parse_to_chars) string_pop string_stackdepth string_removechar string_replace integer_shove boolean_invert_first_then_and exec_rot (exec_eq integer_empty string_indexofchar string_dup_items print_boolean integer_max) (string_dup_items exec_pop (string_replacechar boolean_xor string_flush print_newline char_allfromstring char_allfromstring string_swap integer_yank exec_swap (string_contains) () integer_fromboolean) boolean_xor) (string_yankdup char_dup_items char_swap) integer_yank string_replacechar integer_dup_times boolean_dup char_shove integer_dup_items string_occurrencesofchar boolean_shove integer_dup_times string_dup_times string_yankdup char_iswhitespace integer_inc exec_dup_items string_fromchar tag_exec_974 (exec_shove (boolean_not in1 string_eq) char_rot string_replacechar integer_fromstring) exec_do*range (boolean_or char_shove) integer_yankdup integer_stackdepth integer_mult integer_min char_dup_items integer_mult exec_dup_items integer_max boolean_swap exec_noop string_dup_items integer_empty integer_lt char_swap exec_dup (string_butlast boolean_not string_frominteger integer_fromchar boolean_xor) boolean_pop string_dup_items exec_if () (exec_eq string_split integer_dec string_dup_items exec_eq) boolean_dup_items boolean_flush boolean_not integer_flush integer_dup_items boolean_dup string_replacefirstchar tag_char_665 integer_flush \newline in1 integer_add exec_empty string_yank string_setchar char_dup_items exec_do*range ("" integer_lte string_pop) char_dup string_yankdup boolean_stackdepth), :genome [{:close 0, :instruction \O} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_div} {:close 0, :instruction print_exec} {:close 0, :instruction print_newline} {:close 0, :instruction string_yank} {:close 0, :instruction string_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_lt} {:close 0, :instruction char_yankdup} {:close 1, :instruction boolean_flush} {:close 2, :instruction \newline} {:close 0, :instruction string_substring} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction string_removechar} {:close 0, :instruction char_yankdup} {:close 1, :instruction exec_shove} {:close 0, :instruction string_replacefirst} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_string_iterate} {:close 0, :instruction exec_while} {:close 0, :instruction in1} {:close 2, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction integer_inc} {:close 1, :instruction string_take} {:close 0, :instruction boolean_and} {:close 2, :instruction boolean_empty} {:close 1, :instruction string_fromboolean} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_y} {:close 0, :instruction string_replacefirst} {:close 0, :instruction tagged_420} {:close 0, :instruction integer_fromstring} {:close 0, :instruction integer_max} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction char_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction string_setchar} {:close 1, :instruction integer_pop} {:close 1, :instruction string_length} {:close 0, :instruction "M` &"} {:close 0, :instruction string_replace} {:close 0, :instruction integer_lte} {:close 0, :instruction char_pop} {:close 1, :instruction integer_sub} {:close 1, :instruction print_newline} {:close 1, :instruction string_substring} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_fromstring} {:close 0, :instruction integer_inc} {:close 1, :instruction string_dup_times} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_not} {:close 1, :instruction string_pop} {:close 0, :instruction boolean_not} {:close 1, :instruction char_eq} {:close 2, :instruction integer_min} {:close 0, :instruction string_pop} {:close 0, :instruction char_frominteger} {:close 0, :instruction char_yankdup} {:close 0, :instruction char_dup} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction char_pop} {:close 0, :instruction char_isletter} {:close 0, :instruction print_string} {:close 0, :instruction integer_lt} {:close 0, :instruction string_shove} {:close 0, :instruction string_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction string_shove} {:close 0, :instruction tagged_379} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_pop} {:close 0, :instruction string_stackdepth} {:close 0, :instruction string_removechar} {:close 0, :instruction string_replace} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction string_indexofchar} {:close 0, :instruction string_dup_items} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_max} {:close 0, :instruction string_dup_items} {:close 0, :instruction exec_pop} {:close 0, :instruction string_replacechar} {:close 0, :instruction boolean_xor} {:close 0, :instruction string_flush} {:close 0, :instruction print_newline} {:close 0, :instruction char_allfromstring} {:close 0, :instruction char_allfromstring} {:close 0, :instruction string_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_swap} {:close 2, :instruction string_contains} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction boolean_xor} {:close 0, :instruction string_yankdup} {:close 0, :instruction char_dup_items} {:close 1, :instruction char_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction string_replacechar} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction char_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction string_occurrencesofchar} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction string_dup_times} {:close 0, :instruction string_yankdup} {:close 1, :instruction char_iswhitespace} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_dup_items} {:close 0, :instruction string_fromchar} {:close 0, :instruction tag_exec_974} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction in1} {:close 1, :instruction string_eq} {:close 0, :instruction char_rot} {:close 0, :instruction string_replacechar} {:close 1, :instruction integer_fromstring} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_or} {:close 1, :instruction char_shove} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_min} {:close 0, :instruction char_dup_items} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_noop} {:close 1, :instruction string_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_lt} {:close 0, :instruction char_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_not} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_fromchar} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_pop} {:close 0, :instruction string_dup_items} {:close 1, :instruction exec_if} {:close 0, :instruction exec_eq} {:close 0, :instruction string_split} {:close 0, :instruction integer_dec} {:close 0, :instruction string_dup_items} {:close 1, :instruction exec_eq} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction string_replacefirstchar} {:close 0, :instruction tag_char_665} {:close 1, :instruction integer_flush} {:close 0, :instruction \newline} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 1, :instruction exec_empty} {:close 0, :instruction string_yank} {:close 0, :instruction string_setchar} {:close 0, :instruction char_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction ""} {:close 0, :instruction integer_lte} {:close 1, :instruction string_pop} {:close 1, :instruction char_dup} {:close 1, :instruction string_yankdup} {:close 1, :instruction boolean_stackdepth}], :total-error 109254, :errors [94 1000 94 1000 94 1000 94 1000 93 1000 94 1000 94 1000 94 1000 92 1000 94 1000 93 1000 94 1000 94 1000 94 1000 92 1000 94 1000 94 1000 93 1000 93 1000 94 1000 93 1000 93 1000 93 1000 93 1000 94 1000 92 1000 94 1000 92 1000 93 1000 94 1000 94 1000 93 1000 93 1000 92 1000 93 1000 93 1000 93 1000 94 1000 94 1000 93 1000 92 1000 93 1000 94 1000 92 1000 93 1000 92 1000 94 1000 93 1000 90 1000 93 1000 94 1000 94 1000 92 1000 93 1000 94 1000 93 1000 92 1000 94 1000 93 1000 91 1000 89 1000 90 1000 94 1000 93 1000 90 1000 93 1000 92 1000 92 1000 92 1000 92 1000 94 1000 90 1000 92 1000 91 1000 91 1000 91 1000 91 1000 92 1000 92 1000 92 1000 91 1000 90 1000 90 1000 92 1000 91 1000 93 1000 90 1000 92 1000 94 1000 94 1000 90 1000 94 1000 94 1000 89 1000 92 1000 94 1000 89 1000 89 1000 91 1000 91 1000]}
