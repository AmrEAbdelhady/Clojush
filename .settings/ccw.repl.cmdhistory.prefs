cmdhistory=[";; Switching to clojush.examples.simple-regression namespace" ";; Switching to clojush.experimental.calc namespace" "(+ 1 2)" ";; Switching to clojush.experimental.calc namespace" "(+ 1 2)" "(zip/seq-zip '(1 2))" "(zip/seq-zip '(1 2 ))" "(in-ns 'clojush.util)\\n(defn ensure-list [thing] ;; really make-list-if-not-seq, but close enough for here\\n  (if (seq? thing)\\n    thing\\n    (list thing)))\\n(in-ns 'clojush.experimental.calc)" "(zip/seq-zip '(1 2 ))" ";; Switching to clojush.util namespace" "(not-lazy [1 2 3])" "(zip/seq-zip '(1 2 3))" "(zip/seq-zip 3)" "(defn insert_randomly\\n  [thing tree]\\n  (zip/root\\n    (zip/insert-child (first (take (lrand-int (count-points tree))\\n                                   (iterate zip/next (zip/seq-zip tree))))\\n                      thing)))" "(ns clojush.util\\n  (\:require [clojure.math.numeric-tower \:as math]\\n            [clojure.zip \:as zip]\\n            [clojure.walk \:as walk])\\n  (\:use [clojush.globals]\\n        [clojush.random]))" "(defn insert_randomly\\n  [thing tree]\\n  (zip/root\\n    (zip/insert-child (first (take (lrand-int (count-points tree))\\n                                   (iterate zip/next (zip/seq-zip tree))))\\n                      thing)))" "(insert-randomly 99 '(1 (2 3) 4))" "(defn insert-randomly\\n  [thing tree]\\n  (zip/root\\n    (zip/insert-child (first (take (lrand-int (count-points tree))\\n                                   (iterate zip/next (zip/seq-zip tree))))\\n                      thing)))" "(insert-randomly 99 '(1 (2 3) 4))" "(defn insert-randomly\\n  [thing tree]\\n  (zip/root\\n    (zip/insert-child (first (drop (lrand-int (count-points tree))\\n                                   (iterate zip/next (zip/seq-zip tree))))\\n                      thing)))" "(insert-randomly 99 '(1 (2 3) 4))" "(defn insert-randomly\\n  [thing tree]\\n  (zip/root\\n    (zip/insert-left (first (drop (lrand-int (count-points tree))\\n                                   (iterate zip/next (zip/seq-zip tree))))\\n                      thing)))" "(insert-randomly 99 '(1 (2 3) 4))" "(zip/root (zip/insert-left (loop [z (zip/seq-zip '(1 (2 3) 4))\\n                                  i 0]\\n                             (if (\= i 1)\\n                               z\\n                               (recur (zip/next z) \\n                                      (inc i))))\\n                           99))" "(zip/root (zip/insert-left (loop [z (zip/seq-zip '(1 (2 3) 4))\\n                                  i 0]\\n                             (if (\= i 2)\\n                               z\\n                               (recur (zip/next z) \\n                                      (inc i))))\\n                           99))" "(zip/root (zip/insert-left (loop [z (zip/seq-zip '(1 (2 3) 4))\\n                                  i 0]\\n                             (if (\= i 3)\\n                               z\\n                               (recur (zip/next z) \\n                                      (inc i))))\\n                           99))" "(zip/root (zip/insert-left (loop [z (zip/seq-zip '(1 (2 3) 4))\\n                                  i 0]\\n                             (if (\= i 4)\\n                               z\\n                               (recur (zip/next z) \\n                                      (inc i))))\\n                           99))" "(zip/root (zip/insert-left (loop [z (zip/seq-zip '(1 (2 3) 4))\\n                                  i 0]\\n                             (if (\= i 5)\\n                               z\\n                               (recur (zip/next z) \\n                                      (inc i))))\\n                           99))" "(zip/root (zip/insert-left (loop [z (zip/seq-zip '(1 (2 3) 4))\\n                                  i 0]\\n                             (if (\= i 6)\\n                               z\\n                               (recur (zip/next z) \\n                                      (inc i))))\\n                           99))" "(zip/root (zip/insert-left (loop [z (zip/seq-zip '(1 (2 3) 4))\\n                                  i 0]\\n                             (if (\= i 5)\\n                               z\\n                               (recur (zip/next z) \\n                                      (inc i))))\\n                           99))" "(zip/root (zip/insert-left (loop [z (zip/seq-zip '(1 (2 3) 4))\\n                                  i 0]\\n                             (if (\= i 6)\\n                               z\\n                               (recur (zip/next z) \\n                                      (inc i))))\\n                           99))" "(zip/root (zip/insert-left (loop [z (zip/seq-zip '(1 (2 3) 4))\\n                                  i 0]\\n                             (if (\= i 5)\\n                               z\\n                               (recur (zip/next z) \\n                                      (inc i))))\\n                           99))" "(zip/root ((lrand-nth [zip/insert-left zip/insert-right])\\n            (loop [z (zip/seq-zip '(1 (2 3) 4))\\n                   i 0]\\n              (if (\= i 5)\\n                z\\n                (recur (zip/next z) \\n                       (inc i))))\\n                           99))" "(zip/root ((lrand-nth [zip/insert-left zip/insert-right])\\n            (loop [z (zip/seq-zip '(1 (2 3) 4))\\n                   i 0]\\n              (if (\= i 0)\\n                z\\n                (recur (zip/next z) \\n                       (inc i))))\\n                           99))" "(zip/root ((lrand-nth [zip/insert-left zip/insert-right])\\n            (loop [z (zip/seq-zip '(1 (2 3) 4))\\n                   i 0]\\n              (if (\= i 1)\\n                z\\n                (recur (zip/next z) \\n                       (inc i))))\\n                           99))" "(zip/root ((lrand-nth [zip/insert-left zip/insert-right])\\n            (loop [z (zip/seq-zip '(1 (2 3) 4))\\n                   i 0]\\n              (if (\= i 2)\\n                z\\n                (recur (zip/next z) \\n                       (inc i))))\\n                           99))" "(zip/root ((lrand-nth [zip/insert-left zip/insert-right])\\n            (loop [z (zip/seq-zip '(1 (2 3) 4))\\n                   i 0]\\n              (if (\= i 3)\\n                z\\n                (recur (zip/next z) \\n                       (inc i))))\\n                           99))" "(zip/root ((lrand-nth [zip/insert-left zip/insert-right])\\n            (loop [z (zip/seq-zip '(1 (2 3) 4))\\n                   i 0]\\n              (if (\= i 4)\\n                z\\n                (recur (zip/next z) \\n                       (inc i))))\\n                           99))" "(zip/root ((lrand-nth [zip/insert-left zip/insert-right])\\n            (loop [z (zip/seq-zip '(1 (2 3) 4))\\n                   i 0]\\n              (if (\= i 5)\\n                z\\n                (recur (zip/next z) \\n                       (inc i))))\\n                           99))" "(zip/root ((lrand-nth [zip/insert-left zip/insert-right])\\n            (loop [z (zip/seq-zip 0);'(1 (2 3) 4))\\n                   i 0]\\n              (if (\= i 5)\\n                z\\n                (recur (zip/next z) \\n                       (inc i))))\\n                           99))" "(zip/root ((lrand-nth [zip/insert-left zip/insert-right])\\n            (loop [z (zip/seq-zip 0);'(1 (2 3) 4))\\n                   i 0]\\n              (if (\= i 1)\\n                z\\n                (recur (zip/next z) \\n                       (inc i))))\\n                           99))" "(zip/root ((lrand-nth [zip/insert-left zip/insert-right])\\n            (loop [z (zip/seq-zip 0);'(1 (2 3) 4))\\n                   i 0]\\n              (if (\= i 0)\\n                z\\n                (recur (zip/next z) \\n                       (inc i))))\\n                           99))" "(zip/root ((lrand-nth [zip/insert-left zip/insert-right])\\n            (loop [z (zip/seq-zip '(0));'(1 (2 3) 4))\\n                   i 0]\\n              (if (\= i 0)\\n                z\\n                (recur (zip/next z) \\n                       (inc i))))\\n                           99))" "(zip/root ((lrand-nth [zip/insert-left zip/insert-right])\\n            (loop [z (zip/seq-zip '(0));'(1 (2 3) 4))\\n                   i 0]\\n              (if (\= i 1)\\n                z\\n                (recur (zip/next z) \\n                       (inc i))))\\n                           99))" "(defn insert-randomly\\n  [thing place]\\n  (let [tree (ensure-list place)\\n        loc ]\\n    (zip/root\\n      ((lrand-nth [zip/insert-left zip/insert-right])\\n        (loop [z (zip/seq-zip tree) i 0]\\n          (if (\= i \\n                   \\n                   (first (drop (lrand-int (count-points tree))\\n                                   (iterate zip/next (zip/seq-zip tree))))\\n                      thing)))\\n\\n(insert-randomly 99 '(1 (2 3) 4))\\n\\n(count-points '(1 (2 3) 4))\\n\\n(zip/root ((lrand-nth [zip/insert-left zip/insert-right])\\n            (loop [z (zip/seq-zip '(0));'(1 (2 3) 4))\\n                   i 0]\\n              (if (\= i 1)\\n                z\\n                (recur (zip/next z) \\n                       (inc i))))\\n            99))" "(count-points '(1 (2 3) 4))" "(defn insert-randomly\\n  [thing place]\\n  (let [tree (ensure-list place)\\n        loc ]\\n    (zip/root\\n      ((lrand-nth [zip/insert-left zip/insert-right])\\n        (loop [z (zip/seq-zip tree) i 0]\\n          (if (\= i \\n                   \\n                   (first (drop (lrand-int (count-points tree))\\n                                   (iterate zip/next (zip/seq-zip tree))))\\n                      thing)))\\n\\n(insert-randomly 99 '(1 (2 3) 4))\\n\\n(count-points '(1 (2 3) 4))\\n\\n(zip/root ((lrand-nth [zip/insert-left zip/insert-right])\\n            (loop [z (zip/seq-zip '(1 (2 3) 4))\\n                   i 0]\\n              (if (\= i 1)\\n                z\\n                (recur (zip/next z) \\n                       (inc i))))\\n            99))" "(zip/root ((lrand-nth [zip/insert-left zip/insert-right])\\n            (loop [z (zip/seq-zip '(1 (2 3) 4))\\n                   i 0]\\n              (if (\= i 1)\\n                z\\n                (recur (zip/next z) \\n                       (inc i))))\\n            99))" "(zip/root ((lrand-nth [zip/insert-left zip/insert-right])\\n            (loop [z (zip/seq-zip '(1 (2 3) 4))\\n                   i 0]\\n              (if (\= i 5)\\n                z\\n                (recur (zip/next z) \\n                       (inc i))))\\n            99))" "(insert-randomly 99 '(1 (2 3) 4))" "(defn insert-randomly\\n  [thing place]\\n  (let [tree (ensure-list place)\\n        loc (inc (lrand-int (dec (count-points tree))))]\\n    (zip/root\\n      ((lrand-nth [zip/insert-left zip/insert-right])\\n        (loop [z (zip/seq-zip tree) i 0]\\n          (if (\= i loc)\\n            z\\n            (recur (zip/next z) (inc i))))\\n        thing))))" "(insert-randomly 99 '(1 (2 3) 4))" "(defn insert-randomly\\n  \\"Returns lst with thing inserted in a random location. If lst is not a list then\\nit will first be wrapped in a list.\\"\\n  [thing lst]\\n  (let [tree (ensure-list lst)\\n        loc (inc (lrand-int (dec (count-points tree))))]\\n    (zip/root\\n      ((lrand-nth [zip/insert-left zip/insert-right])\\n        (loop [z (zip/seq-zip tree) i 0]\\n          (if (\= i loc)\\n            z\\n            (recur (zip/next z) (inc i))))\\n        thing))))" ";; Switching to clojush.instructions.tag namespace" ";; Switching to clojush.experimental.calc namespace" "(.bs)" ";; Switching to clojush.experimental.calc namespace" "(bt)" "(.printStackTrace *e)" "(+ 1 2)"]
eclipse.preferences.version=1
