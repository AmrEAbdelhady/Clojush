cmdhistory=[";; Switching to clojush.examples.simple-regression namespace" ";; Switching to clojush.experimental.calc namespace" "(+ 1 2)" ";; Switching to clojush.experimental.calc namespace" "(+ 1 2)" "(zip/seq-zip '(1 2))" "(zip/seq-zip '(1 2 ))" "(in-ns 'clojush.util)\\n(defn ensure-list [thing] ;; really make-list-if-not-seq, but close enough for here\\n  (if (seq? thing)\\n    thing\\n    (list thing)))\\n(in-ns 'clojush.experimental.calc)" "(zip/seq-zip '(1 2 ))" ";; Switching to clojush.util namespace" "(not-lazy [1 2 3])" "(zip/seq-zip '(1 2 3))" "(zip/seq-zip 3)" "(defn insert_randomly\\n  [thing tree]\\n  (zip/root\\n    (zip/insert-child (first (take (lrand-int (count-points tree))\\n                                   (iterate zip/next (zip/seq-zip tree))))\\n                      thing)))" "(ns clojush.util\\n  (\:require [clojure.math.numeric-tower \:as math]\\n            [clojure.zip \:as zip]\\n            [clojure.walk \:as walk])\\n  (\:use [clojush.globals]\\n        [clojush.random]))" "(defn insert_randomly\\n  [thing tree]\\n  (zip/root\\n    (zip/insert-child (first (take (lrand-int (count-points tree))\\n                                   (iterate zip/next (zip/seq-zip tree))))\\n                      thing)))" "(insert-randomly 99 '(1 (2 3) 4))" "(defn insert-randomly\\n  [thing tree]\\n  (zip/root\\n    (zip/insert-child (first (take (lrand-int (count-points tree))\\n                                   (iterate zip/next (zip/seq-zip tree))))\\n                      thing)))" "(insert-randomly 99 '(1 (2 3) 4))" "(defn insert-randomly\\n  [thing tree]\\n  (zip/root\\n    (zip/insert-child (first (drop (lrand-int (count-points tree))\\n                                   (iterate zip/next (zip/seq-zip tree))))\\n                      thing)))" "(insert-randomly 99 '(1 (2 3) 4))" "(defn insert-randomly\\n  [thing tree]\\n  (zip/root\\n    (zip/insert-left (first (drop (lrand-int (count-points tree))\\n                                   (iterate zip/next (zip/seq-zip tree))))\\n                      thing)))" "(insert-randomly 99 '(1 (2 3) 4))" "(zip/root (zip/insert-left (loop [z (zip/seq-zip '(1 (2 3) 4))\\n                                  i 0]\\n                             (if (\= i 1)\\n                               z\\n                               (recur (zip/next z) \\n                                      (inc i))))\\n                           99))" "(zip/root (zip/insert-left (loop [z (zip/seq-zip '(1 (2 3) 4))\\n                                  i 0]\\n                             (if (\= i 2)\\n                               z\\n                               (recur (zip/next z) \\n                                      (inc i))))\\n                           99))" "(zip/root (zip/insert-left (loop [z (zip/seq-zip '(1 (2 3) 4))\\n                                  i 0]\\n                             (if (\= i 3)\\n                               z\\n                               (recur (zip/next z) \\n                                      (inc i))))\\n                           99))" "(zip/root (zip/insert-left (loop [z (zip/seq-zip '(1 (2 3) 4))\\n                                  i 0]\\n                             (if (\= i 4)\\n                               z\\n                               (recur (zip/next z) \\n                                      (inc i))))\\n                           99))" "(zip/root (zip/insert-left (loop [z (zip/seq-zip '(1 (2 3) 4))\\n                                  i 0]\\n                             (if (\= i 5)\\n                               z\\n                               (recur (zip/next z) \\n                                      (inc i))))\\n                           99))" "(zip/root (zip/insert-left (loop [z (zip/seq-zip '(1 (2 3) 4))\\n                                  i 0]\\n                             (if (\= i 6)\\n                               z\\n                               (recur (zip/next z) \\n                                      (inc i))))\\n                           99))" "(zip/root (zip/insert-left (loop [z (zip/seq-zip '(1 (2 3) 4))\\n                                  i 0]\\n                             (if (\= i 5)\\n                               z\\n                               (recur (zip/next z) \\n                                      (inc i))))\\n                           99))" "(zip/root (zip/insert-left (loop [z (zip/seq-zip '(1 (2 3) 4))\\n                                  i 0]\\n                             (if (\= i 6)\\n                               z\\n                               (recur (zip/next z) \\n                                      (inc i))))\\n                           99))" "(zip/root (zip/insert-left (loop [z (zip/seq-zip '(1 (2 3) 4))\\n                                  i 0]\\n                             (if (\= i 5)\\n                               z\\n                               (recur (zip/next z) \\n                                      (inc i))))\\n                           99))" "(zip/root ((lrand-nth [zip/insert-left zip/insert-right])\\n            (loop [z (zip/seq-zip '(1 (2 3) 4))\\n                   i 0]\\n              (if (\= i 5)\\n                z\\n                (recur (zip/next z) \\n                       (inc i))))\\n                           99))" "(zip/root ((lrand-nth [zip/insert-left zip/insert-right])\\n            (loop [z (zip/seq-zip '(1 (2 3) 4))\\n                   i 0]\\n              (if (\= i 0)\\n                z\\n                (recur (zip/next z) \\n                       (inc i))))\\n                           99))" "(zip/root ((lrand-nth [zip/insert-left zip/insert-right])\\n            (loop [z (zip/seq-zip '(1 (2 3) 4))\\n                   i 0]\\n              (if (\= i 1)\\n                z\\n                (recur (zip/next z) \\n                       (inc i))))\\n                           99))" "(zip/root ((lrand-nth [zip/insert-left zip/insert-right])\\n            (loop [z (zip/seq-zip '(1 (2 3) 4))\\n                   i 0]\\n              (if (\= i 2)\\n                z\\n                (recur (zip/next z) \\n                       (inc i))))\\n                           99))" "(zip/root ((lrand-nth [zip/insert-left zip/insert-right])\\n            (loop [z (zip/seq-zip '(1 (2 3) 4))\\n                   i 0]\\n              (if (\= i 3)\\n                z\\n                (recur (zip/next z) \\n                       (inc i))))\\n                           99))" "(zip/root ((lrand-nth [zip/insert-left zip/insert-right])\\n            (loop [z (zip/seq-zip '(1 (2 3) 4))\\n                   i 0]\\n              (if (\= i 4)\\n                z\\n                (recur (zip/next z) \\n                       (inc i))))\\n                           99))" "(zip/root ((lrand-nth [zip/insert-left zip/insert-right])\\n            (loop [z (zip/seq-zip '(1 (2 3) 4))\\n                   i 0]\\n              (if (\= i 5)\\n                z\\n                (recur (zip/next z) \\n                       (inc i))))\\n                           99))" "(zip/root ((lrand-nth [zip/insert-left zip/insert-right])\\n            (loop [z (zip/seq-zip 0);'(1 (2 3) 4))\\n                   i 0]\\n              (if (\= i 5)\\n                z\\n                (recur (zip/next z) \\n                       (inc i))))\\n                           99))" "(zip/root ((lrand-nth [zip/insert-left zip/insert-right])\\n            (loop [z (zip/seq-zip 0);'(1 (2 3) 4))\\n                   i 0]\\n              (if (\= i 1)\\n                z\\n                (recur (zip/next z) \\n                       (inc i))))\\n                           99))" "(zip/root ((lrand-nth [zip/insert-left zip/insert-right])\\n            (loop [z (zip/seq-zip 0);'(1 (2 3) 4))\\n                   i 0]\\n              (if (\= i 0)\\n                z\\n                (recur (zip/next z) \\n                       (inc i))))\\n                           99))" "(zip/root ((lrand-nth [zip/insert-left zip/insert-right])\\n            (loop [z (zip/seq-zip '(0));'(1 (2 3) 4))\\n                   i 0]\\n              (if (\= i 0)\\n                z\\n                (recur (zip/next z) \\n                       (inc i))))\\n                           99))" "(zip/root ((lrand-nth [zip/insert-left zip/insert-right])\\n            (loop [z (zip/seq-zip '(0));'(1 (2 3) 4))\\n                   i 0]\\n              (if (\= i 1)\\n                z\\n                (recur (zip/next z) \\n                       (inc i))))\\n                           99))" "(defn insert-randomly\\n  [thing place]\\n  (let [tree (ensure-list place)\\n        loc ]\\n    (zip/root\\n      ((lrand-nth [zip/insert-left zip/insert-right])\\n        (loop [z (zip/seq-zip tree) i 0]\\n          (if (\= i \\n                   \\n                   (first (drop (lrand-int (count-points tree))\\n                                   (iterate zip/next (zip/seq-zip tree))))\\n                      thing)))\\n\\n(insert-randomly 99 '(1 (2 3) 4))\\n\\n(count-points '(1 (2 3) 4))\\n\\n(zip/root ((lrand-nth [zip/insert-left zip/insert-right])\\n            (loop [z (zip/seq-zip '(0));'(1 (2 3) 4))\\n                   i 0]\\n              (if (\= i 1)\\n                z\\n                (recur (zip/next z) \\n                       (inc i))))\\n            99))" "(count-points '(1 (2 3) 4))" "(defn insert-randomly\\n  [thing place]\\n  (let [tree (ensure-list place)\\n        loc ]\\n    (zip/root\\n      ((lrand-nth [zip/insert-left zip/insert-right])\\n        (loop [z (zip/seq-zip tree) i 0]\\n          (if (\= i \\n                   \\n                   (first (drop (lrand-int (count-points tree))\\n                                   (iterate zip/next (zip/seq-zip tree))))\\n                      thing)))\\n\\n(insert-randomly 99 '(1 (2 3) 4))\\n\\n(count-points '(1 (2 3) 4))\\n\\n(zip/root ((lrand-nth [zip/insert-left zip/insert-right])\\n            (loop [z (zip/seq-zip '(1 (2 3) 4))\\n                   i 0]\\n              (if (\= i 1)\\n                z\\n                (recur (zip/next z) \\n                       (inc i))))\\n            99))" "(zip/root ((lrand-nth [zip/insert-left zip/insert-right])\\n            (loop [z (zip/seq-zip '(1 (2 3) 4))\\n                   i 0]\\n              (if (\= i 1)\\n                z\\n                (recur (zip/next z) \\n                       (inc i))))\\n            99))" "(zip/root ((lrand-nth [zip/insert-left zip/insert-right])\\n            (loop [z (zip/seq-zip '(1 (2 3) 4))\\n                   i 0]\\n              (if (\= i 5)\\n                z\\n                (recur (zip/next z) \\n                       (inc i))))\\n            99))" "(insert-randomly 99 '(1 (2 3) 4))" "(defn insert-randomly\\n  [thing place]\\n  (let [tree (ensure-list place)\\n        loc (inc (lrand-int (dec (count-points tree))))]\\n    (zip/root\\n      ((lrand-nth [zip/insert-left zip/insert-right])\\n        (loop [z (zip/seq-zip tree) i 0]\\n          (if (\= i loc)\\n            z\\n            (recur (zip/next z) (inc i))))\\n        thing))))" "(insert-randomly 99 '(1 (2 3) 4))" "(defn insert-randomly\\n  \\"Returns lst with thing inserted in a random location. If lst is not a list then\\nit will first be wrapped in a list.\\"\\n  [thing lst]\\n  (let [tree (ensure-list lst)\\n        loc (inc (lrand-int (dec (count-points tree))))]\\n    (zip/root\\n      ((lrand-nth [zip/insert-left zip/insert-right])\\n        (loop [z (zip/seq-zip tree) i 0]\\n          (if (\= i loc)\\n            z\\n            (recur (zip/next z) (inc i))))\\n        thing))))" ";; Switching to clojush.instructions.tag namespace" ";; Switching to clojush.experimental.calc namespace" "(.bs)" ";; Switching to clojush.experimental.calc namespace" "(bt)" "(.printStackTrace *e)" "(+ 1 2)" ";; Switching to clojush.pushgp.genetic-operators namespace" "(+ 1 2)" "(list? '(1 2 3))" "(list? (concat '(1 2 3) ()))" "(list? (apply list (concat '(1 2 3) ())))" "(apply list (concat '(1 2 3) ()))" "\\n(defn remove-empties \\n  \\"Removes empty sequences from tree t.\\"\\n  [t]\\n  (clojure.walk/postwalk \\n    (fn [node] (if (seq? node) \\n                 (remove \#(and (seq? %) (empty? %)) node)\\n                 node))\\n    t))\\n\\n(defn combine [t1 t2] \\n  \\"Returns a list containing all of the elements of t1 and t2, after making each into\\na list if necessary.\\"\\n  (apply list (concat (ensure-list t1) (ensure-list t2))))\\n\\n\#_(defn one-or-the-other-or-both [t1 t2]\\n  (lrand-nth (concat (repeat 16 t1)\\n                     [t2 t2 (combine t1 t2) (combine t2 t1) \\n                      () () () ()])))                     \\n\\n(defn one-or-the-other-or-both-or-neither [t1 t2]\\n  (lrand-nth [t1 t1 t2 t2 (combine t1 t2) (combine t2 t1) () ()]))" "(defn amalgamate\\n  [t1 t2]\\n  (remove-empties\\n    (if (or (null? t1)\\n            (not (seq? t1))\\n            (null? t2))\\n      (one-or-the-other-or-both-or-neither t1 t2)\\n      (map amalgamate \\n           t1 \\n           (if (seq? t2) \\n             (cycle t2) \\n             (cycle [t2]))))))" "(empty? 3)" "null?" "(defn null? [thing] (and (seq? thing) (empty? thing)))" "(defn amalgamate\\n  [t1 t2]\\n  (remove-empties\\n    (if (or (null? t1)\\n            (not (seq? t1))\\n            (null? t2))\\n      (one-or-the-other-or-both-or-neither t1 t2)\\n      (map amalgamate \\n           t1 \\n           (if (seq? t2) \\n             (cycle t2) \\n             (cycle [t2]))))))" "(defn null? [thing] (and (seq? thing) (empty? thing)))" "(amalgamate '(a (b ((c d) e) f (g h i (j k l) ((m n o p q r) s t u v ((w) x y z)))))\\n            '((1 2) 3 (4 ((5)) 6 7 8 9 10 11)(12 13 14 (15 16 17 18)(19 20) 21 22 23)))" "(amalgamate '(a (b ((c d) e) f (g h i (j k l) ((m n o p q r) s t u v ((w) x y z)))))\\n            '(1 (2 ((3 4) 5) 6 (7 8 9 (10 11 12) ((13 14 15 16 17 18) 19 20 21 22 ((23) 24 25 26))))))" "(a (b ((c d) e) f (g h i (j k l) ((m n o p q r) s t u v ((w) x y z))))" "(amalgamate '(a (b ((c d) e) f (g h i (j k l) ((m n o p q r) s t u v ((w) x y z)))))\\n            '(1 (2 ((3 4) 5) 6 (7 8 9 (10 11 12) ((13 14 15 16 17 18) 19 20 21 22 ((23) 24 25 26))))))" "(.upCase \\"(a (b ((c d) e) f (g h i (j k l) ((m n o p q r) s t u v ((w) x y z)))))\\")" "(string/uppercase \\"(a (b ((c d) e) f (g h i (j k l) ((m n o p q r) s t u v ((w) x y z)))))\\")" "(use 'clojure.string)" "(upper-case \\"(a (b ((c d) e) f (g h i (j k l) ((m n o p q r) s t u v ((w) x y z)))))\\")" "(amalgamate '(a (b ((c d) e) f (g h i (j k l) ((m n o p q r) s t u v ((w) x y z)))))\\n            '((1 2) 3 (4 ((5)) 6 7 8 9 10 11)(12 13 14 (15 16 17 18)(19 20) 21 22 23)))" "(amalgamate '(a (b ((c d) e) f (g h i (j k l) ((m n o p q r) s t u v ((w) x y z)))))\\n            '(A (B ((C D) E) F (G H I (J K L) ((M N O P Q R) S T U V ((W) X Y Z))))))" "(a (b ((c d) e) f (g h i (j k l) ((m n o p q r) s t u v ((w) x y z)))))" "(amalgamate '(a (b ((c d) e) f (g h i (j k l) ((m n o p q r) s t u v ((w) x y z)))))\\n            '((1 2) 3 (4 ((5)) 6 7 8 9 10 11)(12 13 14 (15 16 17 18)(19 20) 21 22 23)))" "(do \\n  (println '(a (b ((c d) e) f (g h i (j k l) ((m n o p q r) s t u v ((w) x y z))))))\\n  (println (amalgamate \\n             '(a (b ((c d) e) f (g h i (j k l) ((m n o p q r) s t u v ((w) x y z)))))\\n             '(A (B ((C D) E) F (G H I (J K L) ((M N O P Q R) S T U V ((W) X Y Z))))))))" "(list? ())" ";; Switching to clojush.pushgp.genetic-operators namespace" "(do \\n  (println '(a (b ((c d) e) f (g h i (j k l) ((m n o p q r) s t u v ((w) x y z))))))\\n  (println (amalgamate \\n             '(a (b ((c d) e) f (g h i (j k l) ((m n o p q r) s t u v ((w) x y z)))))\\n             '(A (B ((C D) E) F (G H I (J K L) ((M N O P Q R) S T U V ((W) X Y Z))))))))" "(defn self-or-other-or-both-or-neither [self other]\\n  (let [n (lrand)]\\n    (cond (< n {\:self global-amalgamation-parameters}) self\\n          (< n (+ (\:self global-amalgamation-parameters)\\n                  (\:other global-amalgamation-parameters))) other\\n          (< n (+ (\:self global-amalgamation-parameters)\\n                  (\:other global-amalgamation-parameters)\\n                  (\:self-other global-amalgamation-parameters))) (list self other)\\n          (< n (+ (\:self global-amalgamation-parameters)\\n                  (\:other global-amalgamation-parameters)\\n                  (\:self-other global-amalgamation-parameters)\\n                  (\:other-self global-amalgamation-parameters))) (list other self)\\n          \:else ())))" "(do \\n  (println '(a (b ((c d) e) f (g h i (j k l) ((m n o p q r) s t u v ((w) x y z))))))\\n  (println (amalgamate \\n             '(a (b ((c d) e) f (g h i (j k l) ((m n o p q r) s t u v ((w) x y z)))))\\n             '(A (B ((C D) E) F (G H I (J K L) ((M N O P Q R) S T U V ((W) X Y Z))))))))" "(defn amalgamation-crossover \\n  \\"Amalgamation.\\"\\n  [parent1 parent2 max-points]\\n  (let [new-program (if (< (lrand) 0.0)\\n                      (insert-code-at-point \\n                        (\:program parent1) \\n                        (select-node-index (\:program parent1))\\n                        (code-at-point (\:program parent2)\\n                                       (select-node-index (\:program parent2))))\\n                      (amalgamate (\:program parent1) (\:program parent2)))]\\n    (if (> (count-points new-program) max-points)\\n      parent1\\n      (make-individual \:program new-program \:history (\:history parent1)\\n                       \:ancestors (if maintain-ancestors\\n                                    (cons (\:program parent1) (\:ancestors parent1))\\n                                    (\:ancestors parent1))))))" "(do \\n  (println '(a (b ((c d) e) f (g h i (j k l) ((m n o p q r) s t u v ((w) x y z))))))\\n  (amalgamate '(a (b ((c d) e) f (g h i (j k l) ((m n o p q r) s t u v ((w) x y z)))))\\n            '((1 2) 3 (4 ((5)) 6 7 8 9 10 11)(12 13 14 (15 16 17 18)(19 20) 21 22 23))))" "(do \\n  (println '(a (b ((c d) e) f (g h i (j k l) ((m n o p q r) s t u v ((w) x y z))))))\\n  (println (amalgamate \\n             '(a (b ((c d) e) f (g h i (j k l) ((m n o p q r) s t u v ((w) x y z)))))\\n             '(A (B ((C D) E) F (G H I (J K L) ((M N O P Q R) S T U V ((W) X Y Z))))))))" ";; Switching to clojush.experimental.calc namespace" "(.printStackTrace *e)" "(amalgamate '(1 2 3) '(3 4 5))" "(amalgamate 1 2)" "(amalgamate () 1)" "(amalgamate 2 ())"]
eclipse.preferences.version=1
