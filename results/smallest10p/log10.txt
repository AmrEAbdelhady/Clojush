Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x30b9728f clojush.problems.software.smallest$fn__7460@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@24b8a393]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[7 7 30 7] 7] [[91 6 91 91] 6] [[-41 -74 -74 -74] -74] [[-5 20 20 20] -5] [[-5 -5 -5 68] -5] [[58 83 58 58] 58] [[-1 -1 -15 -1] -15] [[-8 19 19 19] -8] [[-28 -28 72 -28] -28] [[-65 -65 -65 -90] -90] [(43 43 43 43) 43] [(-37 -37 -37 -37) -37] [(-35 -35 -35 -35) -35] [(-9 -9 -9 -9) -9] [(25 25 25 25) 25] [(49 5 12 29) 5] [(0 26 24 42) 0] [(38 35 16 6) 6] [(4 90 93 100) 4] [(48 60 37 69) 37] [(24 25 51 10) 10] [(2 45 50 11) 2] [(84 41 7 54) 7] [(64 39 11 12) 11] [(74 13 36 41) 13] [(81 99 92 29) 29] [(3 17 26 72) 3] [(30 60 98 2) 2] [(81 72 71 2) 2] [(54 9 86 22) 9] [(43 36 66 72) 36] [(42 75 99 57) 42] [(53 9 53 51) 9] [(53 100 33 11) 11] [(25 99 14 15) 14] [(-19 67 34 -55) -55] [(57 -30 72 -76) -76] [(-9 75 27 -93) -93] [(-55 100 59 13) -55] [(70 0 73 14) 0] [(-95 20 1 -22) -95] [(-95 59 60 42) -95] [(1 -66 -99 7) -99] [(72 -35 -92 -42) -92] [(-35 -22 -21 -84) -84] [(-55 -5 72 -18) -55] [(32 -44 -14 42) -44] [(40 48 44 71) 40] [(-40 10 -75 -97) -97] [(27 38 -9 -15) -15] [(48 43 -73 49) -73] [(-70 -50 -77 -76) -77] [(-27 6 -12 -3) -27] [(-4 80 -11 77) -11] [(86 71 49 14) 14] [(-29 -100 10 33) -100] [(25 44 62 -16) -16] [(-60 88 -75 -6) -75] [(-15 -2 0 -5) -15] [(-59 33 61 90) -59] [(-100 -60 56 97) -100] [(90 -51 7 96) -51] [(-62 85 33 -59) -62] [(48 6 73 58) 6] [(53 -98 95 -21) -98] [(-80 74 -14 49) -80] [(74 44 -60 4) -60] [(82 -87 36 -30) -87] [(-99 -58 -55 -22) -99] [(-63 -15 38 38) -63] [(22 -82 -99 59) -99] [(3 68 60 2) 2] [(30 -18 -30 -55) -55] [(9 -84 0 59) -84] [(53 53 52 46) 46] [(30 46 71 -26) -26] [(25 99 -7 -1) -7] [(16 -18 58 81) -18] [(59 -42 97 -85) -85] [(-47 97 -10 82) -47] [(99 9 -10 -86) -86] [(4 55 -74 -80) -80] [(92 55 -30 -29) -30] [(-86 -69 -19 96) -86] [(87 -45 -81 -92) -92] [(-77 -60 74 -81) -81] [(59 80 -82 -85) -85] [(7 11 -94 94) -94] [(-83 99 76 68) -83] [(44 24 41 57) 24] [(9 79 55 -27) -27] [(7 -15 -11 -13) -15] [(96 -36 16 57) -36] [(76 -71 -49 58) -71] [(93 -93 65 -36) -93])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[7 7 30 7] 7]
Train Case:   6 | Input/Output: [[91 6 91 91] 6]
Train Case:   7 | Input/Output: [[-41 -74 -74 -74] -74]
Train Case:   8 | Input/Output: [[-5 20 20 20] -5]
Train Case:   9 | Input/Output: [[-5 -5 -5 68] -5]
Train Case:  10 | Input/Output: [[58 83 58 58] 58]
Train Case:  11 | Input/Output: [[-1 -1 -15 -1] -15]
Train Case:  12 | Input/Output: [[-8 19 19 19] -8]
Train Case:  13 | Input/Output: [[-28 -28 72 -28] -28]
Train Case:  14 | Input/Output: [[-65 -65 -65 -90] -90]
Train Case:  15 | Input/Output: [(43 43 43 43) 43]
Train Case:  16 | Input/Output: [(-37 -37 -37 -37) -37]
Train Case:  17 | Input/Output: [(-35 -35 -35 -35) -35]
Train Case:  18 | Input/Output: [(-9 -9 -9 -9) -9]
Train Case:  19 | Input/Output: [(25 25 25 25) 25]
Train Case:  20 | Input/Output: [(49 5 12 29) 5]
Train Case:  21 | Input/Output: [(0 26 24 42) 0]
Train Case:  22 | Input/Output: [(38 35 16 6) 6]
Train Case:  23 | Input/Output: [(4 90 93 100) 4]
Train Case:  24 | Input/Output: [(48 60 37 69) 37]
Train Case:  25 | Input/Output: [(24 25 51 10) 10]
Train Case:  26 | Input/Output: [(2 45 50 11) 2]
Train Case:  27 | Input/Output: [(84 41 7 54) 7]
Train Case:  28 | Input/Output: [(64 39 11 12) 11]
Train Case:  29 | Input/Output: [(74 13 36 41) 13]
Train Case:  30 | Input/Output: [(81 99 92 29) 29]
Train Case:  31 | Input/Output: [(3 17 26 72) 3]
Train Case:  32 | Input/Output: [(30 60 98 2) 2]
Train Case:  33 | Input/Output: [(81 72 71 2) 2]
Train Case:  34 | Input/Output: [(54 9 86 22) 9]
Train Case:  35 | Input/Output: [(43 36 66 72) 36]
Train Case:  36 | Input/Output: [(42 75 99 57) 42]
Train Case:  37 | Input/Output: [(53 9 53 51) 9]
Train Case:  38 | Input/Output: [(53 100 33 11) 11]
Train Case:  39 | Input/Output: [(25 99 14 15) 14]
Train Case:  40 | Input/Output: [(-19 67 34 -55) -55]
Train Case:  41 | Input/Output: [(57 -30 72 -76) -76]
Train Case:  42 | Input/Output: [(-9 75 27 -93) -93]
Train Case:  43 | Input/Output: [(-55 100 59 13) -55]
Train Case:  44 | Input/Output: [(70 0 73 14) 0]
Train Case:  45 | Input/Output: [(-95 20 1 -22) -95]
Train Case:  46 | Input/Output: [(-95 59 60 42) -95]
Train Case:  47 | Input/Output: [(1 -66 -99 7) -99]
Train Case:  48 | Input/Output: [(72 -35 -92 -42) -92]
Train Case:  49 | Input/Output: [(-35 -22 -21 -84) -84]
Train Case:  50 | Input/Output: [(-55 -5 72 -18) -55]
Train Case:  51 | Input/Output: [(32 -44 -14 42) -44]
Train Case:  52 | Input/Output: [(40 48 44 71) 40]
Train Case:  53 | Input/Output: [(-40 10 -75 -97) -97]
Train Case:  54 | Input/Output: [(27 38 -9 -15) -15]
Train Case:  55 | Input/Output: [(48 43 -73 49) -73]
Train Case:  56 | Input/Output: [(-70 -50 -77 -76) -77]
Train Case:  57 | Input/Output: [(-27 6 -12 -3) -27]
Train Case:  58 | Input/Output: [(-4 80 -11 77) -11]
Train Case:  59 | Input/Output: [(86 71 49 14) 14]
Train Case:  60 | Input/Output: [(-29 -100 10 33) -100]
Train Case:  61 | Input/Output: [(25 44 62 -16) -16]
Train Case:  62 | Input/Output: [(-60 88 -75 -6) -75]
Train Case:  63 | Input/Output: [(-15 -2 0 -5) -15]
Train Case:  64 | Input/Output: [(-59 33 61 90) -59]
Train Case:  65 | Input/Output: [(-100 -60 56 97) -100]
Train Case:  66 | Input/Output: [(90 -51 7 96) -51]
Train Case:  67 | Input/Output: [(-62 85 33 -59) -62]
Train Case:  68 | Input/Output: [(48 6 73 58) 6]
Train Case:  69 | Input/Output: [(53 -98 95 -21) -98]
Train Case:  70 | Input/Output: [(-80 74 -14 49) -80]
Train Case:  71 | Input/Output: [(74 44 -60 4) -60]
Train Case:  72 | Input/Output: [(82 -87 36 -30) -87]
Train Case:  73 | Input/Output: [(-99 -58 -55 -22) -99]
Train Case:  74 | Input/Output: [(-63 -15 38 38) -63]
Train Case:  75 | Input/Output: [(22 -82 -99 59) -99]
Train Case:  76 | Input/Output: [(3 68 60 2) 2]
Train Case:  77 | Input/Output: [(30 -18 -30 -55) -55]
Train Case:  78 | Input/Output: [(9 -84 0 59) -84]
Train Case:  79 | Input/Output: [(53 53 52 46) 46]
Train Case:  80 | Input/Output: [(30 46 71 -26) -26]
Train Case:  81 | Input/Output: [(25 99 -7 -1) -7]
Train Case:  82 | Input/Output: [(16 -18 58 81) -18]
Train Case:  83 | Input/Output: [(59 -42 97 -85) -85]
Train Case:  84 | Input/Output: [(-47 97 -10 82) -47]
Train Case:  85 | Input/Output: [(99 9 -10 -86) -86]
Train Case:  86 | Input/Output: [(4 55 -74 -80) -80]
Train Case:  87 | Input/Output: [(92 55 -30 -29) -30]
Train Case:  88 | Input/Output: [(-86 -69 -19 96) -86]
Train Case:  89 | Input/Output: [(87 -45 -81 -92) -92]
Train Case:  90 | Input/Output: [(-77 -60 74 -81) -81]
Train Case:  91 | Input/Output: [(59 80 -82 -85) -85]
Train Case:  92 | Input/Output: [(7 11 -94 94) -94]
Train Case:  93 | Input/Output: [(-83 99 76 68) -83]
Train Case:  94 | Input/Output: [(44 24 41 57) 24]
Train Case:  95 | Input/Output: [(9 79 55 -27) -27]
Train Case:  96 | Input/Output: [(7 -15 -11 -13) -15]
Train Case:  97 | Input/Output: [(96 -36 16 57) -36]
Train Case:  98 | Input/Output: [(76 -71 -49 58) -71]
Train Case:  99 | Input/Output: [(93 -93 65 -36) -93]
Test Case:   0 | Input/Output: [[88 88 88 -74] -74]
Test Case:   1 | Input/Output: [[42 96 42 42] 42]
Test Case:   2 | Input/Output: [[-88 -88 -47 -88] -88]
Test Case:   3 | Input/Output: [[38 38 -84 38] -84]
Test Case:   4 | Input/Output: [[20 20 20 -11] -11]
Test Case:   5 | Input/Output: [[18 18 10 18] 10]
Test Case:   6 | Input/Output: [[9 9 28 9] 9]
Test Case:   7 | Input/Output: [[-30 -30 -30 -58] -58]
Test Case:   8 | Input/Output: [[-32 -32 -32 83] -32]
Test Case:   9 | Input/Output: [[-12 -42 -12 -12] -42]
Test Case:  10 | Input/Output: [[-54 -54 -54 -35] -54]
Test Case:  11 | Input/Output: [[-43 12 12 12] -43]
Test Case:  12 | Input/Output: [[-55 94 94 94] -55]
Test Case:  13 | Input/Output: [[63 63 63 3] 3]
Test Case:  14 | Input/Output: [[-22 -22 -22 -56] -56]
Test Case:  15 | Input/Output: [[73 4 73 73] 4]
Test Case:  16 | Input/Output: [[73 73 73 73] 73]
Test Case:  17 | Input/Output: [[46 46 20 46] 20]
Test Case:  18 | Input/Output: [[-88 -88 47 -88] -88]
Test Case:  19 | Input/Output: [[-65 -7 -65 -65] -65]
Test Case:  20 | Input/Output: [[29 27 29 29] 27]
Test Case:  21 | Input/Output: [[-90 9 9 9] -90]
Test Case:  22 | Input/Output: [[-28 87 87 87] -28]
Test Case:  23 | Input/Output: [[25 25 13 25] 13]
Test Case:  24 | Input/Output: [[-2 -19 -19 -19] -19]
Test Case:  25 | Input/Output: [[-85 -85 -74 -85] -85]
Test Case:  26 | Input/Output: [[-79 -79 85 -79] -79]
Test Case:  27 | Input/Output: [[-63 -63 -21 -63] -63]
Test Case:  28 | Input/Output: [[-76 74 -76 -76] -76]
Test Case:  29 | Input/Output: [[-3 -71 -3 -3] -71]
Test Case:  30 | Input/Output: [[84 84 84 -72] -72]
Test Case:  31 | Input/Output: [[77 72 77 77] 72]
Test Case:  32 | Input/Output: [[39 39 39 -31] -31]
Test Case:  33 | Input/Output: [[-54 -9 -54 -54] -54]
Test Case:  34 | Input/Output: [[74 8 8 8] 8]
Test Case:  35 | Input/Output: [[-14 -14 -14 34] -14]
Test Case:  36 | Input/Output: [[60 -30 -30 -30] -30]
Test Case:  37 | Input/Output: [[77 77 -45 77] -45]
Test Case:  38 | Input/Output: [[-84 -82 -82 -82] -84]
Test Case:  39 | Input/Output: [[14 14 -11 14] -11]
Test Case:  40 | Input/Output: [[40 40 40 -68] -68]
Test Case:  41 | Input/Output: [[62 -99 -99 -99] -99]
Test Case:  42 | Input/Output: [[52 52 52 90] 52]
Test Case:  43 | Input/Output: [[39 39 -90 39] -90]
Test Case:  44 | Input/Output: [[48 48 48 57] 48]
Test Case:  45 | Input/Output: [[-45 -45 -45 -53] -53]
Test Case:  46 | Input/Output: [[-34 21 21 21] -34]
Test Case:  47 | Input/Output: [[-94 -94 -94 84] -94]
Test Case:  48 | Input/Output: [[14 -60 14 14] -60]
Test Case:  49 | Input/Output: [[-55 -45 -45 -45] -55]
Test Case:  50 | Input/Output: [[12 -42 -42 -42] -42]
Test Case:  51 | Input/Output: [[-72 -72 66 -72] -72]
Test Case:  52 | Input/Output: [[92 46 46 46] 46]
Test Case:  53 | Input/Output: [[40 -10 -10 -10] -10]
Test Case:  54 | Input/Output: [[-26 -26 78 -26] -26]
Test Case:  55 | Input/Output: [[-74 -74 -74 -73] -74]
Test Case:  56 | Input/Output: [[0 -4 -4 -4] -4]
Test Case:  57 | Input/Output: [[-16 -66 -16 -16] -66]
Test Case:  58 | Input/Output: [[72 56 72 72] 56]
Test Case:  59 | Input/Output: [[71 71 -99 71] -99]
Test Case:  60 | Input/Output: [[-28 -28 -28 16] -28]
Test Case:  61 | Input/Output: [[58 58 58 -54] -54]
Test Case:  62 | Input/Output: [[93 -32 93 93] -32]
Test Case:  63 | Input/Output: [[84 62 84 84] 62]
Test Case:  64 | Input/Output: [[10 10 -77 10] -77]
Test Case:  65 | Input/Output: [[-24 -24 -46 -24] -46]
Test Case:  66 | Input/Output: [[-46 -21 -21 -21] -46]
Test Case:  67 | Input/Output: [[-14 -31 -31 -31] -31]
Test Case:  68 | Input/Output: [[-59 11 11 11] -59]
Test Case:  69 | Input/Output: [[-19 -19 83 -19] -19]
Test Case:  70 | Input/Output: [[80 -5 -5 -5] -5]
Test Case:  71 | Input/Output: [[-63 91 -63 -63] -63]
Test Case:  72 | Input/Output: [[-57 -58 -57 -57] -58]
Test Case:  73 | Input/Output: [[34 12 12 12] 12]
Test Case:  74 | Input/Output: [[76 76 76 -30] -30]
Test Case:  75 | Input/Output: [[-79 -79 -92 -79] -92]
Test Case:  76 | Input/Output: [[97 -35 97 97] -35]
Test Case:  77 | Input/Output: [[-56 18 18 18] -56]
Test Case:  78 | Input/Output: [[6 6 6 -45] -45]
Test Case:  79 | Input/Output: [[-54 61 61 61] -54]
Test Case:  80 | Input/Output: [[3 3 63 3] 3]
Test Case:  81 | Input/Output: [[-22 -22 -22 48] -22]
Test Case:  82 | Input/Output: [[-42 -94 -42 -42] -94]
Test Case:  83 | Input/Output: [[-46 -46 83 -46] -46]
Test Case:  84 | Input/Output: [[-60 -60 -60 72] -60]
Test Case:  85 | Input/Output: [[61 -86 61 61] -86]
Test Case:  86 | Input/Output: [[12 12 12 -25] -25]
Test Case:  87 | Input/Output: [[-71 -71 -71 -52] -71]
Test Case:  88 | Input/Output: [[86 95 86 86] 86]
Test Case:  89 | Input/Output: [[-32 49 -32 -32] -32]
Test Case:  90 | Input/Output: [[37 37 37 -92] -92]
Test Case:  91 | Input/Output: [[60 60 60 -19] -19]
Test Case:  92 | Input/Output: [[27 27 47 27] 27]
Test Case:  93 | Input/Output: [[-97 -97 47 -97] -97]
Test Case:  94 | Input/Output: [[13 -69 -69 -69] -69]
Test Case:  95 | Input/Output: [[-84 75 75 75] -84]
Test Case:  96 | Input/Output: [[40 -7 40 40] -7]
Test Case:  97 | Input/Output: [[-85 -44 -44 -44] -85]
Test Case:  98 | Input/Output: [[-78 -78 -78 93] -78]
Test Case:  99 | Input/Output: [[-81 -75 -81 -81] -81]
Test Case: 100 | Input/Output: [(-80 -80 -80 -80) -80]
Test Case: 101 | Input/Output: [(-43 -43 -43 -43) -43]
Test Case: 102 | Input/Output: [(-100 -100 -100 -100) -100]
Test Case: 103 | Input/Output: [(51 51 51 51) 51]
Test Case: 104 | Input/Output: [(-40 -40 -40 -40) -40]
Test Case: 105 | Input/Output: [(80 80 80 80) 80]
Test Case: 106 | Input/Output: [(80 80 80 80) 80]
Test Case: 107 | Input/Output: [(49 49 49 49) 49]
Test Case: 108 | Input/Output: [(-21 -21 -21 -21) -21]
Test Case: 109 | Input/Output: [(57 57 57 57) 57]
Test Case: 110 | Input/Output: [(-83 -83 -83 -83) -83]
Test Case: 111 | Input/Output: [(-47 -47 -47 -47) -47]
Test Case: 112 | Input/Output: [(-74 -74 -74 -74) -74]
Test Case: 113 | Input/Output: [(-30 -30 -30 -30) -30]
Test Case: 114 | Input/Output: [(-22 -22 -22 -22) -22]
Test Case: 115 | Input/Output: [(-36 -36 -36 -36) -36]
Test Case: 116 | Input/Output: [(-63 -63 -63 -63) -63]
Test Case: 117 | Input/Output: [(21 21 21 21) 21]
Test Case: 118 | Input/Output: [(51 51 51 51) 51]
Test Case: 119 | Input/Output: [(-69 -69 -69 -69) -69]
Test Case: 120 | Input/Output: [(-6 -6 -6 -6) -6]
Test Case: 121 | Input/Output: [(25 25 25 25) 25]
Test Case: 122 | Input/Output: [(-10 -10 -10 -10) -10]
Test Case: 123 | Input/Output: [(23 23 23 23) 23]
Test Case: 124 | Input/Output: [(-29 -29 -29 -29) -29]
Test Case: 125 | Input/Output: [(-39 -39 -39 -39) -39]
Test Case: 126 | Input/Output: [(-76 -76 -76 -76) -76]
Test Case: 127 | Input/Output: [(89 89 89 89) 89]
Test Case: 128 | Input/Output: [(-6 -6 -6 -6) -6]
Test Case: 129 | Input/Output: [(-30 -30 -30 -30) -30]
Test Case: 130 | Input/Output: [(-98 -98 -98 -98) -98]
Test Case: 131 | Input/Output: [(96 96 96 96) 96]
Test Case: 132 | Input/Output: [(25 25 25 25) 25]
Test Case: 133 | Input/Output: [(18 18 18 18) 18]
Test Case: 134 | Input/Output: [(56 56 56 56) 56]
Test Case: 135 | Input/Output: [(-91 -91 -91 -91) -91]
Test Case: 136 | Input/Output: [(-56 -56 -56 -56) -56]
Test Case: 137 | Input/Output: [(-55 -55 -55 -55) -55]
Test Case: 138 | Input/Output: [(37 37 37 37) 37]
Test Case: 139 | Input/Output: [(-16 -16 -16 -16) -16]
Test Case: 140 | Input/Output: [(-8 -8 -8 -8) -8]
Test Case: 141 | Input/Output: [(-90 -90 -90 -90) -90]
Test Case: 142 | Input/Output: [(-62 -62 -62 -62) -62]
Test Case: 143 | Input/Output: [(12 12 12 12) 12]
Test Case: 144 | Input/Output: [(-91 -91 -91 -91) -91]
Test Case: 145 | Input/Output: [(29 29 29 29) 29]
Test Case: 146 | Input/Output: [(54 54 54 54) 54]
Test Case: 147 | Input/Output: [(60 60 60 60) 60]
Test Case: 148 | Input/Output: [(73 73 73 73) 73]
Test Case: 149 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 150 | Input/Output: [(-43 -43 -43 -43) -43]
Test Case: 151 | Input/Output: [(19 19 19 19) 19]
Test Case: 152 | Input/Output: [(-100 -100 -100 -100) -100]
Test Case: 153 | Input/Output: [(-6 -6 -6 -6) -6]
Test Case: 154 | Input/Output: [(-21 -21 -21 -21) -21]
Test Case: 155 | Input/Output: [(-31 -31 -31 -31) -31]
Test Case: 156 | Input/Output: [(95 95 95 95) 95]
Test Case: 157 | Input/Output: [(-63 -63 -63 -63) -63]
Test Case: 158 | Input/Output: [(-90 -90 -90 -90) -90]
Test Case: 159 | Input/Output: [(-50 -50 -50 -50) -50]
Test Case: 160 | Input/Output: [(-69 -69 -69 -69) -69]
Test Case: 161 | Input/Output: [(79 79 79 79) 79]
Test Case: 162 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 163 | Input/Output: [(-75 -75 -75 -75) -75]
Test Case: 164 | Input/Output: [(-30 -30 -30 -30) -30]
Test Case: 165 | Input/Output: [(-61 -61 -61 -61) -61]
Test Case: 166 | Input/Output: [(29 29 29 29) 29]
Test Case: 167 | Input/Output: [(-22 -22 -22 -22) -22]
Test Case: 168 | Input/Output: [(14 14 14 14) 14]
Test Case: 169 | Input/Output: [(33 33 33 33) 33]
Test Case: 170 | Input/Output: [(20 20 20 20) 20]
Test Case: 171 | Input/Output: [(-78 -78 -78 -78) -78]
Test Case: 172 | Input/Output: [(74 74 74 74) 74]
Test Case: 173 | Input/Output: [(-24 -24 -24 -24) -24]
Test Case: 174 | Input/Output: [(94 94 94 94) 94]
Test Case: 175 | Input/Output: [(-90 -90 -90 -90) -90]
Test Case: 176 | Input/Output: [(45 45 45 45) 45]
Test Case: 177 | Input/Output: [(61 61 61 61) 61]
Test Case: 178 | Input/Output: [(-69 -69 -69 -69) -69]
Test Case: 179 | Input/Output: [(-20 -20 -20 -20) -20]
Test Case: 180 | Input/Output: [(38 38 38 38) 38]
Test Case: 181 | Input/Output: [(4 4 4 4) 4]
Test Case: 182 | Input/Output: [(-12 -12 -12 -12) -12]
Test Case: 183 | Input/Output: [(65 65 65 65) 65]
Test Case: 184 | Input/Output: [(-12 -12 -12 -12) -12]
Test Case: 185 | Input/Output: [(91 91 91 91) 91]
Test Case: 186 | Input/Output: [(-71 -71 -71 -71) -71]
Test Case: 187 | Input/Output: [(87 87 87 87) 87]
Test Case: 188 | Input/Output: [(-33 -33 -33 -33) -33]
Test Case: 189 | Input/Output: [(83 83 83 83) 83]
Test Case: 190 | Input/Output: [(-15 -15 -15 -15) -15]
Test Case: 191 | Input/Output: [(44 44 44 44) 44]
Test Case: 192 | Input/Output: [(17 17 17 17) 17]
Test Case: 193 | Input/Output: [(30 30 30 30) 30]
Test Case: 194 | Input/Output: [(-94 -94 -94 -94) -94]
Test Case: 195 | Input/Output: [(-67 -67 -67 -67) -67]
Test Case: 196 | Input/Output: [(100 100 100 100) 100]
Test Case: 197 | Input/Output: [(-89 -89 -89 -89) -89]
Test Case: 198 | Input/Output: [(49 49 49 49) 49]
Test Case: 199 | Input/Output: [(58 58 58 58) 58]
Test Case: 200 | Input/Output: [(75 69 87 44) 44]
Test Case: 201 | Input/Output: [(54 2 50 74) 2]
Test Case: 202 | Input/Output: [(4 74 32 8) 4]
Test Case: 203 | Input/Output: [(66 57 12 4) 4]
Test Case: 204 | Input/Output: [(98 26 22 83) 22]
Test Case: 205 | Input/Output: [(41 59 19 85) 19]
Test Case: 206 | Input/Output: [(49 33 64 87) 33]
Test Case: 207 | Input/Output: [(69 93 39 68) 39]
Test Case: 208 | Input/Output: [(71 24 7 44) 7]
Test Case: 209 | Input/Output: [(48 5 100 16) 5]
Test Case: 210 | Input/Output: [(6 23 94 95) 6]
Test Case: 211 | Input/Output: [(33 56 52 30) 30]
Test Case: 212 | Input/Output: [(81 50 95 22) 22]
Test Case: 213 | Input/Output: [(33 76 69 42) 33]
Test Case: 214 | Input/Output: [(77 61 20 31) 20]
Test Case: 215 | Input/Output: [(93 13 37 23) 13]
Test Case: 216 | Input/Output: [(47 81 40 45) 40]
Test Case: 217 | Input/Output: [(73 89 9 84) 9]
Test Case: 218 | Input/Output: [(14 89 3 38) 3]
Test Case: 219 | Input/Output: [(16 45 4 38) 4]
Test Case: 220 | Input/Output: [(56 31 54 30) 30]
Test Case: 221 | Input/Output: [(95 6 7 80) 6]
Test Case: 222 | Input/Output: [(52 77 99 40) 40]
Test Case: 223 | Input/Output: [(39 33 35 70) 33]
Test Case: 224 | Input/Output: [(73 4 86 31) 4]
Test Case: 225 | Input/Output: [(92 17 100 28) 17]
Test Case: 226 | Input/Output: [(76 30 48 3) 3]
Test Case: 227 | Input/Output: [(18 16 83 86) 16]
Test Case: 228 | Input/Output: [(29 88 93 48) 29]
Test Case: 229 | Input/Output: [(75 7 48 96) 7]
Test Case: 230 | Input/Output: [(47 91 87 37) 37]
Test Case: 231 | Input/Output: [(96 2 61 89) 2]
Test Case: 232 | Input/Output: [(43 5 95 42) 5]
Test Case: 233 | Input/Output: [(87 56 3 86) 3]
Test Case: 234 | Input/Output: [(52 41 31 30) 30]
Test Case: 235 | Input/Output: [(52 5 100 34) 5]
Test Case: 236 | Input/Output: [(64 26 87 46) 26]
Test Case: 237 | Input/Output: [(53 52 32 22) 22]
Test Case: 238 | Input/Output: [(27 97 44 48) 27]
Test Case: 239 | Input/Output: [(100 0 57 2) 0]
Test Case: 240 | Input/Output: [(76 90 19 90) 19]
Test Case: 241 | Input/Output: [(38 43 60 62) 38]
Test Case: 242 | Input/Output: [(19 17 1 88) 1]
Test Case: 243 | Input/Output: [(62 40 95 55) 40]
Test Case: 244 | Input/Output: [(0 38 88 93) 0]
Test Case: 245 | Input/Output: [(68 9 54 66) 9]
Test Case: 246 | Input/Output: [(20 90 77 59) 20]
Test Case: 247 | Input/Output: [(20 77 61 94) 20]
Test Case: 248 | Input/Output: [(81 73 41 66) 41]
Test Case: 249 | Input/Output: [(27 20 37 54) 20]
Test Case: 250 | Input/Output: [(27 14 61 36) 14]
Test Case: 251 | Input/Output: [(27 63 76 100) 27]
Test Case: 252 | Input/Output: [(31 42 26 45) 26]
Test Case: 253 | Input/Output: [(50 80 41 57) 41]
Test Case: 254 | Input/Output: [(55 71 79 93) 55]
Test Case: 255 | Input/Output: [(73 3 32 48) 3]
Test Case: 256 | Input/Output: [(96 31 12 53) 12]
Test Case: 257 | Input/Output: [(21 72 59 69) 21]
Test Case: 258 | Input/Output: [(62 19 74 97) 19]
Test Case: 259 | Input/Output: [(78 83 83 39) 39]
Test Case: 260 | Input/Output: [(4 58 17 47) 4]
Test Case: 261 | Input/Output: [(71 76 79 0) 0]
Test Case: 262 | Input/Output: [(36 63 52 62) 36]
Test Case: 263 | Input/Output: [(5 70 56 28) 5]
Test Case: 264 | Input/Output: [(14 96 79 19) 14]
Test Case: 265 | Input/Output: [(43 37 100 98) 37]
Test Case: 266 | Input/Output: [(52 57 44 54) 44]
Test Case: 267 | Input/Output: [(14 52 61 23) 14]
Test Case: 268 | Input/Output: [(19 48 61 74) 19]
Test Case: 269 | Input/Output: [(60 57 64 99) 57]
Test Case: 270 | Input/Output: [(74 54 76 18) 18]
Test Case: 271 | Input/Output: [(11 4 85 56) 4]
Test Case: 272 | Input/Output: [(48 79 38 29) 29]
Test Case: 273 | Input/Output: [(7 17 33 61) 7]
Test Case: 274 | Input/Output: [(27 56 58 70) 27]
Test Case: 275 | Input/Output: [(58 88 38 48) 38]
Test Case: 276 | Input/Output: [(16 26 54 83) 16]
Test Case: 277 | Input/Output: [(29 90 22 5) 5]
Test Case: 278 | Input/Output: [(55 74 62 78) 55]
Test Case: 279 | Input/Output: [(38 51 92 33) 33]
Test Case: 280 | Input/Output: [(85 1 23 30) 1]
Test Case: 281 | Input/Output: [(8 96 66 36) 8]
Test Case: 282 | Input/Output: [(42 30 39 78) 30]
Test Case: 283 | Input/Output: [(75 65 1 0) 0]
Test Case: 284 | Input/Output: [(93 85 82 46) 46]
Test Case: 285 | Input/Output: [(54 64 11 71) 11]
Test Case: 286 | Input/Output: [(75 78 2 30) 2]
Test Case: 287 | Input/Output: [(97 58 48 97) 48]
Test Case: 288 | Input/Output: [(16 21 7 21) 7]
Test Case: 289 | Input/Output: [(98 14 76 30) 14]
Test Case: 290 | Input/Output: [(61 5 28 31) 5]
Test Case: 291 | Input/Output: [(88 56 5 35) 5]
Test Case: 292 | Input/Output: [(53 76 56 59) 53]
Test Case: 293 | Input/Output: [(68 98 40 29) 29]
Test Case: 294 | Input/Output: [(3 24 2 78) 2]
Test Case: 295 | Input/Output: [(48 79 20 61) 20]
Test Case: 296 | Input/Output: [(93 73 38 44) 38]
Test Case: 297 | Input/Output: [(73 79 88 55) 55]
Test Case: 298 | Input/Output: [(31 51 53 12) 12]
Test Case: 299 | Input/Output: [(69 95 46 7) 7]
Test Case: 300 | Input/Output: [(39 20 7 6) 6]
Test Case: 301 | Input/Output: [(0 83 70 85) 0]
Test Case: 302 | Input/Output: [(58 2 97 13) 2]
Test Case: 303 | Input/Output: [(48 26 48 51) 26]
Test Case: 304 | Input/Output: [(78 37 74 87) 37]
Test Case: 305 | Input/Output: [(48 7 9 12) 7]
Test Case: 306 | Input/Output: [(75 0 99 66) 0]
Test Case: 307 | Input/Output: [(4 91 99 26) 4]
Test Case: 308 | Input/Output: [(81 28 78 31) 28]
Test Case: 309 | Input/Output: [(2 65 47 0) 0]
Test Case: 310 | Input/Output: [(79 2 0 94) 0]
Test Case: 311 | Input/Output: [(53 78 81 56) 53]
Test Case: 312 | Input/Output: [(93 91 8 3) 3]
Test Case: 313 | Input/Output: [(53 24 97 53) 24]
Test Case: 314 | Input/Output: [(63 0 39 31) 0]
Test Case: 315 | Input/Output: [(17 49 24 28) 17]
Test Case: 316 | Input/Output: [(13 22 92 74) 13]
Test Case: 317 | Input/Output: [(3 58 50 54) 3]
Test Case: 318 | Input/Output: [(43 27 67 32) 27]
Test Case: 319 | Input/Output: [(26 25 33 52) 25]
Test Case: 320 | Input/Output: [(53 63 27 23) 23]
Test Case: 321 | Input/Output: [(50 55 20 66) 20]
Test Case: 322 | Input/Output: [(58 31 89 67) 31]
Test Case: 323 | Input/Output: [(98 5 55 5) 5]
Test Case: 324 | Input/Output: [(27 5 82 39) 5]
Test Case: 325 | Input/Output: [(4 98 45 71) 4]
Test Case: 326 | Input/Output: [(14 77 69 42) 14]
Test Case: 327 | Input/Output: [(53 50 10 77) 10]
Test Case: 328 | Input/Output: [(49 98 26 40) 26]
Test Case: 329 | Input/Output: [(45 61 23 0) 0]
Test Case: 330 | Input/Output: [(81 85 44 59) 44]
Test Case: 331 | Input/Output: [(2 99 62 25) 2]
Test Case: 332 | Input/Output: [(87 2 5 46) 2]
Test Case: 333 | Input/Output: [(11 3 33 92) 3]
Test Case: 334 | Input/Output: [(77 49 82 2) 2]
Test Case: 335 | Input/Output: [(39 53 39 93) 39]
Test Case: 336 | Input/Output: [(79 96 18 26) 18]
Test Case: 337 | Input/Output: [(84 34 41 23) 23]
Test Case: 338 | Input/Output: [(21 62 90 0) 0]
Test Case: 339 | Input/Output: [(86 97 4 38) 4]
Test Case: 340 | Input/Output: [(5 21 32 70) 5]
Test Case: 341 | Input/Output: [(69 2 55 36) 2]
Test Case: 342 | Input/Output: [(8 59 75 43) 8]
Test Case: 343 | Input/Output: [(75 50 55 93) 50]
Test Case: 344 | Input/Output: [(13 40 46 54) 13]
Test Case: 345 | Input/Output: [(18 33 47 43) 18]
Test Case: 346 | Input/Output: [(93 45 75 5) 5]
Test Case: 347 | Input/Output: [(73 47 3 46) 3]
Test Case: 348 | Input/Output: [(97 48 68 74) 48]
Test Case: 349 | Input/Output: [(22 79 14 82) 14]
Test Case: 350 | Input/Output: [(13 30 33 51) 13]
Test Case: 351 | Input/Output: [(99 13 54 26) 13]
Test Case: 352 | Input/Output: [(18 15 35 90) 15]
Test Case: 353 | Input/Output: [(80 53 48 23) 23]
Test Case: 354 | Input/Output: [(52 47 43 51) 43]
Test Case: 355 | Input/Output: [(72 2 86 90) 2]
Test Case: 356 | Input/Output: [(19 11 99 7) 7]
Test Case: 357 | Input/Output: [(15 46 23 69) 15]
Test Case: 358 | Input/Output: [(44 18 38 59) 18]
Test Case: 359 | Input/Output: [(0 66 84 92) 0]
Test Case: 360 | Input/Output: [(87 25 92 10) 10]
Test Case: 361 | Input/Output: [(100 24 85 39) 24]
Test Case: 362 | Input/Output: [(48 78 86 47) 47]
Test Case: 363 | Input/Output: [(75 70 95 33) 33]
Test Case: 364 | Input/Output: [(82 73 99 96) 73]
Test Case: 365 | Input/Output: [(45 32 85 13) 13]
Test Case: 366 | Input/Output: [(61 49 23 5) 5]
Test Case: 367 | Input/Output: [(12 48 41 74) 12]
Test Case: 368 | Input/Output: [(31 4 16 75) 4]
Test Case: 369 | Input/Output: [(29 50 73 13) 13]
Test Case: 370 | Input/Output: [(68 62 16 7) 7]
Test Case: 371 | Input/Output: [(79 24 18 21) 18]
Test Case: 372 | Input/Output: [(33 8 66 80) 8]
Test Case: 373 | Input/Output: [(39 62 82 83) 39]
Test Case: 374 | Input/Output: [(81 10 59 81) 10]
Test Case: 375 | Input/Output: [(45 28 42 60) 28]
Test Case: 376 | Input/Output: [(71 22 47 15) 15]
Test Case: 377 | Input/Output: [(17 93 68 1) 1]
Test Case: 378 | Input/Output: [(67 41 41 86) 41]
Test Case: 379 | Input/Output: [(34 72 77 87) 34]
Test Case: 380 | Input/Output: [(77 22 85 67) 22]
Test Case: 381 | Input/Output: [(81 21 42 8) 8]
Test Case: 382 | Input/Output: [(56 70 5 23) 5]
Test Case: 383 | Input/Output: [(18 15 48 75) 15]
Test Case: 384 | Input/Output: [(33 71 52 76) 33]
Test Case: 385 | Input/Output: [(2 45 37 86) 2]
Test Case: 386 | Input/Output: [(72 66 29 3) 3]
Test Case: 387 | Input/Output: [(83 23 9 88) 9]
Test Case: 388 | Input/Output: [(17 87 95 46) 17]
Test Case: 389 | Input/Output: [(34 61 72 0) 0]
Test Case: 390 | Input/Output: [(64 50 20 42) 20]
Test Case: 391 | Input/Output: [(37 90 83 37) 37]
Test Case: 392 | Input/Output: [(24 89 11 43) 11]
Test Case: 393 | Input/Output: [(78 99 53 69) 53]
Test Case: 394 | Input/Output: [(50 83 43 16) 16]
Test Case: 395 | Input/Output: [(41 37 1 98) 1]
Test Case: 396 | Input/Output: [(69 87 72 8) 8]
Test Case: 397 | Input/Output: [(42 74 63 39) 39]
Test Case: 398 | Input/Output: [(53 19 67 82) 19]
Test Case: 399 | Input/Output: [(73 38 83 17) 17]
Test Case: 400 | Input/Output: [(-17 37 32 -75) -75]
Test Case: 401 | Input/Output: [(89 -89 54 8) -89]
Test Case: 402 | Input/Output: [(85 70 82 83) 70]
Test Case: 403 | Input/Output: [(67 -16 70 -66) -66]
Test Case: 404 | Input/Output: [(-69 14 -56 -16) -69]
Test Case: 405 | Input/Output: [(-91 80 85 -85) -91]
Test Case: 406 | Input/Output: [(-17 -3 82 98) -17]
Test Case: 407 | Input/Output: [(-71 -27 23 2) -71]
Test Case: 408 | Input/Output: [(95 -23 -14 -67) -67]
Test Case: 409 | Input/Output: [(-47 73 -78 8) -78]
Test Case: 410 | Input/Output: [(63 17 45 -91) -91]
Test Case: 411 | Input/Output: [(15 8 -96 2) -96]
Test Case: 412 | Input/Output: [(-39 -34 38 89) -39]
Test Case: 413 | Input/Output: [(-72 -84 33 17) -84]
Test Case: 414 | Input/Output: [(5 33 -22 -41) -41]
Test Case: 415 | Input/Output: [(34 36 3 -14) -14]
Test Case: 416 | Input/Output: [(-81 -48 -49 -100) -100]
Test Case: 417 | Input/Output: [(22 -6 -37 47) -37]
Test Case: 418 | Input/Output: [(-82 35 56 -18) -82]
Test Case: 419 | Input/Output: [(15 30 -63 -81) -81]
Test Case: 420 | Input/Output: [(-16 37 -11 -73) -73]
Test Case: 421 | Input/Output: [(13 -34 -50 64) -50]
Test Case: 422 | Input/Output: [(-6 91 -78 9) -78]
Test Case: 423 | Input/Output: [(93 -69 93 63) -69]
Test Case: 424 | Input/Output: [(99 54 3 -56) -56]
Test Case: 425 | Input/Output: [(86 25 63 -9) -9]
Test Case: 426 | Input/Output: [(-93 -13 93 -86) -93]
Test Case: 427 | Input/Output: [(73 -62 -38 51) -62]
Test Case: 428 | Input/Output: [(-62 59 -14 -93) -93]
Test Case: 429 | Input/Output: [(18 24 44 69) 18]
Test Case: 430 | Input/Output: [(-37 -49 -40 93) -49]
Test Case: 431 | Input/Output: [(51 -5 -30 -89) -89]
Test Case: 432 | Input/Output: [(-91 94 17 -1) -91]
Test Case: 433 | Input/Output: [(-49 -10 66 -5) -49]
Test Case: 434 | Input/Output: [(55 20 49 -21) -21]
Test Case: 435 | Input/Output: [(-73 11 20 34) -73]
Test Case: 436 | Input/Output: [(-72 -22 34 34) -72]
Test Case: 437 | Input/Output: [(-98 70 49 62) -98]
Test Case: 438 | Input/Output: [(95 -93 -35 38) -93]
Test Case: 439 | Input/Output: [(68 31 -95 92) -95]
Test Case: 440 | Input/Output: [(55 -98 -63 -51) -98]
Test Case: 441 | Input/Output: [(91 -89 48 -64) -89]
Test Case: 442 | Input/Output: [(-78 5 91 83) -78]
Test Case: 443 | Input/Output: [(8 -57 83 -37) -57]
Test Case: 444 | Input/Output: [(65 -55 -41 -80) -80]
Test Case: 445 | Input/Output: [(62 -6 86 16) -6]
Test Case: 446 | Input/Output: [(-23 -18 -28 -62) -62]
Test Case: 447 | Input/Output: [(73 25 59 65) 25]
Test Case: 448 | Input/Output: [(20 69 -81 -14) -81]
Test Case: 449 | Input/Output: [(1 -85 -58 49) -85]
Test Case: 450 | Input/Output: [(7 -30 37 -53) -53]
Test Case: 451 | Input/Output: [(7 25 -37 -5) -37]
Test Case: 452 | Input/Output: [(44 -20 -72 13) -72]
Test Case: 453 | Input/Output: [(-55 2 -38 2) -55]
Test Case: 454 | Input/Output: [(-41 21 0 -100) -100]
Test Case: 455 | Input/Output: [(84 94 13 -24) -24]
Test Case: 456 | Input/Output: [(0 -36 24 -68) -68]
Test Case: 457 | Input/Output: [(79 54 -75 -20) -75]
Test Case: 458 | Input/Output: [(-17 -74 -1 -35) -74]
Test Case: 459 | Input/Output: [(-48 -55 99 54) -55]
Test Case: 460 | Input/Output: [(-89 -19 -99 21) -99]
Test Case: 461 | Input/Output: [(56 86 59 -72) -72]
Test Case: 462 | Input/Output: [(45 24 47 -97) -97]
Test Case: 463 | Input/Output: [(-52 37 -85 31) -85]
Test Case: 464 | Input/Output: [(79 -8 98 79) -8]
Test Case: 465 | Input/Output: [(82 29 30 68) 29]
Test Case: 466 | Input/Output: [(-40 78 -47 -58) -58]
Test Case: 467 | Input/Output: [(37 44 22 -49) -49]
Test Case: 468 | Input/Output: [(-63 15 99 18) -63]
Test Case: 469 | Input/Output: [(36 72 81 -68) -68]
Test Case: 470 | Input/Output: [(56 -74 27 94) -74]
Test Case: 471 | Input/Output: [(78 -52 11 60) -52]
Test Case: 472 | Input/Output: [(48 -96 94 -61) -96]
Test Case: 473 | Input/Output: [(-65 -77 41 -84) -84]
Test Case: 474 | Input/Output: [(-62 83 16 14) -62]
Test Case: 475 | Input/Output: [(81 82 -18 -73) -73]
Test Case: 476 | Input/Output: [(53 -58 -45 5) -58]
Test Case: 477 | Input/Output: [(23 50 32 97) 23]
Test Case: 478 | Input/Output: [(-68 35 -7 56) -68]
Test Case: 479 | Input/Output: [(22 11 -97 19) -97]
Test Case: 480 | Input/Output: [(-3 57 29 64) -3]
Test Case: 481 | Input/Output: [(23 100 -97 0) -97]
Test Case: 482 | Input/Output: [(51 84 -24 76) -24]
Test Case: 483 | Input/Output: [(49 -88 -33 -21) -88]
Test Case: 484 | Input/Output: [(18 -91 21 -25) -91]
Test Case: 485 | Input/Output: [(-44 -74 99 55) -74]
Test Case: 486 | Input/Output: [(-33 59 -71 43) -71]
Test Case: 487 | Input/Output: [(-96 47 10 -12) -96]
Test Case: 488 | Input/Output: [(68 -20 93 10) -20]
Test Case: 489 | Input/Output: [(62 14 -74 96) -74]
Test Case: 490 | Input/Output: [(-94 -55 -87 0) -94]
Test Case: 491 | Input/Output: [(19 -61 62 -12) -61]
Test Case: 492 | Input/Output: [(92 82 80 -10) -10]
Test Case: 493 | Input/Output: [(-9 38 -64 -74) -74]
Test Case: 494 | Input/Output: [(-23 -1 -7 -69) -69]
Test Case: 495 | Input/Output: [(1 -28 -40 15) -40]
Test Case: 496 | Input/Output: [(-2 -91 7 26) -91]
Test Case: 497 | Input/Output: [(-56 48 -21 -96) -96]
Test Case: 498 | Input/Output: [(-49 0 -69 52) -69]
Test Case: 499 | Input/Output: [(18 65 11 37) 11]
Test Case: 500 | Input/Output: [(23 84 -28 -93) -93]
Test Case: 501 | Input/Output: [(-3 51 -81 -85) -85]
Test Case: 502 | Input/Output: [(64 57 -12 10) -12]
Test Case: 503 | Input/Output: [(49 6 -34 -81) -81]
Test Case: 504 | Input/Output: [(-59 58 -80 99) -80]
Test Case: 505 | Input/Output: [(-65 2 45 93) -65]
Test Case: 506 | Input/Output: [(-17 94 -83 8) -83]
Test Case: 507 | Input/Output: [(61 -91 44 -94) -94]
Test Case: 508 | Input/Output: [(59 -75 92 57) -75]
Test Case: 509 | Input/Output: [(59 -63 49 22) -63]
Test Case: 510 | Input/Output: [(-25 80 -88 -13) -88]
Test Case: 511 | Input/Output: [(-91 -62 5 82) -91]
Test Case: 512 | Input/Output: [(53 77 96 31) 31]
Test Case: 513 | Input/Output: [(35 -85 71 44) -85]
Test Case: 514 | Input/Output: [(-61 -64 -44 93) -64]
Test Case: 515 | Input/Output: [(9 -78 56 -75) -78]
Test Case: 516 | Input/Output: [(79 -70 1 -81) -81]
Test Case: 517 | Input/Output: [(-79 44 39 -84) -84]
Test Case: 518 | Input/Output: [(-32 -68 67 2) -68]
Test Case: 519 | Input/Output: [(3 -2 -32 68) -32]
Test Case: 520 | Input/Output: [(-22 56 30 63) -22]
Test Case: 521 | Input/Output: [(86 90 -67 80) -67]
Test Case: 522 | Input/Output: [(-27 66 4 -50) -50]
Test Case: 523 | Input/Output: [(67 -79 -9 24) -79]
Test Case: 524 | Input/Output: [(-50 33 -37 -27) -50]
Test Case: 525 | Input/Output: [(-83 -49 31 -97) -97]
Test Case: 526 | Input/Output: [(26 2 84 -100) -100]
Test Case: 527 | Input/Output: [(9 -1 -39 30) -39]
Test Case: 528 | Input/Output: [(2 57 -83 -36) -83]
Test Case: 529 | Input/Output: [(35 29 -56 -83) -83]
Test Case: 530 | Input/Output: [(84 5 78 -100) -100]
Test Case: 531 | Input/Output: [(61 91 22 -37) -37]
Test Case: 532 | Input/Output: [(13 -12 -25 12) -25]
Test Case: 533 | Input/Output: [(50 -49 -76 -72) -76]
Test Case: 534 | Input/Output: [(33 -25 80 -22) -25]
Test Case: 535 | Input/Output: [(50 41 74 -55) -55]
Test Case: 536 | Input/Output: [(-72 -52 11 -35) -72]
Test Case: 537 | Input/Output: [(-88 71 -96 -35) -96]
Test Case: 538 | Input/Output: [(-96 81 33 -42) -96]
Test Case: 539 | Input/Output: [(-23 -96 64 -9) -96]
Test Case: 540 | Input/Output: [(93 56 -8 -77) -77]
Test Case: 541 | Input/Output: [(51 -55 -34 -66) -66]
Test Case: 542 | Input/Output: [(56 -91 -22 83) -91]
Test Case: 543 | Input/Output: [(96 86 83 -41) -41]
Test Case: 544 | Input/Output: [(5 98 -68 -18) -68]
Test Case: 545 | Input/Output: [(34 24 -77 -14) -77]
Test Case: 546 | Input/Output: [(85 98 8 50) 8]
Test Case: 547 | Input/Output: [(66 0 50 -17) -17]
Test Case: 548 | Input/Output: [(-100 54 -54 27) -100]
Test Case: 549 | Input/Output: [(-44 55 -53 28) -53]
Test Case: 550 | Input/Output: [(-32 -65 -1 -78) -78]
Test Case: 551 | Input/Output: [(-1 -4 -63 1) -63]
Test Case: 552 | Input/Output: [(-58 -55 53 -3) -58]
Test Case: 553 | Input/Output: [(-80 98 -1 50) -80]
Test Case: 554 | Input/Output: [(-45 37 -8 -89) -89]
Test Case: 555 | Input/Output: [(39 -76 -45 -52) -76]
Test Case: 556 | Input/Output: [(15 17 39 9) 9]
Test Case: 557 | Input/Output: [(-44 -34 -83 -61) -83]
Test Case: 558 | Input/Output: [(-44 55 77 29) -44]
Test Case: 559 | Input/Output: [(18 22 -35 89) -35]
Test Case: 560 | Input/Output: [(-39 -65 -26 -3) -65]
Test Case: 561 | Input/Output: [(60 -96 -22 32) -96]
Test Case: 562 | Input/Output: [(-87 -52 -59 -32) -87]
Test Case: 563 | Input/Output: [(-53 -17 30 -93) -93]
Test Case: 564 | Input/Output: [(13 75 -34 -28) -34]
Test Case: 565 | Input/Output: [(-57 45 -11 -56) -57]
Test Case: 566 | Input/Output: [(-17 -91 -7 -28) -91]
Test Case: 567 | Input/Output: [(54 36 24 51) 24]
Test Case: 568 | Input/Output: [(97 9 -59 -12) -59]
Test Case: 569 | Input/Output: [(-75 -50 -16 67) -75]
Test Case: 570 | Input/Output: [(-61 21 53 -98) -98]
Test Case: 571 | Input/Output: [(28 -18 65 -89) -89]
Test Case: 572 | Input/Output: [(6 91 9 23) 6]
Test Case: 573 | Input/Output: [(47 -96 -89 -83) -96]
Test Case: 574 | Input/Output: [(-69 20 -97 -70) -97]
Test Case: 575 | Input/Output: [(21 17 72 62) 17]
Test Case: 576 | Input/Output: [(15 5 -55 54) -55]
Test Case: 577 | Input/Output: [(-80 -93 -49 40) -93]
Test Case: 578 | Input/Output: [(-37 35 -86 -85) -86]
Test Case: 579 | Input/Output: [(26 56 -90 54) -90]
Test Case: 580 | Input/Output: [(-6 -75 -10 62) -75]
Test Case: 581 | Input/Output: [(82 46 -56 -95) -95]
Test Case: 582 | Input/Output: [(62 -49 -87 57) -87]
Test Case: 583 | Input/Output: [(-56 -50 63 14) -56]
Test Case: 584 | Input/Output: [(28 -50 -8 3) -50]
Test Case: 585 | Input/Output: [(94 6 10 -92) -92]
Test Case: 586 | Input/Output: [(78 -40 -85 -95) -95]
Test Case: 587 | Input/Output: [(31 -36 65 -70) -70]
Test Case: 588 | Input/Output: [(-47 24 -83 90) -83]
Test Case: 589 | Input/Output: [(-11 3 38 -21) -21]
Test Case: 590 | Input/Output: [(22 -78 32 -44) -78]
Test Case: 591 | Input/Output: [(-54 53 -21 17) -54]
Test Case: 592 | Input/Output: [(2 44 75 6) 2]
Test Case: 593 | Input/Output: [(93 -20 -71 -54) -71]
Test Case: 594 | Input/Output: [(8 100 -13 -78) -78]
Test Case: 595 | Input/Output: [(-34 47 -80 38) -80]
Test Case: 596 | Input/Output: [(2 49 71 89) 2]
Test Case: 597 | Input/Output: [(85 54 21 13) 13]
Test Case: 598 | Input/Output: [(-32 -53 86 -85) -85]
Test Case: 599 | Input/Output: [(-50 -42 100 95) -50]
Test Case: 600 | Input/Output: [(-13 -18 9 0) -18]
Test Case: 601 | Input/Output: [(0 -97 -46 93) -97]
Test Case: 602 | Input/Output: [(-88 93 -37 -90) -90]
Test Case: 603 | Input/Output: [(-85 -47 -72 -92) -92]
Test Case: 604 | Input/Output: [(-40 -100 48 -97) -100]
Test Case: 605 | Input/Output: [(41 6 -57 -25) -57]
Test Case: 606 | Input/Output: [(-12 98 -77 -25) -77]
Test Case: 607 | Input/Output: [(39 -69 -28 -4) -69]
Test Case: 608 | Input/Output: [(-27 64 -3 30) -27]
Test Case: 609 | Input/Output: [(-65 -73 -47 24) -73]
Test Case: 610 | Input/Output: [(18 19 6 41) 6]
Test Case: 611 | Input/Output: [(19 -90 -9 -88) -90]
Test Case: 612 | Input/Output: [(-36 34 -60 -57) -60]
Test Case: 613 | Input/Output: [(-1 -6 -13 -31) -31]
Test Case: 614 | Input/Output: [(99 84 51 -93) -93]
Test Case: 615 | Input/Output: [(89 55 7 4) 4]
Test Case: 616 | Input/Output: [(58 41 99 -33) -33]
Test Case: 617 | Input/Output: [(-27 -3 -73 -66) -73]
Test Case: 618 | Input/Output: [(-48 42 -84 80) -84]
Test Case: 619 | Input/Output: [(86 -46 -47 51) -47]
Test Case: 620 | Input/Output: [(12 -49 -61 -51) -61]
Test Case: 621 | Input/Output: [(78 -35 -45 42) -45]
Test Case: 622 | Input/Output: [(-53 55 32 -18) -53]
Test Case: 623 | Input/Output: [(73 2 32 -77) -77]
Test Case: 624 | Input/Output: [(20 5 11 -55) -55]
Test Case: 625 | Input/Output: [(80 -59 -68 43) -68]
Test Case: 626 | Input/Output: [(-59 69 10 22) -59]
Test Case: 627 | Input/Output: [(99 89 -69 -52) -69]
Test Case: 628 | Input/Output: [(-66 24 43 92) -66]
Test Case: 629 | Input/Output: [(43 -54 55 65) -54]
Test Case: 630 | Input/Output: [(-78 7 40 -32) -78]
Test Case: 631 | Input/Output: [(85 -62 38 22) -62]
Test Case: 632 | Input/Output: [(-30 11 55 65) -30]
Test Case: 633 | Input/Output: [(98 94 81 -66) -66]
Test Case: 634 | Input/Output: [(81 -43 -30 84) -43]
Test Case: 635 | Input/Output: [(79 90 -22 -58) -58]
Test Case: 636 | Input/Output: [(72 -49 84 -99) -99]
Test Case: 637 | Input/Output: [(-21 -62 -14 50) -62]
Test Case: 638 | Input/Output: [(84 90 -94 46) -94]
Test Case: 639 | Input/Output: [(84 -22 -91 -30) -91]
Test Case: 640 | Input/Output: [(27 -25 97 -80) -80]
Test Case: 641 | Input/Output: [(-39 -5 97 -32) -39]
Test Case: 642 | Input/Output: [(-70 -35 39 74) -70]
Test Case: 643 | Input/Output: [(-9 87 98 74) -9]
Test Case: 644 | Input/Output: [(8 72 61 57) 8]
Test Case: 645 | Input/Output: [(-62 70 63 -80) -80]
Test Case: 646 | Input/Output: [(-25 80 94 4) -25]
Test Case: 647 | Input/Output: [(-88 16 62 -87) -88]
Test Case: 648 | Input/Output: [(42 87 -20 -1) -20]
Test Case: 649 | Input/Output: [(19 -73 -59 -35) -73]
Test Case: 650 | Input/Output: [(25 -59 99 35) -59]
Test Case: 651 | Input/Output: [(21 -63 24 73) -63]
Test Case: 652 | Input/Output: [(31 -99 -45 -57) -99]
Test Case: 653 | Input/Output: [(-14 -6 45 32) -14]
Test Case: 654 | Input/Output: [(-7 -25 31 5) -25]
Test Case: 655 | Input/Output: [(-2 -44 -23 54) -44]
Test Case: 656 | Input/Output: [(-20 30 13 64) -20]
Test Case: 657 | Input/Output: [(90 -72 -90 11) -90]
Test Case: 658 | Input/Output: [(-42 -14 -30 -77) -77]
Test Case: 659 | Input/Output: [(58 16 -60 97) -60]
Test Case: 660 | Input/Output: [(9 35 -72 97) -72]
Test Case: 661 | Input/Output: [(12 -80 46 87) -80]
Test Case: 662 | Input/Output: [(47 13 -72 83) -72]
Test Case: 663 | Input/Output: [(-13 58 -46 -7) -46]
Test Case: 664 | Input/Output: [(24 -35 -70 97) -70]
Test Case: 665 | Input/Output: [(27 36 15 -6) -6]
Test Case: 666 | Input/Output: [(73 -2 98 -75) -75]
Test Case: 667 | Input/Output: [(-99 87 34 -99) -99]
Test Case: 668 | Input/Output: [(13 41 -13 17) -13]
Test Case: 669 | Input/Output: [(-56 -9 -67 -71) -71]
Test Case: 670 | Input/Output: [(-89 56 -88 71) -89]
Test Case: 671 | Input/Output: [(-3 93 -12 50) -12]
Test Case: 672 | Input/Output: [(100 -88 93 5) -88]
Test Case: 673 | Input/Output: [(37 19 -28 -27) -28]
Test Case: 674 | Input/Output: [(-62 93 51 -58) -62]
Test Case: 675 | Input/Output: [(86 50 -12 -43) -43]
Test Case: 676 | Input/Output: [(20 -15 -14 51) -15]
Test Case: 677 | Input/Output: [(32 -52 -88 -64) -88]
Test Case: 678 | Input/Output: [(-58 -59 -87 -96) -96]
Test Case: 679 | Input/Output: [(-3 -29 28 7) -29]
Test Case: 680 | Input/Output: [(-5 -55 -60 20) -60]
Test Case: 681 | Input/Output: [(-95 53 -96 88) -96]
Test Case: 682 | Input/Output: [(-30 -10 52 -6) -30]
Test Case: 683 | Input/Output: [(65 -39 66 -24) -39]
Test Case: 684 | Input/Output: [(60 -43 58 -29) -43]
Test Case: 685 | Input/Output: [(-55 -61 85 -36) -61]
Test Case: 686 | Input/Output: [(48 57 -32 -42) -42]
Test Case: 687 | Input/Output: [(19 -34 86 -84) -84]
Test Case: 688 | Input/Output: [(-76 -4 51 -89) -89]
Test Case: 689 | Input/Output: [(-90 -76 18 -19) -90]
Test Case: 690 | Input/Output: [(7 43 -92 41) -92]
Test Case: 691 | Input/Output: [(-97 18 -7 -13) -97]
Test Case: 692 | Input/Output: [(17 -57 -96 41) -96]
Test Case: 693 | Input/Output: [(-15 -65 96 89) -65]
Test Case: 694 | Input/Output: [(-23 49 30 -67) -67]
Test Case: 695 | Input/Output: [(6 -40 -55 5) -55]
Test Case: 696 | Input/Output: [(76 -24 18 66) -24]
Test Case: 697 | Input/Output: [(84 65 37 -47) -47]
Test Case: 698 | Input/Output: [(-85 -90 58 75) -90]
Test Case: 699 | Input/Output: [(59 -37 -76 16) -76]
Test Case: 700 | Input/Output: [(-89 -99 79 -92) -99]
Test Case: 701 | Input/Output: [(40 -83 -24 -4) -83]
Test Case: 702 | Input/Output: [(-41 -56 18 21) -56]
Test Case: 703 | Input/Output: [(68 -40 7 -22) -40]
Test Case: 704 | Input/Output: [(0 15 -7 24) -7]
Test Case: 705 | Input/Output: [(20 88 99 -81) -81]
Test Case: 706 | Input/Output: [(-70 30 56 -83) -83]
Test Case: 707 | Input/Output: [(-53 12 -99 5) -99]
Test Case: 708 | Input/Output: [(100 3 -27 30) -27]
Test Case: 709 | Input/Output: [(-60 -45 4 28) -60]
Test Case: 710 | Input/Output: [(-64 88 38 -33) -64]
Test Case: 711 | Input/Output: [(57 0 -13 82) -13]
Test Case: 712 | Input/Output: [(42 -68 54 -87) -87]
Test Case: 713 | Input/Output: [(62 49 -97 -94) -97]
Test Case: 714 | Input/Output: [(-26 79 -86 21) -86]
Test Case: 715 | Input/Output: [(-15 -7 2 -40) -40]
Test Case: 716 | Input/Output: [(-29 41 69 -59) -59]
Test Case: 717 | Input/Output: [(20 34 12 61) 12]
Test Case: 718 | Input/Output: [(-39 3 -67 29) -67]
Test Case: 719 | Input/Output: [(90 52 -33 90) -33]
Test Case: 720 | Input/Output: [(73 -95 13 -70) -95]
Test Case: 721 | Input/Output: [(-58 29 -28 96) -58]
Test Case: 722 | Input/Output: [(63 88 80 -58) -58]
Test Case: 723 | Input/Output: [(53 -98 -86 -5) -98]
Test Case: 724 | Input/Output: [(-76 55 89 -4) -76]
Test Case: 725 | Input/Output: [(-58 28 36 -88) -88]
Test Case: 726 | Input/Output: [(84 -67 -66 54) -67]
Test Case: 727 | Input/Output: [(13 81 23 -26) -26]
Test Case: 728 | Input/Output: [(15 78 -10 88) -10]
Test Case: 729 | Input/Output: [(98 32 -9 98) -9]
Test Case: 730 | Input/Output: [(35 29 -51 12) -51]
Test Case: 731 | Input/Output: [(-89 -12 -1 0) -89]
Test Case: 732 | Input/Output: [(-64 19 19 -49) -64]
Test Case: 733 | Input/Output: [(21 -67 -42 -8) -67]
Test Case: 734 | Input/Output: [(35 62 -81 -7) -81]
Test Case: 735 | Input/Output: [(39 -9 23 24) -9]
Test Case: 736 | Input/Output: [(0 -16 -66 -12) -66]
Test Case: 737 | Input/Output: [(36 43 -12 -61) -61]
Test Case: 738 | Input/Output: [(-42 42 -64 -79) -79]
Test Case: 739 | Input/Output: [(87 65 -96 -86) -96]
Test Case: 740 | Input/Output: [(25 -16 -37 -66) -66]
Test Case: 741 | Input/Output: [(80 -45 93 63) -45]
Test Case: 742 | Input/Output: [(-18 -91 -78 39) -91]
Test Case: 743 | Input/Output: [(24 91 80 -89) -89]
Test Case: 744 | Input/Output: [(-36 60 -37 -20) -37]
Test Case: 745 | Input/Output: [(-4 -42 -67 20) -67]
Test Case: 746 | Input/Output: [(91 16 -66 47) -66]
Test Case: 747 | Input/Output: [(-68 -27 43 -27) -68]
Test Case: 748 | Input/Output: [(19 1 60 -52) -52]
Test Case: 749 | Input/Output: [(-82 -7 -17 -87) -87]
Test Case: 750 | Input/Output: [(0 -20 33 59) -20]
Test Case: 751 | Input/Output: [(99 -38 -23 67) -38]
Test Case: 752 | Input/Output: [(60 91 -33 30) -33]
Test Case: 753 | Input/Output: [(35 20 17 -69) -69]
Test Case: 754 | Input/Output: [(-21 17 48 42) -21]
Test Case: 755 | Input/Output: [(73 -80 -55 26) -80]
Test Case: 756 | Input/Output: [(30 28 -79 -99) -99]
Test Case: 757 | Input/Output: [(-50 -3 17 84) -50]
Test Case: 758 | Input/Output: [(-90 95 68 4) -90]
Test Case: 759 | Input/Output: [(-11 21 -24 24) -24]
Test Case: 760 | Input/Output: [(-22 16 32 25) -22]
Test Case: 761 | Input/Output: [(-17 16 63 48) -17]
Test Case: 762 | Input/Output: [(-87 -87 65 14) -87]
Test Case: 763 | Input/Output: [(0 -92 -43 -30) -92]
Test Case: 764 | Input/Output: [(-71 -68 84 -56) -71]
Test Case: 765 | Input/Output: [(-9 -30 18 -56) -56]
Test Case: 766 | Input/Output: [(-4 0 90 -91) -91]
Test Case: 767 | Input/Output: [(-98 -47 95 95) -98]
Test Case: 768 | Input/Output: [(-44 -66 -82 -45) -82]
Test Case: 769 | Input/Output: [(-26 70 -38 -81) -81]
Test Case: 770 | Input/Output: [(-64 -62 61 -41) -64]
Test Case: 771 | Input/Output: [(90 86 49 66) 49]
Test Case: 772 | Input/Output: [(33 72 31 -4) -4]
Test Case: 773 | Input/Output: [(85 57 -91 36) -91]
Test Case: 774 | Input/Output: [(52 78 85 82) 52]
Test Case: 775 | Input/Output: [(33 41 99 10) 10]
Test Case: 776 | Input/Output: [(24 52 23 -12) -12]
Test Case: 777 | Input/Output: [(-7 93 89 -59) -59]
Test Case: 778 | Input/Output: [(-38 -31 -72 -38) -72]
Test Case: 779 | Input/Output: [(48 41 -10 -25) -25]
Test Case: 780 | Input/Output: [(71 44 73 1) 1]
Test Case: 781 | Input/Output: [(-49 -62 49 77) -62]
Test Case: 782 | Input/Output: [(56 57 66 -24) -24]
Test Case: 783 | Input/Output: [(70 -44 97 100) -44]
Test Case: 784 | Input/Output: [(-8 -39 -16 76) -39]
Test Case: 785 | Input/Output: [(-82 -27 42 26) -82]
Test Case: 786 | Input/Output: [(93 -65 -42 -34) -65]
Test Case: 787 | Input/Output: [(64 -95 23 24) -95]
Test Case: 788 | Input/Output: [(-43 -82 62 99) -82]
Test Case: 789 | Input/Output: [(-15 50 -77 -65) -77]
Test Case: 790 | Input/Output: [(21 78 14 95) 14]
Test Case: 791 | Input/Output: [(-75 71 32 69) -75]
Test Case: 792 | Input/Output: [(-75 -86 -7 -93) -93]
Test Case: 793 | Input/Output: [(-43 21 71 -13) -43]
Test Case: 794 | Input/Output: [(90 68 -23 -73) -73]
Test Case: 795 | Input/Output: [(23 -8 -55 -74) -74]
Test Case: 796 | Input/Output: [(-40 45 48 -93) -93]
Test Case: 797 | Input/Output: [(-100 57 78 -90) -100]
Test Case: 798 | Input/Output: [(25 -58 -32 49) -58]
Test Case: 799 | Input/Output: [(4 46 -87 40) -87]
Test Case: 800 | Input/Output: [(10 -72 -58 -85) -85]
Test Case: 801 | Input/Output: [(-41 -93 58 -50) -93]
Test Case: 802 | Input/Output: [(-32 -25 31 -80) -80]
Test Case: 803 | Input/Output: [(5 -88 68 74) -88]
Test Case: 804 | Input/Output: [(11 51 55 -26) -26]
Test Case: 805 | Input/Output: [(63 79 29 88) 29]
Test Case: 806 | Input/Output: [(-42 -90 40 90) -90]
Test Case: 807 | Input/Output: [(-6 -10 90 18) -10]
Test Case: 808 | Input/Output: [(61 -37 95 -12) -37]
Test Case: 809 | Input/Output: [(70 -28 -80 98) -80]
Test Case: 810 | Input/Output: [(84 67 76 48) 48]
Test Case: 811 | Input/Output: [(-97 -41 -83 -90) -97]
Test Case: 812 | Input/Output: [(79 62 28 -46) -46]
Test Case: 813 | Input/Output: [(-22 -12 -14 98) -22]
Test Case: 814 | Input/Output: [(-62 33 -56 -45) -62]
Test Case: 815 | Input/Output: [(-9 -17 -53 -93) -93]
Test Case: 816 | Input/Output: [(87 -96 96 -43) -96]
Test Case: 817 | Input/Output: [(33 59 -42 50) -42]
Test Case: 818 | Input/Output: [(54 -87 -45 -26) -87]
Test Case: 819 | Input/Output: [(-32 52 71 -74) -74]
Test Case: 820 | Input/Output: [(-80 -98 99 -100) -100]
Test Case: 821 | Input/Output: [(10 -14 -9 15) -14]
Test Case: 822 | Input/Output: [(79 -69 1 89) -69]
Test Case: 823 | Input/Output: [(-100 -1 60 45) -100]
Test Case: 824 | Input/Output: [(-51 -75 -10 -49) -75]
Test Case: 825 | Input/Output: [(65 66 -62 12) -62]
Test Case: 826 | Input/Output: [(93 -16 -57 87) -57]
Test Case: 827 | Input/Output: [(14 -33 65 71) -33]
Test Case: 828 | Input/Output: [(58 -53 70 -71) -71]
Test Case: 829 | Input/Output: [(73 -17 39 73) -17]
Test Case: 830 | Input/Output: [(88 99 -56 -10) -56]
Test Case: 831 | Input/Output: [(95 -62 70 -14) -62]
Test Case: 832 | Input/Output: [(-17 -97 84 -60) -97]
Test Case: 833 | Input/Output: [(-44 -3 -47 -96) -96]
Test Case: 834 | Input/Output: [(67 -98 45 69) -98]
Test Case: 835 | Input/Output: [(6 43 -4 -21) -21]
Test Case: 836 | Input/Output: [(-25 89 64 5) -25]
Test Case: 837 | Input/Output: [(-33 -36 24 -63) -63]
Test Case: 838 | Input/Output: [(79 60 26 -56) -56]
Test Case: 839 | Input/Output: [(14 43 51 42) 14]
Test Case: 840 | Input/Output: [(13 -93 -92 -86) -93]
Test Case: 841 | Input/Output: [(-33 42 -47 4) -47]
Test Case: 842 | Input/Output: [(-11 -39 -46 0) -46]
Test Case: 843 | Input/Output: [(-87 -17 -24 -59) -87]
Test Case: 844 | Input/Output: [(78 -38 -100 -74) -100]
Test Case: 845 | Input/Output: [(87 73 -32 21) -32]
Test Case: 846 | Input/Output: [(-54 -81 81 -71) -81]
Test Case: 847 | Input/Output: [(17 -2 -32 -54) -54]
Test Case: 848 | Input/Output: [(-38 -58 -14 -17) -58]
Test Case: 849 | Input/Output: [(56 -4 -82 -21) -82]
Test Case: 850 | Input/Output: [(-74 -53 22 27) -74]
Test Case: 851 | Input/Output: [(2 74 -19 16) -19]
Test Case: 852 | Input/Output: [(33 -54 -64 22) -64]
Test Case: 853 | Input/Output: [(33 -32 -75 4) -75]
Test Case: 854 | Input/Output: [(14 -61 -34 5) -61]
Test Case: 855 | Input/Output: [(-82 1 -46 -43) -82]
Test Case: 856 | Input/Output: [(-33 85 -28 -60) -60]
Test Case: 857 | Input/Output: [(-63 -58 -31 -28) -63]
Test Case: 858 | Input/Output: [(-75 -100 -19 -20) -100]
Test Case: 859 | Input/Output: [(-8 59 0 -55) -55]
Test Case: 860 | Input/Output: [(36 17 63 23) 17]
Test Case: 861 | Input/Output: [(35 -28 67 68) -28]
Test Case: 862 | Input/Output: [(-69 -32 3 43) -69]
Test Case: 863 | Input/Output: [(-98 83 -81 -13) -98]
Test Case: 864 | Input/Output: [(-72 -75 63 -67) -75]
Test Case: 865 | Input/Output: [(32 -32 -5 28) -32]
Test Case: 866 | Input/Output: [(73 -19 -13 -47) -47]
Test Case: 867 | Input/Output: [(1 45 -87 5) -87]
Test Case: 868 | Input/Output: [(23 -55 71 -85) -85]
Test Case: 869 | Input/Output: [(61 86 -3 -55) -55]
Test Case: 870 | Input/Output: [(-69 20 96 -19) -69]
Test Case: 871 | Input/Output: [(5 -27 -74 90) -74]
Test Case: 872 | Input/Output: [(-81 65 -99 26) -99]
Test Case: 873 | Input/Output: [(24 16 -50 -62) -62]
Test Case: 874 | Input/Output: [(-25 32 -35 -56) -56]
Test Case: 875 | Input/Output: [(85 78 2 -68) -68]
Test Case: 876 | Input/Output: [(-38 26 8 -3) -38]
Test Case: 877 | Input/Output: [(-15 88 -50 35) -50]
Test Case: 878 | Input/Output: [(27 -24 -73 -63) -73]
Test Case: 879 | Input/Output: [(28 -77 -100 -17) -100]
Test Case: 880 | Input/Output: [(15 -26 99 100) -26]
Test Case: 881 | Input/Output: [(54 -92 -33 6) -92]
Test Case: 882 | Input/Output: [(41 1 -81 55) -81]
Test Case: 883 | Input/Output: [(-24 -12 -36 97) -36]
Test Case: 884 | Input/Output: [(64 40 52 -79) -79]
Test Case: 885 | Input/Output: [(-39 41 8 -56) -56]
Test Case: 886 | Input/Output: [(-22 32 -68 -77) -77]
Test Case: 887 | Input/Output: [(-85 -26 32 46) -85]
Test Case: 888 | Input/Output: [(-57 93 72 -47) -57]
Test Case: 889 | Input/Output: [(-27 8 -1 2) -27]
Test Case: 890 | Input/Output: [(-11 -87 -44 51) -87]
Test Case: 891 | Input/Output: [(-53 -75 -73 -35) -75]
Test Case: 892 | Input/Output: [(31 57 22 62) 22]
Test Case: 893 | Input/Output: [(-39 -75 77 -38) -75]
Test Case: 894 | Input/Output: [(94 -90 26 61) -90]
Test Case: 895 | Input/Output: [(95 -4 72 -2) -4]
Test Case: 896 | Input/Output: [(89 -94 33 70) -94]
Test Case: 897 | Input/Output: [(-80 42 31 -39) -80]
Test Case: 898 | Input/Output: [(-43 87 -97 -87) -97]
Test Case: 899 | Input/Output: [(-72 91 -63 76) -72]
Test Case: 900 | Input/Output: [(-7 22 57 -85) -85]
Test Case: 901 | Input/Output: [(-76 33 61 -14) -76]
Test Case: 902 | Input/Output: [(43 -87 12 100) -87]
Test Case: 903 | Input/Output: [(2 65 -21 15) -21]
Test Case: 904 | Input/Output: [(-86 -58 -2 100) -86]
Test Case: 905 | Input/Output: [(-82 43 -56 -90) -90]
Test Case: 906 | Input/Output: [(-87 80 -91 99) -91]
Test Case: 907 | Input/Output: [(65 64 42 -19) -19]
Test Case: 908 | Input/Output: [(-98 -34 21 -2) -98]
Test Case: 909 | Input/Output: [(63 57 3 -14) -14]
Test Case: 910 | Input/Output: [(71 63 90 44) 44]
Test Case: 911 | Input/Output: [(37 3 -57 -52) -57]
Test Case: 912 | Input/Output: [(-8 15 -13 -4) -13]
Test Case: 913 | Input/Output: [(-75 -80 -22 -28) -80]
Test Case: 914 | Input/Output: [(-9 -61 -88 -57) -88]
Test Case: 915 | Input/Output: [(-73 -70 94 100) -73]
Test Case: 916 | Input/Output: [(-68 -90 53 67) -90]
Test Case: 917 | Input/Output: [(-9 -97 -63 24) -97]
Test Case: 918 | Input/Output: [(6 -52 -68 64) -68]
Test Case: 919 | Input/Output: [(63 73 -99 76) -99]
Test Case: 920 | Input/Output: [(3 83 18 29) 3]
Test Case: 921 | Input/Output: [(-91 68 -15 63) -91]
Test Case: 922 | Input/Output: [(-84 63 -90 91) -90]
Test Case: 923 | Input/Output: [(-52 -39 -43 -76) -76]
Test Case: 924 | Input/Output: [(-95 -74 -78 38) -95]
Test Case: 925 | Input/Output: [(-94 71 92 -80) -94]
Test Case: 926 | Input/Output: [(28 98 42 -35) -35]
Test Case: 927 | Input/Output: [(-69 47 -84 -54) -84]
Test Case: 928 | Input/Output: [(81 -86 27 79) -86]
Test Case: 929 | Input/Output: [(95 -6 -99 -73) -99]
Test Case: 930 | Input/Output: [(14 36 31 -57) -57]
Test Case: 931 | Input/Output: [(-83 56 38 -30) -83]
Test Case: 932 | Input/Output: [(-79 -30 7 -46) -79]
Test Case: 933 | Input/Output: [(78 27 70 -68) -68]
Test Case: 934 | Input/Output: [(38 22 -69 -64) -69]
Test Case: 935 | Input/Output: [(86 75 -59 27) -59]
Test Case: 936 | Input/Output: [(-48 -58 -22 14) -58]
Test Case: 937 | Input/Output: [(56 76 34 30) 30]
Test Case: 938 | Input/Output: [(-5 -36 7 26) -36]
Test Case: 939 | Input/Output: [(-28 -63 -7 -56) -63]
Test Case: 940 | Input/Output: [(61 56 -37 93) -37]
Test Case: 941 | Input/Output: [(-26 -83 24 88) -83]
Test Case: 942 | Input/Output: [(0 -64 -40 -97) -97]
Test Case: 943 | Input/Output: [(-58 39 -28 -39) -58]
Test Case: 944 | Input/Output: [(-44 11 16 -3) -44]
Test Case: 945 | Input/Output: [(-55 37 -71 -2) -71]
Test Case: 946 | Input/Output: [(-40 -65 23 -45) -65]
Test Case: 947 | Input/Output: [(92 -2 -10 -7) -10]
Test Case: 948 | Input/Output: [(38 -80 -13 -95) -95]
Test Case: 949 | Input/Output: [(-94 -47 -32 47) -94]
Test Case: 950 | Input/Output: [(49 45 -85 10) -85]
Test Case: 951 | Input/Output: [(81 71 -95 -6) -95]
Test Case: 952 | Input/Output: [(86 96 26 65) 26]
Test Case: 953 | Input/Output: [(62 89 68 42) 42]
Test Case: 954 | Input/Output: [(-25 72 81 60) -25]
Test Case: 955 | Input/Output: [(-34 94 -10 80) -34]
Test Case: 956 | Input/Output: [(-12 -72 -96 16) -96]
Test Case: 957 | Input/Output: [(-73 71 -50 20) -73]
Test Case: 958 | Input/Output: [(44 -52 -4 86) -52]
Test Case: 959 | Input/Output: [(-9 22 -40 40) -40]
Test Case: 960 | Input/Output: [(-34 12 73 -40) -40]
Test Case: 961 | Input/Output: [(-23 -63 -53 -25) -63]
Test Case: 962 | Input/Output: [(32 -88 26 64) -88]
Test Case: 963 | Input/Output: [(-41 21 -93 -69) -93]
Test Case: 964 | Input/Output: [(-69 -84 58 63) -84]
Test Case: 965 | Input/Output: [(-94 79 -77 90) -94]
Test Case: 966 | Input/Output: [(-53 94 -51 59) -53]
Test Case: 967 | Input/Output: [(100 -31 90 52) -31]
Test Case: 968 | Input/Output: [(-11 -19 54 97) -19]
Test Case: 969 | Input/Output: [(-67 -75 45 -68) -75]
Test Case: 970 | Input/Output: [(-27 40 -64 -83) -83]
Test Case: 971 | Input/Output: [(-66 48 41 -73) -73]
Test Case: 972 | Input/Output: [(78 -21 62 42) -21]
Test Case: 973 | Input/Output: [(70 16 -34 -35) -35]
Test Case: 974 | Input/Output: [(98 -6 -83 -78) -83]
Test Case: 975 | Input/Output: [(80 23 18 89) 18]
Test Case: 976 | Input/Output: [(-89 -62 -7 57) -89]
Test Case: 977 | Input/Output: [(74 -93 9 27) -93]
Test Case: 978 | Input/Output: [(-31 9 56 98) -31]
Test Case: 979 | Input/Output: [(-61 14 -19 -63) -63]
Test Case: 980 | Input/Output: [(41 93 -99 25) -99]
Test Case: 981 | Input/Output: [(86 78 71 -51) -51]
Test Case: 982 | Input/Output: [(88 57 -18 52) -18]
Test Case: 983 | Input/Output: [(62 44 -5 -60) -60]
Test Case: 984 | Input/Output: [(51 31 81 6) 6]
Test Case: 985 | Input/Output: [(-20 37 1 36) -20]
Test Case: 986 | Input/Output: [(33 -49 -14 -13) -49]
Test Case: 987 | Input/Output: [(71 21 83 -53) -53]
Test Case: 988 | Input/Output: [(-44 66 74 -7) -44]
Test Case: 989 | Input/Output: [(-99 92 -25 -10) -99]
Test Case: 990 | Input/Output: [(-1 -46 -96 -45) -96]
Test Case: 991 | Input/Output: [(88 99 0 -51) -51]
Test Case: 992 | Input/Output: [(26 -16 -58 46) -58]
Test Case: 993 | Input/Output: [(-55 9 -59 6) -59]
Test Case: 994 | Input/Output: [(1 50 63 97) 1]
Test Case: 995 | Input/Output: [(11 71 -5 15) -5]
Test Case: 996 | Input/Output: [(40 -59 77 76) -59]
Test Case: 997 | Input/Output: [(72 30 -17 -65) -65]
Test Case: 998 | Input/Output: [(45 -71 -42 -62) -71]
Test Case: 999 | Input/Output: [(99 65 -29 -17) -29]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 98f17fffbd710431b7ffe02918e462d48a2ebada
GitHub link = https://github.com/lspector/Clojush/commit/98f17fffbd710431b7ffe02918e462d48a2ebada
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x30b9728f clojush.problems.software.smallest$fn__7460@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@24b8a393]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
random-screen = false
random-seed = 127 67 -49 117 95 85 -85 -107 8 69 94 -11 -41 34 15 25
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[7 7 30 7] 7] [[91 6 91 91] 6] [[-41 -74 -74 -74] -74] [[-5 20 20 20] -5] [[-5 -5 -5 68] -5] [[58 83 58 58] 58] [[-1 -1 -15 -1] -15] [[-8 19 19 19] -8] [[-28 -28 72 -28] -28] [[-65 -65 -65 -90] -90] [(43 43 43 43) 43] [(-37 -37 -37 -37) -37] [(-35 -35 -35 -35) -35] [(-9 -9 -9 -9) -9] [(25 25 25 25) 25] [(49 5 12 29) 5] [(0 26 24 42) 0] [(38 35 16 6) 6] [(4 90 93 100) 4] [(48 60 37 69) 37] [(24 25 51 10) 10] [(2 45 50 11) 2] [(84 41 7 54) 7] [(64 39 11 12) 11] [(74 13 36 41) 13] [(81 99 92 29) 29] [(3 17 26 72) 3] [(30 60 98 2) 2] [(81 72 71 2) 2] [(54 9 86 22) 9] [(43 36 66 72) 36] [(42 75 99 57) 42] [(53 9 53 51) 9] [(53 100 33 11) 11] [(25 99 14 15) 14] [(-19 67 34 -55) -55] [(57 -30 72 -76) -76] [(-9 75 27 -93) -93] [(-55 100 59 13) -55] [(70 0 73 14) 0] [(-95 20 1 -22) -95] [(-95 59 60 42) -95] [(1 -66 -99 7) -99] [(72 -35 -92 -42) -92] [(-35 -22 -21 -84) -84] [(-55 -5 72 -18) -55] [(32 -44 -14 42) -44] [(40 48 44 71) 40] [(-40 10 -75 -97) -97] [(27 38 -9 -15) -15] [(48 43 -73 49) -73] [(-70 -50 -77 -76) -77] [(-27 6 -12 -3) -27] [(-4 80 -11 77) -11] [(86 71 49 14) 14] [(-29 -100 10 33) -100] [(25 44 62 -16) -16] [(-60 88 -75 -6) -75] [(-15 -2 0 -5) -15] [(-59 33 61 90) -59] [(-100 -60 56 97) -100] [(90 -51 7 96) -51] [(-62 85 33 -59) -62] [(48 6 73 58) 6] [(53 -98 95 -21) -98] [(-80 74 -14 49) -80] [(74 44 -60 4) -60] [(82 -87 36 -30) -87] [(-99 -58 -55 -22) -99] [(-63 -15 38 38) -63] [(22 -82 -99 59) -99] [(3 68 60 2) 2] [(30 -18 -30 -55) -55] [(9 -84 0 59) -84] [(53 53 52 46) 46] [(30 46 71 -26) -26] [(25 99 -7 -1) -7] [(16 -18 58 81) -18] [(59 -42 97 -85) -85] [(-47 97 -10 82) -47] [(99 9 -10 -86) -86] [(4 55 -74 -80) -80] [(92 55 -30 -29) -30] [(-86 -69 -19 96) -86] [(87 -45 -81 -92) -92] [(-77 -60 74 -81) -81] [(59 80 -82 -85) -85] [(7 11 -94 94) -94] [(-83 99 76 68) -83] [(44 24 41 57) 24] [(9 79 55 -27) -27] [(7 -15 -11 -13) -15] [(96 -36 16 57) -36] [(76 -71 -49 58) -71] [(93 -93 65 -36) -93])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 637
Test mean error for best: 0.63700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 7                   | Program output: 7                  
Correct output: 6                   | Program output: 6                  
Correct output: -74                 | Program output: -74                
Correct output: -5                  | Program output: 20                 
Correct output: -5                  | Program output: -5                 
Correct output: 58                  | Program output: 83                 
Correct output: -15                 | Program output: -1                 
Correct output: -8                  | Program output: 19                 
Correct output: -28                 | Program output: -28                
Correct output: -90                 | Program output: -65                
Correct output: 43                  | Program output: 43                 
Correct output: -37                 | Program output: -37                
Correct output: -35                 | Program output: -35                
Correct output: -9                  | Program output: -9                 
Correct output: 25                  | Program output: 25                 
Correct output: 5                   | Program output: 5                  
Correct output: 0                   | Program output: 26                 
Correct output: 6                   | Program output: 35                 
Correct output: 4                   | Program output: 90                 
Correct output: 37                  | Program output: 60                 
Correct output: 10                  | Program output: 25                 
Correct output: 2                   | Program output: 45                 
Correct output: 7                   | Program output: 41                 
Correct output: 11                  | Program output: 39                 
Correct output: 13                  | Program output: 13                 
Correct output: 29                  | Program output: 99                 
Correct output: 3                   | Program output: 17                 
Correct output: 2                   | Program output: 60                 
Correct output: 2                   | Program output: 72                 
Correct output: 9                   | Program output: 9                  
Correct output: 36                  | Program output: 36                 
Correct output: 42                  | Program output: 75                 
Correct output: 9                   | Program output: 9                  
Correct output: 11                  | Program output: 100                
Correct output: 14                  | Program output: 99                 
Correct output: -55                 | Program output: 67                 
Correct output: -76                 | Program output: -30                
Correct output: -93                 | Program output: 75                 
Correct output: -55                 | Program output: 100                
Correct output: 0                   | Program output: 0                  
Correct output: -95                 | Program output: 20                 
Correct output: -95                 | Program output: 59                 
Correct output: -99                 | Program output: -66                
Correct output: -92                 | Program output: -35                
Correct output: -84                 | Program output: -22                
Correct output: -55                 | Program output: -5                 
Correct output: -44                 | Program output: -44                
Correct output: 40                  | Program output: 48                 
Correct output: -97                 | Program output: 10                 
Correct output: -15                 | Program output: 38                 
Correct output: -73                 | Program output: 43                 
Correct output: -77                 | Program output: -50                
Correct output: -27                 | Program output: 6                  
Correct output: -11                 | Program output: 80                 
Correct output: 14                  | Program output: 71                 
Correct output: -100                | Program output: -100               
Correct output: -16                 | Program output: 44                 
Correct output: -75                 | Program output: 88                 
Correct output: -15                 | Program output: -2                 
Correct output: -59                 | Program output: 33                 
Correct output: -100                | Program output: -60                
Correct output: -51                 | Program output: -51                
Correct output: -62                 | Program output: 85                 
Correct output: 6                   | Program output: 6                  
Correct output: -98                 | Program output: -98                
Correct output: -80                 | Program output: 74                 
Correct output: -60                 | Program output: 44                 
Correct output: -87                 | Program output: -87                
Correct output: -99                 | Program output: -58                
Correct output: -63                 | Program output: -15                
Correct output: -99                 | Program output: -82                
Correct output: 2                   | Program output: 68                 
Correct output: -55                 | Program output: -18                
Correct output: -84                 | Program output: -84                
Correct output: 46                  | Program output: 53                 
Correct output: -26                 | Program output: 46                 
Correct output: -7                  | Program output: 99                 
Correct output: -18                 | Program output: -18                
Correct output: -85                 | Program output: -42                
Correct output: -47                 | Program output: 97                 
Correct output: -86                 | Program output: 9                  
Correct output: -80                 | Program output: 55                 
Correct output: -30                 | Program output: 55                 
Correct output: -86                 | Program output: -69                
Correct output: -92                 | Program output: -45                
Correct output: -81                 | Program output: -60                
Correct output: -85                 | Program output: 80                 
Correct output: -94                 | Program output: 11                 
Correct output: -83                 | Program output: 99                 
Correct output: 24                  | Program output: 24                 
Correct output: -27                 | Program output: 79                 
Correct output: -15                 | Program output: -15                
Correct output: -36                 | Program output: -36                
Correct output: -71                 | Program output: -71                
Correct output: -93                 | Program output: -93                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_while} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_rot} {:close 0, :instruction in1} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_rot} {:close 1, :instruction 68} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction -30} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_y} {:close 0, :instruction print_exec} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_yankdup} {:close 2, :instruction print_exec} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_integer_39} {:close 0, :instruction print_newline} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_eq} {:close 0, :instruction print_newline} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yank} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction print_newline} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_s} {:close 0, :instruction exec_k} {:close 0, :instruction tagged_669} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_eq})
Lexicase best program: (boolean_dup boolean_dup_times integer_eq exec_while () exec_if (boolean_rot in1 print_boolean boolean_rot 68) (integer_fromboolean integer_yank print_integer exec_y (exec_swap (exec_k (integer_gt boolean_dup_times) (boolean_flush boolean_yank exec_stackdepth -30 integer_lte boolean_and exec_while (integer_dup_times) integer_gte integer_lte exec_y () print_exec (print_boolean integer_dup_times) exec_dup_items integer_inc exec_pop (exec_do*times (exec_dup_times (exec_pop (integer_shove integer_yankdup print_exec ()) boolean_rot exec_eq boolean_xor tag_integer_39 print_newline integer_div) boolean_invert_second_then_and integer_shove integer_eq) print_newline exec_do*range (exec_yankdup exec_dup (integer_dec) integer_div) integer_swap) exec_empty) integer_mod boolean_yank integer_fromboolean) () boolean_pop integer_flush) boolean_dup_items boolean_empty integer_dup exec_stackdepth exec_empty) exec_empty boolean_frominteger integer_lt integer_stackdepth boolean_invert_first_then_and exec_k_when_autoconstructing (boolean_yankdup boolean_yank exec_k_when_autoconstructing () (integer_fromboolean boolean_stackdepth integer_mult integer_lte integer_dup boolean_not boolean_frominteger print_newline exec_y_when_autoconstructing (exec_s () (exec_k (tagged_669 exec_yank) (integer_eq)) ()))) ())
Lexicase best errors: [0 1 1 1 1 0 1 0 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 120
Percent parens: 0.242
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_while} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_rot} {:close 0, :instruction in1} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_rot} {:close 1, :instruction 68} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction -30} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_y} {:close 0, :instruction print_exec} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_yankdup} {:close 2, :instruction print_exec} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_integer_39} {:close 0, :instruction print_newline} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_eq} {:close 0, :instruction print_newline} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yank} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction print_newline} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_s} {:close 0, :instruction exec_k} {:close 0, :instruction tagged_669} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_eq})
Zero cases best program: (boolean_dup boolean_dup_times integer_eq exec_while () exec_if (boolean_rot in1 print_boolean boolean_rot 68) (integer_fromboolean integer_yank print_integer exec_y (exec_swap (exec_k (integer_gt boolean_dup_times) (boolean_flush boolean_yank exec_stackdepth -30 integer_lte boolean_and exec_while (integer_dup_times) integer_gte integer_lte exec_y () print_exec (print_boolean integer_dup_times) exec_dup_items integer_inc exec_pop (exec_do*times (exec_dup_times (exec_pop (integer_shove integer_yankdup print_exec ()) boolean_rot exec_eq boolean_xor tag_integer_39 print_newline integer_div) boolean_invert_second_then_and integer_shove integer_eq) print_newline exec_do*range (exec_yankdup exec_dup (integer_dec) integer_div) integer_swap) exec_empty) integer_mod boolean_yank integer_fromboolean) () boolean_pop integer_flush) boolean_dup_items boolean_empty integer_dup exec_stackdepth exec_empty) exec_empty boolean_frominteger integer_lt integer_stackdepth boolean_invert_first_then_and exec_k_when_autoconstructing (boolean_yankdup boolean_yank exec_k_when_autoconstructing () (integer_fromboolean boolean_stackdepth integer_mult integer_lte integer_dup boolean_not boolean_frominteger print_newline exec_y_when_autoconstructing (exec_s () (exec_k (tagged_669 exec_yank) (integer_eq)) ()))) ())
Zero cases best errors: [0 1 1 1 1 0 1 0 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 120
Percent parens: 0.242
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 1000 1000 2 3 2 2 2 2 2)
Population mean number of elite cases: 2.02
Count of perfect (error zero) individuals by case: (1 0 0 2 3 2 2 2 2 2)
Population mean number of perfect (error zero) cases: 0.02
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in2} {:close 1, :instruction exec_when} {:close 0, :instruction integer_add} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction print_boolean} {:close 2, :instruction boolean_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_y} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_add} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_sub} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 2, :instruction integer_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction -61} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_stackdepth} {:close 2, :instruction integer_inc} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_eq} {:close 0, :instruction tag_integer_242} {:close 0, :instruction integer_add} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_k} {:close 0, :instruction tagged_765} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_s} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_do*range})
Best program: (in2 exec_when () integer_add integer_min print_integer print_boolean boolean_swap integer_dec exec_dup_times (boolean_flush exec_do*count () boolean_and print_integer in3 integer_dup exec_y () exec_do*times (exec_stackdepth exec_k_when_autoconstructing () (boolean_empty boolean_pop integer_add integer_pop integer_fromboolean boolean_xor) boolean_yank boolean_invert_second_then_and exec_yank) integer_dec boolean_stackdepth boolean_dup boolean_swap boolean_dup_times) exec_eq integer_sub boolean_pop boolean_yank integer_mod boolean_and integer_shove exec_shove (integer_fromboolean -61) boolean_pop boolean_eq integer_stackdepth integer_yank exec_stackdepth integer_inc integer_pop integer_yankdup boolean_frominteger exec_pop (boolean_yank boolean_dup_items integer_lt integer_div boolean_or) integer_eq integer_sub integer_inc boolean_empty boolean_yank boolean_invert_second_then_and boolean_eq boolean_rot in3 exec_empty print_boolean boolean_empty integer_rot boolean_dup boolean_stackdepth exec_when () in2 exec_yank exec_dup_items integer_sub exec_eq tag_integer_242 integer_add exec_s () (boolean_stackdepth exec_k (tagged_765 exec_empty integer_empty exec_s () (exec_dup (boolean_yank) integer_shove in3 exec_do*range ()) ()) ()) ())
Errors: [1 1 1 1 1 0 0 1 0 1]
Total: 7
Mean: 0.7
Genome size: 93
Size: 114
Percent parens: 0.184
--- Population Statistics ---
Average total errors in population: 9.984
Median total errors in population: 10
Error averages by case: (0.999 1.0 1.0 0.998 0.997 0.998 0.998 0.998 0.998 0.998)
Error minima by case: (0 1 1 0 0 0 0 0 0 0)
Average genome size in population (length): 50.279
Average program size in population (points): 68.86
Average percent parens in population: 0.277
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.998
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.998
Total error diversity:				 0.004
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.269
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 486232
--- Timings ---
Current time: 1559314317499 milliseconds
Total Time:           2.5 seconds
Initialization:       0.1 seconds,  4.1%
Reproduction:         0.8 seconds, 30.2%
Fitness Testing:      1.7 seconds, 65.6%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 637
Test mean error for best: 0.63700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 7                   | Program output: 7                  
Correct output: 6                   | Program output: 6                  
Correct output: -74                 | Program output: -74                
Correct output: -5                  | Program output: 20                 
Correct output: -5                  | Program output: -5                 
Correct output: 58                  | Program output: 83                 
Correct output: -15                 | Program output: -1                 
Correct output: -8                  | Program output: 19                 
Correct output: -28                 | Program output: -28                
Correct output: -90                 | Program output: -65                
Correct output: 43                  | Program output: 43                 
Correct output: -37                 | Program output: -37                
Correct output: -35                 | Program output: -35                
Correct output: -9                  | Program output: -9                 
Correct output: 25                  | Program output: 25                 
Correct output: 5                   | Program output: 5                  
Correct output: 0                   | Program output: 26                 
Correct output: 6                   | Program output: 35                 
Correct output: 4                   | Program output: 90                 
Correct output: 37                  | Program output: 60                 
Correct output: 10                  | Program output: 25                 
Correct output: 2                   | Program output: 45                 
Correct output: 7                   | Program output: 41                 
Correct output: 11                  | Program output: 39                 
Correct output: 13                  | Program output: 13                 
Correct output: 29                  | Program output: 99                 
Correct output: 3                   | Program output: 17                 
Correct output: 2                   | Program output: 60                 
Correct output: 2                   | Program output: 72                 
Correct output: 9                   | Program output: 9                  
Correct output: 36                  | Program output: 36                 
Correct output: 42                  | Program output: 75                 
Correct output: 9                   | Program output: 9                  
Correct output: 11                  | Program output: 100                
Correct output: 14                  | Program output: 99                 
Correct output: -55                 | Program output: 67                 
Correct output: -76                 | Program output: -30                
Correct output: -93                 | Program output: 75                 
Correct output: -55                 | Program output: 100                
Correct output: 0                   | Program output: 0                  
Correct output: -95                 | Program output: 20                 
Correct output: -95                 | Program output: 59                 
Correct output: -99                 | Program output: -66                
Correct output: -92                 | Program output: -35                
Correct output: -84                 | Program output: -22                
Correct output: -55                 | Program output: -5                 
Correct output: -44                 | Program output: -44                
Correct output: 40                  | Program output: 48                 
Correct output: -97                 | Program output: 10                 
Correct output: -15                 | Program output: 38                 
Correct output: -73                 | Program output: 43                 
Correct output: -77                 | Program output: -50                
Correct output: -27                 | Program output: 6                  
Correct output: -11                 | Program output: 80                 
Correct output: 14                  | Program output: 71                 
Correct output: -100                | Program output: -100               
Correct output: -16                 | Program output: 44                 
Correct output: -75                 | Program output: 88                 
Correct output: -15                 | Program output: -2                 
Correct output: -59                 | Program output: 33                 
Correct output: -100                | Program output: -60                
Correct output: -51                 | Program output: -51                
Correct output: -62                 | Program output: 85                 
Correct output: 6                   | Program output: 6                  
Correct output: -98                 | Program output: -98                
Correct output: -80                 | Program output: 74                 
Correct output: -60                 | Program output: 44                 
Correct output: -87                 | Program output: -87                
Correct output: -99                 | Program output: -58                
Correct output: -63                 | Program output: -15                
Correct output: -99                 | Program output: -82                
Correct output: 2                   | Program output: 68                 
Correct output: -55                 | Program output: -18                
Correct output: -84                 | Program output: -84                
Correct output: 46                  | Program output: 53                 
Correct output: -26                 | Program output: 46                 
Correct output: -7                  | Program output: 99                 
Correct output: -18                 | Program output: -18                
Correct output: -85                 | Program output: -42                
Correct output: -47                 | Program output: 97                 
Correct output: -86                 | Program output: 9                  
Correct output: -80                 | Program output: 55                 
Correct output: -30                 | Program output: 55                 
Correct output: -86                 | Program output: -69                
Correct output: -92                 | Program output: -45                
Correct output: -81                 | Program output: -60                
Correct output: -85                 | Program output: 80                 
Correct output: -94                 | Program output: 11                 
Correct output: -83                 | Program output: 99                 
Correct output: 24                  | Program output: 24                 
Correct output: -27                 | Program output: 79                 
Correct output: -15                 | Program output: -15                
Correct output: -36                 | Program output: -36                
Correct output: -71                 | Program output: -71                
Correct output: -93                 | Program output: -93                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_while} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_rot} {:close 0, :instruction in1} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_rot} {:close 1, :instruction 68} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_y} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_add} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_sub} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 2, :instruction integer_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction -61} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_stackdepth} {:close 2, :instruction integer_inc} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_eq} {:close 0, :instruction tag_integer_242} {:close 0, :instruction integer_add} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_k} {:close 0, :instruction tagged_765} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_s} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_do*range})
Lexicase best program: (boolean_dup boolean_dup_times integer_eq exec_while () exec_if (boolean_rot in1 print_boolean boolean_rot 68) (integer_fromboolean integer_yank print_integer exec_y (exec_swap (exec_k (integer_gt boolean_dup_times) (boolean_flush print_integer in3 integer_dup exec_y () exec_do*times (exec_stackdepth exec_k_when_autoconstructing () (boolean_pop boolean_pop integer_add integer_pop integer_fromboolean boolean_xor) boolean_yank boolean_invert_second_then_and exec_yank) integer_dec boolean_stackdepth boolean_dup boolean_swap boolean_dup_times) exec_eq integer_sub) (boolean_pop) boolean_yank integer_mod boolean_and integer_shove)) exec_shove (integer_fromboolean -61) boolean_pop boolean_eq integer_stackdepth integer_yank exec_stackdepth integer_inc integer_pop integer_yankdup boolean_frominteger exec_pop (boolean_yank boolean_dup_items integer_lt integer_div boolean_or) integer_eq integer_sub integer_inc boolean_empty boolean_yank boolean_invert_second_then_and boolean_eq boolean_rot in3 exec_empty print_boolean boolean_empty integer_rot boolean_dup boolean_stackdepth exec_when () in2 exec_yank exec_dup_items integer_sub exec_eq tag_integer_242 integer_add exec_s () (boolean_stackdepth exec_k (tagged_765 exec_empty integer_empty exec_s () (exec_dup (boolean_yank) integer_shove in3 exec_do*range ()) ()) ()) ())
Lexicase best errors: [0 0 0 1 0 1 1 1 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 126
Percent parens: 0.206
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_while} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_rot} {:close 0, :instruction in1} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_rot} {:close 1, :instruction 68} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_y} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_add} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_sub} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 2, :instruction integer_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction -61} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_stackdepth} {:close 2, :instruction integer_inc} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_eq} {:close 0, :instruction tag_integer_242} {:close 0, :instruction integer_add} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_k} {:close 0, :instruction tagged_765} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_s} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_do*range})
Zero cases best program: (boolean_dup boolean_dup_times integer_eq exec_while () exec_if (boolean_rot in1 print_boolean boolean_rot 68) (integer_fromboolean integer_yank print_integer exec_y (exec_swap (exec_k (integer_gt boolean_dup_times) (boolean_flush print_integer in3 integer_dup exec_y () exec_do*times (exec_stackdepth exec_k_when_autoconstructing () (boolean_pop boolean_pop integer_add integer_pop integer_fromboolean boolean_xor) boolean_yank boolean_invert_second_then_and exec_yank) integer_dec boolean_stackdepth boolean_dup boolean_swap boolean_dup_times) exec_eq integer_sub) (boolean_pop) boolean_yank integer_mod boolean_and integer_shove)) exec_shove (integer_fromboolean -61) boolean_pop boolean_eq integer_stackdepth integer_yank exec_stackdepth integer_inc integer_pop integer_yankdup boolean_frominteger exec_pop (boolean_yank boolean_dup_items integer_lt integer_div boolean_or) integer_eq integer_sub integer_inc boolean_empty boolean_yank boolean_invert_second_then_and boolean_eq boolean_rot in3 exec_empty print_boolean boolean_empty integer_rot boolean_dup boolean_stackdepth exec_when () in2 exec_yank exec_dup_items integer_sub exec_eq tag_integer_242 integer_add exec_s () (boolean_stackdepth exec_k (tagged_765 exec_empty integer_empty exec_s () (exec_dup (boolean_yank) integer_shove in3 exec_do*range ()) ()) ()) ())
Zero cases best errors: [0 0 0 1 0 1 1 1 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 126
Percent parens: 0.206
--- Lexicase Population Statistics ---
Count of elite individuals by case: (274 892 274 1000 887 1000 333 1000 285 288)
Population mean number of elite cases: 6.23
Count of perfect (error zero) individuals by case: (274 892 274 0 887 0 333 0 285 288)
Population mean number of perfect (error zero) cases: 3.23
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in2} {:close 1, :instruction exec_when} {:close 0, :instruction integer_add} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction print_boolean} {:close 2, :instruction boolean_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_y} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_add} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_sub} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 2, :instruction integer_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction -61} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_stackdepth} {:close 2, :instruction integer_inc} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_eq} {:close 0, :instruction tag_integer_242} {:close 0, :instruction integer_add} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_k} {:close 0, :instruction tagged_765} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_s} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_do*range})
Best program: (in2 exec_when () integer_add integer_min print_integer print_boolean boolean_swap integer_dec exec_dup_times (boolean_flush exec_do*count () boolean_and print_integer in3 integer_dup exec_y () exec_do*times (exec_stackdepth exec_k_when_autoconstructing () (boolean_empty boolean_pop integer_add integer_pop integer_fromboolean boolean_xor) boolean_yank boolean_invert_second_then_and exec_yank) integer_dec boolean_stackdepth boolean_dup boolean_swap boolean_dup_times) exec_eq integer_sub boolean_pop boolean_yank integer_mod boolean_and integer_shove exec_shove (integer_fromboolean -61) boolean_pop boolean_eq integer_stackdepth integer_yank exec_stackdepth integer_inc integer_pop integer_yankdup boolean_frominteger exec_pop (boolean_yank boolean_dup_items integer_lt integer_div boolean_or) integer_eq integer_sub integer_inc boolean_empty boolean_yank boolean_invert_second_then_and boolean_eq boolean_rot in3 exec_empty print_boolean boolean_empty integer_rot boolean_dup boolean_stackdepth exec_when () in2 exec_yank exec_dup_items integer_sub exec_eq tag_integer_242 integer_add exec_s () (boolean_stackdepth exec_k (tagged_765 exec_empty integer_empty exec_s () (exec_dup (boolean_yank) integer_shove in3 exec_do*range ()) ()) ()) ())
Errors: [1 0 1 1 0 1 1 1 0 0]
Total: 6
Mean: 0.6
Genome size: 93
Size: 114
Percent parens: 0.184
--- Population Statistics ---
Average total errors in population: 6.767
Median total errors in population: 6
Error averages by case: (0.726 0.108 0.726 1.0 0.113 1.0 0.667 1.0 0.715 0.712)
Error minima by case: (0 0 0 1 0 1 0 1 0 0)
Average genome size in population (length): 69.987
Average program size in population (points): 88.618
Average percent parens in population: 0.203
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.495
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 102
Genome diversity (% unique genomes):	 0.655
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 111
Syntactic diversity (% unique Push programs):	 0.639
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.056
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 1190213
--- Timings ---
Current time: 1559314321005 milliseconds
Total Time:           6.1 seconds
Initialization:       0.1 seconds,  1.7%
Reproduction:         2.5 seconds, 40.4%
Fitness Testing:      2.8 seconds, 46.9%
Report:               0.7 seconds, 11.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 680
Test mean error for best: 0.68000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 7                   | Program output: 7                  
Correct output: 6                   | Program output: 91                 
Correct output: -74                 | Program output: -41                
Correct output: -5                  | Program output: -5                 
Correct output: -5                  | Program output: -5                 
Correct output: 58                  | Program output: 58                 
Correct output: -15                 | Program output: -1                 
Correct output: -8                  | Program output: -8                 
Correct output: -28                 | Program output: -28                
Correct output: -90                 | Program output: -65                
Correct output: 43                  | Program output: 43                 
Correct output: -37                 | Program output: -37                
Correct output: -35                 | Program output: -35                
Correct output: -9                  | Program output: -9                 
Correct output: 25                  | Program output: 25                 
Correct output: 5                   | Program output: 49                 
Correct output: 0                   | Program output: 0                  
Correct output: 6                   | Program output: 38                 
Correct output: 4                   | Program output: 4                  
Correct output: 37                  | Program output: 48                 
Correct output: 10                  | Program output: 24                 
Correct output: 2                   | Program output: 2                  
Correct output: 7                   | Program output: 84                 
Correct output: 11                  | Program output: 64                 
Correct output: 13                  | Program output: 74                 
Correct output: 29                  | Program output: 81                 
Correct output: 3                   | Program output: 3                  
Correct output: 2                   | Program output: 30                 
Correct output: 2                   | Program output: 81                 
Correct output: 9                   | Program output: 54                 
Correct output: 36                  | Program output: 43                 
Correct output: 42                  | Program output: 42                 
Correct output: 9                   | Program output: 53                 
Correct output: 11                  | Program output: 53                 
Correct output: 14                  | Program output: 25                 
Correct output: -55                 | Program output: -19                
Correct output: -76                 | Program output: 57                 
Correct output: -93                 | Program output: -9                 
Correct output: -55                 | Program output: -55                
Correct output: 0                   | Program output: 70                 
Correct output: -95                 | Program output: -95                
Correct output: -95                 | Program output: -95                
Correct output: -99                 | Program output: 1                  
Correct output: -92                 | Program output: 72                 
Correct output: -84                 | Program output: -35                
Correct output: -55                 | Program output: -55                
Correct output: -44                 | Program output: 32                 
Correct output: 40                  | Program output: 40                 
Correct output: -97                 | Program output: -40                
Correct output: -15                 | Program output: 27                 
Correct output: -73                 | Program output: 48                 
Correct output: -77                 | Program output: -70                
Correct output: -27                 | Program output: -27                
Correct output: -11                 | Program output: -4                 
Correct output: 14                  | Program output: 86                 
Correct output: -100                | Program output: -29                
Correct output: -16                 | Program output: 25                 
Correct output: -75                 | Program output: -60                
Correct output: -15                 | Program output: -15                
Correct output: -59                 | Program output: -59                
Correct output: -100                | Program output: -100               
Correct output: -51                 | Program output: 90                 
Correct output: -62                 | Program output: -62                
Correct output: 6                   | Program output: 48                 
Correct output: -98                 | Program output: 53                 
Correct output: -80                 | Program output: -80                
Correct output: -60                 | Program output: 74                 
Correct output: -87                 | Program output: 82                 
Correct output: -99                 | Program output: -99                
Correct output: -63                 | Program output: -63                
Correct output: -99                 | Program output: 22                 
Correct output: 2                   | Program output: 3                  
Correct output: -55                 | Program output: 30                 
Correct output: -84                 | Program output: 9                  
Correct output: 46                  | Program output: 53                 
Correct output: -26                 | Program output: 30                 
Correct output: -7                  | Program output: 25                 
Correct output: -18                 | Program output: 16                 
Correct output: -85                 | Program output: 59                 
Correct output: -47                 | Program output: -47                
Correct output: -86                 | Program output: 99                 
Correct output: -80                 | Program output: 4                  
Correct output: -30                 | Program output: 92                 
Correct output: -86                 | Program output: -86                
Correct output: -92                 | Program output: 87                 
Correct output: -81                 | Program output: -77                
Correct output: -85                 | Program output: 59                 
Correct output: -94                 | Program output: 7                  
Correct output: -83                 | Program output: -83                
Correct output: 24                  | Program output: 44                 
Correct output: -27                 | Program output: 9                  
Correct output: -15                 | Program output: 7                  
Correct output: -36                 | Program output: 96                 
Correct output: -71                 | Program output: 76                 
Correct output: -93                 | Program output: 93                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_while} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_rot} {:close 0, :instruction in1} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_rot} {:close 1, :instruction 68} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction -30} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_y} {:close 0, :instruction print_exec} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_yankdup} {:close 2, :instruction print_exec} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_integer_39} {:close 0, :instruction print_newline} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_eq} {:close 0, :instruction print_newline} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 1, :instruction tagged_737} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yank} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction print_newline} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_s} {:close 0, :instruction exec_k} {:close 0, :instruction tagged_669} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_eq})
Lexicase best program: (boolean_dup boolean_dup_times integer_eq exec_while () exec_if (boolean_rot in1 print_boolean boolean_rot 68) (integer_fromboolean integer_yank print_integer exec_y (exec_swap (exec_k (integer_gt boolean_dup_times) (boolean_flush boolean_yank exec_stackdepth -30 integer_lte boolean_and exec_while (integer_dup_times) integer_gte integer_lte exec_y () print_exec (print_boolean integer_dup_times) exec_dup_items integer_inc exec_pop (exec_do*times (exec_dup_times (exec_do*times (integer_shove integer_yankdup print_exec ()) boolean_rot exec_eq boolean_xor tag_integer_39 print_newline integer_div) boolean_invert_second_then_and integer_shove integer_eq) print_newline exec_do*range (exec_yankdup exec_dup (integer_dec) integer_div) tagged_737) exec_empty) integer_mod boolean_yank integer_fromboolean) () boolean_pop integer_flush) boolean_dup_items boolean_empty integer_dup exec_stackdepth exec_empty) exec_empty boolean_frominteger integer_lt integer_stackdepth boolean_invert_first_then_and exec_k_when_autoconstructing (boolean_yankdup boolean_yank boolean_frominteger) (integer_fromboolean boolean_stackdepth integer_mult integer_lte integer_dup boolean_not boolean_frominteger print_newline exec_y_when_autoconstructing (exec_s () (exec_k (tagged_669 exec_yank) (integer_eq)) ())))
Lexicase best errors: [1 0 0 1 1 0 1 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 118
Percent parens: 0.229
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_while} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_rot} {:close 0, :instruction in1} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_rot} {:close 1, :instruction 68} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction -30} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_y} {:close 0, :instruction print_exec} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_yankdup} {:close 2, :instruction print_exec} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_integer_39} {:close 0, :instruction print_newline} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_eq} {:close 0, :instruction print_newline} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 1, :instruction tagged_737} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yank} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction print_newline} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_s} {:close 0, :instruction exec_k} {:close 0, :instruction tagged_669} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_eq})
Zero cases best program: (boolean_dup boolean_dup_times integer_eq exec_while () exec_if (boolean_rot in1 print_boolean boolean_rot 68) (integer_fromboolean integer_yank print_integer exec_y (exec_swap (exec_k (integer_gt boolean_dup_times) (boolean_flush boolean_yank exec_stackdepth -30 integer_lte boolean_and exec_while (integer_dup_times) integer_gte integer_lte exec_y () print_exec (print_boolean integer_dup_times) exec_dup_items integer_inc exec_pop (exec_do*times (exec_dup_times (exec_do*times (integer_shove integer_yankdup print_exec ()) boolean_rot exec_eq boolean_xor tag_integer_39 print_newline integer_div) boolean_invert_second_then_and integer_shove integer_eq) print_newline exec_do*range (exec_yankdup exec_dup (integer_dec) integer_div) tagged_737) exec_empty) integer_mod boolean_yank integer_fromboolean) () boolean_pop integer_flush) boolean_dup_items boolean_empty integer_dup exec_stackdepth exec_empty) exec_empty boolean_frominteger integer_lt integer_stackdepth boolean_invert_first_then_and exec_k_when_autoconstructing (boolean_yankdup boolean_yank boolean_frominteger) (integer_fromboolean boolean_stackdepth integer_mult integer_lte integer_dup boolean_not boolean_frominteger print_newline exec_y_when_autoconstructing (exec_s () (exec_k (tagged_669 exec_yank) (integer_eq)) ())))
Zero cases best errors: [1 0 0 1 1 0 1 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 118
Percent parens: 0.229
--- Lexicase Population Statistics ---
Count of elite individuals by case: (213 317 319 1000 1000 316 1000 317 317 703)
Population mean number of elite cases: 5.50
Count of perfect (error zero) individuals by case: (213 317 319 0 0 316 0 317 317 703)
Population mean number of perfect (error zero) cases: 2.50
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_while} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_rot} {:close 0, :instruction in1} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_rot} {:close 1, :instruction 68} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction -30} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_y} {:close 0, :instruction print_exec} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_yankdup} {:close 2, :instruction print_exec} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_integer_39} {:close 0, :instruction print_newline} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_eq} {:close 0, :instruction print_newline} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_swap} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction print_newline} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_s} {:close 0, :instruction exec_k} {:close 0, :instruction tagged_669} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_eq})
Best program: (boolean_dup boolean_dup_times integer_eq exec_while () exec_if (boolean_rot in1 print_boolean boolean_rot 68) (integer_fromboolean integer_yank print_integer exec_y (exec_swap (exec_k (integer_gt boolean_dup_times) (boolean_flush boolean_yank exec_stackdepth -30 integer_lte boolean_and exec_while (integer_dup_times) integer_gte integer_lte exec_y () print_exec (print_boolean integer_dup_times) exec_dup_items integer_inc exec_pop (exec_do*times (exec_dup_times (exec_pop (integer_shove integer_yankdup print_exec ()) boolean_rot integer_flush boolean_xor tag_integer_39 print_newline integer_div) boolean_invert_second_then_and integer_shove integer_eq) print_newline exec_do*range (exec_yankdup exec_dup (integer_dec) integer_div) integer_swap) exec_empty) integer_mod integer_swap integer_fromboolean) () boolean_pop integer_flush) boolean_dup_items boolean_empty integer_dup exec_stackdepth exec_empty) exec_empty boolean_frominteger integer_lt integer_stackdepth boolean_invert_first_then_and exec_k_when_autoconstructing (boolean_yankdup boolean_yank exec_k_when_autoconstructing () (integer_fromboolean boolean_stackdepth integer_mult integer_lte integer_dup boolean_not boolean_frominteger print_newline exec_y_when_autoconstructing (exec_s () (exec_k (tagged_669 exec_yank) (integer_eq)) ()))) ())
Errors: [1 0 0 1 1 0 1 0 0 0]
Total: 4
Mean: 0.4
Genome size: 91
Size: 120
Percent parens: 0.242
--- Population Statistics ---
Average total errors in population: 7.498
Median total errors in population: 9
Error averages by case: (0.787 0.683 0.681 1.0 1.0 0.684 1.0 0.683 0.683 0.297)
Error minima by case: (0 0 0 1 1 0 1 0 0 0)
Average genome size in population (length): 74.172
Average program size in population (points): 93.796
Average percent parens in population: 0.206
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 2.9805
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 46
Genome diversity (% unique genomes):	 0.859
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 53
Syntactic diversity (% unique Push programs):	 0.847
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.059
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1967902
--- Timings ---
Current time: 1559314325645 milliseconds
Total Time:          10.1 seconds
Initialization:       0.1 seconds,  1.0%
Reproduction:         4.8 seconds, 47.4%
Fitness Testing:      3.9 seconds, 38.7%
Report:               1.3 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 651
Test mean error for best: 0.65100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 7                   | Program output: 30                 
Correct output: 6                   | Program output: 91                 
Correct output: -74                 | Program output: -74                
Correct output: -5                  | Program output: 20                 
Correct output: -5                  | Program output: -5                 
Correct output: 58                  | Program output: 58                 
Correct output: -15                 | Program output: -15                
Correct output: -8                  | Program output: 19                 
Correct output: -28                 | Program output: 72                 
Correct output: -90                 | Program output: -65                
Correct output: 43                  | Program output: 43                 
Correct output: -37                 | Program output: -37                
Correct output: -35                 | Program output: -35                
Correct output: -9                  | Program output: -9                 
Correct output: 25                  | Program output: 25                 
Correct output: 5                   | Program output: 12                 
Correct output: 0                   | Program output: 24                 
Correct output: 6                   | Program output: 16                 
Correct output: 4                   | Program output: 93                 
Correct output: 37                  | Program output: 37                 
Correct output: 10                  | Program output: 51                 
Correct output: 2                   | Program output: 50                 
Correct output: 7                   | Program output: 7                  
Correct output: 11                  | Program output: 11                 
Correct output: 13                  | Program output: 36                 
Correct output: 29                  | Program output: 92                 
Correct output: 3                   | Program output: 26                 
Correct output: 2                   | Program output: 98                 
Correct output: 2                   | Program output: 71                 
Correct output: 9                   | Program output: 86                 
Correct output: 36                  | Program output: 66                 
Correct output: 42                  | Program output: 99                 
Correct output: 9                   | Program output: 53                 
Correct output: 11                  | Program output: 33                 
Correct output: 14                  | Program output: 14                 
Correct output: -55                 | Program output: 34                 
Correct output: -76                 | Program output: 72                 
Correct output: -93                 | Program output: 27                 
Correct output: -55                 | Program output: 59                 
Correct output: 0                   | Program output: 73                 
Correct output: -95                 | Program output: 1                  
Correct output: -95                 | Program output: 60                 
Correct output: -99                 | Program output: -99                
Correct output: -92                 | Program output: -92                
Correct output: -84                 | Program output: -21                
Correct output: -55                 | Program output: 72                 
Correct output: -44                 | Program output: -14                
Correct output: 40                  | Program output: 44                 
Correct output: -97                 | Program output: -75                
Correct output: -15                 | Program output: -9                 
Correct output: -73                 | Program output: -73                
Correct output: -77                 | Program output: -77                
Correct output: -27                 | Program output: -12                
Correct output: -11                 | Program output: -11                
Correct output: 14                  | Program output: 49                 
Correct output: -100                | Program output: 10                 
Correct output: -16                 | Program output: 62                 
Correct output: -75                 | Program output: -75                
Correct output: -15                 | Program output: 0                  
Correct output: -59                 | Program output: 61                 
Correct output: -100                | Program output: 56                 
Correct output: -51                 | Program output: 7                  
Correct output: -62                 | Program output: 33                 
Correct output: 6                   | Program output: 73                 
Correct output: -98                 | Program output: 95                 
Correct output: -80                 | Program output: -14                
Correct output: -60                 | Program output: -60                
Correct output: -87                 | Program output: 36                 
Correct output: -99                 | Program output: -55                
Correct output: -63                 | Program output: 38                 
Correct output: -99                 | Program output: -99                
Correct output: 2                   | Program output: 60                 
Correct output: -55                 | Program output: -30                
Correct output: -84                 | Program output: 0                  
Correct output: 46                  | Program output: 52                 
Correct output: -26                 | Program output: 71                 
Correct output: -7                  | Program output: -7                 
Correct output: -18                 | Program output: 58                 
Correct output: -85                 | Program output: 97                 
Correct output: -47                 | Program output: -10                
Correct output: -86                 | Program output: -10                
Correct output: -80                 | Program output: -74                
Correct output: -30                 | Program output: -30                
Correct output: -86                 | Program output: -19                
Correct output: -92                 | Program output: -81                
Correct output: -81                 | Program output: 74                 
Correct output: -85                 | Program output: -82                
Correct output: -94                 | Program output: -94                
Correct output: -83                 | Program output: 76                 
Correct output: 24                  | Program output: 41                 
Correct output: -27                 | Program output: 55                 
Correct output: -15                 | Program output: -11                
Correct output: -36                 | Program output: 16                 
Correct output: -71                 | Program output: -49                
Correct output: -93                 | Program output: 65                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_while} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction in1} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_if} {:close 0, :instruction exec_eq} {:close 3, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction -30} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_y} {:close 0, :instruction print_exec} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_dup_times})
Lexicase best program: (boolean_dup boolean_dup_times integer_eq exec_while () in3 print_integer integer_empty integer_mod in4 boolean_and in1 boolean_yankdup integer_rot exec_if () (exec_eq boolean_invert_first_then_and) exec_noop exec_do*range (boolean_empty boolean_dup_times) exec_stackdepth -30 integer_lte boolean_and exec_while (integer_dup_times) integer_gte integer_lte exec_y () print_exec (print_boolean integer_dup_times))
Lexicase best errors: [1 1 1 1 0 1 0 1 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 40
Percent parens: 0.200
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_while} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction in1} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_if} {:close 0, :instruction exec_eq} {:close 3, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction -30} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_y} {:close 0, :instruction print_exec} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_dup_times})
Zero cases best program: (boolean_dup boolean_dup_times integer_eq exec_while () in3 print_integer integer_empty integer_mod in4 boolean_and in1 boolean_yankdup integer_rot exec_if () (exec_eq boolean_invert_first_then_and) exec_noop exec_do*range (boolean_empty boolean_dup_times) exec_stackdepth -30 integer_lte boolean_and exec_while (integer_dup_times) integer_gte integer_lte exec_y () print_exec (print_boolean integer_dup_times))
Zero cases best errors: [1 1 1 1 0 1 0 1 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 40
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 762 1000 1000 132 1000 131 762 132 1000)
Population mean number of elite cases: 6.92
Count of perfect (error zero) individuals by case: (0 762 0 0 132 0 131 762 132 0)
Population mean number of perfect (error zero) cases: 1.92
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_when} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*times} {:close 0, :instruction -10} {:close 1, :instruction print_newline} {:close 0, :instruction exec_if} {:close 1, :instruction exec_noop} {:close 0, :instruction tag_boolean_574} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 1, :instruction boolean_yank} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_empty} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_y} {:close 0, :instruction exec_flush})
Best program: (in3 print_integer boolean_frominteger exec_when (exec_flush) exec_dup_times (exec_s (boolean_yankdup integer_dup) (integer_shove exec_do*times (-10 print_newline) exec_if (exec_noop) (tag_boolean_574 boolean_yankdup) integer_lte in1 boolean_yank) (integer_fromboolean) print_integer in1 integer_mult boolean_pop integer_fromboolean exec_empty print_integer) boolean_dup_items exec_y (exec_flush))
Errors: [1 1 1 1 0 1 0 1 0 1]
Total: 7
Mean: 0.7
Genome size: 31
Size: 41
Percent parens: 0.244
--- Population Statistics ---
Average total errors in population: 8.081
Median total errors in population: 8
Error averages by case: (1.0 0.238 1.0 1.0 0.868 1.0 0.869 0.238 0.868 1.0)
Error minima by case: (1 0 1 1 0 1 0 0 0 1)
Average genome size in population (length): 74.574
Average program size in population (points): 97.466
Average percent parens in population: 0.233
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.464
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 13
Genome diversity (% unique genomes):	 0.87
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 19
Syntactic diversity (% unique Push programs):	 0.865
Total error diversity:				 0.003
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.039
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 2956805
--- Timings ---
Current time: 1559314329382 milliseconds
Total Time:          14.9 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         7.0 seconds, 46.8%
Fitness Testing:      5.3 seconds, 35.6%
Report:               2.5 seconds, 16.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 437
Test mean error for best: 0.43700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 7                   | Program output: 7                  
Correct output: 6                   | Program output: 91                 
Correct output: -74                 | Program output: -74                
Correct output: -5                  | Program output: -5                 
Correct output: -5                  | Program output: -5                 
Correct output: 58                  | Program output: 58                 
Correct output: -15                 | Program output: -1                 
Correct output: -8                  | Program output: -8                 
Correct output: -28                 | Program output: -28                
Correct output: -90                 | Program output: -90                
Correct output: 43                  | Program output: 43                 
Correct output: -37                 | Program output: -37                
Correct output: -35                 | Program output: -35                
Correct output: -9                  | Program output: -9                 
Correct output: 25                  | Program output: 25                 
Correct output: 5                   | Program output: 29                 
Correct output: 0                   | Program output: 0                  
Correct output: 6                   | Program output: 6                  
Correct output: 4                   | Program output: 4                  
Correct output: 37                  | Program output: 48                 
Correct output: 10                  | Program output: 10                 
Correct output: 2                   | Program output: 2                  
Correct output: 7                   | Program output: 54                 
Correct output: 11                  | Program output: 12                 
Correct output: 13                  | Program output: 41                 
Correct output: 29                  | Program output: 29                 
Correct output: 3                   | Program output: 3                  
Correct output: 2                   | Program output: 2                  
Correct output: 2                   | Program output: 2                  
Correct output: 9                   | Program output: 22                 
Correct output: 36                  | Program output: 43                 
Correct output: 42                  | Program output: 42                 
Correct output: 9                   | Program output: 51                 
Correct output: 11                  | Program output: 11                 
Correct output: 14                  | Program output: 15                 
Correct output: -55                 | Program output: -55                
Correct output: -76                 | Program output: -76                
Correct output: -93                 | Program output: -93                
Correct output: -55                 | Program output: -55                
Correct output: 0                   | Program output: 14                 
Correct output: -95                 | Program output: -95                
Correct output: -95                 | Program output: -95                
Correct output: -99                 | Program output: 1                  
Correct output: -92                 | Program output: -42                
Correct output: -84                 | Program output: -84                
Correct output: -55                 | Program output: -55                
Correct output: -44                 | Program output: 32                 
Correct output: 40                  | Program output: 40                 
Correct output: -97                 | Program output: -97                
Correct output: -15                 | Program output: -15                
Correct output: -73                 | Program output: 48                 
Correct output: -77                 | Program output: -76                
Correct output: -27                 | Program output: -27                
Correct output: -11                 | Program output: -4                 
Correct output: 14                  | Program output: 14                 
Correct output: -100                | Program output: -29                
Correct output: -16                 | Program output: -16                
Correct output: -75                 | Program output: -60                
Correct output: -15                 | Program output: -15                
Correct output: -59                 | Program output: -59                
Correct output: -100                | Program output: -100               
Correct output: -51                 | Program output: 90                 
Correct output: -62                 | Program output: -62                
Correct output: 6                   | Program output: 48                 
Correct output: -98                 | Program output: -21                
Correct output: -80                 | Program output: -80                
Correct output: -60                 | Program output: 4                  
Correct output: -87                 | Program output: -30                
Correct output: -99                 | Program output: -99                
Correct output: -63                 | Program output: -63                
Correct output: -99                 | Program output: 22                 
Correct output: 2                   | Program output: 2                  
Correct output: -55                 | Program output: -55                
Correct output: -84                 | Program output: 9                  
Correct output: 46                  | Program output: 46                 
Correct output: -26                 | Program output: -26                
Correct output: -7                  | Program output: -1                 
Correct output: -18                 | Program output: 16                 
Correct output: -85                 | Program output: -85                
Correct output: -47                 | Program output: -47                
Correct output: -86                 | Program output: -86                
Correct output: -80                 | Program output: -80                
Correct output: -30                 | Program output: -29                
Correct output: -86                 | Program output: -86                
Correct output: -92                 | Program output: -92                
Correct output: -81                 | Program output: -81                
Correct output: -85                 | Program output: -85                
Correct output: -94                 | Program output: 7                  
Correct output: -83                 | Program output: -83                
Correct output: 24                  | Program output: 44                 
Correct output: -27                 | Program output: -27                
Correct output: -15                 | Program output: -13                
Correct output: -36                 | Program output: 57                 
Correct output: -71                 | Program output: 58                 
Correct output: -93                 | Program output: -36                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_while} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_rot} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_min} {:close 1, :instruction 68} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction -30} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_y} {:close 0, :instruction print_exec} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_yankdup} {:close 2, :instruction print_exec} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yank} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult})
Lexicase best program: (boolean_dup boolean_dup_times integer_eq exec_while () exec_if (boolean_rot in1 in4 print_boolean integer_min 68) (integer_fromboolean integer_yank print_integer exec_y (exec_swap (exec_k (integer_gt integer_yank print_integer exec_y (exec_swap (exec_k (integer_gt boolean_dup_times) (boolean_flush boolean_yank exec_stackdepth -30 integer_lte boolean_and exec_while (integer_dup_times) integer_gte integer_lte exec_y () print_exec (print_boolean integer_dup_times) exec_dup_items integer_inc exec_pop (exec_do*times (exec_dup_times (exec_pop (integer_shove integer_yankdup print_exec ()) boolean_rot exec_eq exec_yankdup exec_dup (integer_dec) integer_div) integer_swap) exec_empty) integer_mod boolean_yank integer_fromboolean)) (boolean_pop integer_flush) boolean_dup_items boolean_empty integer_dup exec_stackdepth exec_empty) exec_empty boolean_frominteger) (integer_lt integer_stackdepth boolean_invert_first_then_and exec_k_when_autoconstructing (boolean_yankdup boolean_yank exec_k_when_autoconstructing () (integer_fromboolean boolean_stackdepth integer_mult)) ())) ())))
Lexicase best errors: [0 1 1 0 0 1 1 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 105
Percent parens: 0.257
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_while} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_rot} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_min} {:close 1, :instruction 68} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction -30} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_y} {:close 0, :instruction print_exec} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_yankdup} {:close 2, :instruction print_exec} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yank} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult})
Zero cases best program: (boolean_dup boolean_dup_times integer_eq exec_while () exec_if (boolean_rot in1 in4 print_boolean integer_min 68) (integer_fromboolean integer_yank print_integer exec_y (exec_swap (exec_k (integer_gt integer_yank print_integer exec_y (exec_swap (exec_k (integer_gt boolean_dup_times) (boolean_flush boolean_yank exec_stackdepth -30 integer_lte boolean_and exec_while (integer_dup_times) integer_gte integer_lte exec_y () print_exec (print_boolean integer_dup_times) exec_dup_items integer_inc exec_pop (exec_do*times (exec_dup_times (exec_pop (integer_shove integer_yankdup print_exec ()) boolean_rot exec_eq exec_yankdup exec_dup (integer_dec) integer_div) integer_swap) exec_empty) integer_mod boolean_yank integer_fromboolean)) (boolean_pop integer_flush) boolean_dup_items boolean_empty integer_dup exec_stackdepth exec_empty) exec_empty boolean_frominteger) (integer_lt integer_stackdepth boolean_invert_first_then_and exec_k_when_autoconstructing (boolean_yankdup boolean_yank exec_k_when_autoconstructing () (integer_fromboolean boolean_stackdepth integer_mult)) ())) ())))
Zero cases best errors: [0 1 1 0 0 1 1 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 105
Percent parens: 0.257
--- Lexicase Population Statistics ---
Count of elite individuals by case: (367 536 1 367 538 1 1 1 1 536)
Population mean number of elite cases: 2.35
Count of perfect (error zero) individuals by case: (367 536 1 367 538 1 1 1 1 536)
Population mean number of perfect (error zero) cases: 2.35
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_while} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_rot} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_min} {:close 1, :instruction 68} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction -30} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_y} {:close 0, :instruction print_exec} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_yankdup} {:close 2, :instruction print_exec} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yank} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult})
Best program: (boolean_dup boolean_dup_times integer_eq exec_while () exec_if (boolean_rot in1 in4 print_boolean integer_min 68) (integer_fromboolean integer_yank print_integer exec_y (exec_swap (exec_k (integer_gt integer_yank print_integer exec_y (exec_swap (exec_k (integer_gt boolean_dup_times) (boolean_flush boolean_yank exec_stackdepth -30 integer_lte boolean_and exec_while (integer_dup_times) integer_gte integer_lte exec_y () print_exec (print_boolean integer_dup_times) exec_dup_items integer_inc exec_pop (exec_do*times (exec_dup_times (exec_pop (integer_shove integer_yankdup print_exec ()) boolean_rot exec_eq exec_yankdup exec_dup (integer_dec) integer_div) integer_swap) exec_empty) integer_mod boolean_yank integer_fromboolean)) (boolean_pop integer_flush) boolean_dup_items boolean_empty integer_dup exec_stackdepth exec_empty) exec_empty boolean_frominteger) (integer_lt integer_stackdepth boolean_invert_first_then_and exec_k_when_autoconstructing (boolean_yankdup boolean_yank exec_k_when_autoconstructing () (integer_fromboolean boolean_stackdepth integer_mult)) ())) ())))
Errors: [0 1 1 0 0 1 1 0 0 1]
Total: 5
Mean: 0.5
Genome size: 78
Size: 105
Percent parens: 0.257
--- Population Statistics ---
Average total errors in population: 7.651
Median total errors in population: 7
Error averages by case: (0.633 0.464 0.999 0.633 0.462 0.999 0.999 0.999 0.999 0.464)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 56.915
Average program size in population (points): 73.647
Average percent parens in population: 0.219
Minimum age in population: 4.0
Maximum age in population: 7.75
Average age in population: 5.933125
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 28
Genome diversity (% unique genomes):	 0.765
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 50
Syntactic diversity (% unique Push programs):	 0.747
Total error diversity:				 0.005
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.043
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 3527005
--- Timings ---
Current time: 1559314333041 milliseconds
Total Time:          17.6 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         8.7 seconds, 49.3%
Fitness Testing:      6.1 seconds, 34.6%
Report:               2.7 seconds, 15.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 444
Test mean error for best: 0.44400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 7                   | Program output: 7                  
Correct output: 6                   | Program output: 6                  
Correct output: -74                 | Program output: -74                
Correct output: -5                  | Program output: -5                 
Correct output: -5                  | Program output: -5                 
Correct output: 58                  | Program output: 58                 
Correct output: -15                 | Program output: -1                 
Correct output: -8                  | Program output: -8                 
Correct output: -28                 | Program output: -28                
Correct output: -90                 | Program output: -65                
Correct output: 43                  | Program output: 43                 
Correct output: -37                 | Program output: -37                
Correct output: -35                 | Program output: -35                
Correct output: -9                  | Program output: -9                 
Correct output: 25                  | Program output: 25                 
Correct output: 5                   | Program output: 5                  
Correct output: 0                   | Program output: 0                  
Correct output: 6                   | Program output: 35                 
Correct output: 4                   | Program output: 4                  
Correct output: 37                  | Program output: 48                 
Correct output: 10                  | Program output: 24                 
Correct output: 2                   | Program output: 2                  
Correct output: 7                   | Program output: 41                 
Correct output: 11                  | Program output: 39                 
Correct output: 13                  | Program output: 13                 
Correct output: 29                  | Program output: 81                 
Correct output: 3                   | Program output: 3                  
Correct output: 2                   | Program output: 30                 
Correct output: 2                   | Program output: 72                 
Correct output: 9                   | Program output: 9                  
Correct output: 36                  | Program output: 36                 
Correct output: 42                  | Program output: 42                 
Correct output: 9                   | Program output: 9                  
Correct output: 11                  | Program output: 53                 
Correct output: 14                  | Program output: 25                 
Correct output: -55                 | Program output: -19                
Correct output: -76                 | Program output: -30                
Correct output: -93                 | Program output: -9                 
Correct output: -55                 | Program output: -55                
Correct output: 0                   | Program output: 0                  
Correct output: -95                 | Program output: -95                
Correct output: -95                 | Program output: -95                
Correct output: -99                 | Program output: -66                
Correct output: -92                 | Program output: -35                
Correct output: -84                 | Program output: -35                
Correct output: -55                 | Program output: -55                
Correct output: -44                 | Program output: -44                
Correct output: 40                  | Program output: 40                 
Correct output: -97                 | Program output: -40                
Correct output: -15                 | Program output: 27                 
Correct output: -73                 | Program output: 43                 
Correct output: -77                 | Program output: -70                
Correct output: -27                 | Program output: -27                
Correct output: -11                 | Program output: -4                 
Correct output: 14                  | Program output: 71                 
Correct output: -100                | Program output: -100               
Correct output: -16                 | Program output: 25                 
Correct output: -75                 | Program output: -60                
Correct output: -15                 | Program output: -15                
Correct output: -59                 | Program output: -59                
Correct output: -100                | Program output: -100               
Correct output: -51                 | Program output: -51                
Correct output: -62                 | Program output: -62                
Correct output: 6                   | Program output: 6                  
Correct output: -98                 | Program output: -98                
Correct output: -80                 | Program output: -80                
Correct output: -60                 | Program output: 44                 
Correct output: -87                 | Program output: -87                
Correct output: -99                 | Program output: -99                
Correct output: -63                 | Program output: -63                
Correct output: -99                 | Program output: -82                
Correct output: 2                   | Program output: 3                  
Correct output: -55                 | Program output: -18                
Correct output: -84                 | Program output: -84                
Correct output: 46                  | Program output: 53                 
Correct output: -26                 | Program output: 30                 
Correct output: -7                  | Program output: 25                 
Correct output: -18                 | Program output: -18                
Correct output: -85                 | Program output: -42                
Correct output: -47                 | Program output: -47                
Correct output: -86                 | Program output: 9                  
Correct output: -80                 | Program output: 4                  
Correct output: -30                 | Program output: 55                 
Correct output: -86                 | Program output: -86                
Correct output: -92                 | Program output: -45                
Correct output: -81                 | Program output: -77                
Correct output: -85                 | Program output: 59                 
Correct output: -94                 | Program output: 7                  
Correct output: -83                 | Program output: -83                
Correct output: 24                  | Program output: 24                 
Correct output: -27                 | Program output: 9                  
Correct output: -15                 | Program output: -15                
Correct output: -36                 | Program output: -36                
Correct output: -71                 | Program output: -71                
Correct output: -93                 | Program output: -93                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_eq} {:close 1, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_rot} {:close 0, :instruction in1} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_min} {:close 1, :instruction 68} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction -30} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_y} {:close 0, :instruction print_exec} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_yankdup} {:close 2, :instruction print_exec} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yank} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult})
Lexicase best program: (boolean_dup boolean_dup_times integer_eq in2 exec_if (boolean_rot in1 print_boolean integer_min 68) (integer_fromboolean integer_yank print_integer exec_y (exec_swap (exec_k (integer_gt integer_yank print_integer exec_y (exec_swap (exec_k (integer_gt boolean_dup_times) (boolean_flush boolean_yank exec_stackdepth -30 integer_lte boolean_and exec_while (integer_dup_times) integer_gte integer_lte exec_y () print_exec (print_boolean integer_dup_times) exec_dup_items integer_inc exec_pop (exec_do*times (exec_dup_times (exec_pop (integer_shove integer_yankdup print_exec ()) boolean_rot exec_eq exec_yankdup exec_dup (integer_dec) integer_div) integer_swap) exec_empty) integer_mod boolean_yank integer_fromboolean)) (boolean_pop integer_flush) boolean_dup_items boolean_empty integer_dup exec_stackdepth exec_empty) exec_empty boolean_frominteger) (integer_lt integer_stackdepth boolean_invert_first_then_and exec_k_when_autoconstructing (boolean_yankdup boolean_yank exec_k_when_autoconstructing () (integer_fromboolean boolean_stackdepth integer_mult)) ())) ())))
Lexicase best errors: [0 0 0 1 0 1 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 103
Percent parens: 0.252
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_eq} {:close 1, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_rot} {:close 0, :instruction in1} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_min} {:close 1, :instruction 68} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction -30} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_y} {:close 0, :instruction print_exec} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_yankdup} {:close 2, :instruction print_exec} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yank} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult})
Zero cases best program: (boolean_dup boolean_dup_times integer_eq in2 exec_if (boolean_rot in1 print_boolean integer_min 68) (integer_fromboolean integer_yank print_integer exec_y (exec_swap (exec_k (integer_gt integer_yank print_integer exec_y (exec_swap (exec_k (integer_gt boolean_dup_times) (boolean_flush boolean_yank exec_stackdepth -30 integer_lte boolean_and exec_while (integer_dup_times) integer_gte integer_lte exec_y () print_exec (print_boolean integer_dup_times) exec_dup_items integer_inc exec_pop (exec_do*times (exec_dup_times (exec_pop (integer_shove integer_yankdup print_exec ()) boolean_rot exec_eq exec_yankdup exec_dup (integer_dec) integer_div) integer_swap) exec_empty) integer_mod boolean_yank integer_fromboolean)) (boolean_pop integer_flush) boolean_dup_items boolean_empty integer_dup exec_stackdepth exec_empty) exec_empty boolean_frominteger) (integer_lt integer_stackdepth boolean_invert_first_then_and exec_k_when_autoconstructing (boolean_yankdup boolean_yank exec_k_when_autoconstructing () (integer_fromboolean boolean_stackdepth integer_mult)) ())) ())))
Zero cases best errors: [0 0 0 1 0 1 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 103
Percent parens: 0.252
--- Lexicase Population Statistics ---
Count of elite individuals by case: (593 381 257 212 257 372 381 258 857 257)
Population mean number of elite cases: 3.83
Count of perfect (error zero) individuals by case: (593 381 257 212 257 372 381 258 857 257)
Population mean number of perfect (error zero) cases: 3.83
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_eq} {:close 1, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_rot} {:close 0, :instruction in1} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_min} {:close 1, :instruction 68} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction -30} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_y} {:close 0, :instruction print_exec} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_yankdup} {:close 2, :instruction print_exec} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yank} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult})
Best program: (boolean_dup boolean_dup_times integer_eq in2 exec_if (boolean_rot in1 print_boolean integer_min 68) (integer_fromboolean integer_yank print_integer exec_y (exec_swap (exec_k (integer_gt integer_yank print_integer exec_y (exec_swap (exec_k (integer_gt boolean_dup_times) (boolean_flush boolean_yank exec_stackdepth -30 integer_lte boolean_and exec_while (integer_dup_times) integer_gte integer_lte exec_y () print_exec (print_boolean integer_dup_times) exec_dup_items integer_inc exec_pop (exec_do*times (exec_dup_times (exec_pop (integer_shove integer_yankdup print_exec ()) boolean_rot exec_eq exec_yankdup exec_dup (integer_dec) integer_div) integer_swap) exec_empty) integer_mod boolean_yank integer_fromboolean)) (boolean_pop integer_flush) boolean_dup_items boolean_empty integer_dup exec_stackdepth exec_empty) exec_empty boolean_frominteger) (integer_lt integer_stackdepth boolean_invert_first_then_and exec_k_when_autoconstructing (boolean_yankdup boolean_yank exec_k_when_autoconstructing () (integer_fromboolean boolean_stackdepth integer_mult)) ())) ())))
Errors: [0 0 0 1 0 1 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 77
Size: 103
Percent parens: 0.252
--- Population Statistics ---
Average total errors in population: 6.175
Median total errors in population: 5
Error averages by case: (0.407 0.619 0.743 0.788 0.743 0.628 0.619 0.742 0.143 0.743)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 70.453
Average program size in population (points): 92.185
Average percent parens in population: 0.232
Minimum age in population: 5.0
Maximum age in population: 9.125
Average age in population: 7.8803125
Median age in population: 7.875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 122
Genome diversity (% unique genomes):	 0.747
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 123
Syntactic diversity (% unique Push programs):	 0.736
Total error diversity:				 0.007
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.062
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 4512967
--- Timings ---
Current time: 1559314338009 milliseconds
Total Time:          22.5 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        11.0 seconds, 48.8%
Fitness Testing:      7.5 seconds, 33.5%
Report:               3.9 seconds, 17.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 214
Test mean error for best: 0.21400
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 1
Test Case    4 | Error: 0
Test Case    5 | Error: 1
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 1
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 1
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 1
Test Case   38 | Error: 0
Test Case   39 | Error: 1
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 1
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 1
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 1
Test Case   65 | Error: 1
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 1
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 1
Test Case  205 | Error: 1
Test Case  206 | Error: 0
Test Case  207 | Error: 1
Test Case  208 | Error: 1
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 1
Test Case  215 | Error: 0
Test Case  216 | Error: 1
Test Case  217 | Error: 1
Test Case  218 | Error: 1
Test Case  219 | Error: 1
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 1
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 1
Test Case  241 | Error: 0
Test Case  242 | Error: 1
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 1
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 1
Test Case  253 | Error: 1
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 1
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 1
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 1
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 1
Test Case  286 | Error: 1
Test Case  287 | Error: 1
Test Case  288 | Error: 1
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 1
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 1
Test Case  295 | Error: 1
Test Case  296 | Error: 1
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 1
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 1
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 1
Test Case  328 | Error: 1
Test Case  329 | Error: 0
Test Case  330 | Error: 1
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 1
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 1
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 1
Test Case  348 | Error: 0
Test Case  349 | Error: 1
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 1
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 1
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 1
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 1
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 1
Test Case  391 | Error: 0
Test Case  392 | Error: 1
Test Case  393 | Error: 1
Test Case  394 | Error: 0
Test Case  395 | Error: 1
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 1
Test Case  410 | Error: 0
Test Case  411 | Error: 1
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 1
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 1
Test Case  422 | Error: 1
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 1
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 1
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 1
Test Case  452 | Error: 1
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 1
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 1
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 1
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 1
Test Case  480 | Error: 0
Test Case  481 | Error: 1
Test Case  482 | Error: 1
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 1
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 1
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 1
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 1
Test Case  499 | Error: 1
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 1
Test Case  503 | Error: 0
Test Case  504 | Error: 1
Test Case  505 | Error: 0
Test Case  506 | Error: 1
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 1
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 1
Test Case  520 | Error: 0
Test Case  521 | Error: 1
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 1
Test Case  528 | Error: 1
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 1
Test Case  533 | Error: 1
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 1
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 1
Test Case  545 | Error: 1
Test Case  546 | Error: 1
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 1
Test Case  550 | Error: 0
Test Case  551 | Error: 1
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 1
Test Case  558 | Error: 0
Test Case  559 | Error: 1
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 1
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 1
Test Case  568 | Error: 1
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 1
Test Case  575 | Error: 0
Test Case  576 | Error: 1
Test Case  577 | Error: 0
Test Case  578 | Error: 1
Test Case  579 | Error: 1
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 1
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 1
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 1
Test Case  594 | Error: 0
Test Case  595 | Error: 1
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 1
Test Case  606 | Error: 1
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 1
Test Case  611 | Error: 0
Test Case  612 | Error: 1
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 1
Test Case  618 | Error: 1
Test Case  619 | Error: 1
Test Case  620 | Error: 1
Test Case  621 | Error: 1
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 1
Test Case  626 | Error: 0
Test Case  627 | Error: 1
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 1
Test Case  639 | Error: 1
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 1
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 1
Test Case  658 | Error: 0
Test Case  659 | Error: 1
Test Case  660 | Error: 1
Test Case  661 | Error: 0
Test Case  662 | Error: 1
Test Case  663 | Error: 1
Test Case  664 | Error: 1
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 1
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 1
Test Case  672 | Error: 0
Test Case  673 | Error: 1
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 1
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 1
Test Case  681 | Error: 1
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 1
Test Case  691 | Error: 0
Test Case  692 | Error: 1
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 1
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 1
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 1
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 1
Test Case  708 | Error: 1
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 1
Test Case  712 | Error: 0
Test Case  713 | Error: 1
Test Case  714 | Error: 1
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 1
Test Case  718 | Error: 1
Test Case  719 | Error: 1
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 1
Test Case  729 | Error: 1
Test Case  730 | Error: 1
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 1
Test Case  735 | Error: 0
Test Case  736 | Error: 1
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 1
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 1
Test Case  745 | Error: 1
Test Case  746 | Error: 1
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 1
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 1
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 1
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 1
Test Case  772 | Error: 0
Test Case  773 | Error: 1
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 1
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 1
Test Case  790 | Error: 1
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 1
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 1
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 1
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 1
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 1
Test Case  826 | Error: 1
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 1
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 1
Test Case  842 | Error: 1
Test Case  843 | Error: 0
Test Case  844 | Error: 1
Test Case  845 | Error: 1
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 1
Test Case  850 | Error: 0
Test Case  851 | Error: 1
Test Case  852 | Error: 1
Test Case  853 | Error: 1
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 1
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 1
Test Case  872 | Error: 1
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 1
Test Case  878 | Error: 1
Test Case  879 | Error: 1
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 1
Test Case  883 | Error: 1
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 1
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 1
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 1
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 1
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 1
Test Case  912 | Error: 1
Test Case  913 | Error: 0
Test Case  914 | Error: 1
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 1
Test Case  919 | Error: 1
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 1
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 1
Test Case  928 | Error: 0
Test Case  929 | Error: 1
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 1
Test Case  935 | Error: 1
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 1
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 1
Test Case  946 | Error: 0
Test Case  947 | Error: 1
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 1
Test Case  951 | Error: 1
Test Case  952 | Error: 1
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 1
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 1
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 1
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 1
Test Case  975 | Error: 1
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 1
Test Case  981 | Error: 0
Test Case  982 | Error: 1
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 1
Test Case  991 | Error: 0
Test Case  992 | Error: 1
Test Case  993 | Error: 1
Test Case  994 | Error: 0
Test Case  995 | Error: 1
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 1
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 7                   | Program output: 7                  
Correct output: 6                   | Program output: 6                  
Correct output: -74                 | Program output: -74                
Correct output: -5                  | Program output: -5                 
Correct output: -5                  | Program output: -5                 
Correct output: 58                  | Program output: 58                 
Correct output: -15                 | Program output: -1                 
Correct output: -8                  | Program output: -8                 
Correct output: -28                 | Program output: -28                
Correct output: -90                 | Program output: -90                
Correct output: 43                  | Program output: 43                 
Correct output: -37                 | Program output: -37                
Correct output: -35                 | Program output: -35                
Correct output: -9                  | Program output: -9                 
Correct output: 25                  | Program output: 25                 
Correct output: 5                   | Program output: 5                  
Correct output: 0                   | Program output: 0                  
Correct output: 6                   | Program output: 6                  
Correct output: 4                   | Program output: 4                  
Correct output: 37                  | Program output: 48                 
Correct output: 10                  | Program output: 10                 
Correct output: 2                   | Program output: 2                  
Correct output: 7                   | Program output: 41                 
Correct output: 11                  | Program output: 12                 
Correct output: 13                  | Program output: 13                 
Correct output: 29                  | Program output: 29                 
Correct output: 3                   | Program output: 3                  
Correct output: 2                   | Program output: 2                  
Correct output: 2                   | Program output: 2                  
Correct output: 9                   | Program output: 9                  
Correct output: 36                  | Program output: 36                 
Correct output: 42                  | Program output: 42                 
Correct output: 9                   | Program output: 9                  
Correct output: 11                  | Program output: 11                 
Correct output: 14                  | Program output: 15                 
Correct output: -55                 | Program output: -55                
Correct output: -76                 | Program output: -76                
Correct output: -93                 | Program output: -93                
Correct output: -55                 | Program output: -55                
Correct output: 0                   | Program output: 0                  
Correct output: -95                 | Program output: -95                
Correct output: -95                 | Program output: -95                
Correct output: -99                 | Program output: -66                
Correct output: -92                 | Program output: -42                
Correct output: -84                 | Program output: -84                
Correct output: -55                 | Program output: -55                
Correct output: -44                 | Program output: -44                
Correct output: 40                  | Program output: 40                 
Correct output: -97                 | Program output: -97                
Correct output: -15                 | Program output: -15                
Correct output: -73                 | Program output: 43                 
Correct output: -77                 | Program output: -76                
Correct output: -27                 | Program output: -27                
Correct output: -11                 | Program output: -4                 
Correct output: 14                  | Program output: 14                 
Correct output: -100                | Program output: -100               
Correct output: -16                 | Program output: -16                
Correct output: -75                 | Program output: -60                
Correct output: -15                 | Program output: -15                
Correct output: -59                 | Program output: -59                
Correct output: -100                | Program output: -100               
Correct output: -51                 | Program output: -51                
Correct output: -62                 | Program output: -62                
Correct output: 6                   | Program output: 6                  
Correct output: -98                 | Program output: -98                
Correct output: -80                 | Program output: -80                
Correct output: -60                 | Program output: 4                  
Correct output: -87                 | Program output: -87                
Correct output: -99                 | Program output: -99                
Correct output: -63                 | Program output: -63                
Correct output: -99                 | Program output: -82                
Correct output: 2                   | Program output: 2                  
Correct output: -55                 | Program output: -55                
Correct output: -84                 | Program output: -84                
Correct output: 46                  | Program output: 46                 
Correct output: -26                 | Program output: -26                
Correct output: -7                  | Program output: -1                 
Correct output: -18                 | Program output: -18                
Correct output: -85                 | Program output: -85                
Correct output: -47                 | Program output: -47                
Correct output: -86                 | Program output: -86                
Correct output: -80                 | Program output: -80                
Correct output: -30                 | Program output: -29                
Correct output: -86                 | Program output: -86                
Correct output: -92                 | Program output: -92                
Correct output: -81                 | Program output: -81                
Correct output: -85                 | Program output: -85                
Correct output: -94                 | Program output: 7                  
Correct output: -83                 | Program output: -83                
Correct output: 24                  | Program output: 24                 
Correct output: -27                 | Program output: -27                
Correct output: -15                 | Program output: -15                
Correct output: -36                 | Program output: -36                
Correct output: -71                 | Program output: -71                
Correct output: -93                 | Program output: -93                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_eq} {:close 1, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_rot} {:close 0, :instruction in1} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_min} {:close 1, :instruction 68} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_yank} {:close 0, :instruction in4} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_min} {:close 0, :instruction 68} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction -30} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_y} {:close 0, :instruction print_exec} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_yankdup} {:close 2, :instruction print_exec} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yank} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult})
Lexicase best program: (boolean_dup boolean_dup_times integer_eq in2 exec_if (boolean_rot in1 print_boolean integer_min 68) (integer_fromboolean integer_yank in4 print_boolean integer_min 68 integer_fromboolean integer_yank print_integer exec_y (exec_swap (exec_k (integer_gt integer_yank print_integer exec_y (exec_swap (exec_k (integer_gt boolean_dup_times) (boolean_flush boolean_yank exec_stackdepth -30 integer_lte boolean_and exec_while (integer_dup_times) integer_gte integer_lte exec_y () print_exec (print_boolean integer_dup_times) exec_dup_items integer_inc exec_pop (exec_do*times (exec_dup_times (exec_pop (integer_shove integer_yankdup print_exec ()) boolean_rot exec_eq exec_yankdup exec_dup (integer_dec) integer_div) integer_swap) exec_empty integer_mod boolean_yank integer_fromboolean)) boolean_pop integer_flush boolean_dup_items boolean_empty) (integer_dup exec_stackdepth exec_empty) exec_empty boolean_frominteger integer_lt integer_stackdepth boolean_invert_first_then_and exec_k_when_autoconstructing (boolean_yankdup boolean_yank exec_k_when_autoconstructing () (integer_fromboolean boolean_stackdepth integer_mult)) ())) ()) ())))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 109
Percent parens: 0.239
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_eq} {:close 1, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_rot} {:close 0, :instruction in1} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_min} {:close 1, :instruction 68} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_yank} {:close 0, :instruction in4} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_min} {:close 0, :instruction 68} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction -30} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_y} {:close 0, :instruction print_exec} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_yankdup} {:close 2, :instruction print_exec} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yank} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult})
Zero cases best program: (boolean_dup boolean_dup_times integer_eq in2 exec_if (boolean_rot in1 print_boolean integer_min 68) (integer_fromboolean integer_yank in4 print_boolean integer_min 68 integer_fromboolean integer_yank print_integer exec_y (exec_swap (exec_k (integer_gt integer_yank print_integer exec_y (exec_swap (exec_k (integer_gt boolean_dup_times) (boolean_flush boolean_yank exec_stackdepth -30 integer_lte boolean_and exec_while (integer_dup_times) integer_gte integer_lte exec_y () print_exec (print_boolean integer_dup_times) exec_dup_items integer_inc exec_pop (exec_do*times (exec_dup_times (exec_pop (integer_shove integer_yankdup print_exec ()) boolean_rot exec_eq exec_yankdup exec_dup (integer_dec) integer_div) integer_swap) exec_empty integer_mod boolean_yank integer_fromboolean)) boolean_pop integer_flush boolean_dup_items boolean_empty) (integer_dup exec_stackdepth exec_empty) exec_empty boolean_frominteger integer_lt integer_stackdepth boolean_invert_first_then_and exec_k_when_autoconstructing (boolean_yankdup boolean_yank exec_k_when_autoconstructing () (integer_fromboolean boolean_stackdepth integer_mult)) ())) ()) ())))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 109
Percent parens: 0.239
--- Lexicase Population Statistics ---
Count of elite individuals by case: (768 768 134 134 134 134 636 884 768 637)
Population mean number of elite cases: 5.00
Count of perfect (error zero) individuals by case: (768 768 134 134 134 134 636 884 768 637)
Population mean number of perfect (error zero) cases: 5.00
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_eq} {:close 1, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_rot} {:close 0, :instruction in1} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_min} {:close 1, :instruction 68} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_yank} {:close 0, :instruction in4} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_min} {:close 0, :instruction 68} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction -30} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_y} {:close 0, :instruction print_exec} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_yankdup} {:close 2, :instruction print_exec} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yank} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult})
Best program: (boolean_dup boolean_dup_times integer_eq in2 exec_if (boolean_rot in1 print_boolean integer_min 68) (integer_fromboolean integer_yank in4 print_boolean integer_min 68 integer_fromboolean integer_yank print_integer exec_y (exec_swap (exec_k (integer_gt integer_yank print_integer exec_y (exec_swap (exec_k (integer_gt boolean_dup_times) (boolean_flush boolean_yank exec_stackdepth -30 integer_lte boolean_and exec_while (integer_dup_times) integer_gte integer_lte exec_y () print_exec (print_boolean integer_dup_times) exec_dup_items integer_inc exec_pop (exec_do*times (exec_dup_times (exec_pop (integer_shove integer_yankdup print_exec ()) boolean_rot exec_eq exec_yankdup exec_dup (integer_dec) integer_div) integer_swap) exec_empty integer_mod boolean_yank integer_fromboolean)) boolean_pop integer_flush boolean_dup_items boolean_empty) (integer_dup exec_stackdepth exec_empty) exec_empty boolean_frominteger integer_lt integer_stackdepth boolean_invert_first_then_and exec_k_when_autoconstructing (boolean_yankdup boolean_yank exec_k_when_autoconstructing () (integer_fromboolean boolean_stackdepth integer_mult)) ())) ()) ())))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 83
Size: 109
Percent parens: 0.239
--- Population Statistics ---
Average total errors in population: 5.003
Median total errors in population: 4
Error averages by case: (0.232 0.232 0.866 0.866 0.866 0.866 0.364 0.116 0.232 0.363)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 73.133
Average program size in population (points): 97.635
Average percent parens in population: 0.249
Minimum age in population: 6.0
Maximum age in population: 10.875
Average age in population: 9.0884375
Median age in population: 9.4375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 221
Genome diversity (% unique genomes):	 0.747
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 221
Syntactic diversity (% unique Push programs):	 0.742
Total error diversity:				 0.008
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.048
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 5706221
--- Timings ---
Current time: 1559314342940 milliseconds
Total Time:          27.4 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        13.2 seconds, 48.1%
Fitness Testing:      9.1 seconds, 33.0%
Report:               5.1 seconds, 18.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 6
Successful program: (boolean_dup boolean_dup_times integer_eq in2 exec_if (boolean_rot in1 print_boolean integer_min 68) (integer_fromboolean integer_yank in4 print_boolean integer_min 68 integer_fromboolean integer_yank print_integer exec_y (exec_swap (exec_k (integer_gt integer_yank print_integer exec_y (exec_swap (exec_k (integer_gt boolean_dup_times) (boolean_flush boolean_yank exec_stackdepth -30 integer_lte boolean_and exec_while (integer_dup_times) integer_gte integer_lte exec_y () print_exec (print_boolean integer_dup_times) exec_dup_items integer_inc exec_pop (exec_do*times (exec_dup_times (exec_pop (integer_shove integer_yankdup print_exec ()) boolean_rot exec_eq exec_yankdup exec_dup (integer_dec) integer_div) integer_swap) exec_empty integer_mod boolean_yank integer_fromboolean)) boolean_pop integer_flush boolean_dup_items boolean_empty) (integer_dup exec_stackdepth exec_empty) exec_empty boolean_frominteger integer_lt integer_stackdepth boolean_invert_first_then_and exec_k_when_autoconstructing (boolean_yankdup boolean_yank exec_k_when_autoconstructing () (integer_fromboolean boolean_stackdepth integer_mult)) ())) ()) ())))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 109


Auto-simplifying with starting size: 109
step: 0
program: (boolean_dup boolean_dup_times integer_eq in2 exec_if (boolean_rot in1 print_boolean integer_min 68) (integer_fromboolean integer_yank in4 print_boolean integer_min 68 integer_fromboolean integer_yank print_integer exec_y (exec_swap (exec_k (integer_gt integer_yank print_integer exec_y (exec_swap (exec_k (integer_gt boolean_dup_times) (boolean_flush boolean_yank exec_stackdepth -30 integer_lte boolean_and exec_while (integer_dup_times) integer_gte integer_lte exec_y () print_exec (print_boolean integer_dup_times) exec_dup_items integer_inc exec_pop (exec_do*times (exec_dup_times (exec_pop (integer_shove integer_yankdup print_exec ()) boolean_rot exec_eq exec_yankdup exec_dup (integer_dec) integer_div) integer_swap) exec_empty integer_mod boolean_yank integer_fromboolean)) boolean_pop integer_flush boolean_dup_items boolean_empty) (integer_dup exec_stackdepth exec_empty) exec_empty boolean_frominteger integer_lt integer_stackdepth boolean_invert_first_then_and exec_k_when_autoconstructing (boolean_yankdup boolean_yank exec_k_when_autoconstructing () (integer_fromboolean boolean_stackdepth integer_mult)) ())) ()) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 109

step: 500
program: (boolean_dup boolean_dup_times integer_eq in2 exec_if (boolean_rot in1 print_boolean integer_min 68) (integer_fromboolean integer_yank in4 print_boolean integer_min 68 integer_fromboolean integer_yank print_integer exec_y (exec_swap (exec_k (integer_gt integer_yank print_integer exec_y (exec_swap (exec_k (integer_gt boolean_dup_times) (boolean_flush boolean_yank exec_stackdepth -30 integer_lte boolean_and exec_while (integer_dup_times) integer_gte integer_lte exec_y () print_exec (print_boolean integer_dup_times) exec_dup_items integer_inc exec_pop (exec_do*times (exec_dup_times (exec_pop (integer_shove integer_yankdup print_exec ()) boolean_rot exec_eq exec_yankdup exec_dup (integer_dec) integer_div) integer_swap) exec_empty integer_mod boolean_yank integer_fromboolean)) boolean_pop integer_flush boolean_dup_items boolean_empty) (integer_dup exec_stackdepth exec_empty) exec_empty boolean_frominteger integer_lt integer_stackdepth boolean_invert_first_then_and exec_k_when_autoconstructing (boolean_yankdup boolean_yank exec_k_when_autoconstructing () (integer_fromboolean boolean_stackdepth integer_mult)) ())) ()) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 109

step: 1000
program: (boolean_dup boolean_dup_times integer_eq in2 exec_if (boolean_rot in1 print_boolean integer_min 68) (integer_fromboolean integer_yank in4 print_boolean integer_min 68 integer_fromboolean integer_yank print_integer exec_y (exec_swap (exec_k (integer_gt integer_yank print_integer exec_y (exec_swap (exec_k (integer_gt boolean_dup_times) (boolean_flush boolean_yank exec_stackdepth -30 integer_lte boolean_and exec_while (integer_dup_times) integer_gte integer_lte exec_y () print_exec (print_boolean integer_dup_times) exec_dup_items integer_inc exec_pop (exec_do*times (exec_dup_times (exec_pop (integer_shove integer_yankdup print_exec ()) boolean_rot exec_eq exec_yankdup exec_dup (integer_dec) integer_div) integer_swap) exec_empty integer_mod boolean_yank integer_fromboolean)) boolean_pop integer_flush boolean_dup_items boolean_empty) (integer_dup exec_stackdepth exec_empty) exec_empty boolean_frominteger integer_lt integer_stackdepth boolean_invert_first_then_and exec_k_when_autoconstructing (boolean_yankdup boolean_yank exec_k_when_autoconstructing () (integer_fromboolean boolean_stackdepth integer_mult)) ())) ()) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 109

step: 1500
program: (boolean_dup boolean_dup_times integer_eq in2 exec_if (boolean_rot in1 print_boolean integer_min 68) (integer_fromboolean integer_yank in4 print_boolean integer_min 68 integer_fromboolean integer_yank print_integer exec_y (exec_swap (exec_k (integer_gt integer_yank print_integer exec_y (exec_swap (exec_k (integer_gt boolean_dup_times) (boolean_flush boolean_yank exec_stackdepth -30 integer_lte boolean_and exec_while (integer_dup_times) integer_gte integer_lte exec_y () print_exec (print_boolean integer_dup_times) exec_dup_items integer_inc exec_pop (exec_do*times (exec_dup_times (exec_pop (integer_shove integer_yankdup print_exec ()) boolean_rot exec_eq exec_yankdup exec_dup (integer_dec) integer_div) integer_swap) exec_empty integer_mod boolean_yank integer_fromboolean)) boolean_pop integer_flush boolean_dup_items boolean_empty) (integer_dup exec_stackdepth exec_empty) exec_empty boolean_frominteger integer_lt integer_stackdepth boolean_invert_first_then_and exec_k_when_autoconstructing (boolean_yankdup boolean_yank exec_k_when_autoconstructing () (integer_fromboolean boolean_stackdepth integer_mult)) ())) ()) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 109

step: 2000
program: (boolean_dup boolean_dup_times integer_eq in2 exec_if (boolean_rot in1 print_boolean integer_min 68) (integer_fromboolean integer_yank in4 print_boolean integer_min 68 integer_fromboolean integer_yank print_integer exec_y (exec_swap (exec_k (integer_gt integer_yank print_integer exec_y (exec_swap (exec_k (integer_gt boolean_dup_times) (boolean_flush boolean_yank exec_stackdepth -30 integer_lte boolean_and exec_while (integer_dup_times) integer_gte integer_lte exec_y () print_exec (print_boolean integer_dup_times) exec_dup_items integer_inc exec_pop (exec_do*times (exec_dup_times (exec_pop (integer_shove integer_yankdup print_exec ()) boolean_rot exec_eq exec_yankdup exec_dup (integer_dec) integer_div) integer_swap) exec_empty integer_mod boolean_yank integer_fromboolean)) boolean_pop integer_flush boolean_dup_items boolean_empty) (integer_dup exec_stackdepth exec_empty) exec_empty boolean_frominteger integer_lt integer_stackdepth boolean_invert_first_then_and exec_k_when_autoconstructing (boolean_yankdup boolean_yank exec_k_when_autoconstructing () (integer_fromboolean boolean_stackdepth integer_mult)) ())) ()) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 109

step: 2500
program: (boolean_dup boolean_dup_times integer_eq in2 exec_if (boolean_rot in1 print_boolean integer_min 68) (integer_fromboolean integer_yank in4 print_boolean integer_min 68 integer_fromboolean integer_yank print_integer exec_y (exec_swap (exec_k (integer_gt integer_yank print_integer exec_y (exec_swap (exec_k (integer_gt boolean_dup_times) (boolean_flush boolean_yank exec_stackdepth -30 integer_lte boolean_and exec_while (integer_dup_times) integer_gte integer_lte exec_y () print_exec (print_boolean integer_dup_times) exec_dup_items integer_inc exec_pop (exec_do*times (exec_dup_times (exec_pop (integer_shove integer_yankdup print_exec ()) boolean_rot exec_eq exec_yankdup exec_dup (integer_dec) integer_div) integer_swap) exec_empty integer_mod boolean_yank integer_fromboolean)) boolean_pop integer_flush boolean_dup_items boolean_empty) (integer_dup exec_stackdepth exec_empty) exec_empty boolean_frominteger integer_lt integer_stackdepth boolean_invert_first_then_and exec_k_when_autoconstructing (boolean_yankdup boolean_yank exec_k_when_autoconstructing () (integer_fromboolean boolean_stackdepth integer_mult)) ())) ()) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 109

step: 3000
program: (boolean_dup boolean_dup_times integer_eq in2 exec_if (boolean_rot in1 print_boolean integer_min 68) (integer_fromboolean integer_yank in4 print_boolean integer_min 68 integer_fromboolean integer_yank print_integer exec_y (exec_swap (exec_k (integer_gt integer_yank print_integer exec_y (exec_swap (exec_k (integer_gt boolean_dup_times) (boolean_flush boolean_yank exec_stackdepth -30 integer_lte boolean_and exec_while (integer_dup_times) integer_gte integer_lte exec_y () print_exec (print_boolean integer_dup_times) exec_dup_items integer_inc exec_pop (exec_do*times (exec_dup_times (exec_pop (integer_shove integer_yankdup print_exec ()) boolean_rot exec_eq exec_yankdup exec_dup (integer_dec) integer_div) integer_swap) exec_empty integer_mod boolean_yank integer_fromboolean)) boolean_pop integer_flush boolean_dup_items boolean_empty) (integer_dup exec_stackdepth exec_empty) exec_empty boolean_frominteger integer_lt integer_stackdepth boolean_invert_first_then_and exec_k_when_autoconstructing (boolean_yankdup boolean_yank exec_k_when_autoconstructing () (integer_fromboolean boolean_stackdepth integer_mult)) ())) ()) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 109

step: 3500
program: (boolean_dup boolean_dup_times integer_eq in2 exec_if (boolean_rot in1 print_boolean integer_min 68) (integer_fromboolean integer_yank in4 print_boolean integer_min 68 integer_fromboolean integer_yank print_integer exec_y (exec_swap (exec_k (integer_gt integer_yank print_integer exec_y (exec_swap (exec_k (integer_gt boolean_dup_times) (boolean_flush boolean_yank exec_stackdepth -30 integer_lte boolean_and exec_while (integer_dup_times) integer_gte integer_lte exec_y () print_exec (print_boolean integer_dup_times) exec_dup_items integer_inc exec_pop (exec_do*times (exec_dup_times (exec_pop (integer_shove integer_yankdup print_exec ()) boolean_rot exec_eq exec_yankdup exec_dup (integer_dec) integer_div) integer_swap) exec_empty integer_mod boolean_yank integer_fromboolean)) boolean_pop integer_flush boolean_dup_items boolean_empty) (integer_dup exec_stackdepth exec_empty) exec_empty boolean_frominteger integer_lt integer_stackdepth boolean_invert_first_then_and exec_k_when_autoconstructing (boolean_yankdup boolean_yank exec_k_when_autoconstructing () (integer_fromboolean boolean_stackdepth integer_mult)) ())) ()) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 109

step: 4000
program: (boolean_dup boolean_dup_times integer_eq in2 exec_if (boolean_rot in1 print_boolean integer_min 68) (integer_fromboolean integer_yank in4 print_boolean integer_min 68 integer_fromboolean integer_yank print_integer exec_y (exec_swap (exec_k (integer_gt integer_yank print_integer exec_y (exec_swap (exec_k (integer_gt boolean_dup_times) (boolean_flush boolean_yank exec_stackdepth -30 integer_lte boolean_and exec_while (integer_dup_times) integer_gte integer_lte exec_y () print_exec (print_boolean integer_dup_times) exec_dup_items integer_inc exec_pop (exec_do*times (exec_dup_times (exec_pop (integer_shove integer_yankdup print_exec ()) boolean_rot exec_eq exec_yankdup exec_dup (integer_dec) integer_div) integer_swap) exec_empty integer_mod boolean_yank integer_fromboolean)) boolean_pop integer_flush boolean_dup_items boolean_empty) (integer_dup exec_stackdepth exec_empty) exec_empty boolean_frominteger integer_lt integer_stackdepth boolean_invert_first_then_and exec_k_when_autoconstructing (boolean_yankdup boolean_yank exec_k_when_autoconstructing () (integer_fromboolean boolean_stackdepth integer_mult)) ())) ()) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 109

step: 4500
program: (boolean_dup boolean_dup_times integer_eq in2 exec_if (boolean_rot in1 print_boolean integer_min 68) (integer_fromboolean integer_yank in4 print_boolean integer_min 68 integer_fromboolean integer_yank print_integer exec_y (exec_swap (exec_k (integer_gt integer_yank print_integer exec_y (exec_swap (exec_k (integer_gt boolean_dup_times) (boolean_flush boolean_yank exec_stackdepth -30 integer_lte boolean_and exec_while (integer_dup_times) integer_gte integer_lte exec_y () print_exec (print_boolean integer_dup_times) exec_dup_items integer_inc exec_pop (exec_do*times (exec_dup_times (exec_pop (integer_shove integer_yankdup print_exec ()) boolean_rot exec_eq exec_yankdup exec_dup (integer_dec) integer_div) integer_swap) exec_empty integer_mod boolean_yank integer_fromboolean)) boolean_pop integer_flush boolean_dup_items boolean_empty) (integer_dup exec_stackdepth exec_empty) exec_empty boolean_frominteger integer_lt integer_stackdepth boolean_invert_first_then_and exec_k_when_autoconstructing (boolean_yankdup boolean_yank exec_k_when_autoconstructing () (integer_fromboolean boolean_stackdepth integer_mult)) ())) ()) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 109

step: 5000
program: (boolean_dup boolean_dup_times integer_eq in2 exec_if (boolean_rot in1 print_boolean integer_min 68) (integer_fromboolean integer_yank in4 print_boolean integer_min 68 integer_fromboolean integer_yank print_integer exec_y (exec_swap (exec_k (integer_gt integer_yank print_integer exec_y (exec_swap (exec_k (integer_gt boolean_dup_times) (boolean_flush boolean_yank exec_stackdepth -30 integer_lte boolean_and exec_while (integer_dup_times) integer_gte integer_lte exec_y () print_exec (print_boolean integer_dup_times) exec_dup_items integer_inc exec_pop (exec_do*times (exec_dup_times (exec_pop (integer_shove integer_yankdup print_exec ()) boolean_rot exec_eq exec_yankdup exec_dup (integer_dec) integer_div) integer_swap) exec_empty integer_mod boolean_yank integer_fromboolean)) boolean_pop integer_flush boolean_dup_items boolean_empty) (integer_dup exec_stackdepth exec_empty) exec_empty boolean_frominteger integer_lt integer_stackdepth boolean_invert_first_then_and exec_k_when_autoconstructing (boolean_yankdup boolean_yank exec_k_when_autoconstructing () (integer_fromboolean boolean_stackdepth integer_mult)) ())) ()) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 109

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 214
Test mean error for best: 0.21400
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 1
Test Case    4 | Error: 0
Test Case    5 | Error: 1
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 1
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 1
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 1
Test Case   38 | Error: 0
Test Case   39 | Error: 1
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 1
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 1
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 1
Test Case   65 | Error: 1
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 1
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 1
Test Case  205 | Error: 1
Test Case  206 | Error: 0
Test Case  207 | Error: 1
Test Case  208 | Error: 1
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 1
Test Case  215 | Error: 0
Test Case  216 | Error: 1
Test Case  217 | Error: 1
Test Case  218 | Error: 1
Test Case  219 | Error: 1
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 1
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 1
Test Case  241 | Error: 0
Test Case  242 | Error: 1
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 1
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 1
Test Case  253 | Error: 1
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 1
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 1
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 1
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 1
Test Case  286 | Error: 1
Test Case  287 | Error: 1
Test Case  288 | Error: 1
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 1
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 1
Test Case  295 | Error: 1
Test Case  296 | Error: 1
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 1
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 1
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 1
Test Case  328 | Error: 1
Test Case  329 | Error: 0
Test Case  330 | Error: 1
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 1
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 1
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 1
Test Case  348 | Error: 0
Test Case  349 | Error: 1
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 1
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 1
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 1
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 1
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 1
Test Case  391 | Error: 0
Test Case  392 | Error: 1
Test Case  393 | Error: 1
Test Case  394 | Error: 0
Test Case  395 | Error: 1
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 1
Test Case  410 | Error: 0
Test Case  411 | Error: 1
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 1
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 1
Test Case  422 | Error: 1
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 1
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 1
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 1
Test Case  452 | Error: 1
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 1
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 1
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 1
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 1
Test Case  480 | Error: 0
Test Case  481 | Error: 1
Test Case  482 | Error: 1
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 1
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 1
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 1
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 1
Test Case  499 | Error: 1
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 1
Test Case  503 | Error: 0
Test Case  504 | Error: 1
Test Case  505 | Error: 0
Test Case  506 | Error: 1
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 1
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 1
Test Case  520 | Error: 0
Test Case  521 | Error: 1
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 1
Test Case  528 | Error: 1
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 1
Test Case  533 | Error: 1
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 1
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 1
Test Case  545 | Error: 1
Test Case  546 | Error: 1
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 1
Test Case  550 | Error: 0
Test Case  551 | Error: 1
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 1
Test Case  558 | Error: 0
Test Case  559 | Error: 1
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 1
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 1
Test Case  568 | Error: 1
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 1
Test Case  575 | Error: 0
Test Case  576 | Error: 1
Test Case  577 | Error: 0
Test Case  578 | Error: 1
Test Case  579 | Error: 1
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 1
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 1
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 1
Test Case  594 | Error: 0
Test Case  595 | Error: 1
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 1
Test Case  606 | Error: 1
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 1
Test Case  611 | Error: 0
Test Case  612 | Error: 1
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 1
Test Case  618 | Error: 1
Test Case  619 | Error: 1
Test Case  620 | Error: 1
Test Case  621 | Error: 1
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 1
Test Case  626 | Error: 0
Test Case  627 | Error: 1
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 1
Test Case  639 | Error: 1
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 1
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 1
Test Case  658 | Error: 0
Test Case  659 | Error: 1
Test Case  660 | Error: 1
Test Case  661 | Error: 0
Test Case  662 | Error: 1
Test Case  663 | Error: 1
Test Case  664 | Error: 1
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 1
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 1
Test Case  672 | Error: 0
Test Case  673 | Error: 1
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 1
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 1
Test Case  681 | Error: 1
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 1
Test Case  691 | Error: 0
Test Case  692 | Error: 1
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 1
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 1
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 1
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 1
Test Case  708 | Error: 1
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 1
Test Case  712 | Error: 0
Test Case  713 | Error: 1
Test Case  714 | Error: 1
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 1
Test Case  718 | Error: 1
Test Case  719 | Error: 1
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 1
Test Case  729 | Error: 1
Test Case  730 | Error: 1
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 1
Test Case  735 | Error: 0
Test Case  736 | Error: 1
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 1
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 1
Test Case  745 | Error: 1
Test Case  746 | Error: 1
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 1
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 1
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 1
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 1
Test Case  772 | Error: 0
Test Case  773 | Error: 1
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 1
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 1
Test Case  790 | Error: 1
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 1
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 1
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 1
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 1
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 1
Test Case  826 | Error: 1
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 1
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 1
Test Case  842 | Error: 1
Test Case  843 | Error: 0
Test Case  844 | Error: 1
Test Case  845 | Error: 1
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 1
Test Case  850 | Error: 0
Test Case  851 | Error: 1
Test Case  852 | Error: 1
Test Case  853 | Error: 1
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 1
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 1
Test Case  872 | Error: 1
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 1
Test Case  878 | Error: 1
Test Case  879 | Error: 1
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 1
Test Case  883 | Error: 1
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 1
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 1
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 1
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 1
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 1
Test Case  912 | Error: 1
Test Case  913 | Error: 0
Test Case  914 | Error: 1
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 1
Test Case  919 | Error: 1
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 1
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 1
Test Case  928 | Error: 0
Test Case  929 | Error: 1
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 1
Test Case  935 | Error: 1
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 1
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 1
Test Case  946 | Error: 0
Test Case  947 | Error: 1
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 1
Test Case  951 | Error: 1
Test Case  952 | Error: 1
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 1
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 1
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 1
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 1
Test Case  975 | Error: 1
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 1
Test Case  981 | Error: 0
Test Case  982 | Error: 1
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 1
Test Case  991 | Error: 0
Test Case  992 | Error: 1
Test Case  993 | Error: 1
Test Case  994 | Error: 0
Test Case  995 | Error: 1
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 1
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 7                   | Program output: 7                  
Correct output: 6                   | Program output: 6                  
Correct output: -74                 | Program output: -74                
Correct output: -5                  | Program output: -5                 
Correct output: -5                  | Program output: -5                 
Correct output: 58                  | Program output: 58                 
Correct output: -15                 | Program output: -1                 
Correct output: -8                  | Program output: -8                 
Correct output: -28                 | Program output: -28                
Correct output: -90                 | Program output: -90                
Correct output: 43                  | Program output: 43                 
Correct output: -37                 | Program output: -37                
Correct output: -35                 | Program output: -35                
Correct output: -9                  | Program output: -9                 
Correct output: 25                  | Program output: 25                 
Correct output: 5                   | Program output: 5                  
Correct output: 0                   | Program output: 0                  
Correct output: 6                   | Program output: 6                  
Correct output: 4                   | Program output: 4                  
Correct output: 37                  | Program output: 48                 
Correct output: 10                  | Program output: 10                 
Correct output: 2                   | Program output: 2                  
Correct output: 7                   | Program output: 41                 
Correct output: 11                  | Program output: 12                 
Correct output: 13                  | Program output: 13                 
Correct output: 29                  | Program output: 29                 
Correct output: 3                   | Program output: 3                  
Correct output: 2                   | Program output: 2                  
Correct output: 2                   | Program output: 2                  
Correct output: 9                   | Program output: 9                  
Correct output: 36                  | Program output: 36                 
Correct output: 42                  | Program output: 42                 
Correct output: 9                   | Program output: 9                  
Correct output: 11                  | Program output: 11                 
Correct output: 14                  | Program output: 15                 
Correct output: -55                 | Program output: -55                
Correct output: -76                 | Program output: -76                
Correct output: -93                 | Program output: -93                
Correct output: -55                 | Program output: -55                
Correct output: 0                   | Program output: 0                  
Correct output: -95                 | Program output: -95                
Correct output: -95                 | Program output: -95                
Correct output: -99                 | Program output: -66                
Correct output: -92                 | Program output: -42                
Correct output: -84                 | Program output: -84                
Correct output: -55                 | Program output: -55                
Correct output: -44                 | Program output: -44                
Correct output: 40                  | Program output: 40                 
Correct output: -97                 | Program output: -97                
Correct output: -15                 | Program output: -15                
Correct output: -73                 | Program output: 43                 
Correct output: -77                 | Program output: -76                
Correct output: -27                 | Program output: -27                
Correct output: -11                 | Program output: -4                 
Correct output: 14                  | Program output: 14                 
Correct output: -100                | Program output: -100               
Correct output: -16                 | Program output: -16                
Correct output: -75                 | Program output: -60                
Correct output: -15                 | Program output: -15                
Correct output: -59                 | Program output: -59                
Correct output: -100                | Program output: -100               
Correct output: -51                 | Program output: -51                
Correct output: -62                 | Program output: -62                
Correct output: 6                   | Program output: 6                  
Correct output: -98                 | Program output: -98                
Correct output: -80                 | Program output: -80                
Correct output: -60                 | Program output: 4                  
Correct output: -87                 | Program output: -87                
Correct output: -99                 | Program output: -99                
Correct output: -63                 | Program output: -63                
Correct output: -99                 | Program output: -82                
Correct output: 2                   | Program output: 2                  
Correct output: -55                 | Program output: -55                
Correct output: -84                 | Program output: -84                
Correct output: 46                  | Program output: 46                 
Correct output: -26                 | Program output: -26                
Correct output: -7                  | Program output: -1                 
Correct output: -18                 | Program output: -18                
Correct output: -85                 | Program output: -85                
Correct output: -47                 | Program output: -47                
Correct output: -86                 | Program output: -86                
Correct output: -80                 | Program output: -80                
Correct output: -30                 | Program output: -29                
Correct output: -86                 | Program output: -86                
Correct output: -92                 | Program output: -92                
Correct output: -81                 | Program output: -81                
Correct output: -85                 | Program output: -85                
Correct output: -94                 | Program output: 7                  
Correct output: -83                 | Program output: -83                
Correct output: 24                  | Program output: 24                 
Correct output: -27                 | Program output: -27                
Correct output: -15                 | Program output: -15                
Correct output: -36                 | Program output: -36                
Correct output: -71                 | Program output: -71                
Correct output: -93                 | Program output: -93                
;;******************************
