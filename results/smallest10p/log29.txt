Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x30b9728f clojush.problems.software.smallest$fn__7460@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@24b8a393]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[98 48 48 48] 48] [[30 30 -33 30] -33] [[65 32 65 65] 32] [[89 89 89 24] 24] [[-20 -20 -20 -79] -79] [[36 -83 -83 -83] -83] [[-54 -54 -54 74] -54] [[-20 -1 -1 -1] -20] [[99 99 99 -79] -79] [[-54 -85 -85 -85] -85] [(-66 -66 -66 -66) -66] [(64 64 64 64) 64] [(-21 -21 -21 -21) -21] [(13 13 13 13) 13] [(35 35 35 35) 35] [(0 92 85 91) 0] [(89 29 27 3) 3] [(10 14 70 79) 10] [(21 82 41 72) 21] [(43 76 50 93) 43] [(66 20 98 40) 20] [(95 98 5 11) 5] [(50 62 85 6) 6] [(30 100 79 36) 30] [(85 89 41 13) 13] [(21 51 53 72) 21] [(99 79 19 39) 19] [(8 2 40 100) 2] [(29 2 20 75) 2] [(39 3 87 1) 1] [(84 84 96 1) 1] [(45 62 45 36) 36] [(8 84 10 73) 8] [(41 62 94 45) 41] [(48 18 35 83) 18] [(-25 45 65 1) -25] [(42 41 -25 0) -25] [(76 26 44 -31) -31] [(48 -35 30 73) -35] [(59 -49 35 5) -49] [(96 -24 -18 -85) -85] [(-7 -24 -12 39) -24] [(37 -93 -79 -28) -93] [(-81 44 24 74) -81] [(-11 100 -56 38) -56] [(-57 66 -55 64) -57] [(71 -83 -37 -97) -97] [(-58 92 27 -43) -58] [(64 3 -15 -66) -66] [(97 63 -13 -20) -20] [(39 44 -16 -91) -91] [(-6 -80 26 -58) -80] [(27 92 -60 -83) -83] [(67 57 4 -42) -42] [(60 33 38 93) 33] [(74 69 -56 -65) -65] [(64 81 -72 -79) -79] [(-86 -24 97 -30) -86] [(21 2 61 41) 2] [(32 18 33 -13) -13] [(-42 -73 -90 1) -90] [(55 -78 -87 -15) -87] [(-8 10 -51 95) -51] [(-40 67 -64 -55) -64] [(-90 -53 38 -75) -90] [(54 -34 59 34) -34] [(99 67 -57 9) -57] [(46 -76 50 75) -76] [(54 -86 74 -59) -86] [(1 25 80 54) 1] [(67 -98 -4 -86) -98] [(-14 -47 44 -39) -47] [(80 -34 85 -11) -34] [(28 27 -27 -80) -80] [(16 -34 -31 -10) -34] [(-15 36 87 77) -15] [(-46 95 86 -22) -46] [(56 17 88 63) 17] [(20 0 -78 98) -78] [(29 -92 -25 82) -92] [(-92 -29 -23 91) -92] [(2 -68 60 86) -68] [(35 -76 -32 -98) -98] [(3 64 -77 -24) -77] [(53 57 82 -21) -21] [(-76 -81 3 69) -81] [(-37 -35 11 -86) -86] [(84 85 -56 -53) -56] [(-12 19 81 2) -12] [(-75 60 -65 2) -75] [(46 -68 -62 88) -68] [(16 47 -97 99) -97] [(-71 -17 -44 -40) -71] [(-36 89 -10 -13) -36] [(53 97 55 -8) -8])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[98 48 48 48] 48]
Train Case:   6 | Input/Output: [[30 30 -33 30] -33]
Train Case:   7 | Input/Output: [[65 32 65 65] 32]
Train Case:   8 | Input/Output: [[89 89 89 24] 24]
Train Case:   9 | Input/Output: [[-20 -20 -20 -79] -79]
Train Case:  10 | Input/Output: [[36 -83 -83 -83] -83]
Train Case:  11 | Input/Output: [[-54 -54 -54 74] -54]
Train Case:  12 | Input/Output: [[-20 -1 -1 -1] -20]
Train Case:  13 | Input/Output: [[99 99 99 -79] -79]
Train Case:  14 | Input/Output: [[-54 -85 -85 -85] -85]
Train Case:  15 | Input/Output: [(-66 -66 -66 -66) -66]
Train Case:  16 | Input/Output: [(64 64 64 64) 64]
Train Case:  17 | Input/Output: [(-21 -21 -21 -21) -21]
Train Case:  18 | Input/Output: [(13 13 13 13) 13]
Train Case:  19 | Input/Output: [(35 35 35 35) 35]
Train Case:  20 | Input/Output: [(0 92 85 91) 0]
Train Case:  21 | Input/Output: [(89 29 27 3) 3]
Train Case:  22 | Input/Output: [(10 14 70 79) 10]
Train Case:  23 | Input/Output: [(21 82 41 72) 21]
Train Case:  24 | Input/Output: [(43 76 50 93) 43]
Train Case:  25 | Input/Output: [(66 20 98 40) 20]
Train Case:  26 | Input/Output: [(95 98 5 11) 5]
Train Case:  27 | Input/Output: [(50 62 85 6) 6]
Train Case:  28 | Input/Output: [(30 100 79 36) 30]
Train Case:  29 | Input/Output: [(85 89 41 13) 13]
Train Case:  30 | Input/Output: [(21 51 53 72) 21]
Train Case:  31 | Input/Output: [(99 79 19 39) 19]
Train Case:  32 | Input/Output: [(8 2 40 100) 2]
Train Case:  33 | Input/Output: [(29 2 20 75) 2]
Train Case:  34 | Input/Output: [(39 3 87 1) 1]
Train Case:  35 | Input/Output: [(84 84 96 1) 1]
Train Case:  36 | Input/Output: [(45 62 45 36) 36]
Train Case:  37 | Input/Output: [(8 84 10 73) 8]
Train Case:  38 | Input/Output: [(41 62 94 45) 41]
Train Case:  39 | Input/Output: [(48 18 35 83) 18]
Train Case:  40 | Input/Output: [(-25 45 65 1) -25]
Train Case:  41 | Input/Output: [(42 41 -25 0) -25]
Train Case:  42 | Input/Output: [(76 26 44 -31) -31]
Train Case:  43 | Input/Output: [(48 -35 30 73) -35]
Train Case:  44 | Input/Output: [(59 -49 35 5) -49]
Train Case:  45 | Input/Output: [(96 -24 -18 -85) -85]
Train Case:  46 | Input/Output: [(-7 -24 -12 39) -24]
Train Case:  47 | Input/Output: [(37 -93 -79 -28) -93]
Train Case:  48 | Input/Output: [(-81 44 24 74) -81]
Train Case:  49 | Input/Output: [(-11 100 -56 38) -56]
Train Case:  50 | Input/Output: [(-57 66 -55 64) -57]
Train Case:  51 | Input/Output: [(71 -83 -37 -97) -97]
Train Case:  52 | Input/Output: [(-58 92 27 -43) -58]
Train Case:  53 | Input/Output: [(64 3 -15 -66) -66]
Train Case:  54 | Input/Output: [(97 63 -13 -20) -20]
Train Case:  55 | Input/Output: [(39 44 -16 -91) -91]
Train Case:  56 | Input/Output: [(-6 -80 26 -58) -80]
Train Case:  57 | Input/Output: [(27 92 -60 -83) -83]
Train Case:  58 | Input/Output: [(67 57 4 -42) -42]
Train Case:  59 | Input/Output: [(60 33 38 93) 33]
Train Case:  60 | Input/Output: [(74 69 -56 -65) -65]
Train Case:  61 | Input/Output: [(64 81 -72 -79) -79]
Train Case:  62 | Input/Output: [(-86 -24 97 -30) -86]
Train Case:  63 | Input/Output: [(21 2 61 41) 2]
Train Case:  64 | Input/Output: [(32 18 33 -13) -13]
Train Case:  65 | Input/Output: [(-42 -73 -90 1) -90]
Train Case:  66 | Input/Output: [(55 -78 -87 -15) -87]
Train Case:  67 | Input/Output: [(-8 10 -51 95) -51]
Train Case:  68 | Input/Output: [(-40 67 -64 -55) -64]
Train Case:  69 | Input/Output: [(-90 -53 38 -75) -90]
Train Case:  70 | Input/Output: [(54 -34 59 34) -34]
Train Case:  71 | Input/Output: [(99 67 -57 9) -57]
Train Case:  72 | Input/Output: [(46 -76 50 75) -76]
Train Case:  73 | Input/Output: [(54 -86 74 -59) -86]
Train Case:  74 | Input/Output: [(1 25 80 54) 1]
Train Case:  75 | Input/Output: [(67 -98 -4 -86) -98]
Train Case:  76 | Input/Output: [(-14 -47 44 -39) -47]
Train Case:  77 | Input/Output: [(80 -34 85 -11) -34]
Train Case:  78 | Input/Output: [(28 27 -27 -80) -80]
Train Case:  79 | Input/Output: [(16 -34 -31 -10) -34]
Train Case:  80 | Input/Output: [(-15 36 87 77) -15]
Train Case:  81 | Input/Output: [(-46 95 86 -22) -46]
Train Case:  82 | Input/Output: [(56 17 88 63) 17]
Train Case:  83 | Input/Output: [(20 0 -78 98) -78]
Train Case:  84 | Input/Output: [(29 -92 -25 82) -92]
Train Case:  85 | Input/Output: [(-92 -29 -23 91) -92]
Train Case:  86 | Input/Output: [(2 -68 60 86) -68]
Train Case:  87 | Input/Output: [(35 -76 -32 -98) -98]
Train Case:  88 | Input/Output: [(3 64 -77 -24) -77]
Train Case:  89 | Input/Output: [(53 57 82 -21) -21]
Train Case:  90 | Input/Output: [(-76 -81 3 69) -81]
Train Case:  91 | Input/Output: [(-37 -35 11 -86) -86]
Train Case:  92 | Input/Output: [(84 85 -56 -53) -56]
Train Case:  93 | Input/Output: [(-12 19 81 2) -12]
Train Case:  94 | Input/Output: [(-75 60 -65 2) -75]
Train Case:  95 | Input/Output: [(46 -68 -62 88) -68]
Train Case:  96 | Input/Output: [(16 47 -97 99) -97]
Train Case:  97 | Input/Output: [(-71 -17 -44 -40) -71]
Train Case:  98 | Input/Output: [(-36 89 -10 -13) -36]
Train Case:  99 | Input/Output: [(53 97 55 -8) -8]
Test Case:   0 | Input/Output: [[79 79 100 79] 79]
Test Case:   1 | Input/Output: [[59 59 -67 59] -67]
Test Case:   2 | Input/Output: [[29 29 29 41] 29]
Test Case:   3 | Input/Output: [[37 41 37 37] 37]
Test Case:   4 | Input/Output: [[73 73 -78 73] -78]
Test Case:   5 | Input/Output: [[29 29 29 -55] -55]
Test Case:   6 | Input/Output: [[-16 -84 -84 -84] -84]
Test Case:   7 | Input/Output: [[88 86 88 88] 86]
Test Case:   8 | Input/Output: [[33 30 33 33] 30]
Test Case:   9 | Input/Output: [[94 94 -96 94] -96]
Test Case:  10 | Input/Output: [[-4 1 1 1] -4]
Test Case:  11 | Input/Output: [[-69 -69 -69 43] -69]
Test Case:  12 | Input/Output: [[37 37 -1 37] -1]
Test Case:  13 | Input/Output: [[29 29 29 -67] -67]
Test Case:  14 | Input/Output: [[-39 72 72 72] -39]
Test Case:  15 | Input/Output: [[95 -14 95 95] -14]
Test Case:  16 | Input/Output: [[63 35 63 63] 35]
Test Case:  17 | Input/Output: [[-17 -50 -50 -50] -50]
Test Case:  18 | Input/Output: [[53 53 78 53] 53]
Test Case:  19 | Input/Output: [[39 39 -87 39] -87]
Test Case:  20 | Input/Output: [[-8 78 78 78] -8]
Test Case:  21 | Input/Output: [[32 55 55 55] 32]
Test Case:  22 | Input/Output: [[-31 -31 -31 15] -31]
Test Case:  23 | Input/Output: [[-70 78 78 78] -70]
Test Case:  24 | Input/Output: [[-5 -5 68 -5] -5]
Test Case:  25 | Input/Output: [[-76 -76 -84 -76] -84]
Test Case:  26 | Input/Output: [[-56 -38 -56 -56] -56]
Test Case:  27 | Input/Output: [[-66 -78 -78 -78] -78]
Test Case:  28 | Input/Output: [[12 22 22 22] 12]
Test Case:  29 | Input/Output: [[49 49 49 9] 9]
Test Case:  30 | Input/Output: [[18 -35 18 18] -35]
Test Case:  31 | Input/Output: [[-76 -9 -76 -76] -76]
Test Case:  32 | Input/Output: [[48 48 48 -67] -67]
Test Case:  33 | Input/Output: [[-98 -98 -98 73] -98]
Test Case:  34 | Input/Output: [[55 55 -71 55] -71]
Test Case:  35 | Input/Output: [[80 80 0 80] 0]
Test Case:  36 | Input/Output: [[29 77 29 29] 29]
Test Case:  37 | Input/Output: [[20 -4 20 20] -4]
Test Case:  38 | Input/Output: [[-67 -67 -65 -67] -67]
Test Case:  39 | Input/Output: [[82 -70 82 82] -70]
Test Case:  40 | Input/Output: [[84 -25 84 84] -25]
Test Case:  41 | Input/Output: [[-83 -83 -83 77] -83]
Test Case:  42 | Input/Output: [[-2 -2 -2 -73] -73]
Test Case:  43 | Input/Output: [[-81 99 -81 -81] -81]
Test Case:  44 | Input/Output: [[54 54 54 -66] -66]
Test Case:  45 | Input/Output: [[61 61 -32 61] -32]
Test Case:  46 | Input/Output: [[-38 -38 89 -38] -38]
Test Case:  47 | Input/Output: [[-63 -63 85 -63] -63]
Test Case:  48 | Input/Output: [[-92 -92 -10 -92] -92]
Test Case:  49 | Input/Output: [[58 16 16 16] 16]
Test Case:  50 | Input/Output: [[-42 -35 -35 -35] -42]
Test Case:  51 | Input/Output: [[-74 -74 -69 -74] -74]
Test Case:  52 | Input/Output: [[83 -98 83 83] -98]
Test Case:  53 | Input/Output: [[72 72 28 72] 28]
Test Case:  54 | Input/Output: [[-75 60 -75 -75] -75]
Test Case:  55 | Input/Output: [[5 36 36 36] 5]
Test Case:  56 | Input/Output: [[-45 -47 -47 -47] -47]
Test Case:  57 | Input/Output: [[-31 -24 -24 -24] -31]
Test Case:  58 | Input/Output: [[75 75 -48 75] -48]
Test Case:  59 | Input/Output: [[-72 -72 -67 -72] -72]
Test Case:  60 | Input/Output: [[-89 -94 -89 -89] -94]
Test Case:  61 | Input/Output: [[-64 -64 -64 -44] -64]
Test Case:  62 | Input/Output: [[83 83 83 58] 58]
Test Case:  63 | Input/Output: [[28 49 49 49] 28]
Test Case:  64 | Input/Output: [[-8 -15 -15 -15] -15]
Test Case:  65 | Input/Output: [[50 50 50 41] 41]
Test Case:  66 | Input/Output: [[-8 -44 -8 -8] -44]
Test Case:  67 | Input/Output: [[-74 -74 76 -74] -74]
Test Case:  68 | Input/Output: [[-38 -38 -79 -38] -79]
Test Case:  69 | Input/Output: [[-46 -46 -46 -97] -97]
Test Case:  70 | Input/Output: [[-63 46 46 46] -63]
Test Case:  71 | Input/Output: [[36 17 36 36] 17]
Test Case:  72 | Input/Output: [[-29 -29 -29 46] -29]
Test Case:  73 | Input/Output: [[-19 -4 -4 -4] -19]
Test Case:  74 | Input/Output: [[-59 10 10 10] -59]
Test Case:  75 | Input/Output: [[40 40 40 10] 10]
Test Case:  76 | Input/Output: [[-97 -16 -97 -97] -97]
Test Case:  77 | Input/Output: [[72 85 85 85] 72]
Test Case:  78 | Input/Output: [[70 -80 -80 -80] -80]
Test Case:  79 | Input/Output: [[-51 -51 76 -51] -51]
Test Case:  80 | Input/Output: [[91 37 91 91] 37]
Test Case:  81 | Input/Output: [[-8 -8 -8 -51] -51]
Test Case:  82 | Input/Output: [[65 -44 -44 -44] -44]
Test Case:  83 | Input/Output: [[-75 -75 -75 47] -75]
Test Case:  84 | Input/Output: [[19 19 10 19] 10]
Test Case:  85 | Input/Output: [[-24 -24 -6 -24] -24]
Test Case:  86 | Input/Output: [[31 31 90 31] 31]
Test Case:  87 | Input/Output: [[61 61 50 61] 50]
Test Case:  88 | Input/Output: [[14 14 -3 14] -3]
Test Case:  89 | Input/Output: [[-6 -79 -79 -79] -79]
Test Case:  90 | Input/Output: [[28 60 28 28] 28]
Test Case:  91 | Input/Output: [[63 63 63 83] 63]
Test Case:  92 | Input/Output: [[-11 -79 -11 -11] -79]
Test Case:  93 | Input/Output: [[-22 67 67 67] -22]
Test Case:  94 | Input/Output: [[-68 -13 -68 -68] -68]
Test Case:  95 | Input/Output: [[33 -49 -49 -49] -49]
Test Case:  96 | Input/Output: [[-94 -94 24 -94] -94]
Test Case:  97 | Input/Output: [[88 -31 88 88] -31]
Test Case:  98 | Input/Output: [[61 61 -3 61] -3]
Test Case:  99 | Input/Output: [[77 77 -44 77] -44]
Test Case: 100 | Input/Output: [(-50 -50 -50 -50) -50]
Test Case: 101 | Input/Output: [(-33 -33 -33 -33) -33]
Test Case: 102 | Input/Output: [(-60 -60 -60 -60) -60]
Test Case: 103 | Input/Output: [(-16 -16 -16 -16) -16]
Test Case: 104 | Input/Output: [(-61 -61 -61 -61) -61]
Test Case: 105 | Input/Output: [(-97 -97 -97 -97) -97]
Test Case: 106 | Input/Output: [(48 48 48 48) 48]
Test Case: 107 | Input/Output: [(51 51 51 51) 51]
Test Case: 108 | Input/Output: [(1 1 1 1) 1]
Test Case: 109 | Input/Output: [(-83 -83 -83 -83) -83]
Test Case: 110 | Input/Output: [(-93 -93 -93 -93) -93]
Test Case: 111 | Input/Output: [(47 47 47 47) 47]
Test Case: 112 | Input/Output: [(3 3 3 3) 3]
Test Case: 113 | Input/Output: [(-18 -18 -18 -18) -18]
Test Case: 114 | Input/Output: [(69 69 69 69) 69]
Test Case: 115 | Input/Output: [(-57 -57 -57 -57) -57]
Test Case: 116 | Input/Output: [(-47 -47 -47 -47) -47]
Test Case: 117 | Input/Output: [(65 65 65 65) 65]
Test Case: 118 | Input/Output: [(-63 -63 -63 -63) -63]
Test Case: 119 | Input/Output: [(-90 -90 -90 -90) -90]
Test Case: 120 | Input/Output: [(-26 -26 -26 -26) -26]
Test Case: 121 | Input/Output: [(38 38 38 38) 38]
Test Case: 122 | Input/Output: [(58 58 58 58) 58]
Test Case: 123 | Input/Output: [(63 63 63 63) 63]
Test Case: 124 | Input/Output: [(-55 -55 -55 -55) -55]
Test Case: 125 | Input/Output: [(58 58 58 58) 58]
Test Case: 126 | Input/Output: [(86 86 86 86) 86]
Test Case: 127 | Input/Output: [(-38 -38 -38 -38) -38]
Test Case: 128 | Input/Output: [(-17 -17 -17 -17) -17]
Test Case: 129 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 130 | Input/Output: [(85 85 85 85) 85]
Test Case: 131 | Input/Output: [(-14 -14 -14 -14) -14]
Test Case: 132 | Input/Output: [(48 48 48 48) 48]
Test Case: 133 | Input/Output: [(-27 -27 -27 -27) -27]
Test Case: 134 | Input/Output: [(-33 -33 -33 -33) -33]
Test Case: 135 | Input/Output: [(-81 -81 -81 -81) -81]
Test Case: 136 | Input/Output: [(-92 -92 -92 -92) -92]
Test Case: 137 | Input/Output: [(-75 -75 -75 -75) -75]
Test Case: 138 | Input/Output: [(70 70 70 70) 70]
Test Case: 139 | Input/Output: [(54 54 54 54) 54]
Test Case: 140 | Input/Output: [(-91 -91 -91 -91) -91]
Test Case: 141 | Input/Output: [(3 3 3 3) 3]
Test Case: 142 | Input/Output: [(56 56 56 56) 56]
Test Case: 143 | Input/Output: [(17 17 17 17) 17]
Test Case: 144 | Input/Output: [(11 11 11 11) 11]
Test Case: 145 | Input/Output: [(33 33 33 33) 33]
Test Case: 146 | Input/Output: [(27 27 27 27) 27]
Test Case: 147 | Input/Output: [(-13 -13 -13 -13) -13]
Test Case: 148 | Input/Output: [(-93 -93 -93 -93) -93]
Test Case: 149 | Input/Output: [(-24 -24 -24 -24) -24]
Test Case: 150 | Input/Output: [(-75 -75 -75 -75) -75]
Test Case: 151 | Input/Output: [(56 56 56 56) 56]
Test Case: 152 | Input/Output: [(-23 -23 -23 -23) -23]
Test Case: 153 | Input/Output: [(-76 -76 -76 -76) -76]
Test Case: 154 | Input/Output: [(-85 -85 -85 -85) -85]
Test Case: 155 | Input/Output: [(-35 -35 -35 -35) -35]
Test Case: 156 | Input/Output: [(-22 -22 -22 -22) -22]
Test Case: 157 | Input/Output: [(-84 -84 -84 -84) -84]
Test Case: 158 | Input/Output: [(-84 -84 -84 -84) -84]
Test Case: 159 | Input/Output: [(27 27 27 27) 27]
Test Case: 160 | Input/Output: [(71 71 71 71) 71]
Test Case: 161 | Input/Output: [(22 22 22 22) 22]
Test Case: 162 | Input/Output: [(-66 -66 -66 -66) -66]
Test Case: 163 | Input/Output: [(11 11 11 11) 11]
Test Case: 164 | Input/Output: [(-8 -8 -8 -8) -8]
Test Case: 165 | Input/Output: [(66 66 66 66) 66]
Test Case: 166 | Input/Output: [(59 59 59 59) 59]
Test Case: 167 | Input/Output: [(50 50 50 50) 50]
Test Case: 168 | Input/Output: [(40 40 40 40) 40]
Test Case: 169 | Input/Output: [(-30 -30 -30 -30) -30]
Test Case: 170 | Input/Output: [(-32 -32 -32 -32) -32]
Test Case: 171 | Input/Output: [(-36 -36 -36 -36) -36]
Test Case: 172 | Input/Output: [(-87 -87 -87 -87) -87]
Test Case: 173 | Input/Output: [(69 69 69 69) 69]
Test Case: 174 | Input/Output: [(18 18 18 18) 18]
Test Case: 175 | Input/Output: [(-19 -19 -19 -19) -19]
Test Case: 176 | Input/Output: [(3 3 3 3) 3]
Test Case: 177 | Input/Output: [(57 57 57 57) 57]
Test Case: 178 | Input/Output: [(-6 -6 -6 -6) -6]
Test Case: 179 | Input/Output: [(-43 -43 -43 -43) -43]
Test Case: 180 | Input/Output: [(16 16 16 16) 16]
Test Case: 181 | Input/Output: [(-55 -55 -55 -55) -55]
Test Case: 182 | Input/Output: [(-39 -39 -39 -39) -39]
Test Case: 183 | Input/Output: [(81 81 81 81) 81]
Test Case: 184 | Input/Output: [(11 11 11 11) 11]
Test Case: 185 | Input/Output: [(59 59 59 59) 59]
Test Case: 186 | Input/Output: [(-43 -43 -43 -43) -43]
Test Case: 187 | Input/Output: [(26 26 26 26) 26]
Test Case: 188 | Input/Output: [(-77 -77 -77 -77) -77]
Test Case: 189 | Input/Output: [(-89 -89 -89 -89) -89]
Test Case: 190 | Input/Output: [(-15 -15 -15 -15) -15]
Test Case: 191 | Input/Output: [(9 9 9 9) 9]
Test Case: 192 | Input/Output: [(46 46 46 46) 46]
Test Case: 193 | Input/Output: [(39 39 39 39) 39]
Test Case: 194 | Input/Output: [(75 75 75 75) 75]
Test Case: 195 | Input/Output: [(50 50 50 50) 50]
Test Case: 196 | Input/Output: [(-4 -4 -4 -4) -4]
Test Case: 197 | Input/Output: [(51 51 51 51) 51]
Test Case: 198 | Input/Output: [(-2 -2 -2 -2) -2]
Test Case: 199 | Input/Output: [(67 67 67 67) 67]
Test Case: 200 | Input/Output: [(88 68 86 73) 68]
Test Case: 201 | Input/Output: [(8 55 55 91) 8]
Test Case: 202 | Input/Output: [(2 29 41 90) 2]
Test Case: 203 | Input/Output: [(21 11 62 30) 11]
Test Case: 204 | Input/Output: [(81 43 82 28) 28]
Test Case: 205 | Input/Output: [(74 49 30 62) 30]
Test Case: 206 | Input/Output: [(76 14 31 76) 14]
Test Case: 207 | Input/Output: [(27 97 87 21) 21]
Test Case: 208 | Input/Output: [(12 80 7 100) 7]
Test Case: 209 | Input/Output: [(87 33 30 90) 30]
Test Case: 210 | Input/Output: [(22 98 97 83) 22]
Test Case: 211 | Input/Output: [(81 63 77 39) 39]
Test Case: 212 | Input/Output: [(23 24 34 52) 23]
Test Case: 213 | Input/Output: [(8 94 80 71) 8]
Test Case: 214 | Input/Output: [(63 69 97 38) 38]
Test Case: 215 | Input/Output: [(1 75 30 39) 1]
Test Case: 216 | Input/Output: [(81 13 43 51) 13]
Test Case: 217 | Input/Output: [(49 4 4 77) 4]
Test Case: 218 | Input/Output: [(62 99 55 35) 35]
Test Case: 219 | Input/Output: [(73 100 0 28) 0]
Test Case: 220 | Input/Output: [(1 92 7 71) 1]
Test Case: 221 | Input/Output: [(43 38 35 0) 0]
Test Case: 222 | Input/Output: [(23 73 86 85) 23]
Test Case: 223 | Input/Output: [(49 0 69 87) 0]
Test Case: 224 | Input/Output: [(9 37 94 77) 9]
Test Case: 225 | Input/Output: [(10 56 26 62) 10]
Test Case: 226 | Input/Output: [(6 36 91 62) 6]
Test Case: 227 | Input/Output: [(90 96 54 98) 54]
Test Case: 228 | Input/Output: [(67 97 3 78) 3]
Test Case: 229 | Input/Output: [(11 83 26 6) 6]
Test Case: 230 | Input/Output: [(70 44 68 73) 44]
Test Case: 231 | Input/Output: [(31 30 68 25) 25]
Test Case: 232 | Input/Output: [(19 66 86 58) 19]
Test Case: 233 | Input/Output: [(14 42 50 97) 14]
Test Case: 234 | Input/Output: [(58 16 63 45) 16]
Test Case: 235 | Input/Output: [(14 60 15 75) 14]
Test Case: 236 | Input/Output: [(59 96 53 31) 31]
Test Case: 237 | Input/Output: [(63 86 3 14) 3]
Test Case: 238 | Input/Output: [(49 39 16 28) 16]
Test Case: 239 | Input/Output: [(95 98 65 64) 64]
Test Case: 240 | Input/Output: [(25 38 15 46) 15]
Test Case: 241 | Input/Output: [(84 31 50 28) 28]
Test Case: 242 | Input/Output: [(98 2 88 12) 2]
Test Case: 243 | Input/Output: [(22 32 41 55) 22]
Test Case: 244 | Input/Output: [(71 58 99 58) 58]
Test Case: 245 | Input/Output: [(50 12 76 16) 12]
Test Case: 246 | Input/Output: [(44 30 74 75) 30]
Test Case: 247 | Input/Output: [(67 50 66 74) 50]
Test Case: 248 | Input/Output: [(53 45 60 63) 45]
Test Case: 249 | Input/Output: [(56 72 5 58) 5]
Test Case: 250 | Input/Output: [(63 76 37 96) 37]
Test Case: 251 | Input/Output: [(23 26 89 23) 23]
Test Case: 252 | Input/Output: [(56 77 48 28) 28]
Test Case: 253 | Input/Output: [(92 38 18 87) 18]
Test Case: 254 | Input/Output: [(7 13 56 55) 7]
Test Case: 255 | Input/Output: [(69 18 81 82) 18]
Test Case: 256 | Input/Output: [(67 54 27 62) 27]
Test Case: 257 | Input/Output: [(13 82 60 45) 13]
Test Case: 258 | Input/Output: [(92 7 58 61) 7]
Test Case: 259 | Input/Output: [(98 20 35 26) 20]
Test Case: 260 | Input/Output: [(76 17 2 78) 2]
Test Case: 261 | Input/Output: [(6 46 19 20) 6]
Test Case: 262 | Input/Output: [(26 87 88 68) 26]
Test Case: 263 | Input/Output: [(98 58 52 36) 36]
Test Case: 264 | Input/Output: [(4 100 81 55) 4]
Test Case: 265 | Input/Output: [(26 64 97 62) 26]
Test Case: 266 | Input/Output: [(17 16 35 40) 16]
Test Case: 267 | Input/Output: [(90 61 61 70) 61]
Test Case: 268 | Input/Output: [(54 55 79 62) 54]
Test Case: 269 | Input/Output: [(28 64 50 11) 11]
Test Case: 270 | Input/Output: [(3 68 58 78) 3]
Test Case: 271 | Input/Output: [(27 11 24 97) 11]
Test Case: 272 | Input/Output: [(97 73 50 19) 19]
Test Case: 273 | Input/Output: [(21 70 73 66) 21]
Test Case: 274 | Input/Output: [(15 5 86 47) 5]
Test Case: 275 | Input/Output: [(15 47 50 56) 15]
Test Case: 276 | Input/Output: [(59 26 100 77) 26]
Test Case: 277 | Input/Output: [(8 40 99 29) 8]
Test Case: 278 | Input/Output: [(45 47 64 98) 45]
Test Case: 279 | Input/Output: [(73 22 43 73) 22]
Test Case: 280 | Input/Output: [(70 21 7 88) 7]
Test Case: 281 | Input/Output: [(42 63 33 56) 33]
Test Case: 282 | Input/Output: [(77 58 49 20) 20]
Test Case: 283 | Input/Output: [(42 10 53 34) 10]
Test Case: 284 | Input/Output: [(25 47 93 89) 25]
Test Case: 285 | Input/Output: [(83 95 35 16) 16]
Test Case: 286 | Input/Output: [(58 26 33 23) 23]
Test Case: 287 | Input/Output: [(71 2 35 51) 2]
Test Case: 288 | Input/Output: [(63 91 42 8) 8]
Test Case: 289 | Input/Output: [(88 87 85 24) 24]
Test Case: 290 | Input/Output: [(26 65 2 53) 2]
Test Case: 291 | Input/Output: [(17 46 54 80) 17]
Test Case: 292 | Input/Output: [(39 8 7 81) 7]
Test Case: 293 | Input/Output: [(63 83 53 9) 9]
Test Case: 294 | Input/Output: [(72 35 29 17) 17]
Test Case: 295 | Input/Output: [(74 6 38 30) 6]
Test Case: 296 | Input/Output: [(60 10 88 52) 10]
Test Case: 297 | Input/Output: [(25 29 95 69) 25]
Test Case: 298 | Input/Output: [(96 64 83 27) 27]
Test Case: 299 | Input/Output: [(88 78 15 84) 15]
Test Case: 300 | Input/Output: [(91 76 81 72) 72]
Test Case: 301 | Input/Output: [(69 65 91 11) 11]
Test Case: 302 | Input/Output: [(0 55 55 91) 0]
Test Case: 303 | Input/Output: [(25 2 8 16) 2]
Test Case: 304 | Input/Output: [(23 47 76 15) 15]
Test Case: 305 | Input/Output: [(99 28 36 43) 28]
Test Case: 306 | Input/Output: [(85 22 42 79) 22]
Test Case: 307 | Input/Output: [(11 60 74 1) 1]
Test Case: 308 | Input/Output: [(18 12 16 21) 12]
Test Case: 309 | Input/Output: [(97 98 32 93) 32]
Test Case: 310 | Input/Output: [(77 80 2 86) 2]
Test Case: 311 | Input/Output: [(63 35 31 46) 31]
Test Case: 312 | Input/Output: [(98 86 63 38) 38]
Test Case: 313 | Input/Output: [(27 79 66 71) 27]
Test Case: 314 | Input/Output: [(44 61 34 47) 34]
Test Case: 315 | Input/Output: [(63 22 16 25) 16]
Test Case: 316 | Input/Output: [(94 27 61 21) 21]
Test Case: 317 | Input/Output: [(94 11 47 29) 11]
Test Case: 318 | Input/Output: [(46 16 91 86) 16]
Test Case: 319 | Input/Output: [(66 11 25 67) 11]
Test Case: 320 | Input/Output: [(16 87 76 31) 16]
Test Case: 321 | Input/Output: [(62 2 89 64) 2]
Test Case: 322 | Input/Output: [(31 69 22 81) 22]
Test Case: 323 | Input/Output: [(84 79 6 54) 6]
Test Case: 324 | Input/Output: [(66 24 41 18) 18]
Test Case: 325 | Input/Output: [(69 8 47 44) 8]
Test Case: 326 | Input/Output: [(16 15 16 66) 15]
Test Case: 327 | Input/Output: [(78 87 56 18) 18]
Test Case: 328 | Input/Output: [(5 91 3 54) 3]
Test Case: 329 | Input/Output: [(30 30 54 54) 30]
Test Case: 330 | Input/Output: [(13 79 60 49) 13]
Test Case: 331 | Input/Output: [(75 6 70 42) 6]
Test Case: 332 | Input/Output: [(89 55 3 57) 3]
Test Case: 333 | Input/Output: [(1 91 83 63) 1]
Test Case: 334 | Input/Output: [(95 29 37 69) 29]
Test Case: 335 | Input/Output: [(16 52 40 42) 16]
Test Case: 336 | Input/Output: [(2 49 39 59) 2]
Test Case: 337 | Input/Output: [(43 68 86 1) 1]
Test Case: 338 | Input/Output: [(31 43 45 15) 15]
Test Case: 339 | Input/Output: [(61 1 82 22) 1]
Test Case: 340 | Input/Output: [(54 33 31 97) 31]
Test Case: 341 | Input/Output: [(15 31 26 14) 14]
Test Case: 342 | Input/Output: [(78 78 34 70) 34]
Test Case: 343 | Input/Output: [(46 69 82 20) 20]
Test Case: 344 | Input/Output: [(70 100 7 46) 7]
Test Case: 345 | Input/Output: [(93 38 66 96) 38]
Test Case: 346 | Input/Output: [(5 11 23 50) 5]
Test Case: 347 | Input/Output: [(96 74 66 18) 18]
Test Case: 348 | Input/Output: [(51 56 57 33) 33]
Test Case: 349 | Input/Output: [(61 64 28 87) 28]
Test Case: 350 | Input/Output: [(92 38 22 74) 22]
Test Case: 351 | Input/Output: [(6 96 90 20) 6]
Test Case: 352 | Input/Output: [(85 62 60 13) 13]
Test Case: 353 | Input/Output: [(80 70 39 27) 27]
Test Case: 354 | Input/Output: [(17 79 53 93) 17]
Test Case: 355 | Input/Output: [(36 25 92 40) 25]
Test Case: 356 | Input/Output: [(77 56 22 49) 22]
Test Case: 357 | Input/Output: [(5 3 36 3) 3]
Test Case: 358 | Input/Output: [(23 45 84 66) 23]
Test Case: 359 | Input/Output: [(57 98 97 97) 57]
Test Case: 360 | Input/Output: [(68 69 47 88) 47]
Test Case: 361 | Input/Output: [(7 36 20 95) 7]
Test Case: 362 | Input/Output: [(93 15 78 2) 2]
Test Case: 363 | Input/Output: [(39 87 18 83) 18]
Test Case: 364 | Input/Output: [(2 78 26 6) 2]
Test Case: 365 | Input/Output: [(12 83 96 76) 12]
Test Case: 366 | Input/Output: [(2 72 86 41) 2]
Test Case: 367 | Input/Output: [(20 18 1 59) 1]
Test Case: 368 | Input/Output: [(74 61 81 48) 48]
Test Case: 369 | Input/Output: [(67 61 31 9) 9]
Test Case: 370 | Input/Output: [(8 3 67 34) 3]
Test Case: 371 | Input/Output: [(49 81 6 84) 6]
Test Case: 372 | Input/Output: [(32 98 35 75) 32]
Test Case: 373 | Input/Output: [(28 46 21 67) 21]
Test Case: 374 | Input/Output: [(35 49 73 77) 35]
Test Case: 375 | Input/Output: [(17 40 73 20) 17]
Test Case: 376 | Input/Output: [(82 78 61 53) 53]
Test Case: 377 | Input/Output: [(4 92 44 5) 4]
Test Case: 378 | Input/Output: [(37 25 29 46) 25]
Test Case: 379 | Input/Output: [(4 60 15 54) 4]
Test Case: 380 | Input/Output: [(27 26 38 95) 26]
Test Case: 381 | Input/Output: [(79 20 72 51) 20]
Test Case: 382 | Input/Output: [(26 59 17 22) 17]
Test Case: 383 | Input/Output: [(31 27 6 55) 6]
Test Case: 384 | Input/Output: [(57 63 76 60) 57]
Test Case: 385 | Input/Output: [(78 57 14 88) 14]
Test Case: 386 | Input/Output: [(32 63 27 55) 27]
Test Case: 387 | Input/Output: [(35 28 18 100) 18]
Test Case: 388 | Input/Output: [(85 84 73 50) 50]
Test Case: 389 | Input/Output: [(11 95 24 99) 11]
Test Case: 390 | Input/Output: [(92 11 18 45) 11]
Test Case: 391 | Input/Output: [(27 37 100 16) 16]
Test Case: 392 | Input/Output: [(83 84 27 73) 27]
Test Case: 393 | Input/Output: [(55 15 94 40) 15]
Test Case: 394 | Input/Output: [(100 59 9 73) 9]
Test Case: 395 | Input/Output: [(69 28 32 27) 27]
Test Case: 396 | Input/Output: [(20 10 48 96) 10]
Test Case: 397 | Input/Output: [(33 23 94 81) 23]
Test Case: 398 | Input/Output: [(37 41 14 13) 13]
Test Case: 399 | Input/Output: [(91 46 81 22) 22]
Test Case: 400 | Input/Output: [(77 50 -52 -50) -52]
Test Case: 401 | Input/Output: [(-36 86 48 45) -36]
Test Case: 402 | Input/Output: [(-42 -35 42 51) -42]
Test Case: 403 | Input/Output: [(21 -35 -35 -3) -35]
Test Case: 404 | Input/Output: [(89 -95 -70 -23) -95]
Test Case: 405 | Input/Output: [(-69 -29 6 -4) -69]
Test Case: 406 | Input/Output: [(2 42 -91 -20) -91]
Test Case: 407 | Input/Output: [(78 -59 1 22) -59]
Test Case: 408 | Input/Output: [(-7 -78 -64 68) -78]
Test Case: 409 | Input/Output: [(-64 -38 -28 -16) -64]
Test Case: 410 | Input/Output: [(58 54 -90 -2) -90]
Test Case: 411 | Input/Output: [(36 43 80 10) 10]
Test Case: 412 | Input/Output: [(63 39 -6 -76) -76]
Test Case: 413 | Input/Output: [(51 -96 -71 -66) -96]
Test Case: 414 | Input/Output: [(-5 46 -56 -2) -56]
Test Case: 415 | Input/Output: [(53 -10 29 87) -10]
Test Case: 416 | Input/Output: [(-22 27 33 -31) -31]
Test Case: 417 | Input/Output: [(-60 -22 -10 61) -60]
Test Case: 418 | Input/Output: [(-49 -94 7 28) -94]
Test Case: 419 | Input/Output: [(43 66 -84 21) -84]
Test Case: 420 | Input/Output: [(12 30 -29 52) -29]
Test Case: 421 | Input/Output: [(22 90 99 -64) -64]
Test Case: 422 | Input/Output: [(12 -67 86 -1) -67]
Test Case: 423 | Input/Output: [(-67 -51 -52 63) -67]
Test Case: 424 | Input/Output: [(56 -70 -67 63) -70]
Test Case: 425 | Input/Output: [(49 -78 45 72) -78]
Test Case: 426 | Input/Output: [(-26 92 -85 91) -85]
Test Case: 427 | Input/Output: [(-8 -86 -27 54) -86]
Test Case: 428 | Input/Output: [(53 -11 -65 90) -65]
Test Case: 429 | Input/Output: [(70 -28 -2 -52) -52]
Test Case: 430 | Input/Output: [(34 -62 1 7) -62]
Test Case: 431 | Input/Output: [(-64 -79 94 -39) -79]
Test Case: 432 | Input/Output: [(-4 21 34 45) -4]
Test Case: 433 | Input/Output: [(-22 20 -97 91) -97]
Test Case: 434 | Input/Output: [(-80 80 -13 -72) -80]
Test Case: 435 | Input/Output: [(-6 57 88 -1) -6]
Test Case: 436 | Input/Output: [(-48 -87 -68 11) -87]
Test Case: 437 | Input/Output: [(40 -15 19 -15) -15]
Test Case: 438 | Input/Output: [(-17 4 41 15) -17]
Test Case: 439 | Input/Output: [(53 71 -33 44) -33]
Test Case: 440 | Input/Output: [(66 68 -92 94) -92]
Test Case: 441 | Input/Output: [(38 90 97 -27) -27]
Test Case: 442 | Input/Output: [(-42 55 -19 46) -42]
Test Case: 443 | Input/Output: [(-80 -44 -18 -80) -80]
Test Case: 444 | Input/Output: [(-82 90 -25 85) -82]
Test Case: 445 | Input/Output: [(25 -28 68 -40) -40]
Test Case: 446 | Input/Output: [(-15 22 44 -90) -90]
Test Case: 447 | Input/Output: [(91 -49 7 -22) -49]
Test Case: 448 | Input/Output: [(2 28 -2 78) -2]
Test Case: 449 | Input/Output: [(-76 58 20 67) -76]
Test Case: 450 | Input/Output: [(35 19 -59 -6) -59]
Test Case: 451 | Input/Output: [(-59 22 68 46) -59]
Test Case: 452 | Input/Output: [(-83 -40 49 88) -83]
Test Case: 453 | Input/Output: [(-49 47 -24 59) -49]
Test Case: 454 | Input/Output: [(16 36 -48 43) -48]
Test Case: 455 | Input/Output: [(93 -67 -28 -92) -92]
Test Case: 456 | Input/Output: [(-90 -79 -63 82) -90]
Test Case: 457 | Input/Output: [(16 -84 66 73) -84]
Test Case: 458 | Input/Output: [(-82 -42 70 -49) -82]
Test Case: 459 | Input/Output: [(23 -27 -71 32) -71]
Test Case: 460 | Input/Output: [(73 -60 64 -40) -60]
Test Case: 461 | Input/Output: [(89 -45 63 -7) -45]
Test Case: 462 | Input/Output: [(-3 -56 -43 -57) -57]
Test Case: 463 | Input/Output: [(-32 69 -70 38) -70]
Test Case: 464 | Input/Output: [(30 -59 7 -34) -59]
Test Case: 465 | Input/Output: [(2 5 -37 -75) -75]
Test Case: 466 | Input/Output: [(99 84 -31 -88) -88]
Test Case: 467 | Input/Output: [(-55 -55 7 -81) -81]
Test Case: 468 | Input/Output: [(-56 62 -35 -69) -69]
Test Case: 469 | Input/Output: [(95 -28 99 68) -28]
Test Case: 470 | Input/Output: [(4 41 36 26) 4]
Test Case: 471 | Input/Output: [(-51 65 55 36) -51]
Test Case: 472 | Input/Output: [(-76 -76 48 76) -76]
Test Case: 473 | Input/Output: [(51 9 32 -67) -67]
Test Case: 474 | Input/Output: [(-53 -40 13 53) -53]
Test Case: 475 | Input/Output: [(8 -20 -15 50) -20]
Test Case: 476 | Input/Output: [(-39 33 -58 86) -58]
Test Case: 477 | Input/Output: [(26 25 -82 -95) -95]
Test Case: 478 | Input/Output: [(-80 -60 -78 77) -80]
Test Case: 479 | Input/Output: [(-18 64 -74 -61) -74]
Test Case: 480 | Input/Output: [(-71 43 -34 -98) -98]
Test Case: 481 | Input/Output: [(-99 23 68 43) -99]
Test Case: 482 | Input/Output: [(8 -93 -30 84) -93]
Test Case: 483 | Input/Output: [(-13 -59 -10 -6) -59]
Test Case: 484 | Input/Output: [(4 -28 -43 63) -43]
Test Case: 485 | Input/Output: [(78 -14 12 -64) -64]
Test Case: 486 | Input/Output: [(55 10 -18 -57) -57]
Test Case: 487 | Input/Output: [(32 -16 -58 -80) -80]
Test Case: 488 | Input/Output: [(55 41 -95 -11) -95]
Test Case: 489 | Input/Output: [(-11 -18 92 -24) -24]
Test Case: 490 | Input/Output: [(-78 21 -68 99) -78]
Test Case: 491 | Input/Output: [(-65 3 58 -4) -65]
Test Case: 492 | Input/Output: [(25 -52 58 -67) -67]
Test Case: 493 | Input/Output: [(92 -4 -95 -88) -95]
Test Case: 494 | Input/Output: [(-10 -14 -40 82) -40]
Test Case: 495 | Input/Output: [(61 -5 -34 92) -34]
Test Case: 496 | Input/Output: [(77 48 51 -89) -89]
Test Case: 497 | Input/Output: [(14 86 -35 12) -35]
Test Case: 498 | Input/Output: [(42 -68 -33 10) -68]
Test Case: 499 | Input/Output: [(-45 11 22 9) -45]
Test Case: 500 | Input/Output: [(-31 -45 2 45) -45]
Test Case: 501 | Input/Output: [(-33 7 54 60) -33]
Test Case: 502 | Input/Output: [(13 78 -32 -16) -32]
Test Case: 503 | Input/Output: [(50 4 81 68) 4]
Test Case: 504 | Input/Output: [(55 -67 16 -52) -67]
Test Case: 505 | Input/Output: [(18 88 49 97) 18]
Test Case: 506 | Input/Output: [(95 -16 -8 17) -16]
Test Case: 507 | Input/Output: [(-80 3 -21 -7) -80]
Test Case: 508 | Input/Output: [(-86 -16 13 -39) -86]
Test Case: 509 | Input/Output: [(78 25 -65 -93) -93]
Test Case: 510 | Input/Output: [(-53 10 7 94) -53]
Test Case: 511 | Input/Output: [(-98 69 -8 83) -98]
Test Case: 512 | Input/Output: [(69 31 -22 -90) -90]
Test Case: 513 | Input/Output: [(7 -36 61 -21) -36]
Test Case: 514 | Input/Output: [(-37 0 -32 -45) -45]
Test Case: 515 | Input/Output: [(72 -88 66 -20) -88]
Test Case: 516 | Input/Output: [(-36 -42 -78 69) -78]
Test Case: 517 | Input/Output: [(57 -76 -90 18) -90]
Test Case: 518 | Input/Output: [(-21 40 -34 -83) -83]
Test Case: 519 | Input/Output: [(51 21 41 -11) -11]
Test Case: 520 | Input/Output: [(81 -46 -99 71) -99]
Test Case: 521 | Input/Output: [(88 -15 19 15) -15]
Test Case: 522 | Input/Output: [(-59 81 98 -19) -59]
Test Case: 523 | Input/Output: [(-38 90 -44 -76) -76]
Test Case: 524 | Input/Output: [(67 -14 -75 6) -75]
Test Case: 525 | Input/Output: [(-83 6 -3 40) -83]
Test Case: 526 | Input/Output: [(36 16 -87 15) -87]
Test Case: 527 | Input/Output: [(-66 61 81 -45) -66]
Test Case: 528 | Input/Output: [(12 -66 39 80) -66]
Test Case: 529 | Input/Output: [(-1 33 -12 26) -12]
Test Case: 530 | Input/Output: [(79 40 94 -12) -12]
Test Case: 531 | Input/Output: [(68 59 -1 -47) -47]
Test Case: 532 | Input/Output: [(-11 -96 66 36) -96]
Test Case: 533 | Input/Output: [(-10 73 94 70) -10]
Test Case: 534 | Input/Output: [(-86 25 -44 -93) -93]
Test Case: 535 | Input/Output: [(-40 78 74 32) -40]
Test Case: 536 | Input/Output: [(-5 51 -10 -51) -51]
Test Case: 537 | Input/Output: [(31 -26 19 14) -26]
Test Case: 538 | Input/Output: [(59 52 1 -87) -87]
Test Case: 539 | Input/Output: [(19 -3 29 17) -3]
Test Case: 540 | Input/Output: [(-40 98 -28 36) -40]
Test Case: 541 | Input/Output: [(66 18 14 73) 14]
Test Case: 542 | Input/Output: [(-24 4 51 -27) -27]
Test Case: 543 | Input/Output: [(25 53 -59 89) -59]
Test Case: 544 | Input/Output: [(61 -87 -89 -20) -89]
Test Case: 545 | Input/Output: [(86 -9 72 -42) -42]
Test Case: 546 | Input/Output: [(-88 53 -16 33) -88]
Test Case: 547 | Input/Output: [(87 -92 12 -90) -92]
Test Case: 548 | Input/Output: [(78 -66 -33 28) -66]
Test Case: 549 | Input/Output: [(-2 34 34 -47) -47]
Test Case: 550 | Input/Output: [(-17 -14 3 -64) -64]
Test Case: 551 | Input/Output: [(-74 84 56 92) -74]
Test Case: 552 | Input/Output: [(-35 10 3 -78) -78]
Test Case: 553 | Input/Output: [(-48 76 45 -41) -48]
Test Case: 554 | Input/Output: [(-79 1 -63 -6) -79]
Test Case: 555 | Input/Output: [(46 35 -9 83) -9]
Test Case: 556 | Input/Output: [(33 16 26 -6) -6]
Test Case: 557 | Input/Output: [(21 -13 -75 -44) -75]
Test Case: 558 | Input/Output: [(-94 85 76 -29) -94]
Test Case: 559 | Input/Output: [(16 -20 -27 91) -27]
Test Case: 560 | Input/Output: [(-15 -47 60 -59) -59]
Test Case: 561 | Input/Output: [(64 -89 -51 65) -89]
Test Case: 562 | Input/Output: [(-1 -26 -45 -65) -65]
Test Case: 563 | Input/Output: [(-46 18 83 -47) -47]
Test Case: 564 | Input/Output: [(-21 39 93 -35) -35]
Test Case: 565 | Input/Output: [(25 41 35 80) 25]
Test Case: 566 | Input/Output: [(44 16 25 -41) -41]
Test Case: 567 | Input/Output: [(-78 -17 26 39) -78]
Test Case: 568 | Input/Output: [(-4 19 -97 -3) -97]
Test Case: 569 | Input/Output: [(21 -79 -50 -10) -79]
Test Case: 570 | Input/Output: [(50 37 57 -61) -61]
Test Case: 571 | Input/Output: [(-81 -83 56 -38) -83]
Test Case: 572 | Input/Output: [(85 71 14 94) 14]
Test Case: 573 | Input/Output: [(16 -33 32 -58) -58]
Test Case: 574 | Input/Output: [(89 99 -25 43) -25]
Test Case: 575 | Input/Output: [(-77 5 -40 -91) -91]
Test Case: 576 | Input/Output: [(-25 70 4 75) -25]
Test Case: 577 | Input/Output: [(15 79 -84 74) -84]
Test Case: 578 | Input/Output: [(8 52 40 20) 8]
Test Case: 579 | Input/Output: [(-91 26 -88 -57) -91]
Test Case: 580 | Input/Output: [(-67 -99 -10 49) -99]
Test Case: 581 | Input/Output: [(-32 -9 62 25) -32]
Test Case: 582 | Input/Output: [(-39 85 88 -6) -39]
Test Case: 583 | Input/Output: [(-5 -8 -4 100) -8]
Test Case: 584 | Input/Output: [(74 -57 -45 49) -57]
Test Case: 585 | Input/Output: [(11 97 -60 -90) -90]
Test Case: 586 | Input/Output: [(-39 72 -99 -59) -99]
Test Case: 587 | Input/Output: [(-34 71 -9 -42) -42]
Test Case: 588 | Input/Output: [(-23 43 85 49) -23]
Test Case: 589 | Input/Output: [(-49 -47 0 -9) -49]
Test Case: 590 | Input/Output: [(-79 -91 -2 -49) -91]
Test Case: 591 | Input/Output: [(91 -89 41 -67) -89]
Test Case: 592 | Input/Output: [(6 -10 -75 -3) -75]
Test Case: 593 | Input/Output: [(93 70 25 29) 25]
Test Case: 594 | Input/Output: [(20 4 42 -48) -48]
Test Case: 595 | Input/Output: [(51 15 -30 33) -30]
Test Case: 596 | Input/Output: [(-94 67 -91 50) -94]
Test Case: 597 | Input/Output: [(-3 64 0 -49) -49]
Test Case: 598 | Input/Output: [(-66 5 56 21) -66]
Test Case: 599 | Input/Output: [(-57 2 -6 -25) -57]
Test Case: 600 | Input/Output: [(-94 -79 8 -68) -94]
Test Case: 601 | Input/Output: [(-73 -86 44 -38) -86]
Test Case: 602 | Input/Output: [(-42 9 73 -17) -42]
Test Case: 603 | Input/Output: [(51 -70 72 87) -70]
Test Case: 604 | Input/Output: [(-59 50 69 26) -59]
Test Case: 605 | Input/Output: [(63 -57 -36 -31) -57]
Test Case: 606 | Input/Output: [(-86 40 59 -23) -86]
Test Case: 607 | Input/Output: [(86 89 -5 62) -5]
Test Case: 608 | Input/Output: [(-61 23 96 76) -61]
Test Case: 609 | Input/Output: [(-39 23 -44 46) -44]
Test Case: 610 | Input/Output: [(83 -80 1 -97) -97]
Test Case: 611 | Input/Output: [(-40 -36 83 -11) -40]
Test Case: 612 | Input/Output: [(74 -12 72 -41) -41]
Test Case: 613 | Input/Output: [(-99 -3 57 52) -99]
Test Case: 614 | Input/Output: [(-79 -27 40 -8) -79]
Test Case: 615 | Input/Output: [(72 39 70 -18) -18]
Test Case: 616 | Input/Output: [(-71 69 -98 63) -98]
Test Case: 617 | Input/Output: [(-17 36 -39 95) -39]
Test Case: 618 | Input/Output: [(-25 -68 -81 8) -81]
Test Case: 619 | Input/Output: [(90 93 -27 -20) -27]
Test Case: 620 | Input/Output: [(90 98 65 -2) -2]
Test Case: 621 | Input/Output: [(-15 41 18 21) -15]
Test Case: 622 | Input/Output: [(53 76 96 38) 38]
Test Case: 623 | Input/Output: [(-73 39 46 -94) -94]
Test Case: 624 | Input/Output: [(64 -83 -81 -50) -83]
Test Case: 625 | Input/Output: [(-77 -75 52 -12) -77]
Test Case: 626 | Input/Output: [(44 -13 -35 76) -35]
Test Case: 627 | Input/Output: [(79 -46 14 -100) -100]
Test Case: 628 | Input/Output: [(99 -92 44 45) -92]
Test Case: 629 | Input/Output: [(6 -25 62 -74) -74]
Test Case: 630 | Input/Output: [(-51 37 16 96) -51]
Test Case: 631 | Input/Output: [(-32 20 80 9) -32]
Test Case: 632 | Input/Output: [(75 -72 -16 44) -72]
Test Case: 633 | Input/Output: [(-77 -78 -38 -55) -78]
Test Case: 634 | Input/Output: [(16 36 -33 57) -33]
Test Case: 635 | Input/Output: [(10 89 -75 1) -75]
Test Case: 636 | Input/Output: [(-54 -82 -58 -62) -82]
Test Case: 637 | Input/Output: [(21 -89 89 -64) -89]
Test Case: 638 | Input/Output: [(-35 89 -9 -5) -35]
Test Case: 639 | Input/Output: [(-86 49 36 -49) -86]
Test Case: 640 | Input/Output: [(32 23 97 23) 23]
Test Case: 641 | Input/Output: [(-100 -63 36 95) -100]
Test Case: 642 | Input/Output: [(-49 -91 -88 17) -91]
Test Case: 643 | Input/Output: [(-72 -89 83 95) -89]
Test Case: 644 | Input/Output: [(31 78 45 -61) -61]
Test Case: 645 | Input/Output: [(33 -36 -99 -87) -99]
Test Case: 646 | Input/Output: [(-50 -55 -92 28) -92]
Test Case: 647 | Input/Output: [(27 -13 -65 99) -65]
Test Case: 648 | Input/Output: [(87 14 -75 57) -75]
Test Case: 649 | Input/Output: [(57 37 -79 -51) -79]
Test Case: 650 | Input/Output: [(-57 -1 -86 47) -86]
Test Case: 651 | Input/Output: [(17 55 72 -8) -8]
Test Case: 652 | Input/Output: [(-73 43 70 -48) -73]
Test Case: 653 | Input/Output: [(-86 13 32 -20) -86]
Test Case: 654 | Input/Output: [(-51 61 73 -33) -51]
Test Case: 655 | Input/Output: [(50 68 71 100) 50]
Test Case: 656 | Input/Output: [(-92 27 -68 24) -92]
Test Case: 657 | Input/Output: [(-72 -68 85 64) -72]
Test Case: 658 | Input/Output: [(-52 46 45 85) -52]
Test Case: 659 | Input/Output: [(-77 63 -21 -40) -77]
Test Case: 660 | Input/Output: [(-57 17 98 16) -57]
Test Case: 661 | Input/Output: [(-34 -15 -2 -62) -62]
Test Case: 662 | Input/Output: [(98 16 78 -9) -9]
Test Case: 663 | Input/Output: [(-26 -98 82 -72) -98]
Test Case: 664 | Input/Output: [(23 -83 -80 62) -83]
Test Case: 665 | Input/Output: [(-15 83 -18 38) -18]
Test Case: 666 | Input/Output: [(65 -89 49 42) -89]
Test Case: 667 | Input/Output: [(-87 97 -1 -71) -87]
Test Case: 668 | Input/Output: [(-83 -78 66 -62) -83]
Test Case: 669 | Input/Output: [(-72 71 56 85) -72]
Test Case: 670 | Input/Output: [(-58 17 -74 17) -74]
Test Case: 671 | Input/Output: [(25 -88 51 -94) -94]
Test Case: 672 | Input/Output: [(99 81 -12 -72) -72]
Test Case: 673 | Input/Output: [(-39 94 30 -51) -51]
Test Case: 674 | Input/Output: [(29 -63 -54 22) -63]
Test Case: 675 | Input/Output: [(-56 -64 -23 -99) -99]
Test Case: 676 | Input/Output: [(90 -99 68 78) -99]
Test Case: 677 | Input/Output: [(53 -37 17 -97) -97]
Test Case: 678 | Input/Output: [(-10 79 24 23) -10]
Test Case: 679 | Input/Output: [(-92 -55 -23 54) -92]
Test Case: 680 | Input/Output: [(92 5 -77 -73) -77]
Test Case: 681 | Input/Output: [(-11 56 49 64) -11]
Test Case: 682 | Input/Output: [(-35 8 -95 -45) -95]
Test Case: 683 | Input/Output: [(85 40 89 70) 40]
Test Case: 684 | Input/Output: [(79 29 -39 -23) -39]
Test Case: 685 | Input/Output: [(-39 -74 -9 -24) -74]
Test Case: 686 | Input/Output: [(-61 -76 3 -59) -76]
Test Case: 687 | Input/Output: [(-39 -53 28 -28) -53]
Test Case: 688 | Input/Output: [(24 -14 -54 38) -54]
Test Case: 689 | Input/Output: [(-63 -68 1 33) -68]
Test Case: 690 | Input/Output: [(-64 -95 -23 -51) -95]
Test Case: 691 | Input/Output: [(21 -31 60 43) -31]
Test Case: 692 | Input/Output: [(49 -32 -43 -43) -43]
Test Case: 693 | Input/Output: [(30 20 -13 84) -13]
Test Case: 694 | Input/Output: [(-46 10 43 -96) -96]
Test Case: 695 | Input/Output: [(48 13 -85 32) -85]
Test Case: 696 | Input/Output: [(-55 71 -79 -59) -79]
Test Case: 697 | Input/Output: [(99 -92 40 87) -92]
Test Case: 698 | Input/Output: [(-23 -64 51 98) -64]
Test Case: 699 | Input/Output: [(-67 -21 -28 47) -67]
Test Case: 700 | Input/Output: [(-47 -92 37 36) -92]
Test Case: 701 | Input/Output: [(-65 -73 31 23) -73]
Test Case: 702 | Input/Output: [(28 55 66 -59) -59]
Test Case: 703 | Input/Output: [(-50 -85 51 3) -85]
Test Case: 704 | Input/Output: [(30 48 96 -1) -1]
Test Case: 705 | Input/Output: [(-42 -23 91 40) -42]
Test Case: 706 | Input/Output: [(70 -3 48 -6) -6]
Test Case: 707 | Input/Output: [(-3 70 66 -40) -40]
Test Case: 708 | Input/Output: [(-65 -4 21 -61) -65]
Test Case: 709 | Input/Output: [(41 36 -37 61) -37]
Test Case: 710 | Input/Output: [(97 50 -57 6) -57]
Test Case: 711 | Input/Output: [(98 16 -72 -29) -72]
Test Case: 712 | Input/Output: [(31 -1 80 53) -1]
Test Case: 713 | Input/Output: [(7 37 90 -98) -98]
Test Case: 714 | Input/Output: [(-54 24 -6 -52) -54]
Test Case: 715 | Input/Output: [(-86 -2 -66 8) -86]
Test Case: 716 | Input/Output: [(-77 -93 8 -57) -93]
Test Case: 717 | Input/Output: [(83 77 -46 -26) -46]
Test Case: 718 | Input/Output: [(10 77 -17 73) -17]
Test Case: 719 | Input/Output: [(-28 93 20 81) -28]
Test Case: 720 | Input/Output: [(-24 32 -49 -54) -54]
Test Case: 721 | Input/Output: [(74 -92 20 -88) -92]
Test Case: 722 | Input/Output: [(65 -20 49 55) -20]
Test Case: 723 | Input/Output: [(-15 98 57 34) -15]
Test Case: 724 | Input/Output: [(18 19 65 -18) -18]
Test Case: 725 | Input/Output: [(-51 -51 -16 -89) -89]
Test Case: 726 | Input/Output: [(-83 -57 93 40) -83]
Test Case: 727 | Input/Output: [(18 24 100 82) 18]
Test Case: 728 | Input/Output: [(-40 94 4 -58) -58]
Test Case: 729 | Input/Output: [(-10 -66 77 -56) -66]
Test Case: 730 | Input/Output: [(62 -67 89 37) -67]
Test Case: 731 | Input/Output: [(80 -22 85 -64) -64]
Test Case: 732 | Input/Output: [(97 66 28 72) 28]
Test Case: 733 | Input/Output: [(24 -82 89 31) -82]
Test Case: 734 | Input/Output: [(-20 43 36 7) -20]
Test Case: 735 | Input/Output: [(24 -26 99 -87) -87]
Test Case: 736 | Input/Output: [(-92 46 -66 -74) -92]
Test Case: 737 | Input/Output: [(-30 -49 60 57) -49]
Test Case: 738 | Input/Output: [(-97 65 -9 -55) -97]
Test Case: 739 | Input/Output: [(-18 65 -68 57) -68]
Test Case: 740 | Input/Output: [(93 65 44 -27) -27]
Test Case: 741 | Input/Output: [(-18 71 98 -36) -36]
Test Case: 742 | Input/Output: [(-37 30 1 -98) -98]
Test Case: 743 | Input/Output: [(-24 -6 -55 -5) -55]
Test Case: 744 | Input/Output: [(-26 62 -58 -7) -58]
Test Case: 745 | Input/Output: [(20 47 -13 -37) -37]
Test Case: 746 | Input/Output: [(-39 55 50 -1) -39]
Test Case: 747 | Input/Output: [(94 8 -100 -94) -100]
Test Case: 748 | Input/Output: [(10 -50 -8 14) -50]
Test Case: 749 | Input/Output: [(-40 -33 -95 -73) -95]
Test Case: 750 | Input/Output: [(-49 -77 -69 -80) -80]
Test Case: 751 | Input/Output: [(-57 -98 18 63) -98]
Test Case: 752 | Input/Output: [(11 -96 91 7) -96]
Test Case: 753 | Input/Output: [(-5 -79 -82 -31) -82]
Test Case: 754 | Input/Output: [(-97 -23 -66 -53) -97]
Test Case: 755 | Input/Output: [(-95 94 74 75) -95]
Test Case: 756 | Input/Output: [(36 -92 28 22) -92]
Test Case: 757 | Input/Output: [(-33 74 71 -24) -33]
Test Case: 758 | Input/Output: [(-28 80 35 56) -28]
Test Case: 759 | Input/Output: [(-64 -50 26 46) -64]
Test Case: 760 | Input/Output: [(-69 -28 -57 -1) -69]
Test Case: 761 | Input/Output: [(73 22 17 -39) -39]
Test Case: 762 | Input/Output: [(-7 81 41 -66) -66]
Test Case: 763 | Input/Output: [(46 -7 85 -27) -27]
Test Case: 764 | Input/Output: [(-10 38 -22 54) -22]
Test Case: 765 | Input/Output: [(-56 -99 72 -95) -99]
Test Case: 766 | Input/Output: [(-49 68 -63 -67) -67]
Test Case: 767 | Input/Output: [(-26 -22 74 -86) -86]
Test Case: 768 | Input/Output: [(-65 -28 89 -28) -65]
Test Case: 769 | Input/Output: [(70 63 -16 27) -16]
Test Case: 770 | Input/Output: [(72 -61 -32 -70) -70]
Test Case: 771 | Input/Output: [(-96 -36 58 -6) -96]
Test Case: 772 | Input/Output: [(-1 -4 82 42) -4]
Test Case: 773 | Input/Output: [(74 62 -84 -80) -84]
Test Case: 774 | Input/Output: [(-15 64 94 -32) -32]
Test Case: 775 | Input/Output: [(-85 -24 30 -75) -85]
Test Case: 776 | Input/Output: [(-76 12 90 58) -76]
Test Case: 777 | Input/Output: [(35 -68 25 -34) -68]
Test Case: 778 | Input/Output: [(51 62 84 16) 16]
Test Case: 779 | Input/Output: [(-81 -13 -15 1) -81]
Test Case: 780 | Input/Output: [(29 94 -77 8) -77]
Test Case: 781 | Input/Output: [(97 18 44 1) 1]
Test Case: 782 | Input/Output: [(44 -25 -87 5) -87]
Test Case: 783 | Input/Output: [(88 -98 80 -27) -98]
Test Case: 784 | Input/Output: [(89 -91 -14 19) -91]
Test Case: 785 | Input/Output: [(66 94 -55 63) -55]
Test Case: 786 | Input/Output: [(61 -89 58 31) -89]
Test Case: 787 | Input/Output: [(-44 -9 -11 -2) -44]
Test Case: 788 | Input/Output: [(64 70 24 -81) -81]
Test Case: 789 | Input/Output: [(69 -75 -14 92) -75]
Test Case: 790 | Input/Output: [(71 20 62 -4) -4]
Test Case: 791 | Input/Output: [(30 -91 100 15) -91]
Test Case: 792 | Input/Output: [(23 -63 2 -8) -63]
Test Case: 793 | Input/Output: [(47 31 58 -36) -36]
Test Case: 794 | Input/Output: [(76 -9 -33 -100) -100]
Test Case: 795 | Input/Output: [(-22 -25 36 21) -25]
Test Case: 796 | Input/Output: [(52 21 68 -95) -95]
Test Case: 797 | Input/Output: [(-73 0 92 -38) -73]
Test Case: 798 | Input/Output: [(95 -95 55 -37) -95]
Test Case: 799 | Input/Output: [(-24 -22 -2 0) -24]
Test Case: 800 | Input/Output: [(-86 -88 -27 68) -88]
Test Case: 801 | Input/Output: [(-67 -31 -83 99) -83]
Test Case: 802 | Input/Output: [(12 74 28 -74) -74]
Test Case: 803 | Input/Output: [(65 -77 -29 -49) -77]
Test Case: 804 | Input/Output: [(59 -35 45 26) -35]
Test Case: 805 | Input/Output: [(13 -87 -23 -19) -87]
Test Case: 806 | Input/Output: [(95 -22 0 -1) -22]
Test Case: 807 | Input/Output: [(73 51 46 -6) -6]
Test Case: 808 | Input/Output: [(-71 -10 1 -54) -71]
Test Case: 809 | Input/Output: [(91 33 21 5) 5]
Test Case: 810 | Input/Output: [(-88 -6 -58 -73) -88]
Test Case: 811 | Input/Output: [(65 -68 10 -7) -68]
Test Case: 812 | Input/Output: [(72 -27 -47 -88) -88]
Test Case: 813 | Input/Output: [(37 27 75 -33) -33]
Test Case: 814 | Input/Output: [(-88 61 -32 83) -88]
Test Case: 815 | Input/Output: [(46 -69 -12 -15) -69]
Test Case: 816 | Input/Output: [(-55 55 -91 57) -91]
Test Case: 817 | Input/Output: [(16 -57 86 39) -57]
Test Case: 818 | Input/Output: [(-54 62 -37 -69) -69]
Test Case: 819 | Input/Output: [(-9 61 24 90) -9]
Test Case: 820 | Input/Output: [(17 -82 -64 81) -82]
Test Case: 821 | Input/Output: [(-31 -8 49 -83) -83]
Test Case: 822 | Input/Output: [(26 4 -62 8) -62]
Test Case: 823 | Input/Output: [(19 92 52 18) 18]
Test Case: 824 | Input/Output: [(50 -48 31 -69) -69]
Test Case: 825 | Input/Output: [(-33 -95 62 -30) -95]
Test Case: 826 | Input/Output: [(-76 73 49 -10) -76]
Test Case: 827 | Input/Output: [(16 63 29 35) 16]
Test Case: 828 | Input/Output: [(-90 -72 -14 2) -90]
Test Case: 829 | Input/Output: [(-96 48 59 46) -96]
Test Case: 830 | Input/Output: [(24 -29 48 58) -29]
Test Case: 831 | Input/Output: [(44 0 41 30) 0]
Test Case: 832 | Input/Output: [(94 67 -74 10) -74]
Test Case: 833 | Input/Output: [(-74 55 8 20) -74]
Test Case: 834 | Input/Output: [(-24 94 -50 -36) -50]
Test Case: 835 | Input/Output: [(33 -95 -29 -7) -95]
Test Case: 836 | Input/Output: [(52 -44 -72 -2) -72]
Test Case: 837 | Input/Output: [(-89 -10 55 61) -89]
Test Case: 838 | Input/Output: [(-28 -98 -9 65) -98]
Test Case: 839 | Input/Output: [(94 24 -65 94) -65]
Test Case: 840 | Input/Output: [(66 -16 -81 -26) -81]
Test Case: 841 | Input/Output: [(72 -22 -99 86) -99]
Test Case: 842 | Input/Output: [(80 46 33 50) 33]
Test Case: 843 | Input/Output: [(71 64 94 -50) -50]
Test Case: 844 | Input/Output: [(-46 -81 -87 75) -87]
Test Case: 845 | Input/Output: [(-10 -34 -32 -85) -85]
Test Case: 846 | Input/Output: [(-43 -100 -65 19) -100]
Test Case: 847 | Input/Output: [(-46 -66 46 -46) -66]
Test Case: 848 | Input/Output: [(18 -62 -31 24) -62]
Test Case: 849 | Input/Output: [(-31 -20 -97 -95) -97]
Test Case: 850 | Input/Output: [(-85 86 -90 17) -90]
Test Case: 851 | Input/Output: [(-78 70 100 -29) -78]
Test Case: 852 | Input/Output: [(-76 54 -50 75) -76]
Test Case: 853 | Input/Output: [(-2 62 -35 95) -35]
Test Case: 854 | Input/Output: [(43 98 27 30) 27]
Test Case: 855 | Input/Output: [(47 23 77 -76) -76]
Test Case: 856 | Input/Output: [(36 -10 -37 -77) -77]
Test Case: 857 | Input/Output: [(52 9 -13 -81) -81]
Test Case: 858 | Input/Output: [(79 -71 -69 24) -71]
Test Case: 859 | Input/Output: [(29 71 52 44) 29]
Test Case: 860 | Input/Output: [(70 -60 -51 -90) -90]
Test Case: 861 | Input/Output: [(-22 15 -15 -29) -29]
Test Case: 862 | Input/Output: [(67 76 -15 -18) -18]
Test Case: 863 | Input/Output: [(-66 -14 75 11) -66]
Test Case: 864 | Input/Output: [(-36 67 88 92) -36]
Test Case: 865 | Input/Output: [(31 -63 55 4) -63]
Test Case: 866 | Input/Output: [(-97 9 57 9) -97]
Test Case: 867 | Input/Output: [(-75 -94 -98 -93) -98]
Test Case: 868 | Input/Output: [(-91 64 75 67) -91]
Test Case: 869 | Input/Output: [(69 100 67 -48) -48]
Test Case: 870 | Input/Output: [(-38 98 35 65) -38]
Test Case: 871 | Input/Output: [(21 73 -6 72) -6]
Test Case: 872 | Input/Output: [(36 58 -96 25) -96]
Test Case: 873 | Input/Output: [(-43 -85 10 -31) -85]
Test Case: 874 | Input/Output: [(19 -79 -54 -33) -79]
Test Case: 875 | Input/Output: [(-27 -94 -19 24) -94]
Test Case: 876 | Input/Output: [(-50 85 -5 -94) -94]
Test Case: 877 | Input/Output: [(27 45 -19 -71) -71]
Test Case: 878 | Input/Output: [(-11 -73 56 -98) -98]
Test Case: 879 | Input/Output: [(33 -4 31 -11) -11]
Test Case: 880 | Input/Output: [(-14 7 13 95) -14]
Test Case: 881 | Input/Output: [(51 98 12 22) 12]
Test Case: 882 | Input/Output: [(-69 54 66 47) -69]
Test Case: 883 | Input/Output: [(3 21 -3 -27) -27]
Test Case: 884 | Input/Output: [(-11 -14 6 -97) -97]
Test Case: 885 | Input/Output: [(71 69 -75 -90) -90]
Test Case: 886 | Input/Output: [(-77 -34 -84 -86) -86]
Test Case: 887 | Input/Output: [(49 9 48 -90) -90]
Test Case: 888 | Input/Output: [(-57 -28 -5 -51) -57]
Test Case: 889 | Input/Output: [(20 -56 -55 -45) -56]
Test Case: 890 | Input/Output: [(-73 -26 19 79) -73]
Test Case: 891 | Input/Output: [(-27 -11 -67 60) -67]
Test Case: 892 | Input/Output: [(-64 -38 -24 -67) -67]
Test Case: 893 | Input/Output: [(38 -98 -35 100) -98]
Test Case: 894 | Input/Output: [(-78 -29 -11 -97) -97]
Test Case: 895 | Input/Output: [(-88 -66 24 -34) -88]
Test Case: 896 | Input/Output: [(-50 27 23 -47) -50]
Test Case: 897 | Input/Output: [(87 30 -57 97) -57]
Test Case: 898 | Input/Output: [(-85 -42 28 -82) -85]
Test Case: 899 | Input/Output: [(-29 50 6 31) -29]
Test Case: 900 | Input/Output: [(61 -83 63 -27) -83]
Test Case: 901 | Input/Output: [(65 87 -41 32) -41]
Test Case: 902 | Input/Output: [(-87 -91 87 -58) -91]
Test Case: 903 | Input/Output: [(40 -97 15 38) -97]
Test Case: 904 | Input/Output: [(-58 -69 99 -31) -69]
Test Case: 905 | Input/Output: [(-27 35 -3 -58) -58]
Test Case: 906 | Input/Output: [(-63 -19 86 69) -63]
Test Case: 907 | Input/Output: [(4 54 -96 -92) -96]
Test Case: 908 | Input/Output: [(-17 -6 -86 42) -86]
Test Case: 909 | Input/Output: [(-48 -8 -49 -65) -65]
Test Case: 910 | Input/Output: [(40 99 11 -7) -7]
Test Case: 911 | Input/Output: [(26 -54 30 -65) -65]
Test Case: 912 | Input/Output: [(-80 -14 96 12) -80]
Test Case: 913 | Input/Output: [(3 39 -60 -93) -93]
Test Case: 914 | Input/Output: [(-11 69 -46 -99) -99]
Test Case: 915 | Input/Output: [(72 -94 -92 63) -94]
Test Case: 916 | Input/Output: [(-69 -65 37 44) -69]
Test Case: 917 | Input/Output: [(43 -93 -56 -41) -93]
Test Case: 918 | Input/Output: [(93 61 17 -64) -64]
Test Case: 919 | Input/Output: [(85 -95 60 -57) -95]
Test Case: 920 | Input/Output: [(-46 98 60 -89) -89]
Test Case: 921 | Input/Output: [(25 -56 -89 -44) -89]
Test Case: 922 | Input/Output: [(-72 44 -59 5) -72]
Test Case: 923 | Input/Output: [(-26 48 -22 84) -26]
Test Case: 924 | Input/Output: [(-34 68 67 -22) -34]
Test Case: 925 | Input/Output: [(-8 77 -78 -80) -80]
Test Case: 926 | Input/Output: [(71 22 36 53) 22]
Test Case: 927 | Input/Output: [(-38 49 90 -74) -74]
Test Case: 928 | Input/Output: [(-47 83 -79 23) -79]
Test Case: 929 | Input/Output: [(-93 79 -94 -86) -94]
Test Case: 930 | Input/Output: [(9 8 -21 15) -21]
Test Case: 931 | Input/Output: [(-5 -44 96 39) -44]
Test Case: 932 | Input/Output: [(-23 97 -22 38) -23]
Test Case: 933 | Input/Output: [(-11 1 85 7) -11]
Test Case: 934 | Input/Output: [(-20 56 -83 -52) -83]
Test Case: 935 | Input/Output: [(-63 84 -73 -85) -85]
Test Case: 936 | Input/Output: [(-42 -14 -56 93) -56]
Test Case: 937 | Input/Output: [(-79 -20 64 67) -79]
Test Case: 938 | Input/Output: [(27 -60 -64 19) -64]
Test Case: 939 | Input/Output: [(52 -2 -9 68) -9]
Test Case: 940 | Input/Output: [(-66 57 -93 -39) -93]
Test Case: 941 | Input/Output: [(78 -41 22 -61) -61]
Test Case: 942 | Input/Output: [(-79 37 -67 30) -79]
Test Case: 943 | Input/Output: [(69 55 -89 -76) -89]
Test Case: 944 | Input/Output: [(-51 16 -91 -64) -91]
Test Case: 945 | Input/Output: [(27 3 -93 68) -93]
Test Case: 946 | Input/Output: [(-63 -37 -69 -54) -69]
Test Case: 947 | Input/Output: [(66 -43 -20 -40) -43]
Test Case: 948 | Input/Output: [(-8 -29 -86 30) -86]
Test Case: 949 | Input/Output: [(17 -81 23 72) -81]
Test Case: 950 | Input/Output: [(7 -35 81 47) -35]
Test Case: 951 | Input/Output: [(-37 -67 42 -93) -93]
Test Case: 952 | Input/Output: [(31 96 65 64) 31]
Test Case: 953 | Input/Output: [(-62 21 80 -16) -62]
Test Case: 954 | Input/Output: [(79 -60 64 -71) -71]
Test Case: 955 | Input/Output: [(15 -77 72 56) -77]
Test Case: 956 | Input/Output: [(83 33 -52 -31) -52]
Test Case: 957 | Input/Output: [(-57 -49 67 32) -57]
Test Case: 958 | Input/Output: [(-55 -12 -86 3) -86]
Test Case: 959 | Input/Output: [(-59 -74 -78 38) -78]
Test Case: 960 | Input/Output: [(-39 17 -53 42) -53]
Test Case: 961 | Input/Output: [(57 43 9 93) 9]
Test Case: 962 | Input/Output: [(12 82 -6 -85) -85]
Test Case: 963 | Input/Output: [(84 -38 -7 -12) -38]
Test Case: 964 | Input/Output: [(35 -88 -46 -70) -88]
Test Case: 965 | Input/Output: [(67 -89 20 65) -89]
Test Case: 966 | Input/Output: [(-95 -4 95 -72) -95]
Test Case: 967 | Input/Output: [(-51 -60 45 -21) -60]
Test Case: 968 | Input/Output: [(10 -9 24 15) -9]
Test Case: 969 | Input/Output: [(-39 -23 -71 35) -71]
Test Case: 970 | Input/Output: [(-22 -9 -78 -77) -78]
Test Case: 971 | Input/Output: [(89 -18 -84 29) -84]
Test Case: 972 | Input/Output: [(-15 74 -69 77) -69]
Test Case: 973 | Input/Output: [(-1 -23 4 -7) -23]
Test Case: 974 | Input/Output: [(84 -42 15 -90) -90]
Test Case: 975 | Input/Output: [(-98 -81 -19 72) -98]
Test Case: 976 | Input/Output: [(-54 -69 -99 52) -99]
Test Case: 977 | Input/Output: [(76 -24 -59 -38) -59]
Test Case: 978 | Input/Output: [(55 56 0 42) 0]
Test Case: 979 | Input/Output: [(23 -3 -49 -70) -70]
Test Case: 980 | Input/Output: [(89 -38 72 22) -38]
Test Case: 981 | Input/Output: [(44 77 -61 72) -61]
Test Case: 982 | Input/Output: [(-2 -8 89 -39) -39]
Test Case: 983 | Input/Output: [(-35 -48 -16 89) -48]
Test Case: 984 | Input/Output: [(19 16 -48 -67) -67]
Test Case: 985 | Input/Output: [(-58 20 -78 64) -78]
Test Case: 986 | Input/Output: [(45 -94 72 -76) -94]
Test Case: 987 | Input/Output: [(-49 84 37 70) -49]
Test Case: 988 | Input/Output: [(81 -38 6 94) -38]
Test Case: 989 | Input/Output: [(-57 54 -80 -66) -80]
Test Case: 990 | Input/Output: [(52 -74 -85 -87) -87]
Test Case: 991 | Input/Output: [(-31 -32 80 -56) -56]
Test Case: 992 | Input/Output: [(22 -70 54 -71) -71]
Test Case: 993 | Input/Output: [(-98 92 39 66) -98]
Test Case: 994 | Input/Output: [(36 -77 -14 3) -77]
Test Case: 995 | Input/Output: [(-60 0 14 -72) -72]
Test Case: 996 | Input/Output: [(36 -53 -14 67) -53]
Test Case: 997 | Input/Output: [(44 19 7 4) 4]
Test Case: 998 | Input/Output: [(60 24 47 76) 24]
Test Case: 999 | Input/Output: [(53 -52 -14 0) -52]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 98f17fffbd710431b7ffe02918e462d48a2ebada
GitHub link = https://github.com/lspector/Clojush/commit/98f17fffbd710431b7ffe02918e462d48a2ebada
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x30b9728f clojush.problems.software.smallest$fn__7460@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@24b8a393]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
random-screen = false
random-seed = 36 89 118 -61 -14 -95 -77 -13 10 -29 -30 97 -116 -119 -8 56
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[98 48 48 48] 48] [[30 30 -33 30] -33] [[65 32 65 65] 32] [[89 89 89 24] 24] [[-20 -20 -20 -79] -79] [[36 -83 -83 -83] -83] [[-54 -54 -54 74] -54] [[-20 -1 -1 -1] -20] [[99 99 99 -79] -79] [[-54 -85 -85 -85] -85] [(-66 -66 -66 -66) -66] [(64 64 64 64) 64] [(-21 -21 -21 -21) -21] [(13 13 13 13) 13] [(35 35 35 35) 35] [(0 92 85 91) 0] [(89 29 27 3) 3] [(10 14 70 79) 10] [(21 82 41 72) 21] [(43 76 50 93) 43] [(66 20 98 40) 20] [(95 98 5 11) 5] [(50 62 85 6) 6] [(30 100 79 36) 30] [(85 89 41 13) 13] [(21 51 53 72) 21] [(99 79 19 39) 19] [(8 2 40 100) 2] [(29 2 20 75) 2] [(39 3 87 1) 1] [(84 84 96 1) 1] [(45 62 45 36) 36] [(8 84 10 73) 8] [(41 62 94 45) 41] [(48 18 35 83) 18] [(-25 45 65 1) -25] [(42 41 -25 0) -25] [(76 26 44 -31) -31] [(48 -35 30 73) -35] [(59 -49 35 5) -49] [(96 -24 -18 -85) -85] [(-7 -24 -12 39) -24] [(37 -93 -79 -28) -93] [(-81 44 24 74) -81] [(-11 100 -56 38) -56] [(-57 66 -55 64) -57] [(71 -83 -37 -97) -97] [(-58 92 27 -43) -58] [(64 3 -15 -66) -66] [(97 63 -13 -20) -20] [(39 44 -16 -91) -91] [(-6 -80 26 -58) -80] [(27 92 -60 -83) -83] [(67 57 4 -42) -42] [(60 33 38 93) 33] [(74 69 -56 -65) -65] [(64 81 -72 -79) -79] [(-86 -24 97 -30) -86] [(21 2 61 41) 2] [(32 18 33 -13) -13] [(-42 -73 -90 1) -90] [(55 -78 -87 -15) -87] [(-8 10 -51 95) -51] [(-40 67 -64 -55) -64] [(-90 -53 38 -75) -90] [(54 -34 59 34) -34] [(99 67 -57 9) -57] [(46 -76 50 75) -76] [(54 -86 74 -59) -86] [(1 25 80 54) 1] [(67 -98 -4 -86) -98] [(-14 -47 44 -39) -47] [(80 -34 85 -11) -34] [(28 27 -27 -80) -80] [(16 -34 -31 -10) -34] [(-15 36 87 77) -15] [(-46 95 86 -22) -46] [(56 17 88 63) 17] [(20 0 -78 98) -78] [(29 -92 -25 82) -92] [(-92 -29 -23 91) -92] [(2 -68 60 86) -68] [(35 -76 -32 -98) -98] [(3 64 -77 -24) -77] [(53 57 82 -21) -21] [(-76 -81 3 69) -81] [(-37 -35 11 -86) -86] [(84 85 -56 -53) -56] [(-12 19 81 2) -12] [(-75 60 -65 2) -75] [(46 -68 -62 88) -68] [(16 47 -97 99) -97] [(-71 -17 -44 -40) -71] [(-36 89 -10 -13) -36] [(53 97 55 -8) -8])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 650
Test mean error for best: 0.65000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 48                  | Program output: 48                 
Correct output: -33                 | Program output: 30                 
Correct output: 32                  | Program output: 32                 
Correct output: 24                  | Program output: 89                 
Correct output: -79                 | Program output: -20                
Correct output: -83                 | Program output: -83                
Correct output: -54                 | Program output: -54                
Correct output: -20                 | Program output: -1                 
Correct output: -79                 | Program output: 99                 
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -66                
Correct output: 64                  | Program output: 64                 
Correct output: -21                 | Program output: -21                
Correct output: 13                  | Program output: 13                 
Correct output: 35                  | Program output: 35                 
Correct output: 0                   | Program output: 92                 
Correct output: 3                   | Program output: 29                 
Correct output: 10                  | Program output: 14                 
Correct output: 21                  | Program output: 82                 
Correct output: 43                  | Program output: 76                 
Correct output: 20                  | Program output: 20                 
Correct output: 5                   | Program output: 98                 
Correct output: 6                   | Program output: 62                 
Correct output: 30                  | Program output: 100                
Correct output: 13                  | Program output: 89                 
Correct output: 21                  | Program output: 51                 
Correct output: 19                  | Program output: 79                 
Correct output: 2                   | Program output: 2                  
Correct output: 2                   | Program output: 2                  
Correct output: 1                   | Program output: 3                  
Correct output: 1                   | Program output: 84                 
Correct output: 36                  | Program output: 62                 
Correct output: 8                   | Program output: 84                 
Correct output: 41                  | Program output: 62                 
Correct output: 18                  | Program output: 18                 
Correct output: -25                 | Program output: 45                 
Correct output: -25                 | Program output: 41                 
Correct output: -31                 | Program output: 26                 
Correct output: -35                 | Program output: -35                
Correct output: -49                 | Program output: -49                
Correct output: -85                 | Program output: -24                
Correct output: -24                 | Program output: -24                
Correct output: -93                 | Program output: -93                
Correct output: -81                 | Program output: 44                 
Correct output: -56                 | Program output: 100                
Correct output: -57                 | Program output: 66                 
Correct output: -97                 | Program output: -83                
Correct output: -58                 | Program output: 92                 
Correct output: -66                 | Program output: 3                  
Correct output: -20                 | Program output: 63                 
Correct output: -91                 | Program output: 44                 
Correct output: -80                 | Program output: -80                
Correct output: -83                 | Program output: 92                 
Correct output: -42                 | Program output: 57                 
Correct output: 33                  | Program output: 33                 
Correct output: -65                 | Program output: 69                 
Correct output: -79                 | Program output: 81                 
Correct output: -86                 | Program output: -24                
Correct output: 2                   | Program output: 2                  
Correct output: -13                 | Program output: 18                 
Correct output: -90                 | Program output: -73                
Correct output: -87                 | Program output: -78                
Correct output: -51                 | Program output: 10                 
Correct output: -64                 | Program output: 67                 
Correct output: -90                 | Program output: -53                
Correct output: -34                 | Program output: -34                
Correct output: -57                 | Program output: 67                 
Correct output: -76                 | Program output: -76                
Correct output: -86                 | Program output: -86                
Correct output: 1                   | Program output: 25                 
Correct output: -98                 | Program output: -98                
Correct output: -47                 | Program output: -47                
Correct output: -34                 | Program output: -34                
Correct output: -80                 | Program output: 27                 
Correct output: -34                 | Program output: -34                
Correct output: -15                 | Program output: 36                 
Correct output: -46                 | Program output: 95                 
Correct output: 17                  | Program output: 17                 
Correct output: -78                 | Program output: 0                  
Correct output: -92                 | Program output: -92                
Correct output: -92                 | Program output: -29                
Correct output: -68                 | Program output: -68                
Correct output: -98                 | Program output: -76                
Correct output: -77                 | Program output: 64                 
Correct output: -21                 | Program output: 57                 
Correct output: -81                 | Program output: -81                
Correct output: -86                 | Program output: -35                
Correct output: -56                 | Program output: 85                 
Correct output: -12                 | Program output: 19                 
Correct output: -75                 | Program output: 60                 
Correct output: -68                 | Program output: -68                
Correct output: -97                 | Program output: 47                 
Correct output: -71                 | Program output: -17                
Correct output: -36                 | Program output: 89                 
Correct output: -8                  | Program output: 97                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in1} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_k_when_autoconstructing} {:close 3, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_newline} {:close 1, :instruction exec_shove} {:close 0, :instruction in1} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction print_exec} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction 0} {:close 0, :instruction in4} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_div})
Lexicase best program: (in1 in2 print_integer print_boolean boolean_yankdup integer_sub integer_sub boolean_or exec_flush exec_pop () boolean_frominteger integer_pop print_integer integer_add boolean_eq exec_empty integer_sub integer_mod exec_s (boolean_invert_second_then_and boolean_or integer_mult boolean_invert_second_then_and integer_lte) (exec_k_when_autoconstructing (integer_lte) ()) (exec_when (boolean_stackdepth print_newline exec_shove () in1 boolean_yank) integer_flush integer_empty integer_gte) boolean_pop exec_stackdepth print_exec () boolean_and exec_flush boolean_or integer_swap integer_mult integer_inc integer_inc exec_do*range () boolean_stackdepth integer_fromboolean 0 in4 exec_do*while (exec_y_when_autoconstructing (integer_div)))
Lexicase best errors: [1 0 1 0 1 1 1 0 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 66
Percent parens: 0.197
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in1} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_k_when_autoconstructing} {:close 3, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_newline} {:close 1, :instruction exec_shove} {:close 0, :instruction in1} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction print_exec} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_inc} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction 0} {:close 0, :instruction in4} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_div})
Zero cases best program: (in1 in2 print_integer print_boolean boolean_yankdup integer_sub integer_sub boolean_or exec_flush exec_pop () boolean_frominteger integer_pop print_integer integer_add boolean_eq exec_empty integer_sub integer_mod exec_s (boolean_invert_second_then_and boolean_or integer_mult boolean_invert_second_then_and integer_lte) (exec_k_when_autoconstructing (integer_lte) ()) (exec_when (boolean_stackdepth print_newline exec_shove () in1 boolean_yank) integer_flush integer_empty integer_gte) boolean_pop exec_stackdepth print_exec () boolean_and exec_flush boolean_or integer_swap integer_mult integer_inc integer_inc exec_do*range () boolean_stackdepth integer_fromboolean 0 in4 exec_do*while (exec_y_when_autoconstructing (integer_div)))
Zero cases best errors: [1 0 1 0 1 1 1 0 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 66
Percent parens: 0.197
--- Lexicase Population Statistics ---
Count of elite individuals by case: (10 4 2 4 1 2 2 4 4 9)
Population mean number of elite cases: 0.04
Count of perfect (error zero) individuals by case: (10 4 2 4 1 2 2 4 4 9)
Population mean number of perfect (error zero) cases: 0.04
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction in2} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_div} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_while} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 2, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k} {:close 1, :instruction print_boolean} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction tagged_265} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gt})
Best program: (in2 boolean_rot print_integer integer_shove integer_div integer_fromboolean exec_while (integer_shove integer_stackdepth integer_dec exec_swap (boolean_invert_second_then_and integer_min) () boolean_dup boolean_dup boolean_invert_second_then_and integer_rot integer_yankdup integer_sub) exec_do*count (exec_k (print_boolean) (integer_yank) boolean_flush boolean_stackdepth tagged_265) boolean_rot integer_shove exec_do*while (integer_gt))
Errors: [1 0 1 0 1 1 1 0 0 0]
Total: 5
Mean: 0.5
Genome size: 30
Size: 38
Percent parens: 0.211
--- Population Statistics ---
Average total errors in population: 9.958
Median total errors in population: 10
Error averages by case: (0.99 0.996 0.998 0.996 0.999 0.998 0.998 0.996 0.996 0.991)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.15
Average program size in population (points): 68.715
Average percent parens in population: 0.277
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.28
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 497410
--- Timings ---
Current time: 1559314339098 milliseconds
Total Time:           2.3 seconds
Initialization:       0.1 seconds,  4.9%
Reproduction:         0.8 seconds, 33.9%
Fitness Testing:      1.4 seconds, 61.1%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 650
Test mean error for best: 0.65000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 48                  | Program output: 48                 
Correct output: -33                 | Program output: 30                 
Correct output: 32                  | Program output: 32                 
Correct output: 24                  | Program output: 89                 
Correct output: -79                 | Program output: -20                
Correct output: -83                 | Program output: -83                
Correct output: -54                 | Program output: -54                
Correct output: -20                 | Program output: -1                 
Correct output: -79                 | Program output: 99                 
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -66                
Correct output: 64                  | Program output: 64                 
Correct output: -21                 | Program output: -21                
Correct output: 13                  | Program output: 13                 
Correct output: 35                  | Program output: 35                 
Correct output: 0                   | Program output: 92                 
Correct output: 3                   | Program output: 29                 
Correct output: 10                  | Program output: 14                 
Correct output: 21                  | Program output: 82                 
Correct output: 43                  | Program output: 76                 
Correct output: 20                  | Program output: 20                 
Correct output: 5                   | Program output: 98                 
Correct output: 6                   | Program output: 62                 
Correct output: 30                  | Program output: 100                
Correct output: 13                  | Program output: 89                 
Correct output: 21                  | Program output: 51                 
Correct output: 19                  | Program output: 79                 
Correct output: 2                   | Program output: 2                  
Correct output: 2                   | Program output: 2                  
Correct output: 1                   | Program output: 3                  
Correct output: 1                   | Program output: 84                 
Correct output: 36                  | Program output: 62                 
Correct output: 8                   | Program output: 84                 
Correct output: 41                  | Program output: 62                 
Correct output: 18                  | Program output: 18                 
Correct output: -25                 | Program output: 45                 
Correct output: -25                 | Program output: 41                 
Correct output: -31                 | Program output: 26                 
Correct output: -35                 | Program output: -35                
Correct output: -49                 | Program output: -49                
Correct output: -85                 | Program output: -24                
Correct output: -24                 | Program output: -24                
Correct output: -93                 | Program output: -93                
Correct output: -81                 | Program output: 44                 
Correct output: -56                 | Program output: 100                
Correct output: -57                 | Program output: 66                 
Correct output: -97                 | Program output: -83                
Correct output: -58                 | Program output: 92                 
Correct output: -66                 | Program output: 3                  
Correct output: -20                 | Program output: 63                 
Correct output: -91                 | Program output: 44                 
Correct output: -80                 | Program output: -80                
Correct output: -83                 | Program output: 92                 
Correct output: -42                 | Program output: 57                 
Correct output: 33                  | Program output: 33                 
Correct output: -65                 | Program output: 69                 
Correct output: -79                 | Program output: 81                 
Correct output: -86                 | Program output: -24                
Correct output: 2                   | Program output: 2                  
Correct output: -13                 | Program output: 18                 
Correct output: -90                 | Program output: -73                
Correct output: -87                 | Program output: -78                
Correct output: -51                 | Program output: 10                 
Correct output: -64                 | Program output: 67                 
Correct output: -90                 | Program output: -53                
Correct output: -34                 | Program output: -34                
Correct output: -57                 | Program output: 67                 
Correct output: -76                 | Program output: -76                
Correct output: -86                 | Program output: -86                
Correct output: 1                   | Program output: 25                 
Correct output: -98                 | Program output: -98                
Correct output: -47                 | Program output: -47                
Correct output: -34                 | Program output: -34                
Correct output: -80                 | Program output: 27                 
Correct output: -34                 | Program output: -34                
Correct output: -15                 | Program output: 36                 
Correct output: -46                 | Program output: 95                 
Correct output: 17                  | Program output: 17                 
Correct output: -78                 | Program output: 0                  
Correct output: -92                 | Program output: -92                
Correct output: -92                 | Program output: -29                
Correct output: -68                 | Program output: -68                
Correct output: -98                 | Program output: -76                
Correct output: -77                 | Program output: 64                 
Correct output: -21                 | Program output: 57                 
Correct output: -81                 | Program output: -81                
Correct output: -86                 | Program output: -35                
Correct output: -56                 | Program output: 85                 
Correct output: -12                 | Program output: 19                 
Correct output: -75                 | Program output: 60                 
Correct output: -68                 | Program output: -68                
Correct output: -97                 | Program output: 47                 
Correct output: -71                 | Program output: -17                
Correct output: -36                 | Program output: 89                 
Correct output: -8                  | Program output: 97                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 2, :instruction in2} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_div} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_while} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 2, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup} {:close 1, :instruction print_boolean} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction tagged_265} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gt})
Lexicase best program: (in2 boolean_rot print_integer integer_shove integer_div integer_fromboolean exec_while (integer_shove integer_stackdepth integer_dec exec_swap (boolean_invert_second_then_and integer_min) () boolean_dup boolean_dup boolean_invert_second_then_and integer_rot integer_yankdup integer_sub) exec_do*count (boolean_dup print_boolean) integer_yank boolean_flush boolean_stackdepth tagged_265 boolean_rot integer_shove exec_do*while (integer_gt))
Lexicase best errors: [1 1 1 1 1 1 0 1 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 8
Lexicase best mean error: 0.8
Lexicase best size: 36
Percent parens: 0.167
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 2, :instruction in2} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_div} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_while} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 2, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup} {:close 1, :instruction print_boolean} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction tagged_265} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gt})
Zero cases best program: (in2 boolean_rot print_integer integer_shove integer_div integer_fromboolean exec_while (integer_shove integer_stackdepth integer_dec exec_swap (boolean_invert_second_then_and integer_min) () boolean_dup boolean_dup boolean_invert_second_then_and integer_rot integer_yankdup integer_sub) exec_do*count (boolean_dup print_boolean) integer_yank boolean_flush boolean_stackdepth tagged_265 boolean_rot integer_shove exec_do*while (integer_gt))
Zero cases best errors: [1 1 1 1 1 1 0 1 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 2
Zero cases best total error: 8
Zero cases best mean error: 0.8
Zero cases best size: 36
Percent parens: 0.167
--- Lexicase Population Statistics ---
Count of elite individuals by case: (98 434 1000 1000 99 434 382 1000 1000 380)
Population mean number of elite cases: 5.83
Count of perfect (error zero) individuals by case: (98 434 0 0 99 434 382 0 0 380)
Population mean number of perfect (error zero) cases: 1.83
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction tag_integer_57} {:close 0, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction tag_boolean_640} {:close 0, :instruction exec_while} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_not} {:close 1, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_eq} {:close 0, :instruction print_newline} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_k} {:close 0, :instruction tag_exec_646} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_yankdup})
Best program: (exec_dup_times (integer_dup_items tag_integer_57 boolean_or print_boolean tag_boolean_640 exec_while (in1 boolean_flush boolean_yankdup exec_when () boolean_not in1) integer_yankdup exec_stackdepth boolean_invert_second_then_and boolean_frominteger exec_yankdup exec_do*range (exec_eq) print_newline integer_shove integer_lte integer_stackdepth exec_s_when_autoconstructing (integer_yank boolean_eq) (in2 print_integer exec_stackdepth integer_rot) (integer_lte boolean_yank integer_inc exec_k () (tag_exec_646 (boolean_empty integer_lte boolean_yankdup)))))
Errors: [1 1 1 1 1 1 0 1 1 0]
Total: 8
Mean: 0.8
Genome size: 39
Size: 50
Percent parens: 0.220
--- Population Statistics ---
Average total errors in population: 8.173
Median total errors in population: 8
Error averages by case: (0.902 0.566 1.0 1.0 0.901 0.566 0.618 1.0 1.0 0.62)
Error minima by case: (0 0 1 1 0 0 0 1 1 0)
Average genome size in population (length): 38.632
Average program size in population (points): 52.343
Average percent parens in population: 0.251
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.491
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 148
Genome diversity (% unique genomes):	 0.448
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 150
Syntactic diversity (% unique Push programs):	 0.434
Total error diversity:				 0.003
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.039
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 709705
--- Timings ---
Current time: 1559314341356 milliseconds
Total Time:           4.6 seconds
Initialization:       0.1 seconds,  2.5%
Reproduction:         2.5 seconds, 53.8%
Fitness Testing:      1.7 seconds, 36.1%
Report:               0.4 seconds,  7.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 48                  | Program output: 98                 
Correct output: -33                 | Program output: 30                 
Correct output: 32                  | Program output: 65                 
Correct output: 24                  | Program output: 89                 
Correct output: -79                 | Program output: -20                
Correct output: -83                 | Program output: 36                 
Correct output: -54                 | Program output: -54                
Correct output: -20                 | Program output: -20                
Correct output: -79                 | Program output: 99                 
Correct output: -85                 | Program output: -54                
Correct output: -66                 | Program output: -66                
Correct output: 64                  | Program output: 64                 
Correct output: -21                 | Program output: -21                
Correct output: 13                  | Program output: 13                 
Correct output: 35                  | Program output: 35                 
Correct output: 0                   | Program output: 0                  
Correct output: 3                   | Program output: 89                 
Correct output: 10                  | Program output: 10                 
Correct output: 21                  | Program output: 21                 
Correct output: 43                  | Program output: 43                 
Correct output: 20                  | Program output: 66                 
Correct output: 5                   | Program output: 95                 
Correct output: 6                   | Program output: 50                 
Correct output: 30                  | Program output: 30                 
Correct output: 13                  | Program output: 85                 
Correct output: 21                  | Program output: 21                 
Correct output: 19                  | Program output: 99                 
Correct output: 2                   | Program output: 8                  
Correct output: 2                   | Program output: 29                 
Correct output: 1                   | Program output: 39                 
Correct output: 1                   | Program output: 84                 
Correct output: 36                  | Program output: 45                 
Correct output: 8                   | Program output: 8                  
Correct output: 41                  | Program output: 41                 
Correct output: 18                  | Program output: 48                 
Correct output: -25                 | Program output: -25                
Correct output: -25                 | Program output: 42                 
Correct output: -31                 | Program output: 76                 
Correct output: -35                 | Program output: 48                 
Correct output: -49                 | Program output: 59                 
Correct output: -85                 | Program output: 96                 
Correct output: -24                 | Program output: -7                 
Correct output: -93                 | Program output: 37                 
Correct output: -81                 | Program output: -81                
Correct output: -56                 | Program output: -11                
Correct output: -57                 | Program output: -57                
Correct output: -97                 | Program output: 71                 
Correct output: -58                 | Program output: -58                
Correct output: -66                 | Program output: 64                 
Correct output: -20                 | Program output: 97                 
Correct output: -91                 | Program output: 39                 
Correct output: -80                 | Program output: -6                 
Correct output: -83                 | Program output: 27                 
Correct output: -42                 | Program output: 67                 
Correct output: 33                  | Program output: 60                 
Correct output: -65                 | Program output: 74                 
Correct output: -79                 | Program output: 64                 
Correct output: -86                 | Program output: -86                
Correct output: 2                   | Program output: 21                 
Correct output: -13                 | Program output: 32                 
Correct output: -90                 | Program output: -42                
Correct output: -87                 | Program output: 55                 
Correct output: -51                 | Program output: -8                 
Correct output: -64                 | Program output: -40                
Correct output: -90                 | Program output: -90                
Correct output: -34                 | Program output: 54                 
Correct output: -57                 | Program output: 99                 
Correct output: -76                 | Program output: 46                 
Correct output: -86                 | Program output: 54                 
Correct output: 1                   | Program output: 1                  
Correct output: -98                 | Program output: 67                 
Correct output: -47                 | Program output: -14                
Correct output: -34                 | Program output: 80                 
Correct output: -80                 | Program output: 28                 
Correct output: -34                 | Program output: 16                 
Correct output: -15                 | Program output: -15                
Correct output: -46                 | Program output: -46                
Correct output: 17                  | Program output: 56                 
Correct output: -78                 | Program output: 20                 
Correct output: -92                 | Program output: 29                 
Correct output: -92                 | Program output: -92                
Correct output: -68                 | Program output: 2                  
Correct output: -98                 | Program output: 35                 
Correct output: -77                 | Program output: 3                  
Correct output: -21                 | Program output: 53                 
Correct output: -81                 | Program output: -76                
Correct output: -86                 | Program output: -37                
Correct output: -56                 | Program output: 84                 
Correct output: -12                 | Program output: -12                
Correct output: -75                 | Program output: -75                
Correct output: -68                 | Program output: 46                 
Correct output: -97                 | Program output: 16                 
Correct output: -71                 | Program output: -71                
Correct output: -36                 | Program output: -36                
Correct output: -8                  | Program output: 53                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_flush} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_while} {:close 0, :instruction print_newline} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*count})
Lexicase best program: (boolean_eq boolean_shove in1 print_integer integer_swap boolean_eq exec_s (integer_sub) (integer_swap exec_rot (exec_dup_items integer_mult exec_eq integer_flush) (print_integer) (integer_dup_times integer_mod boolean_or) exec_yankdup exec_noop exec_while (print_newline exec_shove (exec_do*count ()))) ())
Lexicase best errors: [1 1 1 1 1 0 1 1 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 8
Lexicase best mean error: 0.8
Lexicase best size: 34
Percent parens: 0.294
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_flush} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_while} {:close 0, :instruction print_newline} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*count})
Zero cases best program: (boolean_eq boolean_shove in1 print_integer integer_swap boolean_eq exec_s (integer_sub) (integer_swap exec_rot (exec_dup_items integer_mult exec_eq integer_flush) (print_integer) (integer_dup_times integer_mod boolean_or) exec_yankdup exec_noop exec_while (print_newline exec_shove (exec_do*count ()))) ())
Zero cases best errors: [1 1 1 1 1 0 1 1 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 2
Zero cases best total error: 8
Zero cases best mean error: 0.8
Zero cases best size: 34
Percent parens: 0.294
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 1000 313 296 1000 308 1000 1000 296 309)
Population mean number of elite cases: 6.52
Count of perfect (error zero) individuals by case: (0 0 313 296 0 308 0 0 296 309)
Population mean number of perfect (error zero) cases: 1.52
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_flush} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_while} {:close 0, :instruction print_newline} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*count})
Best program: (boolean_eq boolean_shove in1 print_integer integer_swap boolean_eq exec_s (integer_sub) (integer_swap exec_rot (exec_dup_items integer_mult exec_eq integer_flush) (print_integer) (integer_dup_times integer_mod boolean_or) exec_yankdup exec_noop exec_while (print_newline exec_shove (exec_do*count ()))) ())
Errors: [1 1 1 1 1 0 1 1 1 0]
Total: 8
Mean: 0.8
Genome size: 24
Size: 34
Percent parens: 0.294
--- Population Statistics ---
Average total errors in population: 8.478
Median total errors in population: 8
Error averages by case: (1.0 1.0 0.687 0.704 1.0 0.692 1.0 1.0 0.704 0.691)
Error minima by case: (1 1 0 0 1 0 1 1 0 0)
Average genome size in population (length): 35.886
Average program size in population (points): 46.451
Average percent parens in population: 0.209
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 2.968
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 150
Genome diversity (% unique genomes):	 0.56
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 172
Syntactic diversity (% unique Push programs):	 0.54
Total error diversity:				 0.003
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.039
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 941043
--- Timings ---
Current time: 1559314344120 milliseconds
Total Time:           7.4 seconds
Initialization:       0.1 seconds,  1.5%
Reproduction:         4.8 seconds, 64.1%
Fitness Testing:      1.9 seconds, 25.5%
Report:               0.7 seconds,  8.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 665
Test mean error for best: 0.66500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 48                  | Program output: 48                 
Correct output: -33                 | Program output: -33                
Correct output: 32                  | Program output: 65                 
Correct output: 24                  | Program output: 89                 
Correct output: -79                 | Program output: -20                
Correct output: -83                 | Program output: -83                
Correct output: -54                 | Program output: -54                
Correct output: -20                 | Program output: -1                 
Correct output: -79                 | Program output: 99                 
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -66                
Correct output: 64                  | Program output: 64                 
Correct output: -21                 | Program output: -21                
Correct output: 13                  | Program output: 13                 
Correct output: 35                  | Program output: 35                 
Correct output: 0                   | Program output: 85                 
Correct output: 3                   | Program output: 27                 
Correct output: 10                  | Program output: 70                 
Correct output: 21                  | Program output: 41                 
Correct output: 43                  | Program output: 50                 
Correct output: 20                  | Program output: 98                 
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 85                 
Correct output: 30                  | Program output: 79                 
Correct output: 13                  | Program output: 41                 
Correct output: 21                  | Program output: 53                 
Correct output: 19                  | Program output: 19                 
Correct output: 2                   | Program output: 40                 
Correct output: 2                   | Program output: 20                 
Correct output: 1                   | Program output: 87                 
Correct output: 1                   | Program output: 96                 
Correct output: 36                  | Program output: 45                 
Correct output: 8                   | Program output: 10                 
Correct output: 41                  | Program output: 94                 
Correct output: 18                  | Program output: 35                 
Correct output: -25                 | Program output: 65                 
Correct output: -25                 | Program output: -25                
Correct output: -31                 | Program output: 44                 
Correct output: -35                 | Program output: 30                 
Correct output: -49                 | Program output: 35                 
Correct output: -85                 | Program output: -18                
Correct output: -24                 | Program output: -12                
Correct output: -93                 | Program output: -79                
Correct output: -81                 | Program output: 24                 
Correct output: -56                 | Program output: -56                
Correct output: -57                 | Program output: -55                
Correct output: -97                 | Program output: -37                
Correct output: -58                 | Program output: 27                 
Correct output: -66                 | Program output: -15                
Correct output: -20                 | Program output: -13                
Correct output: -91                 | Program output: -16                
Correct output: -80                 | Program output: 26                 
Correct output: -83                 | Program output: -60                
Correct output: -42                 | Program output: 4                  
Correct output: 33                  | Program output: 38                 
Correct output: -65                 | Program output: -56                
Correct output: -79                 | Program output: -72                
Correct output: -86                 | Program output: 97                 
Correct output: 2                   | Program output: 61                 
Correct output: -13                 | Program output: 33                 
Correct output: -90                 | Program output: -90                
Correct output: -87                 | Program output: -87                
Correct output: -51                 | Program output: -51                
Correct output: -64                 | Program output: -64                
Correct output: -90                 | Program output: 38                 
Correct output: -34                 | Program output: 59                 
Correct output: -57                 | Program output: -57                
Correct output: -76                 | Program output: 50                 
Correct output: -86                 | Program output: 74                 
Correct output: 1                   | Program output: 80                 
Correct output: -98                 | Program output: -4                 
Correct output: -47                 | Program output: 44                 
Correct output: -34                 | Program output: 85                 
Correct output: -80                 | Program output: -27                
Correct output: -34                 | Program output: -31                
Correct output: -15                 | Program output: 87                 
Correct output: -46                 | Program output: 86                 
Correct output: 17                  | Program output: 88                 
Correct output: -78                 | Program output: -78                
Correct output: -92                 | Program output: -25                
Correct output: -92                 | Program output: -23                
Correct output: -68                 | Program output: 60                 
Correct output: -98                 | Program output: -32                
Correct output: -77                 | Program output: -77                
Correct output: -21                 | Program output: 82                 
Correct output: -81                 | Program output: 3                  
Correct output: -86                 | Program output: 11                 
Correct output: -56                 | Program output: -56                
Correct output: -12                 | Program output: 81                 
Correct output: -75                 | Program output: -65                
Correct output: -68                 | Program output: -62                
Correct output: -97                 | Program output: -97                
Correct output: -71                 | Program output: -44                
Correct output: -36                 | Program output: -10                
Correct output: -8                  | Program output: 55                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_not} {:close 1, :instruction -100} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction in3} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_rot} {:close 0, :instruction tagged_853} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction tag_integer_53} {:close 0, :instruction boolean_swap})
Lexicase best program: (boolean_not -100 integer_add boolean_xor integer_dup_items boolean_eq integer_stackdepth boolean_rot integer_swap in3 boolean_swap boolean_dup boolean_eq print_integer exec_noop integer_eq boolean_invert_second_then_and in2 integer_yankdup exec_dup_items integer_dec integer_dec integer_dup boolean_rot integer_dec integer_dec integer_dup boolean_rot tagged_853 integer_swap integer_stackdepth exec_flush boolean_eq tag_integer_53 boolean_swap)
Lexicase best errors: [0 0 1 0 1 1 1 1 1 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 36
Percent parens: 0.028
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_not} {:close 1, :instruction -100} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction in3} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_rot} {:close 0, :instruction tagged_853} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction tag_integer_53} {:close 0, :instruction boolean_swap})
Zero cases best program: (boolean_not -100 integer_add boolean_xor integer_dup_items boolean_eq integer_stackdepth boolean_rot integer_swap in3 boolean_swap boolean_dup boolean_eq print_integer exec_noop integer_eq boolean_invert_second_then_and in2 integer_yankdup exec_dup_items integer_dec integer_dec integer_dup boolean_rot integer_dec integer_dec integer_dup boolean_rot tagged_853 integer_swap integer_stackdepth exec_flush boolean_eq tag_integer_53 boolean_swap)
Zero cases best errors: [0 0 1 0 1 1 1 1 1 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 36
Percent parens: 0.028
--- Lexicase Population Statistics ---
Count of elite individuals by case: (179 181 391 179 351 2 387 2 351 179)
Population mean number of elite cases: 2.20
Count of perfect (error zero) individuals by case: (179 181 391 179 351 2 387 2 351 179)
Population mean number of perfect (error zero) cases: 2.20
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_not} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction in3} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_rot} {:close 0, :instruction tagged_853} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction tag_integer_53} {:close 0, :instruction boolean_swap})
Best program: (boolean_not integer_lte integer_add boolean_xor integer_dup_items boolean_eq integer_stackdepth boolean_rot integer_swap in3 boolean_swap boolean_dup boolean_eq print_integer exec_noop integer_eq boolean_invert_second_then_and in2 exec_k_when_autoconstructing (exec_dup_items integer_dec integer_dec) (integer_dup boolean_rot) tagged_853 integer_swap integer_stackdepth exec_flush boolean_eq tag_integer_53 boolean_swap)
Errors: [0 0 1 0 1 1 1 1 1 0]
Total: 6
Mean: 0.6
Genome size: 31
Size: 34
Percent parens: 0.088
--- Population Statistics ---
Average total errors in population: 7.798
Median total errors in population: 8
Error averages by case: (0.821 0.819 0.609 0.821 0.649 0.998 0.613 0.998 0.649 0.821)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.583
Average program size in population (points): 48.748
Average percent parens in population: 0.235
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.47125
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 75
Genome diversity (% unique genomes):	 0.671
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 75
Syntactic diversity (% unique Push programs):	 0.651
Total error diversity:				 0.004
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.041
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 1157408
--- Timings ---
Current time: 1559314346815 milliseconds
Total Time:          10.1 seconds
Initialization:       0.1 seconds,  1.1%
Reproduction:         7.0 seconds, 68.9%
Fitness Testing:      2.1 seconds, 21.0%
Report:               0.9 seconds,  9.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 648
Test mean error for best: 0.64800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 48                  | Program output: 48                 
Correct output: -33                 | Program output: 30                 
Correct output: 32                  | Program output: 65                 
Correct output: 24                  | Program output: 24                 
Correct output: -79                 | Program output: -79                
Correct output: -83                 | Program output: -83                
Correct output: -54                 | Program output: 74                 
Correct output: -20                 | Program output: -1                 
Correct output: -79                 | Program output: -79                
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -66                
Correct output: 64                  | Program output: 64                 
Correct output: -21                 | Program output: -21                
Correct output: 13                  | Program output: 13                 
Correct output: 35                  | Program output: 35                 
Correct output: 0                   | Program output: 91                 
Correct output: 3                   | Program output: 3                  
Correct output: 10                  | Program output: 79                 
Correct output: 21                  | Program output: 72                 
Correct output: 43                  | Program output: 93                 
Correct output: 20                  | Program output: 40                 
Correct output: 5                   | Program output: 11                 
Correct output: 6                   | Program output: 6                  
Correct output: 30                  | Program output: 36                 
Correct output: 13                  | Program output: 13                 
Correct output: 21                  | Program output: 72                 
Correct output: 19                  | Program output: 39                 
Correct output: 2                   | Program output: 100                
Correct output: 2                   | Program output: 75                 
Correct output: 1                   | Program output: 1                  
Correct output: 1                   | Program output: 1                  
Correct output: 36                  | Program output: 36                 
Correct output: 8                   | Program output: 73                 
Correct output: 41                  | Program output: 45                 
Correct output: 18                  | Program output: 83                 
Correct output: -25                 | Program output: 1                  
Correct output: -25                 | Program output: 0                  
Correct output: -31                 | Program output: -31                
Correct output: -35                 | Program output: 73                 
Correct output: -49                 | Program output: 5                  
Correct output: -85                 | Program output: -85                
Correct output: -24                 | Program output: 39                 
Correct output: -93                 | Program output: -28                
Correct output: -81                 | Program output: 74                 
Correct output: -56                 | Program output: 38                 
Correct output: -57                 | Program output: 64                 
Correct output: -97                 | Program output: -97                
Correct output: -58                 | Program output: -43                
Correct output: -66                 | Program output: -66                
Correct output: -20                 | Program output: -20                
Correct output: -91                 | Program output: -91                
Correct output: -80                 | Program output: -58                
Correct output: -83                 | Program output: -83                
Correct output: -42                 | Program output: -42                
Correct output: 33                  | Program output: 93                 
Correct output: -65                 | Program output: -65                
Correct output: -79                 | Program output: -79                
Correct output: -86                 | Program output: -30                
Correct output: 2                   | Program output: 41                 
Correct output: -13                 | Program output: -13                
Correct output: -90                 | Program output: 1                  
Correct output: -87                 | Program output: -15                
Correct output: -51                 | Program output: 95                 
Correct output: -64                 | Program output: -55                
Correct output: -90                 | Program output: -75                
Correct output: -34                 | Program output: 34                 
Correct output: -57                 | Program output: 9                  
Correct output: -76                 | Program output: 75                 
Correct output: -86                 | Program output: -59                
Correct output: 1                   | Program output: 54                 
Correct output: -98                 | Program output: -86                
Correct output: -47                 | Program output: -39                
Correct output: -34                 | Program output: -11                
Correct output: -80                 | Program output: -80                
Correct output: -34                 | Program output: -10                
Correct output: -15                 | Program output: 77                 
Correct output: -46                 | Program output: -22                
Correct output: 17                  | Program output: 63                 
Correct output: -78                 | Program output: 98                 
Correct output: -92                 | Program output: 82                 
Correct output: -92                 | Program output: 91                 
Correct output: -68                 | Program output: 86                 
Correct output: -98                 | Program output: -98                
Correct output: -77                 | Program output: -24                
Correct output: -21                 | Program output: -21                
Correct output: -81                 | Program output: 69                 
Correct output: -86                 | Program output: -86                
Correct output: -56                 | Program output: -53                
Correct output: -12                 | Program output: 2                  
Correct output: -75                 | Program output: 2                  
Correct output: -68                 | Program output: 88                 
Correct output: -97                 | Program output: 99                 
Correct output: -71                 | Program output: -40                
Correct output: -36                 | Program output: -13                
Correct output: -8                  | Program output: -8                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_not} {:close 1, :instruction -100} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in4} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_div} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_while} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 2, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k} {:close 1, :instruction print_boolean} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction tagged_265} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gt})
Lexicase best program: (boolean_not -100 integer_lte boolean_xor integer_dup_items integer_add exec_stackdepth boolean_not in4 boolean_yankdup in4 boolean_rot print_integer integer_shove integer_div integer_fromboolean exec_while (integer_shove integer_stackdepth integer_dec exec_swap (boolean_invert_second_then_and integer_min) () boolean_dup boolean_dup boolean_invert_second_then_and integer_rot integer_yankdup integer_sub) exec_do*count (exec_k (print_boolean) (integer_yank) boolean_flush boolean_stackdepth tagged_265) boolean_rot integer_shove exec_do*while (integer_gt))
Lexicase best errors: [1 0 0 0 1 1 0 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 48
Percent parens: 0.167
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_not} {:close 1, :instruction -100} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in4} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_div} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_while} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 2, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k} {:close 1, :instruction print_boolean} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction tagged_265} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gt})
Zero cases best program: (boolean_not -100 integer_lte boolean_xor integer_dup_items integer_add exec_stackdepth boolean_not in4 boolean_yankdup in4 boolean_rot print_integer integer_shove integer_div integer_fromboolean exec_while (integer_shove integer_stackdepth integer_dec exec_swap (boolean_invert_second_then_and integer_min) () boolean_dup boolean_dup boolean_invert_second_then_and integer_rot integer_yankdup integer_sub) exec_do*count (exec_k (print_boolean) (integer_yank) boolean_flush boolean_stackdepth tagged_265) boolean_rot integer_shove exec_do*while (integer_gt))
Zero cases best errors: [1 0 0 0 1 1 0 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 48
Percent parens: 0.167
--- Lexicase Population Statistics ---
Count of elite individuals by case: (200 169 169 729 200 200 170 169 200 169)
Population mean number of elite cases: 2.38
Count of perfect (error zero) individuals by case: (200 169 169 729 200 200 170 169 200 169)
Population mean number of perfect (error zero) cases: 2.38
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in4} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_div} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_while} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 2, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k} {:close 1, :instruction print_boolean} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction tagged_265} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gt})
Best program: (integer_add exec_stackdepth boolean_not in4 boolean_yankdup in4 boolean_rot print_integer integer_shove integer_div integer_fromboolean exec_while (integer_shove integer_stackdepth integer_dec exec_swap (boolean_invert_second_then_and integer_min) () boolean_dup boolean_dup boolean_invert_second_then_and integer_rot integer_yankdup integer_sub) exec_do*count (exec_k (print_boolean) (integer_yank) boolean_flush boolean_stackdepth tagged_265) boolean_rot integer_shove exec_do*while (integer_gt))
Errors: [1 0 0 0 1 1 0 0 1 0]
Total: 4
Mean: 0.4
Genome size: 35
Size: 43
Percent parens: 0.186
--- Population Statistics ---
Average total errors in population: 7.625
Median total errors in population: 9
Error averages by case: (0.8 0.831 0.831 0.271 0.8 0.8 0.83 0.831 0.8 0.831)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 34.714
Average program size in population (points): 43.76
Average percent parens in population: 0.190
Minimum age in population: 4.0
Maximum age in population: 8.0
Average age in population: 5.999875
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 69
Genome diversity (% unique genomes):	 0.654
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 95
Syntactic diversity (% unique Push programs):	 0.625
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.047
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 1567062
--- Timings ---
Current time: 1559314349978 milliseconds
Total Time:          12.9 seconds
Initialization:       0.1 seconds,  0.9%
Reproduction:         9.2 seconds, 71.1%
Fitness Testing:      2.5 seconds, 19.0%
Report:               1.2 seconds,  9.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 650
Test mean error for best: 0.65000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 48                  | Program output: 48                 
Correct output: -33                 | Program output: 30                 
Correct output: 32                  | Program output: 32                 
Correct output: 24                  | Program output: 89                 
Correct output: -79                 | Program output: -20                
Correct output: -83                 | Program output: -83                
Correct output: -54                 | Program output: -54                
Correct output: -20                 | Program output: -1                 
Correct output: -79                 | Program output: 99                 
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -66                
Correct output: 64                  | Program output: 64                 
Correct output: -21                 | Program output: -21                
Correct output: 13                  | Program output: 13                 
Correct output: 35                  | Program output: 35                 
Correct output: 0                   | Program output: 92                 
Correct output: 3                   | Program output: 29                 
Correct output: 10                  | Program output: 14                 
Correct output: 21                  | Program output: 82                 
Correct output: 43                  | Program output: 76                 
Correct output: 20                  | Program output: 20                 
Correct output: 5                   | Program output: 98                 
Correct output: 6                   | Program output: 62                 
Correct output: 30                  | Program output: 100                
Correct output: 13                  | Program output: 89                 
Correct output: 21                  | Program output: 51                 
Correct output: 19                  | Program output: 79                 
Correct output: 2                   | Program output: 2                  
Correct output: 2                   | Program output: 2                  
Correct output: 1                   | Program output: 3                  
Correct output: 1                   | Program output: 84                 
Correct output: 36                  | Program output: 62                 
Correct output: 8                   | Program output: 84                 
Correct output: 41                  | Program output: 62                 
Correct output: 18                  | Program output: 18                 
Correct output: -25                 | Program output: 45                 
Correct output: -25                 | Program output: 41                 
Correct output: -31                 | Program output: 26                 
Correct output: -35                 | Program output: -35                
Correct output: -49                 | Program output: -49                
Correct output: -85                 | Program output: -24                
Correct output: -24                 | Program output: -24                
Correct output: -93                 | Program output: -93                
Correct output: -81                 | Program output: 44                 
Correct output: -56                 | Program output: 100                
Correct output: -57                 | Program output: 66                 
Correct output: -97                 | Program output: -83                
Correct output: -58                 | Program output: 92                 
Correct output: -66                 | Program output: 3                  
Correct output: -20                 | Program output: 63                 
Correct output: -91                 | Program output: 44                 
Correct output: -80                 | Program output: -80                
Correct output: -83                 | Program output: 92                 
Correct output: -42                 | Program output: 57                 
Correct output: 33                  | Program output: 33                 
Correct output: -65                 | Program output: 69                 
Correct output: -79                 | Program output: 81                 
Correct output: -86                 | Program output: -24                
Correct output: 2                   | Program output: 2                  
Correct output: -13                 | Program output: 18                 
Correct output: -90                 | Program output: -73                
Correct output: -87                 | Program output: -78                
Correct output: -51                 | Program output: 10                 
Correct output: -64                 | Program output: 67                 
Correct output: -90                 | Program output: -53                
Correct output: -34                 | Program output: -34                
Correct output: -57                 | Program output: 67                 
Correct output: -76                 | Program output: -76                
Correct output: -86                 | Program output: -86                
Correct output: 1                   | Program output: 25                 
Correct output: -98                 | Program output: -98                
Correct output: -47                 | Program output: -47                
Correct output: -34                 | Program output: -34                
Correct output: -80                 | Program output: 27                 
Correct output: -34                 | Program output: -34                
Correct output: -15                 | Program output: 36                 
Correct output: -46                 | Program output: 95                 
Correct output: 17                  | Program output: 17                 
Correct output: -78                 | Program output: 0                  
Correct output: -92                 | Program output: -92                
Correct output: -92                 | Program output: -29                
Correct output: -68                 | Program output: -68                
Correct output: -98                 | Program output: -76                
Correct output: -77                 | Program output: 64                 
Correct output: -21                 | Program output: 57                 
Correct output: -81                 | Program output: -81                
Correct output: -86                 | Program output: -35                
Correct output: -56                 | Program output: 85                 
Correct output: -12                 | Program output: 19                 
Correct output: -75                 | Program output: 60                 
Correct output: -68                 | Program output: -68                
Correct output: -97                 | Program output: 47                 
Correct output: -71                 | Program output: -17                
Correct output: -36                 | Program output: 89                 
Correct output: -8                  | Program output: 97                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_div} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 2, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k} {:close 1, :instruction print_boolean} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction tagged_265} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gt})
Lexicase best program: (integer_add exec_stackdepth boolean_not in4 print_integer integer_shove integer_div integer_fromboolean integer_inc integer_shove integer_stackdepth integer_dec exec_swap (boolean_invert_second_then_and integer_min) () boolean_dup boolean_dup boolean_invert_second_then_and integer_rot integer_yankdup integer_sub exec_do*count (exec_k (print_boolean) (integer_yank) boolean_flush boolean_stackdepth tagged_265) boolean_rot integer_flush exec_do*while (integer_gt))
Lexicase best errors: [0 1 1 1 0 1 1 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 39
Percent parens: 0.179
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_div} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 2, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k} {:close 1, :instruction print_boolean} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction tagged_265} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gt})
Zero cases best program: (integer_add exec_stackdepth boolean_not in4 print_integer integer_shove integer_div integer_fromboolean integer_inc integer_shove integer_stackdepth integer_dec exec_swap (boolean_invert_second_then_and integer_min) () boolean_dup boolean_dup boolean_invert_second_then_and integer_rot integer_yankdup integer_sub exec_do*count (exec_k (print_boolean) (integer_yank) boolean_flush boolean_stackdepth tagged_265) boolean_rot integer_flush exec_do*while (integer_gt))
Zero cases best errors: [0 1 1 1 0 1 1 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 39
Percent parens: 0.179
--- Lexicase Population Statistics ---
Count of elite individuals by case: (929 381 381 377 547 1 1 1000 546 546)
Population mean number of elite cases: 4.71
Count of perfect (error zero) individuals by case: (929 381 381 377 547 1 1 0 546 546)
Population mean number of perfect (error zero) cases: 3.71
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction in2} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_div} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_while} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 2, :instruction integer_min} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k} {:close 1, :instruction print_boolean} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction tagged_265} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gt})
Best program: (in2 boolean_rot print_integer integer_shove integer_div integer_fromboolean exec_while (integer_shove integer_stackdepth integer_dec exec_swap (boolean_invert_second_then_and integer_min) () boolean_frominteger exec_do*count (exec_k (print_boolean) (integer_yank) boolean_flush boolean_stackdepth tagged_265) boolean_rot integer_flush) exec_do*while (integer_gt))
Errors: [0 0 0 0 1 1 1 1 1 1]
Total: 6
Mean: 0.6
Genome size: 25
Size: 33
Percent parens: 0.242
--- Population Statistics ---
Average total errors in population: 6.291
Median total errors in population: 6
Error averages by case: (0.071 0.619 0.619 0.623 0.453 0.999 0.999 1.0 0.454 0.454)
Error minima by case: (0 0 0 0 0 0 0 1 0 0)
Average genome size in population (length): 35.863
Average program size in population (points): 45.056
Average percent parens in population: 0.200
Minimum age in population: 5.0
Maximum age in population: 9.4375
Average age in population: 7.5946875
Median age in population: 7.625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 94
Genome diversity (% unique genomes):	 0.621
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 97
Syntactic diversity (% unique Push programs):	 0.6
Total error diversity:				 0.004
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.032
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 2256344
--- Timings ---
Current time: 1559314352813 milliseconds
Total Time:          16.2 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:        11.4 seconds, 70.2%
Fitness Testing:      2.9 seconds, 18.1%
Report:               1.8 seconds, 11.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 648
Test mean error for best: 0.64800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 48                  | Program output: 48                 
Correct output: -33                 | Program output: 30                 
Correct output: 32                  | Program output: 65                 
Correct output: 24                  | Program output: 24                 
Correct output: -79                 | Program output: -79                
Correct output: -83                 | Program output: -83                
Correct output: -54                 | Program output: 74                 
Correct output: -20                 | Program output: -1                 
Correct output: -79                 | Program output: -79                
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -66                
Correct output: 64                  | Program output: 64                 
Correct output: -21                 | Program output: -21                
Correct output: 13                  | Program output: 13                 
Correct output: 35                  | Program output: 35                 
Correct output: 0                   | Program output: 91                 
Correct output: 3                   | Program output: 3                  
Correct output: 10                  | Program output: 79                 
Correct output: 21                  | Program output: 72                 
Correct output: 43                  | Program output: 93                 
Correct output: 20                  | Program output: 40                 
Correct output: 5                   | Program output: 11                 
Correct output: 6                   | Program output: 6                  
Correct output: 30                  | Program output: 36                 
Correct output: 13                  | Program output: 13                 
Correct output: 21                  | Program output: 72                 
Correct output: 19                  | Program output: 39                 
Correct output: 2                   | Program output: 100                
Correct output: 2                   | Program output: 75                 
Correct output: 1                   | Program output: 1                  
Correct output: 1                   | Program output: 1                  
Correct output: 36                  | Program output: 36                 
Correct output: 8                   | Program output: 73                 
Correct output: 41                  | Program output: 45                 
Correct output: 18                  | Program output: 83                 
Correct output: -25                 | Program output: 1                  
Correct output: -25                 | Program output: 0                  
Correct output: -31                 | Program output: -31                
Correct output: -35                 | Program output: 73                 
Correct output: -49                 | Program output: 5                  
Correct output: -85                 | Program output: -85                
Correct output: -24                 | Program output: 39                 
Correct output: -93                 | Program output: -28                
Correct output: -81                 | Program output: 74                 
Correct output: -56                 | Program output: 38                 
Correct output: -57                 | Program output: 64                 
Correct output: -97                 | Program output: -97                
Correct output: -58                 | Program output: -43                
Correct output: -66                 | Program output: -66                
Correct output: -20                 | Program output: -20                
Correct output: -91                 | Program output: -91                
Correct output: -80                 | Program output: -58                
Correct output: -83                 | Program output: -83                
Correct output: -42                 | Program output: -42                
Correct output: 33                  | Program output: 93                 
Correct output: -65                 | Program output: -65                
Correct output: -79                 | Program output: -79                
Correct output: -86                 | Program output: -30                
Correct output: 2                   | Program output: 41                 
Correct output: -13                 | Program output: -13                
Correct output: -90                 | Program output: 1                  
Correct output: -87                 | Program output: -15                
Correct output: -51                 | Program output: 95                 
Correct output: -64                 | Program output: -55                
Correct output: -90                 | Program output: -75                
Correct output: -34                 | Program output: 34                 
Correct output: -57                 | Program output: 9                  
Correct output: -76                 | Program output: 75                 
Correct output: -86                 | Program output: -59                
Correct output: 1                   | Program output: 54                 
Correct output: -98                 | Program output: -86                
Correct output: -47                 | Program output: -39                
Correct output: -34                 | Program output: -11                
Correct output: -80                 | Program output: -80                
Correct output: -34                 | Program output: -10                
Correct output: -15                 | Program output: 77                 
Correct output: -46                 | Program output: -22                
Correct output: 17                  | Program output: 63                 
Correct output: -78                 | Program output: 98                 
Correct output: -92                 | Program output: 82                 
Correct output: -92                 | Program output: 91                 
Correct output: -68                 | Program output: 86                 
Correct output: -98                 | Program output: -98                
Correct output: -77                 | Program output: -24                
Correct output: -21                 | Program output: -21                
Correct output: -81                 | Program output: 69                 
Correct output: -86                 | Program output: -86                
Correct output: -56                 | Program output: -53                
Correct output: -12                 | Program output: 2                  
Correct output: -75                 | Program output: 2                  
Correct output: -68                 | Program output: 88                 
Correct output: -97                 | Program output: 99                 
Correct output: -71                 | Program output: -40                
Correct output: -36                 | Program output: -13                
Correct output: -8                  | Program output: -8                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in1} {:close 1, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction tag_integer_446} {:close 0, :instruction tag_integer_53} {:close 0, :instruction boolean_swap})
Lexicase best program: (in1 boolean_and print_integer print_boolean boolean_yankdup boolean_frominteger integer_sub boolean_or exec_flush exec_pop () boolean_frominteger integer_pop print_integer integer_add boolean_eq exec_empty exec_s (integer_mod exec_s (boolean_invert_second_then_and boolean_or integer_mult boolean_invert_second_then_and exec_flush tag_integer_446 tag_integer_53 boolean_swap) () ()) () ())
Lexicase best errors: [0 1 0 1 0 0 0 1 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 35
Percent parens: 0.229
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in1} {:close 1, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction tag_integer_446} {:close 0, :instruction tag_integer_53} {:close 0, :instruction boolean_swap})
Zero cases best program: (in1 boolean_and print_integer print_boolean boolean_yankdup boolean_frominteger integer_sub boolean_or exec_flush exec_pop () boolean_frominteger integer_pop print_integer integer_add boolean_eq exec_empty exec_s (integer_mod exec_s (boolean_invert_second_then_and boolean_or integer_mult boolean_invert_second_then_and exec_flush tag_integer_446 tag_integer_53 boolean_swap) () ()) () ())
Zero cases best errors: [0 1 0 1 0 0 0 1 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 35
Percent parens: 0.229
--- Lexicase Population Statistics ---
Count of elite individuals by case: (922 334 252 336 922 252 253 336 334 335)
Population mean number of elite cases: 4.28
Count of perfect (error zero) individuals by case: (922 334 252 336 922 252 253 336 334 335)
Population mean number of perfect (error zero) cases: 4.28
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in4} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_div} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_while} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction print_integer} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 2, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 2, :instruction integer_min} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k} {:close 1, :instruction print_boolean} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction tagged_265} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction tagged_265} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gt})
Best program: (integer_add exec_stackdepth boolean_not in4 boolean_yankdup in4 boolean_rot print_integer integer_shove integer_div integer_fromboolean exec_while (integer_shove integer_stackdepth print_integer print_boolean) boolean_yankdup integer_sub integer_sub boolean_or exec_flush exec_pop () boolean_frominteger integer_dec exec_swap (boolean_invert_second_then_and integer_min) () boolean_invert_second_then_and integer_min boolean_stackdepth boolean_dup boolean_invert_second_then_and integer_rot integer_yankdup integer_sub exec_do*count (exec_k (print_boolean) (integer_yank) boolean_flush boolean_stackdepth tagged_265) boolean_rot boolean_flush boolean_stackdepth tagged_265 boolean_rot integer_shove exec_do*while (integer_gt))
Errors: [0 0 1 1 0 1 1 1 0 0]
Total: 5
Mean: 0.5
Genome size: 50
Size: 59
Percent parens: 0.153
--- Population Statistics ---
Average total errors in population: 5.724
Median total errors in population: 5
Error averages by case: (0.078 0.666 0.748 0.664 0.078 0.748 0.747 0.664 0.666 0.665)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 33.267
Average program size in population (points): 42.169
Average percent parens in population: 0.208
Minimum age in population: 6.0
Maximum age in population: 11.09375
Average age in population: 9.3498125
Median age in population: 9.53125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 171
Genome diversity (% unique genomes):	 0.647
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 183
Syntactic diversity (% unique Push programs):	 0.618
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.032
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 2679423
--- Timings ---
Current time: 1559314355145 milliseconds
Total Time:          18.5 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:        13.2 seconds, 71.3%
Fitness Testing:      3.3 seconds, 17.6%
Report:               1.9 seconds, 10.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 48                  | Program output: 98                 
Correct output: -33                 | Program output: 30                 
Correct output: 32                  | Program output: 65                 
Correct output: 24                  | Program output: 89                 
Correct output: -79                 | Program output: -20                
Correct output: -83                 | Program output: 36                 
Correct output: -54                 | Program output: -54                
Correct output: -20                 | Program output: -20                
Correct output: -79                 | Program output: 99                 
Correct output: -85                 | Program output: -54                
Correct output: -66                 | Program output: -66                
Correct output: 64                  | Program output: 64                 
Correct output: -21                 | Program output: -21                
Correct output: 13                  | Program output: 13                 
Correct output: 35                  | Program output: 35                 
Correct output: 0                   | Program output: 0                  
Correct output: 3                   | Program output: 89                 
Correct output: 10                  | Program output: 10                 
Correct output: 21                  | Program output: 21                 
Correct output: 43                  | Program output: 43                 
Correct output: 20                  | Program output: 66                 
Correct output: 5                   | Program output: 95                 
Correct output: 6                   | Program output: 50                 
Correct output: 30                  | Program output: 30                 
Correct output: 13                  | Program output: 85                 
Correct output: 21                  | Program output: 21                 
Correct output: 19                  | Program output: 99                 
Correct output: 2                   | Program output: 8                  
Correct output: 2                   | Program output: 29                 
Correct output: 1                   | Program output: 39                 
Correct output: 1                   | Program output: 84                 
Correct output: 36                  | Program output: 45                 
Correct output: 8                   | Program output: 8                  
Correct output: 41                  | Program output: 41                 
Correct output: 18                  | Program output: 48                 
Correct output: -25                 | Program output: -25                
Correct output: -25                 | Program output: 42                 
Correct output: -31                 | Program output: 76                 
Correct output: -35                 | Program output: 48                 
Correct output: -49                 | Program output: 59                 
Correct output: -85                 | Program output: 96                 
Correct output: -24                 | Program output: -7                 
Correct output: -93                 | Program output: 37                 
Correct output: -81                 | Program output: -81                
Correct output: -56                 | Program output: -11                
Correct output: -57                 | Program output: -57                
Correct output: -97                 | Program output: 71                 
Correct output: -58                 | Program output: -58                
Correct output: -66                 | Program output: 64                 
Correct output: -20                 | Program output: 97                 
Correct output: -91                 | Program output: 39                 
Correct output: -80                 | Program output: -6                 
Correct output: -83                 | Program output: 27                 
Correct output: -42                 | Program output: 67                 
Correct output: 33                  | Program output: 60                 
Correct output: -65                 | Program output: 74                 
Correct output: -79                 | Program output: 64                 
Correct output: -86                 | Program output: -86                
Correct output: 2                   | Program output: 21                 
Correct output: -13                 | Program output: 32                 
Correct output: -90                 | Program output: -42                
Correct output: -87                 | Program output: 55                 
Correct output: -51                 | Program output: -8                 
Correct output: -64                 | Program output: -40                
Correct output: -90                 | Program output: -90                
Correct output: -34                 | Program output: 54                 
Correct output: -57                 | Program output: 99                 
Correct output: -76                 | Program output: 46                 
Correct output: -86                 | Program output: 54                 
Correct output: 1                   | Program output: 1                  
Correct output: -98                 | Program output: 67                 
Correct output: -47                 | Program output: -14                
Correct output: -34                 | Program output: 80                 
Correct output: -80                 | Program output: 28                 
Correct output: -34                 | Program output: 16                 
Correct output: -15                 | Program output: -15                
Correct output: -46                 | Program output: -46                
Correct output: 17                  | Program output: 56                 
Correct output: -78                 | Program output: 20                 
Correct output: -92                 | Program output: 29                 
Correct output: -92                 | Program output: -92                
Correct output: -68                 | Program output: 2                  
Correct output: -98                 | Program output: 35                 
Correct output: -77                 | Program output: 3                  
Correct output: -21                 | Program output: 53                 
Correct output: -81                 | Program output: -76                
Correct output: -86                 | Program output: -37                
Correct output: -56                 | Program output: 84                 
Correct output: -12                 | Program output: -12                
Correct output: -75                 | Program output: -75                
Correct output: -68                 | Program output: 46                 
Correct output: -97                 | Program output: 16                 
Correct output: -71                 | Program output: -71                
Correct output: -36                 | Program output: -36                
Correct output: -8                  | Program output: 53                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_y} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_lte} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 1, :instruction exec_dup} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_swap} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_while})
Lexicase best program: (integer_add exec_stackdepth boolean_not in4 boolean_yankdup in4 integer_flush exec_y (integer_gte exec_eq) integer_mult integer_gte integer_lte in2 print_integer exec_dup () integer_flush integer_flush exec_y_when_autoconstructing (boolean_swap) integer_shove integer_swap exec_empty integer_yank exec_when (exec_k (exec_dup (boolean_flush exec_dup_times (integer_fromboolean integer_rot boolean_dup_items boolean_xor integer_mod) exec_while ())) ()))
Lexicase best errors: [1 0 0 1 1 0 1 1 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 45
Percent parens: 0.222
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_y} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_lte} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 1, :instruction exec_dup} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_swap} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_while})
Zero cases best program: (integer_add exec_stackdepth boolean_not in4 boolean_yankdup in4 integer_flush exec_y (integer_gte exec_eq) integer_mult integer_gte integer_lte in2 print_integer exec_dup () integer_flush integer_flush exec_y_when_autoconstructing (boolean_swap) integer_shove integer_swap exec_empty integer_yank exec_when (exec_k (exec_dup (boolean_flush exec_dup_times (integer_fromboolean integer_rot boolean_dup_items boolean_xor integer_mod) exec_while ())) ()))
Zero cases best errors: [1 0 0 1 1 0 1 1 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 45
Percent parens: 0.222
--- Lexicase Population Statistics ---
Count of elite individuals by case: (361 948 229 1000 355 232 1000 355 232 355)
Population mean number of elite cases: 5.07
Count of perfect (error zero) individuals by case: (361 948 229 0 355 232 0 355 232 355)
Population mean number of perfect (error zero) cases: 3.07
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in1} {:close 1, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s} {:close 0, :instruction print_exec} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction tag_integer_446} {:close 0, :instruction tag_integer_53} {:close 0, :instruction boolean_swap})
Best program: (in1 boolean_and print_integer print_boolean boolean_yankdup boolean_frominteger integer_sub boolean_or exec_flush exec_pop () boolean_frominteger integer_pop print_integer integer_add boolean_eq exec_empty exec_s (print_exec (exec_s (boolean_invert_second_then_and boolean_or integer_mult integer_swap exec_flush tag_integer_446 tag_integer_53 boolean_swap) () ())) () ())
Errors: [1 0 1 1 0 1 1 0 1 0]
Total: 6
Mean: 0.6
Genome size: 27
Size: 36
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 6.933
Median total errors in population: 6
Error averages by case: (0.639 0.052 0.771 1.0 0.645 0.768 1.0 0.645 0.768 0.645)
Error minima by case: (0 0 0 1 0 0 1 0 0 0)
Average genome size in population (length): 32.034
Average program size in population (points): 40.627
Average percent parens in population: 0.210
Minimum age in population: 8.375
Maximum age in population: 12.734375
Average age in population: 10.907609375
Median age in population: 10.96875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 162
Genome diversity (% unique genomes):	 0.66
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 185
Syntactic diversity (% unique Push programs):	 0.62
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.024
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 3079903
--- Timings ---
Current time: 1559314357682 milliseconds
Total Time:          21.1 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        15.3 seconds, 72.6%
Fitness Testing:      3.6 seconds, 16.8%
Report:               2.1 seconds, 10.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 650
Test mean error for best: 0.65000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 48                  | Program output: 48                 
Correct output: -33                 | Program output: 30                 
Correct output: 32                  | Program output: 32                 
Correct output: 24                  | Program output: 89                 
Correct output: -79                 | Program output: -20                
Correct output: -83                 | Program output: -83                
Correct output: -54                 | Program output: -54                
Correct output: -20                 | Program output: -1                 
Correct output: -79                 | Program output: 99                 
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -66                
Correct output: 64                  | Program output: 64                 
Correct output: -21                 | Program output: -21                
Correct output: 13                  | Program output: 13                 
Correct output: 35                  | Program output: 35                 
Correct output: 0                   | Program output: 92                 
Correct output: 3                   | Program output: 29                 
Correct output: 10                  | Program output: 14                 
Correct output: 21                  | Program output: 82                 
Correct output: 43                  | Program output: 76                 
Correct output: 20                  | Program output: 20                 
Correct output: 5                   | Program output: 98                 
Correct output: 6                   | Program output: 62                 
Correct output: 30                  | Program output: 100                
Correct output: 13                  | Program output: 89                 
Correct output: 21                  | Program output: 51                 
Correct output: 19                  | Program output: 79                 
Correct output: 2                   | Program output: 2                  
Correct output: 2                   | Program output: 2                  
Correct output: 1                   | Program output: 3                  
Correct output: 1                   | Program output: 84                 
Correct output: 36                  | Program output: 62                 
Correct output: 8                   | Program output: 84                 
Correct output: 41                  | Program output: 62                 
Correct output: 18                  | Program output: 18                 
Correct output: -25                 | Program output: 45                 
Correct output: -25                 | Program output: 41                 
Correct output: -31                 | Program output: 26                 
Correct output: -35                 | Program output: -35                
Correct output: -49                 | Program output: -49                
Correct output: -85                 | Program output: -24                
Correct output: -24                 | Program output: -24                
Correct output: -93                 | Program output: -93                
Correct output: -81                 | Program output: 44                 
Correct output: -56                 | Program output: 100                
Correct output: -57                 | Program output: 66                 
Correct output: -97                 | Program output: -83                
Correct output: -58                 | Program output: 92                 
Correct output: -66                 | Program output: 3                  
Correct output: -20                 | Program output: 63                 
Correct output: -91                 | Program output: 44                 
Correct output: -80                 | Program output: -80                
Correct output: -83                 | Program output: 92                 
Correct output: -42                 | Program output: 57                 
Correct output: 33                  | Program output: 33                 
Correct output: -65                 | Program output: 69                 
Correct output: -79                 | Program output: 81                 
Correct output: -86                 | Program output: -24                
Correct output: 2                   | Program output: 2                  
Correct output: -13                 | Program output: 18                 
Correct output: -90                 | Program output: -73                
Correct output: -87                 | Program output: -78                
Correct output: -51                 | Program output: 10                 
Correct output: -64                 | Program output: 67                 
Correct output: -90                 | Program output: -53                
Correct output: -34                 | Program output: -34                
Correct output: -57                 | Program output: 67                 
Correct output: -76                 | Program output: -76                
Correct output: -86                 | Program output: -86                
Correct output: 1                   | Program output: 25                 
Correct output: -98                 | Program output: -98                
Correct output: -47                 | Program output: -47                
Correct output: -34                 | Program output: -34                
Correct output: -80                 | Program output: 27                 
Correct output: -34                 | Program output: -34                
Correct output: -15                 | Program output: 36                 
Correct output: -46                 | Program output: 95                 
Correct output: 17                  | Program output: 17                 
Correct output: -78                 | Program output: 0                  
Correct output: -92                 | Program output: -92                
Correct output: -92                 | Program output: -29                
Correct output: -68                 | Program output: -68                
Correct output: -98                 | Program output: -76                
Correct output: -77                 | Program output: 64                 
Correct output: -21                 | Program output: 57                 
Correct output: -81                 | Program output: -81                
Correct output: -86                 | Program output: -35                
Correct output: -56                 | Program output: 85                 
Correct output: -12                 | Program output: 19                 
Correct output: -75                 | Program output: 60                 
Correct output: -68                 | Program output: -68                
Correct output: -97                 | Program output: 47                 
Correct output: -71                 | Program output: -17                
Correct output: -36                 | Program output: 89                 
Correct output: -8                  | Program output: 97                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in1} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 2, :instruction print_boolean} {:close 0, :instruction integer_add} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 3, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_newline} {:close 1, :instruction exec_shove} {:close 0, :instruction in1} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction print_exec} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mult})
Lexicase best program: (in1 in2 print_integer print_boolean integer_add integer_sub integer_sub boolean_or exec_flush exec_pop () boolean_frominteger integer_pop print_integer integer_add boolean_eq exec_empty integer_sub integer_mod exec_s (boolean_invert_second_then_and boolean_or integer_mult boolean_invert_second_then_and integer_dup) (exec_k_when_autoconstructing (integer_lte) ()) (exec_when (boolean_stackdepth print_newline exec_shove () in1 boolean_yank) integer_flush integer_empty integer_gte) boolean_pop exec_stackdepth print_exec () boolean_and exec_flush boolean_or integer_swap integer_mult)
Lexicase best errors: [1 0 0 1 0 1 1 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 53
Percent parens: 0.189
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in1} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 2, :instruction print_boolean} {:close 0, :instruction integer_add} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 3, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_newline} {:close 1, :instruction exec_shove} {:close 0, :instruction in1} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction print_exec} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mult})
Zero cases best program: (in1 in2 print_integer print_boolean integer_add integer_sub integer_sub boolean_or exec_flush exec_pop () boolean_frominteger integer_pop print_integer integer_add boolean_eq exec_empty integer_sub integer_mod exec_s (boolean_invert_second_then_and boolean_or integer_mult boolean_invert_second_then_and integer_dup) (exec_k_when_autoconstructing (integer_lte) ()) (exec_when (boolean_stackdepth print_newline exec_shove () in1 boolean_yank) integer_flush integer_empty integer_gte) boolean_pop exec_stackdepth print_exec () boolean_and exec_flush boolean_or integer_swap integer_mult)
Zero cases best errors: [1 0 0 1 0 1 1 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 53
Percent parens: 0.189
--- Lexicase Population Statistics ---
Count of elite individuals by case: (125 821 419 401 420 1000 401 420 946 1000)
Population mean number of elite cases: 5.95
Count of perfect (error zero) individuals by case: (125 821 419 401 420 0 401 420 946 0)
Population mean number of perfect (error zero) cases: 3.95
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in1} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_swap})
Best program: (in1 in2 print_integer print_boolean boolean_yankdup integer_sub integer_sub boolean_or exec_flush exec_dup_times () boolean_frominteger integer_pop print_integer integer_add boolean_eq exec_empty integer_sub integer_mod exec_s (boolean_invert_second_then_and boolean_or integer_mult boolean_invert_second_then_and integer_lte) (exec_y (boolean_swap)) ())
Errors: [1 0 0 1 0 1 1 0 0 1]
Total: 5
Mean: 0.5
Genome size: 26
Size: 32
Percent parens: 0.188
--- Population Statistics ---
Average total errors in population: 6.047
Median total errors in population: 6
Error averages by case: (0.875 0.179 0.581 0.599 0.58 1.0 0.599 0.58 0.054 1.0)
Error minima by case: (0 0 0 0 0 1 0 0 0 1)
Average genome size in population (length): 31.579
Average program size in population (points): 40.188
Average percent parens in population: 0.211
Minimum age in population: 9.375
Maximum age in population: 14.3125
Average age in population: 12.374390625
Median age in population: 12.47265625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 114
Genome diversity (% unique genomes):	 0.666
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 146
Syntactic diversity (% unique Push programs):	 0.618
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.022
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 3299202
--- Timings ---
Current time: 1559314359944 milliseconds
Total Time:          23.4 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        17.2 seconds, 73.8%
Fitness Testing:      3.7 seconds, 16.0%
Report:               2.3 seconds,  9.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 650
Test mean error for best: 0.65000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 48                  | Program output: 48                 
Correct output: -33                 | Program output: 30                 
Correct output: 32                  | Program output: 32                 
Correct output: 24                  | Program output: 89                 
Correct output: -79                 | Program output: -20                
Correct output: -83                 | Program output: -83                
Correct output: -54                 | Program output: -54                
Correct output: -20                 | Program output: -1                 
Correct output: -79                 | Program output: 99                 
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -66                
Correct output: 64                  | Program output: 64                 
Correct output: -21                 | Program output: -21                
Correct output: 13                  | Program output: 13                 
Correct output: 35                  | Program output: 35                 
Correct output: 0                   | Program output: 92                 
Correct output: 3                   | Program output: 29                 
Correct output: 10                  | Program output: 14                 
Correct output: 21                  | Program output: 82                 
Correct output: 43                  | Program output: 76                 
Correct output: 20                  | Program output: 20                 
Correct output: 5                   | Program output: 98                 
Correct output: 6                   | Program output: 62                 
Correct output: 30                  | Program output: 100                
Correct output: 13                  | Program output: 89                 
Correct output: 21                  | Program output: 51                 
Correct output: 19                  | Program output: 79                 
Correct output: 2                   | Program output: 2                  
Correct output: 2                   | Program output: 2                  
Correct output: 1                   | Program output: 3                  
Correct output: 1                   | Program output: 84                 
Correct output: 36                  | Program output: 62                 
Correct output: 8                   | Program output: 84                 
Correct output: 41                  | Program output: 62                 
Correct output: 18                  | Program output: 18                 
Correct output: -25                 | Program output: 45                 
Correct output: -25                 | Program output: 41                 
Correct output: -31                 | Program output: 26                 
Correct output: -35                 | Program output: -35                
Correct output: -49                 | Program output: -49                
Correct output: -85                 | Program output: -24                
Correct output: -24                 | Program output: -24                
Correct output: -93                 | Program output: -93                
Correct output: -81                 | Program output: 44                 
Correct output: -56                 | Program output: 100                
Correct output: -57                 | Program output: 66                 
Correct output: -97                 | Program output: -83                
Correct output: -58                 | Program output: 92                 
Correct output: -66                 | Program output: 3                  
Correct output: -20                 | Program output: 63                 
Correct output: -91                 | Program output: 44                 
Correct output: -80                 | Program output: -80                
Correct output: -83                 | Program output: 92                 
Correct output: -42                 | Program output: 57                 
Correct output: 33                  | Program output: 33                 
Correct output: -65                 | Program output: 69                 
Correct output: -79                 | Program output: 81                 
Correct output: -86                 | Program output: -24                
Correct output: 2                   | Program output: 2                  
Correct output: -13                 | Program output: 18                 
Correct output: -90                 | Program output: -73                
Correct output: -87                 | Program output: -78                
Correct output: -51                 | Program output: 10                 
Correct output: -64                 | Program output: 67                 
Correct output: -90                 | Program output: -53                
Correct output: -34                 | Program output: -34                
Correct output: -57                 | Program output: 67                 
Correct output: -76                 | Program output: -76                
Correct output: -86                 | Program output: -86                
Correct output: 1                   | Program output: 25                 
Correct output: -98                 | Program output: -98                
Correct output: -47                 | Program output: -47                
Correct output: -34                 | Program output: -34                
Correct output: -80                 | Program output: 27                 
Correct output: -34                 | Program output: -34                
Correct output: -15                 | Program output: 36                 
Correct output: -46                 | Program output: 95                 
Correct output: 17                  | Program output: 17                 
Correct output: -78                 | Program output: 0                  
Correct output: -92                 | Program output: -92                
Correct output: -92                 | Program output: -29                
Correct output: -68                 | Program output: -68                
Correct output: -98                 | Program output: -76                
Correct output: -77                 | Program output: 64                 
Correct output: -21                 | Program output: 57                 
Correct output: -81                 | Program output: -81                
Correct output: -86                 | Program output: -35                
Correct output: -56                 | Program output: 85                 
Correct output: -12                 | Program output: 19                 
Correct output: -75                 | Program output: 60                 
Correct output: -68                 | Program output: -68                
Correct output: -97                 | Program output: 47                 
Correct output: -71                 | Program output: -17                
Correct output: -36                 | Program output: 89                 
Correct output: -8                  | Program output: 97                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_add} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_y} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_lte} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_swap} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_while} {:close 0, :instruction in1} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_flush})
Lexicase best program: (integer_add exec_stackdepth boolean_not in4 boolean_yankdup in4 integer_flush exec_y (integer_gte exec_eq) integer_mult integer_gte integer_lte in2 print_integer exec_dup () boolean_yank integer_flush exec_y_when_autoconstructing (boolean_swap) integer_shove integer_swap exec_empty integer_yank exec_when (exec_k (exec_dup (boolean_flush exec_dup_times (integer_fromboolean integer_rot boolean_dup_items boolean_xor integer_mod) exec_while () in1 integer_dup_items boolean_dup integer_flush)) ()))
Lexicase best errors: [1 1 0 0 1 1 1 0 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 49
Percent parens: 0.204
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_add} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_y} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_lte} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_swap} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_while} {:close 0, :instruction in1} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_flush})
Zero cases best program: (integer_add exec_stackdepth boolean_not in4 boolean_yankdup in4 integer_flush exec_y (integer_gte exec_eq) integer_mult integer_gte integer_lte in2 print_integer exec_dup () boolean_yank integer_flush exec_y_when_autoconstructing (boolean_swap) integer_shove integer_swap exec_empty integer_yank exec_when (exec_k (exec_dup (boolean_flush exec_dup_times (integer_fromboolean integer_rot boolean_dup_items boolean_xor integer_mod) exec_while () in1 integer_dup_items boolean_dup integer_flush)) ()))
Zero cases best errors: [1 1 0 0 1 1 1 0 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 49
Percent parens: 0.204
--- Lexicase Population Statistics ---
Count of elite individuals by case: (325 118 490 815 118 118 325 490 490 490)
Population mean number of elite cases: 3.78
Count of perfect (error zero) individuals by case: (325 118 490 815 118 118 325 490 490 490)
Population mean number of perfect (error zero) cases: 3.78
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_lte} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_swap} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_while} {:close 0, :instruction in1} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_stackdepth})
Best program: (integer_add exec_stackdepth boolean_not exec_when () integer_gte exec_eq integer_mult integer_gte integer_lte in2 print_integer exec_dup () boolean_yank integer_flush exec_y_when_autoconstructing (boolean_swap) integer_shove integer_swap exec_empty integer_yank exec_when (exec_k (exec_dup (boolean_flush exec_dup_times (integer_fromboolean integer_rot boolean_dup_items boolean_xor integer_mod) exec_while () in1 integer_dup_items boolean_dup exec_s_when_autoconstructing (exec_swap (boolean_yankdup integer_swap boolean_swap) (exec_stackdepth)) () ())) ()))
Errors: [1 1 0 0 1 1 1 0 0 0]
Total: 5
Mean: 0.5
Genome size: 40
Size: 55
Percent parens: 0.273
--- Population Statistics ---
Average total errors in population: 6.221
Median total errors in population: 7
Error averages by case: (0.675 0.882 0.51 0.185 0.882 0.882 0.675 0.51 0.51 0.51)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 31.729
Average program size in population (points): 40.368
Average percent parens in population: 0.211
Minimum age in population: 10.375
Maximum age in population: 15.80078125
Average age in population: 13.82076171875
Median age in population: 13.8515625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 74
Genome diversity (% unique genomes):	 0.731
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 90
Syntactic diversity (% unique Push programs):	 0.697
Total error diversity:				 0.003
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.022
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 3521474
--- Timings ---
Current time: 1559314362183 milliseconds
Total Time:          25.5 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        19.1 seconds, 74.7%
Fitness Testing:      3.9 seconds, 15.4%
Report:               2.4 seconds,  9.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 648
Test mean error for best: 0.64800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 48                  | Program output: 48                 
Correct output: -33                 | Program output: 30                 
Correct output: 32                  | Program output: 65                 
Correct output: 24                  | Program output: 24                 
Correct output: -79                 | Program output: -79                
Correct output: -83                 | Program output: -83                
Correct output: -54                 | Program output: 74                 
Correct output: -20                 | Program output: -1                 
Correct output: -79                 | Program output: -79                
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -66                
Correct output: 64                  | Program output: 64                 
Correct output: -21                 | Program output: -21                
Correct output: 13                  | Program output: 13                 
Correct output: 35                  | Program output: 35                 
Correct output: 0                   | Program output: 91                 
Correct output: 3                   | Program output: 3                  
Correct output: 10                  | Program output: 79                 
Correct output: 21                  | Program output: 72                 
Correct output: 43                  | Program output: 93                 
Correct output: 20                  | Program output: 40                 
Correct output: 5                   | Program output: 11                 
Correct output: 6                   | Program output: 6                  
Correct output: 30                  | Program output: 36                 
Correct output: 13                  | Program output: 13                 
Correct output: 21                  | Program output: 72                 
Correct output: 19                  | Program output: 39                 
Correct output: 2                   | Program output: 100                
Correct output: 2                   | Program output: 75                 
Correct output: 1                   | Program output: 1                  
Correct output: 1                   | Program output: 1                  
Correct output: 36                  | Program output: 36                 
Correct output: 8                   | Program output: 73                 
Correct output: 41                  | Program output: 45                 
Correct output: 18                  | Program output: 83                 
Correct output: -25                 | Program output: 1                  
Correct output: -25                 | Program output: 0                  
Correct output: -31                 | Program output: -31                
Correct output: -35                 | Program output: 73                 
Correct output: -49                 | Program output: 5                  
Correct output: -85                 | Program output: -85                
Correct output: -24                 | Program output: 39                 
Correct output: -93                 | Program output: -28                
Correct output: -81                 | Program output: 74                 
Correct output: -56                 | Program output: 38                 
Correct output: -57                 | Program output: 64                 
Correct output: -97                 | Program output: -97                
Correct output: -58                 | Program output: -43                
Correct output: -66                 | Program output: -66                
Correct output: -20                 | Program output: -20                
Correct output: -91                 | Program output: -91                
Correct output: -80                 | Program output: -58                
Correct output: -83                 | Program output: -83                
Correct output: -42                 | Program output: -42                
Correct output: 33                  | Program output: 93                 
Correct output: -65                 | Program output: -65                
Correct output: -79                 | Program output: -79                
Correct output: -86                 | Program output: -30                
Correct output: 2                   | Program output: 41                 
Correct output: -13                 | Program output: -13                
Correct output: -90                 | Program output: 1                  
Correct output: -87                 | Program output: -15                
Correct output: -51                 | Program output: 95                 
Correct output: -64                 | Program output: -55                
Correct output: -90                 | Program output: -75                
Correct output: -34                 | Program output: 34                 
Correct output: -57                 | Program output: 9                  
Correct output: -76                 | Program output: 75                 
Correct output: -86                 | Program output: -59                
Correct output: 1                   | Program output: 54                 
Correct output: -98                 | Program output: -86                
Correct output: -47                 | Program output: -39                
Correct output: -34                 | Program output: -11                
Correct output: -80                 | Program output: -80                
Correct output: -34                 | Program output: -10                
Correct output: -15                 | Program output: 77                 
Correct output: -46                 | Program output: -22                
Correct output: 17                  | Program output: 63                 
Correct output: -78                 | Program output: 98                 
Correct output: -92                 | Program output: 82                 
Correct output: -92                 | Program output: 91                 
Correct output: -68                 | Program output: 86                 
Correct output: -98                 | Program output: -98                
Correct output: -77                 | Program output: -24                
Correct output: -21                 | Program output: -21                
Correct output: -81                 | Program output: 69                 
Correct output: -86                 | Program output: -86                
Correct output: -56                 | Program output: -53                
Correct output: -12                 | Program output: 2                  
Correct output: -75                 | Program output: 2                  
Correct output: -68                 | Program output: 88                 
Correct output: -97                 | Program output: 99                 
Correct output: -71                 | Program output: -40                
Correct output: -36                 | Program output: -13                
Correct output: -8                  | Program output: -8                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 2, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k} {:close 1, :instruction print_boolean} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction tagged_265} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gt})
Lexicase best program: (integer_add exec_stackdepth boolean_not in4 print_integer integer_min boolean_dup boolean_dup boolean_invert_second_then_and integer_rot integer_yankdup integer_sub exec_do*count (exec_k (print_boolean) (integer_yank) integer_mod boolean_stackdepth tagged_265) boolean_rot integer_shove exec_do*while (integer_gt))
Lexicase best errors: [1 1 0 1 0 0 0 1 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 28
Percent parens: 0.179
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 2, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k} {:close 1, :instruction print_boolean} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction tagged_265} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gt})
Zero cases best program: (integer_add exec_stackdepth boolean_not in4 print_integer integer_min boolean_dup boolean_dup boolean_invert_second_then_and integer_rot integer_yankdup integer_sub exec_do*count (exec_k (print_boolean) (integer_yank) integer_mod boolean_stackdepth tagged_265) boolean_rot integer_shove exec_do*while (integer_gt))
Zero cases best errors: [1 1 0 1 0 0 0 1 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 28
Percent parens: 0.179
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 414 264 415 264 935 264 256 1000 264)
Population mean number of elite cases: 5.08
Count of perfect (error zero) individuals by case: (0 414 264 415 264 935 264 256 0 264)
Population mean number of perfect (error zero) cases: 3.08
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in4} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_div} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_while} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 2, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k} {:close 1, :instruction print_boolean} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction tagged_265} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gt})
Best program: (integer_add exec_stackdepth boolean_not in4 boolean_yankdup in4 boolean_rot print_integer integer_shove integer_div integer_fromboolean exec_while (integer_shove integer_stackdepth integer_dec exec_swap (boolean_invert_second_then_and integer_min) () boolean_dup boolean_dup boolean_invert_second_then_and integer_rot integer_yankdup integer_sub) exec_do*count (exec_k (print_boolean) (integer_yank) boolean_flush boolean_stackdepth tagged_265) boolean_rot integer_shove exec_do*while (integer_gt))
Errors: [1 1 0 1 0 0 0 1 1 0]
Total: 5
Mean: 0.5
Genome size: 35
Size: 43
Percent parens: 0.186
--- Population Statistics ---
Average total errors in population: 6.924
Median total errors in population: 7
Error averages by case: (1.0 0.586 0.736 0.585 0.736 0.065 0.736 0.744 1.0 0.736)
Error minima by case: (1 0 0 0 0 0 0 0 1 0)
Average genome size in population (length): 31.999
Average program size in population (points): 40.452
Average percent parens in population: 0.205
Minimum age in population: 12.125
Maximum age in population: 17.275390625
Average age in population: 15.337080078125
Median age in population: 15.4013671875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 37
Genome diversity (% unique genomes):	 0.739
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 45
Syntactic diversity (% unique Push programs):	 0.709
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.027
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 3814793
--- Timings ---
Current time: 1559314364974 milliseconds
Total Time:          27.9 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        21.0 seconds, 75.3%
Fitness Testing:      4.2 seconds, 14.9%
Report:               2.6 seconds,  9.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 650
Test mean error for best: 0.65000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 48                  | Program output: 48                 
Correct output: -33                 | Program output: 30                 
Correct output: 32                  | Program output: 32                 
Correct output: 24                  | Program output: 89                 
Correct output: -79                 | Program output: -20                
Correct output: -83                 | Program output: -83                
Correct output: -54                 | Program output: -54                
Correct output: -20                 | Program output: -1                 
Correct output: -79                 | Program output: 99                 
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -66                
Correct output: 64                  | Program output: 64                 
Correct output: -21                 | Program output: -21                
Correct output: 13                  | Program output: 13                 
Correct output: 35                  | Program output: 35                 
Correct output: 0                   | Program output: 92                 
Correct output: 3                   | Program output: 29                 
Correct output: 10                  | Program output: 14                 
Correct output: 21                  | Program output: 82                 
Correct output: 43                  | Program output: 76                 
Correct output: 20                  | Program output: 20                 
Correct output: 5                   | Program output: 98                 
Correct output: 6                   | Program output: 62                 
Correct output: 30                  | Program output: 100                
Correct output: 13                  | Program output: 89                 
Correct output: 21                  | Program output: 51                 
Correct output: 19                  | Program output: 79                 
Correct output: 2                   | Program output: 2                  
Correct output: 2                   | Program output: 2                  
Correct output: 1                   | Program output: 3                  
Correct output: 1                   | Program output: 84                 
Correct output: 36                  | Program output: 62                 
Correct output: 8                   | Program output: 84                 
Correct output: 41                  | Program output: 62                 
Correct output: 18                  | Program output: 18                 
Correct output: -25                 | Program output: 45                 
Correct output: -25                 | Program output: 41                 
Correct output: -31                 | Program output: 26                 
Correct output: -35                 | Program output: -35                
Correct output: -49                 | Program output: -49                
Correct output: -85                 | Program output: -24                
Correct output: -24                 | Program output: -24                
Correct output: -93                 | Program output: -93                
Correct output: -81                 | Program output: 44                 
Correct output: -56                 | Program output: 100                
Correct output: -57                 | Program output: 66                 
Correct output: -97                 | Program output: -83                
Correct output: -58                 | Program output: 92                 
Correct output: -66                 | Program output: 3                  
Correct output: -20                 | Program output: 63                 
Correct output: -91                 | Program output: 44                 
Correct output: -80                 | Program output: -80                
Correct output: -83                 | Program output: 92                 
Correct output: -42                 | Program output: 57                 
Correct output: 33                  | Program output: 33                 
Correct output: -65                 | Program output: 69                 
Correct output: -79                 | Program output: 81                 
Correct output: -86                 | Program output: -24                
Correct output: 2                   | Program output: 2                  
Correct output: -13                 | Program output: 18                 
Correct output: -90                 | Program output: -73                
Correct output: -87                 | Program output: -78                
Correct output: -51                 | Program output: 10                 
Correct output: -64                 | Program output: 67                 
Correct output: -90                 | Program output: -53                
Correct output: -34                 | Program output: -34                
Correct output: -57                 | Program output: 67                 
Correct output: -76                 | Program output: -76                
Correct output: -86                 | Program output: -86                
Correct output: 1                   | Program output: 25                 
Correct output: -98                 | Program output: -98                
Correct output: -47                 | Program output: -47                
Correct output: -34                 | Program output: -34                
Correct output: -80                 | Program output: 27                 
Correct output: -34                 | Program output: -34                
Correct output: -15                 | Program output: 36                 
Correct output: -46                 | Program output: 95                 
Correct output: 17                  | Program output: 17                 
Correct output: -78                 | Program output: 0                  
Correct output: -92                 | Program output: -92                
Correct output: -92                 | Program output: -29                
Correct output: -68                 | Program output: -68                
Correct output: -98                 | Program output: -76                
Correct output: -77                 | Program output: 64                 
Correct output: -21                 | Program output: 57                 
Correct output: -81                 | Program output: -81                
Correct output: -86                 | Program output: -35                
Correct output: -56                 | Program output: 85                 
Correct output: -12                 | Program output: 19                 
Correct output: -75                 | Program output: 60                 
Correct output: -68                 | Program output: -68                
Correct output: -97                 | Program output: 47                 
Correct output: -71                 | Program output: -17                
Correct output: -36                 | Program output: 89                 
Correct output: -8                  | Program output: 97                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in1} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction tagged_265} {:close 2, :instruction exec_do*while} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k} {:close 1, :instruction print_boolean} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction tagged_265} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gt})
Lexicase best program: (in1 in2 print_integer print_boolean boolean_yankdup integer_sub integer_sub boolean_or exec_flush exec_pop () boolean_frominteger integer_pop print_integer integer_add boolean_eq integer_mod boolean_stackdepth tagged_265 exec_do*while () boolean_dup boolean_dup boolean_invert_second_then_and integer_rot integer_yankdup exec_stackdepth exec_do*count (exec_k (print_boolean) (integer_yank) boolean_flush boolean_stackdepth tagged_265) boolean_rot integer_shove exec_do*while (integer_gt))
Lexicase best errors: [1 0 1 0 0 1 0 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 43
Percent parens: 0.163
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in1} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction tagged_265} {:close 2, :instruction exec_do*while} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k} {:close 1, :instruction print_boolean} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction tagged_265} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gt})
Zero cases best program: (in1 in2 print_integer print_boolean boolean_yankdup integer_sub integer_sub boolean_or exec_flush exec_pop () boolean_frominteger integer_pop print_integer integer_add boolean_eq integer_mod boolean_stackdepth tagged_265 exec_do*while () boolean_dup boolean_dup boolean_invert_second_then_and integer_rot integer_yankdup exec_stackdepth exec_do*count (exec_k (print_boolean) (integer_yank) boolean_flush boolean_stackdepth tagged_265) boolean_rot integer_shove exec_do*while (integer_gt))
Zero cases best errors: [1 0 1 0 0 1 0 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 43
Percent parens: 0.163
--- Lexicase Population Statistics ---
Count of elite individuals by case: (133 289 1 288 289 1 288 816 1 423)
Population mean number of elite cases: 2.53
Count of perfect (error zero) individuals by case: (133 289 1 288 289 1 288 816 1 423)
Population mean number of perfect (error zero) cases: 2.53
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in4} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_y} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_eq} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_lte} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 1, :instruction exec_dup} {:close 1, :instruction exec_y} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_swap} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction tagged_830} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup_items})
Best program: (integer_add exec_stackdepth boolean_not in4 boolean_yankdup in4 integer_flush exec_y (integer_gte exec_eq) integer_mult integer_gte integer_lte in2 print_integer exec_dup () exec_y () integer_flush exec_y_when_autoconstructing (boolean_swap) integer_shove integer_swap exec_empty integer_yank exec_when (exec_k (exec_dup (boolean_flush tagged_830 integer_fromboolean integer_rot boolean_dup_items)) ()))
Errors: [1 0 1 0 0 1 0 0 1 0]
Total: 4
Mean: 0.4
Genome size: 32
Size: 41
Percent parens: 0.220
--- Population Statistics ---
Average total errors in population: 7.471
Median total errors in population: 9
Error averages by case: (0.867 0.711 0.999 0.712 0.711 0.999 0.712 0.184 0.999 0.577)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 32.354
Average program size in population (points): 40.717
Average percent parens in population: 0.201
Minimum age in population: 13.125
Maximum age in population: 18.5126953125
Average age in population: 16.8462060546875
Median age in population: 16.935546875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 11
Genome diversity (% unique genomes):	 0.736
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.716
Total error diversity:				 0.006
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.031
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 4205697
--- Timings ---
Current time: 1559314367742 milliseconds
Total Time:          30.8 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        23.0 seconds, 74.7%
Fitness Testing:      4.5 seconds, 14.5%
Report:               3.2 seconds, 10.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 650
Test mean error for best: 0.65000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 48                  | Program output: 48                 
Correct output: -33                 | Program output: 30                 
Correct output: 32                  | Program output: 32                 
Correct output: 24                  | Program output: 89                 
Correct output: -79                 | Program output: -20                
Correct output: -83                 | Program output: -83                
Correct output: -54                 | Program output: -54                
Correct output: -20                 | Program output: -1                 
Correct output: -79                 | Program output: 99                 
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -66                
Correct output: 64                  | Program output: 64                 
Correct output: -21                 | Program output: -21                
Correct output: 13                  | Program output: 13                 
Correct output: 35                  | Program output: 35                 
Correct output: 0                   | Program output: 92                 
Correct output: 3                   | Program output: 29                 
Correct output: 10                  | Program output: 14                 
Correct output: 21                  | Program output: 82                 
Correct output: 43                  | Program output: 76                 
Correct output: 20                  | Program output: 20                 
Correct output: 5                   | Program output: 98                 
Correct output: 6                   | Program output: 62                 
Correct output: 30                  | Program output: 100                
Correct output: 13                  | Program output: 89                 
Correct output: 21                  | Program output: 51                 
Correct output: 19                  | Program output: 79                 
Correct output: 2                   | Program output: 2                  
Correct output: 2                   | Program output: 2                  
Correct output: 1                   | Program output: 3                  
Correct output: 1                   | Program output: 84                 
Correct output: 36                  | Program output: 62                 
Correct output: 8                   | Program output: 84                 
Correct output: 41                  | Program output: 62                 
Correct output: 18                  | Program output: 18                 
Correct output: -25                 | Program output: 45                 
Correct output: -25                 | Program output: 41                 
Correct output: -31                 | Program output: 26                 
Correct output: -35                 | Program output: -35                
Correct output: -49                 | Program output: -49                
Correct output: -85                 | Program output: -24                
Correct output: -24                 | Program output: -24                
Correct output: -93                 | Program output: -93                
Correct output: -81                 | Program output: 44                 
Correct output: -56                 | Program output: 100                
Correct output: -57                 | Program output: 66                 
Correct output: -97                 | Program output: -83                
Correct output: -58                 | Program output: 92                 
Correct output: -66                 | Program output: 3                  
Correct output: -20                 | Program output: 63                 
Correct output: -91                 | Program output: 44                 
Correct output: -80                 | Program output: -80                
Correct output: -83                 | Program output: 92                 
Correct output: -42                 | Program output: 57                 
Correct output: 33                  | Program output: 33                 
Correct output: -65                 | Program output: 69                 
Correct output: -79                 | Program output: 81                 
Correct output: -86                 | Program output: -24                
Correct output: 2                   | Program output: 2                  
Correct output: -13                 | Program output: 18                 
Correct output: -90                 | Program output: -73                
Correct output: -87                 | Program output: -78                
Correct output: -51                 | Program output: 10                 
Correct output: -64                 | Program output: 67                 
Correct output: -90                 | Program output: -53                
Correct output: -34                 | Program output: -34                
Correct output: -57                 | Program output: 67                 
Correct output: -76                 | Program output: -76                
Correct output: -86                 | Program output: -86                
Correct output: 1                   | Program output: 25                 
Correct output: -98                 | Program output: -98                
Correct output: -47                 | Program output: -47                
Correct output: -34                 | Program output: -34                
Correct output: -80                 | Program output: 27                 
Correct output: -34                 | Program output: -34                
Correct output: -15                 | Program output: 36                 
Correct output: -46                 | Program output: 95                 
Correct output: 17                  | Program output: 17                 
Correct output: -78                 | Program output: 0                  
Correct output: -92                 | Program output: -92                
Correct output: -92                 | Program output: -29                
Correct output: -68                 | Program output: -68                
Correct output: -98                 | Program output: -76                
Correct output: -77                 | Program output: 64                 
Correct output: -21                 | Program output: 57                 
Correct output: -81                 | Program output: -81                
Correct output: -86                 | Program output: -35                
Correct output: -56                 | Program output: 85                 
Correct output: -12                 | Program output: 19                 
Correct output: -75                 | Program output: 60                 
Correct output: -68                 | Program output: -68                
Correct output: -97                 | Program output: 47                 
Correct output: -71                 | Program output: -17                
Correct output: -36                 | Program output: 89                 
Correct output: -8                  | Program output: 97                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_add} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_y} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_lte} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_s} {:close 1, :instruction integer_mult} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_rot} {:close 0, :instruction tagged_853} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction tagged_265} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gt})
Lexicase best program: (integer_add exec_stackdepth boolean_not in4 boolean_yankdup in4 integer_flush exec_y (integer_gte exec_eq) integer_mult integer_gte integer_lte in2 print_integer exec_dup () boolean_yank boolean_dup boolean_dup exec_do*times (exec_yank exec_k (boolean_flush exec_s (integer_mult) (in4 integer_swap integer_stackdepth exec_s_when_autoconstructing (integer_dec) (integer_dup boolean_rot) (tagged_853 integer_swap integer_stackdepth boolean_stackdepth tagged_265) boolean_rot integer_flush) (exec_do*while (integer_gt))) ()))
Lexicase best errors: [0 1 0 1 0 1 1 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 54
Percent parens: 0.241
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_add} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_y} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_lte} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_s} {:close 1, :instruction integer_mult} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_rot} {:close 0, :instruction tagged_853} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction tagged_265} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gt})
Zero cases best program: (integer_add exec_stackdepth boolean_not in4 boolean_yankdup in4 integer_flush exec_y (integer_gte exec_eq) integer_mult integer_gte integer_lte in2 print_integer exec_dup () boolean_yank boolean_dup boolean_dup exec_do*times (exec_yank exec_k (boolean_flush exec_s (integer_mult) (in4 integer_swap integer_stackdepth exec_s_when_autoconstructing (integer_dec) (integer_dup boolean_rot) (tagged_853 integer_swap integer_stackdepth boolean_stackdepth tagged_265) boolean_rot integer_flush) (exec_do*while (integer_gt))) ()))
Zero cases best errors: [0 1 0 1 0 1 1 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 54
Percent parens: 0.241
--- Lexicase Population Statistics ---
Count of elite individuals by case: (441 122 441 1 441 1 378 941 441 378)
Population mean number of elite cases: 3.59
Count of perfect (error zero) individuals by case: (441 122 441 1 441 1 378 941 441 378)
Population mean number of perfect (error zero) cases: 3.59
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in1} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_265} {:close 0, :instruction boolean_rot} {:close 2, :instruction integer_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gt})
Best program: (in1 in2 print_integer print_boolean boolean_yankdup integer_sub integer_sub integer_sub boolean_rot exec_flush exec_pop () boolean_frominteger integer_pop print_integer integer_add boolean_eq exec_empty integer_sub integer_mod exec_s (exec_do*count (boolean_or integer_mult boolean_invert_second_then_and integer_lte) exec_k_when_autoconstructing (boolean_stackdepth tagged_265 boolean_rot integer_shove) () exec_do*while (integer_gt)) () ())
Errors: [0 1 0 1 0 1 1 0 0 1]
Total: 5
Mean: 0.5
Genome size: 32
Size: 41
Percent parens: 0.220
--- Population Statistics ---
Average total errors in population: 6.415
Median total errors in population: 7
Error averages by case: (0.559 0.878 0.559 0.999 0.559 0.999 0.622 0.059 0.559 0.622)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.529
Average program size in population (points): 44.349
Average percent parens in population: 0.197
Minimum age in population: 15.3671875
Maximum age in population: 20.37255859375
Average age in population: 18.78174365234375
Median age in population: 19.038330078125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 199
Genome diversity (% unique genomes):	 0.647
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 203
Syntactic diversity (% unique Push programs):	 0.614
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.025
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 4379976
--- Timings ---
Current time: 1559314370021 milliseconds
Total Time:          33.4 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        24.9 seconds, 74.6%
Fitness Testing:      4.6 seconds, 13.9%
Report:               3.7 seconds, 11.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 650
Test mean error for best: 0.65000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 48                  | Program output: 48                 
Correct output: -33                 | Program output: 30                 
Correct output: 32                  | Program output: 32                 
Correct output: 24                  | Program output: 89                 
Correct output: -79                 | Program output: -20                
Correct output: -83                 | Program output: -83                
Correct output: -54                 | Program output: -54                
Correct output: -20                 | Program output: -1                 
Correct output: -79                 | Program output: 99                 
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -66                
Correct output: 64                  | Program output: 64                 
Correct output: -21                 | Program output: -21                
Correct output: 13                  | Program output: 13                 
Correct output: 35                  | Program output: 35                 
Correct output: 0                   | Program output: 92                 
Correct output: 3                   | Program output: 29                 
Correct output: 10                  | Program output: 14                 
Correct output: 21                  | Program output: 82                 
Correct output: 43                  | Program output: 76                 
Correct output: 20                  | Program output: 20                 
Correct output: 5                   | Program output: 98                 
Correct output: 6                   | Program output: 62                 
Correct output: 30                  | Program output: 100                
Correct output: 13                  | Program output: 89                 
Correct output: 21                  | Program output: 51                 
Correct output: 19                  | Program output: 79                 
Correct output: 2                   | Program output: 2                  
Correct output: 2                   | Program output: 2                  
Correct output: 1                   | Program output: 3                  
Correct output: 1                   | Program output: 84                 
Correct output: 36                  | Program output: 62                 
Correct output: 8                   | Program output: 84                 
Correct output: 41                  | Program output: 62                 
Correct output: 18                  | Program output: 18                 
Correct output: -25                 | Program output: 45                 
Correct output: -25                 | Program output: 41                 
Correct output: -31                 | Program output: 26                 
Correct output: -35                 | Program output: -35                
Correct output: -49                 | Program output: -49                
Correct output: -85                 | Program output: -24                
Correct output: -24                 | Program output: -24                
Correct output: -93                 | Program output: -93                
Correct output: -81                 | Program output: 44                 
Correct output: -56                 | Program output: 100                
Correct output: -57                 | Program output: 66                 
Correct output: -97                 | Program output: -83                
Correct output: -58                 | Program output: 92                 
Correct output: -66                 | Program output: 3                  
Correct output: -20                 | Program output: 63                 
Correct output: -91                 | Program output: 44                 
Correct output: -80                 | Program output: -80                
Correct output: -83                 | Program output: 92                 
Correct output: -42                 | Program output: 57                 
Correct output: 33                  | Program output: 33                 
Correct output: -65                 | Program output: 69                 
Correct output: -79                 | Program output: 81                 
Correct output: -86                 | Program output: -24                
Correct output: 2                   | Program output: 2                  
Correct output: -13                 | Program output: 18                 
Correct output: -90                 | Program output: -73                
Correct output: -87                 | Program output: -78                
Correct output: -51                 | Program output: 10                 
Correct output: -64                 | Program output: 67                 
Correct output: -90                 | Program output: -53                
Correct output: -34                 | Program output: -34                
Correct output: -57                 | Program output: 67                 
Correct output: -76                 | Program output: -76                
Correct output: -86                 | Program output: -86                
Correct output: 1                   | Program output: 25                 
Correct output: -98                 | Program output: -98                
Correct output: -47                 | Program output: -47                
Correct output: -34                 | Program output: -34                
Correct output: -80                 | Program output: 27                 
Correct output: -34                 | Program output: -34                
Correct output: -15                 | Program output: 36                 
Correct output: -46                 | Program output: 95                 
Correct output: 17                  | Program output: 17                 
Correct output: -78                 | Program output: 0                  
Correct output: -92                 | Program output: -92                
Correct output: -92                 | Program output: -29                
Correct output: -68                 | Program output: -68                
Correct output: -98                 | Program output: -76                
Correct output: -77                 | Program output: 64                 
Correct output: -21                 | Program output: 57                 
Correct output: -81                 | Program output: -81                
Correct output: -86                 | Program output: -35                
Correct output: -56                 | Program output: 85                 
Correct output: -12                 | Program output: 19                 
Correct output: -75                 | Program output: 60                 
Correct output: -68                 | Program output: -68                
Correct output: -97                 | Program output: 47                 
Correct output: -71                 | Program output: -17                
Correct output: -36                 | Program output: 89                 
Correct output: -8                  | Program output: 97                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in1} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction in3} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_and} {:close 2, :instruction boolean_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_exec_551} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_rot} {:close 1, :instruction print_newline} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_s} {:close 0, :instruction tagged_637} {:close 0, :instruction integer_rot})
Lexicase best program: (in1 in2 print_integer print_boolean boolean_yankdup integer_sub integer_sub boolean_or exec_flush exec_pop () in3 boolean_swap boolean_and boolean_flush integer_sub tag_exec_551 (exec_s_when_autoconstructing (exec_while (print_boolean integer_eq print_boolean exec_do*times (exec_yank exec_k (boolean_flush exec_s (boolean_and in4 integer_yank exec_eq exec_rot () (print_newline) (boolean_yankdup) in2 boolean_flush exec_s (tagged_637 integer_rot) () ()) () ()) ()))) () ()))
Lexicase best errors: [1 0 1 1 0 1 1 1 0 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 57
Percent parens: 0.333
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in1} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction in3} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_and} {:close 2, :instruction boolean_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_exec_551} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_rot} {:close 1, :instruction print_newline} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_s} {:close 0, :instruction tagged_637} {:close 0, :instruction integer_rot})
Zero cases best program: (in1 in2 print_integer print_boolean boolean_yankdup integer_sub integer_sub boolean_or exec_flush exec_pop () in3 boolean_swap boolean_and boolean_flush integer_sub tag_exec_551 (exec_s_when_autoconstructing (exec_while (print_boolean integer_eq print_boolean exec_do*times (exec_yank exec_k (boolean_flush exec_s (boolean_and in4 integer_yank exec_eq exec_rot () (print_newline) (boolean_yankdup) in2 boolean_flush exec_s (tagged_637 integer_rot) () ()) () ()) ()))) () ()))
Zero cases best errors: [1 0 1 1 0 1 1 1 0 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 57
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (106 414 213 106 417 211 106 106 417 417)
Population mean number of elite cases: 2.51
Count of perfect (error zero) individuals by case: (106 414 213 106 417 211 106 106 417 417)
Population mean number of perfect (error zero) cases: 2.51
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction in2} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_div} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_while} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 2, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction in2} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_rot} {:close 0, :instruction tagged_853} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction tag_integer_53} {:close 0, :instruction boolean_swap})
Best program: (in2 boolean_rot print_integer integer_shove integer_div integer_fromboolean exec_while (integer_shove integer_stackdepth integer_dec exec_swap (boolean_invert_second_then_and integer_min) () boolean_dup boolean_dup integer_eq exec_flush in2 exec_k_when_autoconstructing (exec_dup_items integer_dec integer_dec) (integer_dup boolean_rot) tagged_853 integer_swap exec_stackdepth exec_flush boolean_eq tag_integer_53 boolean_swap))
Errors: [1 0 1 1 0 1 1 1 0 0]
Total: 6
Mean: 0.6
Genome size: 31
Size: 37
Percent parens: 0.162
--- Population Statistics ---
Average total errors in population: 7.487
Median total errors in population: 6
Error averages by case: (0.894 0.586 0.787 0.894 0.583 0.789 0.894 0.894 0.583 0.583)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 33.598
Average program size in population (points): 42.277
Average percent parens in population: 0.203
Minimum age in population: 16.953125
Maximum age in population: 22.083984375
Average age in population: 20.1401396484375
Median age in population: 20.169921875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 140
Genome diversity (% unique genomes):	 0.66
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 147
Syntactic diversity (% unique Push programs):	 0.627
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.029
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 4550536
--- Timings ---
Current time: 1559314372170 milliseconds
Total Time:          35.6 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        26.8 seconds, 75.2%
Fitness Testing:      4.8 seconds, 13.5%
Report:               3.9 seconds, 11.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 648
Test mean error for best: 0.64800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 48                  | Program output: 48                 
Correct output: -33                 | Program output: 30                 
Correct output: 32                  | Program output: 65                 
Correct output: 24                  | Program output: 24                 
Correct output: -79                 | Program output: -79                
Correct output: -83                 | Program output: -83                
Correct output: -54                 | Program output: 74                 
Correct output: -20                 | Program output: -1                 
Correct output: -79                 | Program output: -79                
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -66                
Correct output: 64                  | Program output: 64                 
Correct output: -21                 | Program output: -21                
Correct output: 13                  | Program output: 13                 
Correct output: 35                  | Program output: 35                 
Correct output: 0                   | Program output: 91                 
Correct output: 3                   | Program output: 3                  
Correct output: 10                  | Program output: 79                 
Correct output: 21                  | Program output: 72                 
Correct output: 43                  | Program output: 93                 
Correct output: 20                  | Program output: 40                 
Correct output: 5                   | Program output: 11                 
Correct output: 6                   | Program output: 6                  
Correct output: 30                  | Program output: 36                 
Correct output: 13                  | Program output: 13                 
Correct output: 21                  | Program output: 72                 
Correct output: 19                  | Program output: 39                 
Correct output: 2                   | Program output: 100                
Correct output: 2                   | Program output: 75                 
Correct output: 1                   | Program output: 1                  
Correct output: 1                   | Program output: 1                  
Correct output: 36                  | Program output: 36                 
Correct output: 8                   | Program output: 73                 
Correct output: 41                  | Program output: 45                 
Correct output: 18                  | Program output: 83                 
Correct output: -25                 | Program output: 1                  
Correct output: -25                 | Program output: 0                  
Correct output: -31                 | Program output: -31                
Correct output: -35                 | Program output: 73                 
Correct output: -49                 | Program output: 5                  
Correct output: -85                 | Program output: -85                
Correct output: -24                 | Program output: 39                 
Correct output: -93                 | Program output: -28                
Correct output: -81                 | Program output: 74                 
Correct output: -56                 | Program output: 38                 
Correct output: -57                 | Program output: 64                 
Correct output: -97                 | Program output: -97                
Correct output: -58                 | Program output: -43                
Correct output: -66                 | Program output: -66                
Correct output: -20                 | Program output: -20                
Correct output: -91                 | Program output: -91                
Correct output: -80                 | Program output: -58                
Correct output: -83                 | Program output: -83                
Correct output: -42                 | Program output: -42                
Correct output: 33                  | Program output: 93                 
Correct output: -65                 | Program output: -65                
Correct output: -79                 | Program output: -79                
Correct output: -86                 | Program output: -30                
Correct output: 2                   | Program output: 41                 
Correct output: -13                 | Program output: -13                
Correct output: -90                 | Program output: 1                  
Correct output: -87                 | Program output: -15                
Correct output: -51                 | Program output: 95                 
Correct output: -64                 | Program output: -55                
Correct output: -90                 | Program output: -75                
Correct output: -34                 | Program output: 34                 
Correct output: -57                 | Program output: 9                  
Correct output: -76                 | Program output: 75                 
Correct output: -86                 | Program output: -59                
Correct output: 1                   | Program output: 54                 
Correct output: -98                 | Program output: -86                
Correct output: -47                 | Program output: -39                
Correct output: -34                 | Program output: -11                
Correct output: -80                 | Program output: -80                
Correct output: -34                 | Program output: -10                
Correct output: -15                 | Program output: 77                 
Correct output: -46                 | Program output: -22                
Correct output: 17                  | Program output: 63                 
Correct output: -78                 | Program output: 98                 
Correct output: -92                 | Program output: 82                 
Correct output: -92                 | Program output: 91                 
Correct output: -68                 | Program output: 86                 
Correct output: -98                 | Program output: -98                
Correct output: -77                 | Program output: -24                
Correct output: -21                 | Program output: -21                
Correct output: -81                 | Program output: 69                 
Correct output: -86                 | Program output: -86                
Correct output: -56                 | Program output: -53                
Correct output: -12                 | Program output: 2                  
Correct output: -75                 | Program output: 2                  
Correct output: -68                 | Program output: 88                 
Correct output: -97                 | Program output: 99                 
Correct output: -71                 | Program output: -40                
Correct output: -36                 | Program output: -13                
Correct output: -8                  | Program output: -8                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_yank} {:close 0, :instruction tag_boolean_640} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction tag_integer_446} {:close 0, :instruction tag_integer_53} {:close 0, :instruction boolean_swap})
Lexicase best program: (exec_dup_times (integer_dup_items exec_k_when_autoconstructing (boolean_or boolean_yank tag_boolean_640 boolean_dup in1 in4 boolean_yankdup print_integer print_boolean) () boolean_yankdup boolean_frominteger integer_sub boolean_or exec_flush) exec_pop () boolean_frominteger integer_pop print_integer integer_add boolean_eq exec_empty exec_s (integer_mod exec_s (boolean_invert_second_then_and boolean_or integer_mult boolean_invert_second_then_and exec_flush tag_integer_446 tag_integer_53 boolean_swap) () ()) () ())
Lexicase best errors: [0 0 0 0 1 0 1 1 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 46
Percent parens: 0.239
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_yank} {:close 0, :instruction tag_boolean_640} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction tag_integer_446} {:close 0, :instruction tag_integer_53} {:close 0, :instruction boolean_swap})
Zero cases best program: (exec_dup_times (integer_dup_items exec_k_when_autoconstructing (boolean_or boolean_yank tag_boolean_640 boolean_dup in1 in4 boolean_yankdup print_integer print_boolean) () boolean_yankdup boolean_frominteger integer_sub boolean_or exec_flush) exec_pop () boolean_frominteger integer_pop print_integer integer_add boolean_eq exec_empty exec_s (integer_mod exec_s (boolean_invert_second_then_and boolean_or integer_mult boolean_invert_second_then_and exec_flush tag_integer_446 tag_integer_53 boolean_swap) () ()) () ())
Zero cases best errors: [0 0 0 0 1 0 1 1 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 46
Percent parens: 0.239
--- Lexicase Population Statistics ---
Count of elite individuals by case: (91 91 91 91 378 91 379 386 378 386)
Population mean number of elite cases: 2.36
Count of perfect (error zero) individuals by case: (91 91 91 91 378 91 379 386 378 386)
Population mean number of perfect (error zero) cases: 2.36
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_pop})
Best program: (integer_add exec_stackdepth boolean_not in4 boolean_yankdup print_integer print_boolean boolean_yankdup boolean_frominteger integer_sub boolean_or exec_flush exec_pop ())
Errors: [0 0 0 0 1 0 1 1 1 1]
Total: 5
Mean: 0.5
Genome size: 13
Size: 15
Percent parens: 0.133
--- Population Statistics ---
Average total errors in population: 7.638
Median total errors in population: 8
Error averages by case: (0.909 0.909 0.909 0.909 0.622 0.909 0.621 0.614 0.622 0.614)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 31.813
Average program size in population (points): 40.555
Average percent parens in population: 0.213
Minimum age in population: 18.20703125
Maximum age in population: 23.48974609375
Average age in population: 21.509083984375
Median age in population: 21.58648681640625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 24
Genome diversity (% unique genomes):	 0.706
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 29
Syntactic diversity (% unique Push programs):	 0.663
Total error diversity:				 0.005
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.031
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 4715801
--- Timings ---
Current time: 1559314374548 milliseconds
Total Time:          37.9 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        28.8 seconds, 76.0%
Fitness Testing:      5.0 seconds, 13.1%
Report:               4.0 seconds, 10.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 650
Test mean error for best: 0.65000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 48                  | Program output: 48                 
Correct output: -33                 | Program output: 30                 
Correct output: 32                  | Program output: 32                 
Correct output: 24                  | Program output: 89                 
Correct output: -79                 | Program output: -20                
Correct output: -83                 | Program output: -83                
Correct output: -54                 | Program output: -54                
Correct output: -20                 | Program output: -1                 
Correct output: -79                 | Program output: 99                 
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -66                
Correct output: 64                  | Program output: 64                 
Correct output: -21                 | Program output: -21                
Correct output: 13                  | Program output: 13                 
Correct output: 35                  | Program output: 35                 
Correct output: 0                   | Program output: 92                 
Correct output: 3                   | Program output: 29                 
Correct output: 10                  | Program output: 14                 
Correct output: 21                  | Program output: 82                 
Correct output: 43                  | Program output: 76                 
Correct output: 20                  | Program output: 20                 
Correct output: 5                   | Program output: 98                 
Correct output: 6                   | Program output: 62                 
Correct output: 30                  | Program output: 100                
Correct output: 13                  | Program output: 89                 
Correct output: 21                  | Program output: 51                 
Correct output: 19                  | Program output: 79                 
Correct output: 2                   | Program output: 2                  
Correct output: 2                   | Program output: 2                  
Correct output: 1                   | Program output: 3                  
Correct output: 1                   | Program output: 84                 
Correct output: 36                  | Program output: 62                 
Correct output: 8                   | Program output: 84                 
Correct output: 41                  | Program output: 62                 
Correct output: 18                  | Program output: 18                 
Correct output: -25                 | Program output: 45                 
Correct output: -25                 | Program output: 41                 
Correct output: -31                 | Program output: 26                 
Correct output: -35                 | Program output: -35                
Correct output: -49                 | Program output: -49                
Correct output: -85                 | Program output: -24                
Correct output: -24                 | Program output: -24                
Correct output: -93                 | Program output: -93                
Correct output: -81                 | Program output: 44                 
Correct output: -56                 | Program output: 100                
Correct output: -57                 | Program output: 66                 
Correct output: -97                 | Program output: -83                
Correct output: -58                 | Program output: 92                 
Correct output: -66                 | Program output: 3                  
Correct output: -20                 | Program output: 63                 
Correct output: -91                 | Program output: 44                 
Correct output: -80                 | Program output: -80                
Correct output: -83                 | Program output: 92                 
Correct output: -42                 | Program output: 57                 
Correct output: 33                  | Program output: 33                 
Correct output: -65                 | Program output: 69                 
Correct output: -79                 | Program output: 81                 
Correct output: -86                 | Program output: -24                
Correct output: 2                   | Program output: 2                  
Correct output: -13                 | Program output: 18                 
Correct output: -90                 | Program output: -73                
Correct output: -87                 | Program output: -78                
Correct output: -51                 | Program output: 10                 
Correct output: -64                 | Program output: 67                 
Correct output: -90                 | Program output: -53                
Correct output: -34                 | Program output: -34                
Correct output: -57                 | Program output: 67                 
Correct output: -76                 | Program output: -76                
Correct output: -86                 | Program output: -86                
Correct output: 1                   | Program output: 25                 
Correct output: -98                 | Program output: -98                
Correct output: -47                 | Program output: -47                
Correct output: -34                 | Program output: -34                
Correct output: -80                 | Program output: 27                 
Correct output: -34                 | Program output: -34                
Correct output: -15                 | Program output: 36                 
Correct output: -46                 | Program output: 95                 
Correct output: 17                  | Program output: 17                 
Correct output: -78                 | Program output: 0                  
Correct output: -92                 | Program output: -92                
Correct output: -92                 | Program output: -29                
Correct output: -68                 | Program output: -68                
Correct output: -98                 | Program output: -76                
Correct output: -77                 | Program output: 64                 
Correct output: -21                 | Program output: 57                 
Correct output: -81                 | Program output: -81                
Correct output: -86                 | Program output: -35                
Correct output: -56                 | Program output: 85                 
Correct output: -12                 | Program output: 19                 
Correct output: -75                 | Program output: 60                 
Correct output: -68                 | Program output: -68                
Correct output: -97                 | Program output: 47                 
Correct output: -71                 | Program output: -17                
Correct output: -36                 | Program output: 89                 
Correct output: -8                  | Program output: 97                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_add} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction tag_integer_446} {:close 0, :instruction tag_integer_53} {:close 0, :instruction boolean_swap})
Lexicase best program: (integer_add exec_stackdepth boolean_not in4 boolean_yankdup print_integer print_boolean boolean_yankdup boolean_frominteger integer_sub boolean_or exec_flush exec_pop () boolean_frominteger integer_pop print_integer integer_add boolean_eq exec_empty exec_s (integer_mod exec_s (boolean_invert_second_then_and boolean_or integer_mult boolean_invert_second_then_and exec_flush tag_integer_446 tag_integer_53 boolean_swap) () ()) () ())
Lexicase best errors: [0 0 1 0 1 1 1 0 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 38
Percent parens: 0.211
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_add} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction tag_integer_446} {:close 0, :instruction tag_integer_53} {:close 0, :instruction boolean_swap})
Zero cases best program: (integer_add exec_stackdepth boolean_not in4 boolean_yankdup print_integer print_boolean boolean_yankdup boolean_frominteger integer_sub boolean_or exec_flush exec_pop () boolean_frominteger integer_pop print_integer integer_add boolean_eq exec_empty exec_s (integer_mod exec_s (boolean_invert_second_then_and boolean_or integer_mult boolean_invert_second_then_and exec_flush tag_integer_446 tag_integer_53 boolean_swap) () ()) () ())
Zero cases best errors: [0 0 1 0 1 1 1 0 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 38
Percent parens: 0.211
--- Lexicase Population Statistics ---
Count of elite individuals by case: (490 773 1 490 1000 180 283 490 284 283)
Population mean number of elite cases: 4.27
Count of perfect (error zero) individuals by case: (490 773 1 490 0 180 283 490 284 283)
Population mean number of perfect (error zero) cases: 3.27
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction in2} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_div} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_while} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 2, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_s} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_newline} {:close 1, :instruction exec_while} {:close 0, :instruction in1} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_min} {:close 0, :instruction tag_exec_646} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_yankdup})
Best program: (in2 boolean_rot print_integer integer_shove integer_div integer_fromboolean exec_while (integer_shove integer_stackdepth integer_dec exec_swap (boolean_invert_second_then_and integer_min) () boolean_dup boolean_dup exec_do*times (exec_yank exec_k (boolean_flush exec_s (exec_y_when_autoconstructing () in4 integer_swap integer_stackdepth exec_s_when_autoconstructing (integer_dec) (exec_when (boolean_stackdepth print_newline exec_while () in1 integer_lte boolean_yank integer_inc integer_min) tag_exec_646 (boolean_empty integer_lte boolean_yankdup)) ()) () ()) ())))
Errors: [1 0 1 1 1 1 0 1 0 0]
Total: 6
Mean: 0.6
Genome size: 39
Size: 56
Percent parens: 0.304
--- Population Statistics ---
Average total errors in population: 6.726
Median total errors in population: 6
Error averages by case: (0.51 0.227 0.999 0.51 1.0 0.82 0.717 0.51 0.716 0.717)
Error minima by case: (0 0 0 0 1 0 0 0 0 0)
Average genome size in population (length): 31.24
Average program size in population (points): 39.879
Average percent parens in population: 0.214
Minimum age in population: 19.421875
Maximum age in population: 24.9954833984375
Average age in population: 23.03100238037109
Median age in population: 23.12106323242188
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 92
Genome diversity (% unique genomes):	 0.663
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 123
Syntactic diversity (% unique Push programs):	 0.618
Total error diversity:				 0.003
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.029
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 4863524
--- Timings ---
Current time: 1559314377046 milliseconds
Total Time:          40.5 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        31.0 seconds, 76.7%
Fitness Testing:      5.1 seconds, 12.6%
Report:               4.2 seconds, 10.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 650
Test mean error for best: 0.65000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 48                  | Program output: 48                 
Correct output: -33                 | Program output: 30                 
Correct output: 32                  | Program output: 32                 
Correct output: 24                  | Program output: 89                 
Correct output: -79                 | Program output: -20                
Correct output: -83                 | Program output: -83                
Correct output: -54                 | Program output: -54                
Correct output: -20                 | Program output: -1                 
Correct output: -79                 | Program output: 99                 
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -66                
Correct output: 64                  | Program output: 64                 
Correct output: -21                 | Program output: -21                
Correct output: 13                  | Program output: 13                 
Correct output: 35                  | Program output: 35                 
Correct output: 0                   | Program output: 92                 
Correct output: 3                   | Program output: 29                 
Correct output: 10                  | Program output: 14                 
Correct output: 21                  | Program output: 82                 
Correct output: 43                  | Program output: 76                 
Correct output: 20                  | Program output: 20                 
Correct output: 5                   | Program output: 98                 
Correct output: 6                   | Program output: 62                 
Correct output: 30                  | Program output: 100                
Correct output: 13                  | Program output: 89                 
Correct output: 21                  | Program output: 51                 
Correct output: 19                  | Program output: 79                 
Correct output: 2                   | Program output: 2                  
Correct output: 2                   | Program output: 2                  
Correct output: 1                   | Program output: 3                  
Correct output: 1                   | Program output: 84                 
Correct output: 36                  | Program output: 62                 
Correct output: 8                   | Program output: 84                 
Correct output: 41                  | Program output: 62                 
Correct output: 18                  | Program output: 18                 
Correct output: -25                 | Program output: 45                 
Correct output: -25                 | Program output: 41                 
Correct output: -31                 | Program output: 26                 
Correct output: -35                 | Program output: -35                
Correct output: -49                 | Program output: -49                
Correct output: -85                 | Program output: -24                
Correct output: -24                 | Program output: -24                
Correct output: -93                 | Program output: -93                
Correct output: -81                 | Program output: 44                 
Correct output: -56                 | Program output: 100                
Correct output: -57                 | Program output: 66                 
Correct output: -97                 | Program output: -83                
Correct output: -58                 | Program output: 92                 
Correct output: -66                 | Program output: 3                  
Correct output: -20                 | Program output: 63                 
Correct output: -91                 | Program output: 44                 
Correct output: -80                 | Program output: -80                
Correct output: -83                 | Program output: 92                 
Correct output: -42                 | Program output: 57                 
Correct output: 33                  | Program output: 33                 
Correct output: -65                 | Program output: 69                 
Correct output: -79                 | Program output: 81                 
Correct output: -86                 | Program output: -24                
Correct output: 2                   | Program output: 2                  
Correct output: -13                 | Program output: 18                 
Correct output: -90                 | Program output: -73                
Correct output: -87                 | Program output: -78                
Correct output: -51                 | Program output: 10                 
Correct output: -64                 | Program output: 67                 
Correct output: -90                 | Program output: -53                
Correct output: -34                 | Program output: -34                
Correct output: -57                 | Program output: 67                 
Correct output: -76                 | Program output: -76                
Correct output: -86                 | Program output: -86                
Correct output: 1                   | Program output: 25                 
Correct output: -98                 | Program output: -98                
Correct output: -47                 | Program output: -47                
Correct output: -34                 | Program output: -34                
Correct output: -80                 | Program output: 27                 
Correct output: -34                 | Program output: -34                
Correct output: -15                 | Program output: 36                 
Correct output: -46                 | Program output: 95                 
Correct output: 17                  | Program output: 17                 
Correct output: -78                 | Program output: 0                  
Correct output: -92                 | Program output: -92                
Correct output: -92                 | Program output: -29                
Correct output: -68                 | Program output: -68                
Correct output: -98                 | Program output: -76                
Correct output: -77                 | Program output: 64                 
Correct output: -21                 | Program output: 57                 
Correct output: -81                 | Program output: -81                
Correct output: -86                 | Program output: -35                
Correct output: -56                 | Program output: 85                 
Correct output: -12                 | Program output: 19                 
Correct output: -75                 | Program output: 60                 
Correct output: -68                 | Program output: -68                
Correct output: -97                 | Program output: 47                 
Correct output: -71                 | Program output: -17                
Correct output: -36                 | Program output: 89                 
Correct output: -8                  | Program output: 97                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in1} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_div} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 2, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k} {:close 1, :instruction exec_noop} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_when} {:close 0, :instruction exec_s} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_while} {:close 0, :instruction in1})
Lexicase best program: (in1 in2 print_integer print_boolean boolean_yankdup integer_sub integer_sub integer_lt exec_flush integer_div integer_fromboolean exec_while (exec_dup_times (integer_stackdepth integer_dec exec_swap (boolean_invert_second_then_and integer_min) () boolean_dup boolean_dup boolean_invert_second_then_and integer_rot integer_yankdup integer_sub) exec_do*count (exec_k (exec_noop) (integer_yank) boolean_flush boolean_stackdepth exec_empty integer_yank exec_when (exec_s (exec_dup (boolean_flush exec_dup_times (integer_fromboolean integer_rot boolean_dup_items boolean_xor integer_mod) exec_while () in1)) () ()))))
Lexicase best errors: [0 0 1 0 0 1 1 0 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 59
Percent parens: 0.254
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in1} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_div} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 2, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k} {:close 1, :instruction exec_noop} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_when} {:close 0, :instruction exec_s} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_while} {:close 0, :instruction in1})
Zero cases best program: (in1 in2 print_integer print_boolean boolean_yankdup integer_sub integer_sub integer_lt exec_flush integer_div integer_fromboolean exec_while (exec_dup_times (integer_stackdepth integer_dec exec_swap (boolean_invert_second_then_and integer_min) () boolean_dup boolean_dup boolean_invert_second_then_and integer_rot integer_yankdup integer_sub) exec_do*count (exec_k (exec_noop) (integer_yank) boolean_flush boolean_stackdepth exec_empty integer_yank exec_when (exec_s (exec_dup (boolean_flush exec_dup_times (integer_fromboolean integer_rot boolean_dup_items boolean_xor integer_mod) exec_while () in1)) () ()))))
Zero cases best errors: [0 0 1 0 0 1 1 0 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 59
Percent parens: 0.254
--- Lexicase Population Statistics ---
Count of elite individuals by case: (353 355 112 829 465 365 1000 353 112 112)
Population mean number of elite cases: 4.06
Count of perfect (error zero) individuals by case: (353 355 112 829 465 365 0 353 112 112)
Population mean number of perfect (error zero) cases: 3.06
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in1} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 2, :instruction integer_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_add} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_rot} {:close 0, :instruction tagged_853} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction tagged_265} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while})
Best program: (in1 in2 print_integer integer_shove boolean_yankdup integer_sub integer_sub boolean_or exec_flush exec_pop () boolean_frominteger integer_pop print_integer integer_add exec_yank exec_k_when_autoconstructing (boolean_stackdepth integer_mod exec_s (boolean_invert_second_then_and boolean_or integer_mult exec_dup_items exec_s_when_autoconstructing (integer_dec) (integer_dup boolean_rot) (tagged_853 integer_swap integer_stackdepth boolean_stackdepth tagged_265) boolean_rot integer_flush) (exec_do*while (exec_do*while ())) ()) ())
Errors: [0 0 1 0 0 1 1 0 1 1]
Total: 5
Mean: 0.5
Genome size: 36
Size: 48
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 6.944
Median total errors in population: 8
Error averages by case: (0.647 0.645 0.888 0.171 0.535 0.635 1.0 0.647 0.888 0.888)
Error minima by case: (0 0 0 0 0 0 1 0 0 0)
Average genome size in population (length): 30.223
Average program size in population (points): 38.781
Average percent parens in population: 0.219
Minimum age in population: 20.74609375
Maximum age in population: 26.45071411132812
Average age in population: 24.5671096496582
Median age in population: 24.60079956054688
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 75
Genome diversity (% unique genomes):	 0.701
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 77
Syntactic diversity (% unique Push programs):	 0.66
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.029
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 5017516
--- Timings ---
Current time: 1559314379383 milliseconds
Total Time:          42.8 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        33.1 seconds, 77.3%
Fitness Testing:      5.3 seconds, 12.3%
Report:               4.3 seconds, 10.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Smallest problem report - generation 17
Test total error for best: 650
Test mean error for best: 0.65000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 48                  | Program output: 48                 
Correct output: -33                 | Program output: 30                 
Correct output: 32                  | Program output: 32                 
Correct output: 24                  | Program output: 89                 
Correct output: -79                 | Program output: -20                
Correct output: -83                 | Program output: -83                
Correct output: -54                 | Program output: -54                
Correct output: -20                 | Program output: -1                 
Correct output: -79                 | Program output: 99                 
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -66                
Correct output: 64                  | Program output: 64                 
Correct output: -21                 | Program output: -21                
Correct output: 13                  | Program output: 13                 
Correct output: 35                  | Program output: 35                 
Correct output: 0                   | Program output: 92                 
Correct output: 3                   | Program output: 29                 
Correct output: 10                  | Program output: 14                 
Correct output: 21                  | Program output: 82                 
Correct output: 43                  | Program output: 76                 
Correct output: 20                  | Program output: 20                 
Correct output: 5                   | Program output: 98                 
Correct output: 6                   | Program output: 62                 
Correct output: 30                  | Program output: 100                
Correct output: 13                  | Program output: 89                 
Correct output: 21                  | Program output: 51                 
Correct output: 19                  | Program output: 79                 
Correct output: 2                   | Program output: 2                  
Correct output: 2                   | Program output: 2                  
Correct output: 1                   | Program output: 3                  
Correct output: 1                   | Program output: 84                 
Correct output: 36                  | Program output: 62                 
Correct output: 8                   | Program output: 84                 
Correct output: 41                  | Program output: 62                 
Correct output: 18                  | Program output: 18                 
Correct output: -25                 | Program output: 45                 
Correct output: -25                 | Program output: 41                 
Correct output: -31                 | Program output: 26                 
Correct output: -35                 | Program output: -35                
Correct output: -49                 | Program output: -49                
Correct output: -85                 | Program output: -24                
Correct output: -24                 | Program output: -24                
Correct output: -93                 | Program output: -93                
Correct output: -81                 | Program output: 44                 
Correct output: -56                 | Program output: 100                
Correct output: -57                 | Program output: 66                 
Correct output: -97                 | Program output: -83                
Correct output: -58                 | Program output: 92                 
Correct output: -66                 | Program output: 3                  
Correct output: -20                 | Program output: 63                 
Correct output: -91                 | Program output: 44                 
Correct output: -80                 | Program output: -80                
Correct output: -83                 | Program output: 92                 
Correct output: -42                 | Program output: 57                 
Correct output: 33                  | Program output: 33                 
Correct output: -65                 | Program output: 69                 
Correct output: -79                 | Program output: 81                 
Correct output: -86                 | Program output: -24                
Correct output: 2                   | Program output: 2                  
Correct output: -13                 | Program output: 18                 
Correct output: -90                 | Program output: -73                
Correct output: -87                 | Program output: -78                
Correct output: -51                 | Program output: 10                 
Correct output: -64                 | Program output: 67                 
Correct output: -90                 | Program output: -53                
Correct output: -34                 | Program output: -34                
Correct output: -57                 | Program output: 67                 
Correct output: -76                 | Program output: -76                
Correct output: -86                 | Program output: -86                
Correct output: 1                   | Program output: 25                 
Correct output: -98                 | Program output: -98                
Correct output: -47                 | Program output: -47                
Correct output: -34                 | Program output: -34                
Correct output: -80                 | Program output: 27                 
Correct output: -34                 | Program output: -34                
Correct output: -15                 | Program output: 36                 
Correct output: -46                 | Program output: 95                 
Correct output: 17                  | Program output: 17                 
Correct output: -78                 | Program output: 0                  
Correct output: -92                 | Program output: -92                
Correct output: -92                 | Program output: -29                
Correct output: -68                 | Program output: -68                
Correct output: -98                 | Program output: -76                
Correct output: -77                 | Program output: 64                 
Correct output: -21                 | Program output: 57                 
Correct output: -81                 | Program output: -81                
Correct output: -86                 | Program output: -35                
Correct output: -56                 | Program output: 85                 
Correct output: -12                 | Program output: 19                 
Correct output: -75                 | Program output: 60                 
Correct output: -68                 | Program output: -68                
Correct output: -97                 | Program output: 47                 
Correct output: -71                 | Program output: -17                
Correct output: -36                 | Program output: 89                 
Correct output: -8                  | Program output: 97                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 2, :instruction in1} {:close 2, :instruction in2} {:close 0, :instruction print_integer} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_265} {:close 0, :instruction boolean_rot} {:close 2, :instruction integer_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gt})
Lexicase best program: (in1 in2 print_integer print_boolean boolean_yankdup integer_sub integer_sub boolean_or exec_flush exec_pop () boolean_frominteger integer_pop integer_sub exec_do*range (integer_add boolean_eq exec_empty integer_sub integer_mod exec_s (boolean_invert_second_then_and boolean_or integer_mult boolean_invert_second_then_and integer_lte exec_k_when_autoconstructing (boolean_stackdepth tagged_265 boolean_rot integer_shove) () exec_do*while (integer_gt)) () ()))
Lexicase best errors: [1 0 0 0 1 0 0 0 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 41
Percent parens: 0.220
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 2, :instruction in1} {:close 2, :instruction in2} {:close 0, :instruction print_integer} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_265} {:close 0, :instruction boolean_rot} {:close 2, :instruction integer_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gt})
Zero cases best program: (in1 in2 print_integer print_boolean boolean_yankdup integer_sub integer_sub boolean_or exec_flush exec_pop () boolean_frominteger integer_pop integer_sub exec_do*range (integer_add boolean_eq exec_empty integer_sub integer_mod exec_s (boolean_invert_second_then_and boolean_or integer_mult boolean_invert_second_then_and integer_lte exec_k_when_autoconstructing (boolean_stackdepth tagged_265 boolean_rot integer_shove) () exec_do*while (integer_gt)) () ()))
Zero cases best errors: [1 0 0 0 1 0 0 0 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 41
Percent parens: 0.220
--- Lexicase Population Statistics ---
Count of elite individuals by case: (386 454 959 454 118 573 454 454 118 118)
Population mean number of elite cases: 4.09
Count of perfect (error zero) individuals by case: (386 454 959 454 118 573 454 454 118 118)
Population mean number of perfect (error zero) cases: 4.09
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in1} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 2, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k} {:close 1, :instruction exec_noop} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_when} {:close 0, :instruction exec_s} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_while} {:close 0, :instruction in1})
Best program: (in1 in2 print_integer print_boolean boolean_yankdup integer_sub integer_sub boolean_or exec_flush integer_shove integer_stackdepth integer_dec exec_swap (boolean_invert_second_then_and integer_min) () boolean_dup boolean_dup boolean_invert_second_then_and integer_rot integer_yankdup integer_sub exec_do*count (exec_k (exec_noop) (integer_yank) boolean_flush boolean_stackdepth exec_empty integer_yank exec_when (exec_s (exec_dup (boolean_flush exec_dup_times (integer_fromboolean integer_rot boolean_dup_items boolean_xor integer_mod) exec_while () in1)) () ())))
Errors: [1 0 0 0 1 0 0 0 1 1]
Total: 4
Mean: 0.4
Genome size: 41
Size: 54
Percent parens: 0.241
--- Population Statistics ---
Average total errors in population: 5.912
Median total errors in population: 5
Error averages by case: (0.614 0.546 0.041 0.546 0.882 0.427 0.546 0.546 0.882 0.882)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 31.439
Average program size in population (points): 40.487
Average percent parens in population: 0.220
Minimum age in population: 21.74609375
Maximum age in population: 27.99618530273438
Average age in population: 26.02800123596191
Median age in population: 26.12629699707031
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 10
Genome diversity (% unique genomes):	 0.692
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.653
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.019
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 5190387
--- Timings ---
Current time: 1559314381664 milliseconds
Total Time:          45.1 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        35.0 seconds, 77.8%
Fitness Testing:      5.4 seconds, 12.1%
Report:               4.5 seconds,  9.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Smallest problem report - generation 18
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 48                  | Program output: 98                 
Correct output: -33                 | Program output: 30                 
Correct output: 32                  | Program output: 65                 
Correct output: 24                  | Program output: 89                 
Correct output: -79                 | Program output: -20                
Correct output: -83                 | Program output: 36                 
Correct output: -54                 | Program output: -54                
Correct output: -20                 | Program output: -20                
Correct output: -79                 | Program output: 99                 
Correct output: -85                 | Program output: -54                
Correct output: -66                 | Program output: -66                
Correct output: 64                  | Program output: 64                 
Correct output: -21                 | Program output: -21                
Correct output: 13                  | Program output: 13                 
Correct output: 35                  | Program output: 35                 
Correct output: 0                   | Program output: 0                  
Correct output: 3                   | Program output: 89                 
Correct output: 10                  | Program output: 10                 
Correct output: 21                  | Program output: 21                 
Correct output: 43                  | Program output: 43                 
Correct output: 20                  | Program output: 66                 
Correct output: 5                   | Program output: 95                 
Correct output: 6                   | Program output: 50                 
Correct output: 30                  | Program output: 30                 
Correct output: 13                  | Program output: 85                 
Correct output: 21                  | Program output: 21                 
Correct output: 19                  | Program output: 99                 
Correct output: 2                   | Program output: 8                  
Correct output: 2                   | Program output: 29                 
Correct output: 1                   | Program output: 39                 
Correct output: 1                   | Program output: 84                 
Correct output: 36                  | Program output: 45                 
Correct output: 8                   | Program output: 8                  
Correct output: 41                  | Program output: 41                 
Correct output: 18                  | Program output: 48                 
Correct output: -25                 | Program output: -25                
Correct output: -25                 | Program output: 42                 
Correct output: -31                 | Program output: 76                 
Correct output: -35                 | Program output: 48                 
Correct output: -49                 | Program output: 59                 
Correct output: -85                 | Program output: 96                 
Correct output: -24                 | Program output: -7                 
Correct output: -93                 | Program output: 37                 
Correct output: -81                 | Program output: -81                
Correct output: -56                 | Program output: -11                
Correct output: -57                 | Program output: -57                
Correct output: -97                 | Program output: 71                 
Correct output: -58                 | Program output: -58                
Correct output: -66                 | Program output: 64                 
Correct output: -20                 | Program output: 97                 
Correct output: -91                 | Program output: 39                 
Correct output: -80                 | Program output: -6                 
Correct output: -83                 | Program output: 27                 
Correct output: -42                 | Program output: 67                 
Correct output: 33                  | Program output: 60                 
Correct output: -65                 | Program output: 74                 
Correct output: -79                 | Program output: 64                 
Correct output: -86                 | Program output: -86                
Correct output: 2                   | Program output: 21                 
Correct output: -13                 | Program output: 32                 
Correct output: -90                 | Program output: -42                
Correct output: -87                 | Program output: 55                 
Correct output: -51                 | Program output: -8                 
Correct output: -64                 | Program output: -40                
Correct output: -90                 | Program output: -90                
Correct output: -34                 | Program output: 54                 
Correct output: -57                 | Program output: 99                 
Correct output: -76                 | Program output: 46                 
Correct output: -86                 | Program output: 54                 
Correct output: 1                   | Program output: 1                  
Correct output: -98                 | Program output: 67                 
Correct output: -47                 | Program output: -14                
Correct output: -34                 | Program output: 80                 
Correct output: -80                 | Program output: 28                 
Correct output: -34                 | Program output: 16                 
Correct output: -15                 | Program output: -15                
Correct output: -46                 | Program output: -46                
Correct output: 17                  | Program output: 56                 
Correct output: -78                 | Program output: 20                 
Correct output: -92                 | Program output: 29                 
Correct output: -92                 | Program output: -92                
Correct output: -68                 | Program output: 2                  
Correct output: -98                 | Program output: 35                 
Correct output: -77                 | Program output: 3                  
Correct output: -21                 | Program output: 53                 
Correct output: -81                 | Program output: -76                
Correct output: -86                 | Program output: -37                
Correct output: -56                 | Program output: 84                 
Correct output: -12                 | Program output: -12                
Correct output: -75                 | Program output: -75                
Correct output: -68                 | Program output: 46                 
Correct output: -97                 | Program output: 16                 
Correct output: -71                 | Program output: -71                
Correct output: -36                 | Program output: -36                
Correct output: -8                  | Program output: 53                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in1} {:close 1, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 2, :instruction print_boolean} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 1, :instruction exec_dup} {:close 1, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_swap} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction tag_integer_446} {:close 0, :instruction tag_integer_53} {:close 0, :instruction boolean_swap})
Lexicase best program: (in1 boolean_and print_integer print_boolean exec_dup (boolean_frominteger integer_sub boolean_or exec_flush) exec_pop () boolean_frominteger integer_pop print_integer exec_dup () integer_add integer_flush exec_y_when_autoconstructing (boolean_swap) integer_shove integer_mult boolean_invert_second_then_and exec_flush tag_integer_446 tag_integer_53 boolean_swap)
Lexicase best errors: [1 0 0 1 0 1 1 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 30
Percent parens: 0.167
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in1} {:close 1, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 2, :instruction print_boolean} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 1, :instruction exec_dup} {:close 1, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_swap} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction tag_integer_446} {:close 0, :instruction tag_integer_53} {:close 0, :instruction boolean_swap})
Zero cases best program: (in1 boolean_and print_integer print_boolean exec_dup (boolean_frominteger integer_sub boolean_or exec_flush) exec_pop () boolean_frominteger integer_pop print_integer exec_dup () integer_add integer_flush exec_y_when_autoconstructing (boolean_swap) integer_shove integer_mult boolean_invert_second_then_and exec_flush tag_integer_446 tag_integer_53 boolean_swap)
Zero cases best errors: [1 0 0 1 0 1 1 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 30
Percent parens: 0.167
--- Lexicase Population Statistics ---
Count of elite individuals by case: (497 106 602 346 105 346 346 497 1000 105)
Population mean number of elite cases: 3.95
Count of perfect (error zero) individuals by case: (497 106 602 346 105 346 346 497 0 105)
Population mean number of perfect (error zero) cases: 2.95
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 1, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 1, :instruction print_integer} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gt})
Best program: (in1 boolean_and print_integer boolean_xor boolean_yankdup boolean_frominteger integer_sub boolean_or print_integer exec_pop () integer_lt integer_pop print_integer integer_add boolean_eq exec_empty exec_when (integer_mod exec_s (exec_do*count (exec_k (exec_do*while (integer_gt)) ())) () ()))
Errors: [1 0 0 1 0 1 1 1 1 0]
Total: 6
Mean: 0.6
Genome size: 23
Size: 33
Percent parens: 0.303
--- Population Statistics ---
Average total errors in population: 7.05
Median total errors in population: 7
Error averages by case: (0.503 0.894 0.398 0.654 0.895 0.654 0.654 0.503 1.0 0.895)
Error minima by case: (0 0 0 0 0 0 0 0 1 0)
Average genome size in population (length): 31.452
Average program size in population (points): 40.337
Average percent parens in population: 0.216
Minimum age in population: 22.74609375
Maximum age in population: 29.37114715576172
Average age in population: 27.51785338592529
Median age in population: 27.61151123046875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 11
Genome diversity (% unique genomes):	 0.72
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 28
Syntactic diversity (% unique Push programs):	 0.683
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.025
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 5349658
--- Timings ---
Current time: 1559314383791 milliseconds
Total Time:          47.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        36.8 seconds, 78.1%
Fitness Testing:      5.6 seconds, 11.9%
Report:               4.6 seconds,  9.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Smallest problem report - generation 19
Test total error for best: 648
Test mean error for best: 0.64800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 48                  | Program output: 48                 
Correct output: -33                 | Program output: 30                 
Correct output: 32                  | Program output: 65                 
Correct output: 24                  | Program output: 24                 
Correct output: -79                 | Program output: -79                
Correct output: -83                 | Program output: -83                
Correct output: -54                 | Program output: 74                 
Correct output: -20                 | Program output: -1                 
Correct output: -79                 | Program output: -79                
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -66                
Correct output: 64                  | Program output: 64                 
Correct output: -21                 | Program output: -21                
Correct output: 13                  | Program output: 13                 
Correct output: 35                  | Program output: 35                 
Correct output: 0                   | Program output: 91                 
Correct output: 3                   | Program output: 3                  
Correct output: 10                  | Program output: 79                 
Correct output: 21                  | Program output: 72                 
Correct output: 43                  | Program output: 93                 
Correct output: 20                  | Program output: 40                 
Correct output: 5                   | Program output: 11                 
Correct output: 6                   | Program output: 6                  
Correct output: 30                  | Program output: 36                 
Correct output: 13                  | Program output: 13                 
Correct output: 21                  | Program output: 72                 
Correct output: 19                  | Program output: 39                 
Correct output: 2                   | Program output: 100                
Correct output: 2                   | Program output: 75                 
Correct output: 1                   | Program output: 1                  
Correct output: 1                   | Program output: 1                  
Correct output: 36                  | Program output: 36                 
Correct output: 8                   | Program output: 73                 
Correct output: 41                  | Program output: 45                 
Correct output: 18                  | Program output: 83                 
Correct output: -25                 | Program output: 1                  
Correct output: -25                 | Program output: 0                  
Correct output: -31                 | Program output: -31                
Correct output: -35                 | Program output: 73                 
Correct output: -49                 | Program output: 5                  
Correct output: -85                 | Program output: -85                
Correct output: -24                 | Program output: 39                 
Correct output: -93                 | Program output: -28                
Correct output: -81                 | Program output: 74                 
Correct output: -56                 | Program output: 38                 
Correct output: -57                 | Program output: 64                 
Correct output: -97                 | Program output: -97                
Correct output: -58                 | Program output: -43                
Correct output: -66                 | Program output: -66                
Correct output: -20                 | Program output: -20                
Correct output: -91                 | Program output: -91                
Correct output: -80                 | Program output: -58                
Correct output: -83                 | Program output: -83                
Correct output: -42                 | Program output: -42                
Correct output: 33                  | Program output: 93                 
Correct output: -65                 | Program output: -65                
Correct output: -79                 | Program output: -79                
Correct output: -86                 | Program output: -30                
Correct output: 2                   | Program output: 41                 
Correct output: -13                 | Program output: -13                
Correct output: -90                 | Program output: 1                  
Correct output: -87                 | Program output: -15                
Correct output: -51                 | Program output: 95                 
Correct output: -64                 | Program output: -55                
Correct output: -90                 | Program output: -75                
Correct output: -34                 | Program output: 34                 
Correct output: -57                 | Program output: 9                  
Correct output: -76                 | Program output: 75                 
Correct output: -86                 | Program output: -59                
Correct output: 1                   | Program output: 54                 
Correct output: -98                 | Program output: -86                
Correct output: -47                 | Program output: -39                
Correct output: -34                 | Program output: -11                
Correct output: -80                 | Program output: -80                
Correct output: -34                 | Program output: -10                
Correct output: -15                 | Program output: 77                 
Correct output: -46                 | Program output: -22                
Correct output: 17                  | Program output: 63                 
Correct output: -78                 | Program output: 98                 
Correct output: -92                 | Program output: 82                 
Correct output: -92                 | Program output: 91                 
Correct output: -68                 | Program output: 86                 
Correct output: -98                 | Program output: -98                
Correct output: -77                 | Program output: -24                
Correct output: -21                 | Program output: -21                
Correct output: -81                 | Program output: 69                 
Correct output: -86                 | Program output: -86                
Correct output: -56                 | Program output: -53                
Correct output: -12                 | Program output: 2                  
Correct output: -75                 | Program output: 2                  
Correct output: -68                 | Program output: 88                 
Correct output: -97                 | Program output: 99                 
Correct output: -71                 | Program output: -40                
Correct output: -36                 | Program output: -13                
Correct output: -8                  | Program output: -8                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_swap} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_if} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_while} {:close 0, :instruction in1} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_swap})
Lexicase best program: (integer_add exec_stackdepth boolean_not in4 boolean_yankdup print_integer print_boolean boolean_yankdup boolean_frominteger integer_sub boolean_xor exec_flush exec_pop () boolean_frominteger boolean_dup exec_do*times (exec_yank exec_k (boolean_flush) (integer_sub boolean_or exec_flush) exec_pop () boolean_frominteger integer_pop print_integer integer_add boolean_eq exec_empty exec_s (integer_mod exec_s (boolean_invert_second_then_and boolean_or integer_mult exec_s (exec_y_when_autoconstructing (boolean_swap) integer_shove) (integer_gte exec_empty integer_yank exec_if (exec_k (exec_dup (boolean_flush exec_dup_times (integer_fromboolean boolean_not boolean_dup_items boolean_xor integer_mod) exec_while () in1 integer_dup_items boolean_dup exec_s_when_autoconstructing (exec_swap () ()) () ())) ()) ()) ()) () ()) () ()))
Lexicase best errors: [0 1 0 1 0 1 0 1 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 86
Percent parens: 0.326
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_swap} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_if} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_while} {:close 0, :instruction in1} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_swap})
Zero cases best program: (integer_add exec_stackdepth boolean_not in4 boolean_yankdup print_integer print_boolean boolean_yankdup boolean_frominteger integer_sub boolean_xor exec_flush exec_pop () boolean_frominteger boolean_dup exec_do*times (exec_yank exec_k (boolean_flush) (integer_sub boolean_or exec_flush) exec_pop () boolean_frominteger integer_pop print_integer integer_add boolean_eq exec_empty exec_s (integer_mod exec_s (boolean_invert_second_then_and boolean_or integer_mult exec_s (exec_y_when_autoconstructing (boolean_swap) integer_shove) (integer_gte exec_empty integer_yank exec_if (exec_k (exec_dup (boolean_flush exec_dup_times (integer_fromboolean boolean_not boolean_dup_items boolean_xor integer_mod) exec_while () in1 integer_dup_items boolean_dup exec_s_when_autoconstructing (exec_swap () ()) () ())) ()) ()) ()) () ()) () ()))
Zero cases best errors: [0 1 0 1 0 1 0 1 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 86
Percent parens: 0.326
--- Lexicase Population Statistics ---
Count of elite individuals by case: (329 239 329 376 329 376 329 239 1000 239)
Population mean number of elite cases: 3.79
Count of perfect (error zero) individuals by case: (329 239 329 376 329 376 329 239 0 239)
Population mean number of perfect (error zero) cases: 2.79
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction tag_integer_446} {:close 0, :instruction tag_integer_53} {:close 0, :instruction boolean_swap})
Best program: (integer_add exec_stackdepth boolean_not in4 boolean_yankdup print_integer print_boolean boolean_yankdup boolean_frominteger integer_sub boolean_or integer_dup_items boolean_frominteger integer_pop print_integer integer_add boolean_eq exec_empty exec_s (integer_mod exec_s (boolean_invert_second_then_and boolean_or integer_mult boolean_invert_second_then_and exec_flush tag_integer_446 tag_integer_53 boolean_swap) () ()) () ())
Errors: [0 1 0 1 0 1 0 1 1 1]
Total: 6
Mean: 0.6
Genome size: 29
Size: 36
Percent parens: 0.194
--- Population Statistics ---
Average total errors in population: 7.215
Median total errors in population: 7
Error averages by case: (0.671 0.761 0.671 0.624 0.671 0.624 0.671 0.761 1.0 0.761)
Error minima by case: (0 0 0 0 0 0 0 0 1 0)
Average genome size in population (length): 31.098
Average program size in population (points): 40.139
Average percent parens in population: 0.220
Minimum age in population: 25.91525268554688
Maximum age in population: 31.01771926879883
Average age in population: 28.95316614151001
Median age in population: 29.03774642944336
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 10
Genome diversity (% unique genomes):	 0.72
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.688
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.025
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 5506976
--- Timings ---
Current time: 1559314386044 milliseconds
Total Time:          49.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        38.7 seconds, 78.4%
Fitness Testing:      5.8 seconds, 11.7%
Report:               4.8 seconds,  9.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Smallest problem report - generation 20
Test total error for best: 648
Test mean error for best: 0.64800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 48                  | Program output: 48                 
Correct output: -33                 | Program output: 30                 
Correct output: 32                  | Program output: 65                 
Correct output: 24                  | Program output: 24                 
Correct output: -79                 | Program output: -79                
Correct output: -83                 | Program output: -83                
Correct output: -54                 | Program output: 74                 
Correct output: -20                 | Program output: -1                 
Correct output: -79                 | Program output: -79                
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -66                
Correct output: 64                  | Program output: 64                 
Correct output: -21                 | Program output: -21                
Correct output: 13                  | Program output: 13                 
Correct output: 35                  | Program output: 35                 
Correct output: 0                   | Program output: 91                 
Correct output: 3                   | Program output: 3                  
Correct output: 10                  | Program output: 79                 
Correct output: 21                  | Program output: 72                 
Correct output: 43                  | Program output: 93                 
Correct output: 20                  | Program output: 40                 
Correct output: 5                   | Program output: 11                 
Correct output: 6                   | Program output: 6                  
Correct output: 30                  | Program output: 36                 
Correct output: 13                  | Program output: 13                 
Correct output: 21                  | Program output: 72                 
Correct output: 19                  | Program output: 39                 
Correct output: 2                   | Program output: 100                
Correct output: 2                   | Program output: 75                 
Correct output: 1                   | Program output: 1                  
Correct output: 1                   | Program output: 1                  
Correct output: 36                  | Program output: 36                 
Correct output: 8                   | Program output: 73                 
Correct output: 41                  | Program output: 45                 
Correct output: 18                  | Program output: 83                 
Correct output: -25                 | Program output: 1                  
Correct output: -25                 | Program output: 0                  
Correct output: -31                 | Program output: -31                
Correct output: -35                 | Program output: 73                 
Correct output: -49                 | Program output: 5                  
Correct output: -85                 | Program output: -85                
Correct output: -24                 | Program output: 39                 
Correct output: -93                 | Program output: -28                
Correct output: -81                 | Program output: 74                 
Correct output: -56                 | Program output: 38                 
Correct output: -57                 | Program output: 64                 
Correct output: -97                 | Program output: -97                
Correct output: -58                 | Program output: -43                
Correct output: -66                 | Program output: -66                
Correct output: -20                 | Program output: -20                
Correct output: -91                 | Program output: -91                
Correct output: -80                 | Program output: -58                
Correct output: -83                 | Program output: -83                
Correct output: -42                 | Program output: -42                
Correct output: 33                  | Program output: 93                 
Correct output: -65                 | Program output: -65                
Correct output: -79                 | Program output: -79                
Correct output: -86                 | Program output: -30                
Correct output: 2                   | Program output: 41                 
Correct output: -13                 | Program output: -13                
Correct output: -90                 | Program output: 1                  
Correct output: -87                 | Program output: -15                
Correct output: -51                 | Program output: 95                 
Correct output: -64                 | Program output: -55                
Correct output: -90                 | Program output: -75                
Correct output: -34                 | Program output: 34                 
Correct output: -57                 | Program output: 9                  
Correct output: -76                 | Program output: 75                 
Correct output: -86                 | Program output: -59                
Correct output: 1                   | Program output: 54                 
Correct output: -98                 | Program output: -86                
Correct output: -47                 | Program output: -39                
Correct output: -34                 | Program output: -11                
Correct output: -80                 | Program output: -80                
Correct output: -34                 | Program output: -10                
Correct output: -15                 | Program output: 77                 
Correct output: -46                 | Program output: -22                
Correct output: 17                  | Program output: 63                 
Correct output: -78                 | Program output: 98                 
Correct output: -92                 | Program output: 82                 
Correct output: -92                 | Program output: 91                 
Correct output: -68                 | Program output: 86                 
Correct output: -98                 | Program output: -98                
Correct output: -77                 | Program output: -24                
Correct output: -21                 | Program output: -21                
Correct output: -81                 | Program output: 69                 
Correct output: -86                 | Program output: -86                
Correct output: -56                 | Program output: -53                
Correct output: -12                 | Program output: 2                  
Correct output: -75                 | Program output: 2                  
Correct output: -68                 | Program output: 88                 
Correct output: -97                 | Program output: 99                 
Correct output: -71                 | Program output: -40                
Correct output: -36                 | Program output: -13                
Correct output: -8                  | Program output: -8                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in1} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_min} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction tag_integer_446} {:close 0, :instruction tag_integer_53} {:close 0, :instruction boolean_swap})
Lexicase best program: (integer_add exec_stackdepth boolean_not in4 boolean_yankdup in1 in3 in4 boolean_yankdup print_integer print_boolean boolean_yankdup boolean_frominteger integer_sub integer_min exec_flush exec_pop () boolean_frominteger integer_yank print_integer integer_add boolean_eq boolean_yank exec_s (integer_mod exec_s (boolean_invert_second_then_and boolean_or integer_mult boolean_invert_second_then_and exec_flush tag_integer_446 tag_integer_53 boolean_swap) () ()) () ())
Lexicase best errors: [1 0 1 0 1 1 1 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 42
Percent parens: 0.190
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in1} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_min} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction tag_integer_446} {:close 0, :instruction tag_integer_53} {:close 0, :instruction boolean_swap})
Zero cases best program: (integer_add exec_stackdepth boolean_not in4 boolean_yankdup in1 in3 in4 boolean_yankdup print_integer print_boolean boolean_yankdup boolean_frominteger integer_sub integer_min exec_flush exec_pop () boolean_frominteger integer_yank print_integer integer_add boolean_eq boolean_yank exec_s (integer_mod exec_s (boolean_invert_second_then_and boolean_or integer_mult boolean_invert_second_then_and exec_flush tag_integer_446 tag_integer_53 boolean_swap) () ()) () ())
Zero cases best errors: [1 0 1 0 1 1 1 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 42
Percent parens: 0.190
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 418 321 418 196 196 197 418 418 935)
Population mean number of elite cases: 4.52
Count of perfect (error zero) individuals by case: (0 418 321 418 196 196 197 418 418 935)
Population mean number of perfect (error zero) cases: 3.52
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_k} {:close 2, :instruction boolean_dup_times} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction tagged_265} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_swap})
Best program: (integer_add exec_stackdepth boolean_not in4 boolean_yankdup print_integer exec_flush boolean_yankdup boolean_frominteger integer_sub boolean_or exec_flush exec_pop () boolean_frominteger integer_pop print_integer integer_add boolean_eq exec_k (boolean_dup_times) () integer_yank exec_y (boolean_stackdepth tagged_265) boolean_rot integer_flush integer_mult boolean_swap)
Errors: [1 0 1 0 1 1 1 0 0 0]
Total: 5
Mean: 0.5
Genome size: 28
Size: 33
Percent parens: 0.152
--- Population Statistics ---
Average total errors in population: 6.483
Median total errors in population: 6
Error averages by case: (1.0 0.582 0.679 0.582 0.804 0.804 0.803 0.582 0.582 0.065)
Error minima by case: (1 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 30.299
Average program size in population (points): 39.019
Average percent parens in population: 0.217
Minimum age in population: 27.031005859375
Maximum age in population: 32.49859237670898
Average age in population: 30.43806582260132
Median age in population: 30.4769983291626
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 8
Genome diversity (% unique genomes):	 0.731
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.699
Total error diversity:				 0.005
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.036
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 5668686
--- Timings ---
Current time: 1559314388295 milliseconds
Total Time:          51.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        40.6 seconds, 78.6%
Fitness Testing:      5.9 seconds, 11.5%
Report:               5.0 seconds,  9.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Smallest problem report - generation 21
Test total error for best: 648
Test mean error for best: 0.64800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 48                  | Program output: 48                 
Correct output: -33                 | Program output: 30                 
Correct output: 32                  | Program output: 65                 
Correct output: 24                  | Program output: 24                 
Correct output: -79                 | Program output: -79                
Correct output: -83                 | Program output: -83                
Correct output: -54                 | Program output: 74                 
Correct output: -20                 | Program output: -1                 
Correct output: -79                 | Program output: -79                
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -66                
Correct output: 64                  | Program output: 64                 
Correct output: -21                 | Program output: -21                
Correct output: 13                  | Program output: 13                 
Correct output: 35                  | Program output: 35                 
Correct output: 0                   | Program output: 91                 
Correct output: 3                   | Program output: 3                  
Correct output: 10                  | Program output: 79                 
Correct output: 21                  | Program output: 72                 
Correct output: 43                  | Program output: 93                 
Correct output: 20                  | Program output: 40                 
Correct output: 5                   | Program output: 11                 
Correct output: 6                   | Program output: 6                  
Correct output: 30                  | Program output: 36                 
Correct output: 13                  | Program output: 13                 
Correct output: 21                  | Program output: 72                 
Correct output: 19                  | Program output: 39                 
Correct output: 2                   | Program output: 100                
Correct output: 2                   | Program output: 75                 
Correct output: 1                   | Program output: 1                  
Correct output: 1                   | Program output: 1                  
Correct output: 36                  | Program output: 36                 
Correct output: 8                   | Program output: 73                 
Correct output: 41                  | Program output: 45                 
Correct output: 18                  | Program output: 83                 
Correct output: -25                 | Program output: 1                  
Correct output: -25                 | Program output: 0                  
Correct output: -31                 | Program output: -31                
Correct output: -35                 | Program output: 73                 
Correct output: -49                 | Program output: 5                  
Correct output: -85                 | Program output: -85                
Correct output: -24                 | Program output: 39                 
Correct output: -93                 | Program output: -28                
Correct output: -81                 | Program output: 74                 
Correct output: -56                 | Program output: 38                 
Correct output: -57                 | Program output: 64                 
Correct output: -97                 | Program output: -97                
Correct output: -58                 | Program output: -43                
Correct output: -66                 | Program output: -66                
Correct output: -20                 | Program output: -20                
Correct output: -91                 | Program output: -91                
Correct output: -80                 | Program output: -58                
Correct output: -83                 | Program output: -83                
Correct output: -42                 | Program output: -42                
Correct output: 33                  | Program output: 93                 
Correct output: -65                 | Program output: -65                
Correct output: -79                 | Program output: -79                
Correct output: -86                 | Program output: -30                
Correct output: 2                   | Program output: 41                 
Correct output: -13                 | Program output: -13                
Correct output: -90                 | Program output: 1                  
Correct output: -87                 | Program output: -15                
Correct output: -51                 | Program output: 95                 
Correct output: -64                 | Program output: -55                
Correct output: -90                 | Program output: -75                
Correct output: -34                 | Program output: 34                 
Correct output: -57                 | Program output: 9                  
Correct output: -76                 | Program output: 75                 
Correct output: -86                 | Program output: -59                
Correct output: 1                   | Program output: 54                 
Correct output: -98                 | Program output: -86                
Correct output: -47                 | Program output: -39                
Correct output: -34                 | Program output: -11                
Correct output: -80                 | Program output: -80                
Correct output: -34                 | Program output: -10                
Correct output: -15                 | Program output: 77                 
Correct output: -46                 | Program output: -22                
Correct output: 17                  | Program output: 63                 
Correct output: -78                 | Program output: 98                 
Correct output: -92                 | Program output: 82                 
Correct output: -92                 | Program output: 91                 
Correct output: -68                 | Program output: 86                 
Correct output: -98                 | Program output: -98                
Correct output: -77                 | Program output: -24                
Correct output: -21                 | Program output: -21                
Correct output: -81                 | Program output: 69                 
Correct output: -86                 | Program output: -86                
Correct output: -56                 | Program output: -53                
Correct output: -12                 | Program output: 2                  
Correct output: -75                 | Program output: 2                  
Correct output: -68                 | Program output: 88                 
Correct output: -97                 | Program output: 99                 
Correct output: -71                 | Program output: -40                
Correct output: -36                 | Program output: -13                
Correct output: -8                  | Program output: -8                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction tag_integer_446} {:close 0, :instruction tag_integer_53} {:close 0, :instruction boolean_swap})
Lexicase best program: (integer_add exec_stackdepth boolean_not in4 boolean_yankdup print_integer print_boolean boolean_yankdup boolean_frominteger integer_sub boolean_or exec_flush exec_pop () boolean_frominteger boolean_dup_times print_integer integer_add boolean_eq exec_empty exec_s (integer_mod exec_s (boolean_invert_second_then_and boolean_or integer_mult boolean_invert_second_then_and integer_stackdepth tag_integer_446 tag_integer_53 boolean_swap) () ()) () ())
Lexicase best errors: [0 0 1 1 0 1 1 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 38
Percent parens: 0.211
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction tag_integer_446} {:close 0, :instruction tag_integer_53} {:close 0, :instruction boolean_swap})
Zero cases best program: (integer_add exec_stackdepth boolean_not in4 boolean_yankdup print_integer print_boolean boolean_yankdup boolean_frominteger integer_sub boolean_or exec_flush exec_pop () boolean_frominteger boolean_dup_times print_integer integer_add boolean_eq exec_empty exec_s (integer_mod exec_s (boolean_invert_second_then_and boolean_or integer_mult boolean_invert_second_then_and integer_stackdepth tag_integer_446 tag_integer_53 boolean_swap) () ()) () ())
Zero cases best errors: [0 0 1 1 0 1 1 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 38
Percent parens: 0.211
--- Lexicase Population Statistics ---
Count of elite individuals by case: (459 459 114 368 941 368 114 1000 459 369)
Population mean number of elite cases: 4.65
Count of perfect (error zero) individuals by case: (459 459 114 368 941 368 114 0 459 369)
Population mean number of perfect (error zero) cases: 3.65
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction tag_integer_443} {:close 0, :instruction tag_integer_53} {:close 0, :instruction boolean_swap})
Best program: (integer_add exec_stackdepth boolean_not in4 boolean_yankdup print_integer print_boolean boolean_yankdup boolean_frominteger integer_sub boolean_yankdup boolean_frominteger integer_sub boolean_or exec_flush exec_pop () boolean_frominteger integer_pop print_integer integer_add boolean_eq exec_empty exec_s (integer_mod exec_s (integer_lt boolean_or integer_mult boolean_invert_second_then_and exec_flush tag_integer_443 tag_integer_53 boolean_swap) () ()) () ())
Errors: [0 0 1 1 0 1 1 1 0 1]
Total: 6
Mean: 0.6
Genome size: 33
Size: 41
Percent parens: 0.195
--- Population Statistics ---
Average total errors in population: 6.349
Median total errors in population: 6
Error averages by case: (0.541 0.541 0.886 0.632 0.059 0.632 0.886 1.0 0.541 0.631)
Error minima by case: (0 0 0 0 0 0 0 1 0 0)
Average genome size in population (length): 29.575
Average program size in population (points): 37.978
Average percent parens in population: 0.214
Minimum age in population: 28.7308349609375
Maximum age in population: 33.94562149047852
Average age in population: 31.96521115875244
Median age in population: 32.0591139793396
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 9
Genome diversity (% unique genomes):	 0.74
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.701
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.033
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 5833236
--- Timings ---
Current time: 1559314390633 milliseconds
Total Time:          54.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        42.7 seconds, 79.0%
Fitness Testing:      6.1 seconds, 11.3%
Report:               5.2 seconds,  9.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Smallest problem report - generation 22
Test total error for best: 648
Test mean error for best: 0.64800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 48                  | Program output: 48                 
Correct output: -33                 | Program output: 30                 
Correct output: 32                  | Program output: 65                 
Correct output: 24                  | Program output: 24                 
Correct output: -79                 | Program output: -79                
Correct output: -83                 | Program output: -83                
Correct output: -54                 | Program output: 74                 
Correct output: -20                 | Program output: -1                 
Correct output: -79                 | Program output: -79                
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -66                
Correct output: 64                  | Program output: 64                 
Correct output: -21                 | Program output: -21                
Correct output: 13                  | Program output: 13                 
Correct output: 35                  | Program output: 35                 
Correct output: 0                   | Program output: 91                 
Correct output: 3                   | Program output: 3                  
Correct output: 10                  | Program output: 79                 
Correct output: 21                  | Program output: 72                 
Correct output: 43                  | Program output: 93                 
Correct output: 20                  | Program output: 40                 
Correct output: 5                   | Program output: 11                 
Correct output: 6                   | Program output: 6                  
Correct output: 30                  | Program output: 36                 
Correct output: 13                  | Program output: 13                 
Correct output: 21                  | Program output: 72                 
Correct output: 19                  | Program output: 39                 
Correct output: 2                   | Program output: 100                
Correct output: 2                   | Program output: 75                 
Correct output: 1                   | Program output: 1                  
Correct output: 1                   | Program output: 1                  
Correct output: 36                  | Program output: 36                 
Correct output: 8                   | Program output: 73                 
Correct output: 41                  | Program output: 45                 
Correct output: 18                  | Program output: 83                 
Correct output: -25                 | Program output: 1                  
Correct output: -25                 | Program output: 0                  
Correct output: -31                 | Program output: -31                
Correct output: -35                 | Program output: 73                 
Correct output: -49                 | Program output: 5                  
Correct output: -85                 | Program output: -85                
Correct output: -24                 | Program output: 39                 
Correct output: -93                 | Program output: -28                
Correct output: -81                 | Program output: 74                 
Correct output: -56                 | Program output: 38                 
Correct output: -57                 | Program output: 64                 
Correct output: -97                 | Program output: -97                
Correct output: -58                 | Program output: -43                
Correct output: -66                 | Program output: -66                
Correct output: -20                 | Program output: -20                
Correct output: -91                 | Program output: -91                
Correct output: -80                 | Program output: -58                
Correct output: -83                 | Program output: -83                
Correct output: -42                 | Program output: -42                
Correct output: 33                  | Program output: 93                 
Correct output: -65                 | Program output: -65                
Correct output: -79                 | Program output: -79                
Correct output: -86                 | Program output: -30                
Correct output: 2                   | Program output: 41                 
Correct output: -13                 | Program output: -13                
Correct output: -90                 | Program output: 1                  
Correct output: -87                 | Program output: -15                
Correct output: -51                 | Program output: 95                 
Correct output: -64                 | Program output: -55                
Correct output: -90                 | Program output: -75                
Correct output: -34                 | Program output: 34                 
Correct output: -57                 | Program output: 9                  
Correct output: -76                 | Program output: 75                 
Correct output: -86                 | Program output: -59                
Correct output: 1                   | Program output: 54                 
Correct output: -98                 | Program output: -86                
Correct output: -47                 | Program output: -39                
Correct output: -34                 | Program output: -11                
Correct output: -80                 | Program output: -80                
Correct output: -34                 | Program output: -10                
Correct output: -15                 | Program output: 77                 
Correct output: -46                 | Program output: -22                
Correct output: 17                  | Program output: 63                 
Correct output: -78                 | Program output: 98                 
Correct output: -92                 | Program output: 82                 
Correct output: -92                 | Program output: 91                 
Correct output: -68                 | Program output: 86                 
Correct output: -98                 | Program output: -98                
Correct output: -77                 | Program output: -24                
Correct output: -21                 | Program output: -21                
Correct output: -81                 | Program output: 69                 
Correct output: -86                 | Program output: -86                
Correct output: -56                 | Program output: -53                
Correct output: -12                 | Program output: 2                  
Correct output: -75                 | Program output: 2                  
Correct output: -68                 | Program output: 88                 
Correct output: -97                 | Program output: 99                 
Correct output: -71                 | Program output: -40                
Correct output: -36                 | Program output: -13                
Correct output: -8                  | Program output: -8                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 1, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction print_integer} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_flush} {:close 1, :instruction integer_min} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 2, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_stackdepth})
Lexicase best program: (integer_add exec_stackdepth boolean_not in4 boolean_yankdup print_integer print_boolean boolean_yankdup boolean_frominteger integer_sub boolean_or exec_flush integer_min exec_swap (boolean_invert_second_then_and integer_min) () boolean_dup integer_stackdepth boolean_invert_second_then_and integer_rot exec_noop integer_pop print_integer integer_add boolean_eq exec_empty exec_s (integer_mod exec_s (exec_do*count (exec_k (exec_do*while (integer_stackdepth)) ())) () ()) () ())
Lexicase best errors: [1 0 0 0 1 1 0 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 46
Percent parens: 0.283
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 1, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction print_integer} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_flush} {:close 1, :instruction integer_min} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 2, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_stackdepth})
Zero cases best program: (integer_add exec_stackdepth boolean_not in4 boolean_yankdup print_integer print_boolean boolean_yankdup boolean_frominteger integer_sub boolean_or exec_flush integer_min exec_swap (boolean_invert_second_then_and integer_min) () boolean_dup integer_stackdepth boolean_invert_second_then_and integer_rot exec_noop integer_pop print_integer integer_add boolean_eq exec_empty exec_s (integer_mod exec_s (exec_do*count (exec_k (exec_do*while (integer_stackdepth)) ())) () ()) () ())
Zero cases best errors: [1 0 0 0 1 1 0 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 46
Percent parens: 0.283
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 329 329 329 254 1000 329 329 369 329)
Population mean number of elite cases: 4.60
Count of perfect (error zero) individuals by case: (0 329 329 329 254 0 329 329 369 329)
Population mean number of perfect (error zero) cases: 2.60
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in1} {:close 1, :instruction in2} {:close 0, :instruction integer_add} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction tag_integer_446} {:close 0, :instruction tag_integer_53} {:close 0, :instruction boolean_swap})
Best program: (in1 in2 integer_add exec_stackdepth boolean_not in4 boolean_yankdup print_integer print_boolean boolean_yankdup boolean_frominteger exec_s (integer_mod exec_s (boolean_invert_second_then_and boolean_or integer_mult boolean_invert_second_then_and integer_dup_times tag_integer_446 tag_integer_53 boolean_swap) () ()) () ())
Errors: [1 0 0 0 1 1 0 0 1 0]
Total: 4
Mean: 0.4
Genome size: 22
Size: 29
Percent parens: 0.241
--- Population Statistics ---
Average total errors in population: 7.403
Median total errors in population: 9
Error averages by case: (1.0 0.671 0.671 0.671 0.746 1.0 0.671 0.671 0.631 0.671)
Error minima by case: (1 0 0 0 0 1 0 0 0 0)
Average genome size in population (length): 29.507
Average program size in population (points): 38.112
Average percent parens in population: 0.219
Minimum age in population: 30.15460205078125
Maximum age in population: 35.30601739883423
Average age in population: 33.47772728729248
Median age in population: 33.56003856658936
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 9
Genome diversity (% unique genomes):	 0.765
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.721
Total error diversity:				 0.003
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.028
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 6004602
--- Timings ---
Current time: 1559314393031 milliseconds
Total Time:          56.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        44.7 seconds, 79.2%
Fitness Testing:      6.3 seconds, 11.1%
Report:               5.3 seconds,  9.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
;;******************************
;; -*- Smallest problem report - generation 23
Test total error for best: 650
Test mean error for best: 0.65000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 48                  | Program output: 48                 
Correct output: -33                 | Program output: 30                 
Correct output: 32                  | Program output: 32                 
Correct output: 24                  | Program output: 89                 
Correct output: -79                 | Program output: -20                
Correct output: -83                 | Program output: -83                
Correct output: -54                 | Program output: -54                
Correct output: -20                 | Program output: -1                 
Correct output: -79                 | Program output: 99                 
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -66                
Correct output: 64                  | Program output: 64                 
Correct output: -21                 | Program output: -21                
Correct output: 13                  | Program output: 13                 
Correct output: 35                  | Program output: 35                 
Correct output: 0                   | Program output: 92                 
Correct output: 3                   | Program output: 29                 
Correct output: 10                  | Program output: 14                 
Correct output: 21                  | Program output: 82                 
Correct output: 43                  | Program output: 76                 
Correct output: 20                  | Program output: 20                 
Correct output: 5                   | Program output: 98                 
Correct output: 6                   | Program output: 62                 
Correct output: 30                  | Program output: 100                
Correct output: 13                  | Program output: 89                 
Correct output: 21                  | Program output: 51                 
Correct output: 19                  | Program output: 79                 
Correct output: 2                   | Program output: 2                  
Correct output: 2                   | Program output: 2                  
Correct output: 1                   | Program output: 3                  
Correct output: 1                   | Program output: 84                 
Correct output: 36                  | Program output: 62                 
Correct output: 8                   | Program output: 84                 
Correct output: 41                  | Program output: 62                 
Correct output: 18                  | Program output: 18                 
Correct output: -25                 | Program output: 45                 
Correct output: -25                 | Program output: 41                 
Correct output: -31                 | Program output: 26                 
Correct output: -35                 | Program output: -35                
Correct output: -49                 | Program output: -49                
Correct output: -85                 | Program output: -24                
Correct output: -24                 | Program output: -24                
Correct output: -93                 | Program output: -93                
Correct output: -81                 | Program output: 44                 
Correct output: -56                 | Program output: 100                
Correct output: -57                 | Program output: 66                 
Correct output: -97                 | Program output: -83                
Correct output: -58                 | Program output: 92                 
Correct output: -66                 | Program output: 3                  
Correct output: -20                 | Program output: 63                 
Correct output: -91                 | Program output: 44                 
Correct output: -80                 | Program output: -80                
Correct output: -83                 | Program output: 92                 
Correct output: -42                 | Program output: 57                 
Correct output: 33                  | Program output: 33                 
Correct output: -65                 | Program output: 69                 
Correct output: -79                 | Program output: 81                 
Correct output: -86                 | Program output: -24                
Correct output: 2                   | Program output: 2                  
Correct output: -13                 | Program output: 18                 
Correct output: -90                 | Program output: -73                
Correct output: -87                 | Program output: -78                
Correct output: -51                 | Program output: 10                 
Correct output: -64                 | Program output: 67                 
Correct output: -90                 | Program output: -53                
Correct output: -34                 | Program output: -34                
Correct output: -57                 | Program output: 67                 
Correct output: -76                 | Program output: -76                
Correct output: -86                 | Program output: -86                
Correct output: 1                   | Program output: 25                 
Correct output: -98                 | Program output: -98                
Correct output: -47                 | Program output: -47                
Correct output: -34                 | Program output: -34                
Correct output: -80                 | Program output: 27                 
Correct output: -34                 | Program output: -34                
Correct output: -15                 | Program output: 36                 
Correct output: -46                 | Program output: 95                 
Correct output: 17                  | Program output: 17                 
Correct output: -78                 | Program output: 0                  
Correct output: -92                 | Program output: -92                
Correct output: -92                 | Program output: -29                
Correct output: -68                 | Program output: -68                
Correct output: -98                 | Program output: -76                
Correct output: -77                 | Program output: 64                 
Correct output: -21                 | Program output: 57                 
Correct output: -81                 | Program output: -81                
Correct output: -86                 | Program output: -35                
Correct output: -56                 | Program output: 85                 
Correct output: -12                 | Program output: 19                 
Correct output: -75                 | Program output: 60                 
Correct output: -68                 | Program output: -68                
Correct output: -97                 | Program output: 47                 
Correct output: -71                 | Program output: -17                
Correct output: -36                 | Program output: 89                 
Correct output: -8                  | Program output: 97                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in1} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 2, :instruction exec_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_s})
Lexicase best program: (in1 in1 in2 print_integer exec_empty boolean_yankdup integer_sub integer_sub boolean_or exec_flush exec_pop () integer_sub exec_do*count (print_integer exec_s (integer_mod exec_s () () ()) () ()))
Lexicase best errors: [0 0 1 0 1 1 1 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 26
Percent parens: 0.346
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in1} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 2, :instruction exec_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_s})
Zero cases best program: (in1 in1 in2 print_integer exec_empty boolean_yankdup integer_sub integer_sub boolean_or exec_flush exec_pop () integer_sub exec_do*count (print_integer exec_s (integer_mod exec_s () () ()) () ()))
Zero cases best errors: [0 0 1 0 1 1 1 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 26
Percent parens: 0.346
--- Lexicase Population Statistics ---
Count of elite individuals by case: (114 114 118 116 118 1000 712 945 118 116)
Population mean number of elite cases: 3.47
Count of perfect (error zero) individuals by case: (114 114 118 116 118 0 712 945 118 116)
Population mean number of perfect (error zero) cases: 2.47
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction in1} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_s} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction tag_integer_446} {:close 0, :instruction tag_integer_53} {:close 1, :instruction tagged_185})
Best program: (integer_add exec_stackdepth boolean_not in1 in2 print_integer integer_shove boolean_yankdup integer_sub integer_sub boolean_or exec_flush exec_pop () boolean_frominteger integer_pop print_integer integer_add boolean_stackdepth integer_mod exec_s (integer_flush) (boolean_invert_second_then_and boolean_frominteger) (integer_mult boolean_invert_second_then_and exec_flush tag_integer_446 tag_integer_53 tagged_185))
Errors: [0 0 1 0 1 1 1 0 1 0]
Total: 5
Mean: 0.5
Genome size: 29
Size: 34
Percent parens: 0.147
--- Population Statistics ---
Average total errors in population: 7.529
Median total errors in population: 8
Error averages by case: (0.886 0.886 0.882 0.884 0.882 1.0 0.288 0.055 0.882 0.884)
Error minima by case: (0 0 0 0 0 1 0 0 0 0)
Average genome size in population (length): 29.213
Average program size in population (points): 37.183
Average percent parens in population: 0.206
Minimum age in population: 31.74769401550293
Maximum age in population: 37.08186721801758
Average age in population: 34.95319517207146
Median age in population: 35.04657983779907
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 11
Genome diversity (% unique genomes):	 0.703
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.661
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.034
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 6169098
--- Timings ---
Current time: 1559314395295 milliseconds
Total Time:          58.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        46.6 seconds, 79.4%
Fitness Testing:      6.4 seconds, 11.0%
Report:               5.5 seconds,  9.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
;;******************************
;; -*- Smallest problem report - generation 24
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 48                  | Program output: 98                 
Correct output: -33                 | Program output: 30                 
Correct output: 32                  | Program output: 65                 
Correct output: 24                  | Program output: 89                 
Correct output: -79                 | Program output: -20                
Correct output: -83                 | Program output: 36                 
Correct output: -54                 | Program output: -54                
Correct output: -20                 | Program output: -20                
Correct output: -79                 | Program output: 99                 
Correct output: -85                 | Program output: -54                
Correct output: -66                 | Program output: -66                
Correct output: 64                  | Program output: 64                 
Correct output: -21                 | Program output: -21                
Correct output: 13                  | Program output: 13                 
Correct output: 35                  | Program output: 35                 
Correct output: 0                   | Program output: 0                  
Correct output: 3                   | Program output: 89                 
Correct output: 10                  | Program output: 10                 
Correct output: 21                  | Program output: 21                 
Correct output: 43                  | Program output: 43                 
Correct output: 20                  | Program output: 66                 
Correct output: 5                   | Program output: 95                 
Correct output: 6                   | Program output: 50                 
Correct output: 30                  | Program output: 30                 
Correct output: 13                  | Program output: 85                 
Correct output: 21                  | Program output: 21                 
Correct output: 19                  | Program output: 99                 
Correct output: 2                   | Program output: 8                  
Correct output: 2                   | Program output: 29                 
Correct output: 1                   | Program output: 39                 
Correct output: 1                   | Program output: 84                 
Correct output: 36                  | Program output: 45                 
Correct output: 8                   | Program output: 8                  
Correct output: 41                  | Program output: 41                 
Correct output: 18                  | Program output: 48                 
Correct output: -25                 | Program output: -25                
Correct output: -25                 | Program output: 42                 
Correct output: -31                 | Program output: 76                 
Correct output: -35                 | Program output: 48                 
Correct output: -49                 | Program output: 59                 
Correct output: -85                 | Program output: 96                 
Correct output: -24                 | Program output: -7                 
Correct output: -93                 | Program output: 37                 
Correct output: -81                 | Program output: -81                
Correct output: -56                 | Program output: -11                
Correct output: -57                 | Program output: -57                
Correct output: -97                 | Program output: 71                 
Correct output: -58                 | Program output: -58                
Correct output: -66                 | Program output: 64                 
Correct output: -20                 | Program output: 97                 
Correct output: -91                 | Program output: 39                 
Correct output: -80                 | Program output: -6                 
Correct output: -83                 | Program output: 27                 
Correct output: -42                 | Program output: 67                 
Correct output: 33                  | Program output: 60                 
Correct output: -65                 | Program output: 74                 
Correct output: -79                 | Program output: 64                 
Correct output: -86                 | Program output: -86                
Correct output: 2                   | Program output: 21                 
Correct output: -13                 | Program output: 32                 
Correct output: -90                 | Program output: -42                
Correct output: -87                 | Program output: 55                 
Correct output: -51                 | Program output: -8                 
Correct output: -64                 | Program output: -40                
Correct output: -90                 | Program output: -90                
Correct output: -34                 | Program output: 54                 
Correct output: -57                 | Program output: 99                 
Correct output: -76                 | Program output: 46                 
Correct output: -86                 | Program output: 54                 
Correct output: 1                   | Program output: 1                  
Correct output: -98                 | Program output: 67                 
Correct output: -47                 | Program output: -14                
Correct output: -34                 | Program output: 80                 
Correct output: -80                 | Program output: 28                 
Correct output: -34                 | Program output: 16                 
Correct output: -15                 | Program output: -15                
Correct output: -46                 | Program output: -46                
Correct output: 17                  | Program output: 56                 
Correct output: -78                 | Program output: 20                 
Correct output: -92                 | Program output: 29                 
Correct output: -92                 | Program output: -92                
Correct output: -68                 | Program output: 2                  
Correct output: -98                 | Program output: 35                 
Correct output: -77                 | Program output: 3                  
Correct output: -21                 | Program output: 53                 
Correct output: -81                 | Program output: -76                
Correct output: -86                 | Program output: -37                
Correct output: -56                 | Program output: 84                 
Correct output: -12                 | Program output: -12                
Correct output: -75                 | Program output: -75                
Correct output: -68                 | Program output: 46                 
Correct output: -97                 | Program output: 16                 
Correct output: -71                 | Program output: -71                
Correct output: -36                 | Program output: -36                
Correct output: -8                  | Program output: 53                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 1, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_s})
Lexicase best program: (in1 boolean_and print_integer print_boolean boolean_yankdup boolean_frominteger integer_sub boolean_or exec_flush boolean_yankdup exec_when (integer_sub boolean_or exec_flush) exec_pop () boolean_frominteger integer_pop print_integer integer_add boolean_eq exec_empty exec_s (integer_mod exec_s () () ()) () ())
Lexicase best errors: [1 1 0 1 0 1 0 1 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 33
Percent parens: 0.273
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 1, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_s})
Zero cases best program: (in1 boolean_and print_integer print_boolean boolean_yankdup boolean_frominteger integer_sub boolean_or exec_flush boolean_yankdup exec_when (integer_sub boolean_or exec_flush) exec_pop () boolean_frominteger integer_pop print_integer integer_add boolean_eq exec_empty exec_s (integer_mod exec_s () () ()) () ())
Zero cases best errors: [1 1 0 1 0 1 0 1 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 33
Percent parens: 0.273
--- Lexicase Population Statistics ---
Count of elite individuals by case: (118 485 362 485 363 484 363 1000 362 1000)
Population mean number of elite cases: 5.02
Count of perfect (error zero) individuals by case: (118 485 362 485 363 484 363 0 362 0)
Population mean number of perfect (error zero) cases: 3.02
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in1} {:close 1, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 2, :instruction print_boolean} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_dup} {:close 1, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_swap} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_eq} {:close 0, :instruction tagged_265} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_gt})
Best program: (in1 boolean_and print_integer print_boolean exec_dup (boolean_frominteger integer_sub boolean_or exec_flush) exec_pop () boolean_frominteger integer_pop print_integer exec_dup () integer_pop print_integer exec_dup_times (exec_dup () integer_add) integer_flush exec_y_when_autoconstructing (boolean_swap) integer_shove exec_flush exec_pop (boolean_frominteger in3 print_integer integer_add boolean_eq tagged_265 boolean_rot integer_shove exec_do*while (integer_gt integer_gt)))
Errors: [1 1 0 1 0 1 0 1 0 1]
Total: 6
Mean: 0.6
Genome size: 36
Size: 45
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 6.978
Median total errors in population: 7
Error averages by case: (0.882 0.515 0.638 0.515 0.637 0.516 0.637 1.0 0.638 1.0)
Error minima by case: (0 0 0 0 0 0 0 1 0 1)
Average genome size in population (length): 29.172
Average program size in population (points): 37.704
Average percent parens in population: 0.221
Minimum age in population: 33.27329635620117
Maximum age in population: 38.60556828975677
Average age in population: 36.43755912351608
Median age in population: 36.51325297355652
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 11
Genome diversity (% unique genomes):	 0.611
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.576
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.015
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 6334542
--- Timings ---
Current time: 1559314397290 milliseconds
Total Time:          60.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        48.3 seconds, 79.6%
Fitness Testing:      6.6 seconds, 10.9%
Report:               5.7 seconds,  9.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
;;******************************
;; -*- Smallest problem report - generation 25
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 48                  | Program output: 98                 
Correct output: -33                 | Program output: 30                 
Correct output: 32                  | Program output: 65                 
Correct output: 24                  | Program output: 89                 
Correct output: -79                 | Program output: -20                
Correct output: -83                 | Program output: 36                 
Correct output: -54                 | Program output: -54                
Correct output: -20                 | Program output: -20                
Correct output: -79                 | Program output: 99                 
Correct output: -85                 | Program output: -54                
Correct output: -66                 | Program output: -66                
Correct output: 64                  | Program output: 64                 
Correct output: -21                 | Program output: -21                
Correct output: 13                  | Program output: 13                 
Correct output: 35                  | Program output: 35                 
Correct output: 0                   | Program output: 0                  
Correct output: 3                   | Program output: 89                 
Correct output: 10                  | Program output: 10                 
Correct output: 21                  | Program output: 21                 
Correct output: 43                  | Program output: 43                 
Correct output: 20                  | Program output: 66                 
Correct output: 5                   | Program output: 95                 
Correct output: 6                   | Program output: 50                 
Correct output: 30                  | Program output: 30                 
Correct output: 13                  | Program output: 85                 
Correct output: 21                  | Program output: 21                 
Correct output: 19                  | Program output: 99                 
Correct output: 2                   | Program output: 8                  
Correct output: 2                   | Program output: 29                 
Correct output: 1                   | Program output: 39                 
Correct output: 1                   | Program output: 84                 
Correct output: 36                  | Program output: 45                 
Correct output: 8                   | Program output: 8                  
Correct output: 41                  | Program output: 41                 
Correct output: 18                  | Program output: 48                 
Correct output: -25                 | Program output: -25                
Correct output: -25                 | Program output: 42                 
Correct output: -31                 | Program output: 76                 
Correct output: -35                 | Program output: 48                 
Correct output: -49                 | Program output: 59                 
Correct output: -85                 | Program output: 96                 
Correct output: -24                 | Program output: -7                 
Correct output: -93                 | Program output: 37                 
Correct output: -81                 | Program output: -81                
Correct output: -56                 | Program output: -11                
Correct output: -57                 | Program output: -57                
Correct output: -97                 | Program output: 71                 
Correct output: -58                 | Program output: -58                
Correct output: -66                 | Program output: 64                 
Correct output: -20                 | Program output: 97                 
Correct output: -91                 | Program output: 39                 
Correct output: -80                 | Program output: -6                 
Correct output: -83                 | Program output: 27                 
Correct output: -42                 | Program output: 67                 
Correct output: 33                  | Program output: 60                 
Correct output: -65                 | Program output: 74                 
Correct output: -79                 | Program output: 64                 
Correct output: -86                 | Program output: -86                
Correct output: 2                   | Program output: 21                 
Correct output: -13                 | Program output: 32                 
Correct output: -90                 | Program output: -42                
Correct output: -87                 | Program output: 55                 
Correct output: -51                 | Program output: -8                 
Correct output: -64                 | Program output: -40                
Correct output: -90                 | Program output: -90                
Correct output: -34                 | Program output: 54                 
Correct output: -57                 | Program output: 99                 
Correct output: -76                 | Program output: 46                 
Correct output: -86                 | Program output: 54                 
Correct output: 1                   | Program output: 1                  
Correct output: -98                 | Program output: 67                 
Correct output: -47                 | Program output: -14                
Correct output: -34                 | Program output: 80                 
Correct output: -80                 | Program output: 28                 
Correct output: -34                 | Program output: 16                 
Correct output: -15                 | Program output: -15                
Correct output: -46                 | Program output: -46                
Correct output: 17                  | Program output: 56                 
Correct output: -78                 | Program output: 20                 
Correct output: -92                 | Program output: 29                 
Correct output: -92                 | Program output: -92                
Correct output: -68                 | Program output: 2                  
Correct output: -98                 | Program output: 35                 
Correct output: -77                 | Program output: 3                  
Correct output: -21                 | Program output: 53                 
Correct output: -81                 | Program output: -76                
Correct output: -86                 | Program output: -37                
Correct output: -56                 | Program output: 84                 
Correct output: -12                 | Program output: -12                
Correct output: -75                 | Program output: -75                
Correct output: -68                 | Program output: 46                 
Correct output: -97                 | Program output: 16                 
Correct output: -71                 | Program output: -71                
Correct output: -36                 | Program output: -36                
Correct output: -8                  | Program output: 53                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in1} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_y} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_while} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_rot} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction integer_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_while} {:close 0, :instruction in1} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_swap})
Lexicase best program: (in1 boolean_and print_integer integer_shove exec_y (integer_fromboolean) exec_while (integer_shove integer_stackdepth integer_dec exec_swap (exec_pop (boolean_yank) boolean_xor boolean_dup boolean_invert_second_then_and integer_rot integer_yankdup integer_sub) (exec_do*count (exec_k (boolean_dup_times) () integer_yank integer_yank exec_when (exec_k (exec_dup (boolean_flush) exec_dup_times (integer_fromboolean integer_rot) integer_lt) (boolean_xor integer_mod) boolean_eq) integer_fromboolean integer_rot)) integer_lt boolean_xor integer_mod) exec_while () in1 integer_dup_items boolean_dup exec_s_when_autoconstructing (exec_swap () ()) () ())
Lexicase best errors: [1 1 0 1 1 0 1 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 66
Percent parens: 0.303
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in1} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_y} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_while} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_rot} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction integer_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_while} {:close 0, :instruction in1} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_swap})
Zero cases best program: (in1 boolean_and print_integer integer_shove exec_y (integer_fromboolean) exec_while (integer_shove integer_stackdepth integer_dec exec_swap (exec_pop (boolean_yank) boolean_xor boolean_dup boolean_invert_second_then_and integer_rot integer_yankdup integer_sub) (exec_do*count (exec_k (boolean_dup_times) () integer_yank integer_yank exec_when (exec_k (exec_dup (boolean_flush) exec_dup_times (integer_fromboolean integer_rot) integer_lt) (boolean_xor integer_mod) boolean_eq) integer_fromboolean integer_rot)) integer_lt boolean_xor integer_mod) exec_while () in1 integer_dup_items boolean_dup exec_s_when_autoconstructing (exec_swap () ()) () ())
Zero cases best errors: [1 1 0 1 1 0 1 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 66
Percent parens: 0.303
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 125 826 125 1000 362 125 464 609 609)
Population mean number of elite cases: 5.24
Count of perfect (error zero) individuals by case: (0 125 826 125 0 362 125 464 609 609)
Population mean number of perfect (error zero) cases: 3.24
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 1, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_s} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_flush} {:close 0, :instruction tag_integer_446} {:close 0, :instruction tag_integer_53} {:close 0, :instruction boolean_swap})
Best program: (in1 boolean_and print_integer print_boolean boolean_yankdup boolean_frominteger boolean_frominteger integer_sub boolean_or exec_flush exec_pop () boolean_frominteger integer_pop print_integer integer_add boolean_eq exec_empty exec_s (integer_mod) (exec_s (boolean_invert_second_then_and boolean_or integer_mult boolean_invert_second_then_and exec_flush) (tag_integer_446 tag_integer_53 boolean_swap) ()) ())
Errors: [1 1 0 1 1 0 1 1 0 0]
Total: 6
Mean: 0.6
Genome size: 28
Size: 36
Percent parens: 0.222
--- Population Statistics ---
Average total errors in population: 6.755
Median total errors in population: 6
Error averages by case: (1.0 0.875 0.174 0.875 1.0 0.638 0.875 0.536 0.391 0.391)
Error minima by case: (1 0 0 0 1 0 0 0 0 0)
Average genome size in population (length): 24.694
Average program size in population (points): 32.128
Average percent parens in population: 0.230
Minimum age in population: 34.84405136108398
Maximum age in population: 39.89013075828552
Average age in population: 38.01771395623684
Median age in population: 38.00443589687347
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 214
Genome diversity (% unique genomes):	 0.597
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 225
Syntactic diversity (% unique Push programs):	 0.559
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.03
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 6496349
--- Timings ---
Current time: 1559314399614 milliseconds
Total Time:          63.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        50.3 seconds, 79.8%
Fitness Testing:      6.8 seconds, 10.7%
Report:               5.8 seconds,  9.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 26
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 26
;;******************************
;; -*- Smallest problem report - generation 26
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 48                  | Program output: 98                 
Correct output: -33                 | Program output: 30                 
Correct output: 32                  | Program output: 65                 
Correct output: 24                  | Program output: 89                 
Correct output: -79                 | Program output: -20                
Correct output: -83                 | Program output: 36                 
Correct output: -54                 | Program output: -54                
Correct output: -20                 | Program output: -20                
Correct output: -79                 | Program output: 99                 
Correct output: -85                 | Program output: -54                
Correct output: -66                 | Program output: -66                
Correct output: 64                  | Program output: 64                 
Correct output: -21                 | Program output: -21                
Correct output: 13                  | Program output: 13                 
Correct output: 35                  | Program output: 35                 
Correct output: 0                   | Program output: 0                  
Correct output: 3                   | Program output: 89                 
Correct output: 10                  | Program output: 10                 
Correct output: 21                  | Program output: 21                 
Correct output: 43                  | Program output: 43                 
Correct output: 20                  | Program output: 66                 
Correct output: 5                   | Program output: 95                 
Correct output: 6                   | Program output: 50                 
Correct output: 30                  | Program output: 30                 
Correct output: 13                  | Program output: 85                 
Correct output: 21                  | Program output: 21                 
Correct output: 19                  | Program output: 99                 
Correct output: 2                   | Program output: 8                  
Correct output: 2                   | Program output: 29                 
Correct output: 1                   | Program output: 39                 
Correct output: 1                   | Program output: 84                 
Correct output: 36                  | Program output: 45                 
Correct output: 8                   | Program output: 8                  
Correct output: 41                  | Program output: 41                 
Correct output: 18                  | Program output: 48                 
Correct output: -25                 | Program output: -25                
Correct output: -25                 | Program output: 42                 
Correct output: -31                 | Program output: 76                 
Correct output: -35                 | Program output: 48                 
Correct output: -49                 | Program output: 59                 
Correct output: -85                 | Program output: 96                 
Correct output: -24                 | Program output: -7                 
Correct output: -93                 | Program output: 37                 
Correct output: -81                 | Program output: -81                
Correct output: -56                 | Program output: -11                
Correct output: -57                 | Program output: -57                
Correct output: -97                 | Program output: 71                 
Correct output: -58                 | Program output: -58                
Correct output: -66                 | Program output: 64                 
Correct output: -20                 | Program output: 97                 
Correct output: -91                 | Program output: 39                 
Correct output: -80                 | Program output: -6                 
Correct output: -83                 | Program output: 27                 
Correct output: -42                 | Program output: 67                 
Correct output: 33                  | Program output: 60                 
Correct output: -65                 | Program output: 74                 
Correct output: -79                 | Program output: 64                 
Correct output: -86                 | Program output: -86                
Correct output: 2                   | Program output: 21                 
Correct output: -13                 | Program output: 32                 
Correct output: -90                 | Program output: -42                
Correct output: -87                 | Program output: 55                 
Correct output: -51                 | Program output: -8                 
Correct output: -64                 | Program output: -40                
Correct output: -90                 | Program output: -90                
Correct output: -34                 | Program output: 54                 
Correct output: -57                 | Program output: 99                 
Correct output: -76                 | Program output: 46                 
Correct output: -86                 | Program output: 54                 
Correct output: 1                   | Program output: 1                  
Correct output: -98                 | Program output: 67                 
Correct output: -47                 | Program output: -14                
Correct output: -34                 | Program output: 80                 
Correct output: -80                 | Program output: 28                 
Correct output: -34                 | Program output: 16                 
Correct output: -15                 | Program output: -15                
Correct output: -46                 | Program output: -46                
Correct output: 17                  | Program output: 56                 
Correct output: -78                 | Program output: 20                 
Correct output: -92                 | Program output: 29                 
Correct output: -92                 | Program output: -92                
Correct output: -68                 | Program output: 2                  
Correct output: -98                 | Program output: 35                 
Correct output: -77                 | Program output: 3                  
Correct output: -21                 | Program output: 53                 
Correct output: -81                 | Program output: -76                
Correct output: -86                 | Program output: -37                
Correct output: -56                 | Program output: 84                 
Correct output: -12                 | Program output: -12                
Correct output: -75                 | Program output: -75                
Correct output: -68                 | Program output: 46                 
Correct output: -97                 | Program output: 16                 
Correct output: -71                 | Program output: -71                
Correct output: -36                 | Program output: -36                
Correct output: -8                  | Program output: 53                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in1} {:close 1, :instruction boolean_and} {:close 1, :instruction print_integer} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gt})
Lexicase best program: (in1 boolean_and print_integer print_boolean boolean_yankdup boolean_frominteger exec_empty boolean_or exec_flush exec_pop () boolean_frominteger integer_pop print_integer integer_add boolean_eq exec_empty exec_when (integer_max exec_s (exec_do*count (exec_k (exec_do*while (integer_gt)) ())) () ()))
Lexicase best errors: [0 0 0 0 1 1 0 1 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 33
Percent parens: 0.303
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in1} {:close 1, :instruction boolean_and} {:close 1, :instruction print_integer} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_when} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gt})
Zero cases best program: (in1 boolean_and print_integer print_boolean boolean_yankdup boolean_frominteger exec_empty boolean_or exec_flush exec_pop () boolean_frominteger integer_pop print_integer integer_add boolean_eq exec_empty exec_when (integer_max exec_s (exec_do*count (exec_k (exec_do*while (integer_gt)) ())) () ()))
Zero cases best errors: [0 0 0 0 1 1 0 1 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 33
Percent parens: 0.303
--- Lexicase Population Statistics ---
Count of elite individuals by case: (307 599 599 308 290 1000 599 362 362 1)
Population mean number of elite cases: 4.43
Count of perfect (error zero) individuals by case: (307 599 599 308 290 0 599 362 362 1)
Population mean number of perfect (error zero) cases: 3.43
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in1} {:close 1, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger})
Best program: (in1 boolean_and print_integer print_boolean boolean_yankdup boolean_frominteger)
Errors: [0 0 0 0 1 1 0 1 1 1]
Total: 5
Mean: 0.5
Genome size: 6
Size: 7
Percent parens: 0.143
--- Population Statistics ---
Average total errors in population: 6.573
Median total errors in population: 6
Error averages by case: (0.693 0.401 0.401 0.692 0.71 1.0 0.401 0.638 0.638 0.999)
Error minima by case: (0 0 0 0 0 1 0 0 0 0)
Average genome size in population (length): 23.579
Average program size in population (points): 30.664
Average percent parens in population: 0.229
Minimum age in population: 35.84405136108398
Maximum age in population: 41.59709787368774
Average age in population: 39.48890571936965
Median age in population: 39.54373908042908
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 209
Genome diversity (% unique genomes):	 0.549
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 231
Syntactic diversity (% unique Push programs):	 0.503
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.027
--- Run Statistics ---
Number of program evaluations used so far: 27000
Number of point (instruction) evaluations so far: 6653371
--- Timings ---
Current time: 1559314402174 milliseconds
Total Time:          65.6 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        52.6 seconds, 80.1%
Fitness Testing:      6.9 seconds, 10.6%
Report:               6.0 seconds,  9.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 26
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 27
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 27
;;******************************
;; -*- Smallest problem report - generation 27
Test total error for best: 542
Test mean error for best: 0.54200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 48                  | Program output: 48                 
Correct output: -33                 | Program output: 30                 
Correct output: 32                  | Program output: 32                 
Correct output: 24                  | Program output: 89                 
Correct output: -79                 | Program output: -20                
Correct output: -83                 | Program output: -83                
Correct output: -54                 | Program output: -54                
Correct output: -20                 | Program output: -20                
Correct output: -79                 | Program output: 99                 
Correct output: -85                 | Program output: -54                
Correct output: -66                 | Program output: -66                
Correct output: 64                  | Program output: 64                 
Correct output: -21                 | Program output: -21                
Correct output: 13                  | Program output: 13                 
Correct output: 35                  | Program output: 35                 
Correct output: 0                   | Program output: 0                  
Correct output: 3                   | Program output: 29                 
Correct output: 10                  | Program output: 14                 
Correct output: 21                  | Program output: 82                 
Correct output: 43                  | Program output: 76                 
Correct output: 20                  | Program output: 20                 
Correct output: 5                   | Program output: 98                 
Correct output: 6                   | Program output: 62                 
Correct output: 30                  | Program output: 100                
Correct output: 13                  | Program output: 89                 
Correct output: 21                  | Program output: 51                 
Correct output: 19                  | Program output: 79                 
Correct output: 2                   | Program output: 2                  
Correct output: 2                   | Program output: 2                  
Correct output: 1                   | Program output: 3                  
Correct output: 1                   | Program output: 84                 
Correct output: 36                  | Program output: 62                 
Correct output: 8                   | Program output: 84                 
Correct output: 41                  | Program output: 62                 
Correct output: 18                  | Program output: 18                 
Correct output: -25                 | Program output: -25                
Correct output: -25                 | Program output: 41                 
Correct output: -31                 | Program output: 26                 
Correct output: -35                 | Program output: -35                
Correct output: -49                 | Program output: -49                
Correct output: -85                 | Program output: -24                
Correct output: -24                 | Program output: -7                 
Correct output: -93                 | Program output: -93                
Correct output: -81                 | Program output: -81                
Correct output: -56                 | Program output: -11                
Correct output: -57                 | Program output: -57                
Correct output: -97                 | Program output: -83                
Correct output: -58                 | Program output: -58                
Correct output: -66                 | Program output: 3                  
Correct output: -20                 | Program output: 63                 
Correct output: -91                 | Program output: 44                 
Correct output: -80                 | Program output: -6                 
Correct output: -83                 | Program output: 92                 
Correct output: -42                 | Program output: 57                 
Correct output: 33                  | Program output: 33                 
Correct output: -65                 | Program output: 69                 
Correct output: -79                 | Program output: 81                 
Correct output: -86                 | Program output: -86                
Correct output: 2                   | Program output: 2                  
Correct output: -13                 | Program output: 18                 
Correct output: -90                 | Program output: -42                
Correct output: -87                 | Program output: -78                
Correct output: -51                 | Program output: -8                 
Correct output: -64                 | Program output: -40                
Correct output: -90                 | Program output: -90                
Correct output: -34                 | Program output: -34                
Correct output: -57                 | Program output: 67                 
Correct output: -76                 | Program output: -76                
Correct output: -86                 | Program output: -86                
Correct output: 1                   | Program output: 25                 
Correct output: -98                 | Program output: -98                
Correct output: -47                 | Program output: -14                
Correct output: -34                 | Program output: -34                
Correct output: -80                 | Program output: 27                 
Correct output: -34                 | Program output: -34                
Correct output: -15                 | Program output: -15                
Correct output: -46                 | Program output: -46                
Correct output: 17                  | Program output: 17                 
Correct output: -78                 | Program output: 0                  
Correct output: -92                 | Program output: -92                
Correct output: -92                 | Program output: -92                
Correct output: -68                 | Program output: -68                
Correct output: -98                 | Program output: -76                
Correct output: -77                 | Program output: 64                 
Correct output: -21                 | Program output: 57                 
Correct output: -81                 | Program output: -76                
Correct output: -86                 | Program output: -37                
Correct output: -56                 | Program output: 85                 
Correct output: -12                 | Program output: -12                
Correct output: -75                 | Program output: -75                
Correct output: -68                 | Program output: -68                
Correct output: -97                 | Program output: 47                 
Correct output: -71                 | Program output: -71                
Correct output: -36                 | Program output: -36                
Correct output: -8                  | Program output: 97                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in1} {:close 1, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s})
Lexicase best program: (in1 in2 in1 integer_dup_times print_integer print_boolean boolean_yankdup boolean_frominteger integer_sub boolean_or exec_flush exec_pop () boolean_frominteger exec_s () () ())
Lexicase best errors: [0 0 0 0 0 0 0 1 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 19
Percent parens: 0.263
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in1} {:close 1, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s})
Zero cases best program: (in1 in2 in1 integer_dup_times print_integer print_boolean boolean_yankdup boolean_frominteger integer_sub boolean_or exec_flush exec_pop () boolean_frominteger exec_s () () ())
Zero cases best errors: [0 0 0 0 0 0 0 1 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 19
Percent parens: 0.263
--- Lexicase Population Statistics ---
Count of elite individuals by case: (723 178 178 178 178 178 951 1 280 225)
Population mean number of elite cases: 3.07
Count of perfect (error zero) individuals by case: (723 178 178 178 178 178 951 1 280 225)
Population mean number of perfect (error zero) cases: 3.07
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in1} {:close 1, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s})
Best program: (in1 in2 in1 integer_dup_times print_integer print_boolean boolean_yankdup boolean_frominteger integer_sub boolean_or exec_flush exec_pop () boolean_frominteger exec_s () () ())
Errors: [0 0 0 0 0 0 0 1 1 1]
Total: 3
Mean: 0.3
Genome size: 14
Size: 19
Percent parens: 0.263
--- Population Statistics ---
Average total errors in population: 6.93
Median total errors in population: 8
Error averages by case: (0.277 0.822 0.822 0.822 0.822 0.822 0.049 0.999 0.72 0.775)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 21.019
Average program size in population (points): 27.5
Average percent parens in population: 0.236
Minimum age in population: 38.29344820976257
Maximum age in population: 42.72718209028244
Average age in population: 40.8993391764313
Median age in population: 41.00156378000975
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 216
Genome diversity (% unique genomes):	 0.51
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 234
Syntactic diversity (% unique Push programs):	 0.459
Total error diversity:				 0.007
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.037
--- Run Statistics ---
Number of program evaluations used so far: 28000
Number of point (instruction) evaluations so far: 6812414
--- Timings ---
Current time: 1559314404500 milliseconds
Total Time:          67.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        54.6 seconds, 80.4%
Fitness Testing:      7.1 seconds, 10.5%
Report:               6.1 seconds,  9.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 27
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 28
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 28
;;******************************
;; -*- Smallest problem report - generation 28
Test total error for best: 556
Test mean error for best: 0.55600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 48                  | Program output: 48                 
Correct output: -33                 | Program output: -33                
Correct output: 32                  | Program output: 65                 
Correct output: 24                  | Program output: 89                 
Correct output: -79                 | Program output: -20                
Correct output: -83                 | Program output: -83                
Correct output: -54                 | Program output: -54                
Correct output: -20                 | Program output: -20                
Correct output: -79                 | Program output: 99                 
Correct output: -85                 | Program output: -54                
Correct output: -66                 | Program output: -66                
Correct output: 64                  | Program output: 64                 
Correct output: -21                 | Program output: -21                
Correct output: 13                  | Program output: 13                 
Correct output: 35                  | Program output: 35                 
Correct output: 0                   | Program output: 0                  
Correct output: 3                   | Program output: 27                 
Correct output: 10                  | Program output: 70                 
Correct output: 21                  | Program output: 41                 
Correct output: 43                  | Program output: 50                 
Correct output: 20                  | Program output: 98                 
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 85                 
Correct output: 30                  | Program output: 79                 
Correct output: 13                  | Program output: 41                 
Correct output: 21                  | Program output: 53                 
Correct output: 19                  | Program output: 19                 
Correct output: 2                   | Program output: 40                 
Correct output: 2                   | Program output: 20                 
Correct output: 1                   | Program output: 87                 
Correct output: 1                   | Program output: 96                 
Correct output: 36                  | Program output: 45                 
Correct output: 8                   | Program output: 10                 
Correct output: 41                  | Program output: 94                 
Correct output: 18                  | Program output: 35                 
Correct output: -25                 | Program output: -25                
Correct output: -25                 | Program output: -25                
Correct output: -31                 | Program output: 44                 
Correct output: -35                 | Program output: 30                 
Correct output: -49                 | Program output: 35                 
Correct output: -85                 | Program output: -18                
Correct output: -24                 | Program output: -7                 
Correct output: -93                 | Program output: -79                
Correct output: -81                 | Program output: -81                
Correct output: -56                 | Program output: -11                
Correct output: -57                 | Program output: -57                
Correct output: -97                 | Program output: -37                
Correct output: -58                 | Program output: -58                
Correct output: -66                 | Program output: -15                
Correct output: -20                 | Program output: -13                
Correct output: -91                 | Program output: -16                
Correct output: -80                 | Program output: -6                 
Correct output: -83                 | Program output: -60                
Correct output: -42                 | Program output: 4                  
Correct output: 33                  | Program output: 38                 
Correct output: -65                 | Program output: -56                
Correct output: -79                 | Program output: -72                
Correct output: -86                 | Program output: -86                
Correct output: 2                   | Program output: 61                 
Correct output: -13                 | Program output: 33                 
Correct output: -90                 | Program output: -42                
Correct output: -87                 | Program output: -87                
Correct output: -51                 | Program output: -8                 
Correct output: -64                 | Program output: -40                
Correct output: -90                 | Program output: -90                
Correct output: -34                 | Program output: 59                 
Correct output: -57                 | Program output: -57                
Correct output: -76                 | Program output: 50                 
Correct output: -86                 | Program output: 74                 
Correct output: 1                   | Program output: 1                  
Correct output: -98                 | Program output: -4                 
Correct output: -47                 | Program output: -14                
Correct output: -34                 | Program output: 85                 
Correct output: -80                 | Program output: -27                
Correct output: -34                 | Program output: -31                
Correct output: -15                 | Program output: -15                
Correct output: -46                 | Program output: -46                
Correct output: 17                  | Program output: 88                 
Correct output: -78                 | Program output: -78                
Correct output: -92                 | Program output: -25                
Correct output: -92                 | Program output: -92                
Correct output: -68                 | Program output: 60                 
Correct output: -98                 | Program output: -32                
Correct output: -77                 | Program output: -77                
Correct output: -21                 | Program output: 82                 
Correct output: -81                 | Program output: -76                
Correct output: -86                 | Program output: -37                
Correct output: -56                 | Program output: -56                
Correct output: -12                 | Program output: -12                
Correct output: -75                 | Program output: -75                
Correct output: -68                 | Program output: -62                
Correct output: -97                 | Program output: -97                
Correct output: -71                 | Program output: -71                
Correct output: -36                 | Program output: -36                
Correct output: -8                  | Program output: 55                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in1} {:close 1, :instruction tag_integer_961} {:close 1, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s})
Lexicase best program: (in1 tag_integer_961 in1 integer_dup_times print_integer print_boolean boolean_yankdup boolean_frominteger integer_sub boolean_or exec_flush exec_pop () boolean_frominteger exec_s () () ())
Lexicase best errors: [1 0 1 1 1 0 1 0 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 19
Percent parens: 0.263
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in1} {:close 1, :instruction tag_integer_961} {:close 1, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s})
Zero cases best program: (in1 tag_integer_961 in1 integer_dup_times print_integer print_boolean boolean_yankdup boolean_frominteger integer_sub boolean_or exec_flush exec_pop () boolean_frominteger exec_s () () ())
Zero cases best errors: [1 0 1 1 1 0 1 0 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 19
Percent parens: 0.263
--- Lexicase Population Statistics ---
Count of elite individuals by case: (592 11 226 95 95 12 95 237 11 226)
Population mean number of elite cases: 1.60
Count of perfect (error zero) individuals by case: (592 11 226 95 95 12 95 237 11 226)
Population mean number of perfect (error zero) cases: 1.60
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in1} {:close 1, :instruction in3} {:close 1, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s})
Best program: (in1 in3 in1 integer_dup_times integer_dup_times print_integer print_boolean boolean_yankdup boolean_frominteger integer_sub boolean_or exec_flush exec_pop () boolean_frominteger exec_s () () ())
Errors: [1 1 0 1 1 0 1 0 1 0]
Total: 6
Mean: 0.6
Genome size: 15
Size: 20
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 8.4
Median total errors in population: 9
Error averages by case: (0.408 0.989 0.774 0.905 0.905 0.988 0.905 0.763 0.989 0.774)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 17.769
Average program size in population (points): 24.162
Average percent parens in population: 0.259
Minimum age in population: 39.61453175544739
Maximum age in population: 44.23338259011507
Average age in population: 42.67150397767872
Median age in population: 42.69434687495232
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 303
Genome diversity (% unique genomes):	 0.388
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 349
Syntactic diversity (% unique Push programs):	 0.349
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.031
--- Run Statistics ---
Number of program evaluations used so far: 29000
Number of point (instruction) evaluations so far: 7121385
--- Timings ---
Current time: 1559314407200 milliseconds
Total Time:          70.6 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        56.9 seconds, 80.6%
Fitness Testing:      7.4 seconds, 10.5%
Report:               6.2 seconds,  8.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 28
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 29
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 29
;;******************************
;; -*- Smallest problem report - generation 29
Test total error for best: 542
Test mean error for best: 0.54200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 48                  | Program output: 48                 
Correct output: -33                 | Program output: 30                 
Correct output: 32                  | Program output: 32                 
Correct output: 24                  | Program output: 89                 
Correct output: -79                 | Program output: -20                
Correct output: -83                 | Program output: -83                
Correct output: -54                 | Program output: -54                
Correct output: -20                 | Program output: -20                
Correct output: -79                 | Program output: 99                 
Correct output: -85                 | Program output: -54                
Correct output: -66                 | Program output: -66                
Correct output: 64                  | Program output: 64                 
Correct output: -21                 | Program output: -21                
Correct output: 13                  | Program output: 13                 
Correct output: 35                  | Program output: 35                 
Correct output: 0                   | Program output: 0                  
Correct output: 3                   | Program output: 29                 
Correct output: 10                  | Program output: 14                 
Correct output: 21                  | Program output: 82                 
Correct output: 43                  | Program output: 76                 
Correct output: 20                  | Program output: 20                 
Correct output: 5                   | Program output: 98                 
Correct output: 6                   | Program output: 62                 
Correct output: 30                  | Program output: 100                
Correct output: 13                  | Program output: 89                 
Correct output: 21                  | Program output: 51                 
Correct output: 19                  | Program output: 79                 
Correct output: 2                   | Program output: 2                  
Correct output: 2                   | Program output: 2                  
Correct output: 1                   | Program output: 3                  
Correct output: 1                   | Program output: 84                 
Correct output: 36                  | Program output: 62                 
Correct output: 8                   | Program output: 84                 
Correct output: 41                  | Program output: 62                 
Correct output: 18                  | Program output: 18                 
Correct output: -25                 | Program output: -25                
Correct output: -25                 | Program output: 41                 
Correct output: -31                 | Program output: 26                 
Correct output: -35                 | Program output: -35                
Correct output: -49                 | Program output: -49                
Correct output: -85                 | Program output: -24                
Correct output: -24                 | Program output: -7                 
Correct output: -93                 | Program output: -93                
Correct output: -81                 | Program output: -81                
Correct output: -56                 | Program output: -11                
Correct output: -57                 | Program output: -57                
Correct output: -97                 | Program output: -83                
Correct output: -58                 | Program output: -58                
Correct output: -66                 | Program output: 3                  
Correct output: -20                 | Program output: 63                 
Correct output: -91                 | Program output: 44                 
Correct output: -80                 | Program output: -6                 
Correct output: -83                 | Program output: 92                 
Correct output: -42                 | Program output: 57                 
Correct output: 33                  | Program output: 33                 
Correct output: -65                 | Program output: 69                 
Correct output: -79                 | Program output: 81                 
Correct output: -86                 | Program output: -86                
Correct output: 2                   | Program output: 2                  
Correct output: -13                 | Program output: 18                 
Correct output: -90                 | Program output: -42                
Correct output: -87                 | Program output: -78                
Correct output: -51                 | Program output: -8                 
Correct output: -64                 | Program output: -40                
Correct output: -90                 | Program output: -90                
Correct output: -34                 | Program output: -34                
Correct output: -57                 | Program output: 67                 
Correct output: -76                 | Program output: -76                
Correct output: -86                 | Program output: -86                
Correct output: 1                   | Program output: 25                 
Correct output: -98                 | Program output: -98                
Correct output: -47                 | Program output: -14                
Correct output: -34                 | Program output: -34                
Correct output: -80                 | Program output: 27                 
Correct output: -34                 | Program output: -34                
Correct output: -15                 | Program output: -15                
Correct output: -46                 | Program output: -46                
Correct output: 17                  | Program output: 17                 
Correct output: -78                 | Program output: 0                  
Correct output: -92                 | Program output: -92                
Correct output: -92                 | Program output: -92                
Correct output: -68                 | Program output: -68                
Correct output: -98                 | Program output: -76                
Correct output: -77                 | Program output: 64                 
Correct output: -21                 | Program output: 57                 
Correct output: -81                 | Program output: -76                
Correct output: -86                 | Program output: -37                
Correct output: -56                 | Program output: 85                 
Correct output: -12                 | Program output: -12                
Correct output: -75                 | Program output: -75                
Correct output: -68                 | Program output: -68                
Correct output: -97                 | Program output: 47                 
Correct output: -71                 | Program output: -71                
Correct output: -36                 | Program output: -36                
Correct output: -8                  | Program output: 97                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in1} {:close 1, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s})
Lexicase best program: (in1 in2 in1 integer_dup_times print_integer print_boolean boolean_yankdup boolean_frominteger integer_sub boolean_or exec_flush exec_pop () boolean_frominteger exec_s () () ())
Lexicase best errors: [0 1 0 0 0 0 0 1 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 19
Percent parens: 0.263
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in1} {:close 1, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s})
Zero cases best program: (in1 in2 in1 integer_dup_times print_integer print_boolean boolean_yankdup boolean_frominteger integer_sub boolean_or exec_flush exec_pop () boolean_frominteger exec_s () () ())
Zero cases best errors: [0 1 0 0 0 0 0 1 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 19
Percent parens: 0.263
--- Lexicase Population Statistics ---
Count of elite individuals by case: (88 294 88 778 88 482 88 294 275 275)
Population mean number of elite cases: 2.75
Count of perfect (error zero) individuals by case: (88 294 88 778 88 482 88 294 275 275)
Population mean number of perfect (error zero) cases: 2.75
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in1} {:close 1, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s})
Best program: (in1 in2 in1 integer_dup_times print_integer print_boolean boolean_yankdup boolean_not integer_sub boolean_or exec_flush exec_pop () boolean_frominteger exec_s () () ())
Errors: [0 1 0 0 0 0 0 1 1 1]
Total: 4
Mean: 0.4
Genome size: 14
Size: 19
Percent parens: 0.263
--- Population Statistics ---
Average total errors in population: 7.25
Median total errors in population: 7
Error averages by case: (0.912 0.706 0.912 0.222 0.912 0.518 0.912 0.706 0.725 0.725)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 17.741
Average program size in population (points): 23.393
Average percent parens in population: 0.240
Minimum age in population: 40.76113307476044
Maximum age in population: 46.0229499489069
Average age in population: 44.22867223599926
Median age in population: 44.23679885268211
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 227
Genome diversity (% unique genomes):	 0.363
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 239
Syntactic diversity (% unique Push programs):	 0.315
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.031
--- Run Statistics ---
Number of program evaluations used so far: 30000
Number of point (instruction) evaluations so far: 7253478
--- Timings ---
Current time: 1559314409273 milliseconds
Total Time:          72.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        58.7 seconds, 80.7%
Fitness Testing:      7.5 seconds, 10.4%
Report:               6.4 seconds,  8.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 29
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 30
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 30
;;******************************
;; -*- Smallest problem report - generation 30
Test total error for best: 486
Test mean error for best: 0.48600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 48                  | Program output: 48                 
Correct output: -33                 | Program output: -33                
Correct output: 32                  | Program output: 65                 
Correct output: 24                  | Program output: 89                 
Correct output: -79                 | Program output: -20                
Correct output: -83                 | Program output: -83                
Correct output: -54                 | Program output: -54                
Correct output: -20                 | Program output: -20                
Correct output: -79                 | Program output: 99                 
Correct output: -85                 | Program output: -54                
Correct output: -66                 | Program output: -66                
Correct output: 64                  | Program output: 64                 
Correct output: -21                 | Program output: -21                
Correct output: 13                  | Program output: 13                 
Correct output: 35                  | Program output: 35                 
Correct output: 0                   | Program output: 0                  
Correct output: 3                   | Program output: 27                 
Correct output: 10                  | Program output: 10                 
Correct output: 21                  | Program output: 21                 
Correct output: 43                  | Program output: 43                 
Correct output: 20                  | Program output: 66                 
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 50                 
Correct output: 30                  | Program output: 30                 
Correct output: 13                  | Program output: 41                 
Correct output: 21                  | Program output: 21                 
Correct output: 19                  | Program output: 19                 
Correct output: 2                   | Program output: 8                  
Correct output: 2                   | Program output: 20                 
Correct output: 1                   | Program output: 39                 
Correct output: 1                   | Program output: 84                 
Correct output: 36                  | Program output: 45                 
Correct output: 8                   | Program output: 8                  
Correct output: 41                  | Program output: 41                 
Correct output: 18                  | Program output: 35                 
Correct output: -25                 | Program output: -25                
Correct output: -25                 | Program output: -25                
Correct output: -31                 | Program output: 44                 
Correct output: -35                 | Program output: 30                 
Correct output: -49                 | Program output: 35                 
Correct output: -85                 | Program output: -18                
Correct output: -24                 | Program output: -7                 
Correct output: -93                 | Program output: -79                
Correct output: -81                 | Program output: -81                
Correct output: -56                 | Program output: -11                
Correct output: -57                 | Program output: -57                
Correct output: -97                 | Program output: -37                
Correct output: -58                 | Program output: -58                
Correct output: -66                 | Program output: -15                
Correct output: -20                 | Program output: -13                
Correct output: -91                 | Program output: -16                
Correct output: -80                 | Program output: -6                 
Correct output: -83                 | Program output: -60                
Correct output: -42                 | Program output: 4                  
Correct output: 33                  | Program output: 38                 
Correct output: -65                 | Program output: -56                
Correct output: -79                 | Program output: -72                
Correct output: -86                 | Program output: -86                
Correct output: 2                   | Program output: 21                 
Correct output: -13                 | Program output: 32                 
Correct output: -90                 | Program output: -42                
Correct output: -87                 | Program output: -87                
Correct output: -51                 | Program output: -8                 
Correct output: -64                 | Program output: -40                
Correct output: -90                 | Program output: -90                
Correct output: -34                 | Program output: 54                 
Correct output: -57                 | Program output: -57                
Correct output: -76                 | Program output: 46                 
Correct output: -86                 | Program output: 54                 
Correct output: 1                   | Program output: 1                  
Correct output: -98                 | Program output: -4                 
Correct output: -47                 | Program output: -14                
Correct output: -34                 | Program output: 80                 
Correct output: -80                 | Program output: -27                
Correct output: -34                 | Program output: -31                
Correct output: -15                 | Program output: -15                
Correct output: -46                 | Program output: -46                
Correct output: 17                  | Program output: 56                 
Correct output: -78                 | Program output: -78                
Correct output: -92                 | Program output: -25                
Correct output: -92                 | Program output: -92                
Correct output: -68                 | Program output: 2                  
Correct output: -98                 | Program output: -32                
Correct output: -77                 | Program output: -77                
Correct output: -21                 | Program output: 53                 
Correct output: -81                 | Program output: -76                
Correct output: -86                 | Program output: -37                
Correct output: -56                 | Program output: -56                
Correct output: -12                 | Program output: -12                
Correct output: -75                 | Program output: -75                
Correct output: -68                 | Program output: -62                
Correct output: -97                 | Program output: -97                
Correct output: -71                 | Program output: -71                
Correct output: -36                 | Program output: -36                
Correct output: -8                  | Program output: 53                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in1} {:close 1, :instruction in3} {:close 1, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s})
Lexicase best program: (in1 in3 in1 integer_dup_times integer_yankdup print_integer print_boolean boolean_yankdup boolean_frominteger integer_sub boolean_or exec_flush exec_pop () boolean_frominteger exec_s () () ())
Lexicase best errors: [0 0 0 0 0 0 0 0 0 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 20
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in1} {:close 1, :instruction in3} {:close 1, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s})
Zero cases best program: (in1 in3 in1 integer_dup_times integer_yankdup print_integer print_boolean boolean_yankdup boolean_frominteger integer_sub boolean_or exec_flush exec_pop () boolean_frominteger exec_s () () ())
Zero cases best errors: [0 0 0 0 0 0 0 0 0 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 20
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (719 719 939 254 9 730 719 719 946 208)
Population mean number of elite cases: 5.96
Count of perfect (error zero) individuals by case: (719 719 939 254 9 730 719 719 946 208)
Population mean number of perfect (error zero) cases: 5.96
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in1} {:close 1, :instruction in3} {:close 1, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s})
Best program: (in1 in3 in1 integer_dup_times integer_yankdup print_integer print_boolean boolean_yankdup boolean_frominteger integer_sub boolean_or exec_flush exec_pop () boolean_frominteger exec_s () () ())
Errors: [0 0 0 0 0 0 0 0 0 1]
Total: 1
Mean: 0.1
Genome size: 15
Size: 20
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 4.038
Median total errors in population: 3
Error averages by case: (0.281 0.281 0.061 0.746 0.991 0.27 0.281 0.281 0.054 0.792)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 17.184
Average program size in population (points): 22.665
Average percent parens in population: 0.240
Minimum age in population: 43.10499492287636
Maximum age in population: 47.41200153902173
Average age in population: 45.78629315509833
Median age in population: 45.86848697345704
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 186
Genome diversity (% unique genomes):	 0.413
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 203
Syntactic diversity (% unique Push programs):	 0.354
Total error diversity:				 0.009
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.043
--- Run Statistics ---
Number of program evaluations used so far: 31000
Number of point (instruction) evaluations so far: 7389870
--- Timings ---
Current time: 1559314411892 milliseconds
Total Time:          75.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        61.0 seconds, 81.0%
Fitness Testing:      7.7 seconds, 10.2%
Report:               6.5 seconds,  8.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 30
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 31
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 31
;;******************************
;; -*- Smallest problem report - generation 31
Test total error for best: 486
Test mean error for best: 0.48600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 48                  | Program output: 48                 
Correct output: -33                 | Program output: -33                
Correct output: 32                  | Program output: 65                 
Correct output: 24                  | Program output: 89                 
Correct output: -79                 | Program output: -20                
Correct output: -83                 | Program output: -83                
Correct output: -54                 | Program output: -54                
Correct output: -20                 | Program output: -20                
Correct output: -79                 | Program output: 99                 
Correct output: -85                 | Program output: -54                
Correct output: -66                 | Program output: -66                
Correct output: 64                  | Program output: 64                 
Correct output: -21                 | Program output: -21                
Correct output: 13                  | Program output: 13                 
Correct output: 35                  | Program output: 35                 
Correct output: 0                   | Program output: 0                  
Correct output: 3                   | Program output: 27                 
Correct output: 10                  | Program output: 10                 
Correct output: 21                  | Program output: 21                 
Correct output: 43                  | Program output: 43                 
Correct output: 20                  | Program output: 66                 
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 50                 
Correct output: 30                  | Program output: 30                 
Correct output: 13                  | Program output: 41                 
Correct output: 21                  | Program output: 21                 
Correct output: 19                  | Program output: 19                 
Correct output: 2                   | Program output: 8                  
Correct output: 2                   | Program output: 20                 
Correct output: 1                   | Program output: 39                 
Correct output: 1                   | Program output: 84                 
Correct output: 36                  | Program output: 45                 
Correct output: 8                   | Program output: 8                  
Correct output: 41                  | Program output: 41                 
Correct output: 18                  | Program output: 35                 
Correct output: -25                 | Program output: -25                
Correct output: -25                 | Program output: -25                
Correct output: -31                 | Program output: 44                 
Correct output: -35                 | Program output: 30                 
Correct output: -49                 | Program output: 35                 
Correct output: -85                 | Program output: -18                
Correct output: -24                 | Program output: -7                 
Correct output: -93                 | Program output: -79                
Correct output: -81                 | Program output: -81                
Correct output: -56                 | Program output: -11                
Correct output: -57                 | Program output: -57                
Correct output: -97                 | Program output: -37                
Correct output: -58                 | Program output: -58                
Correct output: -66                 | Program output: -15                
Correct output: -20                 | Program output: -13                
Correct output: -91                 | Program output: -16                
Correct output: -80                 | Program output: -6                 
Correct output: -83                 | Program output: -60                
Correct output: -42                 | Program output: 4                  
Correct output: 33                  | Program output: 38                 
Correct output: -65                 | Program output: -56                
Correct output: -79                 | Program output: -72                
Correct output: -86                 | Program output: -86                
Correct output: 2                   | Program output: 21                 
Correct output: -13                 | Program output: 32                 
Correct output: -90                 | Program output: -42                
Correct output: -87                 | Program output: -87                
Correct output: -51                 | Program output: -8                 
Correct output: -64                 | Program output: -40                
Correct output: -90                 | Program output: -90                
Correct output: -34                 | Program output: 54                 
Correct output: -57                 | Program output: -57                
Correct output: -76                 | Program output: 46                 
Correct output: -86                 | Program output: 54                 
Correct output: 1                   | Program output: 1                  
Correct output: -98                 | Program output: -4                 
Correct output: -47                 | Program output: -14                
Correct output: -34                 | Program output: 80                 
Correct output: -80                 | Program output: -27                
Correct output: -34                 | Program output: -31                
Correct output: -15                 | Program output: -15                
Correct output: -46                 | Program output: -46                
Correct output: 17                  | Program output: 56                 
Correct output: -78                 | Program output: -78                
Correct output: -92                 | Program output: -25                
Correct output: -92                 | Program output: -92                
Correct output: -68                 | Program output: 2                  
Correct output: -98                 | Program output: -32                
Correct output: -77                 | Program output: -77                
Correct output: -21                 | Program output: 53                 
Correct output: -81                 | Program output: -76                
Correct output: -86                 | Program output: -37                
Correct output: -56                 | Program output: -56                
Correct output: -12                 | Program output: -12                
Correct output: -75                 | Program output: -75                
Correct output: -68                 | Program output: -62                
Correct output: -97                 | Program output: -97                
Correct output: -71                 | Program output: -71                
Correct output: -36                 | Program output: -36                
Correct output: -8                  | Program output: 53                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in1} {:close 1, :instruction in3} {:close 1, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s})
Lexicase best program: (in1 in3 in1 integer_dup_times integer_yankdup print_integer print_boolean boolean_yankdup boolean_frominteger integer_sub boolean_or exec_flush exec_pop (boolean_frominteger exec_s () () ()))
Lexicase best errors: [0 1 0 1 0 1 0 1 0 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 20
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in1} {:close 1, :instruction in3} {:close 1, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s})
Zero cases best program: (in1 in3 in1 integer_dup_times integer_yankdup print_integer print_boolean boolean_yankdup boolean_frominteger integer_sub boolean_or exec_flush exec_pop (boolean_frominteger exec_s () () ()))
Zero cases best errors: [0 1 0 1 0 1 0 1 0 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 20
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (836 1000 839 1000 828 1000 839 1000 827 116)
Population mean number of elite cases: 8.28
Count of perfect (error zero) individuals by case: (836 0 839 0 828 0 839 0 827 116)
Population mean number of perfect (error zero) cases: 4.28
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in1} {:close 1, :instruction in3} {:close 1, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s})
Best program: (in1 in3 in1 integer_dup_times integer_yankdup print_integer print_boolean boolean_yankdup boolean_frominteger integer_sub boolean_or exec_flush exec_pop () boolean_frominteger exec_s () () ())
Errors: [0 1 0 1 0 1 0 1 0 1]
Total: 5
Mean: 0.5
Genome size: 15
Size: 20
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 5.715
Median total errors in population: 5
Error averages by case: (0.164 1.0 0.161 1.0 0.172 1.0 0.161 1.0 0.173 0.884)
Error minima by case: (0 1 0 1 0 1 0 1 0 0)
Average genome size in population (length): 16.321
Average program size in population (points): 21.624
Average percent parens in population: 0.244
Minimum age in population: 44.5275057554245
Maximum age in population: 48.13103468716145
Average age in population: 46.62529957196396
Median age in population: 46.70092208124697
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 675
Genome diversity (% unique genomes):	 0.271
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 718
Syntactic diversity (% unique Push programs):	 0.238
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.032
--- Run Statistics ---
Number of program evaluations used so far: 32000
Number of point (instruction) evaluations so far: 7519076
--- Timings ---
Current time: 1559314414090 milliseconds
Total Time:          77.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        62.9 seconds, 81.2%
Fitness Testing:      7.8 seconds, 10.1%
Report:               6.6 seconds,  8.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 31
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 32
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 32
;;******************************
;; -*- Smallest problem report - generation 32
Test total error for best: 486
Test mean error for best: 0.48600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 48                  | Program output: 48                 
Correct output: -33                 | Program output: -33                
Correct output: 32                  | Program output: 65                 
Correct output: 24                  | Program output: 89                 
Correct output: -79                 | Program output: -20                
Correct output: -83                 | Program output: -83                
Correct output: -54                 | Program output: -54                
Correct output: -20                 | Program output: -20                
Correct output: -79                 | Program output: 99                 
Correct output: -85                 | Program output: -54                
Correct output: -66                 | Program output: -66                
Correct output: 64                  | Program output: 64                 
Correct output: -21                 | Program output: -21                
Correct output: 13                  | Program output: 13                 
Correct output: 35                  | Program output: 35                 
Correct output: 0                   | Program output: 0                  
Correct output: 3                   | Program output: 27                 
Correct output: 10                  | Program output: 10                 
Correct output: 21                  | Program output: 21                 
Correct output: 43                  | Program output: 43                 
Correct output: 20                  | Program output: 66                 
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 50                 
Correct output: 30                  | Program output: 30                 
Correct output: 13                  | Program output: 41                 
Correct output: 21                  | Program output: 21                 
Correct output: 19                  | Program output: 19                 
Correct output: 2                   | Program output: 8                  
Correct output: 2                   | Program output: 20                 
Correct output: 1                   | Program output: 39                 
Correct output: 1                   | Program output: 84                 
Correct output: 36                  | Program output: 45                 
Correct output: 8                   | Program output: 8                  
Correct output: 41                  | Program output: 41                 
Correct output: 18                  | Program output: 35                 
Correct output: -25                 | Program output: -25                
Correct output: -25                 | Program output: -25                
Correct output: -31                 | Program output: 44                 
Correct output: -35                 | Program output: 30                 
Correct output: -49                 | Program output: 35                 
Correct output: -85                 | Program output: -18                
Correct output: -24                 | Program output: -7                 
Correct output: -93                 | Program output: -79                
Correct output: -81                 | Program output: -81                
Correct output: -56                 | Program output: -11                
Correct output: -57                 | Program output: -57                
Correct output: -97                 | Program output: -37                
Correct output: -58                 | Program output: -58                
Correct output: -66                 | Program output: -15                
Correct output: -20                 | Program output: -13                
Correct output: -91                 | Program output: -16                
Correct output: -80                 | Program output: -6                 
Correct output: -83                 | Program output: -60                
Correct output: -42                 | Program output: 4                  
Correct output: 33                  | Program output: 38                 
Correct output: -65                 | Program output: -56                
Correct output: -79                 | Program output: -72                
Correct output: -86                 | Program output: -86                
Correct output: 2                   | Program output: 21                 
Correct output: -13                 | Program output: 32                 
Correct output: -90                 | Program output: -42                
Correct output: -87                 | Program output: -87                
Correct output: -51                 | Program output: -8                 
Correct output: -64                 | Program output: -40                
Correct output: -90                 | Program output: -90                
Correct output: -34                 | Program output: 54                 
Correct output: -57                 | Program output: -57                
Correct output: -76                 | Program output: 46                 
Correct output: -86                 | Program output: 54                 
Correct output: 1                   | Program output: 1                  
Correct output: -98                 | Program output: -4                 
Correct output: -47                 | Program output: -14                
Correct output: -34                 | Program output: 80                 
Correct output: -80                 | Program output: -27                
Correct output: -34                 | Program output: -31                
Correct output: -15                 | Program output: -15                
Correct output: -46                 | Program output: -46                
Correct output: 17                  | Program output: 56                 
Correct output: -78                 | Program output: -78                
Correct output: -92                 | Program output: -25                
Correct output: -92                 | Program output: -92                
Correct output: -68                 | Program output: 2                  
Correct output: -98                 | Program output: -32                
Correct output: -77                 | Program output: -77                
Correct output: -21                 | Program output: 53                 
Correct output: -81                 | Program output: -76                
Correct output: -86                 | Program output: -37                
Correct output: -56                 | Program output: -56                
Correct output: -12                 | Program output: -12                
Correct output: -75                 | Program output: -75                
Correct output: -68                 | Program output: -62                
Correct output: -97                 | Program output: -97                
Correct output: -71                 | Program output: -71                
Correct output: -36                 | Program output: -36                
Correct output: -8                  | Program output: 53                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in1} {:close 1, :instruction in3} {:close 1, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s})
Lexicase best program: (in1 in3 in1 integer_dup_times integer_yankdup print_integer print_boolean boolean_yankdup boolean_frominteger integer_sub boolean_or exec_flush exec_pop () boolean_frominteger exec_s () () ())
Lexicase best errors: [0 0 0 0 1 0 0 0 1 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 20
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in1} {:close 1, :instruction in3} {:close 1, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s})
Zero cases best program: (in1 in3 in1 integer_dup_times integer_yankdup print_integer print_boolean boolean_yankdup boolean_frominteger integer_sub boolean_or exec_flush exec_pop () boolean_frominteger exec_s () () ())
Zero cases best errors: [0 0 0 0 1 0 0 0 1 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 20
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (769 774 773 769 1000 769 771 967 1000 774)
Population mean number of elite cases: 8.37
Count of perfect (error zero) individuals by case: (769 774 773 769 0 769 771 967 0 774)
Population mean number of perfect (error zero) cases: 6.37
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in1} {:close 1, :instruction in3} {:close 1, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s})
Best program: (in1 in3 in1 integer_dup_times integer_yankdup print_integer print_boolean boolean_yankdup boolean_frominteger integer_sub boolean_or exec_flush exec_pop () boolean_frominteger exec_s () () ())
Errors: [0 0 0 0 1 0 0 0 1 0]
Total: 2
Mean: 0.2
Genome size: 15
Size: 20
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 3.634
Median total errors in population: 2
Error averages by case: (0.231 0.226 0.227 0.231 1.0 0.231 0.229 0.033 1.0 0.226)
Error minima by case: (0 0 0 0 1 0 0 0 1 0)
Average genome size in population (length): 16.81
Average program size in population (points): 22.277
Average percent parens in population: 0.243
Minimum age in population: 45.66531658172607
Maximum age in population: 50.0203030500561
Average age in population: 48.13047848934494
Median age in population: 48.09786116331816
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 522
Genome diversity (% unique genomes):	 0.35
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 585
Syntactic diversity (% unique Push programs):	 0.296
Total error diversity:				 0.007
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.031
--- Run Statistics ---
Number of program evaluations used so far: 33000
Number of point (instruction) evaluations so far: 7651576
--- Timings ---
Current time: 1559314416052 milliseconds
Total Time:          79.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        64.6 seconds, 81.3%
Fitness Testing:      8.0 seconds, 10.0%
Report:               6.8 seconds,  8.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 32
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 33
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 33
;;******************************
;; -*- Smallest problem report - generation 33
Test total error for best: 486
Test mean error for best: 0.48600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 48                  | Program output: 48                 
Correct output: -33                 | Program output: -33                
Correct output: 32                  | Program output: 65                 
Correct output: 24                  | Program output: 89                 
Correct output: -79                 | Program output: -20                
Correct output: -83                 | Program output: -83                
Correct output: -54                 | Program output: -54                
Correct output: -20                 | Program output: -20                
Correct output: -79                 | Program output: 99                 
Correct output: -85                 | Program output: -54                
Correct output: -66                 | Program output: -66                
Correct output: 64                  | Program output: 64                 
Correct output: -21                 | Program output: -21                
Correct output: 13                  | Program output: 13                 
Correct output: 35                  | Program output: 35                 
Correct output: 0                   | Program output: 0                  
Correct output: 3                   | Program output: 27                 
Correct output: 10                  | Program output: 10                 
Correct output: 21                  | Program output: 21                 
Correct output: 43                  | Program output: 43                 
Correct output: 20                  | Program output: 66                 
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 50                 
Correct output: 30                  | Program output: 30                 
Correct output: 13                  | Program output: 41                 
Correct output: 21                  | Program output: 21                 
Correct output: 19                  | Program output: 19                 
Correct output: 2                   | Program output: 8                  
Correct output: 2                   | Program output: 20                 
Correct output: 1                   | Program output: 39                 
Correct output: 1                   | Program output: 84                 
Correct output: 36                  | Program output: 45                 
Correct output: 8                   | Program output: 8                  
Correct output: 41                  | Program output: 41                 
Correct output: 18                  | Program output: 35                 
Correct output: -25                 | Program output: -25                
Correct output: -25                 | Program output: -25                
Correct output: -31                 | Program output: 44                 
Correct output: -35                 | Program output: 30                 
Correct output: -49                 | Program output: 35                 
Correct output: -85                 | Program output: -18                
Correct output: -24                 | Program output: -7                 
Correct output: -93                 | Program output: -79                
Correct output: -81                 | Program output: -81                
Correct output: -56                 | Program output: -11                
Correct output: -57                 | Program output: -57                
Correct output: -97                 | Program output: -37                
Correct output: -58                 | Program output: -58                
Correct output: -66                 | Program output: -15                
Correct output: -20                 | Program output: -13                
Correct output: -91                 | Program output: -16                
Correct output: -80                 | Program output: -6                 
Correct output: -83                 | Program output: -60                
Correct output: -42                 | Program output: 4                  
Correct output: 33                  | Program output: 38                 
Correct output: -65                 | Program output: -56                
Correct output: -79                 | Program output: -72                
Correct output: -86                 | Program output: -86                
Correct output: 2                   | Program output: 21                 
Correct output: -13                 | Program output: 32                 
Correct output: -90                 | Program output: -42                
Correct output: -87                 | Program output: -87                
Correct output: -51                 | Program output: -8                 
Correct output: -64                 | Program output: -40                
Correct output: -90                 | Program output: -90                
Correct output: -34                 | Program output: 54                 
Correct output: -57                 | Program output: -57                
Correct output: -76                 | Program output: 46                 
Correct output: -86                 | Program output: 54                 
Correct output: 1                   | Program output: 1                  
Correct output: -98                 | Program output: -4                 
Correct output: -47                 | Program output: -14                
Correct output: -34                 | Program output: 80                 
Correct output: -80                 | Program output: -27                
Correct output: -34                 | Program output: -31                
Correct output: -15                 | Program output: -15                
Correct output: -46                 | Program output: -46                
Correct output: 17                  | Program output: 56                 
Correct output: -78                 | Program output: -78                
Correct output: -92                 | Program output: -25                
Correct output: -92                 | Program output: -92                
Correct output: -68                 | Program output: 2                  
Correct output: -98                 | Program output: -32                
Correct output: -77                 | Program output: -77                
Correct output: -21                 | Program output: 53                 
Correct output: -81                 | Program output: -76                
Correct output: -86                 | Program output: -37                
Correct output: -56                 | Program output: -56                
Correct output: -12                 | Program output: -12                
Correct output: -75                 | Program output: -75                
Correct output: -68                 | Program output: -62                
Correct output: -97                 | Program output: -97                
Correct output: -71                 | Program output: -71                
Correct output: -36                 | Program output: -36                
Correct output: -8                  | Program output: 53                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in1} {:close 1, :instruction in3} {:close 1, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s})
Lexicase best program: (in1 in3 in1 integer_dup_times integer_yankdup print_integer print_boolean boolean_yankdup boolean_frominteger integer_sub boolean_or exec_flush exec_pop () boolean_frominteger exec_s () () ())
Lexicase best errors: [1 0 0 1 0 1 0 1 1 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 20
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in1} {:close 1, :instruction in3} {:close 1, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s})
Zero cases best program: (in1 in3 in1 integer_dup_times integer_yankdup print_integer print_boolean boolean_yankdup boolean_frominteger integer_sub boolean_or exec_flush exec_pop () boolean_frominteger exec_s () () ())
Zero cases best errors: [1 0 0 1 0 1 0 1 1 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 20
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 960 932 1000 950 1000 959 1000 5 955)
Population mean number of elite cases: 8.76
Count of perfect (error zero) individuals by case: (0 960 932 0 950 0 959 0 5 955)
Population mean number of perfect (error zero) cases: 4.76
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in1} {:close 1, :instruction in3} {:close 1, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s})
Best program: (in1 in3 in1 integer_dup_times integer_yankdup print_integer print_boolean boolean_yankdup boolean_frominteger integer_sub boolean_or exec_flush exec_pop () boolean_frominteger exec_s () () ())
Errors: [1 0 0 1 0 1 0 1 1 0]
Total: 5
Mean: 0.5
Genome size: 15
Size: 20
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 5.239
Median total errors in population: 5
Error averages by case: (1.0 0.04 0.068 1.0 0.05 1.0 0.041 1.0 0.995 0.045)
Error minima by case: (1 0 0 1 0 1 0 1 0 0)
Average genome size in population (length): 14.883
Average program size in population (points): 19.743
Average percent parens in population: 0.245
Minimum age in population: 47.60962393507361
Maximum age in population: 51.18847324838862
Average age in population: 49.55473906858312
Median age in population: 49.59786116331816
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 525
Genome diversity (% unique genomes):	 0.289
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 637
Syntactic diversity (% unique Push programs):	 0.226
Total error diversity:				 0.006
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.025
--- Run Statistics ---
Number of program evaluations used so far: 34000
Number of point (instruction) evaluations so far: 7773954
--- Timings ---
Current time: 1559314418057 milliseconds
Total Time:          81.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        66.3 seconds, 81.4%
Fitness Testing:      8.1 seconds,  9.9%
Report:               6.9 seconds,  8.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 33
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 34
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 34
;;******************************
;; -*- Smallest problem report - generation 34
Test total error for best: 485
Test mean error for best: 0.48500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 48                  | Program output: 48                 
Correct output: -33                 | Program output: 30                 
Correct output: 32                  | Program output: 65                 
Correct output: 24                  | Program output: 24                 
Correct output: -79                 | Program output: -20                
Correct output: -83                 | Program output: -83                
Correct output: -54                 | Program output: -54                
Correct output: -20                 | Program output: -20                
Correct output: -79                 | Program output: -79                
Correct output: -85                 | Program output: -54                
Correct output: -66                 | Program output: -66                
Correct output: 64                  | Program output: 64                 
Correct output: -21                 | Program output: -21                
Correct output: 13                  | Program output: 13                 
Correct output: 35                  | Program output: 35                 
Correct output: 0                   | Program output: 0                  
Correct output: 3                   | Program output: 3                  
Correct output: 10                  | Program output: 10                 
Correct output: 21                  | Program output: 21                 
Correct output: 43                  | Program output: 43                 
Correct output: 20                  | Program output: 40                 
Correct output: 5                   | Program output: 11                 
Correct output: 6                   | Program output: 6                  
Correct output: 30                  | Program output: 30                 
Correct output: 13                  | Program output: 13                 
Correct output: 21                  | Program output: 21                 
Correct output: 19                  | Program output: 39                 
Correct output: 2                   | Program output: 8                  
Correct output: 2                   | Program output: 29                 
Correct output: 1                   | Program output: 1                  
Correct output: 1                   | Program output: 1                  
Correct output: 36                  | Program output: 36                 
Correct output: 8                   | Program output: 8                  
Correct output: 41                  | Program output: 41                 
Correct output: 18                  | Program output: 48                 
Correct output: -25                 | Program output: -25                
Correct output: -25                 | Program output: 0                  
Correct output: -31                 | Program output: -31                
Correct output: -35                 | Program output: 48                 
Correct output: -49                 | Program output: 5                  
Correct output: -85                 | Program output: -85                
Correct output: -24                 | Program output: -7                 
Correct output: -93                 | Program output: -28                
Correct output: -81                 | Program output: -81                
Correct output: -56                 | Program output: -11                
Correct output: -57                 | Program output: -57                
Correct output: -97                 | Program output: -97                
Correct output: -58                 | Program output: -58                
Correct output: -66                 | Program output: -66                
Correct output: -20                 | Program output: -20                
Correct output: -91                 | Program output: -91                
Correct output: -80                 | Program output: -6                 
Correct output: -83                 | Program output: -83                
Correct output: -42                 | Program output: -42                
Correct output: 33                  | Program output: 60                 
Correct output: -65                 | Program output: -65                
Correct output: -79                 | Program output: -79                
Correct output: -86                 | Program output: -86                
Correct output: 2                   | Program output: 21                 
Correct output: -13                 | Program output: -13                
Correct output: -90                 | Program output: -42                
Correct output: -87                 | Program output: -15                
Correct output: -51                 | Program output: -8                 
Correct output: -64                 | Program output: -40                
Correct output: -90                 | Program output: -90                
Correct output: -34                 | Program output: 34                 
Correct output: -57                 | Program output: 9                  
Correct output: -76                 | Program output: 46                 
Correct output: -86                 | Program output: -59                
Correct output: 1                   | Program output: 1                  
Correct output: -98                 | Program output: -86                
Correct output: -47                 | Program output: -14                
Correct output: -34                 | Program output: -11                
Correct output: -80                 | Program output: -80                
Correct output: -34                 | Program output: -10                
Correct output: -15                 | Program output: -15                
Correct output: -46                 | Program output: -46                
Correct output: 17                  | Program output: 56                 
Correct output: -78                 | Program output: 20                 
Correct output: -92                 | Program output: 29                 
Correct output: -92                 | Program output: -92                
Correct output: -68                 | Program output: 2                  
Correct output: -98                 | Program output: -98                
Correct output: -77                 | Program output: -24                
Correct output: -21                 | Program output: -21                
Correct output: -81                 | Program output: -76                
Correct output: -86                 | Program output: -37                
Correct output: -56                 | Program output: -53                
Correct output: -12                 | Program output: -12                
Correct output: -75                 | Program output: -75                
Correct output: -68                 | Program output: 46                 
Correct output: -97                 | Program output: 16                 
Correct output: -71                 | Program output: -71                
Correct output: -36                 | Program output: -36                
Correct output: -8                  | Program output: -8                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in1} {:close 1, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s})
Lexicase best program: (in1 in4 in1 integer_dup_times integer_yankdup print_integer print_boolean boolean_yankdup boolean_frominteger integer_sub boolean_or exec_flush exec_pop () boolean_frominteger exec_s () () ())
Lexicase best errors: [0 0 0 1 0 0 0 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 20
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in1} {:close 1, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s})
Zero cases best program: (in1 in4 in1 integer_dup_times integer_yankdup print_integer print_boolean boolean_yankdup boolean_frominteger integer_sub boolean_or exec_flush exec_pop () boolean_frominteger exec_s () () ())
Zero cases best errors: [0 0 0 1 0 0 0 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 20
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 1 638 1 1 640 640 1 1 941)
Population mean number of elite cases: 2.87
Count of perfect (error zero) individuals by case: (1 1 638 1 1 640 640 1 1 941)
Population mean number of perfect (error zero) cases: 2.87
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in1} {:close 1, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s})
Best program: (in1 in4 in1 integer_dup_times integer_yankdup print_integer print_boolean boolean_yankdup boolean_frominteger integer_sub boolean_or exec_flush exec_pop () boolean_frominteger exec_s () () ())
Errors: [0 0 0 1 0 0 0 0 1 0]
Total: 2
Mean: 0.2
Genome size: 15
Size: 20
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 7.135
Median total errors in population: 6
Error averages by case: (0.999 0.999 0.362 0.999 0.999 0.36 0.36 0.999 0.999 0.059)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 14.942
Average program size in population (points): 19.705
Average percent parens in population: 0.242
Minimum age in population: 48.97874254919589
Maximum age in population: 52.76816720585339
Average age in population: 51.07145625835168
Median age in population: 50.97286116331816
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 290
Genome diversity (% unique genomes):	 0.319
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 376
Syntactic diversity (% unique Push programs):	 0.237
Total error diversity:				 0.006
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.026
--- Run Statistics ---
Number of program evaluations used so far: 35000
Number of point (instruction) evaluations so far: 7898471
--- Timings ---
Current time: 1559314420038 milliseconds
Total Time:          83.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        68.0 seconds, 81.5%
Fitness Testing:      8.3 seconds,  9.9%
Report:               7.1 seconds,  8.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 34
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 35
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 35
;;******************************
;; -*- Smallest problem report - generation 35
Test total error for best: 485
Test mean error for best: 0.48500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 48                  | Program output: 48                 
Correct output: -33                 | Program output: 30                 
Correct output: 32                  | Program output: 65                 
Correct output: 24                  | Program output: 24                 
Correct output: -79                 | Program output: -20                
Correct output: -83                 | Program output: -83                
Correct output: -54                 | Program output: -54                
Correct output: -20                 | Program output: -20                
Correct output: -79                 | Program output: -79                
Correct output: -85                 | Program output: -54                
Correct output: -66                 | Program output: -66                
Correct output: 64                  | Program output: 64                 
Correct output: -21                 | Program output: -21                
Correct output: 13                  | Program output: 13                 
Correct output: 35                  | Program output: 35                 
Correct output: 0                   | Program output: 0                  
Correct output: 3                   | Program output: 3                  
Correct output: 10                  | Program output: 10                 
Correct output: 21                  | Program output: 21                 
Correct output: 43                  | Program output: 43                 
Correct output: 20                  | Program output: 40                 
Correct output: 5                   | Program output: 11                 
Correct output: 6                   | Program output: 6                  
Correct output: 30                  | Program output: 30                 
Correct output: 13                  | Program output: 13                 
Correct output: 21                  | Program output: 21                 
Correct output: 19                  | Program output: 39                 
Correct output: 2                   | Program output: 8                  
Correct output: 2                   | Program output: 29                 
Correct output: 1                   | Program output: 1                  
Correct output: 1                   | Program output: 1                  
Correct output: 36                  | Program output: 36                 
Correct output: 8                   | Program output: 8                  
Correct output: 41                  | Program output: 41                 
Correct output: 18                  | Program output: 48                 
Correct output: -25                 | Program output: -25                
Correct output: -25                 | Program output: 0                  
Correct output: -31                 | Program output: -31                
Correct output: -35                 | Program output: 48                 
Correct output: -49                 | Program output: 5                  
Correct output: -85                 | Program output: -85                
Correct output: -24                 | Program output: -7                 
Correct output: -93                 | Program output: -28                
Correct output: -81                 | Program output: -81                
Correct output: -56                 | Program output: -11                
Correct output: -57                 | Program output: -57                
Correct output: -97                 | Program output: -97                
Correct output: -58                 | Program output: -58                
Correct output: -66                 | Program output: -66                
Correct output: -20                 | Program output: -20                
Correct output: -91                 | Program output: -91                
Correct output: -80                 | Program output: -6                 
Correct output: -83                 | Program output: -83                
Correct output: -42                 | Program output: -42                
Correct output: 33                  | Program output: 60                 
Correct output: -65                 | Program output: -65                
Correct output: -79                 | Program output: -79                
Correct output: -86                 | Program output: -86                
Correct output: 2                   | Program output: 21                 
Correct output: -13                 | Program output: -13                
Correct output: -90                 | Program output: -42                
Correct output: -87                 | Program output: -15                
Correct output: -51                 | Program output: -8                 
Correct output: -64                 | Program output: -40                
Correct output: -90                 | Program output: -90                
Correct output: -34                 | Program output: 34                 
Correct output: -57                 | Program output: 9                  
Correct output: -76                 | Program output: 46                 
Correct output: -86                 | Program output: -59                
Correct output: 1                   | Program output: 1                  
Correct output: -98                 | Program output: -86                
Correct output: -47                 | Program output: -14                
Correct output: -34                 | Program output: -11                
Correct output: -80                 | Program output: -80                
Correct output: -34                 | Program output: -10                
Correct output: -15                 | Program output: -15                
Correct output: -46                 | Program output: -46                
Correct output: 17                  | Program output: 56                 
Correct output: -78                 | Program output: 20                 
Correct output: -92                 | Program output: 29                 
Correct output: -92                 | Program output: -92                
Correct output: -68                 | Program output: 2                  
Correct output: -98                 | Program output: -98                
Correct output: -77                 | Program output: -24                
Correct output: -21                 | Program output: -21                
Correct output: -81                 | Program output: -76                
Correct output: -86                 | Program output: -37                
Correct output: -56                 | Program output: -53                
Correct output: -12                 | Program output: -12                
Correct output: -75                 | Program output: -75                
Correct output: -68                 | Program output: 46                 
Correct output: -97                 | Program output: 16                 
Correct output: -71                 | Program output: -71                
Correct output: -36                 | Program output: -36                
Correct output: -8                  | Program output: -8                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in1} {:close 1, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s})
Lexicase best program: (in1 in4 in1 integer_dup_times integer_yankdup print_integer print_boolean boolean_yankdup boolean_frominteger integer_sub boolean_or exec_flush exec_pop () boolean_frominteger exec_s () () ())
Lexicase best errors: [0 1 0 0 0 0 0 1 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 20
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in1} {:close 1, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s})
Zero cases best program: (in1 in4 in1 integer_dup_times integer_yankdup print_integer print_boolean boolean_yankdup boolean_frominteger integer_sub boolean_or exec_flush exec_pop () boolean_frominteger exec_s () () ())
Zero cases best errors: [0 1 0 0 0 0 0 1 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 20
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (751 187 942 744 742 747 742 1 742 186)
Population mean number of elite cases: 5.78
Count of perfect (error zero) individuals by case: (751 187 942 744 742 747 742 1 742 186)
Population mean number of perfect (error zero) cases: 5.78
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in1} {:close 1, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s})
Best program: (in1 in4 in1 integer_dup_times integer_yankdup print_integer print_boolean boolean_yankdup boolean_frominteger integer_sub boolean_or exec_flush exec_pop () boolean_frominteger exec_s () () ())
Errors: [0 1 0 0 0 0 0 1 0 1]
Total: 3
Mean: 0.3
Genome size: 15
Size: 20
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 4.216
Median total errors in population: 3
Error averages by case: (0.249 0.813 0.058 0.256 0.258 0.253 0.258 0.999 0.258 0.814)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 15.005
Average program size in population (points): 19.998
Average percent parens in population: 0.250
Minimum age in population: 51.59786116331816
Maximum age in population: 53.30334848957136
Average age in population: 52.2466607581682
Median age in population: 52.59786116331816
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 613
Genome diversity (% unique genomes):	 0.198
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 650
Syntactic diversity (% unique Push programs):	 0.169
Total error diversity:				 0.008
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.039
--- Run Statistics ---
Number of program evaluations used so far: 36000
Number of point (instruction) evaluations so far: 8026132
--- Timings ---
Current time: 1559314421981 milliseconds
Total Time:          85.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        69.7 seconds, 81.6%
Fitness Testing:      8.4 seconds,  9.8%
Report:               7.2 seconds,  8.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 35
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 36
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 36
;;******************************
;; -*- Smallest problem report - generation 36
Test total error for best: 501
Test mean error for best: 0.50100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 48                  | Program output: 48                 
Correct output: -33                 | Program output: 30                 
Correct output: 32                  | Program output: 65                 
Correct output: 24                  | Program output: 24                 
Correct output: -79                 | Program output: -20                
Correct output: -83                 | Program output: -83                
Correct output: -54                 | Program output: -54                
Correct output: -20                 | Program output: -20                
Correct output: -79                 | Program output: -79                
Correct output: -85                 | Program output: -54                
Correct output: -66                 | Program output: -66                
Correct output: 64                  | Program output: 64                 
Correct output: -21                 | Program output: -21                
Correct output: 13                  | Program output: 13                 
Correct output: 35                  | Program output: 35                 
Correct output: 0                   | Program output: 0                  
Correct output: 3                   | Program output: 3                  
Correct output: 10                  | Program output: 14                 
Correct output: 21                  | Program output: 82                 
Correct output: 43                  | Program output: 76                 
Correct output: 20                  | Program output: 40                 
Correct output: 5                   | Program output: 11                 
Correct output: 6                   | Program output: 6                  
Correct output: 30                  | Program output: 100                
Correct output: 13                  | Program output: 13                 
Correct output: 21                  | Program output: 51                 
Correct output: 19                  | Program output: 39                 
Correct output: 2                   | Program output: 2                  
Correct output: 2                   | Program output: 2                  
Correct output: 1                   | Program output: 1                  
Correct output: 1                   | Program output: 1                  
Correct output: 36                  | Program output: 36                 
Correct output: 8                   | Program output: 84                 
Correct output: 41                  | Program output: 62                 
Correct output: 18                  | Program output: 18                 
Correct output: -25                 | Program output: -25                
Correct output: -25                 | Program output: 0                  
Correct output: -31                 | Program output: -31                
Correct output: -35                 | Program output: -35                
Correct output: -49                 | Program output: 5                  
Correct output: -85                 | Program output: -85                
Correct output: -24                 | Program output: -7                 
Correct output: -93                 | Program output: -28                
Correct output: -81                 | Program output: -81                
Correct output: -56                 | Program output: -11                
Correct output: -57                 | Program output: -57                
Correct output: -97                 | Program output: -97                
Correct output: -58                 | Program output: -58                
Correct output: -66                 | Program output: -66                
Correct output: -20                 | Program output: -20                
Correct output: -91                 | Program output: -91                
Correct output: -80                 | Program output: -6                 
Correct output: -83                 | Program output: -83                
Correct output: -42                 | Program output: -42                
Correct output: 33                  | Program output: 33                 
Correct output: -65                 | Program output: -65                
Correct output: -79                 | Program output: -79                
Correct output: -86                 | Program output: -86                
Correct output: 2                   | Program output: 2                  
Correct output: -13                 | Program output: -13                
Correct output: -90                 | Program output: -42                
Correct output: -87                 | Program output: -15                
Correct output: -51                 | Program output: -8                 
Correct output: -64                 | Program output: -40                
Correct output: -90                 | Program output: -90                
Correct output: -34                 | Program output: 34                 
Correct output: -57                 | Program output: 9                  
Correct output: -76                 | Program output: -76                
Correct output: -86                 | Program output: -59                
Correct output: 1                   | Program output: 25                 
Correct output: -98                 | Program output: -86                
Correct output: -47                 | Program output: -14                
Correct output: -34                 | Program output: -11                
Correct output: -80                 | Program output: -80                
Correct output: -34                 | Program output: -10                
Correct output: -15                 | Program output: -15                
Correct output: -46                 | Program output: -46                
Correct output: 17                  | Program output: 17                 
Correct output: -78                 | Program output: 0                  
Correct output: -92                 | Program output: -92                
Correct output: -92                 | Program output: -92                
Correct output: -68                 | Program output: -68                
Correct output: -98                 | Program output: -98                
Correct output: -77                 | Program output: -24                
Correct output: -21                 | Program output: -21                
Correct output: -81                 | Program output: -76                
Correct output: -86                 | Program output: -37                
Correct output: -56                 | Program output: -53                
Correct output: -12                 | Program output: -12                
Correct output: -75                 | Program output: -75                
Correct output: -68                 | Program output: -68                
Correct output: -97                 | Program output: 47                 
Correct output: -71                 | Program output: -71                
Correct output: -36                 | Program output: -36                
Correct output: -8                  | Program output: -8                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in2} {:close 1, :instruction in3} {:close 1, :instruction in1} {:close 1, :instruction in1} {:close 1, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s})
Lexicase best program: (in2 in3 in1 in1 in4 in1 integer_dup_times integer_yankdup print_integer print_boolean boolean_yankdup boolean_frominteger integer_sub boolean_or exec_flush exec_pop () boolean_frominteger exec_s () () ())
Lexicase best errors: [0 0 0 1 1 0 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 23
Percent parens: 0.217
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in2} {:close 1, :instruction in3} {:close 1, :instruction in1} {:close 1, :instruction in1} {:close 1, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s})
Zero cases best program: (in2 in3 in1 in1 in4 in1 integer_dup_times integer_yankdup print_integer print_boolean boolean_yankdup boolean_frominteger integer_sub boolean_or exec_flush exec_pop () boolean_frominteger exec_s () () ())
Zero cases best errors: [0 0 0 1 1 0 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 23
Percent parens: 0.217
--- Lexicase Population Statistics ---
Count of elite individuals by case: (615 577 311 3 6 255 579 616 254 944)
Population mean number of elite cases: 4.16
Count of perfect (error zero) individuals by case: (615 577 311 3 6 255 579 616 254 944)
Population mean number of perfect (error zero) cases: 4.16
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in2} {:close 1, :instruction in3} {:close 1, :instruction in1} {:close 1, :instruction in1} {:close 1, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s})
Best program: (in2 in3 in1 in1 in4 in1 integer_dup_times integer_yankdup print_integer print_boolean boolean_yankdup boolean_frominteger integer_sub boolean_or exec_flush exec_pop () boolean_frominteger exec_s () () ())
Errors: [0 0 0 1 1 0 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 18
Size: 23
Percent parens: 0.217
--- Population Statistics ---
Average total errors in population: 5.84
Median total errors in population: 5
Error averages by case: (0.385 0.423 0.689 0.997 0.994 0.745 0.421 0.384 0.746 0.056)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 16.063
Average program size in population (points): 21.022
Average percent parens in population: 0.237
Minimum age in population: 52.59786116331816
Maximum age in population: 55.12697665800806
Average age in population: 53.97326661773596
Median age in population: 53.95060482644476
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 302
Genome diversity (% unique genomes):	 0.27
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 339
Syntactic diversity (% unique Push programs):	 0.219
Total error diversity:				 0.009
Error (vector) diversity:			 0.021
Behavioral diversity:				 0.056
--- Run Statistics ---
Number of program evaluations used so far: 37000
Number of point (instruction) evaluations so far: 8169283
--- Timings ---
Current time: 1559314424031 milliseconds
Total Time:          87.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        71.4 seconds, 81.7%
Fitness Testing:      8.6 seconds,  9.8%
Report:               7.3 seconds,  8.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 36
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 37
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 37
;;******************************
;; -*- Smallest problem report - generation 37
Test total error for best: 571
Test mean error for best: 0.57100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 48                  | Program output: 48                 
Correct output: -33                 | Program output: 30                 
Correct output: 32                  | Program output: 65                 
Correct output: 24                  | Program output: 24                 
Correct output: -79                 | Program output: -20                
Correct output: -83                 | Program output: -83                
Correct output: -54                 | Program output: -54                
Correct output: -20                 | Program output: -20                
Correct output: -79                 | Program output: -79                
Correct output: -85                 | Program output: -54                
Correct output: -66                 | Program output: -66                
Correct output: 64                  | Program output: 64                 
Correct output: -21                 | Program output: -21                
Correct output: 13                  | Program output: 13                 
Correct output: 35                  | Program output: 35                 
Correct output: 0                   | Program output: 92                 
Correct output: 3                   | Program output: 3                  
Correct output: 10                  | Program output: 14                 
Correct output: 21                  | Program output: 82                 
Correct output: 43                  | Program output: 76                 
Correct output: 20                  | Program output: 40                 
Correct output: 5                   | Program output: 11                 
Correct output: 6                   | Program output: 6                  
Correct output: 30                  | Program output: 100                
Correct output: 13                  | Program output: 13                 
Correct output: 21                  | Program output: 51                 
Correct output: 19                  | Program output: 39                 
Correct output: 2                   | Program output: 2                  
Correct output: 2                   | Program output: 2                  
Correct output: 1                   | Program output: 1                  
Correct output: 1                   | Program output: 1                  
Correct output: 36                  | Program output: 36                 
Correct output: 8                   | Program output: 84                 
Correct output: 41                  | Program output: 62                 
Correct output: 18                  | Program output: 18                 
Correct output: -25                 | Program output: 1                  
Correct output: -25                 | Program output: 0                  
Correct output: -31                 | Program output: -31                
Correct output: -35                 | Program output: -35                
Correct output: -49                 | Program output: 5                  
Correct output: -85                 | Program output: -85                
Correct output: -24                 | Program output: -24                
Correct output: -93                 | Program output: -28                
Correct output: -81                 | Program output: 44                 
Correct output: -56                 | Program output: 100                
Correct output: -57                 | Program output: 66                 
Correct output: -97                 | Program output: -97                
Correct output: -58                 | Program output: -58                
Correct output: -66                 | Program output: -66                
Correct output: -20                 | Program output: -20                
Correct output: -91                 | Program output: -91                
Correct output: -80                 | Program output: -6                 
Correct output: -83                 | Program output: -83                
Correct output: -42                 | Program output: -42                
Correct output: 33                  | Program output: 33                 
Correct output: -65                 | Program output: -65                
Correct output: -79                 | Program output: -79                
Correct output: -86                 | Program output: -86                
Correct output: 2                   | Program output: 2                  
Correct output: -13                 | Program output: -13                
Correct output: -90                 | Program output: 1                  
Correct output: -87                 | Program output: -15                
Correct output: -51                 | Program output: 10                 
Correct output: -64                 | Program output: -40                
Correct output: -90                 | Program output: -90                
Correct output: -34                 | Program output: 34                 
Correct output: -57                 | Program output: 9                  
Correct output: -76                 | Program output: -76                
Correct output: -86                 | Program output: -59                
Correct output: 1                   | Program output: 25                 
Correct output: -98                 | Program output: -86                
Correct output: -47                 | Program output: -14                
Correct output: -34                 | Program output: -11                
Correct output: -80                 | Program output: -80                
Correct output: -34                 | Program output: -10                
Correct output: -15                 | Program output: 36                 
Correct output: -46                 | Program output: -46                
Correct output: 17                  | Program output: 17                 
Correct output: -78                 | Program output: 0                  
Correct output: -92                 | Program output: -92                
Correct output: -92                 | Program output: -29                
Correct output: -68                 | Program output: -68                
Correct output: -98                 | Program output: -98                
Correct output: -77                 | Program output: -24                
Correct output: -21                 | Program output: -21                
Correct output: -81                 | Program output: -81                
Correct output: -86                 | Program output: -37                
Correct output: -56                 | Program output: -53                
Correct output: -12                 | Program output: 81                 
Correct output: -75                 | Program output: -65                
Correct output: -68                 | Program output: -68                
Correct output: -97                 | Program output: 47                 
Correct output: -71                 | Program output: -71                
Correct output: -36                 | Program output: -36                
Correct output: -8                  | Program output: -8                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in2} {:close 1, :instruction in3} {:close 1, :instruction in4} {:close 1, :instruction in1} {:close 1, :instruction in4} {:close 1, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s})
Lexicase best program: (in2 in3 in4 in1 in4 in4 in1 integer_dup_times integer_yankdup print_integer print_boolean boolean_yankdup boolean_frominteger integer_sub boolean_or exec_flush exec_pop () boolean_frominteger exec_s () () ())
Lexicase best errors: [0 0 0 0 0 1 0 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 24
Percent parens: 0.208
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in2} {:close 1, :instruction in3} {:close 1, :instruction in4} {:close 1, :instruction in1} {:close 1, :instruction in4} {:close 1, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s})
Zero cases best program: (in2 in3 in4 in1 in4 in4 in1 integer_dup_times integer_yankdup print_integer print_boolean boolean_yankdup boolean_frominteger integer_sub boolean_or exec_flush exec_pop () boolean_frominteger exec_s () () ())
Zero cases best errors: [0 0 0 0 0 1 0 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 24
Percent parens: 0.208
--- Lexicase Population Statistics ---
Count of elite individuals by case: (797 17 476 666 794 121 945 815 181 948)
Population mean number of elite cases: 5.76
Count of perfect (error zero) individuals by case: (797 17 476 666 794 121 945 815 181 948)
Population mean number of perfect (error zero) cases: 5.76
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in2} {:close 1, :instruction in3} {:close 1, :instruction in4} {:close 1, :instruction in1} {:close 1, :instruction in4} {:close 1, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s})
Best program: (in2 in3 in4 in1 in4 in4 in1 integer_dup_times integer_yankdup print_integer print_boolean boolean_yankdup boolean_frominteger integer_sub boolean_or exec_flush exec_pop () boolean_frominteger exec_s () () ())
Errors: [0 0 0 0 0 1 0 0 1 0]
Total: 2
Mean: 0.2
Genome size: 19
Size: 24
Percent parens: 0.208
--- Population Statistics ---
Average total errors in population: 4.24
Median total errors in population: 3
Error averages by case: (0.203 0.983 0.524 0.334 0.206 0.879 0.055 0.185 0.819 0.052)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 17.568
Average program size in population (points): 22.638
Average percent parens in population: 0.224
Minimum age in population: 53.95060482644476
Maximum age in population: 56.77423299488146
Average age in population: 55.03824958727951
Median age in population: 55.20060482644476
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 370
Genome diversity (% unique genomes):	 0.264
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 399
Syntactic diversity (% unique Push programs):	 0.211
Total error diversity:				 0.009
Error (vector) diversity:			 0.036
Behavioral diversity:				 0.068
--- Run Statistics ---
Number of program evaluations used so far: 38000
Number of point (instruction) evaluations so far: 8322948
--- Timings ---
Current time: 1559314426145 milliseconds
Total Time:          89.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        73.2 seconds, 81.8%
Fitness Testing:      8.7 seconds,  9.8%
Report:               7.5 seconds,  8.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 37
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 38
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 38
;;******************************
;; -*- Smallest problem report - generation 38
Test total error for best: 573
Test mean error for best: 0.57300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 48                  | Program output: 48                 
Correct output: -33                 | Program output: 30                 
Correct output: 32                  | Program output: 65                 
Correct output: 24                  | Program output: 24                 
Correct output: -79                 | Program output: -20                
Correct output: -83                 | Program output: -83                
Correct output: -54                 | Program output: -54                
Correct output: -20                 | Program output: -20                
Correct output: -79                 | Program output: -79                
Correct output: -85                 | Program output: -54                
Correct output: -66                 | Program output: -66                
Correct output: 64                  | Program output: 64                 
Correct output: -21                 | Program output: -21                
Correct output: 13                  | Program output: 13                 
Correct output: 35                  | Program output: 35                 
Correct output: 0                   | Program output: 92                 
Correct output: 3                   | Program output: 3                  
Correct output: 10                  | Program output: 14                 
Correct output: 21                  | Program output: 82                 
Correct output: 43                  | Program output: 76                 
Correct output: 20                  | Program output: 40                 
Correct output: 5                   | Program output: 11                 
Correct output: 6                   | Program output: 6                  
Correct output: 30                  | Program output: 100                
Correct output: 13                  | Program output: 13                 
Correct output: 21                  | Program output: 51                 
Correct output: 19                  | Program output: 39                 
Correct output: 2                   | Program output: 2                  
Correct output: 2                   | Program output: 2                  
Correct output: 1                   | Program output: 1                  
Correct output: 1                   | Program output: 1                  
Correct output: 36                  | Program output: 36                 
Correct output: 8                   | Program output: 84                 
Correct output: 41                  | Program output: 62                 
Correct output: 18                  | Program output: 18                 
Correct output: -25                 | Program output: 65                 
Correct output: -25                 | Program output: 0                  
Correct output: -31                 | Program output: -31                
Correct output: -35                 | Program output: -35                
Correct output: -49                 | Program output: 5                  
Correct output: -85                 | Program output: -85                
Correct output: -24                 | Program output: -24                
Correct output: -93                 | Program output: -28                
Correct output: -81                 | Program output: 44                 
Correct output: -56                 | Program output: 100                
Correct output: -57                 | Program output: 66                 
Correct output: -97                 | Program output: -97                
Correct output: -58                 | Program output: -58                
Correct output: -66                 | Program output: -66                
Correct output: -20                 | Program output: -20                
Correct output: -91                 | Program output: -91                
Correct output: -80                 | Program output: -6                 
Correct output: -83                 | Program output: -83                
Correct output: -42                 | Program output: -42                
Correct output: 33                  | Program output: 33                 
Correct output: -65                 | Program output: -65                
Correct output: -79                 | Program output: -79                
Correct output: -86                 | Program output: -86                
Correct output: 2                   | Program output: 2                  
Correct output: -13                 | Program output: -13                
Correct output: -90                 | Program output: -90                
Correct output: -87                 | Program output: -15                
Correct output: -51                 | Program output: 10                 
Correct output: -64                 | Program output: -40                
Correct output: -90                 | Program output: -90                
Correct output: -34                 | Program output: 34                 
Correct output: -57                 | Program output: 9                  
Correct output: -76                 | Program output: -76                
Correct output: -86                 | Program output: -59                
Correct output: 1                   | Program output: 25                 
Correct output: -98                 | Program output: -86                
Correct output: -47                 | Program output: -14                
Correct output: -34                 | Program output: -11                
Correct output: -80                 | Program output: -80                
Correct output: -34                 | Program output: -10                
Correct output: -15                 | Program output: 36                 
Correct output: -46                 | Program output: -46                
Correct output: 17                  | Program output: 17                 
Correct output: -78                 | Program output: 0                  
Correct output: -92                 | Program output: -92                
Correct output: -92                 | Program output: -29                
Correct output: -68                 | Program output: -68                
Correct output: -98                 | Program output: -98                
Correct output: -77                 | Program output: -24                
Correct output: -21                 | Program output: -21                
Correct output: -81                 | Program output: -81                
Correct output: -86                 | Program output: -37                
Correct output: -56                 | Program output: -53                
Correct output: -12                 | Program output: 19                 
Correct output: -75                 | Program output: 60                 
Correct output: -68                 | Program output: -68                
Correct output: -97                 | Program output: 47                 
Correct output: -71                 | Program output: -71                
Correct output: -36                 | Program output: -36                
Correct output: -8                  | Program output: -8                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in2} {:close 1, :instruction in3} {:close 1, :instruction in4} {:close 1, :instruction in1} {:close 1, :instruction in4} {:close 1, :instruction in4} {:close 1, :instruction in1} {:close 1, :instruction in3} {:close 1, :instruction in4} {:close 1, :instruction in1} {:close 1, :instruction in4} {:close 1, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s})
Lexicase best program: (in2 in3 in4 in1 in4 in4 in1 in3 in4 in1 in4 in4 in1 integer_dup_times integer_yankdup print_integer print_boolean boolean_yankdup boolean_frominteger integer_sub boolean_or exec_flush exec_pop () boolean_frominteger exec_s () () ())
Lexicase best errors: [0 0 0 0 0 0 0 1 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 30
Percent parens: 0.167
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in2} {:close 1, :instruction in3} {:close 1, :instruction in4} {:close 1, :instruction in1} {:close 1, :instruction in4} {:close 1, :instruction in4} {:close 1, :instruction in1} {:close 1, :instruction in3} {:close 1, :instruction in4} {:close 1, :instruction in1} {:close 1, :instruction in4} {:close 1, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s})
Zero cases best program: (in2 in3 in4 in1 in4 in4 in1 in3 in4 in1 in4 in4 in1 integer_dup_times integer_yankdup print_integer print_boolean boolean_yankdup boolean_frominteger integer_sub boolean_or exec_flush exec_pop () boolean_frominteger exec_s () () ())
Zero cases best errors: [0 0 0 0 0 0 0 1 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 30
Percent parens: 0.167
--- Lexicase Population Statistics ---
Count of elite individuals by case: (501 492 943 713 6 601 883 171 289 447)
Population mean number of elite cases: 5.05
Count of perfect (error zero) individuals by case: (501 492 943 713 6 601 883 171 289 447)
Population mean number of perfect (error zero) cases: 5.05
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in2} {:close 1, :instruction in3} {:close 1, :instruction in2} {:close 1, :instruction in3} {:close 1, :instruction in1} {:close 1, :instruction in4} {:close 1, :instruction exec_pop} {:close 1, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s})
Best program: (in2 in3 in2 in3 in1 in4 exec_pop () in4 in1 integer_dup_times integer_yankdup print_integer print_boolean boolean_yankdup boolean_frominteger integer_sub boolean_or exec_flush exec_pop () boolean_frominteger exec_s () () ())
Errors: [0 0 0 0 1 0 0 0 1 0]
Total: 2
Mean: 0.2
Genome size: 21
Size: 27
Percent parens: 0.222
--- Population Statistics ---
Average total errors in population: 4.954
Median total errors in population: 5
Error averages by case: (0.499 0.508 0.057 0.287 0.994 0.399 0.117 0.829 0.711 0.553)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 17.714
Average program size in population (points): 22.774
Average percent parens in population: 0.224
Minimum age in population: 55.28879074222641
Maximum age in population: 57.75197665800806
Average age in population: 56.63677349968679
Median age in population: 56.53879074222641
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 259
Genome diversity (% unique genomes):	 0.299
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 281
Syntactic diversity (% unique Push programs):	 0.228
Total error diversity:				 0.009
Error (vector) diversity:			 0.025
Behavioral diversity:				 0.058
--- Run Statistics ---
Number of program evaluations used so far: 39000
Number of point (instruction) evaluations so far: 8479594
--- Timings ---
Current time: 1559314428294 milliseconds
Total Time:          91.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        75.0 seconds, 81.8%
Fitness Testing:      8.9 seconds,  9.7%
Report:               7.6 seconds,  8.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 38
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 39
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 39
;;******************************
;; -*- Smallest problem report - generation 39
Test total error for best: 651
Test mean error for best: 0.65100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 48                  | Program output: 48                 
Correct output: -33                 | Program output: 30                 
Correct output: 32                  | Program output: 32                 
Correct output: 24                  | Program output: 89                 
Correct output: -79                 | Program output: -20                
Correct output: -83                 | Program output: -83                
Correct output: -54                 | Program output: -54                
Correct output: -20                 | Program output: -1                 
Correct output: -79                 | Program output: 99                 
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -66                
Correct output: 64                  | Program output: 64                 
Correct output: -21                 | Program output: -21                
Correct output: 13                  | Program output: 13                 
Correct output: 35                  | Program output: 35                 
Correct output: 0                   | Program output: 92                 
Correct output: 3                   | Program output: 29                 
Correct output: 10                  | Program output: 14                 
Correct output: 21                  | Program output: 82                 
Correct output: 43                  | Program output: 76                 
Correct output: 20                  | Program output: 20                 
Correct output: 5                   | Program output: 98                 
Correct output: 6                   | Program output: 62                 
Correct output: 30                  | Program output: 100                
Correct output: 13                  | Program output: 89                 
Correct output: 21                  | Program output: 51                 
Correct output: 19                  | Program output: 79                 
Correct output: 2                   | Program output: 2                  
Correct output: 2                   | Program output: 2                  
Correct output: 1                   | Program output: 3                  
Correct output: 1                   | Program output: 84                 
Correct output: 36                  | Program output: 62                 
Correct output: 8                   | Program output: 84                 
Correct output: 41                  | Program output: 62                 
Correct output: 18                  | Program output: 18                 
Correct output: -25                 | Program output: 45                 
Correct output: -25                 | Program output: 41                 
Correct output: -31                 | Program output: 26                 
Correct output: -35                 | Program output: -35                
Correct output: -49                 | Program output: -49                
Correct output: -85                 | Program output: -24                
Correct output: -24                 | Program output: -24                
Correct output: -93                 | Program output: -93                
Correct output: -81                 | Program output: 44                 
Correct output: -56                 | Program output: 100                
Correct output: -57                 | Program output: 66                 
Correct output: -97                 | Program output: -83                
Correct output: -58                 | Program output: 92                 
Correct output: -66                 | Program output: 3                  
Correct output: -20                 | Program output: 63                 
Correct output: -91                 | Program output: 44                 
Correct output: -80                 | Program output: -80                
Correct output: -83                 | Program output: 92                 
Correct output: -42                 | Program output: 4                  
Correct output: 33                  | Program output: 33                 
Correct output: -65                 | Program output: 69                 
Correct output: -79                 | Program output: 81                 
Correct output: -86                 | Program output: -24                
Correct output: 2                   | Program output: 2                  
Correct output: -13                 | Program output: 18                 
Correct output: -90                 | Program output: -73                
Correct output: -87                 | Program output: -78                
Correct output: -51                 | Program output: 10                 
Correct output: -64                 | Program output: 67                 
Correct output: -90                 | Program output: -53                
Correct output: -34                 | Program output: -34                
Correct output: -57                 | Program output: 67                 
Correct output: -76                 | Program output: -76                
Correct output: -86                 | Program output: -86                
Correct output: 1                   | Program output: 25                 
Correct output: -98                 | Program output: -98                
Correct output: -47                 | Program output: -47                
Correct output: -34                 | Program output: -34                
Correct output: -80                 | Program output: 27                 
Correct output: -34                 | Program output: -34                
Correct output: -15                 | Program output: 36                 
Correct output: -46                 | Program output: 95                 
Correct output: 17                  | Program output: 17                 
Correct output: -78                 | Program output: 0                  
Correct output: -92                 | Program output: -92                
Correct output: -92                 | Program output: -29                
Correct output: -68                 | Program output: -68                
Correct output: -98                 | Program output: -76                
Correct output: -77                 | Program output: 64                 
Correct output: -21                 | Program output: 57                 
Correct output: -81                 | Program output: 69                 
Correct output: -86                 | Program output: -35                
Correct output: -56                 | Program output: 85                 
Correct output: -12                 | Program output: 19                 
Correct output: -75                 | Program output: 60                 
Correct output: -68                 | Program output: -68                
Correct output: -97                 | Program output: 47                 
Correct output: -71                 | Program output: -17                
Correct output: -36                 | Program output: 89                 
Correct output: -8                  | Program output: 97                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in2} {:close 1, :instruction in3} {:close 1, :instruction in1} {:close 1, :instruction in1} {:close 0, :instruction integer_div} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s})
Lexicase best program: (in2 in3 in1 in1 integer_div integer_yankdup print_integer print_boolean boolean_yankdup boolean_frominteger integer_sub boolean_or integer_rot exec_pop () boolean_frominteger exec_s () () ())
Lexicase best errors: [0 0 0 0 1 1 1 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 21
Percent parens: 0.238
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in2} {:close 1, :instruction in3} {:close 1, :instruction in1} {:close 1, :instruction in1} {:close 0, :instruction integer_div} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s})
Zero cases best program: (in2 in3 in1 in1 integer_div integer_yankdup print_integer print_boolean boolean_yankdup boolean_frominteger integer_sub boolean_or integer_rot exec_pop () boolean_frominteger exec_s () () ())
Zero cases best errors: [0 0 0 0 1 1 1 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 21
Percent parens: 0.238
--- Lexicase Population Statistics ---
Count of elite individuals by case: (911 302 770 911 603 114 7 190 12 187)
Population mean number of elite cases: 4.01
Count of perfect (error zero) individuals by case: (911 302 770 911 603 114 7 190 12 187)
Population mean number of perfect (error zero) cases: 4.01
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in2} {:close 1, :instruction in3} {:close 1, :instruction in4} {:close 1, :instruction in1} {:close 1, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 1, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction exec_dup_items} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s})
Best program: (in2 in3 in4 in1 in4 integer_yankdup in2 in3 integer_yankdup print_integer exec_dup_items boolean_yankdup boolean_frominteger integer_sub boolean_or exec_flush exec_pop () boolean_frominteger exec_s () () ())
Errors: [0 0 0 0 1 1 1 0 1 0]
Total: 4
Mean: 0.4
Genome size: 19
Size: 24
Percent parens: 0.208
--- Population Statistics ---
Average total errors in population: 5.993
Median total errors in population: 6
Error averages by case: (0.089 0.698 0.23 0.089 0.397 0.886 0.993 0.81 0.988 0.813)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 20.92
Average program size in population (points): 26.098
Average percent parens in population: 0.202
Minimum age in population: 56.62697665800806
Maximum age in population: 59.36969778433559
Average age in population: 58.23481609514792
Median age in population: 58.27423299488146
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 191
Genome diversity (% unique genomes):	 0.325
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 219
Syntactic diversity (% unique Push programs):	 0.259
Total error diversity:				 0.007
Error (vector) diversity:			 0.027
Behavioral diversity:				 0.069
--- Run Statistics ---
Number of program evaluations used so far: 40000
Number of point (instruction) evaluations so far: 8659627
--- Timings ---
Current time: 1559314430463 milliseconds
Total Time:          93.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        76.9 seconds, 81.9%
Fitness Testing:      9.1 seconds,  9.7%
Report:               7.8 seconds,  8.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 39
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 40
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 40
;;******************************
;; -*- Smallest problem report - generation 40
Test total error for best: 573
Test mean error for best: 0.57300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 48                  | Program output: 48                 
Correct output: -33                 | Program output: 30                 
Correct output: 32                  | Program output: 65                 
Correct output: 24                  | Program output: 24                 
Correct output: -79                 | Program output: -20                
Correct output: -83                 | Program output: -83                
Correct output: -54                 | Program output: -54                
Correct output: -20                 | Program output: -20                
Correct output: -79                 | Program output: -79                
Correct output: -85                 | Program output: -54                
Correct output: -66                 | Program output: -66                
Correct output: 64                  | Program output: 64                 
Correct output: -21                 | Program output: -21                
Correct output: 13                  | Program output: 13                 
Correct output: 35                  | Program output: 35                 
Correct output: 0                   | Program output: 92                 
Correct output: 3                   | Program output: 3                  
Correct output: 10                  | Program output: 14                 
Correct output: 21                  | Program output: 82                 
Correct output: 43                  | Program output: 76                 
Correct output: 20                  | Program output: 40                 
Correct output: 5                   | Program output: 11                 
Correct output: 6                   | Program output: 6                  
Correct output: 30                  | Program output: 100                
Correct output: 13                  | Program output: 13                 
Correct output: 21                  | Program output: 51                 
Correct output: 19                  | Program output: 39                 
Correct output: 2                   | Program output: 2                  
Correct output: 2                   | Program output: 2                  
Correct output: 1                   | Program output: 1                  
Correct output: 1                   | Program output: 1                  
Correct output: 36                  | Program output: 36                 
Correct output: 8                   | Program output: 84                 
Correct output: 41                  | Program output: 62                 
Correct output: 18                  | Program output: 18                 
Correct output: -25                 | Program output: 65                 
Correct output: -25                 | Program output: 0                  
Correct output: -31                 | Program output: -31                
Correct output: -35                 | Program output: -35                
Correct output: -49                 | Program output: 5                  
Correct output: -85                 | Program output: -85                
Correct output: -24                 | Program output: -24                
Correct output: -93                 | Program output: -28                
Correct output: -81                 | Program output: 44                 
Correct output: -56                 | Program output: 100                
Correct output: -57                 | Program output: 66                 
Correct output: -97                 | Program output: -97                
Correct output: -58                 | Program output: -58                
Correct output: -66                 | Program output: -66                
Correct output: -20                 | Program output: -20                
Correct output: -91                 | Program output: -91                
Correct output: -80                 | Program output: -6                 
Correct output: -83                 | Program output: -83                
Correct output: -42                 | Program output: -42                
Correct output: 33                  | Program output: 33                 
Correct output: -65                 | Program output: -65                
Correct output: -79                 | Program output: -79                
Correct output: -86                 | Program output: -86                
Correct output: 2                   | Program output: 2                  
Correct output: -13                 | Program output: -13                
Correct output: -90                 | Program output: -90                
Correct output: -87                 | Program output: -15                
Correct output: -51                 | Program output: 10                 
Correct output: -64                 | Program output: -40                
Correct output: -90                 | Program output: -90                
Correct output: -34                 | Program output: 34                 
Correct output: -57                 | Program output: 9                  
Correct output: -76                 | Program output: -76                
Correct output: -86                 | Program output: -59                
Correct output: 1                   | Program output: 25                 
Correct output: -98                 | Program output: -86                
Correct output: -47                 | Program output: -14                
Correct output: -34                 | Program output: -11                
Correct output: -80                 | Program output: -80                
Correct output: -34                 | Program output: -10                
Correct output: -15                 | Program output: 36                 
Correct output: -46                 | Program output: -46                
Correct output: 17                  | Program output: 17                 
Correct output: -78                 | Program output: 0                  
Correct output: -92                 | Program output: -92                
Correct output: -92                 | Program output: -29                
Correct output: -68                 | Program output: -68                
Correct output: -98                 | Program output: -98                
Correct output: -77                 | Program output: -24                
Correct output: -21                 | Program output: -21                
Correct output: -81                 | Program output: -81                
Correct output: -86                 | Program output: -37                
Correct output: -56                 | Program output: -53                
Correct output: -12                 | Program output: 19                 
Correct output: -75                 | Program output: 60                 
Correct output: -68                 | Program output: -68                
Correct output: -97                 | Program output: 47                 
Correct output: -71                 | Program output: -71                
Correct output: -36                 | Program output: -36                
Correct output: -8                  | Program output: -8                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in2} {:close 1, :instruction in3} {:close 1, :instruction in2} {:close 1, :instruction in3} {:close 1, :instruction in1} {:close 1, :instruction in4} {:close 1, :instruction exec_pop} {:close 1, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 2, :instruction exec_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s})
Lexicase best program: (in2 in3 in2 in3 in1 in4 exec_pop () in4 in1 integer_dup_times integer_yankdup print_integer print_boolean boolean_yankdup boolean_frominteger integer_sub boolean_or exec_flush exec_pop () boolean_frominteger exec_s () () ())
Lexicase best errors: [0 0 1 1 0 0 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 27
Percent parens: 0.222
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in2} {:close 1, :instruction in3} {:close 1, :instruction in2} {:close 1, :instruction in3} {:close 1, :instruction in1} {:close 1, :instruction in4} {:close 1, :instruction exec_pop} {:close 1, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 2, :instruction exec_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s})
Zero cases best program: (in2 in3 in2 in3 in1 in4 exec_pop () in4 in1 integer_dup_times integer_yankdup print_integer print_boolean boolean_yankdup boolean_frominteger integer_sub boolean_or exec_flush exec_pop () boolean_frominteger exec_s () () ())
Zero cases best errors: [0 0 1 1 0 0 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 27
Percent parens: 0.222
--- Lexicase Population Statistics ---
Count of elite individuals by case: (52 224 294 212 463 464 51 51 622 464)
Population mean number of elite cases: 2.90
Count of perfect (error zero) individuals by case: (52 224 294 212 463 464 51 51 622 464)
Population mean number of perfect (error zero) cases: 2.90
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in2} {:close 1, :instruction in3} {:close 1, :instruction in2} {:close 1, :instruction in3} {:close 1, :instruction in1} {:close 1, :instruction in4} {:close 1, :instruction exec_pop} {:close 1, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 2, :instruction exec_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s})
Best program: (in2 in3 in2 in3 in1 in4 exec_pop () in4 in1 integer_dup_times integer_yankdup print_integer print_boolean boolean_yankdup boolean_frominteger integer_sub boolean_or exec_flush exec_pop () boolean_frominteger exec_s () () ())
Errors: [0 0 1 1 0 0 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 21
Size: 27
Percent parens: 0.222
--- Population Statistics ---
Average total errors in population: 7.103
Median total errors in population: 7
Error averages by case: (0.948 0.776 0.706 0.788 0.537 0.536 0.949 0.949 0.378 0.536)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 16.857
Average program size in population (points): 22.144
Average percent parens in population: 0.243
Minimum age in population: 57.86969778433559
Maximum age in population: 61.36605834749935
Average age in population: 59.85302887274435
Median age in population: 59.83106398169912
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 155
Genome diversity (% unique genomes):	 0.303
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 168
Syntactic diversity (% unique Push programs):	 0.233
Total error diversity:				 0.009
Error (vector) diversity:			 0.018
Behavioral diversity:				 0.054
--- Run Statistics ---
Number of program evaluations used so far: 41000
Number of point (instruction) evaluations so far: 8801972
--- Timings ---
Current time: 1559314432562 milliseconds
Total Time:          96.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        78.6 seconds, 81.9%
Fitness Testing:      9.3 seconds,  9.7%
Report:               7.9 seconds,  8.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 40
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 41
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 41
;;******************************
;; -*- Smallest problem report - generation 41
Test total error for best: 573
Test mean error for best: 0.57300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 48                  | Program output: 48                 
Correct output: -33                 | Program output: 30                 
Correct output: 32                  | Program output: 65                 
Correct output: 24                  | Program output: 24                 
Correct output: -79                 | Program output: -20                
Correct output: -83                 | Program output: -83                
Correct output: -54                 | Program output: -54                
Correct output: -20                 | Program output: -20                
Correct output: -79                 | Program output: -79                
Correct output: -85                 | Program output: -54                
Correct output: -66                 | Program output: -66                
Correct output: 64                  | Program output: 64                 
Correct output: -21                 | Program output: -21                
Correct output: 13                  | Program output: 13                 
Correct output: 35                  | Program output: 35                 
Correct output: 0                   | Program output: 92                 
Correct output: 3                   | Program output: 3                  
Correct output: 10                  | Program output: 14                 
Correct output: 21                  | Program output: 82                 
Correct output: 43                  | Program output: 76                 
Correct output: 20                  | Program output: 40                 
Correct output: 5                   | Program output: 11                 
Correct output: 6                   | Program output: 6                  
Correct output: 30                  | Program output: 100                
Correct output: 13                  | Program output: 13                 
Correct output: 21                  | Program output: 51                 
Correct output: 19                  | Program output: 39                 
Correct output: 2                   | Program output: 2                  
Correct output: 2                   | Program output: 2                  
Correct output: 1                   | Program output: 1                  
Correct output: 1                   | Program output: 1                  
Correct output: 36                  | Program output: 36                 
Correct output: 8                   | Program output: 84                 
Correct output: 41                  | Program output: 62                 
Correct output: 18                  | Program output: 18                 
Correct output: -25                 | Program output: 65                 
Correct output: -25                 | Program output: 0                  
Correct output: -31                 | Program output: -31                
Correct output: -35                 | Program output: -35                
Correct output: -49                 | Program output: 5                  
Correct output: -85                 | Program output: -85                
Correct output: -24                 | Program output: -24                
Correct output: -93                 | Program output: -28                
Correct output: -81                 | Program output: 44                 
Correct output: -56                 | Program output: 100                
Correct output: -57                 | Program output: 66                 
Correct output: -97                 | Program output: -97                
Correct output: -58                 | Program output: -58                
Correct output: -66                 | Program output: -66                
Correct output: -20                 | Program output: -20                
Correct output: -91                 | Program output: -91                
Correct output: -80                 | Program output: -6                 
Correct output: -83                 | Program output: -83                
Correct output: -42                 | Program output: -42                
Correct output: 33                  | Program output: 33                 
Correct output: -65                 | Program output: -65                
Correct output: -79                 | Program output: -79                
Correct output: -86                 | Program output: -86                
Correct output: 2                   | Program output: 2                  
Correct output: -13                 | Program output: -13                
Correct output: -90                 | Program output: -90                
Correct output: -87                 | Program output: -15                
Correct output: -51                 | Program output: 10                 
Correct output: -64                 | Program output: -40                
Correct output: -90                 | Program output: -90                
Correct output: -34                 | Program output: 34                 
Correct output: -57                 | Program output: 9                  
Correct output: -76                 | Program output: -76                
Correct output: -86                 | Program output: -59                
Correct output: 1                   | Program output: 25                 
Correct output: -98                 | Program output: -86                
Correct output: -47                 | Program output: -14                
Correct output: -34                 | Program output: -11                
Correct output: -80                 | Program output: -80                
Correct output: -34                 | Program output: -10                
Correct output: -15                 | Program output: 36                 
Correct output: -46                 | Program output: -46                
Correct output: 17                  | Program output: 17                 
Correct output: -78                 | Program output: 0                  
Correct output: -92                 | Program output: -92                
Correct output: -92                 | Program output: -29                
Correct output: -68                 | Program output: -68                
Correct output: -98                 | Program output: -98                
Correct output: -77                 | Program output: -24                
Correct output: -21                 | Program output: -21                
Correct output: -81                 | Program output: -81                
Correct output: -86                 | Program output: -37                
Correct output: -56                 | Program output: -53                
Correct output: -12                 | Program output: 19                 
Correct output: -75                 | Program output: 60                 
Correct output: -68                 | Program output: -68                
Correct output: -97                 | Program output: 47                 
Correct output: -71                 | Program output: -71                
Correct output: -36                 | Program output: -36                
Correct output: -8                  | Program output: -8                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in2} {:close 1, :instruction in3} {:close 1, :instruction in2} {:close 1, :instruction in3} {:close 1, :instruction in2} {:close 1, :instruction in3} {:close 1, :instruction in1} {:close 1, :instruction in4} {:close 1, :instruction exec_pop} {:close 1, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 2, :instruction exec_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_frominteger})
Lexicase best program: (in2 in3 in2 in3 in2 in3 in1 in4 exec_pop () in4 in1 integer_dup_times integer_yankdup print_integer print_boolean boolean_yankdup boolean_frominteger integer_sub boolean_or exec_flush exec_pop () boolean_frominteger)
Lexicase best errors: [0 0 0 0 0 0 0 1 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 25
Percent parens: 0.120
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in2} {:close 1, :instruction in3} {:close 1, :instruction in2} {:close 1, :instruction in3} {:close 1, :instruction in2} {:close 1, :instruction in3} {:close 1, :instruction in1} {:close 1, :instruction in4} {:close 1, :instruction exec_pop} {:close 1, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 2, :instruction exec_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_frominteger})
Zero cases best program: (in2 in3 in2 in3 in2 in3 in1 in4 exec_pop () in4 in1 integer_dup_times integer_yankdup print_integer print_boolean boolean_yankdup boolean_frominteger integer_sub boolean_or exec_flush exec_pop () boolean_frominteger)
Zero cases best errors: [0 0 0 0 0 0 0 1 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 25
Percent parens: 0.120
--- Lexicase Population Statistics ---
Count of elite individuals by case: (672 669 934 670 671 672 639 262 8 877)
Population mean number of elite cases: 6.07
Count of perfect (error zero) individuals by case: (672 669 934 670 671 672 639 262 8 877)
Population mean number of perfect (error zero) cases: 6.07
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in2} {:close 1, :instruction in3} {:close 1, :instruction in2} {:close 1, :instruction in3} {:close 1, :instruction in1} {:close 1, :instruction in4} {:close 1, :instruction exec_pop} {:close 1, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 2, :instruction exec_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s})
Best program: (in2 in3 in2 in3 in1 in4 exec_pop () in4 in1 integer_dup_times integer_yankdup print_integer print_boolean boolean_yankdup boolean_frominteger integer_sub boolean_or exec_flush exec_pop () boolean_frominteger exec_s () () ())
Errors: [0 0 0 0 0 0 0 1 1 0]
Total: 2
Mean: 0.2
Genome size: 21
Size: 27
Percent parens: 0.222
--- Population Statistics ---
Average total errors in population: 3.926
Median total errors in population: 2
Error averages by case: (0.328 0.331 0.066 0.33 0.329 0.328 0.361 0.738 0.992 0.123)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 20.19
Average program size in population (points): 26.065
Average percent parens in population: 0.227
Minimum age in population: 59.46516257378971
Maximum age in population: 62.34401186855393
Average age in population: 60.49632777843332
Median age in population: 60.78879074222641
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 488
Genome diversity (% unique genomes):	 0.318
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 533
Syntactic diversity (% unique Push programs):	 0.255
Total error diversity:				 0.009
Error (vector) diversity:			 0.021
Behavioral diversity:				 0.058
--- Run Statistics ---
Number of program evaluations used so far: 42000
Number of point (instruction) evaluations so far: 8972384
--- Timings ---
Current time: 1559314434814 milliseconds
Total Time:          98.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        80.5 seconds, 82.0%
Fitness Testing:      9.4 seconds,  9.6%
Report:               8.1 seconds,  8.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 41
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 42
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 42
;;******************************
;; -*- Smallest problem report - generation 42
Test total error for best: 502
Test mean error for best: 0.50200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 48                  | Program output: 48                 
Correct output: -33                 | Program output: 30                 
Correct output: 32                  | Program output: 65                 
Correct output: 24                  | Program output: 24                 
Correct output: -79                 | Program output: -20                
Correct output: -83                 | Program output: -83                
Correct output: -54                 | Program output: -54                
Correct output: -20                 | Program output: -20                
Correct output: -79                 | Program output: -79                
Correct output: -85                 | Program output: -54                
Correct output: -66                 | Program output: -66                
Correct output: 64                  | Program output: 64                 
Correct output: -21                 | Program output: -21                
Correct output: 13                  | Program output: 13                 
Correct output: 35                  | Program output: 35                 
Correct output: 0                   | Program output: 0                  
Correct output: 3                   | Program output: 3                  
Correct output: 10                  | Program output: 14                 
Correct output: 21                  | Program output: 82                 
Correct output: 43                  | Program output: 76                 
Correct output: 20                  | Program output: 40                 
Correct output: 5                   | Program output: 11                 
Correct output: 6                   | Program output: 6                  
Correct output: 30                  | Program output: 100                
Correct output: 13                  | Program output: 13                 
Correct output: 21                  | Program output: 51                 
Correct output: 19                  | Program output: 39                 
Correct output: 2                   | Program output: 2                  
Correct output: 2                   | Program output: 2                  
Correct output: 1                   | Program output: 1                  
Correct output: 1                   | Program output: 1                  
Correct output: 36                  | Program output: 36                 
Correct output: 8                   | Program output: 84                 
Correct output: 41                  | Program output: 62                 
Correct output: 18                  | Program output: 18                 
Correct output: -25                 | Program output: -25                
Correct output: -25                 | Program output: 0                  
Correct output: -31                 | Program output: -31                
Correct output: -35                 | Program output: -35                
Correct output: -49                 | Program output: 5                  
Correct output: -85                 | Program output: -85                
Correct output: -24                 | Program output: -7                 
Correct output: -93                 | Program output: -28                
Correct output: -81                 | Program output: -81                
Correct output: -56                 | Program output: -11                
Correct output: -57                 | Program output: -57                
Correct output: -97                 | Program output: -97                
Correct output: -58                 | Program output: -58                
Correct output: -66                 | Program output: -66                
Correct output: -20                 | Program output: -20                
Correct output: -91                 | Program output: -91                
Correct output: -80                 | Program output: -6                 
Correct output: -83                 | Program output: -83                
Correct output: -42                 | Program output: -42                
Correct output: 33                  | Program output: 33                 
Correct output: -65                 | Program output: -65                
Correct output: -79                 | Program output: -79                
Correct output: -86                 | Program output: -86                
Correct output: 2                   | Program output: 2                  
Correct output: -13                 | Program output: -13                
Correct output: -90                 | Program output: -42                
Correct output: -87                 | Program output: -15                
Correct output: -51                 | Program output: -8                 
Correct output: -64                 | Program output: -40                
Correct output: -90                 | Program output: -90                
Correct output: -34                 | Program output: 34                 
Correct output: -57                 | Program output: 9                  
Correct output: -76                 | Program output: -76                
Correct output: -86                 | Program output: -59                
Correct output: 1                   | Program output: 25                 
Correct output: -98                 | Program output: -86                
Correct output: -47                 | Program output: -14                
Correct output: -34                 | Program output: -11                
Correct output: -80                 | Program output: -80                
Correct output: -34                 | Program output: -10                
Correct output: -15                 | Program output: -15                
Correct output: -46                 | Program output: -46                
Correct output: 17                  | Program output: 17                 
Correct output: -78                 | Program output: 0                  
Correct output: -92                 | Program output: -92                
Correct output: -92                 | Program output: -92                
Correct output: -68                 | Program output: -68                
Correct output: -98                 | Program output: -98                
Correct output: -77                 | Program output: -24                
Correct output: -21                 | Program output: -21                
Correct output: -81                 | Program output: -76                
Correct output: -86                 | Program output: -37                
Correct output: -56                 | Program output: -53                
Correct output: -12                 | Program output: -12                
Correct output: -75                 | Program output: -75                
Correct output: -68                 | Program output: -68                
Correct output: -97                 | Program output: 47                 
Correct output: -71                 | Program output: -71                
Correct output: -36                 | Program output: -36                
Correct output: -8                  | Program output: -8                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in2} {:close 1, :instruction in3} {:close 1, :instruction in2} {:close 1, :instruction in3} {:close 1, :instruction in1} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction exec_pop} {:close 1, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 2, :instruction exec_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s})
Lexicase best program: (in2 in3 in2 in3 in1 boolean_stackdepth exec_pop () in4 in1 integer_dup_times integer_yankdup print_integer print_boolean boolean_yankdup boolean_frominteger integer_sub boolean_or exec_flush exec_pop () boolean_frominteger exec_s () () ())
Lexicase best errors: [0 0 0 0 1 0 0 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 27
Percent parens: 0.222
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in2} {:close 1, :instruction in3} {:close 1, :instruction in2} {:close 1, :instruction in3} {:close 1, :instruction in1} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction exec_pop} {:close 1, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 2, :instruction exec_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s})
Zero cases best program: (in2 in3 in2 in3 in1 boolean_stackdepth exec_pop () in4 in1 integer_dup_times integer_yankdup print_integer print_boolean boolean_yankdup boolean_frominteger integer_sub boolean_or exec_flush exec_pop () boolean_frominteger exec_s () () ())
Zero cases best errors: [0 0 0 0 1 0 0 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 27
Percent parens: 0.222
--- Lexicase Population Statistics ---
Count of elite individuals by case: (950 36 709 547 156 951 546 39 444 709)
Population mean number of elite cases: 5.09
Count of perfect (error zero) individuals by case: (950 36 709 547 156 951 546 39 444 709)
Population mean number of perfect (error zero) cases: 5.09
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in2} {:close 1, :instruction in3} {:close 1, :instruction in2} {:close 1, :instruction in3} {:close 1, :instruction in1} {:close 1, :instruction exec_s} {:close 1, :instruction exec_pop} {:close 1, :instruction in4} {:close 1, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 2, :instruction exec_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_frominteger})
Best program: (in2 in3 in2 in3 in1 exec_s () (exec_pop () in4) (in1) integer_dup_times integer_yankdup print_integer print_boolean boolean_yankdup integer_stackdepth integer_sub boolean_or exec_flush exec_pop () boolean_frominteger boolean_frominteger)
Errors: [0 0 0 0 1 0 0 0 1 0]
Total: 2
Mean: 0.2
Genome size: 21
Size: 27
Percent parens: 0.222
--- Population Statistics ---
Average total errors in population: 4.913
Median total errors in population: 4
Error averages by case: (0.05 0.964 0.291 0.453 0.844 0.049 0.454 0.961 0.556 0.291)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 20.311
Average program size in population (points): 26.137
Average percent parens in population: 0.223
Minimum age in population: 60.78879074222641
Maximum age in population: 63.65651186855393
Average age in population: 62.08325826686803
Median age in population: 62.20788370011724
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 281
Genome diversity (% unique genomes):	 0.349
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 338
Syntactic diversity (% unique Push programs):	 0.273
Total error diversity:				 0.009
Error (vector) diversity:			 0.025
Behavioral diversity:				 0.079
--- Run Statistics ---
Number of program evaluations used so far: 43000
Number of point (instruction) evaluations so far: 9152254
--- Timings ---
Current time: 1559314436960 milliseconds
Total Time:         100.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        82.3 seconds, 82.0%
Fitness Testing:      9.6 seconds,  9.6%
Report:               8.3 seconds,  8.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 42
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 43
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 43
;;******************************
;; -*- Smallest problem report - generation 43
Test total error for best: 566
Test mean error for best: 0.56600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 48                  | Program output: 48                 
Correct output: -33                 | Program output: 30                 
Correct output: 32                  | Program output: 32                 
Correct output: 24                  | Program output: 89                 
Correct output: -79                 | Program output: -20                
Correct output: -83                 | Program output: -83                
Correct output: -54                 | Program output: -54                
Correct output: -20                 | Program output: -1                 
Correct output: -79                 | Program output: 99                 
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -66                
Correct output: 64                  | Program output: 64                 
Correct output: -21                 | Program output: -21                
Correct output: 13                  | Program output: 13                 
Correct output: 35                  | Program output: 35                 
Correct output: 0                   | Program output: 0                  
Correct output: 3                   | Program output: 29                 
Correct output: 10                  | Program output: 10                 
Correct output: 21                  | Program output: 21                 
Correct output: 43                  | Program output: 43                 
Correct output: 20                  | Program output: 20                 
Correct output: 5                   | Program output: 98                 
Correct output: 6                   | Program output: 62                 
Correct output: 30                  | Program output: 30                 
Correct output: 13                  | Program output: 89                 
Correct output: 21                  | Program output: 21                 
Correct output: 19                  | Program output: 79                 
Correct output: 2                   | Program output: 8                  
Correct output: 2                   | Program output: 29                 
Correct output: 1                   | Program output: 3                  
Correct output: 1                   | Program output: 84                 
Correct output: 36                  | Program output: 62                 
Correct output: 8                   | Program output: 8                  
Correct output: 41                  | Program output: 41                 
Correct output: 18                  | Program output: 48                 
Correct output: -25                 | Program output: 65                 
Correct output: -25                 | Program output: 41                 
Correct output: -31                 | Program output: 26                 
Correct output: -35                 | Program output: 48                 
Correct output: -49                 | Program output: -49                
Correct output: -85                 | Program output: -24                
Correct output: -24                 | Program output: -7                 
Correct output: -93                 | Program output: -93                
Correct output: -81                 | Program output: -81                
Correct output: -56                 | Program output: -11                
Correct output: -57                 | Program output: -57                
Correct output: -97                 | Program output: -83                
Correct output: -58                 | Program output: 92                 
Correct output: -66                 | Program output: 3                  
Correct output: -20                 | Program output: 63                 
Correct output: -91                 | Program output: 44                 
Correct output: -80                 | Program output: -80                
Correct output: -83                 | Program output: 92                 
Correct output: -42                 | Program output: 57                 
Correct output: 33                  | Program output: 60                 
Correct output: -65                 | Program output: 69                 
Correct output: -79                 | Program output: 81                 
Correct output: -86                 | Program output: -24                
Correct output: 2                   | Program output: 21                 
Correct output: -13                 | Program output: 18                 
Correct output: -90                 | Program output: -90                
Correct output: -87                 | Program output: -78                
Correct output: -51                 | Program output: -8                 
Correct output: -64                 | Program output: 67                 
Correct output: -90                 | Program output: -53                
Correct output: -34                 | Program output: -34                
Correct output: -57                 | Program output: 67                 
Correct output: -76                 | Program output: 46                 
Correct output: -86                 | Program output: -86                
Correct output: 1                   | Program output: 1                  
Correct output: -98                 | Program output: -98                
Correct output: -47                 | Program output: -47                
Correct output: -34                 | Program output: -34                
Correct output: -80                 | Program output: 27                 
Correct output: -34                 | Program output: -34                
Correct output: -15                 | Program output: -15                
Correct output: -46                 | Program output: 95                 
Correct output: 17                  | Program output: 56                 
Correct output: -78                 | Program output: 20                 
Correct output: -92                 | Program output: 29                 
Correct output: -92                 | Program output: -92                
Correct output: -68                 | Program output: 2                  
Correct output: -98                 | Program output: -76                
Correct output: -77                 | Program output: 64                 
Correct output: -21                 | Program output: 57                 
Correct output: -81                 | Program output: -76                
Correct output: -86                 | Program output: -35                
Correct output: -56                 | Program output: 85                 
Correct output: -12                 | Program output: -12                
Correct output: -75                 | Program output: -75                
Correct output: -68                 | Program output: 46                 
Correct output: -97                 | Program output: 16                 
Correct output: -71                 | Program output: -17                
Correct output: -36                 | Program output: 89                 
Correct output: -8                  | Program output: 97                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in2} {:close 1, :instruction in3} {:close 1, :instruction in2} {:close 1, :instruction in3} {:close 1, :instruction in1} {:close 1, :instruction in4} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 2, :instruction exec_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s})
Lexicase best program: (in2 in3 in2 in3 in1 in4 exec_pop () integer_dup_times integer_yankdup print_integer print_boolean boolean_yankdup boolean_frominteger integer_sub boolean_or exec_flush exec_pop () boolean_frominteger exec_s () () ())
Lexicase best errors: [0 1 0 0 1 0 1 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 25
Percent parens: 0.240
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in2} {:close 1, :instruction in3} {:close 1, :instruction in2} {:close 1, :instruction in3} {:close 1, :instruction in1} {:close 1, :instruction in4} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 2, :instruction exec_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s})
Zero cases best program: (in2 in3 in2 in3 in1 in4 exec_pop () integer_dup_times integer_yankdup print_integer print_boolean boolean_yankdup boolean_frominteger integer_sub boolean_or exec_flush exec_pop () boolean_frominteger exec_s () () ())
Zero cases best errors: [0 1 0 0 1 0 1 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 25
Percent parens: 0.240
--- Lexicase Population Statistics ---
Count of elite individuals by case: (929 16 211 204 670 416 154 253 199 244)
Population mean number of elite cases: 3.30
Count of perfect (error zero) individuals by case: (929 16 211 204 670 416 154 253 199 244)
Population mean number of perfect (error zero) cases: 3.30
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in2} {:close 1, :instruction in3} {:close 1, :instruction in2} {:close 1, :instruction in3} {:close 1, :instruction in1} {:close 1, :instruction in4} {:close 1, :instruction exec_pop} {:close 1, :instruction in4} {:close 1, :instruction integer_max} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 2, :instruction exec_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s})
Best program: (in2 in3 in2 in3 in1 in4 exec_pop () in4 integer_max integer_dup_times integer_yankdup print_integer print_boolean boolean_yankdup boolean_frominteger integer_sub boolean_or exec_flush exec_pop () boolean_frominteger exec_s () () ())
Errors: [0 1 0 0 1 0 1 0 0 0]
Total: 3
Mean: 0.3
Genome size: 21
Size: 27
Percent parens: 0.222
--- Population Statistics ---
Average total errors in population: 6.704
Median total errors in population: 7
Error averages by case: (0.071 0.984 0.789 0.796 0.33 0.584 0.846 0.747 0.801 0.756)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 20.285
Average program size in population (points): 26.364
Average percent parens in population: 0.231
Minimum age in population: 62.52225588301735
Maximum age in population: 65.17046591821509
Average age in population: 64.09016604767565
Median age in population: 64.12106257314917
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 132
Genome diversity (% unique genomes):	 0.318
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 142
Syntactic diversity (% unique Push programs):	 0.255
Total error diversity:				 0.008
Error (vector) diversity:			 0.041
Behavioral diversity:				 0.088
--- Run Statistics ---
Number of program evaluations used so far: 44000
Number of point (instruction) evaluations so far: 9331964
--- Timings ---
Current time: 1559314439109 milliseconds
Total Time:         102.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        84.1 seconds, 82.1%
Fitness Testing:      9.8 seconds,  9.6%
Report:               8.5 seconds,  8.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 43
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 44
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 44
;;******************************
;; -*- Smallest problem report - generation 44
Test total error for best: 565
Test mean error for best: 0.56500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 48                  | Program output: 48                 
Correct output: -33                 | Program output: -33                
Correct output: 32                  | Program output: 65                 
Correct output: 24                  | Program output: 89                 
Correct output: -79                 | Program output: -79                
Correct output: -83                 | Program output: -83                
Correct output: -54                 | Program output: -54                
Correct output: -20                 | Program output: -1                 
Correct output: -79                 | Program output: -79                
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -66                
Correct output: 64                  | Program output: 64                 
Correct output: -21                 | Program output: -21                
Correct output: 13                  | Program output: 13                 
Correct output: 35                  | Program output: 35                 
Correct output: 0                   | Program output: 92                 
Correct output: 3                   | Program output: 27                 
Correct output: 10                  | Program output: 14                 
Correct output: 21                  | Program output: 82                 
Correct output: 43                  | Program output: 76                 
Correct output: 20                  | Program output: 98                 
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 85                 
Correct output: 30                  | Program output: 100                
Correct output: 13                  | Program output: 41                 
Correct output: 21                  | Program output: 51                 
Correct output: 19                  | Program output: 19                 
Correct output: 2                   | Program output: 2                  
Correct output: 2                   | Program output: 2                  
Correct output: 1                   | Program output: 39                 
Correct output: 1                   | Program output: 84                 
Correct output: 36                  | Program output: 45                 
Correct output: 8                   | Program output: 84                 
Correct output: 41                  | Program output: 62                 
Correct output: 18                  | Program output: 18                 
Correct output: -25                 | Program output: -25                
Correct output: -25                 | Program output: 0                  
Correct output: -31                 | Program output: -31                
Correct output: -35                 | Program output: -35                
Correct output: -49                 | Program output: 35                 
Correct output: -85                 | Program output: -85                
Correct output: -24                 | Program output: -24                
Correct output: -93                 | Program output: -28                
Correct output: -81                 | Program output: 44                 
Correct output: -56                 | Program output: 100                
Correct output: -57                 | Program output: 66                 
Correct output: -97                 | Program output: -97                
Correct output: -58                 | Program output: -43                
Correct output: -66                 | Program output: -66                
Correct output: -20                 | Program output: -20                
Correct output: -91                 | Program output: -91                
Correct output: -80                 | Program output: -58                
Correct output: -83                 | Program output: -83                
Correct output: -42                 | Program output: -42                
Correct output: 33                  | Program output: 33                 
Correct output: -65                 | Program output: -65                
Correct output: -79                 | Program output: -79                
Correct output: -86                 | Program output: -30                
Correct output: 2                   | Program output: 2                  
Correct output: -13                 | Program output: -13                
Correct output: -90                 | Program output: -42                
Correct output: -87                 | Program output: -15                
Correct output: -51                 | Program output: 10                 
Correct output: -64                 | Program output: -55                
Correct output: -90                 | Program output: -75                
Correct output: -34                 | Program output: 59                 
Correct output: -57                 | Program output: -57                
Correct output: -76                 | Program output: -76                
Correct output: -86                 | Program output: -59                
Correct output: 1                   | Program output: 25                 
Correct output: -98                 | Program output: -86                
Correct output: -47                 | Program output: -39                
Correct output: -34                 | Program output: -11                
Correct output: -80                 | Program output: -80                
Correct output: -34                 | Program output: -10                
Correct output: -15                 | Program output: 36                 
Correct output: -46                 | Program output: -22                
Correct output: 17                  | Program output: 17                 
Correct output: -78                 | Program output: 0                  
Correct output: -92                 | Program output: -92                
Correct output: -92                 | Program output: -29                
Correct output: -68                 | Program output: -68                
Correct output: -98                 | Program output: -98                
Correct output: -77                 | Program output: -24                
Correct output: -21                 | Program output: -21                
Correct output: -81                 | Program output: -81                
Correct output: -86                 | Program output: -86                
Correct output: -56                 | Program output: -53                
Correct output: -12                 | Program output: 81                 
Correct output: -75                 | Program output: -65                
Correct output: -68                 | Program output: -68                
Correct output: -97                 | Program output: 47                 
Correct output: -71                 | Program output: -40                
Correct output: -36                 | Program output: -13                
Correct output: -8                  | Program output: -8                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in2} {:close 1, :instruction in3} {:close 1, :instruction in1} {:close 1, :instruction in4} {:close 1, :instruction exec_pop} {:close 1, :instruction integer_rot} {:close 1, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction in1} {:close 1, :instruction in4} {:close 1, :instruction exec_pop} {:close 1, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s})
Lexicase best program: (in2 in3 in1 in4 exec_pop () integer_rot in1 integer_dup_times integer_yankdup in1 in4 exec_pop () in4 integer_yankdup print_integer print_boolean boolean_yankdup boolean_frominteger integer_sub boolean_or integer_rot exec_pop () boolean_frominteger exec_s () () ())
Lexicase best errors: [1 1 0 0 0 0 1 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 31
Percent parens: 0.226
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in2} {:close 1, :instruction in3} {:close 1, :instruction in1} {:close 1, :instruction in4} {:close 1, :instruction exec_pop} {:close 1, :instruction integer_rot} {:close 1, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction in1} {:close 1, :instruction in4} {:close 1, :instruction exec_pop} {:close 1, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s})
Zero cases best program: (in2 in3 in1 in4 exec_pop () integer_rot in1 integer_dup_times integer_yankdup in1 in4 exec_pop () in4 integer_yankdup print_integer print_boolean boolean_yankdup boolean_frominteger integer_sub boolean_or integer_rot exec_pop () boolean_frominteger exec_s () () ())
Zero cases best errors: [1 1 0 0 0 0 1 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 31
Percent parens: 0.226
--- Lexicase Population Statistics ---
Count of elite individuals by case: (374 359 115 418 268 234 481 822 14 15)
Population mean number of elite cases: 3.10
Count of perfect (error zero) individuals by case: (374 359 115 418 268 234 481 822 14 15)
Population mean number of perfect (error zero) cases: 3.10
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in2} {:close 1, :instruction in3} {:close 1, :instruction in2} {:close 1, :instruction in3} {:close 1, :instruction in1} {:close 1, :instruction in4} {:close 1, :instruction exec_pop} {:close 1, :instruction integer_rot} {:close 1, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction in1} {:close 1, :instruction in4} {:close 1, :instruction exec_pop} {:close 1, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s})
Best program: (in2 in3 in2 in3 in1 in4 exec_pop () integer_rot in1 integer_dup_times integer_yankdup in1 in4 exec_pop () in4 integer_yankdup print_integer print_boolean boolean_yankdup boolean_frominteger integer_sub boolean_or integer_rot exec_pop () boolean_frominteger exec_s () () ())
Errors: [1 1 0 0 0 0 1 0 1 0]
Total: 4
Mean: 0.4
Genome size: 26
Size: 33
Percent parens: 0.212
--- Population Statistics ---
Average total errors in population: 6.9
Median total errors in population: 7
Error averages by case: (0.626 0.641 0.885 0.582 0.732 0.766 0.519 0.178 0.986 0.985)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 21.362
Average program size in population (points): 27.624
Average percent parens in population: 0.225
Minimum age in population: 64.25572102380829
Maximum age in population: 66.86806618235823
Average age in population: 65.72417786397574
Median age in population: 65.67308832150138
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 104
Genome diversity (% unique genomes):	 0.334
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 114
Syntactic diversity (% unique Push programs):	 0.277
Total error diversity:				 0.007
Error (vector) diversity:			 0.037
Behavioral diversity:				 0.09
--- Run Statistics ---
Number of program evaluations used so far: 45000
Number of point (instruction) evaluations so far: 9520909
--- Timings ---
Current time: 1559314441332 milliseconds
Total Time:         104.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        85.9 seconds, 82.1%
Fitness Testing:     10.0 seconds,  9.6%
Report:               8.6 seconds,  8.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 44
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 45
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 45
;;******************************
;; -*- Smallest problem report - generation 45
Test total error for best: 525
Test mean error for best: 0.52500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 48                  | Program output: 48                 
Correct output: -33                 | Program output: -33                
Correct output: 32                  | Program output: 32                 
Correct output: 24                  | Program output: 24                 
Correct output: -79                 | Program output: -20                
Correct output: -83                 | Program output: -83                
Correct output: -54                 | Program output: -54                
Correct output: -20                 | Program output: -1                 
Correct output: -79                 | Program output: -79                
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -66                
Correct output: 64                  | Program output: 64                 
Correct output: -21                 | Program output: -21                
Correct output: 13                  | Program output: 13                 
Correct output: 35                  | Program output: 35                 
Correct output: 0                   | Program output: 0                  
Correct output: 3                   | Program output: 3                  
Correct output: 10                  | Program output: 14                 
Correct output: 21                  | Program output: 72                 
Correct output: 43                  | Program output: 76                 
Correct output: 20                  | Program output: 20                 
Correct output: 5                   | Program output: 11                 
Correct output: 6                   | Program output: 6                  
Correct output: 30                  | Program output: 36                 
Correct output: 13                  | Program output: 13                 
Correct output: 21                  | Program output: 51                 
Correct output: 19                  | Program output: 39                 
Correct output: 2                   | Program output: 8                  
Correct output: 2                   | Program output: 29                 
Correct output: 1                   | Program output: 1                  
Correct output: 1                   | Program output: 1                  
Correct output: 36                  | Program output: 36                 
Correct output: 8                   | Program output: 73                 
Correct output: 41                  | Program output: 45                 
Correct output: 18                  | Program output:                    
Correct output: -25                 | Program output: 1                  
Correct output: -25                 | Program output: 0                  
Correct output: -31                 | Program output: -31                
Correct output: -35                 | Program output: -35                
Correct output: -49                 | Program output: -49                
Correct output: -85                 | Program output: -24                
Correct output: -24                 | Program output: -12                
Correct output: -93                 | Program output: -93                
Correct output: -81                 | Program output: 44                 
Correct output: -56                 | Program output: 38                 
Correct output: -57                 | Program output: 64                 
Correct output: -97                 | Program output: -83                
Correct output: -58                 | Program output: -43                
Correct output: -66                 | Program output: -66                
Correct output: -20                 | Program output: -20                
Correct output: -91                 | Program output: -91                
Correct output: -80                 | Program output: 26                 
Correct output: -83                 | Program output: -83                
Correct output: -42                 | Program output: -42                
Correct output: 33                  | Program output: 33                 
Correct output: -65                 | Program output: -65                
Correct output: -79                 | Program output: -79                
Correct output: -86                 | Program output: 97                 
Correct output: 2                   | Program output: 21                 
Correct output: -13                 | Program output:                    
Correct output: -90                 | Program output: -90                
Correct output: -87                 | Program output: -78                
Correct output: -51                 | Program output: -51                
Correct output: -64                 | Program output: -55                
Correct output: -90                 | Program output: 38                 
Correct output: -34                 | Program output: -34                
Correct output: -57                 | Program output: 9                  
Correct output: -76                 | Program output: -76                
Correct output: -86                 | Program output: -86                
Correct output: 1                   | Program output: 25                 
Correct output: -98                 | Program output: -98                
Correct output: -47                 | Program output: 44                 
Correct output: -34                 | Program output: -34                
Correct output: -80                 | Program output: -80                
Correct output: -34                 | Program output: -34                
Correct output: -15                 | Program output: 36                 
Correct output: -46                 | Program output: -22                
Correct output: 17                  | Program output: 56                 
Correct output: -78                 | Program output: 0                  
Correct output: -92                 | Program output: -92                
Correct output: -92                 | Program output: -23                
Correct output: -68                 | Program output: 60                 
Correct output: -98                 | Program output: -76                
Correct output: -77                 | Program output: -24                
Correct output: -21                 | Program output: -21                
Correct output: -81                 | Program output: 3                  
Correct output: -86                 | Program output: 11                 
Correct output: -56                 | Program output: -53                
Correct output: -12                 | Program output: 2                  
Correct output: -75                 | Program output: 2                  
Correct output: -68                 | Program output: -68                
Correct output: -97                 | Program output: 47                 
Correct output: -71                 | Program output: -44                
Correct output: -36                 | Program output: -13                
Correct output: -8                  | Program output: -8                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in2} {:close 1, :instruction exec_yank} {:close 1, :instruction in2} {:close 1, :instruction in3} {:close 1, :instruction in1} {:close 1, :instruction in4} {:close 1, :instruction exec_pop} {:close 1, :instruction integer_rot} {:close 1, :instruction in1} {:close 1, :instruction in3} {:close 1, :instruction in2} {:close 1, :instruction in3} {:close 1, :instruction in1} {:close 1, :instruction in4} {:close 1, :instruction exec_pop} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction in2} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 2, :instruction exec_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s})
Lexicase best program: (in2 exec_yank in2 in3 in1 in4 exec_pop () integer_rot in1 in3 in2 in3 in1 in4 exec_pop () exec_s_when_autoconstructing () (in2) (integer_dup_times integer_yankdup print_integer print_boolean) boolean_yankdup boolean_frominteger integer_sub boolean_or exec_flush exec_pop () boolean_frominteger exec_s () () ())
Lexicase best errors: [0 0 0 0 0 1 0 1 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 39
Percent parens: 0.256
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in2} {:close 1, :instruction exec_yank} {:close 1, :instruction in2} {:close 1, :instruction in3} {:close 1, :instruction in1} {:close 1, :instruction in4} {:close 1, :instruction exec_pop} {:close 1, :instruction integer_rot} {:close 1, :instruction in1} {:close 1, :instruction in3} {:close 1, :instruction in2} {:close 1, :instruction in3} {:close 1, :instruction in1} {:close 1, :instruction in4} {:close 1, :instruction exec_pop} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction in2} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 2, :instruction exec_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s})
Zero cases best program: (in2 exec_yank in2 in3 in1 in4 exec_pop () integer_rot in1 in3 in2 in3 in1 in4 exec_pop () exec_s_when_autoconstructing () (in2) (integer_dup_times integer_yankdup print_integer print_boolean) boolean_yankdup boolean_frominteger integer_sub boolean_or exec_flush exec_pop () boolean_frominteger exec_s () () ())
Zero cases best errors: [0 0 0 0 0 1 0 1 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 39
Percent parens: 0.256
--- Lexicase Population Statistics ---
Count of elite individuals by case: (232 932 573 284 226 369 628 313 215 332)
Population mean number of elite cases: 4.10
Count of perfect (error zero) individuals by case: (232 932 573 284 226 369 628 313 215 332)
Population mean number of perfect (error zero) cases: 4.10
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in2} {:close 1, :instruction exec_yank} {:close 1, :instruction in2} {:close 1, :instruction in3} {:close 1, :instruction in1} {:close 1, :instruction in4} {:close 1, :instruction exec_pop} {:close 1, :instruction integer_rot} {:close 1, :instruction in1} {:close 1, :instruction in3} {:close 1, :instruction in2} {:close 1, :instruction in3} {:close 1, :instruction in1} {:close 1, :instruction in4} {:close 1, :instruction exec_pop} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction in2} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 2, :instruction exec_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s})
Best program: (in2 exec_yank in2 in3 in1 in4 exec_pop () integer_rot in1 in3 in2 in3 in1 in4 exec_pop () exec_s_when_autoconstructing () (in2) (integer_dup_times integer_yankdup print_integer print_boolean) boolean_yankdup boolean_frominteger integer_sub boolean_or exec_flush exec_pop () boolean_frominteger exec_s () () ())
Errors: [0 0 0 0 0 1 0 1 1 0]
Total: 3
Mean: 0.3
Genome size: 29
Size: 39
Percent parens: 0.256
--- Population Statistics ---
Average total errors in population: 5.896
Median total errors in population: 6
Error averages by case: (0.768 0.068 0.427 0.716 0.774 0.631 0.372 0.687 0.785 0.668)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 22.219
Average program size in population (points): 28.503
Average percent parens in population: 0.219
Minimum age in population: 65.25572102380829
Maximum age in population: 68.67683053095993
Average age in population: 67.26047673889752
Median age in population: 67.32710086549855
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 115
Genome diversity (% unique genomes):	 0.398
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 122
Syntactic diversity (% unique Push programs):	 0.328
Total error diversity:				 0.008
Error (vector) diversity:			 0.043
Behavioral diversity:				 0.113
--- Run Statistics ---
Number of program evaluations used so far: 46000
Number of point (instruction) evaluations so far: 9726866
--- Timings ---
Current time: 1559314443567 milliseconds
Total Time:         106.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        87.7 seconds, 82.0%
Fitness Testing:     10.2 seconds,  9.5%
Report:               8.9 seconds,  8.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 45
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 46
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 46
;;******************************
;; -*- Smallest problem report - generation 46
Test total error for best: 525
Test mean error for best: 0.52500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 48                  | Program output: 48                 
Correct output: -33                 | Program output: -33                
Correct output: 32                  | Program output: 32                 
Correct output: 24                  | Program output: 24                 
Correct output: -79                 | Program output: -20                
Correct output: -83                 | Program output: -83                
Correct output: -54                 | Program output: -54                
Correct output: -20                 | Program output: -1                 
Correct output: -79                 | Program output: -79                
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -66                
Correct output: 64                  | Program output: 64                 
Correct output: -21                 | Program output: -21                
Correct output: 13                  | Program output: 13                 
Correct output: 35                  | Program output: 35                 
Correct output: 0                   | Program output: 0                  
Correct output: 3                   | Program output: 3                  
Correct output: 10                  | Program output: 14                 
Correct output: 21                  | Program output: 72                 
Correct output: 43                  | Program output: 76                 
Correct output: 20                  | Program output: 20                 
Correct output: 5                   | Program output: 11                 
Correct output: 6                   | Program output: 6                  
Correct output: 30                  | Program output: 36                 
Correct output: 13                  | Program output: 13                 
Correct output: 21                  | Program output: 51                 
Correct output: 19                  | Program output: 39                 
Correct output: 2                   | Program output: 8                  
Correct output: 2                   | Program output: 29                 
Correct output: 1                   | Program output: 1                  
Correct output: 1                   | Program output: 1                  
Correct output: 36                  | Program output: 36                 
Correct output: 8                   | Program output: 73                 
Correct output: 41                  | Program output: 45                 
Correct output: 18                  | Program output:                    
Correct output: -25                 | Program output: 1                  
Correct output: -25                 | Program output: 0                  
Correct output: -31                 | Program output: -31                
Correct output: -35                 | Program output: -35                
Correct output: -49                 | Program output: -49                
Correct output: -85                 | Program output: -24                
Correct output: -24                 | Program output: -12                
Correct output: -93                 | Program output: -93                
Correct output: -81                 | Program output: 44                 
Correct output: -56                 | Program output: 38                 
Correct output: -57                 | Program output: 64                 
Correct output: -97                 | Program output: -83                
Correct output: -58                 | Program output: -43                
Correct output: -66                 | Program output: -66                
Correct output: -20                 | Program output: -20                
Correct output: -91                 | Program output: -91                
Correct output: -80                 | Program output: 26                 
Correct output: -83                 | Program output: -83                
Correct output: -42                 | Program output: -42                
Correct output: 33                  | Program output: 33                 
Correct output: -65                 | Program output: -65                
Correct output: -79                 | Program output: -79                
Correct output: -86                 | Program output: 97                 
Correct output: 2                   | Program output: 21                 
Correct output: -13                 | Program output:                    
Correct output: -90                 | Program output: -90                
Correct output: -87                 | Program output: -78                
Correct output: -51                 | Program output: -51                
Correct output: -64                 | Program output: -55                
Correct output: -90                 | Program output: 38                 
Correct output: -34                 | Program output: -34                
Correct output: -57                 | Program output: 9                  
Correct output: -76                 | Program output: -76                
Correct output: -86                 | Program output: -86                
Correct output: 1                   | Program output: 25                 
Correct output: -98                 | Program output: -98                
Correct output: -47                 | Program output: 44                 
Correct output: -34                 | Program output: -34                
Correct output: -80                 | Program output: -80                
Correct output: -34                 | Program output: -34                
Correct output: -15                 | Program output: 36                 
Correct output: -46                 | Program output: -22                
Correct output: 17                  | Program output: 56                 
Correct output: -78                 | Program output: 0                  
Correct output: -92                 | Program output: -92                
Correct output: -92                 | Program output: -23                
Correct output: -68                 | Program output: 60                 
Correct output: -98                 | Program output: -76                
Correct output: -77                 | Program output: -24                
Correct output: -21                 | Program output: -21                
Correct output: -81                 | Program output: 3                  
Correct output: -86                 | Program output: 11                 
Correct output: -56                 | Program output: -53                
Correct output: -12                 | Program output: 2                  
Correct output: -75                 | Program output: 2                  
Correct output: -68                 | Program output: -68                
Correct output: -97                 | Program output: 47                 
Correct output: -71                 | Program output: -44                
Correct output: -36                 | Program output: -13                
Correct output: -8                  | Program output: -8                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in2} {:close 1, :instruction exec_yank} {:close 1, :instruction in2} {:close 1, :instruction in3} {:close 1, :instruction in1} {:close 1, :instruction in4} {:close 1, :instruction exec_pop} {:close 1, :instruction integer_rot} {:close 1, :instruction in1} {:close 1, :instruction in3} {:close 1, :instruction in2} {:close 1, :instruction in3} {:close 1, :instruction in1} {:close 1, :instruction in4} {:close 1, :instruction exec_pop} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction in2} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 2, :instruction exec_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s})
Lexicase best program: (in2 exec_yank in2 in3 in1 in4 exec_pop () integer_rot in1 in3 in2 in3 in1 in4 exec_pop () exec_s_when_autoconstructing () (in2) (integer_dup_times integer_yankdup print_integer print_boolean) boolean_yankdup boolean_frominteger integer_sub boolean_or exec_flush exec_pop () boolean_frominteger exec_s () () ())
Lexicase best errors: [1 0 0 0 1 0 1 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 39
Percent parens: 0.256
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in2} {:close 1, :instruction exec_yank} {:close 1, :instruction in2} {:close 1, :instruction in3} {:close 1, :instruction in1} {:close 1, :instruction in4} {:close 1, :instruction exec_pop} {:close 1, :instruction integer_rot} {:close 1, :instruction in1} {:close 1, :instruction in3} {:close 1, :instruction in2} {:close 1, :instruction in3} {:close 1, :instruction in1} {:close 1, :instruction in4} {:close 1, :instruction exec_pop} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction in2} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 2, :instruction exec_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s})
Zero cases best program: (in2 exec_yank in2 in3 in1 in4 exec_pop () integer_rot in1 in3 in2 in3 in1 in4 exec_pop () exec_s_when_autoconstructing () (in2) (integer_dup_times integer_yankdup print_integer print_boolean) boolean_yankdup boolean_frominteger integer_sub boolean_or exec_flush exec_pop () boolean_frominteger exec_s () () ())
Zero cases best errors: [1 0 0 0 1 0 1 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 39
Percent parens: 0.256
--- Lexicase Population Statistics ---
Count of elite individuals by case: (78 757 659 659 407 607 48 570 178 347)
Population mean number of elite cases: 4.31
Count of perfect (error zero) individuals by case: (78 757 659 659 407 607 48 570 178 347)
Population mean number of perfect (error zero) cases: 4.31
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in2} {:close 1, :instruction exec_yank} {:close 1, :instruction in2} {:close 1, :instruction in3} {:close 1, :instruction in1} {:close 1, :instruction in4} {:close 1, :instruction exec_pop} {:close 1, :instruction integer_rot} {:close 1, :instruction in1} {:close 1, :instruction in3} {:close 1, :instruction in2} {:close 1, :instruction in3} {:close 1, :instruction in1} {:close 1, :instruction in4} {:close 1, :instruction exec_pop} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction in2} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 2, :instruction exec_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s})
Best program: (in2 exec_yank in2 in3 in1 in4 exec_pop () integer_rot in1 in3 in2 in3 in1 in4 exec_pop () exec_s_when_autoconstructing () (in2) (integer_dup_times integer_yankdup print_integer print_boolean) boolean_yankdup boolean_frominteger integer_sub boolean_or exec_flush exec_pop () boolean_frominteger exec_s () () ())
Errors: [1 0 0 0 1 0 1 0 1 0]
Total: 4
Mean: 0.4
Genome size: 29
Size: 39
Percent parens: 0.256
--- Population Statistics ---
Average total errors in population: 5.69
Median total errors in population: 5
Error averages by case: (0.922 0.243 0.341 0.341 0.593 0.393 0.952 0.43 0.822 0.653)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 25.25
Average program size in population (points): 33.491
Average percent parens in population: 0.245
Minimum age in population: 67.10835086549855
Maximum age in population: 70.49157126599289
Average age in population: 68.9063408100919
Median age in population: 68.96273259962754
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 203
Genome diversity (% unique genomes):	 0.426
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 221
Syntactic diversity (% unique Push programs):	 0.345
Total error diversity:				 0.007
Error (vector) diversity:			 0.044
Behavioral diversity:				 0.095
--- Run Statistics ---
Number of program evaluations used so far: 47000
Number of point (instruction) evaluations so far: 9957298
--- Timings ---
Current time: 1559314445853 milliseconds
Total Time:         109.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        89.5 seconds, 82.0%
Fitness Testing:     10.4 seconds,  9.6%
Report:               9.1 seconds,  8.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 46
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 47
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 47
;;******************************
;; -*- Smallest problem report - generation 47
Test total error for best: 419
Test mean error for best: 0.41900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 48                  | Program output: 48                 
Correct output: -33                 | Program output: -33                
Correct output: 32                  | Program output: 65                 
Correct output: 24                  | Program output: 89                 
Correct output: -79                 | Program output: -20                
Correct output: -83                 | Program output: -83                
Correct output: -54                 | Program output: -54                
Correct output: -20                 | Program output: -1                 
Correct output: -79                 | Program output: 99                 
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -66                
Correct output: 64                  | Program output: 64                 
Correct output: -21                 | Program output: -21                
Correct output: 13                  | Program output: 13                 
Correct output: 35                  | Program output: 35                 
Correct output: 0                   | Program output: 0                  
Correct output: 3                   | Program output: 27                 
Correct output: 10                  | Program output: 10                 
Correct output: 21                  | Program output: 21                 
Correct output: 43                  | Program output: 43                 
Correct output: 20                  | Program output: 66                 
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 50                 
Correct output: 30                  | Program output: 30                 
Correct output: 13                  | Program output: 41                 
Correct output: 21                  | Program output: 21                 
Correct output: 19                  | Program output: 19                 
Correct output: 2                   | Program output: 2                  
Correct output: 2                   | Program output: 20                 
Correct output: 1                   | Program output: 3                  
Correct output: 1                   | Program output: 84                 
Correct output: 36                  | Program output: 45                 
Correct output: 8                   | Program output: 84                 
Correct output: 41                  | Program output: 41                 
Correct output: 18                  | Program output: 35                 
Correct output: -25                 | Program output: -25                
Correct output: -25                 | Program output: -25                
Correct output: -31                 | Program output: 44                 
Correct output: -35                 | Program output: -35                
Correct output: -49                 | Program output: -49                
Correct output: -85                 | Program output: -24                
Correct output: -24                 | Program output: -24                
Correct output: -93                 | Program output: -93                
Correct output: -81                 | Program output: -81                
Correct output: -56                 | Program output: -11                
Correct output: -57                 | Program output: -57                
Correct output: -97                 | Program output: -83                
Correct output: -58                 | Program output: -58                
Correct output: -66                 | Program output: -15                
Correct output: -20                 | Program output: -13                
Correct output: -91                 | Program output: -16                
Correct output: -80                 | Program output: -80                
Correct output: -83                 | Program output: -60                
Correct output: -42                 | Program output: 4                  
Correct output: 33                  | Program output: 38                 
Correct output: -65                 | Program output: -56                
Correct output: -79                 | Program output: -72                
Correct output: -86                 | Program output: -24                
Correct output: 2                   | Program output: 2                  
Correct output: -13                 | Program output: 18                 
Correct output: -90                 | Program output: -73                
Correct output: -87                 | Program output: -78                
Correct output: -51                 | Program output: -8                 
Correct output: -64                 | Program output: -40                
Correct output: -90                 | Program output: -53                
Correct output: -34                 | Program output: -34                
Correct output: -57                 | Program output: -57                
Correct output: -76                 | Program output: -76                
Correct output: -86                 | Program output: -86                
Correct output: 1                   | Program output: 1                  
Correct output: -98                 | Program output: -98                
Correct output: -47                 | Program output: -47                
Correct output: -34                 | Program output: -34                
Correct output: -80                 | Program output: -27                
Correct output: -34                 | Program output: -34                
Correct output: -15                 | Program output: -15                
Correct output: -46                 | Program output: -46                
Correct output: 17                  | Program output: 56                 
Correct output: -78                 | Program output: 0                  
Correct output: -92                 | Program output: -92                
Correct output: -92                 | Program output: -29                
Correct output: -68                 | Program output: -68                
Correct output: -98                 | Program output: -76                
Correct output: -77                 | Program output: -77                
Correct output: -21                 | Program output: 53                 
Correct output: -81                 | Program output: -81                
Correct output: -86                 | Program output: -35                
Correct output: -56                 | Program output: -56                
Correct output: -12                 | Program output: -12                
Correct output: -75                 | Program output: -75                
Correct output: -68                 | Program output: -68                
Correct output: -97                 | Program output: -97                
Correct output: -71                 | Program output: -17                
Correct output: -36                 | Program output: -36                
Correct output: -8                  | Program output: 97                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in2} {:close 1, :instruction in3} {:close 1, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 1, :instruction in2} {:close 1, :instruction in3} {:close 1, :instruction in1} {:close 1, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction in4} {:close 1, :instruction exec_shove} {:close 1, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_pop})
Lexicase best program: (in2 in3 in2 in2 in3 in2 in3 in1 in2 integer_shove in4 exec_shove () in1 integer_dup_times integer_yankdup print_integer print_boolean boolean_yankdup boolean_frominteger integer_sub boolean_or exec_flush exec_pop ())
Lexicase best errors: [1 0 0 0 0 1 0 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 26
Percent parens: 0.115
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in2} {:close 1, :instruction in3} {:close 1, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 1, :instruction in2} {:close 1, :instruction in3} {:close 1, :instruction in1} {:close 1, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction in4} {:close 1, :instruction exec_shove} {:close 1, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_pop})
Zero cases best program: (in2 in3 in2 in2 in3 in2 in3 in1 in2 integer_shove in4 exec_shove () in1 integer_dup_times integer_yankdup print_integer print_boolean boolean_yankdup boolean_frominteger integer_sub boolean_or exec_flush exec_pop ())
Zero cases best errors: [1 0 0 0 0 1 0 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 26
Percent parens: 0.115
--- Lexicase Population Statistics ---
Count of elite individuals by case: (350 410 554 515 727 656 927 98 354 42)
Population mean number of elite cases: 4.63
Count of perfect (error zero) individuals by case: (350 410 554 515 727 656 927 98 354 42)
Population mean number of perfect (error zero) cases: 4.63
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in2} {:close 1, :instruction in3} {:close 1, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 1, :instruction in2} {:close 1, :instruction in3} {:close 1, :instruction in1} {:close 1, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction in4} {:close 1, :instruction exec_shove} {:close 1, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s})
Best program: (in2 in3 in2 in2 in3 in2 in3 in1 in2 integer_shove in4 exec_shove () in1 integer_dup_times integer_yankdup print_integer print_boolean boolean_yankdup boolean_frominteger integer_sub boolean_or exec_flush exec_pop () boolean_frominteger exec_s () () ())
Errors: [1 0 0 0 0 1 0 0 0 1]
Total: 3
Mean: 0.3
Genome size: 25
Size: 31
Percent parens: 0.194
--- Population Statistics ---
Average total errors in population: 5.367
Median total errors in population: 5
Error averages by case: (0.65 0.59 0.446 0.485 0.273 0.344 0.073 0.902 0.646 0.958)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 25.555
Average program size in population (points): 33.29
Average percent parens in population: 0.233
Minimum age in population: 68.90270407849289
Maximum age in population: 72.0256120670216
Average age in population: 70.50310887869901
Median age in population: 70.46172924354232
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 105
Genome diversity (% unique genomes):	 0.402
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 112
Syntactic diversity (% unique Push programs):	 0.351
Total error diversity:				 0.007
Error (vector) diversity:			 0.053
Behavioral diversity:				 0.12
--- Run Statistics ---
Number of program evaluations used so far: 48000
Number of point (instruction) evaluations so far: 10191532
--- Timings ---
Current time: 1559314448139 milliseconds
Total Time:         111.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        91.3 seconds, 81.9%
Fitness Testing:     10.7 seconds,  9.6%
Report:               9.3 seconds,  8.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 47
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 48
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 48
;;******************************
;; -*- Smallest problem report - generation 48
Test total error for best: 483
Test mean error for best: 0.48300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 48                  | Program output: 48                 
Correct output: -33                 | Program output: 30                 
Correct output: 32                  | Program output: 65                 
Correct output: 24                  | Program output: 24                 
Correct output: -79                 | Program output: -20                
Correct output: -83                 | Program output: -83                
Correct output: -54                 | Program output: -54                
Correct output: -20                 | Program output: -20                
Correct output: -79                 | Program output: -79                
Correct output: -85                 | Program output: -54                
Correct output: -66                 | Program output: -66                
Correct output: 64                  | Program output: 64                 
Correct output: -21                 | Program output: -21                
Correct output: 13                  | Program output: 13                 
Correct output: 35                  | Program output: 35                 
Correct output: 0                   | Program output: 0                  
Correct output: 3                   | Program output: 3                  
Correct output: 10                  | Program output: 10                 
Correct output: 21                  | Program output: 21                 
Correct output: 43                  | Program output: 43                 
Correct output: 20                  | Program output: 40                 
Correct output: 5                   | Program output: 11                 
Correct output: 6                   | Program output: 6                  
Correct output: 30                  | Program output: 30                 
Correct output: 13                  | Program output: 13                 
Correct output: 21                  | Program output: 21                 
Correct output: 19                  | Program output: 39                 
Correct output: 2                   | Program output: 8                  
Correct output: 2                   | Program output: 29                 
Correct output: 1                   | Program output: 1                  
Correct output: 1                   | Program output: 1                  
Correct output: 36                  | Program output: 36                 
Correct output: 8                   | Program output: 8                  
Correct output: 41                  | Program output: 41                 
Correct output: 18                  | Program output: 48                 
Correct output: -25                 | Program output: -25                
Correct output: -25                 | Program output: 0                  
Correct output: -31                 | Program output: -31                
Correct output: -35                 | Program output: 48                 
Correct output: -49                 | Program output: 5                  
Correct output: -85                 | Program output: -85                
Correct output: -24                 | Program output: -7                 
Correct output: -93                 | Program output: -28                
Correct output: -81                 | Program output: -81                
Correct output: -56                 | Program output: -11                
Correct output: -57                 | Program output: -57                
Correct output: -97                 | Program output: -97                
Correct output: -58                 | Program output: -58                
Correct output: -66                 | Program output: -66                
Correct output: -20                 | Program output: -20                
Correct output: -91                 | Program output: -91                
Correct output: -80                 | Program output: -6                 
Correct output: -83                 | Program output: -83                
Correct output: -42                 | Program output: -42                
Correct output: 33                  | Program output: 60                 
Correct output: -65                 | Program output: -65                
Correct output: -79                 | Program output: -79                
Correct output: -86                 | Program output: -86                
Correct output: 2                   | Program output: 21                 
Correct output: -13                 | Program output: -13                
Correct output: -90                 | Program output: -42                
Correct output: -87                 | Program output: -15                
Correct output: -51                 | Program output: -8                 
Correct output: -64                 | Program output: -40                
Correct output: -90                 | Program output: -90                
Correct output: -34                 | Program output: 34                 
Correct output: -57                 | Program output: 9                  
Correct output: -76                 | Program output: 46                 
Correct output: -86                 | Program output: -59                
Correct output: 1                   | Program output: 1                  
Correct output: -98                 | Program output: -86                
Correct output: -47                 | Program output: -14                
Correct output: -34                 | Program output: -11                
Correct output: -80                 | Program output: -80                
Correct output: -34                 | Program output: -10                
Correct output: -15                 | Program output: -15                
Correct output: -46                 | Program output: -46                
Correct output: 17                  | Program output: 56                 
Correct output: -78                 | Program output: 20                 
Correct output: -92                 | Program output: 29                 
Correct output: -92                 | Program output: -92                
Correct output: -68                 | Program output: 2                  
Correct output: -98                 | Program output: -98                
Correct output: -77                 | Program output: -24                
Correct output: -21                 | Program output: -21                
Correct output: -81                 | Program output: -76                
Correct output: -86                 | Program output: -37                
Correct output: -56                 | Program output: -53                
Correct output: -12                 | Program output: -12                
Correct output: -75                 | Program output: -75                
Correct output: -68                 | Program output: 46                 
Correct output: -97                 | Program output: 16                 
Correct output: -71                 | Program output: -71                
Correct output: -36                 | Program output: -36                
Correct output: -8                  | Program output: -8                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in1} {:close 1, :instruction in4} {:close 1, :instruction exec_pop} {:close 1, :instruction integer_rot} {:close 1, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_pop} {:close 1, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s})
Lexicase best program: (in1 in4 exec_pop () integer_rot in1 integer_dup_times exec_pop () in4 integer_yankdup print_integer print_boolean boolean_yankdup boolean_frominteger integer_sub boolean_or integer_shove exec_pop () boolean_frominteger exec_s () () ())
Lexicase best errors: [1 0 0 1 0 0 0 1 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 26
Percent parens: 0.269
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in1} {:close 1, :instruction in4} {:close 1, :instruction exec_pop} {:close 1, :instruction integer_rot} {:close 1, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_pop} {:close 1, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s})
Zero cases best program: (in1 in4 exec_pop () integer_rot in1 integer_dup_times exec_pop () in4 integer_yankdup print_integer print_boolean boolean_yankdup boolean_frominteger integer_sub boolean_or integer_shove exec_pop () boolean_frominteger exec_s () () ())
Zero cases best errors: [1 0 0 1 0 0 0 1 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 26
Percent parens: 0.269
--- Lexicase Population Statistics ---
Count of elite individuals by case: (360 382 540 330 18 160 799 503 484 540)
Population mean number of elite cases: 4.12
Count of perfect (error zero) individuals by case: (360 382 540 330 18 160 799 503 484 540)
Population mean number of perfect (error zero) cases: 4.12
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in1} {:close 1, :instruction in4} {:close 1, :instruction exec_pop} {:close 1, :instruction integer_rot} {:close 1, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_pop} {:close 1, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s})
Best program: (in1 in4 exec_pop () integer_rot in1 integer_dup_times exec_pop () in4 integer_yankdup print_integer print_boolean boolean_yankdup boolean_frominteger integer_sub boolean_or integer_shove exec_pop () boolean_frominteger exec_s () () ())
Errors: [1 0 0 1 0 0 0 1 1 0]
Total: 4
Mean: 0.4
Genome size: 19
Size: 26
Percent parens: 0.269
--- Population Statistics ---
Average total errors in population: 5.884
Median total errors in population: 5
Error averages by case: (0.64 0.618 0.46 0.67 0.982 0.84 0.201 0.497 0.516 0.46)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 26.377
Average program size in population (points): 32.597
Average percent parens in population: 0.191
Minimum age in population: 69.90270407849289
Maximum age in population: 73.2462391907257
Average age in population: 71.6318483197021
Median age in population: 71.69689189210283
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 186
Genome diversity (% unique genomes):	 0.394
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 210
Syntactic diversity (% unique Push programs):	 0.315
Total error diversity:				 0.007
Error (vector) diversity:			 0.041
Behavioral diversity:				 0.098
--- Run Statistics ---
Number of program evaluations used so far: 49000
Number of point (instruction) evaluations so far: 10448667
--- Timings ---
Current time: 1559314450427 milliseconds
Total Time:         113.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        93.2 seconds, 81.9%
Fitness Testing:     10.9 seconds,  9.6%
Report:               9.6 seconds,  8.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 48
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 49
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 49
;;******************************
;; -*- Smallest problem report - generation 49
Test total error for best: 483
Test mean error for best: 0.48300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 48                  | Program output: 48                 
Correct output: -33                 | Program output: 30                 
Correct output: 32                  | Program output: 65                 
Correct output: 24                  | Program output: 24                 
Correct output: -79                 | Program output: -20                
Correct output: -83                 | Program output: -83                
Correct output: -54                 | Program output: -54                
Correct output: -20                 | Program output: -20                
Correct output: -79                 | Program output: -79                
Correct output: -85                 | Program output: -54                
Correct output: -66                 | Program output: -66                
Correct output: 64                  | Program output: 64                 
Correct output: -21                 | Program output: -21                
Correct output: 13                  | Program output: 13                 
Correct output: 35                  | Program output: 35                 
Correct output: 0                   | Program output: 0                  
Correct output: 3                   | Program output: 3                  
Correct output: 10                  | Program output: 10                 
Correct output: 21                  | Program output: 21                 
Correct output: 43                  | Program output: 43                 
Correct output: 20                  | Program output: 40                 
Correct output: 5                   | Program output: 11                 
Correct output: 6                   | Program output: 6                  
Correct output: 30                  | Program output: 30                 
Correct output: 13                  | Program output: 13                 
Correct output: 21                  | Program output: 21                 
Correct output: 19                  | Program output: 39                 
Correct output: 2                   | Program output: 8                  
Correct output: 2                   | Program output: 29                 
Correct output: 1                   | Program output: 1                  
Correct output: 1                   | Program output: 1                  
Correct output: 36                  | Program output: 36                 
Correct output: 8                   | Program output: 8                  
Correct output: 41                  | Program output: 41                 
Correct output: 18                  | Program output: 48                 
Correct output: -25                 | Program output: -25                
Correct output: -25                 | Program output: 0                  
Correct output: -31                 | Program output: -31                
Correct output: -35                 | Program output: 48                 
Correct output: -49                 | Program output: 5                  
Correct output: -85                 | Program output: -85                
Correct output: -24                 | Program output: -7                 
Correct output: -93                 | Program output: -28                
Correct output: -81                 | Program output: -81                
Correct output: -56                 | Program output: -11                
Correct output: -57                 | Program output: -57                
Correct output: -97                 | Program output: -97                
Correct output: -58                 | Program output: -58                
Correct output: -66                 | Program output: -66                
Correct output: -20                 | Program output: -20                
Correct output: -91                 | Program output: -91                
Correct output: -80                 | Program output: -6                 
Correct output: -83                 | Program output: -83                
Correct output: -42                 | Program output: -42                
Correct output: 33                  | Program output: 60                 
Correct output: -65                 | Program output: -65                
Correct output: -79                 | Program output: -79                
Correct output: -86                 | Program output: -86                
Correct output: 2                   | Program output: 21                 
Correct output: -13                 | Program output: -13                
Correct output: -90                 | Program output: -42                
Correct output: -87                 | Program output: -15                
Correct output: -51                 | Program output: -8                 
Correct output: -64                 | Program output: -40                
Correct output: -90                 | Program output: -90                
Correct output: -34                 | Program output: 34                 
Correct output: -57                 | Program output: 9                  
Correct output: -76                 | Program output: 46                 
Correct output: -86                 | Program output: -59                
Correct output: 1                   | Program output: 1                  
Correct output: -98                 | Program output: -86                
Correct output: -47                 | Program output: -14                
Correct output: -34                 | Program output: -11                
Correct output: -80                 | Program output: -80                
Correct output: -34                 | Program output: -10                
Correct output: -15                 | Program output: -15                
Correct output: -46                 | Program output: -46                
Correct output: 17                  | Program output: 56                 
Correct output: -78                 | Program output: 20                 
Correct output: -92                 | Program output: 29                 
Correct output: -92                 | Program output: -92                
Correct output: -68                 | Program output: 2                  
Correct output: -98                 | Program output: -98                
Correct output: -77                 | Program output: -24                
Correct output: -21                 | Program output: -21                
Correct output: -81                 | Program output: -76                
Correct output: -86                 | Program output: -37                
Correct output: -56                 | Program output: -53                
Correct output: -12                 | Program output: -12                
Correct output: -75                 | Program output: -75                
Correct output: -68                 | Program output: 46                 
Correct output: -97                 | Program output: 16                 
Correct output: -71                 | Program output: -71                
Correct output: -36                 | Program output: -36                
Correct output: -8                  | Program output: -8                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in1} {:close 1, :instruction in4} {:close 1, :instruction exec_pop} {:close 1, :instruction integer_rot} {:close 1, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_pop} {:close 1, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s})
Lexicase best program: (in1 in4 exec_pop () integer_rot in1 integer_dup_times exec_pop () in4 integer_yankdup print_integer print_boolean boolean_yankdup boolean_frominteger integer_sub boolean_or integer_shove exec_pop () boolean_frominteger exec_s () () ())
Lexicase best errors: [0 1 0 0 1 0 1 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 26
Percent parens: 0.269
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in1} {:close 1, :instruction in4} {:close 1, :instruction exec_pop} {:close 1, :instruction integer_rot} {:close 1, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_pop} {:close 1, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s})
Zero cases best program: (in1 in4 exec_pop () integer_rot in1 integer_dup_times exec_pop () in4 integer_yankdup print_integer print_boolean boolean_yankdup boolean_frominteger integer_sub boolean_or integer_shove exec_pop () boolean_frominteger exec_s () () ())
Zero cases best errors: [0 1 0 0 1 0 1 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 26
Percent parens: 0.269
--- Lexicase Population Statistics ---
Count of elite individuals by case: (449 336 481 506 255 506 329 480 446 334)
Population mean number of elite cases: 4.12
Count of perfect (error zero) individuals by case: (449 336 481 506 255 506 329 480 446 334)
Population mean number of perfect (error zero) cases: 4.12
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in1} {:close 1, :instruction in4} {:close 1, :instruction exec_pop} {:close 1, :instruction integer_rot} {:close 1, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_pop} {:close 1, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s})
Best program: (in1 in4 exec_pop () integer_rot in1 integer_dup_times exec_pop () in4 integer_yankdup print_integer print_boolean boolean_yankdup boolean_frominteger integer_sub boolean_or integer_shove exec_pop () boolean_frominteger exec_s () () ())
Errors: [0 1 0 0 1 0 1 0 1 0]
Total: 4
Mean: 0.4
Genome size: 19
Size: 26
Percent parens: 0.269
--- Population Statistics ---
Average total errors in population: 5.878
Median total errors in population: 6
Error averages by case: (0.551 0.664 0.519 0.494 0.745 0.494 0.671 0.52 0.554 0.666)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 24.13
Average program size in population (points): 30.324
Average percent parens in population: 0.207
Minimum age in population: 70.90270407849289
Maximum age in population: 75.06131647395958
Average age in population: 73.57667130070466
Median age in population: 73.73407870575674
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 179
Genome diversity (% unique genomes):	 0.429
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 187
Syntactic diversity (% unique Push programs):	 0.358
Total error diversity:				 0.007
Error (vector) diversity:			 0.049
Behavioral diversity:				 0.124
--- Run Statistics ---
Number of program evaluations used so far: 50000
Number of point (instruction) evaluations so far: 10683391
--- Timings ---
Current time: 1559314452680 milliseconds
Total Time:         116.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        95.0 seconds, 81.9%
Fitness Testing:     11.2 seconds,  9.6%
Report:               9.7 seconds,  8.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 49
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 50
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 50
;;******************************
;; -*- Smallest problem report - generation 50
Test total error for best: 485
Test mean error for best: 0.48500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 48                  | Program output: 48                 
Correct output: -33                 | Program output: 30                 
Correct output: 32                  | Program output: 65                 
Correct output: 24                  | Program output: 24                 
Correct output: -79                 | Program output: -20                
Correct output: -83                 | Program output: -83                
Correct output: -54                 | Program output: -54                
Correct output: -20                 | Program output: -20                
Correct output: -79                 | Program output: -79                
Correct output: -85                 | Program output: -54                
Correct output: -66                 | Program output: -66                
Correct output: 64                  | Program output: 64                 
Correct output: -21                 | Program output: -21                
Correct output: 13                  | Program output: 13                 
Correct output: 35                  | Program output: 35                 
Correct output: 0                   | Program output: 0                  
Correct output: 3                   | Program output: 3                  
Correct output: 10                  | Program output: 10                 
Correct output: 21                  | Program output: 21                 
Correct output: 43                  | Program output: 43                 
Correct output: 20                  | Program output: 40                 
Correct output: 5                   | Program output: 11                 
Correct output: 6                   | Program output: 6                  
Correct output: 30                  | Program output: 30                 
Correct output: 13                  | Program output: 13                 
Correct output: 21                  | Program output: 21                 
Correct output: 19                  | Program output: 39                 
Correct output: 2                   | Program output: 8                  
Correct output: 2                   | Program output: 29                 
Correct output: 1                   | Program output: 1                  
Correct output: 1                   | Program output: 1                  
Correct output: 36                  | Program output: 36                 
Correct output: 8                   | Program output: 8                  
Correct output: 41                  | Program output: 41                 
Correct output: 18                  | Program output: 48                 
Correct output: -25                 | Program output: -25                
Correct output: -25                 | Program output: 0                  
Correct output: -31                 | Program output: -31                
Correct output: -35                 | Program output: 48                 
Correct output: -49                 | Program output: 5                  
Correct output: -85                 | Program output: -85                
Correct output: -24                 | Program output: -7                 
Correct output: -93                 | Program output: -28                
Correct output: -81                 | Program output: -81                
Correct output: -56                 | Program output: -11                
Correct output: -57                 | Program output: -57                
Correct output: -97                 | Program output: -97                
Correct output: -58                 | Program output: -58                
Correct output: -66                 | Program output: -66                
Correct output: -20                 | Program output: -20                
Correct output: -91                 | Program output: -91                
Correct output: -80                 | Program output: -6                 
Correct output: -83                 | Program output: -83                
Correct output: -42                 | Program output: -42                
Correct output: 33                  | Program output: 60                 
Correct output: -65                 | Program output: -65                
Correct output: -79                 | Program output: -79                
Correct output: -86                 | Program output: -86                
Correct output: 2                   | Program output: 21                 
Correct output: -13                 | Program output: -13                
Correct output: -90                 | Program output: -42                
Correct output: -87                 | Program output: -15                
Correct output: -51                 | Program output: -8                 
Correct output: -64                 | Program output: -40                
Correct output: -90                 | Program output: -90                
Correct output: -34                 | Program output: 34                 
Correct output: -57                 | Program output: 9                  
Correct output: -76                 | Program output: 46                 
Correct output: -86                 | Program output: -59                
Correct output: 1                   | Program output: 1                  
Correct output: -98                 | Program output: -86                
Correct output: -47                 | Program output: -14                
Correct output: -34                 | Program output: -11                
Correct output: -80                 | Program output: -80                
Correct output: -34                 | Program output: -10                
Correct output: -15                 | Program output: -15                
Correct output: -46                 | Program output: -46                
Correct output: 17                  | Program output: 56                 
Correct output: -78                 | Program output: 20                 
Correct output: -92                 | Program output: 29                 
Correct output: -92                 | Program output: -92                
Correct output: -68                 | Program output: 2                  
Correct output: -98                 | Program output: -98                
Correct output: -77                 | Program output: -24                
Correct output: -21                 | Program output: -21                
Correct output: -81                 | Program output: -76                
Correct output: -86                 | Program output: -37                
Correct output: -56                 | Program output: -53                
Correct output: -12                 | Program output: -12                
Correct output: -75                 | Program output: -75                
Correct output: -68                 | Program output: 46                 
Correct output: -97                 | Program output: 16                 
Correct output: -71                 | Program output: -71                
Correct output: -36                 | Program output: -36                
Correct output: -8                  | Program output: -8                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in1} {:close 1, :instruction in4} {:close 1, :instruction exec_pop} {:close 1, :instruction integer_rot} {:close 1, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_pop} {:close 1, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s})
Lexicase best program: (in1 in4 exec_pop () integer_rot in1 integer_dup_times exec_pop () in4 integer_yankdup print_integer print_boolean boolean_yankdup boolean_frominteger integer_sub boolean_or integer_shove exec_pop () boolean_frominteger exec_s () () ())
Lexicase best errors: [0 0 0 0 0 0 0 1 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 26
Percent parens: 0.269
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in1} {:close 1, :instruction in4} {:close 1, :instruction exec_pop} {:close 1, :instruction integer_rot} {:close 1, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_pop} {:close 1, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s})
Zero cases best program: (in1 in4 exec_pop () integer_rot in1 integer_dup_times exec_pop () in4 integer_yankdup print_integer print_boolean boolean_yankdup boolean_frominteger integer_sub boolean_or integer_shove exec_pop () boolean_frominteger exec_s () () ())
Zero cases best errors: [0 0 0 0 0 0 0 1 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 26
Percent parens: 0.269
--- Lexicase Population Statistics ---
Count of elite individuals by case: (518 894 339 646 573 414 574 495 187 837)
Population mean number of elite cases: 5.48
Count of perfect (error zero) individuals by case: (518 894 339 646 573 414 574 495 187 837)
Population mean number of perfect (error zero) cases: 5.48
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in1} {:close 1, :instruction in4} {:close 1, :instruction exec_pop} {:close 1, :instruction integer_rot} {:close 1, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_pop} {:close 1, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 3, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s})
Best program: (in1 in4 exec_pop () integer_rot in1 integer_dup_times exec_pop (in4) integer_yankdup print_integer print_boolean boolean_yankdup boolean_frominteger integer_sub boolean_or integer_shove exec_pop () boolean_frominteger exec_s () () ())
Errors: [0 0 0 0 0 0 0 1 1 0]
Total: 2
Mean: 0.2
Genome size: 19
Size: 26
Percent parens: 0.269
--- Population Statistics ---
Average total errors in population: 4.523
Median total errors in population: 4
Error averages by case: (0.482 0.106 0.661 0.354 0.427 0.586 0.426 0.505 0.813 0.163)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 25.2
Average program size in population (points): 30.839
Average percent parens in population: 0.185
Minimum age in population: 72.9173914065664
Maximum age in population: 76.70519492768604
Average age in population: 74.71332426764724
Median age in population: 74.77478929113803
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 82
Genome diversity (% unique genomes):	 0.411
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 94
Syntactic diversity (% unique Push programs):	 0.347
Total error diversity:				 0.009
Error (vector) diversity:			 0.058
Behavioral diversity:				 0.14
--- Run Statistics ---
Number of program evaluations used so far: 51000
Number of point (instruction) evaluations so far: 10924494
--- Timings ---
Current time: 1559314454948 milliseconds
Total Time:         118.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        96.8 seconds, 81.8%
Fitness Testing:     11.4 seconds,  9.7%
Report:               9.9 seconds,  8.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 50
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 51
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 51
;;******************************
;; -*- Smallest problem report - generation 51
Test total error for best: 405
Test mean error for best: 0.40500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 48                  | Program output: 48                 
Correct output: -33                 | Program output: -33                
Correct output: 32                  | Program output: 65                 
Correct output: 24                  | Program output: 24                 
Correct output: -79                 | Program output: -20                
Correct output: -83                 | Program output: -83                
Correct output: -54                 | Program output: -54                
Correct output: -20                 | Program output: -1                 
Correct output: -79                 | Program output: -79                
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -66                
Correct output: 64                  | Program output: 64                 
Correct output: -21                 | Program output: -21                
Correct output: 13                  | Program output: 13                 
Correct output: 35                  | Program output: 35                 
Correct output: 0                   | Program output: 0                  
Correct output: 3                   | Program output: 27                 
Correct output: 10                  | Program output: 10                 
Correct output: 21                  | Program output: 21                 
Correct output: 43                  | Program output: 43                 
Correct output: 20                  | Program output: 66                 
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 50                 
Correct output: 30                  | Program output: 30                 
Correct output: 13                  | Program output: 41                 
Correct output: 21                  | Program output: 21                 
Correct output: 19                  | Program output: 19                 
Correct output: 2                   | Program output: 8                  
Correct output: 2                   | Program output: 20                 
Correct output: 1                   | Program output: 39                 
Correct output: 1                   | Program output: 84                 
Correct output: 36                  | Program output: 36                 
Correct output: 8                   | Program output: 8                  
Correct output: 41                  | Program output: 41                 
Correct output: 18                  | Program output: 35                 
Correct output: -25                 | Program output: -25                
Correct output: -25                 | Program output: -25                
Correct output: -31                 | Program output: 44                 
Correct output: -35                 | Program output: -35                
Correct output: -49                 | Program output: -49                
Correct output: -85                 | Program output: -24                
Correct output: -24                 | Program output: -24                
Correct output: -93                 | Program output: -93                
Correct output: -81                 | Program output: -81                
Correct output: -56                 | Program output: -11                
Correct output: -57                 | Program output: -57                
Correct output: -97                 | Program output: -83                
Correct output: -58                 | Program output: -58                
Correct output: -66                 | Program output: -15                
Correct output: -20                 | Program output: -13                
Correct output: -91                 | Program output: -16                
Correct output: -80                 | Program output: -6                 
Correct output: -83                 | Program output: -60                
Correct output: -42                 | Program output: 4                  
Correct output: 33                  | Program output: 38                 
Correct output: -65                 | Program output: -56                
Correct output: -79                 | Program output: -72                
Correct output: -86                 | Program output: -86                
Correct output: 2                   | Program output: 21                 
Correct output: -13                 | Program output: 32                 
Correct output: -90                 | Program output: -73                
Correct output: -87                 | Program output: -78                
Correct output: -51                 | Program output: -8                 
Correct output: -64                 | Program output: -40                
Correct output: -90                 | Program output: -90                
Correct output: -34                 | Program output: -34                
Correct output: -57                 | Program output: -57                
Correct output: -76                 | Program output: -76                
Correct output: -86                 | Program output: -86                
Correct output: 1                   | Program output: 1                  
Correct output: -98                 | Program output: -98                
Correct output: -47                 | Program output: -14                
Correct output: -34                 | Program output: -34                
Correct output: -80                 | Program output: -27                
Correct output: -34                 | Program output: -34                
Correct output: -15                 | Program output: -15                
Correct output: -46                 | Program output: -46                
Correct output: 17                  | Program output: 56                 
Correct output: -78                 | Program output: 0                  
Correct output: -92                 | Program output: -92                
Correct output: -92                 | Program output: -29                
Correct output: -68                 | Program output: -68                
Correct output: -98                 | Program output: -76                
Correct output: -77                 | Program output: -77                
Correct output: -21                 | Program output: 53                 
Correct output: -81                 | Program output: -76                
Correct output: -86                 | Program output: -37                
Correct output: -56                 | Program output: -56                
Correct output: -12                 | Program output: -12                
Correct output: -75                 | Program output: -75                
Correct output: -68                 | Program output: -68                
Correct output: -97                 | Program output: -97                
Correct output: -71                 | Program output: -17                
Correct output: -36                 | Program output: -36                
Correct output: -8                  | Program output: 53                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in1} {:close 1, :instruction in4} {:close 1, :instruction exec_pop} {:close 1, :instruction integer_rot} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction in2} {:close 1, :instruction in3} {:close 1, :instruction in1} {:close 1, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction in4} {:close 1, :instruction exec_shove} {:close 1, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 2, :instruction exec_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s})
Lexicase best program: (in1 in4 exec_pop () integer_rot boolean_dup_times in2 in3 in1 in2 integer_shove in4 exec_shove () in1 integer_dup_times integer_yankdup print_integer print_boolean boolean_yankdup boolean_frominteger exec_flush exec_pop () boolean_frominteger exec_s () () ())
Lexicase best errors: [0 1 1 0 0 1 0 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 30
Percent parens: 0.233
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in1} {:close 1, :instruction in4} {:close 1, :instruction exec_pop} {:close 1, :instruction integer_rot} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction in2} {:close 1, :instruction in3} {:close 1, :instruction in1} {:close 1, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction in4} {:close 1, :instruction exec_shove} {:close 1, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 2, :instruction exec_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s})
Zero cases best program: (in1 in4 exec_pop () integer_rot boolean_dup_times in2 in3 in1 in2 integer_shove in4 exec_shove () in1 integer_dup_times integer_yankdup print_integer print_boolean boolean_yankdup boolean_frominteger exec_flush exec_pop () boolean_frominteger exec_s () () ())
Zero cases best errors: [0 1 1 0 0 1 0 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 30
Percent parens: 0.233
--- Lexicase Population Statistics ---
Count of elite individuals by case: (129 18 34 124 639 691 941 140 145 405)
Population mean number of elite cases: 3.27
Count of perfect (error zero) individuals by case: (129 18 34 124 639 691 941 140 145 405)
Population mean number of perfect (error zero) cases: 3.27
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in1} {:close 1, :instruction in4} {:close 1, :instruction exec_pop} {:close 1, :instruction in2} {:close 1, :instruction in3} {:close 1, :instruction in1} {:close 1, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction in4} {:close 1, :instruction exec_shove} {:close 1, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 2, :instruction exec_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s})
Best program: (in1 in4 exec_pop () in2 in3 in1 in2 integer_shove in4 exec_shove () in1 integer_dup_times integer_yankdup print_integer print_boolean boolean_yankdup boolean_frominteger exec_flush exec_pop () boolean_frominteger exec_s () () ())
Errors: [0 1 1 0 0 1 0 0 0 1]
Total: 4
Mean: 0.4
Genome size: 21
Size: 28
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 6.734
Median total errors in population: 7
Error averages by case: (0.871 0.982 0.966 0.876 0.361 0.309 0.059 0.86 0.855 0.595)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 24.577
Average program size in population (points): 31.03
Average percent parens in population: 0.211
Minimum age in population: 73.9485740828926
Maximum age in population: 78.28088750924957
Average age in population: 76.63448717397867
Median age in population: 76.82518626964578
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 160
Genome diversity (% unique genomes):	 0.407
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 175
Syntactic diversity (% unique Push programs):	 0.335
Total error diversity:				 0.007
Error (vector) diversity:			 0.043
Behavioral diversity:				 0.128
--- Run Statistics ---
Number of program evaluations used so far: 52000
Number of point (instruction) evaluations so far: 11162680
--- Timings ---
Current time: 1559314457206 milliseconds
Total Time:         120.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        98.6 seconds, 81.8%
Fitness Testing:     11.7 seconds,  9.7%
Report:              10.1 seconds,  8.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 51
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 52
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 52
;;******************************
;; -*- Smallest problem report - generation 52
Test total error for best: 471
Test mean error for best: 0.47100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 48                  | Program output: 98                 
Correct output: -33                 | Program output: 30                 
Correct output: 32                  | Program output: 65                 
Correct output: 24                  | Program output: 89                 
Correct output: -79                 | Program output: -79                
Correct output: -83                 | Program output: -83                
Correct output: -54                 | Program output: -54                
Correct output: -20                 | Program output: -1                 
Correct output: -79                 | Program output: -79                
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -66                
Correct output: 64                  | Program output: 64                 
Correct output: -21                 | Program output: -21                
Correct output: 13                  | Program output: 13                 
Correct output: 35                  | Program output: 35                 
Correct output: 0                   | Program output: 0                  
Correct output: 3                   | Program output: 29                 
Correct output: 10                  | Program output: 10                 
Correct output: 21                  | Program output: 21                 
Correct output: 43                  | Program output: 43                 
Correct output: 20                  | Program output: 66                 
Correct output: 5                   | Program output: 95                 
Correct output: 6                   | Program output: 50                 
Correct output: 30                  | Program output: 30                 
Correct output: 13                  | Program output: 85                 
Correct output: 21                  | Program output: 21                 
Correct output: 19                  | Program output: 99                 
Correct output: 2                   | Program output: 8                  
Correct output: 2                   | Program output: 29                 
Correct output: 1                   | Program output: 1                  
Correct output: 1                   | Program output: 1                  
Correct output: 36                  | Program output: 45                 
Correct output: 8                   | Program output: 8                  
Correct output: 41                  | Program output: 41                 
Correct output: 18                  | Program output: 48                 
Correct output: -25                 | Program output: 1                  
Correct output: -25                 | Program output: 0                  
Correct output: -31                 | Program output: -31                
Correct output: -35                 | Program output: -35                
Correct output: -49                 | Program output: -49                
Correct output: -85                 | Program output: -85                
Correct output: -24                 | Program output: -24                
Correct output: -93                 | Program output: -28                
Correct output: -81                 | Program output: -81                
Correct output: -56                 | Program output: -11                
Correct output: -57                 | Program output: -57                
Correct output: -97                 | Program output: -97                
Correct output: -58                 | Program output: -43                
Correct output: -66                 | Program output: -66                
Correct output: -20                 | Program output: -20                
Correct output: -91                 | Program output: -91                
Correct output: -80                 | Program output: -58                
Correct output: -83                 | Program output: -83                
Correct output: -42                 | Program output: -42                
Correct output: 33                  | Program output: 60                 
Correct output: -65                 | Program output: -65                
Correct output: -79                 | Program output: -79                
Correct output: -86                 | Program output: -30                
Correct output: 2                   | Program output: 21                 
Correct output: -13                 | Program output: -13                
Correct output: -90                 | Program output: 1                  
Correct output: -87                 | Program output: -15                
Correct output: -51                 | Program output: -8                 
Correct output: -64                 | Program output: -55                
Correct output: -90                 | Program output: -75                
Correct output: -34                 | Program output: -34                
Correct output: -57                 | Program output: 99                 
Correct output: -76                 | Program output: -76                
Correct output: -86                 | Program output: -59                
Correct output: 1                   | Program output: 1                  
Correct output: -98                 | Program output: -86                
Correct output: -47                 | Program output: -39                
Correct output: -34                 | Program output: -11                
Correct output: -80                 | Program output: -80                
Correct output: -34                 | Program output: -10                
Correct output: -15                 | Program output: -15                
Correct output: -46                 | Program output: -22                
Correct output: 17                  | Program output: 56                 
Correct output: -78                 | Program output: 0                  
Correct output: -92                 | Program output: -92                
Correct output: -92                 | Program output: -29                
Correct output: -68                 | Program output: -68                
Correct output: -98                 | Program output: -98                
Correct output: -77                 | Program output: -24                
Correct output: -21                 | Program output: -21                
Correct output: -81                 | Program output: -81                
Correct output: -86                 | Program output: -86                
Correct output: -56                 | Program output: -53                
Correct output: -12                 | Program output: 81                 
Correct output: -75                 | Program output: -65                
Correct output: -68                 | Program output: -68                
Correct output: -97                 | Program output: 16                 
Correct output: -71                 | Program output: -40                
Correct output: -36                 | Program output: -13                
Correct output: -8                  | Program output: -8                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in2} {:close 1, :instruction in3} {:close 1, :instruction in1} {:close 1, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction in4} {:close 1, :instruction in4} {:close 1, :instruction exec_pop} {:close 1, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_rot} {:close 1, :instruction -6} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s})
Lexicase best program: (in2 in3 in1 in2 integer_shove in4 in4 exec_pop () in4 integer_yankdup print_integer print_boolean boolean_yankdup boolean_frominteger integer_sub boolean_or integer_rot -6 boolean_frominteger exec_s () () ())
Lexicase best errors: [0 0 0 0 1 0 1 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 25
Percent parens: 0.200
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in2} {:close 1, :instruction in3} {:close 1, :instruction in1} {:close 1, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction in4} {:close 1, :instruction in4} {:close 1, :instruction exec_pop} {:close 1, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_rot} {:close 1, :instruction -6} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s})
Zero cases best program: (in2 in3 in1 in2 integer_shove in4 in4 exec_pop () in4 integer_yankdup print_integer print_boolean boolean_yankdup boolean_frominteger integer_sub boolean_or integer_rot -6 boolean_frominteger exec_s () () ())
Zero cases best errors: [0 0 0 0 1 0 1 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 25
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (435 325 358 202 529 541 483 450 334 469)
Population mean number of elite cases: 4.13
Count of perfect (error zero) individuals by case: (435 325 358 202 529 541 483 450 334 469)
Population mean number of perfect (error zero) cases: 4.13
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in2} {:close 1, :instruction in3} {:close 1, :instruction in1} {:close 1, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction in4} {:close 1, :instruction in4} {:close 1, :instruction exec_pop} {:close 1, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_rot} {:close 1, :instruction -6} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s})
Best program: (in2 in3 in1 in2 integer_shove in4 in4 exec_pop () in4 integer_yankdup print_integer print_boolean boolean_yankdup boolean_frominteger integer_sub boolean_or integer_rot -6 boolean_frominteger exec_s () () ())
Errors: [0 0 0 0 1 0 1 0 0 0]
Total: 2
Mean: 0.2
Genome size: 20
Size: 25
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 5.874
Median total errors in population: 6
Error averages by case: (0.565 0.675 0.642 0.798 0.471 0.459 0.517 0.55 0.666 0.531)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 23.758
Average program size in population (points): 30.679
Average percent parens in population: 0.227
Minimum age in population: 75.37992108444952
Maximum age in population: 79.3543679938198
Average age in population: 78.14944718231177
Median age in population: 78.18112298392107
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 95
Genome diversity (% unique genomes):	 0.415
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 99
Syntactic diversity (% unique Push programs):	 0.347
Total error diversity:				 0.009
Error (vector) diversity:			 0.075
Behavioral diversity:				 0.137
--- Run Statistics ---
Number of program evaluations used so far: 53000
Number of point (instruction) evaluations so far: 11385068
--- Timings ---
Current time: 1559314459468 milliseconds
Total Time:         122.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       100.4 seconds, 81.8%
Fitness Testing:     11.9 seconds,  9.7%
Report:              10.3 seconds,  8.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 52
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 53
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 53
;;******************************
;; -*- Smallest problem report - generation 53
Test total error for best: 448
Test mean error for best: 0.44800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 48                  | Program output: 48                 
Correct output: -33                 | Program output: 30                 
Correct output: 32                  | Program output: 65                 
Correct output: 24                  | Program output: 24                 
Correct output: -79                 | Program output: -20                
Correct output: -83                 | Program output: -83                
Correct output: -54                 | Program output: -54                
Correct output: -20                 | Program output: -1                 
Correct output: -79                 | Program output: -79                
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -66                
Correct output: 64                  | Program output: 64                 
Correct output: -21                 | Program output: -21                
Correct output: 13                  | Program output: 13                 
Correct output: 35                  | Program output: 35                 
Correct output: 0                   | Program output: 0                  
Correct output: 3                   | Program output: 3                  
Correct output: 10                  | Program output: 79                 
Correct output: 21                  | Program output: 21                 
Correct output: 43                  | Program output: 43                 
Correct output: 20                  | Program output: 40                 
Correct output: 5                   | Program output: 11                 
Correct output: 6                   | Program output: 6                  
Correct output: 30                  | Program output: 36                 
Correct output: 13                  | Program output: 13                 
Correct output: 21                  | Program output: 21                 
Correct output: 19                  | Program output: 39                 
Correct output: 2                   | Program output: 100                
Correct output: 2                   | Program output: 75                 
Correct output: 1                   | Program output: 1                  
Correct output: 1                   | Program output: 1                  
Correct output: 36                  | Program output: 36                 
Correct output: 8                   | Program output: 8                  
Correct output: 41                  | Program output: 62                 
Correct output: 18                  | Program output: 83                 
Correct output: -25                 | Program output: -25                
Correct output: -25                 | Program output: 0                  
Correct output: -31                 | Program output: -31                
Correct output: -35                 | Program output: -35                
Correct output: -49                 | Program output: -49                
Correct output: -85                 | Program output: -24                
Correct output: -24                 | Program output: -24                
Correct output: -93                 | Program output: -93                
Correct output: -81                 | Program output: -81                
Correct output: -56                 | Program output: -11                
Correct output: -57                 | Program output: -57                
Correct output: -97                 | Program output: -83                
Correct output: -58                 | Program output: -58                
Correct output: -66                 | Program output: -66                
Correct output: -20                 | Program output: -20                
Correct output: -91                 | Program output: -91                
Correct output: -80                 | Program output: -80                
Correct output: -83                 | Program output: -83                
Correct output: -42                 | Program output: -42                
Correct output: 33                  | Program output: 93                 
Correct output: -65                 | Program output: -65                
Correct output: -79                 | Program output: -79                
Correct output: -86                 | Program output: -24                
Correct output: 2                   | Program output: 41                 
Correct output: -13                 | Program output: -13                
Correct output: -90                 | Program output: 1                  
Correct output: -87                 | Program output: -78                
Correct output: -51                 | Program output: -8                 
Correct output: -64                 | Program output: -40                
Correct output: -90                 | Program output: -53                
Correct output: -34                 | Program output: -34                
Correct output: -57                 | Program output: 9                  
Correct output: -76                 | Program output: -76                
Correct output: -86                 | Program output: -86                
Correct output: 1                   | Program output: 1                  
Correct output: -98                 | Program output: -98                
Correct output: -47                 | Program output: -47                
Correct output: -34                 | Program output: -34                
Correct output: -80                 | Program output: -80                
Correct output: -34                 | Program output: -34                
Correct output: -15                 | Program output: -15                
Correct output: -46                 | Program output: -46                
Correct output: 17                  | Program output: 63                 
Correct output: -78                 | Program output: 0                  
Correct output: -92                 | Program output: -92                
Correct output: -92                 | Program output: -29                
Correct output: -68                 | Program output: -68                
Correct output: -98                 | Program output: -76                
Correct output: -77                 | Program output: -24                
Correct output: -21                 | Program output: -21                
Correct output: -81                 | Program output: -81                
Correct output: -86                 | Program output: -35                
Correct output: -56                 | Program output: -53                
Correct output: -12                 | Program output: -12                
Correct output: -75                 | Program output: -75                
Correct output: -68                 | Program output: -68                
Correct output: -97                 | Program output: 16                 
Correct output: -71                 | Program output: -17                
Correct output: -36                 | Program output: -36                
Correct output: -8                  | Program output: -8                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_dup_items} {:close 1, :instruction in4} {:close 1, :instruction exec_pop} {:close 1, :instruction integer_rot} {:close 1, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 1, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 1, :instruction in2} {:close 1, :instruction in3} {:close 1, :instruction boolean_xor} {:close 1, :instruction in4} {:close 1, :instruction exec_pop} {:close 1, :instruction integer_rot} {:close 1, :instruction in4} {:close 1, :instruction exec_pop} {:close 1, :instruction in1} {:close 1, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction in4} {:close 1, :instruction exec_shove} {:close 1, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s})
Lexicase best program: (exec_dup_items in4 exec_pop () integer_rot in1 integer_dup_times in2 in2 in3 in2 in3 boolean_xor in4 exec_pop () integer_rot in4 exec_pop () in1 in2 integer_shove in4 exec_shove () in1 integer_dup_times integer_yankdup print_integer print_boolean boolean_yankdup boolean_frominteger integer_sub boolean_or exec_flush exec_pop () boolean_frominteger exec_s () () ())
Lexicase best errors: [0 0 0 1 1 0 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 44
Percent parens: 0.205
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_dup_items} {:close 1, :instruction in4} {:close 1, :instruction exec_pop} {:close 1, :instruction integer_rot} {:close 1, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 1, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 1, :instruction in2} {:close 1, :instruction in3} {:close 1, :instruction boolean_xor} {:close 1, :instruction in4} {:close 1, :instruction exec_pop} {:close 1, :instruction integer_rot} {:close 1, :instruction in4} {:close 1, :instruction exec_pop} {:close 1, :instruction in1} {:close 1, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction in4} {:close 1, :instruction exec_shove} {:close 1, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s})
Zero cases best program: (exec_dup_items in4 exec_pop () integer_rot in1 integer_dup_times in2 in2 in3 in2 in3 boolean_xor in4 exec_pop () integer_rot in4 exec_pop () in1 in2 integer_shove in4 exec_shove () in1 integer_dup_times integer_yankdup print_integer print_boolean boolean_yankdup boolean_frominteger integer_sub boolean_or exec_flush exec_pop () boolean_frominteger exec_s () () ())
Zero cases best errors: [0 0 0 1 1 0 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 44
Percent parens: 0.205
--- Lexicase Population Statistics ---
Count of elite individuals by case: (561 429 246 127 22 759 613 621 420 442)
Population mean number of elite cases: 4.24
Count of perfect (error zero) individuals by case: (561 429 246 127 22 759 613 621 420 442)
Population mean number of perfect (error zero) cases: 4.24
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_dup_items} {:close 1, :instruction in4} {:close 1, :instruction exec_pop} {:close 1, :instruction integer_rot} {:close 1, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 1, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 1, :instruction in2} {:close 1, :instruction in3} {:close 1, :instruction boolean_xor} {:close 1, :instruction in4} {:close 1, :instruction exec_pop} {:close 1, :instruction integer_rot} {:close 1, :instruction in4} {:close 1, :instruction exec_pop} {:close 1, :instruction in1} {:close 1, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction in4} {:close 1, :instruction exec_shove} {:close 1, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s})
Best program: (exec_dup_items in4 exec_pop () integer_rot in1 integer_dup_times in2 in2 in3 in2 in3 boolean_xor in4 exec_pop () integer_rot in4 exec_pop () in1 in2 integer_shove in4 exec_shove () in1 integer_dup_times integer_yankdup print_integer print_boolean boolean_yankdup boolean_frominteger integer_sub boolean_or exec_flush exec_pop () boolean_frominteger exec_s () () ())
Errors: [0 0 0 1 1 0 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 35
Size: 44
Percent parens: 0.205
--- Population Statistics ---
Average total errors in population: 5.76
Median total errors in population: 5
Error averages by case: (0.439 0.571 0.754 0.873 0.978 0.241 0.387 0.379 0.58 0.558)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 25.86
Average program size in population (points): 33.394
Average percent parens in population: 0.223
Minimum age in population: 77.82355252013076
Maximum age in population: 81.14145332785218
Average age in population: 79.74374466585816
Median age in population: 79.76889915975379
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 175
Genome diversity (% unique genomes):	 0.417
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 210
Syntactic diversity (% unique Push programs):	 0.347
Total error diversity:				 0.009
Error (vector) diversity:			 0.075
Behavioral diversity:				 0.165
--- Run Statistics ---
Number of program evaluations used so far: 54000
Number of point (instruction) evaluations so far: 11627070
--- Timings ---
Current time: 1559314461833 milliseconds
Total Time:         125.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       102.3 seconds, 81.8%
Fitness Testing:     12.2 seconds,  9.7%
Report:              10.5 seconds,  8.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 53
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 54
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 54
;;******************************
;; -*- Smallest problem report - generation 54
Test total error for best: 332
Test mean error for best: 0.33200
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 1
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 1
Test Case    8 | Error: 1
Test Case    9 | Error: 0
Test Case   10 | Error: 1
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 1
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 1
Test Case   26 | Error: 1
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 1
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 1
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 1
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 1
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 1
Test Case   69 | Error: 1
Test Case   70 | Error: 0
Test Case   71 | Error: 1
Test Case   72 | Error: 0
Test Case   73 | Error: 1
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 1
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 1
Test Case   81 | Error: 1
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 1
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 1
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 1
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 1
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 1
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 1
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 1
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 1
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 1
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 1
Test Case  246 | Error: 1
Test Case  247 | Error: 0
Test Case  248 | Error: 1
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 1
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 1
Test Case  259 | Error: 1
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 1
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 1
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 1
Test Case  275 | Error: 0
Test Case  276 | Error: 1
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 1
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 1
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 1
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 1
Test Case  296 | Error: 1
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 1
Test Case  304 | Error: 0
Test Case  305 | Error: 1
Test Case  306 | Error: 1
Test Case  307 | Error: 0
Test Case  308 | Error: 1
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 1
Test Case  318 | Error: 1
Test Case  319 | Error: 1
Test Case  320 | Error: 0
Test Case  321 | Error: 1
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 1
Test Case  326 | Error: 1
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 1
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 1
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 1
Test Case  340 | Error: 0
Test Case  341 | Error: 1
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 1
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 1
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 1
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 1
Test Case  379 | Error: 0
Test Case  380 | Error: 1
Test Case  381 | Error: 1
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 1
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 1
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 1
Test Case  397 | Error: 1
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 1
Test Case  404 | Error: 1
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 1
Test Case  408 | Error: 0
Test Case  409 | Error: 1
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 1
Test Case  414 | Error: 1
Test Case  415 | Error: 0
Test Case  416 | Error: 1
Test Case  417 | Error: 1
Test Case  418 | Error: 1
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 1
Test Case  423 | Error: 1
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 1
Test Case  427 | Error: 0
Test Case  428 | Error: 1
Test Case  429 | Error: 0
Test Case  430 | Error: 1
Test Case  431 | Error: 1
Test Case  432 | Error: 0
Test Case  433 | Error: 1
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 1
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 1
Test Case  447 | Error: 1
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 1
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 1
Test Case  460 | Error: 1
Test Case  461 | Error: 1
Test Case  462 | Error: 1
Test Case  463 | Error: 1
Test Case  464 | Error: 1
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 1
Test Case  468 | Error: 1
Test Case  469 | Error: 1
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 1
Test Case  477 | Error: 0
Test Case  478 | Error: 1
Test Case  479 | Error: 1
Test Case  480 | Error: 1
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 1
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 1
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 1
Test Case  494 | Error: 1
Test Case  495 | Error: 1
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 1
Test Case  499 | Error: 0
Test Case  500 | Error: 1
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 1
Test Case  504 | Error: 1
Test Case  505 | Error: 0
Test Case  506 | Error: 1
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 1
Test Case  514 | Error: 1
Test Case  515 | Error: 1
Test Case  516 | Error: 1
Test Case  517 | Error: 1
Test Case  518 | Error: 1
Test Case  519 | Error: 0
Test Case  520 | Error: 1
Test Case  521 | Error: 1
Test Case  522 | Error: 0
Test Case  523 | Error: 1
Test Case  524 | Error: 1
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 1
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 1
Test Case  533 | Error: 0
Test Case  534 | Error: 1
Test Case  535 | Error: 0
Test Case  536 | Error: 1
Test Case  537 | Error: 1
Test Case  538 | Error: 0
Test Case  539 | Error: 1
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 1
Test Case  543 | Error: 0
Test Case  544 | Error: 1
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 1
Test Case  548 | Error: 1
Test Case  549 | Error: 1
Test Case  550 | Error: 1
Test Case  551 | Error: 0
Test Case  552 | Error: 1
Test Case  553 | Error: 0
Test Case  554 | Error: 1
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 1
Test Case  558 | Error: 0
Test Case  559 | Error: 1
Test Case  560 | Error: 1
Test Case  561 | Error: 0
Test Case  562 | Error: 1
Test Case  563 | Error: 1
Test Case  564 | Error: 1
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 1
Test Case  569 | Error: 1
Test Case  570 | Error: 0
Test Case  571 | Error: 1
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 1
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 1
Test Case  585 | Error: 0
Test Case  586 | Error: 1
Test Case  587 | Error: 1
Test Case  588 | Error: 0
Test Case  589 | Error: 1
Test Case  590 | Error: 0
Test Case  591 | Error: 1
Test Case  592 | Error: 1
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 1
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 1
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 1
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 1
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 1
Test Case  617 | Error: 1
Test Case  618 | Error: 1
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 1
Test Case  624 | Error: 1
Test Case  625 | Error: 0
Test Case  626 | Error: 1
Test Case  627 | Error: 0
Test Case  628 | Error: 1
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 1
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 1
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 1
Test Case  644 | Error: 0
Test Case  645 | Error: 1
Test Case  646 | Error: 1
Test Case  647 | Error: 1
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 1
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 1
Test Case  662 | Error: 0
Test Case  663 | Error: 1
Test Case  664 | Error: 0
Test Case  665 | Error: 1
Test Case  666 | Error: 1
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 1
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 1
Test Case  674 | Error: 1
Test Case  675 | Error: 1
Test Case  676 | Error: 1
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 1
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 1
Test Case  683 | Error: 1
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 1
Test Case  687 | Error: 1
Test Case  688 | Error: 1
Test Case  689 | Error: 1
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 1
Test Case  695 | Error: 0
Test Case  696 | Error: 1
Test Case  697 | Error: 1
Test Case  698 | Error: 1
Test Case  699 | Error: 1
Test Case  700 | Error: 1
Test Case  701 | Error: 1
Test Case  702 | Error: 0
Test Case  703 | Error: 1
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 1
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 1
Test Case  716 | Error: 1
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 1
Test Case  721 | Error: 1
Test Case  722 | Error: 1
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 1
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 1
Test Case  729 | Error: 1
Test Case  730 | Error: 1
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 1
Test Case  738 | Error: 0
Test Case  739 | Error: 1
Test Case  740 | Error: 0
Test Case  741 | Error: 1
Test Case  742 | Error: 1
Test Case  743 | Error: 1
Test Case  744 | Error: 1
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 1
Test Case  750 | Error: 1
Test Case  751 | Error: 1
Test Case  752 | Error: 1
Test Case  753 | Error: 1
Test Case  754 | Error: 1
Test Case  755 | Error: 0
Test Case  756 | Error: 1
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 1
Test Case  761 | Error: 0
Test Case  762 | Error: 1
Test Case  763 | Error: 0
Test Case  764 | Error: 1
Test Case  765 | Error: 1
Test Case  766 | Error: 1
Test Case  767 | Error: 1
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 1
Test Case  773 | Error: 0
Test Case  774 | Error: 1
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 1
Test Case  778 | Error: 0
Test Case  779 | Error: 1
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 1
Test Case  783 | Error: 1
Test Case  784 | Error: 1
Test Case  785 | Error: 0
Test Case  786 | Error: 1
Test Case  787 | Error: 1
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 1
Test Case  792 | Error: 1
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 1
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 1
Test Case  799 | Error: 1
Test Case  800 | Error: 0
Test Case  801 | Error: 1
Test Case  802 | Error: 0
Test Case  803 | Error: 1
Test Case  804 | Error: 1
Test Case  805 | Error: 1
Test Case  806 | Error: 1
Test Case  807 | Error: 0
Test Case  808 | Error: 1
Test Case  809 | Error: 0
Test Case  810 | Error: 1
Test Case  811 | Error: 1
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 1
Test Case  816 | Error: 1
Test Case  817 | Error: 0
Test Case  818 | Error: 1
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 1
Test Case  822 | Error: 0
Test Case  823 | Error: 1
Test Case  824 | Error: 0
Test Case  825 | Error: 1
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 1
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 1
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 1
Test Case  835 | Error: 1
Test Case  836 | Error: 1
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 1
Test Case  841 | Error: 1
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 1
Test Case  845 | Error: 1
Test Case  846 | Error: 0
Test Case  847 | Error: 1
Test Case  848 | Error: 0
Test Case  849 | Error: 1
Test Case  850 | Error: 1
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 1
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 1
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 1
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 1
Test Case  866 | Error: 0
Test Case  867 | Error: 1
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 1
Test Case  874 | Error: 1
Test Case  875 | Error: 0
Test Case  876 | Error: 1
Test Case  877 | Error: 0
Test Case  878 | Error: 1
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 1
Test Case  885 | Error: 0
Test Case  886 | Error: 1
Test Case  887 | Error: 0
Test Case  888 | Error: 1
Test Case  889 | Error: 1
Test Case  890 | Error: 0
Test Case  891 | Error: 1
Test Case  892 | Error: 1
Test Case  893 | Error: 0
Test Case  894 | Error: 1
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 1
Test Case  901 | Error: 0
Test Case  902 | Error: 1
Test Case  903 | Error: 1
Test Case  904 | Error: 1
Test Case  905 | Error: 1
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 1
Test Case  909 | Error: 1
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 1
Test Case  915 | Error: 1
Test Case  916 | Error: 0
Test Case  917 | Error: 1
Test Case  918 | Error: 0
Test Case  919 | Error: 1
Test Case  920 | Error: 1
Test Case  921 | Error: 1
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 1
Test Case  926 | Error: 1
Test Case  927 | Error: 1
Test Case  928 | Error: 1
Test Case  929 | Error: 1
Test Case  930 | Error: 0
Test Case  931 | Error: 1
Test Case  932 | Error: 0
Test Case  933 | Error: 1
Test Case  934 | Error: 1
Test Case  935 | Error: 1
Test Case  936 | Error: 1
Test Case  937 | Error: 0
Test Case  938 | Error: 1
Test Case  939 | Error: 1
Test Case  940 | Error: 1
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 1
Test Case  945 | Error: 0
Test Case  946 | Error: 1
Test Case  947 | Error: 1
Test Case  948 | Error: 1
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 1
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 1
Test Case  959 | Error: 1
Test Case  960 | Error: 1
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 1
Test Case  964 | Error: 1
Test Case  965 | Error: 1
Test Case  966 | Error: 0
Test Case  967 | Error: 1
Test Case  968 | Error: 0
Test Case  969 | Error: 1
Test Case  970 | Error: 1
Test Case  971 | Error: 1
Test Case  972 | Error: 1
Test Case  973 | Error: 1
Test Case  974 | Error: 0
Test Case  975 | Error: 1
Test Case  976 | Error: 1
Test Case  977 | Error: 1
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 1
Test Case  981 | Error: 0
Test Case  982 | Error: 1
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 1
Test Case  986 | Error: 1
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 1
Test Case  990 | Error: 0
Test Case  991 | Error: 1
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 1
Test Case  995 | Error: 1
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 1
Test Case  999 | Error: 1
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 48                  | Program output: 48                 
Correct output: -33                 | Program output: -33                
Correct output: 32                  | Program output: 65                 
Correct output: 24                  | Program output: 24                 
Correct output: -79                 | Program output: -20                
Correct output: -83                 | Program output: -83                
Correct output: -54                 | Program output: -54                
Correct output: -20                 | Program output: -1                 
Correct output: -79                 | Program output: -79                
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -66                
Correct output: 64                  | Program output: 64                 
Correct output: -21                 | Program output: -21                
Correct output: 13                  | Program output: 13                 
Correct output: 35                  | Program output: 35                 
Correct output: 0                   | Program output: 0                  
Correct output: 3                   | Program output: 3                  
Correct output: 10                  | Program output: 10                 
Correct output: 21                  | Program output: 21                 
Correct output: 43                  | Program output: 43                 
Correct output: 20                  | Program output: 40                 
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 6                  
Correct output: 30                  | Program output: 30                 
Correct output: 13                  | Program output: 13                 
Correct output: 21                  | Program output: 21                 
Correct output: 19                  | Program output: 19                 
Correct output: 2                   | Program output: 8                  
Correct output: 2                   | Program output: 20                 
Correct output: 1                   | Program output: 1                  
Correct output: 1                   | Program output: 1                  
Correct output: 36                  | Program output: 36                 
Correct output: 8                   | Program output: 8                  
Correct output: 41                  | Program output: 41                 
Correct output: 18                  | Program output: 35                 
Correct output: -25                 | Program output: -25                
Correct output: -25                 | Program output: -25                
Correct output: -31                 | Program output: -31                
Correct output: -35                 | Program output: -35                
Correct output: -49                 | Program output: 5                  
Correct output: -85                 | Program output: -85                
Correct output: -24                 | Program output: -24                
Correct output: -93                 | Program output: -28                
Correct output: -81                 | Program output: -81                
Correct output: -56                 | Program output: -11                
Correct output: -57                 | Program output: -57                
Correct output: -97                 | Program output: -97                
Correct output: -58                 | Program output: -58                
Correct output: -66                 | Program output: -66                
Correct output: -20                 | Program output: -20                
Correct output: -91                 | Program output: -91                
Correct output: -80                 | Program output: -6                 
Correct output: -83                 | Program output: -83                
Correct output: -42                 | Program output: -42                
Correct output: 33                  | Program output: 38                 
Correct output: -65                 | Program output: -65                
Correct output: -79                 | Program output: -79                
Correct output: -86                 | Program output: -86                
Correct output: 2                   | Program output: 21                 
Correct output: -13                 | Program output: -13                
Correct output: -90                 | Program output: -73                
Correct output: -87                 | Program output: -15                
Correct output: -51                 | Program output: -8                 
Correct output: -64                 | Program output: -40                
Correct output: -90                 | Program output: -90                
Correct output: -34                 | Program output: 34                 
Correct output: -57                 | Program output: -57                
Correct output: -76                 | Program output: -76                
Correct output: -86                 | Program output: -59                
Correct output: 1                   | Program output: 1                  
Correct output: -98                 | Program output: -86                
Correct output: -47                 | Program output: -14                
Correct output: -34                 | Program output: -11                
Correct output: -80                 | Program output: -80                
Correct output: -34                 | Program output: -10                
Correct output: -15                 | Program output: -15                
Correct output: -46                 | Program output: -46                
Correct output: 17                  | Program output: 56                 
Correct output: -78                 | Program output: 0                  
Correct output: -92                 | Program output: -92                
Correct output: -92                 | Program output: -29                
Correct output: -68                 | Program output: -68                
Correct output: -98                 | Program output: -98                
Correct output: -77                 | Program output: -77                
Correct output: -21                 | Program output: -21                
Correct output: -81                 | Program output: -76                
Correct output: -86                 | Program output: -37                
Correct output: -56                 | Program output: -56                
Correct output: -12                 | Program output: -12                
Correct output: -75                 | Program output: -75                
Correct output: -68                 | Program output: -68                
Correct output: -97                 | Program output: -97                
Correct output: -71                 | Program output: -17                
Correct output: -36                 | Program output: -36                
Correct output: -8                  | Program output: -8                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in1} {:close 1, :instruction in4} {:close 1, :instruction exec_pop} {:close 1, :instruction in2} {:close 1, :instruction in3} {:close 1, :instruction in1} {:close 1, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 1, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 2, :instruction exec_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_eq})
Lexicase best program: (in1 in4 exec_pop () in2 in3 in1 in2 integer_shove in4 integer_min in1 integer_dup_times integer_yankdup print_integer print_boolean boolean_yankdup boolean_frominteger exec_flush exec_pop () boolean_frominteger exec_eq)
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 24
Percent parens: 0.125
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in1} {:close 1, :instruction in4} {:close 1, :instruction exec_pop} {:close 1, :instruction in2} {:close 1, :instruction in3} {:close 1, :instruction in1} {:close 1, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 1, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 2, :instruction exec_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_eq})
Zero cases best program: (in1 in4 exec_pop () in2 in3 in1 in2 integer_shove in4 integer_min in1 integer_dup_times integer_yankdup print_integer print_boolean boolean_yankdup boolean_frominteger exec_flush exec_pop () boolean_frominteger exec_eq)
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 24
Percent parens: 0.125
--- Lexicase Population Statistics ---
Count of elite individuals by case: (730 709 752 687 694 679 188 184 149 433)
Population mean number of elite cases: 5.20
Count of perfect (error zero) individuals by case: (730 709 752 687 694 679 188 184 149 433)
Population mean number of perfect (error zero) cases: 5.20
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in1} {:close 1, :instruction in4} {:close 1, :instruction exec_pop} {:close 1, :instruction in2} {:close 1, :instruction in3} {:close 1, :instruction in1} {:close 1, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 1, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 2, :instruction print_boolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 2, :instruction exec_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_eq})
Best program: (in1 in4 exec_pop () in2 in3 in1 in2 integer_shove in4 integer_min in1 integer_dup_times integer_yankdup print_integer print_boolean boolean_yankdup boolean_frominteger exec_flush exec_pop () boolean_frominteger exec_eq)
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 21
Size: 24
Percent parens: 0.125
--- Population Statistics ---
Average total errors in population: 4.795
Median total errors in population: 4
Error averages by case: (0.27 0.291 0.248 0.313 0.306 0.321 0.812 0.816 0.851 0.567)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 29.895
Average program size in population (points): 37.785
Average percent parens in population: 0.205
Minimum age in population: 78.9011519534339
Maximum age in population: 82.86503757906573
Average age in population: 81.860943821702
Median age in population: 81.85709918089945
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 212
Genome diversity (% unique genomes):	 0.439
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 228
Syntactic diversity (% unique Push programs):	 0.366
Total error diversity:				 0.009
Error (vector) diversity:			 0.043
Behavioral diversity:				 0.122
--- Run Statistics ---
Number of program evaluations used so far: 55000
Number of point (instruction) evaluations so far: 11899081
--- Timings ---
Current time: 1559314464140 milliseconds
Total Time:         127.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       104.1 seconds, 81.6%
Fitness Testing:     12.5 seconds,  9.8%
Report:              10.8 seconds,  8.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 54
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 54
Successful program: (in1 in4 exec_pop () in2 in3 in1 in2 integer_shove in4 integer_min in1 integer_dup_times integer_yankdup print_integer print_boolean boolean_yankdup boolean_frominteger exec_flush exec_pop () boolean_frominteger exec_eq)
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 24


Auto-simplifying with starting size: 24
step: 0
program: (in1 in4 exec_pop () in2 in3 in1 in2 integer_shove in4 integer_min in1 integer_dup_times integer_yankdup print_integer print_boolean boolean_yankdup boolean_frominteger exec_flush exec_pop () boolean_frominteger exec_eq)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 24

step: 500
program: (in1 in4 exec_pop () in2 in3 in1 in2 integer_shove in4 integer_min in1 integer_dup_times integer_yankdup print_integer print_boolean boolean_yankdup boolean_frominteger exec_flush exec_pop () boolean_frominteger exec_eq)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 24

step: 1000
program: (in1 in4 exec_pop () in2 in3 in1 in2 integer_shove in4 integer_min in1 integer_dup_times integer_yankdup print_integer print_boolean boolean_yankdup boolean_frominteger exec_flush exec_pop () boolean_frominteger exec_eq)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 24

step: 1500
program: (in1 in4 exec_pop () in2 in3 in1 in2 integer_shove in4 integer_min in1 integer_dup_times integer_yankdup print_integer print_boolean boolean_yankdup boolean_frominteger exec_flush exec_pop () boolean_frominteger exec_eq)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 24

step: 2000
program: (in1 in4 exec_pop () in2 in3 in1 in2 integer_shove in4 integer_min in1 integer_dup_times integer_yankdup print_integer print_boolean boolean_yankdup boolean_frominteger exec_flush exec_pop () boolean_frominteger exec_eq)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 24

step: 2500
program: (in1 in4 exec_pop () in2 in3 in1 in2 integer_shove in4 integer_min in1 integer_dup_times integer_yankdup print_integer print_boolean boolean_yankdup boolean_frominteger exec_flush exec_pop () boolean_frominteger exec_eq)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 24

step: 3000
program: (in1 in4 exec_pop () in2 in3 in1 in2 integer_shove in4 integer_min in1 integer_dup_times integer_yankdup print_integer print_boolean boolean_yankdup boolean_frominteger exec_flush exec_pop () boolean_frominteger exec_eq)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 24

step: 3500
program: (in1 in4 exec_pop () in2 in3 in1 in2 integer_shove in4 integer_min in1 integer_dup_times integer_yankdup print_integer print_boolean boolean_yankdup boolean_frominteger exec_flush exec_pop () boolean_frominteger exec_eq)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 24

step: 4000
program: (in1 in4 exec_pop () in2 in3 in1 in2 integer_shove in4 integer_min in1 integer_dup_times integer_yankdup print_integer print_boolean boolean_yankdup boolean_frominteger exec_flush exec_pop () boolean_frominteger exec_eq)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 24

step: 4500
program: (in1 in4 exec_pop () in2 in3 in1 in2 integer_shove in4 integer_min in1 integer_dup_times integer_yankdup print_integer print_boolean boolean_yankdup boolean_frominteger exec_flush exec_pop () boolean_frominteger exec_eq)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 24

step: 5000
program: (in1 in4 exec_pop () in2 in3 in1 in2 integer_shove in4 integer_min in1 integer_dup_times integer_yankdup print_integer print_boolean boolean_yankdup boolean_frominteger exec_flush exec_pop () boolean_frominteger exec_eq)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 24

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 54
Test total error for best: 332
Test mean error for best: 0.33200
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 1
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 1
Test Case    8 | Error: 1
Test Case    9 | Error: 0
Test Case   10 | Error: 1
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 1
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 1
Test Case   26 | Error: 1
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 1
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 1
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 1
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 1
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 1
Test Case   69 | Error: 1
Test Case   70 | Error: 0
Test Case   71 | Error: 1
Test Case   72 | Error: 0
Test Case   73 | Error: 1
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 1
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 1
Test Case   81 | Error: 1
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 1
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 1
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 1
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 1
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 1
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 1
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 1
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 1
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 1
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 1
Test Case  246 | Error: 1
Test Case  247 | Error: 0
Test Case  248 | Error: 1
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 1
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 1
Test Case  259 | Error: 1
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 1
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 1
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 1
Test Case  275 | Error: 0
Test Case  276 | Error: 1
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 1
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 1
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 1
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 1
Test Case  296 | Error: 1
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 1
Test Case  304 | Error: 0
Test Case  305 | Error: 1
Test Case  306 | Error: 1
Test Case  307 | Error: 0
Test Case  308 | Error: 1
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 1
Test Case  318 | Error: 1
Test Case  319 | Error: 1
Test Case  320 | Error: 0
Test Case  321 | Error: 1
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 1
Test Case  326 | Error: 1
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 1
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 1
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 1
Test Case  340 | Error: 0
Test Case  341 | Error: 1
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 1
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 1
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 1
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 1
Test Case  379 | Error: 0
Test Case  380 | Error: 1
Test Case  381 | Error: 1
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 1
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 1
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 1
Test Case  397 | Error: 1
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 1
Test Case  404 | Error: 1
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 1
Test Case  408 | Error: 0
Test Case  409 | Error: 1
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 1
Test Case  414 | Error: 1
Test Case  415 | Error: 0
Test Case  416 | Error: 1
Test Case  417 | Error: 1
Test Case  418 | Error: 1
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 1
Test Case  423 | Error: 1
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 1
Test Case  427 | Error: 0
Test Case  428 | Error: 1
Test Case  429 | Error: 0
Test Case  430 | Error: 1
Test Case  431 | Error: 1
Test Case  432 | Error: 0
Test Case  433 | Error: 1
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 1
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 1
Test Case  447 | Error: 1
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 1
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 1
Test Case  460 | Error: 1
Test Case  461 | Error: 1
Test Case  462 | Error: 1
Test Case  463 | Error: 1
Test Case  464 | Error: 1
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 1
Test Case  468 | Error: 1
Test Case  469 | Error: 1
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 1
Test Case  477 | Error: 0
Test Case  478 | Error: 1
Test Case  479 | Error: 1
Test Case  480 | Error: 1
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 1
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 1
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 1
Test Case  494 | Error: 1
Test Case  495 | Error: 1
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 1
Test Case  499 | Error: 0
Test Case  500 | Error: 1
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 1
Test Case  504 | Error: 1
Test Case  505 | Error: 0
Test Case  506 | Error: 1
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 1
Test Case  514 | Error: 1
Test Case  515 | Error: 1
Test Case  516 | Error: 1
Test Case  517 | Error: 1
Test Case  518 | Error: 1
Test Case  519 | Error: 0
Test Case  520 | Error: 1
Test Case  521 | Error: 1
Test Case  522 | Error: 0
Test Case  523 | Error: 1
Test Case  524 | Error: 1
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 1
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 1
Test Case  533 | Error: 0
Test Case  534 | Error: 1
Test Case  535 | Error: 0
Test Case  536 | Error: 1
Test Case  537 | Error: 1
Test Case  538 | Error: 0
Test Case  539 | Error: 1
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 1
Test Case  543 | Error: 0
Test Case  544 | Error: 1
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 1
Test Case  548 | Error: 1
Test Case  549 | Error: 1
Test Case  550 | Error: 1
Test Case  551 | Error: 0
Test Case  552 | Error: 1
Test Case  553 | Error: 0
Test Case  554 | Error: 1
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 1
Test Case  558 | Error: 0
Test Case  559 | Error: 1
Test Case  560 | Error: 1
Test Case  561 | Error: 0
Test Case  562 | Error: 1
Test Case  563 | Error: 1
Test Case  564 | Error: 1
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 1
Test Case  569 | Error: 1
Test Case  570 | Error: 0
Test Case  571 | Error: 1
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 1
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 1
Test Case  585 | Error: 0
Test Case  586 | Error: 1
Test Case  587 | Error: 1
Test Case  588 | Error: 0
Test Case  589 | Error: 1
Test Case  590 | Error: 0
Test Case  591 | Error: 1
Test Case  592 | Error: 1
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 1
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 1
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 1
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 1
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 1
Test Case  617 | Error: 1
Test Case  618 | Error: 1
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 1
Test Case  624 | Error: 1
Test Case  625 | Error: 0
Test Case  626 | Error: 1
Test Case  627 | Error: 0
Test Case  628 | Error: 1
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 1
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 1
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 1
Test Case  644 | Error: 0
Test Case  645 | Error: 1
Test Case  646 | Error: 1
Test Case  647 | Error: 1
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 1
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 1
Test Case  662 | Error: 0
Test Case  663 | Error: 1
Test Case  664 | Error: 0
Test Case  665 | Error: 1
Test Case  666 | Error: 1
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 1
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 1
Test Case  674 | Error: 1
Test Case  675 | Error: 1
Test Case  676 | Error: 1
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 1
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 1
Test Case  683 | Error: 1
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 1
Test Case  687 | Error: 1
Test Case  688 | Error: 1
Test Case  689 | Error: 1
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 1
Test Case  695 | Error: 0
Test Case  696 | Error: 1
Test Case  697 | Error: 1
Test Case  698 | Error: 1
Test Case  699 | Error: 1
Test Case  700 | Error: 1
Test Case  701 | Error: 1
Test Case  702 | Error: 0
Test Case  703 | Error: 1
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 1
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 1
Test Case  716 | Error: 1
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 1
Test Case  721 | Error: 1
Test Case  722 | Error: 1
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 1
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 1
Test Case  729 | Error: 1
Test Case  730 | Error: 1
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 1
Test Case  738 | Error: 0
Test Case  739 | Error: 1
Test Case  740 | Error: 0
Test Case  741 | Error: 1
Test Case  742 | Error: 1
Test Case  743 | Error: 1
Test Case  744 | Error: 1
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 1
Test Case  750 | Error: 1
Test Case  751 | Error: 1
Test Case  752 | Error: 1
Test Case  753 | Error: 1
Test Case  754 | Error: 1
Test Case  755 | Error: 0
Test Case  756 | Error: 1
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 1
Test Case  761 | Error: 0
Test Case  762 | Error: 1
Test Case  763 | Error: 0
Test Case  764 | Error: 1
Test Case  765 | Error: 1
Test Case  766 | Error: 1
Test Case  767 | Error: 1
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 1
Test Case  773 | Error: 0
Test Case  774 | Error: 1
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 1
Test Case  778 | Error: 0
Test Case  779 | Error: 1
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 1
Test Case  783 | Error: 1
Test Case  784 | Error: 1
Test Case  785 | Error: 0
Test Case  786 | Error: 1
Test Case  787 | Error: 1
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 1
Test Case  792 | Error: 1
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 1
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 1
Test Case  799 | Error: 1
Test Case  800 | Error: 0
Test Case  801 | Error: 1
Test Case  802 | Error: 0
Test Case  803 | Error: 1
Test Case  804 | Error: 1
Test Case  805 | Error: 1
Test Case  806 | Error: 1
Test Case  807 | Error: 0
Test Case  808 | Error: 1
Test Case  809 | Error: 0
Test Case  810 | Error: 1
Test Case  811 | Error: 1
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 1
Test Case  816 | Error: 1
Test Case  817 | Error: 0
Test Case  818 | Error: 1
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 1
Test Case  822 | Error: 0
Test Case  823 | Error: 1
Test Case  824 | Error: 0
Test Case  825 | Error: 1
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 1
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 1
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 1
Test Case  835 | Error: 1
Test Case  836 | Error: 1
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 1
Test Case  841 | Error: 1
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 1
Test Case  845 | Error: 1
Test Case  846 | Error: 0
Test Case  847 | Error: 1
Test Case  848 | Error: 0
Test Case  849 | Error: 1
Test Case  850 | Error: 1
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 1
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 1
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 1
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 1
Test Case  866 | Error: 0
Test Case  867 | Error: 1
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 1
Test Case  874 | Error: 1
Test Case  875 | Error: 0
Test Case  876 | Error: 1
Test Case  877 | Error: 0
Test Case  878 | Error: 1
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 1
Test Case  885 | Error: 0
Test Case  886 | Error: 1
Test Case  887 | Error: 0
Test Case  888 | Error: 1
Test Case  889 | Error: 1
Test Case  890 | Error: 0
Test Case  891 | Error: 1
Test Case  892 | Error: 1
Test Case  893 | Error: 0
Test Case  894 | Error: 1
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 1
Test Case  901 | Error: 0
Test Case  902 | Error: 1
Test Case  903 | Error: 1
Test Case  904 | Error: 1
Test Case  905 | Error: 1
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 1
Test Case  909 | Error: 1
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 1
Test Case  915 | Error: 1
Test Case  916 | Error: 0
Test Case  917 | Error: 1
Test Case  918 | Error: 0
Test Case  919 | Error: 1
Test Case  920 | Error: 1
Test Case  921 | Error: 1
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 1
Test Case  926 | Error: 1
Test Case  927 | Error: 1
Test Case  928 | Error: 1
Test Case  929 | Error: 1
Test Case  930 | Error: 0
Test Case  931 | Error: 1
Test Case  932 | Error: 0
Test Case  933 | Error: 1
Test Case  934 | Error: 1
Test Case  935 | Error: 1
Test Case  936 | Error: 1
Test Case  937 | Error: 0
Test Case  938 | Error: 1
Test Case  939 | Error: 1
Test Case  940 | Error: 1
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 1
Test Case  945 | Error: 0
Test Case  946 | Error: 1
Test Case  947 | Error: 1
Test Case  948 | Error: 1
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 1
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 1
Test Case  959 | Error: 1
Test Case  960 | Error: 1
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 1
Test Case  964 | Error: 1
Test Case  965 | Error: 1
Test Case  966 | Error: 0
Test Case  967 | Error: 1
Test Case  968 | Error: 0
Test Case  969 | Error: 1
Test Case  970 | Error: 1
Test Case  971 | Error: 1
Test Case  972 | Error: 1
Test Case  973 | Error: 1
Test Case  974 | Error: 0
Test Case  975 | Error: 1
Test Case  976 | Error: 1
Test Case  977 | Error: 1
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 1
Test Case  981 | Error: 0
Test Case  982 | Error: 1
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 1
Test Case  986 | Error: 1
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 1
Test Case  990 | Error: 0
Test Case  991 | Error: 1
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 1
Test Case  995 | Error: 1
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 1
Test Case  999 | Error: 1
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 48                  | Program output: 48                 
Correct output: -33                 | Program output: -33                
Correct output: 32                  | Program output: 65                 
Correct output: 24                  | Program output: 24                 
Correct output: -79                 | Program output: -20                
Correct output: -83                 | Program output: -83                
Correct output: -54                 | Program output: -54                
Correct output: -20                 | Program output: -1                 
Correct output: -79                 | Program output: -79                
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -66                
Correct output: 64                  | Program output: 64                 
Correct output: -21                 | Program output: -21                
Correct output: 13                  | Program output: 13                 
Correct output: 35                  | Program output: 35                 
Correct output: 0                   | Program output: 0                  
Correct output: 3                   | Program output: 3                  
Correct output: 10                  | Program output: 10                 
Correct output: 21                  | Program output: 21                 
Correct output: 43                  | Program output: 43                 
Correct output: 20                  | Program output: 40                 
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 6                  
Correct output: 30                  | Program output: 30                 
Correct output: 13                  | Program output: 13                 
Correct output: 21                  | Program output: 21                 
Correct output: 19                  | Program output: 19                 
Correct output: 2                   | Program output: 8                  
Correct output: 2                   | Program output: 20                 
Correct output: 1                   | Program output: 1                  
Correct output: 1                   | Program output: 1                  
Correct output: 36                  | Program output: 36                 
Correct output: 8                   | Program output: 8                  
Correct output: 41                  | Program output: 41                 
Correct output: 18                  | Program output: 35                 
Correct output: -25                 | Program output: -25                
Correct output: -25                 | Program output: -25                
Correct output: -31                 | Program output: -31                
Correct output: -35                 | Program output: -35                
Correct output: -49                 | Program output: 5                  
Correct output: -85                 | Program output: -85                
Correct output: -24                 | Program output: -24                
Correct output: -93                 | Program output: -28                
Correct output: -81                 | Program output: -81                
Correct output: -56                 | Program output: -11                
Correct output: -57                 | Program output: -57                
Correct output: -97                 | Program output: -97                
Correct output: -58                 | Program output: -58                
Correct output: -66                 | Program output: -66                
Correct output: -20                 | Program output: -20                
Correct output: -91                 | Program output: -91                
Correct output: -80                 | Program output: -6                 
Correct output: -83                 | Program output: -83                
Correct output: -42                 | Program output: -42                
Correct output: 33                  | Program output: 38                 
Correct output: -65                 | Program output: -65                
Correct output: -79                 | Program output: -79                
Correct output: -86                 | Program output: -86                
Correct output: 2                   | Program output: 21                 
Correct output: -13                 | Program output: -13                
Correct output: -90                 | Program output: -73                
Correct output: -87                 | Program output: -15                
Correct output: -51                 | Program output: -8                 
Correct output: -64                 | Program output: -40                
Correct output: -90                 | Program output: -90                
Correct output: -34                 | Program output: 34                 
Correct output: -57                 | Program output: -57                
Correct output: -76                 | Program output: -76                
Correct output: -86                 | Program output: -59                
Correct output: 1                   | Program output: 1                  
Correct output: -98                 | Program output: -86                
Correct output: -47                 | Program output: -14                
Correct output: -34                 | Program output: -11                
Correct output: -80                 | Program output: -80                
Correct output: -34                 | Program output: -10                
Correct output: -15                 | Program output: -15                
Correct output: -46                 | Program output: -46                
Correct output: 17                  | Program output: 56                 
Correct output: -78                 | Program output: 0                  
Correct output: -92                 | Program output: -92                
Correct output: -92                 | Program output: -29                
Correct output: -68                 | Program output: -68                
Correct output: -98                 | Program output: -98                
Correct output: -77                 | Program output: -77                
Correct output: -21                 | Program output: -21                
Correct output: -81                 | Program output: -76                
Correct output: -86                 | Program output: -37                
Correct output: -56                 | Program output: -56                
Correct output: -12                 | Program output: -12                
Correct output: -75                 | Program output: -75                
Correct output: -68                 | Program output: -68                
Correct output: -97                 | Program output: -97                
Correct output: -71                 | Program output: -17                
Correct output: -36                 | Program output: -36                
Correct output: -8                  | Program output: -8                 
;;******************************
