Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x30b9728f clojush.problems.software.smallest$fn__7460@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@24b8a393]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[85 -40 85 85] -40] [[79 67 79 79] 67] [[61 61 -85 61] -85] [[69 69 69 83] 69] [[30 30 37 30] 30] [[28 22 28 28] 22] [[100 100 -51 100] -51] [[53 53 25 53] 25] [[-76 -76 -76 -44] -76] [[57 53 57 57] 53] [(-60 -60 -60 -60) -60] [(86 86 86 86) 86] [(86 86 86 86) 86] [(35 35 35 35) 35] [(11 11 11 11) 11] [(57 13 24 98) 13] [(75 79 45 85) 45] [(25 87 98 61) 25] [(100 72 64 23) 23] [(77 17 64 6) 6] [(90 54 5 29) 5] [(70 42 1 74) 1] [(34 93 99 44) 34] [(77 80 34 88) 34] [(31 61 32 77) 31] [(42 50 34 42) 34] [(38 12 75 29) 12] [(94 23 61 3) 3] [(5 1 63 51) 1] [(61 21 24 90) 21] [(96 12 5 6) 5] [(52 43 95 3) 3] [(31 71 1 83) 1] [(94 64 83 63) 63] [(45 27 25 51) 25] [(-10 -97 53 89) -97] [(-12 15 -91 3) -91] [(-97 87 -39 64) -97] [(-66 -85 -9 -37) -85] [(-81 -7 -72 56) -81] [(43 87 65 95) 43] [(-22 58 -74 22) -74] [(15 9 -75 44) -75] [(45 89 -44 34) -44] [(-8 65 3 -53) -53] [(91 43 -64 57) -64] [(-87 -86 94 -70) -87] [(-4 -5 10 93) -5] [(-57 -51 90 77) -57] [(-68 -25 40 -49) -68] [(-49 -2 95 51) -49] [(57 -61 86 7) -61] [(40 -55 -27 -86) -86] [(-30 49 28 62) -30] [(-9 -70 88 -33) -70] [(-69 -83 67 -12) -83] [(56 53 -44 -70) -70] [(-49 -59 29 35) -59] [(-34 -74 -92 93) -92] [(-66 2 -14 -67) -67] [(43 54 23 100) 23] [(-86 -32 -72 -77) -86] [(-14 -97 -98 -10) -98] [(19 -61 24 -2) -61] [(-53 19 -86 -41) -86] [(-74 -61 -87 -28) -87] [(51 77 -92 -73) -92] [(-29 33 4 -3) -29] [(-74 0 13 -27) -74] [(-82 87 61 -70) -82] [(90 20 -83 100) -83] [(-5 61 80 84) -5] [(8 -57 -12 36) -57] [(-3 -100 52 -56) -100] [(3 83 11 -33) -33] [(-69 -41 -21 -46) -69] [(90 -78 12 64) -78] [(73 -20 81 -3) -20] [(-69 14 100 -60) -69] [(-99 37 40 -17) -99] [(9 -48 -96 14) -96] [(-24 2 -24 -17) -24] [(61 -85 69 -54) -85] [(-59 -65 -87 2) -87] [(-54 95 -56 13) -56] [(12 -7 -100 14) -100] [(14 50 -19 -25) -25] [(-33 17 56 43) -33] [(-86 9 -63 71) -86] [(-93 33 22 -94) -94] [(-85 33 85 65) -85] [(-17 79 -46 45) -46] [(82 -20 -98 62) -98] [(-80 50 41 -63) -80] [(-58 36 30 9) -58])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[85 -40 85 85] -40]
Train Case:   6 | Input/Output: [[79 67 79 79] 67]
Train Case:   7 | Input/Output: [[61 61 -85 61] -85]
Train Case:   8 | Input/Output: [[69 69 69 83] 69]
Train Case:   9 | Input/Output: [[30 30 37 30] 30]
Train Case:  10 | Input/Output: [[28 22 28 28] 22]
Train Case:  11 | Input/Output: [[100 100 -51 100] -51]
Train Case:  12 | Input/Output: [[53 53 25 53] 25]
Train Case:  13 | Input/Output: [[-76 -76 -76 -44] -76]
Train Case:  14 | Input/Output: [[57 53 57 57] 53]
Train Case:  15 | Input/Output: [(-60 -60 -60 -60) -60]
Train Case:  16 | Input/Output: [(86 86 86 86) 86]
Train Case:  17 | Input/Output: [(86 86 86 86) 86]
Train Case:  18 | Input/Output: [(35 35 35 35) 35]
Train Case:  19 | Input/Output: [(11 11 11 11) 11]
Train Case:  20 | Input/Output: [(57 13 24 98) 13]
Train Case:  21 | Input/Output: [(75 79 45 85) 45]
Train Case:  22 | Input/Output: [(25 87 98 61) 25]
Train Case:  23 | Input/Output: [(100 72 64 23) 23]
Train Case:  24 | Input/Output: [(77 17 64 6) 6]
Train Case:  25 | Input/Output: [(90 54 5 29) 5]
Train Case:  26 | Input/Output: [(70 42 1 74) 1]
Train Case:  27 | Input/Output: [(34 93 99 44) 34]
Train Case:  28 | Input/Output: [(77 80 34 88) 34]
Train Case:  29 | Input/Output: [(31 61 32 77) 31]
Train Case:  30 | Input/Output: [(42 50 34 42) 34]
Train Case:  31 | Input/Output: [(38 12 75 29) 12]
Train Case:  32 | Input/Output: [(94 23 61 3) 3]
Train Case:  33 | Input/Output: [(5 1 63 51) 1]
Train Case:  34 | Input/Output: [(61 21 24 90) 21]
Train Case:  35 | Input/Output: [(96 12 5 6) 5]
Train Case:  36 | Input/Output: [(52 43 95 3) 3]
Train Case:  37 | Input/Output: [(31 71 1 83) 1]
Train Case:  38 | Input/Output: [(94 64 83 63) 63]
Train Case:  39 | Input/Output: [(45 27 25 51) 25]
Train Case:  40 | Input/Output: [(-10 -97 53 89) -97]
Train Case:  41 | Input/Output: [(-12 15 -91 3) -91]
Train Case:  42 | Input/Output: [(-97 87 -39 64) -97]
Train Case:  43 | Input/Output: [(-66 -85 -9 -37) -85]
Train Case:  44 | Input/Output: [(-81 -7 -72 56) -81]
Train Case:  45 | Input/Output: [(43 87 65 95) 43]
Train Case:  46 | Input/Output: [(-22 58 -74 22) -74]
Train Case:  47 | Input/Output: [(15 9 -75 44) -75]
Train Case:  48 | Input/Output: [(45 89 -44 34) -44]
Train Case:  49 | Input/Output: [(-8 65 3 -53) -53]
Train Case:  50 | Input/Output: [(91 43 -64 57) -64]
Train Case:  51 | Input/Output: [(-87 -86 94 -70) -87]
Train Case:  52 | Input/Output: [(-4 -5 10 93) -5]
Train Case:  53 | Input/Output: [(-57 -51 90 77) -57]
Train Case:  54 | Input/Output: [(-68 -25 40 -49) -68]
Train Case:  55 | Input/Output: [(-49 -2 95 51) -49]
Train Case:  56 | Input/Output: [(57 -61 86 7) -61]
Train Case:  57 | Input/Output: [(40 -55 -27 -86) -86]
Train Case:  58 | Input/Output: [(-30 49 28 62) -30]
Train Case:  59 | Input/Output: [(-9 -70 88 -33) -70]
Train Case:  60 | Input/Output: [(-69 -83 67 -12) -83]
Train Case:  61 | Input/Output: [(56 53 -44 -70) -70]
Train Case:  62 | Input/Output: [(-49 -59 29 35) -59]
Train Case:  63 | Input/Output: [(-34 -74 -92 93) -92]
Train Case:  64 | Input/Output: [(-66 2 -14 -67) -67]
Train Case:  65 | Input/Output: [(43 54 23 100) 23]
Train Case:  66 | Input/Output: [(-86 -32 -72 -77) -86]
Train Case:  67 | Input/Output: [(-14 -97 -98 -10) -98]
Train Case:  68 | Input/Output: [(19 -61 24 -2) -61]
Train Case:  69 | Input/Output: [(-53 19 -86 -41) -86]
Train Case:  70 | Input/Output: [(-74 -61 -87 -28) -87]
Train Case:  71 | Input/Output: [(51 77 -92 -73) -92]
Train Case:  72 | Input/Output: [(-29 33 4 -3) -29]
Train Case:  73 | Input/Output: [(-74 0 13 -27) -74]
Train Case:  74 | Input/Output: [(-82 87 61 -70) -82]
Train Case:  75 | Input/Output: [(90 20 -83 100) -83]
Train Case:  76 | Input/Output: [(-5 61 80 84) -5]
Train Case:  77 | Input/Output: [(8 -57 -12 36) -57]
Train Case:  78 | Input/Output: [(-3 -100 52 -56) -100]
Train Case:  79 | Input/Output: [(3 83 11 -33) -33]
Train Case:  80 | Input/Output: [(-69 -41 -21 -46) -69]
Train Case:  81 | Input/Output: [(90 -78 12 64) -78]
Train Case:  82 | Input/Output: [(73 -20 81 -3) -20]
Train Case:  83 | Input/Output: [(-69 14 100 -60) -69]
Train Case:  84 | Input/Output: [(-99 37 40 -17) -99]
Train Case:  85 | Input/Output: [(9 -48 -96 14) -96]
Train Case:  86 | Input/Output: [(-24 2 -24 -17) -24]
Train Case:  87 | Input/Output: [(61 -85 69 -54) -85]
Train Case:  88 | Input/Output: [(-59 -65 -87 2) -87]
Train Case:  89 | Input/Output: [(-54 95 -56 13) -56]
Train Case:  90 | Input/Output: [(12 -7 -100 14) -100]
Train Case:  91 | Input/Output: [(14 50 -19 -25) -25]
Train Case:  92 | Input/Output: [(-33 17 56 43) -33]
Train Case:  93 | Input/Output: [(-86 9 -63 71) -86]
Train Case:  94 | Input/Output: [(-93 33 22 -94) -94]
Train Case:  95 | Input/Output: [(-85 33 85 65) -85]
Train Case:  96 | Input/Output: [(-17 79 -46 45) -46]
Train Case:  97 | Input/Output: [(82 -20 -98 62) -98]
Train Case:  98 | Input/Output: [(-80 50 41 -63) -80]
Train Case:  99 | Input/Output: [(-58 36 30 9) -58]
Test Case:   0 | Input/Output: [[-76 -85 -76 -76] -85]
Test Case:   1 | Input/Output: [[-48 -48 45 -48] -48]
Test Case:   2 | Input/Output: [[-46 97 -46 -46] -46]
Test Case:   3 | Input/Output: [[-56 81 -56 -56] -56]
Test Case:   4 | Input/Output: [[33 33 100 33] 33]
Test Case:   5 | Input/Output: [[14 54 54 54] 14]
Test Case:   6 | Input/Output: [[14 14 -5 14] -5]
Test Case:   7 | Input/Output: [[-91 -41 -41 -41] -91]
Test Case:   8 | Input/Output: [[53 18 53 53] 18]
Test Case:   9 | Input/Output: [[-26 -31 -26 -26] -31]
Test Case:  10 | Input/Output: [[38 38 -53 38] -53]
Test Case:  11 | Input/Output: [[-36 80 -36 -36] -36]
Test Case:  12 | Input/Output: [[74 74 74 -94] -94]
Test Case:  13 | Input/Output: [[96 96 96 73] 73]
Test Case:  14 | Input/Output: [[-61 -70 -70 -70] -70]
Test Case:  15 | Input/Output: [[-72 -72 -72 -72] -72]
Test Case:  16 | Input/Output: [[3 -81 3 3] -81]
Test Case:  17 | Input/Output: [[93 -50 93 93] -50]
Test Case:  18 | Input/Output: [[10 10 10 7] 7]
Test Case:  19 | Input/Output: [[53 53 53 94] 53]
Test Case:  20 | Input/Output: [[23 -57 -57 -57] -57]
Test Case:  21 | Input/Output: [[54 29 29 29] 29]
Test Case:  22 | Input/Output: [[18 -58 -58 -58] -58]
Test Case:  23 | Input/Output: [[20 20 20 -67] -67]
Test Case:  24 | Input/Output: [[59 59 34 59] 34]
Test Case:  25 | Input/Output: [[-18 -18 28 -18] -18]
Test Case:  26 | Input/Output: [[-43 3 3 3] -43]
Test Case:  27 | Input/Output: [[-35 -35 -35 81] -35]
Test Case:  28 | Input/Output: [[-5 30 30 30] -5]
Test Case:  29 | Input/Output: [[-23 -23 -73 -23] -73]
Test Case:  30 | Input/Output: [[79 -16 -16 -16] -16]
Test Case:  31 | Input/Output: [[-53 -53 -99 -53] -99]
Test Case:  32 | Input/Output: [[19 26 26 26] 19]
Test Case:  33 | Input/Output: [[55 55 55 -35] -35]
Test Case:  34 | Input/Output: [[-24 76 76 76] -24]
Test Case:  35 | Input/Output: [[12 3 12 12] 3]
Test Case:  36 | Input/Output: [[-64 -64 -64 -78] -78]
Test Case:  37 | Input/Output: [[95 28 95 95] 28]
Test Case:  38 | Input/Output: [[84 94 84 84] 84]
Test Case:  39 | Input/Output: [[-69 -69 37 -69] -69]
Test Case:  40 | Input/Output: [[-60 -50 -50 -50] -60]
Test Case:  41 | Input/Output: [[-71 -71 -71 -76] -76]
Test Case:  42 | Input/Output: [[2 2 20 2] 2]
Test Case:  43 | Input/Output: [[32 32 -58 32] -58]
Test Case:  44 | Input/Output: [[-75 -75 27 -75] -75]
Test Case:  45 | Input/Output: [[55 34 55 55] 34]
Test Case:  46 | Input/Output: [[-25 81 81 81] -25]
Test Case:  47 | Input/Output: [[-90 -15 -15 -15] -90]
Test Case:  48 | Input/Output: [[-92 -92 -98 -92] -98]
Test Case:  49 | Input/Output: [[-53 -54 -54 -54] -54]
Test Case:  50 | Input/Output: [[-34 -32 -32 -32] -34]
Test Case:  51 | Input/Output: [[-73 88 -73 -73] -73]
Test Case:  52 | Input/Output: [[-22 66 66 66] -22]
Test Case:  53 | Input/Output: [[67 67 -48 67] -48]
Test Case:  54 | Input/Output: [[-84 4 4 4] -84]
Test Case:  55 | Input/Output: [[4 4 4 44] 4]
Test Case:  56 | Input/Output: [[82 64 82 82] 64]
Test Case:  57 | Input/Output: [[0 0 -44 0] -44]
Test Case:  58 | Input/Output: [[-11 -11 -11 -60] -60]
Test Case:  59 | Input/Output: [[8 8 73 8] 8]
Test Case:  60 | Input/Output: [[-94 7 -94 -94] -94]
Test Case:  61 | Input/Output: [[-73 -71 -73 -73] -73]
Test Case:  62 | Input/Output: [[70 -48 70 70] -48]
Test Case:  63 | Input/Output: [[-27 -27 31 -27] -27]
Test Case:  64 | Input/Output: [[74 74 74 17] 17]
Test Case:  65 | Input/Output: [[-38 -26 -38 -38] -38]
Test Case:  66 | Input/Output: [[20 20 5 20] 5]
Test Case:  67 | Input/Output: [[2 84 2 2] 2]
Test Case:  68 | Input/Output: [[47 47 47 78] 47]
Test Case:  69 | Input/Output: [[-78 -3 -78 -78] -78]
Test Case:  70 | Input/Output: [[39 39 39 76] 39]
Test Case:  71 | Input/Output: [[-20 -56 -56 -56] -56]
Test Case:  72 | Input/Output: [[-72 -72 -90 -72] -90]
Test Case:  73 | Input/Output: [[83 83 -55 83] -55]
Test Case:  74 | Input/Output: [[-57 39 39 39] -57]
Test Case:  75 | Input/Output: [[10 10 38 10] 10]
Test Case:  76 | Input/Output: [[29 -64 29 29] -64]
Test Case:  77 | Input/Output: [[-80 -80 -80 -85] -85]
Test Case:  78 | Input/Output: [[56 -55 -55 -55] -55]
Test Case:  79 | Input/Output: [[79 -48 79 79] -48]
Test Case:  80 | Input/Output: [[36 36 36 95] 36]
Test Case:  81 | Input/Output: [[-25 -79 -25 -25] -79]
Test Case:  82 | Input/Output: [[-79 -79 -63 -79] -79]
Test Case:  83 | Input/Output: [[59 37 59 59] 37]
Test Case:  84 | Input/Output: [[80 -14 -14 -14] -14]
Test Case:  85 | Input/Output: [[74 74 -69 74] -69]
Test Case:  86 | Input/Output: [[-40 36 -40 -40] -40]
Test Case:  87 | Input/Output: [[-47 26 26 26] -47]
Test Case:  88 | Input/Output: [[-90 85 85 85] -90]
Test Case:  89 | Input/Output: [[66 -46 -46 -46] -46]
Test Case:  90 | Input/Output: [[-98 -98 -98 26] -98]
Test Case:  91 | Input/Output: [[59 59 -8 59] -8]
Test Case:  92 | Input/Output: [[-6 -6 -6 41] -6]
Test Case:  93 | Input/Output: [[-82 -67 -67 -67] -82]
Test Case:  94 | Input/Output: [[42 73 73 73] 42]
Test Case:  95 | Input/Output: [[21 62 21 21] 21]
Test Case:  96 | Input/Output: [[-48 -48 -48 27] -48]
Test Case:  97 | Input/Output: [[-2 96 -2 -2] -2]
Test Case:  98 | Input/Output: [[38 38 38 30] 30]
Test Case:  99 | Input/Output: [[-68 59 59 59] -68]
Test Case: 100 | Input/Output: [(-47 -47 -47 -47) -47]
Test Case: 101 | Input/Output: [(79 79 79 79) 79]
Test Case: 102 | Input/Output: [(-47 -47 -47 -47) -47]
Test Case: 103 | Input/Output: [(66 66 66 66) 66]
Test Case: 104 | Input/Output: [(-49 -49 -49 -49) -49]
Test Case: 105 | Input/Output: [(-53 -53 -53 -53) -53]
Test Case: 106 | Input/Output: [(54 54 54 54) 54]
Test Case: 107 | Input/Output: [(25 25 25 25) 25]
Test Case: 108 | Input/Output: [(19 19 19 19) 19]
Test Case: 109 | Input/Output: [(-92 -92 -92 -92) -92]
Test Case: 110 | Input/Output: [(-25 -25 -25 -25) -25]
Test Case: 111 | Input/Output: [(96 96 96 96) 96]
Test Case: 112 | Input/Output: [(44 44 44 44) 44]
Test Case: 113 | Input/Output: [(89 89 89 89) 89]
Test Case: 114 | Input/Output: [(46 46 46 46) 46]
Test Case: 115 | Input/Output: [(-80 -80 -80 -80) -80]
Test Case: 116 | Input/Output: [(55 55 55 55) 55]
Test Case: 117 | Input/Output: [(84 84 84 84) 84]
Test Case: 118 | Input/Output: [(68 68 68 68) 68]
Test Case: 119 | Input/Output: [(-55 -55 -55 -55) -55]
Test Case: 120 | Input/Output: [(63 63 63 63) 63]
Test Case: 121 | Input/Output: [(71 71 71 71) 71]
Test Case: 122 | Input/Output: [(20 20 20 20) 20]
Test Case: 123 | Input/Output: [(62 62 62 62) 62]
Test Case: 124 | Input/Output: [(-83 -83 -83 -83) -83]
Test Case: 125 | Input/Output: [(15 15 15 15) 15]
Test Case: 126 | Input/Output: [(-66 -66 -66 -66) -66]
Test Case: 127 | Input/Output: [(-79 -79 -79 -79) -79]
Test Case: 128 | Input/Output: [(20 20 20 20) 20]
Test Case: 129 | Input/Output: [(36 36 36 36) 36]
Test Case: 130 | Input/Output: [(98 98 98 98) 98]
Test Case: 131 | Input/Output: [(-67 -67 -67 -67) -67]
Test Case: 132 | Input/Output: [(-60 -60 -60 -60) -60]
Test Case: 133 | Input/Output: [(-35 -35 -35 -35) -35]
Test Case: 134 | Input/Output: [(-18 -18 -18 -18) -18]
Test Case: 135 | Input/Output: [(-40 -40 -40 -40) -40]
Test Case: 136 | Input/Output: [(-28 -28 -28 -28) -28]
Test Case: 137 | Input/Output: [(24 24 24 24) 24]
Test Case: 138 | Input/Output: [(53 53 53 53) 53]
Test Case: 139 | Input/Output: [(-74 -74 -74 -74) -74]
Test Case: 140 | Input/Output: [(-57 -57 -57 -57) -57]
Test Case: 141 | Input/Output: [(99 99 99 99) 99]
Test Case: 142 | Input/Output: [(93 93 93 93) 93]
Test Case: 143 | Input/Output: [(30 30 30 30) 30]
Test Case: 144 | Input/Output: [(-64 -64 -64 -64) -64]
Test Case: 145 | Input/Output: [(-45 -45 -45 -45) -45]
Test Case: 146 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 147 | Input/Output: [(-39 -39 -39 -39) -39]
Test Case: 148 | Input/Output: [(-23 -23 -23 -23) -23]
Test Case: 149 | Input/Output: [(6 6 6 6) 6]
Test Case: 150 | Input/Output: [(-98 -98 -98 -98) -98]
Test Case: 151 | Input/Output: [(-38 -38 -38 -38) -38]
Test Case: 152 | Input/Output: [(-65 -65 -65 -65) -65]
Test Case: 153 | Input/Output: [(-19 -19 -19 -19) -19]
Test Case: 154 | Input/Output: [(75 75 75 75) 75]
Test Case: 155 | Input/Output: [(91 91 91 91) 91]
Test Case: 156 | Input/Output: [(91 91 91 91) 91]
Test Case: 157 | Input/Output: [(-28 -28 -28 -28) -28]
Test Case: 158 | Input/Output: [(-60 -60 -60 -60) -60]
Test Case: 159 | Input/Output: [(-9 -9 -9 -9) -9]
Test Case: 160 | Input/Output: [(24 24 24 24) 24]
Test Case: 161 | Input/Output: [(48 48 48 48) 48]
Test Case: 162 | Input/Output: [(-39 -39 -39 -39) -39]
Test Case: 163 | Input/Output: [(56 56 56 56) 56]
Test Case: 164 | Input/Output: [(33 33 33 33) 33]
Test Case: 165 | Input/Output: [(-100 -100 -100 -100) -100]
Test Case: 166 | Input/Output: [(-18 -18 -18 -18) -18]
Test Case: 167 | Input/Output: [(-43 -43 -43 -43) -43]
Test Case: 168 | Input/Output: [(-39 -39 -39 -39) -39]
Test Case: 169 | Input/Output: [(-48 -48 -48 -48) -48]
Test Case: 170 | Input/Output: [(82 82 82 82) 82]
Test Case: 171 | Input/Output: [(-33 -33 -33 -33) -33]
Test Case: 172 | Input/Output: [(27 27 27 27) 27]
Test Case: 173 | Input/Output: [(67 67 67 67) 67]
Test Case: 174 | Input/Output: [(-53 -53 -53 -53) -53]
Test Case: 175 | Input/Output: [(38 38 38 38) 38]
Test Case: 176 | Input/Output: [(-68 -68 -68 -68) -68]
Test Case: 177 | Input/Output: [(-96 -96 -96 -96) -96]
Test Case: 178 | Input/Output: [(-30 -30 -30 -30) -30]
Test Case: 179 | Input/Output: [(78 78 78 78) 78]
Test Case: 180 | Input/Output: [(-37 -37 -37 -37) -37]
Test Case: 181 | Input/Output: [(-33 -33 -33 -33) -33]
Test Case: 182 | Input/Output: [(-50 -50 -50 -50) -50]
Test Case: 183 | Input/Output: [(43 43 43 43) 43]
Test Case: 184 | Input/Output: [(60 60 60 60) 60]
Test Case: 185 | Input/Output: [(63 63 63 63) 63]
Test Case: 186 | Input/Output: [(-49 -49 -49 -49) -49]
Test Case: 187 | Input/Output: [(-92 -92 -92 -92) -92]
Test Case: 188 | Input/Output: [(-72 -72 -72 -72) -72]
Test Case: 189 | Input/Output: [(-83 -83 -83 -83) -83]
Test Case: 190 | Input/Output: [(-41 -41 -41 -41) -41]
Test Case: 191 | Input/Output: [(-61 -61 -61 -61) -61]
Test Case: 192 | Input/Output: [(37 37 37 37) 37]
Test Case: 193 | Input/Output: [(23 23 23 23) 23]
Test Case: 194 | Input/Output: [(-27 -27 -27 -27) -27]
Test Case: 195 | Input/Output: [(-59 -59 -59 -59) -59]
Test Case: 196 | Input/Output: [(59 59 59 59) 59]
Test Case: 197 | Input/Output: [(-48 -48 -48 -48) -48]
Test Case: 198 | Input/Output: [(44 44 44 44) 44]
Test Case: 199 | Input/Output: [(-63 -63 -63 -63) -63]
Test Case: 200 | Input/Output: [(78 70 10 30) 10]
Test Case: 201 | Input/Output: [(90 68 81 99) 68]
Test Case: 202 | Input/Output: [(84 4 20 17) 4]
Test Case: 203 | Input/Output: [(70 4 26 14) 4]
Test Case: 204 | Input/Output: [(76 89 9 27) 9]
Test Case: 205 | Input/Output: [(48 6 3 36) 3]
Test Case: 206 | Input/Output: [(49 60 8 7) 7]
Test Case: 207 | Input/Output: [(26 25 35 20) 20]
Test Case: 208 | Input/Output: [(88 10 11 58) 10]
Test Case: 209 | Input/Output: [(27 96 25 76) 25]
Test Case: 210 | Input/Output: [(92 8 64 56) 8]
Test Case: 211 | Input/Output: [(7 36 35 35) 7]
Test Case: 212 | Input/Output: [(67 30 38 46) 30]
Test Case: 213 | Input/Output: [(95 23 76 79) 23]
Test Case: 214 | Input/Output: [(95 75 67 13) 13]
Test Case: 215 | Input/Output: [(48 54 37 8) 8]
Test Case: 216 | Input/Output: [(22 27 88 36) 22]
Test Case: 217 | Input/Output: [(44 56 56 34) 34]
Test Case: 218 | Input/Output: [(42 17 3 85) 3]
Test Case: 219 | Input/Output: [(91 93 32 29) 29]
Test Case: 220 | Input/Output: [(86 58 85 41) 41]
Test Case: 221 | Input/Output: [(99 45 4 61) 4]
Test Case: 222 | Input/Output: [(42 13 79 70) 13]
Test Case: 223 | Input/Output: [(49 35 3 85) 3]
Test Case: 224 | Input/Output: [(78 73 30 47) 30]
Test Case: 225 | Input/Output: [(58 60 85 49) 49]
Test Case: 226 | Input/Output: [(4 65 57 19) 4]
Test Case: 227 | Input/Output: [(16 83 27 99) 16]
Test Case: 228 | Input/Output: [(55 42 22 76) 22]
Test Case: 229 | Input/Output: [(13 33 9 24) 9]
Test Case: 230 | Input/Output: [(26 95 47 31) 26]
Test Case: 231 | Input/Output: [(48 55 88 62) 48]
Test Case: 232 | Input/Output: [(88 76 32 82) 32]
Test Case: 233 | Input/Output: [(91 75 42 99) 42]
Test Case: 234 | Input/Output: [(52 2 100 21) 2]
Test Case: 235 | Input/Output: [(63 10 6 84) 6]
Test Case: 236 | Input/Output: [(22 63 57 84) 22]
Test Case: 237 | Input/Output: [(84 87 80 37) 37]
Test Case: 238 | Input/Output: [(76 67 66 77) 66]
Test Case: 239 | Input/Output: [(15 77 38 95) 15]
Test Case: 240 | Input/Output: [(13 51 12 71) 12]
Test Case: 241 | Input/Output: [(17 89 23 5) 5]
Test Case: 242 | Input/Output: [(56 24 41 23) 23]
Test Case: 243 | Input/Output: [(52 2 52 88) 2]
Test Case: 244 | Input/Output: [(93 50 64 26) 26]
Test Case: 245 | Input/Output: [(54 52 58 19) 19]
Test Case: 246 | Input/Output: [(49 23 67 5) 5]
Test Case: 247 | Input/Output: [(0 40 90 86) 0]
Test Case: 248 | Input/Output: [(48 73 85 0) 0]
Test Case: 249 | Input/Output: [(1 48 12 19) 1]
Test Case: 250 | Input/Output: [(9 62 23 47) 9]
Test Case: 251 | Input/Output: [(51 50 71 43) 43]
Test Case: 252 | Input/Output: [(34 23 63 95) 23]
Test Case: 253 | Input/Output: [(91 76 1 77) 1]
Test Case: 254 | Input/Output: [(73 30 23 80) 23]
Test Case: 255 | Input/Output: [(46 31 99 32) 31]
Test Case: 256 | Input/Output: [(1 20 14 62) 1]
Test Case: 257 | Input/Output: [(65 12 84 63) 12]
Test Case: 258 | Input/Output: [(43 38 38 89) 38]
Test Case: 259 | Input/Output: [(71 30 74 85) 30]
Test Case: 260 | Input/Output: [(51 8 54 22) 8]
Test Case: 261 | Input/Output: [(37 51 73 25) 25]
Test Case: 262 | Input/Output: [(79 65 66 52) 52]
Test Case: 263 | Input/Output: [(94 14 17 98) 14]
Test Case: 264 | Input/Output: [(71 20 88 42) 20]
Test Case: 265 | Input/Output: [(67 70 66 19) 19]
Test Case: 266 | Input/Output: [(81 35 77 41) 35]
Test Case: 267 | Input/Output: [(57 22 60 27) 22]
Test Case: 268 | Input/Output: [(83 16 54 30) 16]
Test Case: 269 | Input/Output: [(41 72 25 61) 25]
Test Case: 270 | Input/Output: [(86 34 68 88) 34]
Test Case: 271 | Input/Output: [(30 66 39 82) 30]
Test Case: 272 | Input/Output: [(95 52 1 73) 1]
Test Case: 273 | Input/Output: [(99 72 7 20) 7]
Test Case: 274 | Input/Output: [(13 47 96 50) 13]
Test Case: 275 | Input/Output: [(95 38 22 16) 16]
Test Case: 276 | Input/Output: [(96 42 35 99) 35]
Test Case: 277 | Input/Output: [(41 96 29 48) 29]
Test Case: 278 | Input/Output: [(44 10 24 49) 10]
Test Case: 279 | Input/Output: [(97 67 71 2) 2]
Test Case: 280 | Input/Output: [(35 35 51 64) 35]
Test Case: 281 | Input/Output: [(45 9 50 75) 9]
Test Case: 282 | Input/Output: [(90 10 75 2) 2]
Test Case: 283 | Input/Output: [(96 91 38 73) 38]
Test Case: 284 | Input/Output: [(47 69 22 56) 22]
Test Case: 285 | Input/Output: [(95 29 43 70) 29]
Test Case: 286 | Input/Output: [(39 35 4 77) 4]
Test Case: 287 | Input/Output: [(18 46 96 92) 18]
Test Case: 288 | Input/Output: [(79 57 95 53) 53]
Test Case: 289 | Input/Output: [(40 57 71 55) 40]
Test Case: 290 | Input/Output: [(53 17 44 60) 17]
Test Case: 291 | Input/Output: [(24 66 7 56) 7]
Test Case: 292 | Input/Output: [(35 0 32 84) 0]
Test Case: 293 | Input/Output: [(27 98 54 38) 27]
Test Case: 294 | Input/Output: [(67 51 70 41) 41]
Test Case: 295 | Input/Output: [(31 98 44 72) 31]
Test Case: 296 | Input/Output: [(24 81 1 54) 1]
Test Case: 297 | Input/Output: [(94 86 42 83) 42]
Test Case: 298 | Input/Output: [(41 78 68 49) 41]
Test Case: 299 | Input/Output: [(89 36 54 48) 36]
Test Case: 300 | Input/Output: [(25 33 69 91) 25]
Test Case: 301 | Input/Output: [(12 21 3 8) 3]
Test Case: 302 | Input/Output: [(100 30 3 22) 3]
Test Case: 303 | Input/Output: [(17 79 48 75) 17]
Test Case: 304 | Input/Output: [(79 84 13 11) 11]
Test Case: 305 | Input/Output: [(96 78 95 49) 49]
Test Case: 306 | Input/Output: [(66 49 32 60) 32]
Test Case: 307 | Input/Output: [(13 65 88 99) 13]
Test Case: 308 | Input/Output: [(88 12 9 21) 9]
Test Case: 309 | Input/Output: [(29 36 82 36) 29]
Test Case: 310 | Input/Output: [(88 53 31 48) 31]
Test Case: 311 | Input/Output: [(37 5 19 28) 5]
Test Case: 312 | Input/Output: [(52 14 39 89) 14]
Test Case: 313 | Input/Output: [(2 92 13 30) 2]
Test Case: 314 | Input/Output: [(59 73 79 18) 18]
Test Case: 315 | Input/Output: [(54 19 52 34) 19]
Test Case: 316 | Input/Output: [(93 35 17 4) 4]
Test Case: 317 | Input/Output: [(10 5 19 62) 5]
Test Case: 318 | Input/Output: [(26 53 98 90) 26]
Test Case: 319 | Input/Output: [(49 24 67 73) 24]
Test Case: 320 | Input/Output: [(99 78 76 54) 54]
Test Case: 321 | Input/Output: [(99 9 50 90) 9]
Test Case: 322 | Input/Output: [(47 29 0 38) 0]
Test Case: 323 | Input/Output: [(1 58 28 14) 1]
Test Case: 324 | Input/Output: [(59 11 21 22) 11]
Test Case: 325 | Input/Output: [(23 67 61 97) 23]
Test Case: 326 | Input/Output: [(78 97 70 92) 70]
Test Case: 327 | Input/Output: [(79 19 51 41) 19]
Test Case: 328 | Input/Output: [(9 17 29 72) 9]
Test Case: 329 | Input/Output: [(15 35 23 18) 15]
Test Case: 330 | Input/Output: [(72 86 49 34) 34]
Test Case: 331 | Input/Output: [(97 4 62 23) 4]
Test Case: 332 | Input/Output: [(99 11 90 11) 11]
Test Case: 333 | Input/Output: [(86 28 5 44) 5]
Test Case: 334 | Input/Output: [(16 42 100 47) 16]
Test Case: 335 | Input/Output: [(60 25 2 30) 2]
Test Case: 336 | Input/Output: [(89 55 81 17) 17]
Test Case: 337 | Input/Output: [(74 55 75 14) 14]
Test Case: 338 | Input/Output: [(77 40 75 27) 27]
Test Case: 339 | Input/Output: [(3 14 36 31) 3]
Test Case: 340 | Input/Output: [(7 26 30 50) 7]
Test Case: 341 | Input/Output: [(4 39 30 52) 4]
Test Case: 342 | Input/Output: [(55 10 70 3) 3]
Test Case: 343 | Input/Output: [(31 92 59 90) 31]
Test Case: 344 | Input/Output: [(1 2 4 47) 1]
Test Case: 345 | Input/Output: [(36 68 94 30) 30]
Test Case: 346 | Input/Output: [(1 46 11 82) 1]
Test Case: 347 | Input/Output: [(100 20 88 46) 20]
Test Case: 348 | Input/Output: [(90 86 67 96) 67]
Test Case: 349 | Input/Output: [(63 73 96 23) 23]
Test Case: 350 | Input/Output: [(65 95 17 64) 17]
Test Case: 351 | Input/Output: [(85 64 16 97) 16]
Test Case: 352 | Input/Output: [(83 70 44 28) 28]
Test Case: 353 | Input/Output: [(49 85 90 50) 49]
Test Case: 354 | Input/Output: [(56 94 77 83) 56]
Test Case: 355 | Input/Output: [(73 48 28 1) 1]
Test Case: 356 | Input/Output: [(45 72 100 19) 19]
Test Case: 357 | Input/Output: [(41 69 57 21) 21]
Test Case: 358 | Input/Output: [(91 54 79 17) 17]
Test Case: 359 | Input/Output: [(2 90 19 30) 2]
Test Case: 360 | Input/Output: [(97 18 81 9) 9]
Test Case: 361 | Input/Output: [(61 10 28 9) 9]
Test Case: 362 | Input/Output: [(45 0 65 38) 0]
Test Case: 363 | Input/Output: [(40 18 10 76) 10]
Test Case: 364 | Input/Output: [(39 85 70 91) 39]
Test Case: 365 | Input/Output: [(65 100 59 93) 59]
Test Case: 366 | Input/Output: [(55 94 50 33) 33]
Test Case: 367 | Input/Output: [(29 64 56 8) 8]
Test Case: 368 | Input/Output: [(88 37 71 44) 37]
Test Case: 369 | Input/Output: [(20 63 1 49) 1]
Test Case: 370 | Input/Output: [(10 44 19 94) 10]
Test Case: 371 | Input/Output: [(65 23 66 32) 23]
Test Case: 372 | Input/Output: [(24 27 27 100) 24]
Test Case: 373 | Input/Output: [(9 29 12 56) 9]
Test Case: 374 | Input/Output: [(87 53 80 44) 44]
Test Case: 375 | Input/Output: [(43 75 71 60) 43]
Test Case: 376 | Input/Output: [(72 46 31 69) 31]
Test Case: 377 | Input/Output: [(12 46 63 76) 12]
Test Case: 378 | Input/Output: [(64 66 42 14) 14]
Test Case: 379 | Input/Output: [(41 10 17 41) 10]
Test Case: 380 | Input/Output: [(71 68 95 16) 16]
Test Case: 381 | Input/Output: [(60 83 89 19) 19]
Test Case: 382 | Input/Output: [(28 11 73 45) 11]
Test Case: 383 | Input/Output: [(21 85 23 29) 21]
Test Case: 384 | Input/Output: [(67 92 49 49) 49]
Test Case: 385 | Input/Output: [(45 100 93 15) 15]
Test Case: 386 | Input/Output: [(53 40 0 53) 0]
Test Case: 387 | Input/Output: [(3 60 64 19) 3]
Test Case: 388 | Input/Output: [(74 52 35 56) 35]
Test Case: 389 | Input/Output: [(90 60 7 16) 7]
Test Case: 390 | Input/Output: [(17 36 73 39) 17]
Test Case: 391 | Input/Output: [(40 93 3 59) 3]
Test Case: 392 | Input/Output: [(98 23 58 8) 8]
Test Case: 393 | Input/Output: [(57 14 91 1) 1]
Test Case: 394 | Input/Output: [(85 65 59 5) 5]
Test Case: 395 | Input/Output: [(71 8 17 11) 8]
Test Case: 396 | Input/Output: [(49 10 90 97) 10]
Test Case: 397 | Input/Output: [(67 84 90 21) 21]
Test Case: 398 | Input/Output: [(25 44 13 86) 13]
Test Case: 399 | Input/Output: [(86 33 0 66) 0]
Test Case: 400 | Input/Output: [(-3 -38 84 -94) -94]
Test Case: 401 | Input/Output: [(-99 -80 -16 -67) -99]
Test Case: 402 | Input/Output: [(50 -88 60 76) -88]
Test Case: 403 | Input/Output: [(-76 32 47 50) -76]
Test Case: 404 | Input/Output: [(52 54 -73 -68) -73]
Test Case: 405 | Input/Output: [(41 -70 39 -32) -70]
Test Case: 406 | Input/Output: [(64 30 -37 -17) -37]
Test Case: 407 | Input/Output: [(-41 -46 -43 -8) -46]
Test Case: 408 | Input/Output: [(64 -22 64 -59) -59]
Test Case: 409 | Input/Output: [(100 26 -7 -26) -26]
Test Case: 410 | Input/Output: [(72 -33 -21 -34) -34]
Test Case: 411 | Input/Output: [(-10 -7 68 53) -10]
Test Case: 412 | Input/Output: [(1 27 6 59) 1]
Test Case: 413 | Input/Output: [(69 -11 -54 -92) -92]
Test Case: 414 | Input/Output: [(77 31 -90 -83) -90]
Test Case: 415 | Input/Output: [(100 -4 5 24) -4]
Test Case: 416 | Input/Output: [(100 -11 18 -39) -39]
Test Case: 417 | Input/Output: [(-56 59 50 93) -56]
Test Case: 418 | Input/Output: [(72 65 -43 -66) -66]
Test Case: 419 | Input/Output: [(59 68 -53 63) -53]
Test Case: 420 | Input/Output: [(48 -84 -10 -18) -84]
Test Case: 421 | Input/Output: [(-25 50 -21 45) -25]
Test Case: 422 | Input/Output: [(65 -39 -39 17) -39]
Test Case: 423 | Input/Output: [(38 -94 69 17) -94]
Test Case: 424 | Input/Output: [(22 -96 -57 8) -96]
Test Case: 425 | Input/Output: [(48 -45 75 81) -45]
Test Case: 426 | Input/Output: [(53 31 1 -60) -60]
Test Case: 427 | Input/Output: [(55 -30 39 -66) -66]
Test Case: 428 | Input/Output: [(-91 8 53 75) -91]
Test Case: 429 | Input/Output: [(-21 58 51 69) -21]
Test Case: 430 | Input/Output: [(68 92 -36 18) -36]
Test Case: 431 | Input/Output: [(-72 76 -64 7) -72]
Test Case: 432 | Input/Output: [(34 99 48 56) 34]
Test Case: 433 | Input/Output: [(83 35 94 5) 5]
Test Case: 434 | Input/Output: [(-81 -9 75 -68) -81]
Test Case: 435 | Input/Output: [(85 84 -45 -5) -45]
Test Case: 436 | Input/Output: [(-2 11 86 -33) -33]
Test Case: 437 | Input/Output: [(-84 -38 -40 -8) -84]
Test Case: 438 | Input/Output: [(-34 24 -78 95) -78]
Test Case: 439 | Input/Output: [(-22 -88 -100 -76) -100]
Test Case: 440 | Input/Output: [(33 -57 -54 17) -57]
Test Case: 441 | Input/Output: [(-96 -98 -59 55) -98]
Test Case: 442 | Input/Output: [(29 15 -100 -79) -100]
Test Case: 443 | Input/Output: [(-64 84 5 -93) -93]
Test Case: 444 | Input/Output: [(-49 50 -53 -99) -99]
Test Case: 445 | Input/Output: [(39 -51 -42 45) -51]
Test Case: 446 | Input/Output: [(-3 32 -75 -18) -75]
Test Case: 447 | Input/Output: [(25 9 43 12) 9]
Test Case: 448 | Input/Output: [(54 51 28 -15) -15]
Test Case: 449 | Input/Output: [(25 75 37 6) 6]
Test Case: 450 | Input/Output: [(87 80 -95 16) -95]
Test Case: 451 | Input/Output: [(82 -41 77 22) -41]
Test Case: 452 | Input/Output: [(-53 -22 91 -8) -53]
Test Case: 453 | Input/Output: [(65 14 -47 57) -47]
Test Case: 454 | Input/Output: [(99 -3 -46 -80) -80]
Test Case: 455 | Input/Output: [(14 -27 -1 -79) -79]
Test Case: 456 | Input/Output: [(67 -73 -76 18) -76]
Test Case: 457 | Input/Output: [(-50 -98 -44 -83) -98]
Test Case: 458 | Input/Output: [(-47 -21 -68 -7) -68]
Test Case: 459 | Input/Output: [(13 -84 -92 16) -92]
Test Case: 460 | Input/Output: [(-12 13 45 21) -12]
Test Case: 461 | Input/Output: [(-78 -21 -61 77) -78]
Test Case: 462 | Input/Output: [(3 -86 56 -35) -86]
Test Case: 463 | Input/Output: [(-66 -5 -99 13) -99]
Test Case: 464 | Input/Output: [(-48 -62 54 -92) -92]
Test Case: 465 | Input/Output: [(93 -50 -47 -7) -50]
Test Case: 466 | Input/Output: [(-17 69 56 81) -17]
Test Case: 467 | Input/Output: [(57 30 99 -94) -94]
Test Case: 468 | Input/Output: [(-94 6 26 42) -94]
Test Case: 469 | Input/Output: [(-7 45 58 -99) -99]
Test Case: 470 | Input/Output: [(-89 -78 -32 -16) -89]
Test Case: 471 | Input/Output: [(84 81 -45 51) -45]
Test Case: 472 | Input/Output: [(-18 97 72 -22) -22]
Test Case: 473 | Input/Output: [(86 -57 -22 4) -57]
Test Case: 474 | Input/Output: [(51 -90 -16 3) -90]
Test Case: 475 | Input/Output: [(-98 20 -77 -40) -98]
Test Case: 476 | Input/Output: [(84 34 69 60) 34]
Test Case: 477 | Input/Output: [(45 -85 -11 58) -85]
Test Case: 478 | Input/Output: [(93 91 83 94) 83]
Test Case: 479 | Input/Output: [(-32 -12 -90 -74) -90]
Test Case: 480 | Input/Output: [(12 99 16 38) 12]
Test Case: 481 | Input/Output: [(6 -73 -2 -64) -73]
Test Case: 482 | Input/Output: [(-41 -72 -3 -69) -72]
Test Case: 483 | Input/Output: [(-19 -87 -42 21) -87]
Test Case: 484 | Input/Output: [(56 0 -40 45) -40]
Test Case: 485 | Input/Output: [(43 17 69 58) 17]
Test Case: 486 | Input/Output: [(12 57 38 -51) -51]
Test Case: 487 | Input/Output: [(71 80 49 42) 42]
Test Case: 488 | Input/Output: [(15 95 -75 96) -75]
Test Case: 489 | Input/Output: [(-73 56 -40 64) -73]
Test Case: 490 | Input/Output: [(13 87 53 -15) -15]
Test Case: 491 | Input/Output: [(71 91 -37 1) -37]
Test Case: 492 | Input/Output: [(-85 -89 -67 31) -89]
Test Case: 493 | Input/Output: [(38 -64 30 70) -64]
Test Case: 494 | Input/Output: [(-77 -84 -47 93) -84]
Test Case: 495 | Input/Output: [(92 20 -60 -4) -60]
Test Case: 496 | Input/Output: [(70 90 -8 14) -8]
Test Case: 497 | Input/Output: [(-27 93 -83 13) -83]
Test Case: 498 | Input/Output: [(100 -20 -48 -19) -48]
Test Case: 499 | Input/Output: [(49 -83 -35 -18) -83]
Test Case: 500 | Input/Output: [(75 -49 21 -24) -49]
Test Case: 501 | Input/Output: [(69 8 69 43) 8]
Test Case: 502 | Input/Output: [(-64 -81 -39 -34) -81]
Test Case: 503 | Input/Output: [(-82 -75 49 33) -82]
Test Case: 504 | Input/Output: [(89 63 -49 9) -49]
Test Case: 505 | Input/Output: [(-88 -58 -12 86) -88]
Test Case: 506 | Input/Output: [(-57 100 36 -63) -63]
Test Case: 507 | Input/Output: [(84 -92 -70 21) -92]
Test Case: 508 | Input/Output: [(-5 -75 -93 -72) -93]
Test Case: 509 | Input/Output: [(-69 97 -18 -18) -69]
Test Case: 510 | Input/Output: [(70 1 -75 76) -75]
Test Case: 511 | Input/Output: [(87 -63 -49 51) -63]
Test Case: 512 | Input/Output: [(-26 -97 30 -78) -97]
Test Case: 513 | Input/Output: [(-88 -43 -59 37) -88]
Test Case: 514 | Input/Output: [(-70 15 -42 -22) -70]
Test Case: 515 | Input/Output: [(-76 -33 60 -17) -76]
Test Case: 516 | Input/Output: [(27 -31 -68 43) -68]
Test Case: 517 | Input/Output: [(14 71 11 5) 5]
Test Case: 518 | Input/Output: [(-11 -17 80 -26) -26]
Test Case: 519 | Input/Output: [(-63 -98 1 -3) -98]
Test Case: 520 | Input/Output: [(88 28 -20 -10) -20]
Test Case: 521 | Input/Output: [(-89 -36 61 -6) -89]
Test Case: 522 | Input/Output: [(6 -12 44 -34) -34]
Test Case: 523 | Input/Output: [(-44 56 74 61) -44]
Test Case: 524 | Input/Output: [(35 39 47 72) 35]
Test Case: 525 | Input/Output: [(26 -77 23 -76) -77]
Test Case: 526 | Input/Output: [(37 26 -11 -49) -49]
Test Case: 527 | Input/Output: [(-64 22 -56 44) -64]
Test Case: 528 | Input/Output: [(-53 62 61 57) -53]
Test Case: 529 | Input/Output: [(-45 56 -51 98) -51]
Test Case: 530 | Input/Output: [(-5 46 45 64) -5]
Test Case: 531 | Input/Output: [(-68 -75 70 -38) -75]
Test Case: 532 | Input/Output: [(92 67 -83 12) -83]
Test Case: 533 | Input/Output: [(88 -92 -100 2) -100]
Test Case: 534 | Input/Output: [(12 40 24 46) 12]
Test Case: 535 | Input/Output: [(-9 0 34 -78) -78]
Test Case: 536 | Input/Output: [(-22 27 -86 -10) -86]
Test Case: 537 | Input/Output: [(-30 84 -68 59) -68]
Test Case: 538 | Input/Output: [(-35 -71 20 1) -71]
Test Case: 539 | Input/Output: [(88 1 -49 -78) -78]
Test Case: 540 | Input/Output: [(-44 40 -6 22) -44]
Test Case: 541 | Input/Output: [(-96 -27 80 -37) -96]
Test Case: 542 | Input/Output: [(-35 9 73 14) -35]
Test Case: 543 | Input/Output: [(-15 100 -49 -56) -56]
Test Case: 544 | Input/Output: [(-92 -92 85 49) -92]
Test Case: 545 | Input/Output: [(-100 85 55 70) -100]
Test Case: 546 | Input/Output: [(-6 -1 -85 -14) -85]
Test Case: 547 | Input/Output: [(46 -97 -50 5) -97]
Test Case: 548 | Input/Output: [(-96 -40 -72 9) -96]
Test Case: 549 | Input/Output: [(-98 19 45 -92) -98]
Test Case: 550 | Input/Output: [(65 -42 99 -68) -68]
Test Case: 551 | Input/Output: [(96 53 -85 31) -85]
Test Case: 552 | Input/Output: [(-18 -67 62 92) -67]
Test Case: 553 | Input/Output: [(-88 -65 3 -15) -88]
Test Case: 554 | Input/Output: [(-93 32 24 -16) -93]
Test Case: 555 | Input/Output: [(4 -13 88 23) -13]
Test Case: 556 | Input/Output: [(-8 -55 -18 -94) -94]
Test Case: 557 | Input/Output: [(93 -85 -30 35) -85]
Test Case: 558 | Input/Output: [(54 68 -55 31) -55]
Test Case: 559 | Input/Output: [(-95 -45 37 18) -95]
Test Case: 560 | Input/Output: [(-70 -35 100 84) -70]
Test Case: 561 | Input/Output: [(96 -4 -100 18) -100]
Test Case: 562 | Input/Output: [(-72 52 74 57) -72]
Test Case: 563 | Input/Output: [(-39 29 19 81) -39]
Test Case: 564 | Input/Output: [(-70 -52 -87 28) -87]
Test Case: 565 | Input/Output: [(44 -6 -37 -79) -79]
Test Case: 566 | Input/Output: [(-43 98 -7 75) -43]
Test Case: 567 | Input/Output: [(12 -74 81 -91) -91]
Test Case: 568 | Input/Output: [(-71 6 -13 24) -71]
Test Case: 569 | Input/Output: [(54 -17 -34 17) -34]
Test Case: 570 | Input/Output: [(-17 18 65 72) -17]
Test Case: 571 | Input/Output: [(-38 63 74 22) -38]
Test Case: 572 | Input/Output: [(-69 9 -20 -87) -87]
Test Case: 573 | Input/Output: [(-61 79 -93 42) -93]
Test Case: 574 | Input/Output: [(-38 9 -13 96) -38]
Test Case: 575 | Input/Output: [(-56 -61 10 25) -61]
Test Case: 576 | Input/Output: [(23 97 88 -63) -63]
Test Case: 577 | Input/Output: [(-42 50 -35 49) -42]
Test Case: 578 | Input/Output: [(-92 93 -97 -4) -97]
Test Case: 579 | Input/Output: [(-60 82 99 -8) -60]
Test Case: 580 | Input/Output: [(98 80 38 62) 38]
Test Case: 581 | Input/Output: [(-75 -51 53 -7) -75]
Test Case: 582 | Input/Output: [(59 -4 -22 18) -22]
Test Case: 583 | Input/Output: [(47 48 25 -46) -46]
Test Case: 584 | Input/Output: [(-57 4 -17 87) -57]
Test Case: 585 | Input/Output: [(56 35 5 -96) -96]
Test Case: 586 | Input/Output: [(51 -23 57 -70) -70]
Test Case: 587 | Input/Output: [(-45 -39 11 26) -45]
Test Case: 588 | Input/Output: [(48 -55 -17 -80) -80]
Test Case: 589 | Input/Output: [(-54 -7 -35 16) -54]
Test Case: 590 | Input/Output: [(86 -35 82 -67) -67]
Test Case: 591 | Input/Output: [(24 94 15 -75) -75]
Test Case: 592 | Input/Output: [(93 -72 61 -34) -72]
Test Case: 593 | Input/Output: [(-89 -45 31 75) -89]
Test Case: 594 | Input/Output: [(64 -1 2 44) -1]
Test Case: 595 | Input/Output: [(23 16 95 -38) -38]
Test Case: 596 | Input/Output: [(21 96 37 -36) -36]
Test Case: 597 | Input/Output: [(97 -2 -92 41) -92]
Test Case: 598 | Input/Output: [(-52 22 39 -47) -52]
Test Case: 599 | Input/Output: [(-33 69 49 -92) -92]
Test Case: 600 | Input/Output: [(78 -79 94 73) -79]
Test Case: 601 | Input/Output: [(-43 26 -78 6) -78]
Test Case: 602 | Input/Output: [(-79 -64 10 65) -79]
Test Case: 603 | Input/Output: [(65 -52 16 51) -52]
Test Case: 604 | Input/Output: [(19 23 -89 -84) -89]
Test Case: 605 | Input/Output: [(82 -32 12 -51) -51]
Test Case: 606 | Input/Output: [(-42 63 25 91) -42]
Test Case: 607 | Input/Output: [(48 22 56 78) 22]
Test Case: 608 | Input/Output: [(-53 31 -53 -25) -53]
Test Case: 609 | Input/Output: [(51 18 40 -82) -82]
Test Case: 610 | Input/Output: [(-73 -69 -84 -26) -84]
Test Case: 611 | Input/Output: [(49 1 38 86) 1]
Test Case: 612 | Input/Output: [(22 79 86 -51) -51]
Test Case: 613 | Input/Output: [(-46 91 20 -39) -46]
Test Case: 614 | Input/Output: [(-87 -93 -56 -82) -93]
Test Case: 615 | Input/Output: [(-41 49 -4 14) -41]
Test Case: 616 | Input/Output: [(-70 -34 49 12) -70]
Test Case: 617 | Input/Output: [(21 -13 50 60) -13]
Test Case: 618 | Input/Output: [(63 -94 44 -64) -94]
Test Case: 619 | Input/Output: [(51 -33 -58 -95) -95]
Test Case: 620 | Input/Output: [(-18 80 -7 -6) -18]
Test Case: 621 | Input/Output: [(-77 -94 71 32) -94]
Test Case: 622 | Input/Output: [(-100 91 -12 46) -100]
Test Case: 623 | Input/Output: [(44 -35 54 19) -35]
Test Case: 624 | Input/Output: [(-7 -24 -59 -34) -59]
Test Case: 625 | Input/Output: [(-81 -71 -93 65) -93]
Test Case: 626 | Input/Output: [(72 -84 25 -37) -84]
Test Case: 627 | Input/Output: [(27 19 -50 -38) -50]
Test Case: 628 | Input/Output: [(78 9 19 20) 9]
Test Case: 629 | Input/Output: [(18 -39 44 -94) -94]
Test Case: 630 | Input/Output: [(-77 -82 35 47) -82]
Test Case: 631 | Input/Output: [(32 40 44 -66) -66]
Test Case: 632 | Input/Output: [(-27 -27 99 61) -27]
Test Case: 633 | Input/Output: [(-54 -45 -95 48) -95]
Test Case: 634 | Input/Output: [(-47 -72 50 -2) -72]
Test Case: 635 | Input/Output: [(11 -74 87 -50) -74]
Test Case: 636 | Input/Output: [(-98 -80 -38 26) -98]
Test Case: 637 | Input/Output: [(21 -71 -39 -74) -74]
Test Case: 638 | Input/Output: [(-47 -54 13 -86) -86]
Test Case: 639 | Input/Output: [(-8 -6 25 -66) -66]
Test Case: 640 | Input/Output: [(-50 -76 -55 89) -76]
Test Case: 641 | Input/Output: [(-45 84 86 -68) -68]
Test Case: 642 | Input/Output: [(-79 -87 -29 -26) -87]
Test Case: 643 | Input/Output: [(89 45 -53 83) -53]
Test Case: 644 | Input/Output: [(83 82 -54 73) -54]
Test Case: 645 | Input/Output: [(4 -16 -66 -27) -66]
Test Case: 646 | Input/Output: [(27 -72 27 75) -72]
Test Case: 647 | Input/Output: [(-63 -98 -46 27) -98]
Test Case: 648 | Input/Output: [(-25 -16 -16 -54) -54]
Test Case: 649 | Input/Output: [(90 -84 -77 79) -84]
Test Case: 650 | Input/Output: [(47 -40 40 45) -40]
Test Case: 651 | Input/Output: [(-73 -16 79 -64) -73]
Test Case: 652 | Input/Output: [(-57 60 11 -18) -57]
Test Case: 653 | Input/Output: [(-32 -99 37 63) -99]
Test Case: 654 | Input/Output: [(-47 -59 90 59) -59]
Test Case: 655 | Input/Output: [(38 28 51 30) 28]
Test Case: 656 | Input/Output: [(-77 -43 48 7) -77]
Test Case: 657 | Input/Output: [(-23 -25 8 -8) -25]
Test Case: 658 | Input/Output: [(-63 2 88 -52) -63]
Test Case: 659 | Input/Output: [(-55 -73 42 71) -73]
Test Case: 660 | Input/Output: [(-10 39 30 -9) -10]
Test Case: 661 | Input/Output: [(-72 83 69 -53) -72]
Test Case: 662 | Input/Output: [(100 70 -26 43) -26]
Test Case: 663 | Input/Output: [(80 -49 -77 57) -77]
Test Case: 664 | Input/Output: [(63 32 97 10) 10]
Test Case: 665 | Input/Output: [(66 90 -86 35) -86]
Test Case: 666 | Input/Output: [(-75 94 -22 -48) -75]
Test Case: 667 | Input/Output: [(-32 -1 -57 -65) -65]
Test Case: 668 | Input/Output: [(-53 -37 -20 11) -53]
Test Case: 669 | Input/Output: [(-42 46 -40 -76) -76]
Test Case: 670 | Input/Output: [(46 86 48 -4) -4]
Test Case: 671 | Input/Output: [(98 59 -95 62) -95]
Test Case: 672 | Input/Output: [(-20 -64 -30 -5) -64]
Test Case: 673 | Input/Output: [(34 97 -99 -32) -99]
Test Case: 674 | Input/Output: [(37 95 -52 8) -52]
Test Case: 675 | Input/Output: [(70 -87 -32 81) -87]
Test Case: 676 | Input/Output: [(70 -4 85 33) -4]
Test Case: 677 | Input/Output: [(-18 75 -12 4) -18]
Test Case: 678 | Input/Output: [(62 84 -44 77) -44]
Test Case: 679 | Input/Output: [(61 -62 87 76) -62]
Test Case: 680 | Input/Output: [(7 -10 89 85) -10]
Test Case: 681 | Input/Output: [(-44 -96 -77 -5) -96]
Test Case: 682 | Input/Output: [(-25 -25 -71 -42) -71]
Test Case: 683 | Input/Output: [(-28 -30 99 63) -30]
Test Case: 684 | Input/Output: [(40 66 -33 26) -33]
Test Case: 685 | Input/Output: [(51 77 88 -26) -26]
Test Case: 686 | Input/Output: [(46 100 -81 -95) -95]
Test Case: 687 | Input/Output: [(-94 14 12 48) -94]
Test Case: 688 | Input/Output: [(-35 48 -82 -27) -82]
Test Case: 689 | Input/Output: [(-87 80 -75 79) -87]
Test Case: 690 | Input/Output: [(16 -90 51 -28) -90]
Test Case: 691 | Input/Output: [(28 88 94 -42) -42]
Test Case: 692 | Input/Output: [(-87 73 -57 46) -87]
Test Case: 693 | Input/Output: [(48 -1 -20 6) -20]
Test Case: 694 | Input/Output: [(46 52 53 72) 46]
Test Case: 695 | Input/Output: [(47 -89 34 95) -89]
Test Case: 696 | Input/Output: [(-70 -50 -53 77) -70]
Test Case: 697 | Input/Output: [(-33 -30 -24 -51) -51]
Test Case: 698 | Input/Output: [(-73 75 9 -63) -73]
Test Case: 699 | Input/Output: [(73 27 30 -66) -66]
Test Case: 700 | Input/Output: [(-40 73 50 -6) -40]
Test Case: 701 | Input/Output: [(-92 31 67 -88) -92]
Test Case: 702 | Input/Output: [(-81 22 56 40) -81]
Test Case: 703 | Input/Output: [(-100 -3 -87 88) -100]
Test Case: 704 | Input/Output: [(34 6 75 -30) -30]
Test Case: 705 | Input/Output: [(-13 11 20 -26) -26]
Test Case: 706 | Input/Output: [(9 -63 -29 94) -63]
Test Case: 707 | Input/Output: [(96 -53 7 -66) -66]
Test Case: 708 | Input/Output: [(-64 23 28 -53) -64]
Test Case: 709 | Input/Output: [(81 -54 -22 -1) -54]
Test Case: 710 | Input/Output: [(-50 -88 73 5) -88]
Test Case: 711 | Input/Output: [(-39 99 -6 33) -39]
Test Case: 712 | Input/Output: [(-27 12 70 -61) -61]
Test Case: 713 | Input/Output: [(14 -37 -40 -84) -84]
Test Case: 714 | Input/Output: [(-8 -13 66 18) -13]
Test Case: 715 | Input/Output: [(59 68 33 69) 33]
Test Case: 716 | Input/Output: [(-86 -13 42 23) -86]
Test Case: 717 | Input/Output: [(16 -82 -85 11) -85]
Test Case: 718 | Input/Output: [(-90 6 13 -60) -90]
Test Case: 719 | Input/Output: [(-59 95 -4 86) -59]
Test Case: 720 | Input/Output: [(-10 34 96 48) -10]
Test Case: 721 | Input/Output: [(91 14 94 -88) -88]
Test Case: 722 | Input/Output: [(-23 -69 66 -9) -69]
Test Case: 723 | Input/Output: [(4 31 24 13) 4]
Test Case: 724 | Input/Output: [(42 -2 -85 76) -85]
Test Case: 725 | Input/Output: [(99 90 -43 -95) -95]
Test Case: 726 | Input/Output: [(-44 27 30 -12) -44]
Test Case: 727 | Input/Output: [(63 -92 -65 1) -92]
Test Case: 728 | Input/Output: [(62 -43 -36 24) -43]
Test Case: 729 | Input/Output: [(55 -93 -77 84) -93]
Test Case: 730 | Input/Output: [(22 65 -29 1) -29]
Test Case: 731 | Input/Output: [(99 -36 91 -52) -52]
Test Case: 732 | Input/Output: [(80 -55 67 -7) -55]
Test Case: 733 | Input/Output: [(4 -59 27 -68) -68]
Test Case: 734 | Input/Output: [(55 -67 -2 17) -67]
Test Case: 735 | Input/Output: [(-17 62 23 -12) -17]
Test Case: 736 | Input/Output: [(88 83 75 72) 72]
Test Case: 737 | Input/Output: [(93 -54 -36 94) -54]
Test Case: 738 | Input/Output: [(-18 45 78 -78) -78]
Test Case: 739 | Input/Output: [(-8 -36 73 -23) -36]
Test Case: 740 | Input/Output: [(6 71 -97 -95) -97]
Test Case: 741 | Input/Output: [(-17 -59 -31 31) -59]
Test Case: 742 | Input/Output: [(-95 65 -2 -98) -98]
Test Case: 743 | Input/Output: [(-85 55 -44 -77) -85]
Test Case: 744 | Input/Output: [(80 -18 -39 0) -39]
Test Case: 745 | Input/Output: [(-22 50 98 -91) -91]
Test Case: 746 | Input/Output: [(-100 -90 -16 -90) -100]
Test Case: 747 | Input/Output: [(-3 -11 -35 93) -35]
Test Case: 748 | Input/Output: [(-83 72 12 69) -83]
Test Case: 749 | Input/Output: [(31 3 58 59) 3]
Test Case: 750 | Input/Output: [(69 87 59 67) 59]
Test Case: 751 | Input/Output: [(81 -81 46 26) -81]
Test Case: 752 | Input/Output: [(73 2 -35 -78) -78]
Test Case: 753 | Input/Output: [(39 -73 -44 49) -73]
Test Case: 754 | Input/Output: [(48 -39 100 64) -39]
Test Case: 755 | Input/Output: [(69 73 -69 -20) -69]
Test Case: 756 | Input/Output: [(-16 86 -7 97) -16]
Test Case: 757 | Input/Output: [(64 -90 21 96) -90]
Test Case: 758 | Input/Output: [(-16 -86 68 23) -86]
Test Case: 759 | Input/Output: [(-73 -46 88 -23) -73]
Test Case: 760 | Input/Output: [(-35 -6 85 -92) -92]
Test Case: 761 | Input/Output: [(-91 -4 1 -41) -91]
Test Case: 762 | Input/Output: [(13 66 -78 -20) -78]
Test Case: 763 | Input/Output: [(38 -70 -84 -89) -89]
Test Case: 764 | Input/Output: [(-10 16 -18 -19) -19]
Test Case: 765 | Input/Output: [(-10 -52 -1 66) -52]
Test Case: 766 | Input/Output: [(16 -48 77 35) -48]
Test Case: 767 | Input/Output: [(-63 92 -2 100) -63]
Test Case: 768 | Input/Output: [(-16 -8 51 -72) -72]
Test Case: 769 | Input/Output: [(-94 20 22 -36) -94]
Test Case: 770 | Input/Output: [(-30 41 -49 40) -49]
Test Case: 771 | Input/Output: [(-25 -57 -40 15) -57]
Test Case: 772 | Input/Output: [(8 -94 51 21) -94]
Test Case: 773 | Input/Output: [(-14 0 58 -76) -76]
Test Case: 774 | Input/Output: [(61 -57 15 -26) -57]
Test Case: 775 | Input/Output: [(22 98 -55 5) -55]
Test Case: 776 | Input/Output: [(-84 76 -100 -72) -100]
Test Case: 777 | Input/Output: [(-53 30 51 84) -53]
Test Case: 778 | Input/Output: [(86 21 93 12) 12]
Test Case: 779 | Input/Output: [(-48 90 -63 21) -63]
Test Case: 780 | Input/Output: [(53 -81 67 -12) -81]
Test Case: 781 | Input/Output: [(-92 39 99 49) -92]
Test Case: 782 | Input/Output: [(67 63 -40 24) -40]
Test Case: 783 | Input/Output: [(67 -18 97 -45) -45]
Test Case: 784 | Input/Output: [(-64 -90 4 -82) -90]
Test Case: 785 | Input/Output: [(-19 -16 -16 26) -19]
Test Case: 786 | Input/Output: [(-6 -93 -56 -18) -93]
Test Case: 787 | Input/Output: [(-87 -20 -16 -85) -87]
Test Case: 788 | Input/Output: [(45 -35 -89 -1) -89]
Test Case: 789 | Input/Output: [(54 -14 -95 -88) -95]
Test Case: 790 | Input/Output: [(40 -55 95 15) -55]
Test Case: 791 | Input/Output: [(80 -4 41 -88) -88]
Test Case: 792 | Input/Output: [(84 -98 58 -78) -98]
Test Case: 793 | Input/Output: [(53 -50 21 71) -50]
Test Case: 794 | Input/Output: [(-46 6 -70 -71) -71]
Test Case: 795 | Input/Output: [(59 55 0 87) 0]
Test Case: 796 | Input/Output: [(51 -57 -79 27) -79]
Test Case: 797 | Input/Output: [(-40 -19 -40 -70) -70]
Test Case: 798 | Input/Output: [(4 -27 36 77) -27]
Test Case: 799 | Input/Output: [(-78 81 -86 15) -86]
Test Case: 800 | Input/Output: [(87 -98 -6 -49) -98]
Test Case: 801 | Input/Output: [(18 -62 82 87) -62]
Test Case: 802 | Input/Output: [(-87 -54 69 34) -87]
Test Case: 803 | Input/Output: [(21 -95 28 -16) -95]
Test Case: 804 | Input/Output: [(32 -95 23 88) -95]
Test Case: 805 | Input/Output: [(58 69 -33 97) -33]
Test Case: 806 | Input/Output: [(-69 -7 33 60) -69]
Test Case: 807 | Input/Output: [(-54 -2 -12 -4) -54]
Test Case: 808 | Input/Output: [(-61 77 -25 72) -61]
Test Case: 809 | Input/Output: [(74 21 -4 76) -4]
Test Case: 810 | Input/Output: [(-26 33 60 -36) -36]
Test Case: 811 | Input/Output: [(34 -95 42 81) -95]
Test Case: 812 | Input/Output: [(82 -99 100 -84) -99]
Test Case: 813 | Input/Output: [(54 -55 -88 -53) -88]
Test Case: 814 | Input/Output: [(-34 -72 6 -18) -72]
Test Case: 815 | Input/Output: [(19 45 -16 -42) -42]
Test Case: 816 | Input/Output: [(-59 28 -72 83) -72]
Test Case: 817 | Input/Output: [(93 87 -49 -4) -49]
Test Case: 818 | Input/Output: [(4 47 45 -41) -41]
Test Case: 819 | Input/Output: [(4 -2 -25 53) -25]
Test Case: 820 | Input/Output: [(-22 -98 21 59) -98]
Test Case: 821 | Input/Output: [(11 -80 -66 -72) -80]
Test Case: 822 | Input/Output: [(-29 -26 -2 9) -29]
Test Case: 823 | Input/Output: [(-2 -86 38 -55) -86]
Test Case: 824 | Input/Output: [(-40 59 19 25) -40]
Test Case: 825 | Input/Output: [(-28 -18 1 -20) -28]
Test Case: 826 | Input/Output: [(-56 -75 58 96) -75]
Test Case: 827 | Input/Output: [(-52 30 82 -75) -75]
Test Case: 828 | Input/Output: [(81 53 13 33) 13]
Test Case: 829 | Input/Output: [(54 -72 -82 36) -82]
Test Case: 830 | Input/Output: [(-12 81 45 -80) -80]
Test Case: 831 | Input/Output: [(3 58 -70 -70) -70]
Test Case: 832 | Input/Output: [(-56 -8 58 -79) -79]
Test Case: 833 | Input/Output: [(-52 -40 68 -69) -69]
Test Case: 834 | Input/Output: [(85 -93 83 16) -93]
Test Case: 835 | Input/Output: [(-5 65 -83 -84) -84]
Test Case: 836 | Input/Output: [(-73 -64 16 -9) -73]
Test Case: 837 | Input/Output: [(-33 -47 -52 -33) -52]
Test Case: 838 | Input/Output: [(-39 44 76 -17) -39]
Test Case: 839 | Input/Output: [(79 54 -53 38) -53]
Test Case: 840 | Input/Output: [(-77 87 88 -95) -95]
Test Case: 841 | Input/Output: [(35 68 -65 63) -65]
Test Case: 842 | Input/Output: [(-89 -69 -42 -90) -90]
Test Case: 843 | Input/Output: [(-41 35 64 29) -41]
Test Case: 844 | Input/Output: [(-1 62 -11 41) -11]
Test Case: 845 | Input/Output: [(-33 -15 -11 -82) -82]
Test Case: 846 | Input/Output: [(12 -83 16 -91) -91]
Test Case: 847 | Input/Output: [(78 87 -71 -33) -71]
Test Case: 848 | Input/Output: [(-79 -74 42 -60) -79]
Test Case: 849 | Input/Output: [(-19 -7 18 79) -19]
Test Case: 850 | Input/Output: [(-83 59 -39 62) -83]
Test Case: 851 | Input/Output: [(-28 83 40 -90) -90]
Test Case: 852 | Input/Output: [(-34 40 -15 61) -34]
Test Case: 853 | Input/Output: [(-78 37 75 37) -78]
Test Case: 854 | Input/Output: [(-89 -70 -92 -97) -97]
Test Case: 855 | Input/Output: [(21 -33 -24 -33) -33]
Test Case: 856 | Input/Output: [(-2 14 -89 -60) -89]
Test Case: 857 | Input/Output: [(-20 52 -81 94) -81]
Test Case: 858 | Input/Output: [(-78 17 -55 63) -78]
Test Case: 859 | Input/Output: [(-67 35 -36 -68) -68]
Test Case: 860 | Input/Output: [(41 -12 62 8) -12]
Test Case: 861 | Input/Output: [(-36 24 -2 50) -36]
Test Case: 862 | Input/Output: [(52 -10 -41 91) -41]
Test Case: 863 | Input/Output: [(80 93 -43 62) -43]
Test Case: 864 | Input/Output: [(45 -50 -66 -95) -95]
Test Case: 865 | Input/Output: [(-87 -1 -44 56) -87]
Test Case: 866 | Input/Output: [(-33 17 -47 44) -47]
Test Case: 867 | Input/Output: [(-17 61 -11 78) -17]
Test Case: 868 | Input/Output: [(99 -76 38 -69) -76]
Test Case: 869 | Input/Output: [(92 -9 -53 -60) -60]
Test Case: 870 | Input/Output: [(12 74 20 15) 12]
Test Case: 871 | Input/Output: [(-30 -44 -15 -34) -44]
Test Case: 872 | Input/Output: [(20 41 99 7) 7]
Test Case: 873 | Input/Output: [(-13 -94 -56 -30) -94]
Test Case: 874 | Input/Output: [(38 69 -96 -96) -96]
Test Case: 875 | Input/Output: [(-79 -92 -72 92) -92]
Test Case: 876 | Input/Output: [(65 -69 -25 -6) -69]
Test Case: 877 | Input/Output: [(65 -37 -66 -9) -66]
Test Case: 878 | Input/Output: [(-27 -50 89 -76) -76]
Test Case: 879 | Input/Output: [(-82 -45 -63 5) -82]
Test Case: 880 | Input/Output: [(40 90 81 77) 40]
Test Case: 881 | Input/Output: [(42 -11 32 -42) -42]
Test Case: 882 | Input/Output: [(-22 -59 -37 -42) -59]
Test Case: 883 | Input/Output: [(7 -34 -41 46) -41]
Test Case: 884 | Input/Output: [(98 -34 58 7) -34]
Test Case: 885 | Input/Output: [(66 29 -67 7) -67]
Test Case: 886 | Input/Output: [(-42 8 -100 -57) -100]
Test Case: 887 | Input/Output: [(-70 -42 90 -97) -97]
Test Case: 888 | Input/Output: [(36 -3 33 -83) -83]
Test Case: 889 | Input/Output: [(39 13 4 84) 4]
Test Case: 890 | Input/Output: [(99 -62 53 72) -62]
Test Case: 891 | Input/Output: [(-99 6 56 34) -99]
Test Case: 892 | Input/Output: [(-34 -82 41 24) -82]
Test Case: 893 | Input/Output: [(17 -41 -11 81) -41]
Test Case: 894 | Input/Output: [(-7 58 37 63) -7]
Test Case: 895 | Input/Output: [(-49 41 -50 -15) -50]
Test Case: 896 | Input/Output: [(49 -6 -70 -77) -77]
Test Case: 897 | Input/Output: [(49 66 13 -45) -45]
Test Case: 898 | Input/Output: [(-15 -65 45 77) -65]
Test Case: 899 | Input/Output: [(68 27 69 -12) -12]
Test Case: 900 | Input/Output: [(-71 33 67 66) -71]
Test Case: 901 | Input/Output: [(80 -75 45 -94) -94]
Test Case: 902 | Input/Output: [(-70 -11 30 -60) -70]
Test Case: 903 | Input/Output: [(13 -41 32 -71) -71]
Test Case: 904 | Input/Output: [(0 -84 90 -24) -84]
Test Case: 905 | Input/Output: [(-42 81 52 -13) -42]
Test Case: 906 | Input/Output: [(-37 76 86 -45) -45]
Test Case: 907 | Input/Output: [(-16 -74 19 48) -74]
Test Case: 908 | Input/Output: [(-53 5 73 3) -53]
Test Case: 909 | Input/Output: [(-50 -9 31 51) -50]
Test Case: 910 | Input/Output: [(-65 21 13 -52) -65]
Test Case: 911 | Input/Output: [(-11 15 49 -42) -42]
Test Case: 912 | Input/Output: [(-37 -76 -47 1) -76]
Test Case: 913 | Input/Output: [(-50 -37 92 -100) -100]
Test Case: 914 | Input/Output: [(35 -5 84 77) -5]
Test Case: 915 | Input/Output: [(-87 90 -15 75) -87]
Test Case: 916 | Input/Output: [(20 45 -44 -25) -44]
Test Case: 917 | Input/Output: [(-37 -2 -15 31) -37]
Test Case: 918 | Input/Output: [(-53 -99 96 -50) -99]
Test Case: 919 | Input/Output: [(-44 54 33 -84) -84]
Test Case: 920 | Input/Output: [(-31 -72 63 -23) -72]
Test Case: 921 | Input/Output: [(20 -90 93 -16) -90]
Test Case: 922 | Input/Output: [(28 -73 -32 3) -73]
Test Case: 923 | Input/Output: [(-100 -65 -60 -1) -100]
Test Case: 924 | Input/Output: [(-28 40 39 -26) -28]
Test Case: 925 | Input/Output: [(-67 10 21 94) -67]
Test Case: 926 | Input/Output: [(76 -82 87 2) -82]
Test Case: 927 | Input/Output: [(42 -69 20 -23) -69]
Test Case: 928 | Input/Output: [(32 4 -89 -98) -98]
Test Case: 929 | Input/Output: [(27 3 46 60) 3]
Test Case: 930 | Input/Output: [(75 -11 29 11) -11]
Test Case: 931 | Input/Output: [(9 77 -78 90) -78]
Test Case: 932 | Input/Output: [(4 -48 -93 78) -93]
Test Case: 933 | Input/Output: [(-99 86 -59 48) -99]
Test Case: 934 | Input/Output: [(-51 70 -29 94) -51]
Test Case: 935 | Input/Output: [(54 -44 -48 73) -48]
Test Case: 936 | Input/Output: [(98 -33 -87 17) -87]
Test Case: 937 | Input/Output: [(-29 44 -1 -29) -29]
Test Case: 938 | Input/Output: [(-55 99 -28 48) -55]
Test Case: 939 | Input/Output: [(75 -40 -25 60) -40]
Test Case: 940 | Input/Output: [(37 56 -96 10) -96]
Test Case: 941 | Input/Output: [(-87 49 -6 -19) -87]
Test Case: 942 | Input/Output: [(5 39 17 -33) -33]
Test Case: 943 | Input/Output: [(56 -59 68 74) -59]
Test Case: 944 | Input/Output: [(-25 -28 -75 -95) -95]
Test Case: 945 | Input/Output: [(74 85 50 83) 50]
Test Case: 946 | Input/Output: [(13 -54 -74 -84) -84]
Test Case: 947 | Input/Output: [(56 94 39 42) 39]
Test Case: 948 | Input/Output: [(-3 -9 34 88) -9]
Test Case: 949 | Input/Output: [(82 79 28 1) 1]
Test Case: 950 | Input/Output: [(-61 -97 25 -30) -97]
Test Case: 951 | Input/Output: [(30 61 68 92) 30]
Test Case: 952 | Input/Output: [(-73 78 -24 83) -73]
Test Case: 953 | Input/Output: [(-68 93 52 32) -68]
Test Case: 954 | Input/Output: [(-84 -65 -30 92) -84]
Test Case: 955 | Input/Output: [(63 82 76 20) 20]
Test Case: 956 | Input/Output: [(-1 -34 -79 -95) -95]
Test Case: 957 | Input/Output: [(-36 -12 -49 10) -49]
Test Case: 958 | Input/Output: [(2 46 -65 83) -65]
Test Case: 959 | Input/Output: [(-58 -5 18 -2) -58]
Test Case: 960 | Input/Output: [(-72 -89 -57 -71) -89]
Test Case: 961 | Input/Output: [(100 58 2 -37) -37]
Test Case: 962 | Input/Output: [(-33 -25 -69 71) -69]
Test Case: 963 | Input/Output: [(-86 -53 24 97) -86]
Test Case: 964 | Input/Output: [(44 39 -21 -95) -95]
Test Case: 965 | Input/Output: [(-78 81 58 -3) -78]
Test Case: 966 | Input/Output: [(-19 -50 44 13) -50]
Test Case: 967 | Input/Output: [(-37 69 3 20) -37]
Test Case: 968 | Input/Output: [(-66 70 11 70) -66]
Test Case: 969 | Input/Output: [(80 -51 -77 -49) -77]
Test Case: 970 | Input/Output: [(-75 78 84 -42) -75]
Test Case: 971 | Input/Output: [(-18 26 -39 -83) -83]
Test Case: 972 | Input/Output: [(76 -13 81 11) -13]
Test Case: 973 | Input/Output: [(-53 -34 1 -6) -53]
Test Case: 974 | Input/Output: [(75 35 -14 -66) -66]
Test Case: 975 | Input/Output: [(95 84 7 67) 7]
Test Case: 976 | Input/Output: [(100 -35 -83 1) -83]
Test Case: 977 | Input/Output: [(21 76 -57 -61) -61]
Test Case: 978 | Input/Output: [(-54 98 -76 99) -76]
Test Case: 979 | Input/Output: [(-29 83 22 -29) -29]
Test Case: 980 | Input/Output: [(-88 41 -30 40) -88]
Test Case: 981 | Input/Output: [(-80 93 -16 -48) -80]
Test Case: 982 | Input/Output: [(-53 87 -15 -27) -53]
Test Case: 983 | Input/Output: [(13 63 -42 98) -42]
Test Case: 984 | Input/Output: [(-17 -84 7 -88) -88]
Test Case: 985 | Input/Output: [(-84 -30 -23 -72) -84]
Test Case: 986 | Input/Output: [(-19 -22 -85 -11) -85]
Test Case: 987 | Input/Output: [(-11 -47 23 55) -47]
Test Case: 988 | Input/Output: [(-23 -18 26 57) -23]
Test Case: 989 | Input/Output: [(82 -61 92 -40) -61]
Test Case: 990 | Input/Output: [(18 -99 91 -31) -99]
Test Case: 991 | Input/Output: [(-77 11 -40 -21) -77]
Test Case: 992 | Input/Output: [(67 -96 -15 -54) -96]
Test Case: 993 | Input/Output: [(-82 -43 28 -57) -82]
Test Case: 994 | Input/Output: [(-50 88 68 -89) -89]
Test Case: 995 | Input/Output: [(-100 -89 1 -27) -100]
Test Case: 996 | Input/Output: [(11 20 36 -31) -31]
Test Case: 997 | Input/Output: [(-23 96 -21 16) -23]
Test Case: 998 | Input/Output: [(10 9 66 81) 9]
Test Case: 999 | Input/Output: [(89 34 59 65) 34]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 98f17fffbd710431b7ffe02918e462d48a2ebada
GitHub link = https://github.com/lspector/Clojush/commit/98f17fffbd710431b7ffe02918e462d48a2ebada
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x30b9728f clojush.problems.software.smallest$fn__7460@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@24b8a393]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
random-screen = false
random-seed = 3 -115 66 -9 -115 118 -27 -14 -99 -40 14 70 -26 50 -31 114
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[85 -40 85 85] -40] [[79 67 79 79] 67] [[61 61 -85 61] -85] [[69 69 69 83] 69] [[30 30 37 30] 30] [[28 22 28 28] 22] [[100 100 -51 100] -51] [[53 53 25 53] 25] [[-76 -76 -76 -44] -76] [[57 53 57 57] 53] [(-60 -60 -60 -60) -60] [(86 86 86 86) 86] [(86 86 86 86) 86] [(35 35 35 35) 35] [(11 11 11 11) 11] [(57 13 24 98) 13] [(75 79 45 85) 45] [(25 87 98 61) 25] [(100 72 64 23) 23] [(77 17 64 6) 6] [(90 54 5 29) 5] [(70 42 1 74) 1] [(34 93 99 44) 34] [(77 80 34 88) 34] [(31 61 32 77) 31] [(42 50 34 42) 34] [(38 12 75 29) 12] [(94 23 61 3) 3] [(5 1 63 51) 1] [(61 21 24 90) 21] [(96 12 5 6) 5] [(52 43 95 3) 3] [(31 71 1 83) 1] [(94 64 83 63) 63] [(45 27 25 51) 25] [(-10 -97 53 89) -97] [(-12 15 -91 3) -91] [(-97 87 -39 64) -97] [(-66 -85 -9 -37) -85] [(-81 -7 -72 56) -81] [(43 87 65 95) 43] [(-22 58 -74 22) -74] [(15 9 -75 44) -75] [(45 89 -44 34) -44] [(-8 65 3 -53) -53] [(91 43 -64 57) -64] [(-87 -86 94 -70) -87] [(-4 -5 10 93) -5] [(-57 -51 90 77) -57] [(-68 -25 40 -49) -68] [(-49 -2 95 51) -49] [(57 -61 86 7) -61] [(40 -55 -27 -86) -86] [(-30 49 28 62) -30] [(-9 -70 88 -33) -70] [(-69 -83 67 -12) -83] [(56 53 -44 -70) -70] [(-49 -59 29 35) -59] [(-34 -74 -92 93) -92] [(-66 2 -14 -67) -67] [(43 54 23 100) 23] [(-86 -32 -72 -77) -86] [(-14 -97 -98 -10) -98] [(19 -61 24 -2) -61] [(-53 19 -86 -41) -86] [(-74 -61 -87 -28) -87] [(51 77 -92 -73) -92] [(-29 33 4 -3) -29] [(-74 0 13 -27) -74] [(-82 87 61 -70) -82] [(90 20 -83 100) -83] [(-5 61 80 84) -5] [(8 -57 -12 36) -57] [(-3 -100 52 -56) -100] [(3 83 11 -33) -33] [(-69 -41 -21 -46) -69] [(90 -78 12 64) -78] [(73 -20 81 -3) -20] [(-69 14 100 -60) -69] [(-99 37 40 -17) -99] [(9 -48 -96 14) -96] [(-24 2 -24 -17) -24] [(61 -85 69 -54) -85] [(-59 -65 -87 2) -87] [(-54 95 -56 13) -56] [(12 -7 -100 14) -100] [(14 50 -19 -25) -25] [(-33 17 56 43) -33] [(-86 9 -63 71) -86] [(-93 33 22 -94) -94] [(-85 33 85 65) -85] [(-17 79 -46 45) -46] [(82 -20 -98 62) -98] [(-80 50 41 -63) -80] [(-58 36 30 9) -58])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 668
Test mean error for best: 0.66800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -40                 | Program output: 85                 
Correct output: 67                  | Program output: 79                 
Correct output: -85                 | Program output: -85                
Correct output: 69                  | Program output: 69                 
Correct output: 30                  | Program output: 37                 
Correct output: 22                  | Program output: 28                 
Correct output: -51                 | Program output: -51                
Correct output: 25                  | Program output: 25                 
Correct output: -76                 | Program output: -76                
Correct output: 53                  | Program output: 57                 
Correct output: -60                 | Program output: -60                
Correct output: 86                  | Program output: 86                 
Correct output: 86                  | Program output: 86                 
Correct output: 35                  | Program output: 35                 
Correct output: 11                  | Program output: 11                 
Correct output: 13                  | Program output: 24                 
Correct output: 45                  | Program output: 45                 
Correct output: 25                  | Program output: 98                 
Correct output: 23                  | Program output: 64                 
Correct output: 6                   | Program output: 64                 
Correct output: 5                   | Program output: 5                  
Correct output: 1                   | Program output: 1                  
Correct output: 34                  | Program output: 99                 
Correct output: 34                  | Program output: 34                 
Correct output: 31                  | Program output: 32                 
Correct output: 34                  | Program output: 34                 
Correct output: 12                  | Program output: 75                 
Correct output: 3                   | Program output: 61                 
Correct output: 1                   | Program output: 63                 
Correct output: 21                  | Program output: 24                 
Correct output: 5                   | Program output: 5                  
Correct output: 3                   | Program output: 95                 
Correct output: 1                   | Program output: 1                  
Correct output: 63                  | Program output: 83                 
Correct output: 25                  | Program output: 25                 
Correct output: -97                 | Program output: 53                 
Correct output: -91                 | Program output: -91                
Correct output: -97                 | Program output: -39                
Correct output: -85                 | Program output: -9                 
Correct output: -81                 | Program output: -72                
Correct output: 43                  | Program output: 65                 
Correct output: -74                 | Program output: -74                
Correct output: -75                 | Program output: -75                
Correct output: -44                 | Program output: -44                
Correct output: -53                 | Program output: 3                  
Correct output: -64                 | Program output: -64                
Correct output: -87                 | Program output: 94                 
Correct output: -5                  | Program output: 10                 
Correct output: -57                 | Program output: 90                 
Correct output: -68                 | Program output: 40                 
Correct output: -49                 | Program output: 95                 
Correct output: -61                 | Program output: 86                 
Correct output: -86                 | Program output: -27                
Correct output: -30                 | Program output: 28                 
Correct output: -70                 | Program output: 88                 
Correct output: -83                 | Program output: 67                 
Correct output: -70                 | Program output: -44                
Correct output: -59                 | Program output: 29                 
Correct output: -92                 | Program output: -92                
Correct output: -67                 | Program output: -14                
Correct output: 23                  | Program output: 23                 
Correct output: -86                 | Program output: -72                
Correct output: -98                 | Program output: -98                
Correct output: -61                 | Program output: 24                 
Correct output: -86                 | Program output: -86                
Correct output: -87                 | Program output: -87                
Correct output: -92                 | Program output: -92                
Correct output: -29                 | Program output: 4                  
Correct output: -74                 | Program output: 13                 
Correct output: -82                 | Program output: 61                 
Correct output: -83                 | Program output: -83                
Correct output: -5                  | Program output: 80                 
Correct output: -57                 | Program output: -12                
Correct output: -100                | Program output: 52                 
Correct output: -33                 | Program output: 11                 
Correct output: -69                 | Program output: -21                
Correct output: -78                 | Program output: 12                 
Correct output: -20                 | Program output: 81                 
Correct output: -69                 | Program output: 100                
Correct output: -99                 | Program output: 40                 
Correct output: -96                 | Program output: -96                
Correct output: -24                 | Program output: -24                
Correct output: -85                 | Program output: 69                 
Correct output: -87                 | Program output: -87                
Correct output: -56                 | Program output: -56                
Correct output: -100                | Program output: -100               
Correct output: -25                 | Program output: -19                
Correct output: -33                 | Program output: 56                 
Correct output: -86                 | Program output: -63                
Correct output: -94                 | Program output: 22                 
Correct output: -85                 | Program output: 85                 
Correct output: -46                 | Program output: -46                
Correct output: -98                 | Program output: -98                
Correct output: -80                 | Program output: 41                 
Correct output: -58                 | Program output: 30                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction 21} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*range} {:close 2, :instruction integer_dec} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_inc} {:close 2, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and})
Lexicase best program: (21 exec_pop (integer_pop) exec_swap (boolean_yankdup exec_rot (integer_gte boolean_and integer_shove boolean_dup_items boolean_rot) (boolean_dup_times exec_dup_times () print_boolean exec_do*range (integer_dec)) (integer_min boolean_shove integer_inc) in3) () in3 print_integer print_boolean integer_flush exec_do*range (exec_y (integer_dup_items integer_dec integer_mult exec_shove (exec_stackdepth boolean_empty boolean_and boolean_invert_second_then_and integer_lte boolean_invert_first_then_and integer_lte integer_eq integer_empty exec_yankdup exec_swap (boolean_invert_first_then_and integer_mult boolean_xor boolean_xor boolean_frominteger integer_dup_items) (boolean_not integer_flush boolean_shove) exec_do*while (boolean_invert_second_then_and) boolean_and))))
Lexicase best errors: [1 1 0 0 0 0 1 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 68
Percent parens: 0.221
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction 21} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*range} {:close 2, :instruction integer_dec} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_inc} {:close 2, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and})
Zero cases best program: (21 exec_pop (integer_pop) exec_swap (boolean_yankdup exec_rot (integer_gte boolean_and integer_shove boolean_dup_items boolean_rot) (boolean_dup_times exec_dup_times () print_boolean exec_do*range (integer_dec)) (integer_min boolean_shove integer_inc) in3) () in3 print_integer print_boolean integer_flush exec_do*range (exec_y (integer_dup_items integer_dec integer_mult exec_shove (exec_stackdepth boolean_empty boolean_and boolean_invert_second_then_and integer_lte boolean_invert_first_then_and integer_lte integer_eq integer_empty exec_yankdup exec_swap (boolean_invert_first_then_and integer_mult boolean_xor boolean_xor boolean_frominteger integer_dup_items) (boolean_not integer_flush boolean_shove) exec_do*while (boolean_invert_second_then_and) boolean_and))))
Zero cases best errors: [1 1 0 0 0 0 1 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 68
Percent parens: 0.221
--- Lexicase Population Statistics ---
Count of elite individuals by case: (3 4 4 4 5 6 3 5 3 5)
Population mean number of elite cases: 0.04
Count of perfect (error zero) individuals by case: (3 4 4 4 5 6 3 5 3 5)
Population mean number of perfect (error zero) cases: 0.04
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in2} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_pop} {:close 3, :instruction exec_while} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_inc} {:close 1, :instruction in3} {:close 0, :instruction -35} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_mod})
Best program: (in2 boolean_dup_items in1 in3 print_integer boolean_pop exec_while () boolean_flush boolean_frominteger integer_inc in3 -35 boolean_xor integer_eq in2 boolean_dup_times exec_do*range (integer_mod))
Errors: [1 1 0 0 0 0 1 0 1 0]
Total: 4
Mean: 0.4
Genome size: 18
Size: 21
Percent parens: 0.143
--- Population Statistics ---
Average total errors in population: 9.958
Median total errors in population: 10
Error averages by case: (0.997 0.996 0.996 0.996 0.995 0.994 0.997 0.995 0.997 0.995)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.04
Average program size in population (points): 68.907
Average percent parens in population: 0.282
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.254
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 464862
--- Timings ---
Current time: 1559314325503 milliseconds
Total Time:           2.4 seconds
Initialization:       0.1 seconds,  4.2%
Reproduction:         0.8 seconds, 34.5%
Fitness Testing:      1.5 seconds, 61.3%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 668
Test mean error for best: 0.66800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -40                 | Program output: 85                 
Correct output: 67                  | Program output: 79                 
Correct output: -85                 | Program output: -85                
Correct output: 69                  | Program output: 69                 
Correct output: 30                  | Program output: 37                 
Correct output: 22                  | Program output: 28                 
Correct output: -51                 | Program output: -51                
Correct output: 25                  | Program output: 25                 
Correct output: -76                 | Program output: -76                
Correct output: 53                  | Program output: 57                 
Correct output: -60                 | Program output: -60                
Correct output: 86                  | Program output: 86                 
Correct output: 86                  | Program output: 86                 
Correct output: 35                  | Program output: 35                 
Correct output: 11                  | Program output: 11                 
Correct output: 13                  | Program output: 24                 
Correct output: 45                  | Program output: 45                 
Correct output: 25                  | Program output: 98                 
Correct output: 23                  | Program output: 64                 
Correct output: 6                   | Program output: 64                 
Correct output: 5                   | Program output: 5                  
Correct output: 1                   | Program output: 1                  
Correct output: 34                  | Program output: 99                 
Correct output: 34                  | Program output: 34                 
Correct output: 31                  | Program output: 32                 
Correct output: 34                  | Program output: 34                 
Correct output: 12                  | Program output: 75                 
Correct output: 3                   | Program output: 61                 
Correct output: 1                   | Program output: 63                 
Correct output: 21                  | Program output: 24                 
Correct output: 5                   | Program output: 5                  
Correct output: 3                   | Program output: 95                 
Correct output: 1                   | Program output: 1                  
Correct output: 63                  | Program output: 83                 
Correct output: 25                  | Program output: 25                 
Correct output: -97                 | Program output: 53                 
Correct output: -91                 | Program output: -91                
Correct output: -97                 | Program output: -39                
Correct output: -85                 | Program output: -9                 
Correct output: -81                 | Program output: -72                
Correct output: 43                  | Program output: 65                 
Correct output: -74                 | Program output: -74                
Correct output: -75                 | Program output: -75                
Correct output: -44                 | Program output: -44                
Correct output: -53                 | Program output: 3                  
Correct output: -64                 | Program output: -64                
Correct output: -87                 | Program output: 94                 
Correct output: -5                  | Program output: 10                 
Correct output: -57                 | Program output: 90                 
Correct output: -68                 | Program output: 40                 
Correct output: -49                 | Program output: 95                 
Correct output: -61                 | Program output: 86                 
Correct output: -86                 | Program output: -27                
Correct output: -30                 | Program output: 28                 
Correct output: -70                 | Program output: 88                 
Correct output: -83                 | Program output: 67                 
Correct output: -70                 | Program output: -44                
Correct output: -59                 | Program output: 29                 
Correct output: -92                 | Program output: -92                
Correct output: -67                 | Program output: -14                
Correct output: 23                  | Program output: 23                 
Correct output: -86                 | Program output: -72                
Correct output: -98                 | Program output: -98                
Correct output: -61                 | Program output: 24                 
Correct output: -86                 | Program output: -86                
Correct output: -87                 | Program output: -87                
Correct output: -92                 | Program output: -92                
Correct output: -29                 | Program output: 4                  
Correct output: -74                 | Program output: 13                 
Correct output: -82                 | Program output: 61                 
Correct output: -83                 | Program output: -83                
Correct output: -5                  | Program output: 80                 
Correct output: -57                 | Program output: -12                
Correct output: -100                | Program output: 52                 
Correct output: -33                 | Program output: 11                 
Correct output: -69                 | Program output: -21                
Correct output: -78                 | Program output: 12                 
Correct output: -20                 | Program output: 81                 
Correct output: -69                 | Program output: 100                
Correct output: -99                 | Program output: 40                 
Correct output: -96                 | Program output: -96                
Correct output: -24                 | Program output: -24                
Correct output: -85                 | Program output: 69                 
Correct output: -87                 | Program output: -87                
Correct output: -56                 | Program output: -56                
Correct output: -100                | Program output: -100               
Correct output: -25                 | Program output: -19                
Correct output: -33                 | Program output: 56                 
Correct output: -86                 | Program output: -63                
Correct output: -94                 | Program output: 22                 
Correct output: -85                 | Program output: 85                 
Correct output: -46                 | Program output: -46                
Correct output: -98                 | Program output: -98                
Correct output: -80                 | Program output: 41                 
Correct output: -58                 | Program output: 30                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction 21} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*range} {:close 2, :instruction integer_dec} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_inc} {:close 2, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and})
Lexicase best program: (21 exec_pop (integer_pop) exec_swap (boolean_yankdup exec_rot (integer_gte boolean_and integer_shove boolean_dup_items boolean_rot) (boolean_dup_times exec_dup_times () print_boolean exec_do*range (integer_dec)) (integer_min boolean_shove integer_inc) in3) () in3 print_integer print_boolean integer_flush exec_do*range (exec_y (integer_dup_items integer_dec integer_mult exec_shove (exec_stackdepth boolean_empty boolean_and boolean_invert_second_then_and integer_lte boolean_invert_first_then_and integer_lte integer_eq integer_empty exec_yankdup exec_swap (boolean_invert_first_then_and integer_mult boolean_xor boolean_xor boolean_frominteger integer_dup_items) (boolean_not integer_flush boolean_shove) exec_do*while (boolean_invert_second_then_and) boolean_and))))
Lexicase best errors: [0 1 0 0 1 0 0 1 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 68
Percent parens: 0.221
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction 21} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*range} {:close 2, :instruction integer_dec} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_inc} {:close 2, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_and})
Zero cases best program: (21 exec_pop (integer_pop) exec_swap (boolean_yankdup exec_rot (integer_gte boolean_and integer_shove boolean_dup_items boolean_rot) (boolean_dup_times exec_dup_times () print_boolean exec_do*range (integer_dec)) (integer_min boolean_shove integer_inc) in3) () in3 print_integer print_boolean integer_flush exec_do*range (exec_y (integer_dup_items integer_dec integer_mult exec_shove (exec_stackdepth boolean_empty boolean_and boolean_invert_second_then_and integer_lte boolean_invert_first_then_and integer_lte integer_eq integer_empty exec_yankdup exec_swap (boolean_invert_first_then_and integer_mult boolean_xor boolean_xor boolean_frominteger integer_dup_items) (boolean_not integer_flush boolean_shove) exec_do*while (boolean_invert_second_then_and) boolean_and))))
Zero cases best errors: [0 1 0 0 1 0 0 1 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 68
Percent parens: 0.221
--- Lexicase Population Statistics ---
Count of elite individuals by case: (695 1000 500 500 190 886 885 190 500 190)
Population mean number of elite cases: 5.54
Count of perfect (error zero) individuals by case: (695 0 500 500 190 886 885 190 500 190)
Population mean number of perfect (error zero) cases: 4.54
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_empty} {:close 0, :instruction tagged_99} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_yankdup} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction tagged_986} {:close 1, :instruction exec_while} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 1, :instruction -85} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in4} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_s} {:close 2, :instruction exec_flush} {:close 1, :instruction integer_dec} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_add} {:close 1, :instruction integer_pop})
Best program: (boolean_pop integer_yank integer_gte boolean_dup_times integer_dup_items integer_sub exec_yank integer_dup_times boolean_eq boolean_stackdepth integer_gte integer_empty tagged_99 exec_s_when_autoconstructing (boolean_eq integer_yankdup boolean_xor integer_yankdup) (boolean_yank) (exec_empty boolean_dup_items tagged_986 exec_while () integer_div) boolean_rot integer_shove print_integer print_integer -85 boolean_and exec_noop exec_do*range (exec_dup (integer_min integer_max integer_dup_items in3 exec_stackdepth integer_yankdup in4 exec_pop () integer_dup integer_mod integer_add boolean_pop boolean_yank boolean_swap) integer_swap print_integer exec_do*while (exec_s (exec_flush) () (integer_dec) exec_shove () exec_k (exec_y_when_autoconstructing (exec_y (integer_pop exec_yankdup boolean_dup_times print_boolean exec_noop exec_flush integer_fromboolean integer_add) integer_pop)) ())))
Errors: [0 1 0 0 1 0 0 1 0 1]
Total: 4
Mean: 0.4
Genome size: 66
Size: 83
Percent parens: 0.205
--- Population Statistics ---
Average total errors in population: 5.464
Median total errors in population: 9/2
Error averages by case: (0.305 1.0 0.5 0.5 0.81 0.114 0.115 0.81 0.5 0.81)
Error minima by case: (0 1 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.401
Average program size in population (points): 47.081
Average percent parens in population: 0.195
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.497
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 153
Genome diversity (% unique genomes):	 0.44
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 172
Syntactic diversity (% unique Push programs):	 0.411
Total error diversity:				 0.005
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.037
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 916374
--- Timings ---
Current time: 1559314328195 milliseconds
Total Time:           5.1 seconds
Initialization:       0.1 seconds,  2.0%
Reproduction:         2.5 seconds, 50.3%
Fitness Testing:      2.0 seconds, 40.5%
Report:               0.4 seconds,  7.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 646
Test mean error for best: 0.64600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -40                 | Program output: -40                
Correct output: 67                  | Program output: 67                 
Correct output: -85                 | Program output: 61                 
Correct output: 69                  | Program output: 69                 
Correct output: 30                  | Program output: 30                 
Correct output: 22                  | Program output: 22                 
Correct output: -51                 | Program output: 100                
Correct output: 25                  | Program output: 53                 
Correct output: -76                 | Program output: -76                
Correct output: 53                  | Program output: 53                 
Correct output: -60                 | Program output: -60                
Correct output: 86                  | Program output: 86                 
Correct output: 86                  | Program output: 86                 
Correct output: 35                  | Program output: 35                 
Correct output: 11                  | Program output: 11                 
Correct output: 13                  | Program output: 13                 
Correct output: 45                  | Program output: 79                 
Correct output: 25                  | Program output: 87                 
Correct output: 23                  | Program output: 72                 
Correct output: 6                   | Program output: 17                 
Correct output: 5                   | Program output: 54                 
Correct output: 1                   | Program output: 42                 
Correct output: 34                  | Program output: 93                 
Correct output: 34                  | Program output: 80                 
Correct output: 31                  | Program output: 61                 
Correct output: 34                  | Program output: 50                 
Correct output: 12                  | Program output: 12                 
Correct output: 3                   | Program output: 23                 
Correct output: 1                   | Program output: 1                  
Correct output: 21                  | Program output: 21                 
Correct output: 5                   | Program output: 12                 
Correct output: 3                   | Program output: 43                 
Correct output: 1                   | Program output: 71                 
Correct output: 63                  | Program output: 64                 
Correct output: 25                  | Program output: 27                 
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: 15                 
Correct output: -97                 | Program output: 87                 
Correct output: -85                 | Program output: -85                
Correct output: -81                 | Program output: -7                 
Correct output: 43                  | Program output: 87                 
Correct output: -74                 | Program output: 58                 
Correct output: -75                 | Program output: 9                  
Correct output: -44                 | Program output: 89                 
Correct output: -53                 | Program output: 65                 
Correct output: -64                 | Program output: 43                 
Correct output: -87                 | Program output: -86                
Correct output: -5                  | Program output: -5                 
Correct output: -57                 | Program output: -51                
Correct output: -68                 | Program output: -25                
Correct output: -49                 | Program output: -2                 
Correct output: -61                 | Program output: -61                
Correct output: -86                 | Program output: -55                
Correct output: -30                 | Program output: 49                 
Correct output: -70                 | Program output: -70                
Correct output: -83                 | Program output: -83                
Correct output: -70                 | Program output: 53                 
Correct output: -59                 | Program output: -59                
Correct output: -92                 | Program output: -74                
Correct output: -67                 | Program output: 2                  
Correct output: 23                  | Program output: 54                 
Correct output: -86                 | Program output: -32                
Correct output: -98                 | Program output: -97                
Correct output: -61                 | Program output: -61                
Correct output: -86                 | Program output: 19                 
Correct output: -87                 | Program output: -61                
Correct output: -92                 | Program output: 77                 
Correct output: -29                 | Program output: 33                 
Correct output: -74                 | Program output: 0                  
Correct output: -82                 | Program output: 87                 
Correct output: -83                 | Program output: 20                 
Correct output: -5                  | Program output: 61                 
Correct output: -57                 | Program output: -57                
Correct output: -100                | Program output: -100               
Correct output: -33                 | Program output: 83                 
Correct output: -69                 | Program output: -41                
Correct output: -78                 | Program output: -78                
Correct output: -20                 | Program output: -20                
Correct output: -69                 | Program output: 14                 
Correct output: -99                 | Program output: 37                 
Correct output: -96                 | Program output: -48                
Correct output: -24                 | Program output: 2                  
Correct output: -85                 | Program output: -85                
Correct output: -87                 | Program output: -65                
Correct output: -56                 | Program output: 95                 
Correct output: -100                | Program output: -7                 
Correct output: -25                 | Program output: 50                 
Correct output: -33                 | Program output: 17                 
Correct output: -86                 | Program output: 9                  
Correct output: -94                 | Program output: 33                 
Correct output: -85                 | Program output: 33                 
Correct output: -46                 | Program output: 79                 
Correct output: -98                 | Program output: -20                
Correct output: -80                 | Program output: 50                 
Correct output: -58                 | Program output: 36                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mult} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction integer_eq})
Lexicase best program: (integer_mult boolean_stackdepth exec_yank exec_noop in2 integer_shove print_integer integer_swap exec_empty exec_stackdepth exec_eq boolean_rot integer_min integer_dup_times boolean_not integer_max boolean_dup_items integer_max integer_eq)
Lexicase best errors: [1 1 0 0 1 0 1 1 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 20
Percent parens: 0.050
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mult} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction integer_eq})
Zero cases best program: (integer_mult boolean_stackdepth exec_yank exec_noop in2 integer_shove print_integer integer_swap exec_empty exec_stackdepth exec_eq boolean_rot integer_min integer_dup_times boolean_not integer_max boolean_dup_items integer_max integer_eq)
Zero cases best errors: [1 1 0 0 1 0 1 1 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 20
Percent parens: 0.050
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 501 394 395 1000 896 501 1 1000 900)
Population mean number of elite cases: 6.59
Count of perfect (error zero) individuals by case: (0 501 394 395 0 896 501 1 0 900)
Population mean number of perfect (error zero) cases: 3.59
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction in2} {:close 1, :instruction integer_gte} {:close 0, :instruction tag_boolean_844} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_y} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_add} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_shove})
Best program: (integer_max in2 integer_gte tag_boolean_844 integer_yank boolean_dup_times exec_k_when_autoconstructing () (print_integer exec_do*while (exec_y (exec_yankdup exec_flush boolean_yank in3 integer_inc exec_y_when_autoconstructing (exec_y (boolean_not boolean_invert_first_then_and integer_add integer_rot exec_shove ()))))))
Errors: [1 1 0 0 1 0 1 1 1 0]
Total: 6
Mean: 0.6
Genome size: 22
Size: 30
Percent parens: 0.267
--- Population Statistics ---
Average total errors in population: 6.412
Median total errors in population: 6
Error averages by case: (1.0 0.499 0.606 0.605 1.0 0.104 0.499 0.999 1.0 0.1)
Error minima by case: (1 0 0 0 1 0 0 0 1 0)
Average genome size in population (length): 38.13
Average program size in population (points): 49.726
Average percent parens in population: 0.203
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 2.989
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 114
Genome diversity (% unique genomes):	 0.58
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 140
Syntactic diversity (% unique Push programs):	 0.547
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.039
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1343942
--- Timings ---
Current time: 1559314330969 milliseconds
Total Time:           8.0 seconds
Initialization:       0.1 seconds,  1.3%
Reproduction:         4.6 seconds, 57.1%
Fitness Testing:      2.6 seconds, 32.0%
Report:               0.8 seconds,  9.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 646
Test mean error for best: 0.64600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -40                 | Program output: -40                
Correct output: 67                  | Program output: 67                 
Correct output: -85                 | Program output: 61                 
Correct output: 69                  | Program output: 69                 
Correct output: 30                  | Program output: 30                 
Correct output: 22                  | Program output: 22                 
Correct output: -51                 | Program output: 100                
Correct output: 25                  | Program output: 53                 
Correct output: -76                 | Program output: -76                
Correct output: 53                  | Program output: 53                 
Correct output: -60                 | Program output: -60                
Correct output: 86                  | Program output: 86                 
Correct output: 86                  | Program output: 86                 
Correct output: 35                  | Program output: 35                 
Correct output: 11                  | Program output: 11                 
Correct output: 13                  | Program output: 13                 
Correct output: 45                  | Program output: 79                 
Correct output: 25                  | Program output: 87                 
Correct output: 23                  | Program output: 72                 
Correct output: 6                   | Program output: 17                 
Correct output: 5                   | Program output: 54                 
Correct output: 1                   | Program output: 42                 
Correct output: 34                  | Program output: 93                 
Correct output: 34                  | Program output: 80                 
Correct output: 31                  | Program output: 61                 
Correct output: 34                  | Program output: 50                 
Correct output: 12                  | Program output: 12                 
Correct output: 3                   | Program output: 23                 
Correct output: 1                   | Program output: 1                  
Correct output: 21                  | Program output: 21                 
Correct output: 5                   | Program output: 12                 
Correct output: 3                   | Program output: 43                 
Correct output: 1                   | Program output: 71                 
Correct output: 63                  | Program output: 64                 
Correct output: 25                  | Program output: 27                 
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: 15                 
Correct output: -97                 | Program output: 87                 
Correct output: -85                 | Program output: -85                
Correct output: -81                 | Program output: -7                 
Correct output: 43                  | Program output: 87                 
Correct output: -74                 | Program output: 58                 
Correct output: -75                 | Program output: 9                  
Correct output: -44                 | Program output: 89                 
Correct output: -53                 | Program output: 65                 
Correct output: -64                 | Program output: 43                 
Correct output: -87                 | Program output: -86                
Correct output: -5                  | Program output: -5                 
Correct output: -57                 | Program output: -51                
Correct output: -68                 | Program output: -25                
Correct output: -49                 | Program output: -2                 
Correct output: -61                 | Program output: -61                
Correct output: -86                 | Program output: -55                
Correct output: -30                 | Program output: 49                 
Correct output: -70                 | Program output: -70                
Correct output: -83                 | Program output: -83                
Correct output: -70                 | Program output: 53                 
Correct output: -59                 | Program output: -59                
Correct output: -92                 | Program output: -74                
Correct output: -67                 | Program output: 2                  
Correct output: 23                  | Program output: 54                 
Correct output: -86                 | Program output: -32                
Correct output: -98                 | Program output: -97                
Correct output: -61                 | Program output: -61                
Correct output: -86                 | Program output: 19                 
Correct output: -87                 | Program output: -61                
Correct output: -92                 | Program output: 77                 
Correct output: -29                 | Program output: 33                 
Correct output: -74                 | Program output: 0                  
Correct output: -82                 | Program output: 87                 
Correct output: -83                 | Program output: 20                 
Correct output: -5                  | Program output: 61                 
Correct output: -57                 | Program output: -57                
Correct output: -100                | Program output: -100               
Correct output: -33                 | Program output: 83                 
Correct output: -69                 | Program output: -41                
Correct output: -78                 | Program output: -78                
Correct output: -20                 | Program output: -20                
Correct output: -69                 | Program output: 14                 
Correct output: -99                 | Program output: 37                 
Correct output: -96                 | Program output: -48                
Correct output: -24                 | Program output: 2                  
Correct output: -85                 | Program output: -85                
Correct output: -87                 | Program output: -65                
Correct output: -56                 | Program output: 95                 
Correct output: -100                | Program output: -7                 
Correct output: -25                 | Program output: 50                 
Correct output: -33                 | Program output: 17                 
Correct output: -86                 | Program output: 9                  
Correct output: -94                 | Program output: 33                 
Correct output: -85                 | Program output: 33                 
Correct output: -46                 | Program output: 79                 
Correct output: -98                 | Program output: -20                
Correct output: -80                 | Program output: 50                 
Correct output: -58                 | Program output: 36                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in2} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_pop} {:close 3, :instruction exec_while} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_inc} {:close 1, :instruction in3} {:close 0, :instruction -35} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_mod})
Lexicase best program: (in2 boolean_dup_items in1 in3 print_integer boolean_pop exec_while () boolean_flush boolean_frominteger integer_inc in3 -35 boolean_xor integer_eq in2 boolean_dup_times exec_do*range (integer_mod))
Lexicase best errors: [1 0 0 0 1 1 1 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 21
Percent parens: 0.143
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in2} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_pop} {:close 3, :instruction exec_while} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_inc} {:close 1, :instruction in3} {:close 0, :instruction -35} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_mod})
Zero cases best program: (in2 boolean_dup_items in1 in3 print_integer boolean_pop exec_while () boolean_flush boolean_frominteger integer_inc in3 -35 boolean_xor integer_eq in2 boolean_dup_times exec_do*range (integer_mod))
Zero cases best errors: [1 0 0 0 1 1 1 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 21
Percent parens: 0.143
--- Lexicase Population Statistics ---
Count of elite individuals by case: (397 316 501 317 402 185 185 397 904 906)
Population mean number of elite cases: 4.51
Count of perfect (error zero) individuals by case: (397 316 501 317 402 185 185 397 904 906)
Population mean number of perfect (error zero) cases: 4.51
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mult} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_noop} {:close 1, :instruction in2} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_max} {:close 0, :instruction integer_eq})
Best program: (integer_mult boolean_stackdepth exec_yank exec_noop in2 integer_shove print_integer exec_yankdup exec_empty exec_stackdepth exec_eq boolean_rot integer_min integer_dup_times boolean_not integer_max boolean_dup_items integer_max integer_eq)
Errors: [0 1 1 1 0 1 1 0 0 0]
Total: 5
Mean: 0.5
Genome size: 19
Size: 20
Percent parens: 0.050
--- Population Statistics ---
Average total errors in population: 5.49
Median total errors in population: 5
Error averages by case: (0.603 0.684 0.499 0.683 0.598 0.815 0.815 0.603 0.096 0.094)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 32.847
Average program size in population (points): 41.896
Average percent parens in population: 0.173
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.58
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 141
Genome diversity (% unique genomes):	 0.567
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 151
Syntactic diversity (% unique Push programs):	 0.527
Total error diversity:				 0.004
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.041
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 1699560
--- Timings ---
Current time: 1559314333367 milliseconds
Total Time:          10.5 seconds
Initialization:       0.1 seconds,  1.0%
Reproduction:         6.4 seconds, 61.0%
Fitness Testing:      3.0 seconds, 28.8%
Report:               1.0 seconds,  9.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 629
Test mean error for best: 0.62900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -40                 | Program output: 85                 
Correct output: 67                  | Program output: 79                 
Correct output: -85                 | Program output: 61                 
Correct output: 69                  | Program output: 69                 
Correct output: 30                  | Program output: 30                 
Correct output: 22                  | Program output: 28                 
Correct output: -51                 | Program output: 100                
Correct output: 25                  | Program output: 53                 
Correct output: -76                 | Program output: -76                
Correct output: 53                  | Program output: 57                 
Correct output: -60                 | Program output: -60                
Correct output: 86                  | Program output: 86                 
Correct output: 86                  | Program output: 86                 
Correct output: 35                  | Program output: 35                 
Correct output: 11                  | Program output: 11                 
Correct output: 13                  | Program output: 57                 
Correct output: 45                  | Program output: 75                 
Correct output: 25                  | Program output: 25                 
Correct output: 23                  | Program output: 100                
Correct output: 6                   | Program output: 77                 
Correct output: 5                   | Program output: 90                 
Correct output: 1                   | Program output: 70                 
Correct output: 34                  | Program output: 34                 
Correct output: 34                  | Program output: 77                 
Correct output: 31                  | Program output: 31                 
Correct output: 34                  | Program output: 42                 
Correct output: 12                  | Program output: 38                 
Correct output: 3                   | Program output: 94                 
Correct output: 1                   | Program output: 5                  
Correct output: 21                  | Program output: 61                 
Correct output: 5                   | Program output: 96                 
Correct output: 3                   | Program output: 52                 
Correct output: 1                   | Program output: 31                 
Correct output: 63                  | Program output: 94                 
Correct output: 25                  | Program output: 45                 
Correct output: -97                 | Program output: -10                
Correct output: -91                 | Program output: -12                
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -66                
Correct output: -81                 | Program output: -81                
Correct output: 43                  | Program output: 43                 
Correct output: -74                 | Program output: -22                
Correct output: -75                 | Program output: 15                 
Correct output: -44                 | Program output: 45                 
Correct output: -53                 | Program output: -8                 
Correct output: -64                 | Program output: 91                 
Correct output: -87                 | Program output: -87                
Correct output: -5                  | Program output: -4                 
Correct output: -57                 | Program output: -57                
Correct output: -68                 | Program output: -68                
Correct output: -49                 | Program output: -49                
Correct output: -61                 | Program output: 57                 
Correct output: -86                 | Program output: 40                 
Correct output: -30                 | Program output: -30                
Correct output: -70                 | Program output: -9                 
Correct output: -83                 | Program output: -69                
Correct output: -70                 | Program output: 56                 
Correct output: -59                 | Program output: -49                
Correct output: -92                 | Program output: -34                
Correct output: -67                 | Program output: -66                
Correct output: 23                  | Program output: 43                 
Correct output: -86                 | Program output: -86                
Correct output: -98                 | Program output: -14                
Correct output: -61                 | Program output: 19                 
Correct output: -86                 | Program output: -53                
Correct output: -87                 | Program output: -74                
Correct output: -92                 | Program output: 51                 
Correct output: -29                 | Program output: -29                
Correct output: -74                 | Program output: -74                
Correct output: -82                 | Program output: -82                
Correct output: -83                 | Program output: 90                 
Correct output: -5                  | Program output: -5                 
Correct output: -57                 | Program output: 8                  
Correct output: -100                | Program output: -3                 
Correct output: -33                 | Program output: 3                  
Correct output: -69                 | Program output: -69                
Correct output: -78                 | Program output: 90                 
Correct output: -20                 | Program output: 73                 
Correct output: -69                 | Program output: -69                
Correct output: -99                 | Program output: -99                
Correct output: -96                 | Program output: 9                  
Correct output: -24                 | Program output: -24                
Correct output: -85                 | Program output: 61                 
Correct output: -87                 | Program output: -59                
Correct output: -56                 | Program output: -54                
Correct output: -100                | Program output: 12                 
Correct output: -25                 | Program output: 14                 
Correct output: -33                 | Program output: -33                
Correct output: -86                 | Program output: -86                
Correct output: -94                 | Program output: -93                
Correct output: -85                 | Program output: -85                
Correct output: -46                 | Program output: -17                
Correct output: -98                 | Program output: 82                 
Correct output: -80                 | Program output: -80                
Correct output: -58                 | Program output: -58                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mult} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction integer_eq})
Lexicase best program: (integer_mult boolean_stackdepth exec_yank exec_noop boolean_eq in1 print_integer exec_yankdup exec_empty exec_stackdepth exec_eq boolean_rot integer_min integer_dup_times boolean_not integer_max boolean_dup_items integer_max integer_eq)
Lexicase best errors: [1 0 1 0 0 0 1 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 20
Percent parens: 0.050
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mult} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction integer_eq})
Zero cases best program: (integer_mult boolean_stackdepth exec_yank exec_noop boolean_eq in1 print_integer exec_yankdup exec_empty exec_stackdepth exec_eq boolean_rot integer_min integer_dup_times boolean_not integer_max boolean_dup_items integer_max integer_eq)
Zero cases best errors: [1 0 1 0 0 0 1 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 20
Percent parens: 0.050
--- Lexicase Population Statistics ---
Count of elite individuals by case: (353 642 283 286 287 287 284 926 284 640)
Population mean number of elite cases: 4.27
Count of perfect (error zero) individuals by case: (353 642 283 286 287 287 284 926 284 640)
Population mean number of perfect (error zero) cases: 4.27
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mult} {:close 2, :instruction boolean_stackdepth} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction integer_eq})
Best program: (integer_mult boolean_stackdepth exec_yank exec_noop in2 in1 print_integer exec_yankdup exec_empty exec_stackdepth exec_eq boolean_rot integer_min integer_dup_times boolean_not integer_max boolean_dup_items integer_max integer_eq)
Errors: [1 0 1 0 0 0 1 0 1 0]
Total: 4
Mean: 0.4
Genome size: 19
Size: 20
Percent parens: 0.050
--- Population Statistics ---
Average total errors in population: 5.728
Median total errors in population: 6
Error averages by case: (0.647 0.358 0.717 0.714 0.713 0.713 0.716 0.074 0.716 0.36)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 28.755
Average program size in population (points): 35.992
Average percent parens in population: 0.158
Minimum age in population: 4.0
Maximum age in population: 7.75
Average age in population: 6.11225
Median age in population: 6.25
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 178
Genome diversity (% unique genomes):	 0.576
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 200
Syntactic diversity (% unique Push programs):	 0.519
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.033
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 2002380
--- Timings ---
Current time: 1559314335977 milliseconds
Total Time:          13.1 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:         8.5 seconds, 64.9%
Fitness Testing:      3.3 seconds, 25.6%
Report:               1.1 seconds,  8.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 668
Test mean error for best: 0.66800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -40                 | Program output: 85                 
Correct output: 67                  | Program output: 79                 
Correct output: -85                 | Program output: -85                
Correct output: 69                  | Program output: 69                 
Correct output: 30                  | Program output: 37                 
Correct output: 22                  | Program output: 28                 
Correct output: -51                 | Program output: -51                
Correct output: 25                  | Program output: 25                 
Correct output: -76                 | Program output: -76                
Correct output: 53                  | Program output: 57                 
Correct output: -60                 | Program output: -60                
Correct output: 86                  | Program output: 86                 
Correct output: 86                  | Program output: 86                 
Correct output: 35                  | Program output: 35                 
Correct output: 11                  | Program output: 11                 
Correct output: 13                  | Program output: 24                 
Correct output: 45                  | Program output: 45                 
Correct output: 25                  | Program output: 98                 
Correct output: 23                  | Program output: 64                 
Correct output: 6                   | Program output: 64                 
Correct output: 5                   | Program output: 5                  
Correct output: 1                   | Program output: 1                  
Correct output: 34                  | Program output: 99                 
Correct output: 34                  | Program output: 34                 
Correct output: 31                  | Program output: 32                 
Correct output: 34                  | Program output: 34                 
Correct output: 12                  | Program output: 75                 
Correct output: 3                   | Program output: 61                 
Correct output: 1                   | Program output: 63                 
Correct output: 21                  | Program output: 24                 
Correct output: 5                   | Program output: 5                  
Correct output: 3                   | Program output: 95                 
Correct output: 1                   | Program output: 1                  
Correct output: 63                  | Program output: 83                 
Correct output: 25                  | Program output: 25                 
Correct output: -97                 | Program output: 53                 
Correct output: -91                 | Program output: -91                
Correct output: -97                 | Program output: -39                
Correct output: -85                 | Program output: -9                 
Correct output: -81                 | Program output: -72                
Correct output: 43                  | Program output: 65                 
Correct output: -74                 | Program output: -74                
Correct output: -75                 | Program output: -75                
Correct output: -44                 | Program output: -44                
Correct output: -53                 | Program output: 3                  
Correct output: -64                 | Program output: -64                
Correct output: -87                 | Program output: 94                 
Correct output: -5                  | Program output: 10                 
Correct output: -57                 | Program output: 90                 
Correct output: -68                 | Program output: 40                 
Correct output: -49                 | Program output: 95                 
Correct output: -61                 | Program output: 86                 
Correct output: -86                 | Program output: -27                
Correct output: -30                 | Program output: 28                 
Correct output: -70                 | Program output: 88                 
Correct output: -83                 | Program output: 67                 
Correct output: -70                 | Program output: -44                
Correct output: -59                 | Program output: 29                 
Correct output: -92                 | Program output: -92                
Correct output: -67                 | Program output: -14                
Correct output: 23                  | Program output: 23                 
Correct output: -86                 | Program output: -72                
Correct output: -98                 | Program output: -98                
Correct output: -61                 | Program output: 24                 
Correct output: -86                 | Program output: -86                
Correct output: -87                 | Program output: -87                
Correct output: -92                 | Program output: -92                
Correct output: -29                 | Program output: 4                  
Correct output: -74                 | Program output: 13                 
Correct output: -82                 | Program output: 61                 
Correct output: -83                 | Program output: -83                
Correct output: -5                  | Program output: 80                 
Correct output: -57                 | Program output: -12                
Correct output: -100                | Program output: 52                 
Correct output: -33                 | Program output: 11                 
Correct output: -69                 | Program output: -21                
Correct output: -78                 | Program output: 12                 
Correct output: -20                 | Program output: 81                 
Correct output: -69                 | Program output: 100                
Correct output: -99                 | Program output: 40                 
Correct output: -96                 | Program output: -96                
Correct output: -24                 | Program output: -24                
Correct output: -85                 | Program output: 69                 
Correct output: -87                 | Program output: -87                
Correct output: -56                 | Program output: -56                
Correct output: -100                | Program output: -100               
Correct output: -25                 | Program output: -19                
Correct output: -33                 | Program output: 56                 
Correct output: -86                 | Program output: -63                
Correct output: -94                 | Program output: 22                 
Correct output: -85                 | Program output: 85                 
Correct output: -46                 | Program output: -46                
Correct output: -98                 | Program output: -98                
Correct output: -80                 | Program output: 41                 
Correct output: -58                 | Program output: 30                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction 21} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_max} {:close 0, :instruction in2} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*range} {:close 2, :instruction integer_dec} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_eq} {:close 3, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_lte})
Lexicase best program: (21 exec_pop (integer_pop) integer_max in2 boolean_and integer_shove boolean_dup_items boolean_rot boolean_dup_times exec_dup_times () print_boolean exec_do*range (integer_dec) integer_min boolean_shove boolean_eq in3 in3 print_integer print_boolean integer_flush exec_do*range (exec_y (integer_dup_items integer_dec integer_mult exec_shove (exec_stackdepth boolean_empty boolean_and boolean_invert_second_then_and integer_lte boolean_invert_first_then_and integer_lte))))
Lexicase best errors: [1 0 0 1 1 0 1 1 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 42
Percent parens: 0.167
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction 21} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_max} {:close 0, :instruction in2} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*range} {:close 2, :instruction integer_dec} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_eq} {:close 3, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_lte})
Zero cases best program: (21 exec_pop (integer_pop) integer_max in2 boolean_and integer_shove boolean_dup_items boolean_rot boolean_dup_times exec_dup_times () print_boolean exec_do*range (integer_dec) integer_min boolean_shove boolean_eq in3 in3 print_integer print_boolean integer_flush exec_do*range (exec_y (integer_dup_items integer_dec integer_mult exec_shove (exec_stackdepth boolean_empty boolean_and boolean_invert_second_then_and integer_lte boolean_invert_first_then_and integer_lte))))
Zero cases best errors: [1 0 0 1 1 0 1 1 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 42
Percent parens: 0.167
--- Lexicase Population Statistics ---
Count of elite individuals by case: (471 291 292 473 1000 291 165 167 473 165)
Population mean number of elite cases: 3.79
Count of perfect (error zero) individuals by case: (471 291 292 473 0 291 165 167 473 165)
Population mean number of perfect (error zero) cases: 2.79
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in2} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_pop} {:close 3, :instruction exec_while} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_inc} {:close 1, :instruction in3} {:close 0, :instruction -35} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_eq} {:close 1, :instruction in2} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_mod})
Best program: (in2 boolean_dup_items in1 in3 print_integer boolean_pop exec_while () boolean_flush boolean_frominteger integer_inc in3 -35 boolean_xor integer_eq in2 boolean_dup_times exec_do*range (integer_mod))
Errors: [1 0 0 1 1 0 1 1 1 1]
Total: 7
Mean: 0.7
Genome size: 18
Size: 21
Percent parens: 0.143
--- Population Statistics ---
Average total errors in population: 7.212
Median total errors in population: 7
Error averages by case: (0.529 0.709 0.708 0.527 1.0 0.709 0.835 0.833 0.527 0.835)
Error minima by case: (0 0 0 0 1 0 0 0 0 0)
Average genome size in population (length): 25.336
Average program size in population (points): 30.677
Average percent parens in population: 0.134
Minimum age in population: 5.0
Maximum age in population: 9.4375
Average age in population: 7.65025
Median age in population: 7.75
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 224
Genome diversity (% unique genomes):	 0.556
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 270
Syntactic diversity (% unique Push programs):	 0.504
Total error diversity:				 0.004
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.035
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 2302837
--- Timings ---
Current time: 1559314338818 milliseconds
Total Time:          15.9 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:        10.8 seconds, 68.0%
Fitness Testing:      3.7 seconds, 23.1%
Report:               1.3 seconds,  8.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 668
Test mean error for best: 0.66800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -40                 | Program output: 85                 
Correct output: 67                  | Program output: 79                 
Correct output: -85                 | Program output: -85                
Correct output: 69                  | Program output: 69                 
Correct output: 30                  | Program output: 37                 
Correct output: 22                  | Program output: 28                 
Correct output: -51                 | Program output: -51                
Correct output: 25                  | Program output: 25                 
Correct output: -76                 | Program output: -76                
Correct output: 53                  | Program output: 57                 
Correct output: -60                 | Program output: -60                
Correct output: 86                  | Program output: 86                 
Correct output: 86                  | Program output: 86                 
Correct output: 35                  | Program output: 35                 
Correct output: 11                  | Program output: 11                 
Correct output: 13                  | Program output: 24                 
Correct output: 45                  | Program output: 45                 
Correct output: 25                  | Program output: 98                 
Correct output: 23                  | Program output: 64                 
Correct output: 6                   | Program output: 64                 
Correct output: 5                   | Program output: 5                  
Correct output: 1                   | Program output: 1                  
Correct output: 34                  | Program output: 99                 
Correct output: 34                  | Program output: 34                 
Correct output: 31                  | Program output: 32                 
Correct output: 34                  | Program output: 34                 
Correct output: 12                  | Program output: 75                 
Correct output: 3                   | Program output: 61                 
Correct output: 1                   | Program output: 63                 
Correct output: 21                  | Program output: 24                 
Correct output: 5                   | Program output: 5                  
Correct output: 3                   | Program output: 95                 
Correct output: 1                   | Program output: 1                  
Correct output: 63                  | Program output: 83                 
Correct output: 25                  | Program output: 25                 
Correct output: -97                 | Program output: 53                 
Correct output: -91                 | Program output: -91                
Correct output: -97                 | Program output: -39                
Correct output: -85                 | Program output: -9                 
Correct output: -81                 | Program output: -72                
Correct output: 43                  | Program output: 65                 
Correct output: -74                 | Program output: -74                
Correct output: -75                 | Program output: -75                
Correct output: -44                 | Program output: -44                
Correct output: -53                 | Program output: 3                  
Correct output: -64                 | Program output: -64                
Correct output: -87                 | Program output: 94                 
Correct output: -5                  | Program output: 10                 
Correct output: -57                 | Program output: 90                 
Correct output: -68                 | Program output: 40                 
Correct output: -49                 | Program output: 95                 
Correct output: -61                 | Program output: 86                 
Correct output: -86                 | Program output: -27                
Correct output: -30                 | Program output: 28                 
Correct output: -70                 | Program output: 88                 
Correct output: -83                 | Program output: 67                 
Correct output: -70                 | Program output: -44                
Correct output: -59                 | Program output: 29                 
Correct output: -92                 | Program output: -92                
Correct output: -67                 | Program output: -14                
Correct output: 23                  | Program output: 23                 
Correct output: -86                 | Program output: -72                
Correct output: -98                 | Program output: -98                
Correct output: -61                 | Program output: 24                 
Correct output: -86                 | Program output: -86                
Correct output: -87                 | Program output: -87                
Correct output: -92                 | Program output: -92                
Correct output: -29                 | Program output: 4                  
Correct output: -74                 | Program output: 13                 
Correct output: -82                 | Program output: 61                 
Correct output: -83                 | Program output: -83                
Correct output: -5                  | Program output: 80                 
Correct output: -57                 | Program output: -12                
Correct output: -100                | Program output: 52                 
Correct output: -33                 | Program output: 11                 
Correct output: -69                 | Program output: -21                
Correct output: -78                 | Program output: 12                 
Correct output: -20                 | Program output: 81                 
Correct output: -69                 | Program output: 100                
Correct output: -99                 | Program output: 40                 
Correct output: -96                 | Program output: -96                
Correct output: -24                 | Program output: -24                
Correct output: -85                 | Program output: 69                 
Correct output: -87                 | Program output: -87                
Correct output: -56                 | Program output: -56                
Correct output: -100                | Program output: -100               
Correct output: -25                 | Program output: -19                
Correct output: -33                 | Program output: 56                 
Correct output: -86                 | Program output: -63                
Correct output: -94                 | Program output: 22                 
Correct output: -85                 | Program output: 85                 
Correct output: -46                 | Program output: -46                
Correct output: -98                 | Program output: -98                
Correct output: -80                 | Program output: 41                 
Correct output: -58                 | Program output: 30                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction exec_flush} {:close 1, :instruction in1} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction -69} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_eq})
Lexicase best program: (integer_dup_items boolean_not in3 print_integer exec_stackdepth exec_s () (exec_s (exec_flush in1) (exec_y_when_autoconstructing (-69 exec_dup (integer_gt boolean_dup_times exec_do*times (boolean_and exec_eq)))) ()) ())
Lexicase best errors: [0 1 0 0 1 1 1 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 27
Percent parens: 0.370
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction exec_flush} {:close 1, :instruction in1} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction -69} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_eq})
Zero cases best program: (integer_dup_items boolean_not in3 print_integer exec_stackdepth exec_s () (exec_s (exec_flush in1) (exec_y_when_autoconstructing (-69 exec_dup (integer_gt boolean_dup_times exec_do*times (boolean_and exec_eq)))) ()) ())
Zero cases best errors: [0 1 0 0 1 1 1 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 27
Percent parens: 0.370
--- Lexicase Population Statistics ---
Count of elite individuals by case: (297 378 294 294 254 253 1 927 329 295)
Population mean number of elite cases: 3.32
Count of perfect (error zero) individuals by case: (297 378 294 294 254 253 1 927 329 295)
Population mean number of perfect (error zero) cases: 3.32
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in2} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_pop} {:close 3, :instruction exec_while} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_inc} {:close 1, :instruction in3} {:close 0, :instruction -35} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_mod})
Best program: (in2 boolean_dup_items in1 in3 print_integer boolean_pop exec_while () boolean_flush boolean_frominteger integer_inc in3 -35 boolean_xor integer_eq in2 boolean_dup_times exec_do*range (integer_mod))
Errors: [0 1 0 0 1 1 1 0 1 0]
Total: 5
Mean: 0.5
Genome size: 18
Size: 21
Percent parens: 0.143
--- Population Statistics ---
Average total errors in population: 6.678
Median total errors in population: 6
Error averages by case: (0.703 0.622 0.706 0.706 0.746 0.747 0.999 0.073 0.671 0.705)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 25.735
Average program size in population (points): 32.027
Average percent parens in population: 0.162
Minimum age in population: 6.0
Maximum age in population: 10.78125
Average age in population: 9.059875
Median age in population: 9.125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 89
Genome diversity (% unique genomes):	 0.616
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 111
Syntactic diversity (% unique Push programs):	 0.559
Total error diversity:				 0.006
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.039
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 2589918
--- Timings ---
Current time: 1559314341303 milliseconds
Total Time:          18.4 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:        12.8 seconds, 69.6%
Fitness Testing:      4.0 seconds, 21.7%
Report:               1.5 seconds,  8.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 525
Test mean error for best: 0.52500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -40                 | Program output: -40                
Correct output: 67                  | Program output: 67                 
Correct output: -85                 | Program output: 61                 
Correct output: 69                  | Program output: 69                 
Correct output: 30                  | Program output: 30                 
Correct output: 22                  | Program output: 22                 
Correct output: -51                 | Program output: 100                
Correct output: 25                  | Program output: 53                 
Correct output: -76                 | Program output: -76                
Correct output: 53                  | Program output: 53                 
Correct output: -60                 | Program output: -60                
Correct output: 86                  | Program output: 86                 
Correct output: 86                  | Program output: 86                 
Correct output: 35                  | Program output: 35                 
Correct output: 11                  | Program output: 11                 
Correct output: 13                  | Program output: 13                 
Correct output: 45                  | Program output: 79                 
Correct output: 25                  | Program output: 87                 
Correct output: 23                  | Program output: 72                 
Correct output: 6                   | Program output: 17                 
Correct output: 5                   | Program output: 54                 
Correct output: 1                   | Program output: 42                 
Correct output: 34                  | Program output: 93                 
Correct output: 34                  | Program output: 80                 
Correct output: 31                  | Program output: 61                 
Correct output: 34                  | Program output: 50                 
Correct output: 12                  | Program output: 12                 
Correct output: 3                   | Program output: 23                 
Correct output: 1                   | Program output: 1                  
Correct output: 21                  | Program output: 21                 
Correct output: 5                   | Program output: 12                 
Correct output: 3                   | Program output: 43                 
Correct output: 1                   | Program output: 71                 
Correct output: 63                  | Program output: 64                 
Correct output: 25                  | Program output: 27                 
Correct output: -97                 | Program output: -10                
Correct output: -91                 | Program output: -12                
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -66                
Correct output: -81                 | Program output: -81                
Correct output: 43                  | Program output: 87                 
Correct output: -74                 | Program output: -22                
Correct output: -75                 | Program output: 9                  
Correct output: -44                 | Program output: 89                 
Correct output: -53                 | Program output: -8                 
Correct output: -64                 | Program output: 43                 
Correct output: -87                 | Program output: -87                
Correct output: -5                  | Program output: -4                 
Correct output: -57                 | Program output: -57                
Correct output: -68                 | Program output: -68                
Correct output: -49                 | Program output: -49                
Correct output: -61                 | Program output: -61                
Correct output: -86                 | Program output: -55                
Correct output: -30                 | Program output: -30                
Correct output: -70                 | Program output: -9                 
Correct output: -83                 | Program output: -69                
Correct output: -70                 | Program output: 53                 
Correct output: -59                 | Program output: -49                
Correct output: -92                 | Program output: -34                
Correct output: -67                 | Program output: -66                
Correct output: 23                  | Program output: 54                 
Correct output: -86                 | Program output: -86                
Correct output: -98                 | Program output: -14                
Correct output: -61                 | Program output: -61                
Correct output: -86                 | Program output: -53                
Correct output: -87                 | Program output: -74                
Correct output: -92                 | Program output: 77                 
Correct output: -29                 | Program output: -29                
Correct output: -74                 | Program output: -74                
Correct output: -82                 | Program output: -82                
Correct output: -83                 | Program output: 20                 
Correct output: -5                  | Program output: -5                 
Correct output: -57                 | Program output: -57                
Correct output: -100                | Program output: -3                 
Correct output: -33                 | Program output: 83                 
Correct output: -69                 | Program output: -69                
Correct output: -78                 | Program output: -78                
Correct output: -20                 | Program output: -20                
Correct output: -69                 | Program output: -69                
Correct output: -99                 | Program output: -99                
Correct output: -96                 | Program output: -48                
Correct output: -24                 | Program output: -24                
Correct output: -85                 | Program output: -85                
Correct output: -87                 | Program output: -59                
Correct output: -56                 | Program output: -54                
Correct output: -100                | Program output: -7                 
Correct output: -25                 | Program output: 50                 
Correct output: -33                 | Program output: -33                
Correct output: -86                 | Program output: -86                
Correct output: -94                 | Program output: -93                
Correct output: -85                 | Program output: -85                
Correct output: -46                 | Program output: -17                
Correct output: -98                 | Program output: -20                
Correct output: -80                 | Program output: -80                
Correct output: -58                 | Program output: -58                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mult} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_when} {:close 0, :instruction integer_flush})
Lexicase best program: (integer_mult boolean_stackdepth exec_yank exec_noop in2 in1 integer_dup integer_shove print_integer exec_yankdup exec_empty exec_stackdepth exec_eq boolean_rot integer_min exec_s () (boolean_empty boolean_swap exec_yank exec_pop (integer_mod exec_when () integer_flush)) ())
Lexicase best errors: [1 0 1 0 1 0 0 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 29
Percent parens: 0.207
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mult} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_when} {:close 0, :instruction integer_flush})
Zero cases best program: (integer_mult boolean_stackdepth exec_yank exec_noop in2 in1 integer_dup integer_shove print_integer exec_yankdup exec_empty exec_stackdepth exec_eq boolean_rot integer_min exec_s () (boolean_empty boolean_swap exec_yank exec_pop (integer_mod exec_when () integer_flush)) ())
Zero cases best errors: [1 0 1 0 1 0 0 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 29
Percent parens: 0.207
--- Lexicase Population Statistics ---
Count of elite individuals by case: (461 273 343 360 461 273 360 553 360 360)
Population mean number of elite cases: 3.80
Count of perfect (error zero) individuals by case: (461 273 343 360 461 273 360 553 360 360)
Population mean number of perfect (error zero) cases: 3.80
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mult} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_when} {:close 0, :instruction integer_flush})
Best program: (integer_mult boolean_stackdepth exec_yank exec_noop in2 in1 integer_dup integer_shove print_integer exec_yankdup exec_empty exec_stackdepth exec_eq boolean_rot integer_min exec_s () (boolean_not boolean_swap exec_yank exec_pop (integer_mod exec_when () integer_flush)) ())
Errors: [1 0 1 0 1 0 0 1 0 0]
Total: 4
Mean: 0.4
Genome size: 23
Size: 29
Percent parens: 0.207
--- Population Statistics ---
Average total errors in population: 6.196
Median total errors in population: 6
Error averages by case: (0.539 0.727 0.657 0.64 0.539 0.727 0.64 0.447 0.64 0.64)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 28.408
Average program size in population (points): 35.988
Average percent parens in population: 0.188
Minimum age in population: 8.0
Maximum age in population: 12.390625
Average age in population: 10.571515625
Median age in population: 10.625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 105
Genome diversity (% unique genomes):	 0.546
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 112
Syntactic diversity (% unique Push programs):	 0.492
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.047
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 2902115
--- Timings ---
Current time: 1559314343865 milliseconds
Total Time:          20.9 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        14.8 seconds, 70.7%
Fitness Testing:      4.4 seconds, 20.8%
Report:               1.7 seconds,  8.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 533
Test mean error for best: 0.53300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -40                 | Program output: 85                 
Correct output: 67                  | Program output: 79                 
Correct output: -85                 | Program output: -85                
Correct output: 69                  | Program output: 69                 
Correct output: 30                  | Program output: 37                 
Correct output: 22                  | Program output: 28                 
Correct output: -51                 | Program output: -51                
Correct output: 25                  | Program output: 25                 
Correct output: -76                 | Program output: -76                
Correct output: 53                  | Program output: 57                 
Correct output: -60                 | Program output: -60                
Correct output: 86                  | Program output: 86                 
Correct output: 86                  | Program output: 86                 
Correct output: 35                  | Program output: 35                 
Correct output: 11                  | Program output: 11                 
Correct output: 13                  | Program output: 24                 
Correct output: 45                  | Program output: 45                 
Correct output: 25                  | Program output: 98                 
Correct output: 23                  | Program output: 64                 
Correct output: 6                   | Program output: 64                 
Correct output: 5                   | Program output: 5                  
Correct output: 1                   | Program output: 1                  
Correct output: 34                  | Program output: 99                 
Correct output: 34                  | Program output: 34                 
Correct output: 31                  | Program output: 32                 
Correct output: 34                  | Program output: 34                 
Correct output: 12                  | Program output: 75                 
Correct output: 3                   | Program output: 61                 
Correct output: 1                   | Program output: 63                 
Correct output: 21                  | Program output: 24                 
Correct output: 5                   | Program output: 5                  
Correct output: 3                   | Program output: 95                 
Correct output: 1                   | Program output: 1                  
Correct output: 63                  | Program output: 83                 
Correct output: 25                  | Program output: 25                 
Correct output: -97                 | Program output: -10                
Correct output: -91                 | Program output: -12                
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -66                
Correct output: -81                 | Program output: -81                
Correct output: 43                  | Program output: 65                 
Correct output: -74                 | Program output: -22                
Correct output: -75                 | Program output: -75                
Correct output: -44                 | Program output: -44                
Correct output: -53                 | Program output: -8                 
Correct output: -64                 | Program output: -64                
Correct output: -87                 | Program output: -87                
Correct output: -5                  | Program output: -4                 
Correct output: -57                 | Program output: -57                
Correct output: -68                 | Program output: -68                
Correct output: -49                 | Program output: -49                
Correct output: -61                 | Program output: 86                 
Correct output: -86                 | Program output: -27                
Correct output: -30                 | Program output: -30                
Correct output: -70                 | Program output: -9                 
Correct output: -83                 | Program output: -69                
Correct output: -70                 | Program output: -44                
Correct output: -59                 | Program output: -49                
Correct output: -92                 | Program output: -34                
Correct output: -67                 | Program output: -66                
Correct output: 23                  | Program output: 23                 
Correct output: -86                 | Program output: -86                
Correct output: -98                 | Program output: -14                
Correct output: -61                 | Program output: 24                 
Correct output: -86                 | Program output: -53                
Correct output: -87                 | Program output: -74                
Correct output: -92                 | Program output: -92                
Correct output: -29                 | Program output: -29                
Correct output: -74                 | Program output: -74                
Correct output: -82                 | Program output: -82                
Correct output: -83                 | Program output: -83                
Correct output: -5                  | Program output: -5                 
Correct output: -57                 | Program output: -12                
Correct output: -100                | Program output: -3                 
Correct output: -33                 | Program output: 11                 
Correct output: -69                 | Program output: -69                
Correct output: -78                 | Program output: 12                 
Correct output: -20                 | Program output: 81                 
Correct output: -69                 | Program output: -69                
Correct output: -99                 | Program output: -99                
Correct output: -96                 | Program output: -96                
Correct output: -24                 | Program output: -24                
Correct output: -85                 | Program output: 69                 
Correct output: -87                 | Program output: -59                
Correct output: -56                 | Program output: -54                
Correct output: -100                | Program output: -100               
Correct output: -25                 | Program output: -19                
Correct output: -33                 | Program output: -33                
Correct output: -86                 | Program output: -86                
Correct output: -94                 | Program output: -93                
Correct output: -85                 | Program output: -85                
Correct output: -46                 | Program output: -17                
Correct output: -98                 | Program output: -98                
Correct output: -80                 | Program output: -80                
Correct output: -58                 | Program output: -58                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mult} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_when} {:close 0, :instruction integer_flush})
Lexicase best program: (integer_mult boolean_stackdepth exec_yank exec_noop in2 in1 integer_dup integer_shove integer_dup integer_shove print_integer exec_yankdup exec_empty exec_stackdepth exec_eq boolean_rot integer_min exec_s () (boolean_not boolean_swap exec_yank exec_pop (integer_mod exec_when () integer_flush)) ())
Lexicase best errors: [0 0 1 1 0 1 1 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 31
Percent parens: 0.194
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mult} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_when} {:close 0, :instruction integer_flush})
Zero cases best program: (integer_mult boolean_stackdepth exec_yank exec_noop in2 in1 integer_dup integer_shove integer_dup integer_shove print_integer exec_yankdup exec_empty exec_stackdepth exec_eq boolean_rot integer_min exec_s () (boolean_not boolean_swap exec_yank exec_pop (integer_mod exec_when () integer_flush)) ())
Zero cases best errors: [0 0 1 1 0 1 1 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 31
Percent parens: 0.194
--- Lexicase Population Statistics ---
Count of elite individuals by case: (554 555 1 372 167 224 224 399 554 553)
Population mean number of elite cases: 3.60
Count of perfect (error zero) individuals by case: (554 555 1 372 167 224 224 399 554 553)
Population mean number of perfect (error zero) cases: 3.60
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 1, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_when} {:close 0, :instruction integer_flush})
Best program: (integer_dup_items boolean_not in3 in1 integer_dup integer_shove print_integer exec_yankdup exec_empty exec_stackdepth exec_eq boolean_rot integer_min exec_s () (boolean_not boolean_swap exec_yank exec_pop (integer_mod exec_when () integer_flush)) ())
Errors: [0 0 1 0 1 1 0 1 0 0]
Total: 4
Mean: 0.4
Genome size: 21
Size: 27
Percent parens: 0.222
--- Population Statistics ---
Average total errors in population: 6.397
Median total errors in population: 5
Error averages by case: (0.446 0.445 0.999 0.628 0.833 0.776 0.776 0.601 0.446 0.447)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 23.217
Average program size in population (points): 29.08
Average percent parens in population: 0.187
Minimum age in population: 9.1875
Maximum age in population: 14.03125
Average age in population: 12.27234375
Median age in population: 12.359375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 190
Genome diversity (% unique genomes):	 0.54
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 216
Syntactic diversity (% unique Push programs):	 0.478
Total error diversity:				 0.007
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.041
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 3165941
--- Timings ---
Current time: 1559314346787 milliseconds
Total Time:          23.9 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        17.2 seconds, 72.2%
Fitness Testing:      4.7 seconds, 19.5%
Report:               1.9 seconds,  7.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 519
Test mean error for best: 0.51900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -40                 | Program output: -40                
Correct output: 67                  | Program output: 67                 
Correct output: -85                 | Program output: 61                 
Correct output: 69                  | Program output: 69                 
Correct output: 30                  | Program output: 30                 
Correct output: 22                  | Program output: 22                 
Correct output: -51                 | Program output: 100                
Correct output: 25                  | Program output: 53                 
Correct output: -76                 | Program output: -76                
Correct output: 53                  | Program output: 53                 
Correct output: -60                 | Program output: -60                
Correct output: 86                  | Program output: 86                 
Correct output: 86                  | Program output: 86                 
Correct output: 35                  | Program output: 35                 
Correct output: 11                  | Program output: 11                 
Correct output: 13                  | Program output: 13                 
Correct output: 45                  | Program output: 79                 
Correct output: 25                  | Program output: 87                 
Correct output: 23                  | Program output: 72                 
Correct output: 6                   | Program output: 17                 
Correct output: 5                   | Program output: 54                 
Correct output: 1                   | Program output: 42                 
Correct output: 34                  | Program output: 93                 
Correct output: 34                  | Program output: 80                 
Correct output: 31                  | Program output: 61                 
Correct output: 34                  | Program output: 50                 
Correct output: 12                  | Program output: 12                 
Correct output: 3                   | Program output: 23                 
Correct output: 1                   | Program output: 1                  
Correct output: 21                  | Program output: 21                 
Correct output: 5                   | Program output: 12                 
Correct output: 3                   | Program output: 43                 
Correct output: 1                   | Program output: 71                 
Correct output: 63                  | Program output: 64                 
Correct output: 25                  | Program output: 27                 
Correct output: -97                 | Program output: -10                
Correct output: -91                 | Program output: -12                
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -66                
Correct output: -81                 | Program output: -81                
Correct output: 43                  | Program output: 87                 
Correct output: -74                 | Program output: -22                
Correct output: -75                 | Program output: 9                  
Correct output: -44                 | Program output: 89                 
Correct output: -53                 | Program output: -8                 
Correct output: -64                 | Program output: 43                 
Correct output: -87                 | Program output: -87                
Correct output: -5                  | Program output: -4                 
Correct output: -57                 | Program output: -57                
Correct output: -68                 | Program output: -68                
Correct output: -49                 | Program output: -49                
Correct output: -61                 | Program output: -61                
Correct output: -86                 | Program output: -55                
Correct output: -30                 | Program output: -30                
Correct output: -70                 | Program output: -9                 
Correct output: -83                 | Program output: -69                
Correct output: -70                 | Program output: 53                 
Correct output: -59                 | Program output: -49                
Correct output: -92                 | Program output: -34                
Correct output: -67                 | Program output: -66                
Correct output: 23                  | Program output: 54                 
Correct output: -86                 | Program output: -86                
Correct output: -98                 | Program output: -14                
Correct output: -61                 | Program output: -61                
Correct output: -86                 | Program output: -53                
Correct output: -87                 | Program output: -74                
Correct output: -92                 | Program output: 77                 
Correct output: -29                 | Program output: -29                
Correct output: -74                 | Program output: -74                
Correct output: -82                 | Program output: -82                
Correct output: -83                 | Program output: 20                 
Correct output: -5                  | Program output: -5                 
Correct output: -57                 | Program output: -57                
Correct output: -100                | Program output: -3                 
Correct output: -33                 | Program output: 83                 
Correct output: -69                 | Program output: -69                
Correct output: -78                 | Program output: -78                
Correct output: -20                 | Program output: -20                
Correct output: -69                 | Program output: -69                
Correct output: -99                 | Program output: -99                
Correct output: -96                 | Program output: -48                
Correct output: -24                 | Program output: -24                
Correct output: -85                 | Program output: -85                
Correct output: -87                 | Program output: -59                
Correct output: -56                 | Program output: -54                
Correct output: -100                | Program output: -7                 
Correct output: -25                 | Program output: 50                 
Correct output: -33                 | Program output: -33                
Correct output: -86                 | Program output: -86                
Correct output: -94                 | Program output: -93                
Correct output: -85                 | Program output: -85                
Correct output: -46                 | Program output: -17                
Correct output: -98                 | Program output: -20                
Correct output: -80                 | Program output: -80                
Correct output: -58                 | Program output: -58                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mult} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_when} {:close 0, :instruction integer_flush})
Lexicase best program: (integer_mult boolean_stackdepth exec_yank exec_noop in2 in1 integer_dup integer_shove integer_dup exec_swap (print_integer exec_yankdup) (exec_empty) exec_stackdepth exec_eq boolean_rot integer_min exec_s () (boolean_not boolean_swap exec_yank exec_pop (integer_mod exec_when () integer_flush)) ())
Lexicase best errors: [0 0 1 0 0 0 1 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 33
Percent parens: 0.242
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mult} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_when} {:close 0, :instruction integer_flush})
Zero cases best program: (integer_mult boolean_stackdepth exec_yank exec_noop in2 in1 integer_dup integer_shove integer_dup exec_swap (print_integer exec_yankdup) (exec_empty) exec_stackdepth exec_eq boolean_rot integer_min exec_s () (boolean_not boolean_swap exec_yank exec_pop (integer_mod exec_when () integer_flush)) ())
Zero cases best errors: [0 0 1 0 0 0 1 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 33
Percent parens: 0.242
--- Lexicase Population Statistics ---
Count of elite individuals by case: (10 693 116 693 10 953 9 693 9 693)
Population mean number of elite cases: 3.88
Count of perfect (error zero) individuals by case: (10 693 116 693 10 953 9 693 9 693)
Population mean number of perfect (error zero) cases: 3.88
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mult} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_when} {:close 0, :instruction integer_flush})
Best program: (integer_mult boolean_stackdepth exec_yank exec_noop in2 boolean_stackdepth exec_yank exec_noop in2 in1 integer_dup integer_shove integer_dup integer_shove print_integer exec_yankdup exec_empty exec_stackdepth exec_eq boolean_rot integer_min exec_s () (boolean_not boolean_swap exec_yank exec_pop (integer_mod exec_when () integer_flush)) ())
Errors: [0 0 1 0 0 0 1 0 1 0]
Total: 3
Mean: 0.3
Genome size: 29
Size: 35
Percent parens: 0.171
--- Population Statistics ---
Average total errors in population: 6.121
Median total errors in population: 5
Error averages by case: (0.99 0.307 0.884 0.307 0.99 0.047 0.991 0.307 0.991 0.307)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 22.496
Average program size in population (points): 28.81
Average percent parens in population: 0.218
Minimum age in population: 11.25
Maximum age in population: 15.2734375
Average age in population: 13.55209765625
Median age in population: 13.5390625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 251
Genome diversity (% unique genomes):	 0.373
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 265
Syntactic diversity (% unique Push programs):	 0.334
Total error diversity:				 0.007
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.036
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 3476779
--- Timings ---
Current time: 1559314349555 milliseconds
Total Time:          26.6 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        19.5 seconds, 73.1%
Fitness Testing:      5.0 seconds, 18.9%
Report:               2.0 seconds,  7.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 525
Test mean error for best: 0.52500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -40                 | Program output: -40                
Correct output: 67                  | Program output: 67                 
Correct output: -85                 | Program output: 61                 
Correct output: 69                  | Program output: 69                 
Correct output: 30                  | Program output: 30                 
Correct output: 22                  | Program output: 22                 
Correct output: -51                 | Program output: 100                
Correct output: 25                  | Program output: 53                 
Correct output: -76                 | Program output: -76                
Correct output: 53                  | Program output: 53                 
Correct output: -60                 | Program output: -60                
Correct output: 86                  | Program output: 86                 
Correct output: 86                  | Program output: 86                 
Correct output: 35                  | Program output: 35                 
Correct output: 11                  | Program output: 11                 
Correct output: 13                  | Program output: 13                 
Correct output: 45                  | Program output: 79                 
Correct output: 25                  | Program output: 87                 
Correct output: 23                  | Program output: 72                 
Correct output: 6                   | Program output: 17                 
Correct output: 5                   | Program output: 54                 
Correct output: 1                   | Program output: 42                 
Correct output: 34                  | Program output: 93                 
Correct output: 34                  | Program output: 80                 
Correct output: 31                  | Program output: 61                 
Correct output: 34                  | Program output: 50                 
Correct output: 12                  | Program output: 12                 
Correct output: 3                   | Program output: 23                 
Correct output: 1                   | Program output: 1                  
Correct output: 21                  | Program output: 21                 
Correct output: 5                   | Program output: 12                 
Correct output: 3                   | Program output: 43                 
Correct output: 1                   | Program output: 71                 
Correct output: 63                  | Program output: 64                 
Correct output: 25                  | Program output: 27                 
Correct output: -97                 | Program output: -10                
Correct output: -91                 | Program output: -12                
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -66                
Correct output: -81                 | Program output: -81                
Correct output: 43                  | Program output: 87                 
Correct output: -74                 | Program output: -22                
Correct output: -75                 | Program output: 9                  
Correct output: -44                 | Program output: 89                 
Correct output: -53                 | Program output: -8                 
Correct output: -64                 | Program output: 43                 
Correct output: -87                 | Program output: -87                
Correct output: -5                  | Program output: -4                 
Correct output: -57                 | Program output: -57                
Correct output: -68                 | Program output: -68                
Correct output: -49                 | Program output: -49                
Correct output: -61                 | Program output: -61                
Correct output: -86                 | Program output: -55                
Correct output: -30                 | Program output: -30                
Correct output: -70                 | Program output: -9                 
Correct output: -83                 | Program output: -69                
Correct output: -70                 | Program output: 53                 
Correct output: -59                 | Program output: -49                
Correct output: -92                 | Program output: -34                
Correct output: -67                 | Program output: -66                
Correct output: 23                  | Program output: 54                 
Correct output: -86                 | Program output: -86                
Correct output: -98                 | Program output: -14                
Correct output: -61                 | Program output: -61                
Correct output: -86                 | Program output: -53                
Correct output: -87                 | Program output: -74                
Correct output: -92                 | Program output: 77                 
Correct output: -29                 | Program output: -29                
Correct output: -74                 | Program output: -74                
Correct output: -82                 | Program output: -82                
Correct output: -83                 | Program output: 20                 
Correct output: -5                  | Program output: -5                 
Correct output: -57                 | Program output: -57                
Correct output: -100                | Program output: -3                 
Correct output: -33                 | Program output: 83                 
Correct output: -69                 | Program output: -69                
Correct output: -78                 | Program output: -78                
Correct output: -20                 | Program output: -20                
Correct output: -69                 | Program output: -69                
Correct output: -99                 | Program output: -99                
Correct output: -96                 | Program output: -48                
Correct output: -24                 | Program output: -24                
Correct output: -85                 | Program output: -85                
Correct output: -87                 | Program output: -59                
Correct output: -56                 | Program output: -54                
Correct output: -100                | Program output: -7                 
Correct output: -25                 | Program output: 50                 
Correct output: -33                 | Program output: -33                
Correct output: -86                 | Program output: -86                
Correct output: -94                 | Program output: -93                
Correct output: -85                 | Program output: -85                
Correct output: -46                 | Program output: -17                
Correct output: -98                 | Program output: -20                
Correct output: -80                 | Program output: -80                
Correct output: -58                 | Program output: -58                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mult} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_when} {:close 0, :instruction integer_flush})
Lexicase best program: (integer_mult boolean_stackdepth exec_yank exec_noop in2 in1 integer_dup integer_shove integer_dup exec_swap (print_integer exec_yankdup) (exec_empty) exec_stackdepth exec_eq boolean_rot integer_min exec_s () (boolean_not boolean_swap exec_yank exec_pop (integer_mod exec_when () integer_flush)) ())
Lexicase best errors: [0 1 0 0 1 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 33
Percent parens: 0.242
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mult} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_when} {:close 0, :instruction integer_flush})
Zero cases best program: (integer_mult boolean_stackdepth exec_yank exec_noop in2 in1 integer_dup integer_shove integer_dup exec_swap (print_integer exec_yankdup) (exec_empty) exec_stackdepth exec_eq boolean_rot integer_min exec_s () (boolean_not boolean_swap exec_yank exec_pop (integer_mod exec_when () integer_flush)) ())
Zero cases best errors: [0 1 0 0 1 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 33
Percent parens: 0.242
--- Lexicase Population Statistics ---
Count of elite individuals by case: (936 1000 691 936 299 637 691 936 637 691)
Population mean number of elite cases: 7.45
Count of perfect (error zero) individuals by case: (936 0 691 936 299 637 691 936 637 691)
Population mean number of perfect (error zero) cases: 6.45
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mult} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_when} {:close 0, :instruction integer_flush})
Best program: (integer_mult boolean_stackdepth exec_yank exec_noop in2 in1 integer_dup integer_shove integer_dup exec_swap (print_integer exec_yankdup) (exec_empty) boolean_rot integer_min exec_s () (boolean_not boolean_swap exec_yank exec_pop (integer_mod exec_when () integer_flush)) ())
Errors: [0 1 0 0 1 0 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 23
Size: 31
Percent parens: 0.258
--- Population Statistics ---
Average total errors in population: 3.546
Median total errors in population: 3
Error averages by case: (0.064 1.0 0.309 0.064 0.701 0.363 0.309 0.064 0.363 0.309)
Error minima by case: (0 1 0 0 0 0 0 0 0 0)
Average genome size in population (length): 25.259
Average program size in population (points): 32.098
Average percent parens in population: 0.213
Minimum age in population: 14.1484375
Maximum age in population: 16.7109375
Average age in population: 14.8455234375
Median age in population: 15.1484375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 162
Genome diversity (% unique genomes):	 0.36
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 174
Syntactic diversity (% unique Push programs):	 0.321
Total error diversity:				 0.007
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.036
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 3691301
--- Timings ---
Current time: 1559314351742 milliseconds
Total Time:          28.8 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        21.2 seconds, 73.5%
Fitness Testing:      5.3 seconds, 18.4%
Report:               2.2 seconds,  7.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 526
Test mean error for best: 0.52600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -40                 | Program output: -40                
Correct output: 67                  | Program output: 79                 
Correct output: -85                 | Program output: 61                 
Correct output: 69                  | Program output: 69                 
Correct output: 30                  | Program output: 30                 
Correct output: 22                  | Program output: 28                 
Correct output: -51                 | Program output: 100                
Correct output: 25                  | Program output: 53                 
Correct output: -76                 | Program output: -76                
Correct output: 53                  | Program output: 57                 
Correct output: -60                 | Program output: -60                
Correct output: 86                  | Program output: 86                 
Correct output: 86                  | Program output: 86                 
Correct output: 35                  | Program output: 35                 
Correct output: 11                  | Program output: 11                 
Correct output: 13                  | Program output: 57                 
Correct output: 45                  | Program output: 75                 
Correct output: 25                  | Program output: 25                 
Correct output: 23                  | Program output: 100                
Correct output: 6                   | Program output: 77                 
Correct output: 5                   | Program output: 90                 
Correct output: 1                   | Program output: 70                 
Correct output: 34                  | Program output: 34                 
Correct output: 34                  | Program output: 77                 
Correct output: 31                  | Program output: 31                 
Correct output: 34                  | Program output: 42                 
Correct output: 12                  | Program output: 38                 
Correct output: 3                   | Program output: 94                 
Correct output: 1                   | Program output: 5                  
Correct output: 21                  | Program output: 61                 
Correct output: 5                   | Program output: 96                 
Correct output: 3                   | Program output: 52                 
Correct output: 1                   | Program output: 31                 
Correct output: 63                  | Program output: 94                 
Correct output: 25                  | Program output: 45                 
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: -12                
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -85                
Correct output: -81                 | Program output: -7                 
Correct output: 43                  | Program output: 43                 
Correct output: -74                 | Program output: -22                
Correct output: -75                 | Program output: 15                 
Correct output: -44                 | Program output: 45                 
Correct output: -53                 | Program output: -8                 
Correct output: -64                 | Program output: 91                 
Correct output: -87                 | Program output: -86                
Correct output: -5                  | Program output: -5                 
Correct output: -57                 | Program output: -51                
Correct output: -68                 | Program output: -25                
Correct output: -49                 | Program output: -2                 
Correct output: -61                 | Program output: -61                
Correct output: -86                 | Program output: -55                
Correct output: -30                 | Program output: -30                
Correct output: -70                 | Program output: -70                
Correct output: -83                 | Program output: -83                
Correct output: -70                 | Program output: 56                 
Correct output: -59                 | Program output: -59                
Correct output: -92                 | Program output: -74                
Correct output: -67                 | Program output: -66                
Correct output: 23                  | Program output: 43                 
Correct output: -86                 | Program output: -32                
Correct output: -98                 | Program output: -97                
Correct output: -61                 | Program output: -61                
Correct output: -86                 | Program output: -53                
Correct output: -87                 | Program output: -61                
Correct output: -92                 | Program output: 51                 
Correct output: -29                 | Program output: -29                
Correct output: -74                 | Program output: 0                  
Correct output: -82                 | Program output: -82                
Correct output: -83                 | Program output: 90                 
Correct output: -5                  | Program output: -5                 
Correct output: -57                 | Program output: -57                
Correct output: -100                | Program output: -100               
Correct output: -33                 | Program output: 3                  
Correct output: -69                 | Program output: -41                
Correct output: -78                 | Program output: -78                
Correct output: -20                 | Program output: -20                
Correct output: -69                 | Program output: -69                
Correct output: -99                 | Program output: -99                
Correct output: -96                 | Program output: -48                
Correct output: -24                 | Program output: -24                
Correct output: -85                 | Program output: -85                
Correct output: -87                 | Program output: -65                
Correct output: -56                 | Program output: -54                
Correct output: -100                | Program output: -7                 
Correct output: -25                 | Program output: 14                 
Correct output: -33                 | Program output: -33                
Correct output: -86                 | Program output: -86                
Correct output: -94                 | Program output: -93                
Correct output: -85                 | Program output: -85                
Correct output: -46                 | Program output: -17                
Correct output: -98                 | Program output: -20                
Correct output: -80                 | Program output: -80                
Correct output: -58                 | Program output: -58                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mult} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_when} {:close 0, :instruction integer_flush})
Lexicase best program: (integer_mult boolean_stackdepth exec_yank exec_swap (in2 in1) (exec_yank exec_noop in2 in1) integer_dup integer_lte integer_dup integer_shove print_integer exec_yankdup exec_empty exec_stackdepth exec_eq boolean_rot integer_min exec_s () (boolean_not boolean_swap exec_yank integer_stackdepth integer_mod exec_when () integer_flush) ())
Lexicase best errors: [1 0 1 0 0 0 0 1 1 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 36
Percent parens: 0.194
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mult} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_when} {:close 0, :instruction integer_flush})
Zero cases best program: (integer_mult boolean_stackdepth exec_yank exec_swap (in2 in1) (exec_yank exec_noop in2 in1) integer_dup integer_lte integer_dup integer_shove print_integer exec_yankdup exec_empty exec_stackdepth exec_eq boolean_rot integer_min exec_s () (boolean_not boolean_swap exec_yank integer_stackdepth integer_mod exec_when () integer_flush) ())
Zero cases best errors: [1 0 1 0 0 0 0 1 1 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 36
Percent parens: 0.194
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 611 1000 371 917 60 917 2 1000 559)
Population mean number of elite cases: 6.44
Count of perfect (error zero) individuals by case: (0 611 0 371 917 60 917 2 0 559)
Population mean number of perfect (error zero) cases: 3.44
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mult} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_when} {:close 0, :instruction integer_flush})
Best program: (integer_mult boolean_stackdepth exec_yank exec_swap (in2 in1) (exec_yank exec_noop in2 in1) integer_dup integer_lte integer_dup integer_shove print_integer exec_yankdup exec_empty exec_stackdepth exec_eq boolean_rot integer_min exec_s () (boolean_not boolean_swap exec_yank integer_stackdepth integer_mod exec_when () integer_flush) ())
Errors: [1 0 1 0 0 0 0 1 1 1]
Total: 5
Mean: 0.5
Genome size: 29
Size: 36
Percent parens: 0.194
--- Population Statistics ---
Average total errors in population: 6.563
Median total errors in population: 6
Error averages by case: (1.0 0.389 1.0 0.629 0.083 0.94 0.083 0.998 1.0 0.441)
Error minima by case: (1 0 1 0 0 0 0 0 1 0)
Average genome size in population (length): 25.823
Average program size in population (points): 32.889
Average percent parens in population: 0.215
Minimum age in population: 15.1484375
Maximum age in population: 18.244140625
Average age in population: 16.441076171875
Median age in population: 16.49609375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 116
Genome diversity (% unique genomes):	 0.46
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 123
Syntactic diversity (% unique Push programs):	 0.414
Total error diversity:				 0.006
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.039
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 3913555
--- Timings ---
Current time: 1559314354151 milliseconds
Total Time:          31.2 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        23.1 seconds, 74.0%
Fitness Testing:      5.6 seconds, 17.9%
Report:               2.4 seconds,  7.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 525
Test mean error for best: 0.52500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -40                 | Program output: -40                
Correct output: 67                  | Program output: 67                 
Correct output: -85                 | Program output: 61                 
Correct output: 69                  | Program output: 69                 
Correct output: 30                  | Program output: 30                 
Correct output: 22                  | Program output: 22                 
Correct output: -51                 | Program output: 100                
Correct output: 25                  | Program output: 53                 
Correct output: -76                 | Program output: -76                
Correct output: 53                  | Program output: 53                 
Correct output: -60                 | Program output: -60                
Correct output: 86                  | Program output: 86                 
Correct output: 86                  | Program output: 86                 
Correct output: 35                  | Program output: 35                 
Correct output: 11                  | Program output: 11                 
Correct output: 13                  | Program output: 13                 
Correct output: 45                  | Program output: 79                 
Correct output: 25                  | Program output: 87                 
Correct output: 23                  | Program output: 72                 
Correct output: 6                   | Program output: 17                 
Correct output: 5                   | Program output: 54                 
Correct output: 1                   | Program output: 42                 
Correct output: 34                  | Program output: 93                 
Correct output: 34                  | Program output: 80                 
Correct output: 31                  | Program output: 61                 
Correct output: 34                  | Program output: 50                 
Correct output: 12                  | Program output: 12                 
Correct output: 3                   | Program output: 23                 
Correct output: 1                   | Program output: 1                  
Correct output: 21                  | Program output: 21                 
Correct output: 5                   | Program output: 12                 
Correct output: 3                   | Program output: 43                 
Correct output: 1                   | Program output: 71                 
Correct output: 63                  | Program output: 64                 
Correct output: 25                  | Program output: 27                 
Correct output: -97                 | Program output: -10                
Correct output: -91                 | Program output: -12                
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -66                
Correct output: -81                 | Program output: -81                
Correct output: 43                  | Program output: 87                 
Correct output: -74                 | Program output: -22                
Correct output: -75                 | Program output: 9                  
Correct output: -44                 | Program output: 89                 
Correct output: -53                 | Program output: -8                 
Correct output: -64                 | Program output: 43                 
Correct output: -87                 | Program output: -87                
Correct output: -5                  | Program output: -4                 
Correct output: -57                 | Program output: -57                
Correct output: -68                 | Program output: -68                
Correct output: -49                 | Program output: -49                
Correct output: -61                 | Program output: -61                
Correct output: -86                 | Program output: -55                
Correct output: -30                 | Program output: -30                
Correct output: -70                 | Program output: -9                 
Correct output: -83                 | Program output: -69                
Correct output: -70                 | Program output: 53                 
Correct output: -59                 | Program output: -49                
Correct output: -92                 | Program output: -34                
Correct output: -67                 | Program output: -66                
Correct output: 23                  | Program output: 54                 
Correct output: -86                 | Program output: -86                
Correct output: -98                 | Program output: -14                
Correct output: -61                 | Program output: -61                
Correct output: -86                 | Program output: -53                
Correct output: -87                 | Program output: -74                
Correct output: -92                 | Program output: 77                 
Correct output: -29                 | Program output: -29                
Correct output: -74                 | Program output: -74                
Correct output: -82                 | Program output: -82                
Correct output: -83                 | Program output: 20                 
Correct output: -5                  | Program output: -5                 
Correct output: -57                 | Program output: -57                
Correct output: -100                | Program output: -3                 
Correct output: -33                 | Program output: 83                 
Correct output: -69                 | Program output: -69                
Correct output: -78                 | Program output: -78                
Correct output: -20                 | Program output: -20                
Correct output: -69                 | Program output: -69                
Correct output: -99                 | Program output: -99                
Correct output: -96                 | Program output: -48                
Correct output: -24                 | Program output: -24                
Correct output: -85                 | Program output: -85                
Correct output: -87                 | Program output: -59                
Correct output: -56                 | Program output: -54                
Correct output: -100                | Program output: -7                 
Correct output: -25                 | Program output: 50                 
Correct output: -33                 | Program output: -33                
Correct output: -86                 | Program output: -86                
Correct output: -94                 | Program output: -93                
Correct output: -85                 | Program output: -85                
Correct output: -46                 | Program output: -17                
Correct output: -98                 | Program output: -20                
Correct output: -80                 | Program output: -80                
Correct output: -58                 | Program output: -58                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mult} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_when} {:close 0, :instruction integer_flush})
Lexicase best program: (integer_mult boolean_stackdepth exec_yank in4 in2 in2 in1 integer_dup integer_shove integer_dup integer_shove print_integer exec_yankdup exec_empty exec_stackdepth exec_eq boolean_rot exec_shove (exec_s () (boolean_not boolean_swap exec_yank exec_pop (integer_mod exec_when () integer_flush)) ()))
Lexicase best errors: [1 0 0 0 1 1 1 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 33
Percent parens: 0.212
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mult} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_when} {:close 0, :instruction integer_flush})
Zero cases best program: (integer_mult boolean_stackdepth exec_yank in4 in2 in2 in1 integer_dup integer_shove integer_dup integer_shove print_integer exec_yankdup exec_empty exec_stackdepth exec_eq boolean_rot exec_shove (exec_s () (boolean_not boolean_swap exec_yank exec_pop (integer_mod exec_when () integer_flush)) ()))
Zero cases best errors: [1 0 0 0 1 1 1 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 33
Percent parens: 0.212
--- Lexicase Population Statistics ---
Count of elite individuals by case: (525 946 761 206 1 721 1 5 206 416)
Population mean number of elite cases: 3.79
Count of perfect (error zero) individuals by case: (525 946 761 206 1 721 1 5 206 416)
Population mean number of perfect (error zero) cases: 3.79
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mult} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_when} {:close 0, :instruction integer_flush})
Best program: (integer_mult boolean_stackdepth exec_yank exec_swap (in2 in1) (exec_yank exec_noop in2 in1) exec_swap (exec_noop in2 in1) (integer_dup integer_shove) integer_dup integer_shove print_integer exec_yankdup exec_empty exec_stackdepth exec_eq boolean_rot integer_min exec_s () (boolean_not boolean_swap exec_yank exec_pop (integer_mod exec_when () integer_flush)) ())
Errors: [1 0 0 0 1 1 1 1 0 0]
Total: 5
Mean: 0.5
Genome size: 33
Size: 43
Percent parens: 0.233
--- Population Statistics ---
Average total errors in population: 6.212
Median total errors in population: 6
Error averages by case: (0.475 0.054 0.239 0.794 0.999 0.279 0.999 0.995 0.794 0.584)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 28.681
Average program size in population (points): 36.012
Average percent parens in population: 0.203
Minimum age in population: 16.322265625
Maximum age in population: 19.587890625
Average age in population: 18.3063505859375
Median age in population: 18.322265625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 176
Genome diversity (% unique genomes):	 0.407
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 202
Syntactic diversity (% unique Push programs):	 0.369
Total error diversity:				 0.006
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.037
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 4180144
--- Timings ---
Current time: 1559314356534 milliseconds
Total Time:          33.5 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        24.9 seconds, 74.1%
Fitness Testing:      5.9 seconds, 17.6%
Report:               2.7 seconds,  8.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 549
Test mean error for best: 0.54900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -40                 | Program output: -40                
Correct output: 67                  | Program output: 67                 
Correct output: -85                 | Program output: 61                 
Correct output: 69                  | Program output: 69                 
Correct output: 30                  | Program output: 30                 
Correct output: 22                  | Program output: 22                 
Correct output: -51                 | Program output: 100                
Correct output: 25                  | Program output: 53                 
Correct output: -76                 | Program output: -76                
Correct output: 53                  | Program output: 53                 
Correct output: -60                 | Program output: -60                
Correct output: 86                  | Program output: 86                 
Correct output: 86                  | Program output: 86                 
Correct output: 35                  | Program output: 35                 
Correct output: 11                  | Program output: 11                 
Correct output: 13                  | Program output: 13                 
Correct output: 45                  | Program output: 79                 
Correct output: 25                  | Program output: 87                 
Correct output: 23                  | Program output: 72                 
Correct output: 6                   | Program output: 0                  
Correct output: 5                   | Program output: 54                 
Correct output: 1                   | Program output: 42                 
Correct output: 34                  | Program output: 93                 
Correct output: 34                  | Program output: 80                 
Correct output: 31                  | Program output: 61                 
Correct output: 34                  | Program output: 50                 
Correct output: 12                  | Program output: 0                  
Correct output: 3                   | Program output: 23                 
Correct output: 1                   | Program output: 1                  
Correct output: 21                  | Program output: 21                 
Correct output: 5                   | Program output: 0                  
Correct output: 3                   | Program output: 43                 
Correct output: 1                   | Program output: 71                 
Correct output: 63                  | Program output: 64                 
Correct output: 25                  | Program output: 27                 
Correct output: -97                 | Program output: -10                
Correct output: -91                 | Program output: -12                
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -66                
Correct output: -81                 | Program output: -81                
Correct output: 43                  | Program output: 87                 
Correct output: -74                 | Program output: -22                
Correct output: -75                 | Program output: 9                  
Correct output: -44                 | Program output: 89                 
Correct output: -53                 | Program output: -8                 
Correct output: -64                 | Program output: 43                 
Correct output: -87                 | Program output: -87                
Correct output: -5                  | Program output: -4                 
Correct output: -57                 | Program output: -57                
Correct output: -68                 | Program output: -68                
Correct output: -49                 | Program output: -49                
Correct output: -61                 | Program output: -61                
Correct output: -86                 | Program output: -55                
Correct output: -30                 | Program output: -30                
Correct output: -70                 | Program output: -9                 
Correct output: -83                 | Program output: -69                
Correct output: -70                 | Program output: 53                 
Correct output: -59                 | Program output: -49                
Correct output: -92                 | Program output: -34                
Correct output: -67                 | Program output: -66                
Correct output: 23                  | Program output: 54                 
Correct output: -86                 | Program output: -86                
Correct output: -98                 | Program output: -14                
Correct output: -61                 | Program output: -61                
Correct output: -86                 | Program output: -53                
Correct output: -87                 | Program output: -74                
Correct output: -92                 | Program output: 77                 
Correct output: -29                 | Program output: -29                
Correct output: -74                 | Program output: -74                
Correct output: -82                 | Program output: -82                
Correct output: -83                 | Program output: 20                 
Correct output: -5                  | Program output: -5                 
Correct output: -57                 | Program output: 8                  
Correct output: -100                | Program output: -3                 
Correct output: -33                 | Program output: 3                  
Correct output: -69                 | Program output: -69                
Correct output: -78                 | Program output: -78                
Correct output: -20                 | Program output: -20                
Correct output: -69                 | Program output: -69                
Correct output: -99                 | Program output: -99                
Correct output: -96                 | Program output: 13                 
Correct output: -24                 | Program output: -24                
Correct output: -85                 | Program output: -85                
Correct output: -87                 | Program output: -59                
Correct output: -56                 | Program output: -54                
Correct output: -100                | Program output: -7                 
Correct output: -25                 | Program output: 18                 
Correct output: -33                 | Program output: -33                
Correct output: -86                 | Program output: -86                
Correct output: -94                 | Program output: -93                
Correct output: -85                 | Program output: -85                
Correct output: -46                 | Program output: -17                
Correct output: -98                 | Program output: -20                
Correct output: -80                 | Program output: -80                
Correct output: -58                 | Program output: -58                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mult} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_when} {:close 0, :instruction exec_while})
Lexicase best program: (integer_mult boolean_stackdepth exec_yank exec_swap (in2 in1) (exec_yank exec_noop in2 in1) integer_dup exec_noop in2 in1 integer_dup integer_shove integer_dup boolean_yankdup print_integer exec_yankdup exec_empty exec_stackdepth exec_eq boolean_rot integer_min exec_s () (boolean_not boolean_swap exec_yank exec_pop (integer_mod exec_when () exec_while ())) ())
Lexicase best errors: [1 0 1 0 1 1 1 0 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 42
Percent parens: 0.214
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mult} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_when} {:close 0, :instruction exec_while})
Zero cases best program: (integer_mult boolean_stackdepth exec_yank exec_swap (in2 in1) (exec_yank exec_noop in2 in1) integer_dup exec_noop in2 in1 integer_dup integer_shove integer_dup boolean_yankdup print_integer exec_yankdup exec_empty exec_stackdepth exec_eq boolean_rot integer_min exec_s () (boolean_not boolean_swap exec_yank exec_pop (integer_mod exec_when () exec_while ())) ())
Zero cases best errors: [1 0 1 0 1 1 1 0 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 42
Percent parens: 0.214
--- Lexicase Population Statistics ---
Count of elite individuals by case: (202 940 3 317 243 200 192 609 387 928)
Population mean number of elite cases: 4.02
Count of perfect (error zero) individuals by case: (202 940 3 317 243 200 192 609 387 928)
Population mean number of perfect (error zero) cases: 4.02
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mult} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_mult} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_when} {:close 0, :instruction integer_flush})
Best program: (integer_mult boolean_stackdepth exec_yank exec_swap (in2 in1) (exec_yank exec_noop integer_mult boolean_stackdepth) exec_yank exec_swap (in2 in1) (boolean_stackdepth) exec_yank exec_noop in2 in1 integer_dup integer_shove integer_dup integer_shove print_integer exec_yankdup exec_empty exec_stackdepth exec_eq boolean_rot exec_shove (exec_s () (boolean_not boolean_swap exec_yank exec_pop (integer_mod exec_when () integer_flush)) ()))
Errors: [1 0 1 0 1 1 1 0 0 0]
Total: 5
Mean: 0.5
Genome size: 38
Size: 49
Percent parens: 0.224
--- Population Statistics ---
Average total errors in population: 5.979
Median total errors in population: 5
Error averages by case: (0.798 0.06 0.997 0.683 0.757 0.8 0.808 0.391 0.613 0.072)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 29.394
Average program size in population (points): 37.172
Average percent parens in population: 0.210
Minimum age in population: 17.322265625
Maximum age in population: 21.462890625
Average age in population: 19.99131201171875
Median age in population: 20.12646484375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 146
Genome diversity (% unique genomes):	 0.472
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 149
Syntactic diversity (% unique Push programs):	 0.439
Total error diversity:				 0.006
Error (vector) diversity:			 0.022
Behavioral diversity:				 0.055
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 4449683
--- Timings ---
Current time: 1559314359077 milliseconds
Total Time:          36.1 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        26.8 seconds, 74.3%
Fitness Testing:      6.2 seconds, 17.3%
Report:               2.9 seconds,  8.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 528
Test mean error for best: 0.52800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -40                 | Program output: -40                
Correct output: 67                  | Program output: 67                 
Correct output: -85                 | Program output: 61                 
Correct output: 69                  | Program output: 69                 
Correct output: 30                  | Program output: 30                 
Correct output: 22                  | Program output: 22                 
Correct output: -51                 | Program output: 100                
Correct output: 25                  | Program output: 53                 
Correct output: -76                 | Program output: -76                
Correct output: 53                  | Program output: 53                 
Correct output: -60                 | Program output: -60                
Correct output: 86                  | Program output: 86                 
Correct output: 86                  | Program output: 86                 
Correct output: 35                  | Program output: 35                 
Correct output: 11                  | Program output: 11                 
Correct output: 13                  | Program output: 13                 
Correct output: 45                  | Program output: 79                 
Correct output: 25                  | Program output: 87                 
Correct output: 23                  | Program output: 72                 
Correct output: 6                   | Program output: 17                 
Correct output: 5                   | Program output: 54                 
Correct output: 1                   | Program output: 42                 
Correct output: 34                  | Program output: 93                 
Correct output: 34                  | Program output: 80                 
Correct output: 31                  | Program output: 61                 
Correct output: 34                  | Program output: 50                 
Correct output: 12                  | Program output: 12                 
Correct output: 3                   | Program output: 23                 
Correct output: 1                   | Program output: 1                  
Correct output: 21                  | Program output: 21                 
Correct output: 5                   | Program output: 12                 
Correct output: 3                   | Program output: 43                 
Correct output: 1                   | Program output: 71                 
Correct output: 63                  | Program output: 64                 
Correct output: 25                  | Program output: 27                 
Correct output: -97                 | Program output: -10                
Correct output: -91                 | Program output: -12                
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -66                
Correct output: -81                 | Program output: -81                
Correct output: 43                  | Program output: 87                 
Correct output: -74                 | Program output: -22                
Correct output: -75                 | Program output: 81                 
Correct output: -44                 | Program output: 89                 
Correct output: -53                 | Program output: -8                 
Correct output: -64                 | Program output: 43                 
Correct output: -87                 | Program output: -87                
Correct output: -5                  | Program output: -4                 
Correct output: -57                 | Program output: -57                
Correct output: -68                 | Program output: -68                
Correct output: -49                 | Program output: -49                
Correct output: -61                 | Program output: -61                
Correct output: -86                 | Program output: -55                
Correct output: -30                 | Program output: -30                
Correct output: -70                 | Program output: -9                 
Correct output: -83                 | Program output: -69                
Correct output: -70                 | Program output: 53                 
Correct output: -59                 | Program output: -49                
Correct output: -92                 | Program output: -34                
Correct output: -67                 | Program output: -66                
Correct output: 23                  | Program output: 54                 
Correct output: -86                 | Program output: -86                
Correct output: -98                 | Program output: -14                
Correct output: -61                 | Program output: -61                
Correct output: -86                 | Program output: -53                
Correct output: -87                 | Program output: -74                
Correct output: -92                 | Program output: 77                 
Correct output: -29                 | Program output: -29                
Correct output: -74                 | Program output: -74                
Correct output: -82                 | Program output: -82                
Correct output: -83                 | Program output: 20                 
Correct output: -5                  | Program output: -5                 
Correct output: -57                 | Program output: -57                
Correct output: -100                | Program output: -3                 
Correct output: -33                 | Program output: 83                 
Correct output: -69                 | Program output: -69                
Correct output: -78                 | Program output: -78                
Correct output: -20                 | Program output: -20                
Correct output: -69                 | Program output: -69                
Correct output: -99                 | Program output: -99                
Correct output: -96                 | Program output: 0                  
Correct output: -24                 | Program output: -24                
Correct output: -85                 | Program output: -85                
Correct output: -87                 | Program output: -59                
Correct output: -56                 | Program output: -54                
Correct output: -100                | Program output: 12                 
Correct output: -25                 | Program output: 50                 
Correct output: -33                 | Program output: -33                
Correct output: -86                 | Program output: -86                
Correct output: -94                 | Program output: -93                
Correct output: -85                 | Program output: -85                
Correct output: -46                 | Program output: -17                
Correct output: -98                 | Program output: -20                
Correct output: -80                 | Program output: -80                
Correct output: -58                 | Program output: -58                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mult} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_when} {:close 0, :instruction integer_flush})
Lexicase best program: (integer_mult boolean_stackdepth exec_yank exec_swap (in2 in1) (in1 boolean_empty integer_shove) integer_dup integer_shove print_integer exec_yankdup exec_empty exec_stackdepth exec_eq boolean_rot integer_min exec_s () (boolean_not boolean_swap exec_yank exec_pop () integer_mod exec_when () integer_flush) ())
Lexicase best errors: [0 0 0 0 0 1 0 1 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 34
Percent parens: 0.235
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mult} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_when} {:close 0, :instruction integer_flush})
Zero cases best program: (integer_mult boolean_stackdepth exec_yank exec_swap (in2 in1) (in1 boolean_empty integer_shove) integer_dup integer_shove print_integer exec_yankdup exec_empty exec_stackdepth exec_eq boolean_rot integer_min exec_s () (boolean_not boolean_swap exec_yank exec_pop () integer_mod exec_when () integer_flush) ())
Zero cases best errors: [0 0 0 0 0 1 0 1 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 34
Percent parens: 0.235
--- Lexicase Population Statistics ---
Count of elite individuals by case: (324 318 628 318 443 256 945 622 1000 441)
Population mean number of elite cases: 5.30
Count of perfect (error zero) individuals by case: (324 318 628 318 443 256 945 622 0 441)
Population mean number of perfect (error zero) cases: 4.30
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mult} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction integer_mult} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 1, :instruction exec_s} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_when} {:close 0, :instruction integer_flush})
Best program: (integer_mult boolean_stackdepth exec_yank exec_swap (in2 in1) (integer_mult boolean_stackdepth) exec_yank exec_noop in2 in1 integer_dup integer_shove integer_mult boolean_stackdepth exec_yank exec_swap (in2 in1 exec_yank exec_noop in2 in1) (integer_dup integer_lte) integer_dup integer_shove print_integer exec_yankdup exec_empty exec_stackdepth exec_eq boolean_rot integer_min exec_s () (exec_yank exec_pop (integer_mod exec_when () integer_flush)) ())
Errors: [0 0 0 0 0 1 0 1 1 0]
Total: 3
Mean: 0.3
Genome size: 41
Size: 51
Percent parens: 0.196
--- Population Statistics ---
Average total errors in population: 5.705
Median total errors in population: 6
Error averages by case: (0.676 0.682 0.372 0.682 0.557 0.744 0.055 0.378 1.0 0.559)
Error minima by case: (0 0 0 0 0 0 0 0 1 0)
Average genome size in population (length): 29.145
Average program size in population (points): 37.068
Average percent parens in population: 0.214
Minimum age in population: 18.322265625
Maximum age in population: 22.960693359375
Average age in population: 21.13696923828125
Median age in population: 21.197265625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 119
Genome diversity (% unique genomes):	 0.482
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 123
Syntactic diversity (% unique Push programs):	 0.442
Total error diversity:				 0.008
Error (vector) diversity:			 0.024
Behavioral diversity:				 0.061
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 4720568
--- Timings ---
Current time: 1559314361603 milliseconds
Total Time:          38.6 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        28.7 seconds, 74.4%
Fitness Testing:      6.6 seconds, 17.0%
Report:               3.2 seconds,  8.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 456
Test mean error for best: 0.45600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -40                 | Program output: -40                
Correct output: 67                  | Program output: 67                 
Correct output: -85                 | Program output: -85                
Correct output: 69                  | Program output: 69                 
Correct output: 30                  | Program output: 30                 
Correct output: 22                  | Program output: 22                 
Correct output: -51                 | Program output: -51                
Correct output: 25                  | Program output: 53                 
Correct output: -76                 | Program output: -76                
Correct output: 53                  | Program output: 53                 
Correct output: -60                 | Program output: -60                
Correct output: 86                  | Program output: 86                 
Correct output: 86                  | Program output: 86                 
Correct output: 35                  | Program output: 35                 
Correct output: 11                  | Program output: 11                 
Correct output: 13                  | Program output: 13                 
Correct output: 45                  | Program output: 79                 
Correct output: 25                  | Program output: 87                 
Correct output: 23                  | Program output: 72                 
Correct output: 6                   | Program output: 17                 
Correct output: 5                   | Program output: 54                 
Correct output: 1                   | Program output: 42                 
Correct output: 34                  | Program output: 93                 
Correct output: 34                  | Program output: 80                 
Correct output: 31                  | Program output: 61                 
Correct output: 34                  | Program output: 50                 
Correct output: 12                  | Program output: 12                 
Correct output: 3                   | Program output: 23                 
Correct output: 1                   | Program output: 1                  
Correct output: 21                  | Program output: 21                 
Correct output: 5                   | Program output: 12                 
Correct output: 3                   | Program output: 43                 
Correct output: 1                   | Program output: 71                 
Correct output: 63                  | Program output: 64                 
Correct output: 25                  | Program output: 27                 
Correct output: -97                 | Program output: -10                
Correct output: -91                 | Program output: -12                
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -66                
Correct output: -81                 | Program output: -81                
Correct output: 43                  | Program output: 87                 
Correct output: -74                 | Program output: -22                
Correct output: -75                 | Program output: -75                
Correct output: -44                 | Program output: -44                
Correct output: -53                 | Program output: -8                 
Correct output: -64                 | Program output: -64                
Correct output: -87                 | Program output: -87                
Correct output: -5                  | Program output: -4                 
Correct output: -57                 | Program output: -57                
Correct output: -68                 | Program output: -68                
Correct output: -49                 | Program output: -49                
Correct output: -61                 | Program output: -61                
Correct output: -86                 | Program output: -55                
Correct output: -30                 | Program output: -30                
Correct output: -70                 | Program output: -9                 
Correct output: -83                 | Program output: -69                
Correct output: -70                 | Program output: -44                
Correct output: -59                 | Program output: -49                
Correct output: -92                 | Program output: -34                
Correct output: -67                 | Program output: -66                
Correct output: 23                  | Program output: 54                 
Correct output: -86                 | Program output: -86                
Correct output: -98                 | Program output: -14                
Correct output: -61                 | Program output: -61                
Correct output: -86                 | Program output: -53                
Correct output: -87                 | Program output: -74                
Correct output: -92                 | Program output: -92                
Correct output: -29                 | Program output: -29                
Correct output: -74                 | Program output: -74                
Correct output: -82                 | Program output: -82                
Correct output: -83                 | Program output: -83                
Correct output: -5                  | Program output: -5                 
Correct output: -57                 | Program output: -57                
Correct output: -100                | Program output: -3                 
Correct output: -33                 | Program output: 83                 
Correct output: -69                 | Program output: -69                
Correct output: -78                 | Program output: -78                
Correct output: -20                 | Program output: -20                
Correct output: -69                 | Program output: -69                
Correct output: -99                 | Program output: -99                
Correct output: -96                 | Program output: -48                
Correct output: -24                 | Program output: -24                
Correct output: -85                 | Program output: -85                
Correct output: -87                 | Program output: -59                
Correct output: -56                 | Program output: -54                
Correct output: -100                | Program output: -7                 
Correct output: -25                 | Program output: -19                
Correct output: -33                 | Program output: -33                
Correct output: -86                 | Program output: -86                
Correct output: -94                 | Program output: -93                
Correct output: -85                 | Program output: -85                
Correct output: -46                 | Program output: -17                
Correct output: -98                 | Program output: -20                
Correct output: -80                 | Program output: -80                
Correct output: -58                 | Program output: -58                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mult} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_when} {:close 0, :instruction integer_flush})
Lexicase best program: (integer_mult boolean_stackdepth exec_yank boolean_pop in2 in3 integer_dup integer_shove integer_dup integer_shove integer_dup integer_shove in2 in1 integer_dup integer_shove integer_dup integer_yankdup integer_dup integer_lte integer_dup integer_shove print_integer exec_yankdup integer_fromboolean exec_stackdepth exec_eq boolean_rot integer_min exec_s () (boolean_not boolean_swap exec_yank integer_stackdepth integer_mod exec_when () integer_flush) ())
Lexicase best errors: [0 1 0 0 0 1 0 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 42
Percent parens: 0.119
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mult} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_when} {:close 0, :instruction integer_flush})
Zero cases best program: (integer_mult boolean_stackdepth exec_yank boolean_pop in2 in3 integer_dup integer_shove integer_dup integer_shove integer_dup integer_shove in2 in1 integer_dup integer_shove integer_dup integer_yankdup integer_dup integer_lte integer_dup integer_shove print_integer exec_yankdup integer_fromboolean exec_stackdepth exec_eq boolean_rot integer_min exec_s () (boolean_not boolean_swap exec_yank integer_stackdepth integer_mod exec_when () integer_flush) ())
Zero cases best errors: [0 1 0 0 0 1 0 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 42
Percent parens: 0.119
--- Lexicase Population Statistics ---
Count of elite individuals by case: (483 38 873 877 422 26 907 26 480 873)
Population mean number of elite cases: 5.01
Count of perfect (error zero) individuals by case: (483 38 873 877 422 26 907 26 480 873)
Population mean number of perfect (error zero) cases: 5.01
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mult} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 2, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_when} {:close 0, :instruction integer_flush})
Best program: (integer_mult boolean_stackdepth exec_yank exec_swap (in2 in3) (integer_dup integer_shove integer_dup integer_shove) integer_dup integer_shove in2 in1 integer_dup integer_shove integer_dup integer_yankdup integer_dup integer_lte integer_dup integer_shove print_integer exec_yankdup integer_fromboolean exec_stackdepth exec_eq boolean_rot integer_min exec_s () (boolean_not boolean_swap exec_yank integer_stackdepth integer_mod exec_when () integer_flush) ())
Errors: [0 1 0 0 0 1 0 1 0 0]
Total: 3
Mean: 0.3
Genome size: 37
Size: 44
Percent parens: 0.159
--- Population Statistics ---
Average total errors in population: 4.995
Median total errors in population: 5
Error averages by case: (0.517 0.962 0.127 0.123 0.578 0.974 0.093 0.974 0.52 0.127)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 33.614
Average program size in population (points): 41.178
Average percent parens in population: 0.185
Minimum age in population: 19.9091796875
Maximum age in population: 24.516357421875
Average age in population: 22.53877758789062
Median age in population: 22.669921875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 284
Genome diversity (% unique genomes):	 0.5
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 296
Syntactic diversity (% unique Push programs):	 0.464
Total error diversity:				 0.008
Error (vector) diversity:			 0.031
Behavioral diversity:				 0.083
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 5043429
--- Timings ---
Current time: 1559314364171 milliseconds
Total Time:          41.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        30.6 seconds, 74.3%
Fitness Testing:      7.0 seconds, 16.9%
Report:               3.5 seconds,  8.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 552
Test mean error for best: 0.55200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -40                 | Program output: -40                
Correct output: 67                  | Program output: 67                 
Correct output: -85                 | Program output: -85                
Correct output: 69                  | Program output: 69                 
Correct output: 30                  | Program output: 30                 
Correct output: 22                  | Program output: 22                 
Correct output: -51                 | Program output: -51                
Correct output: 25                  | Program output: 53                 
Correct output: -76                 | Program output: -76                
Correct output: 53                  | Program output: 53                 
Correct output: -60                 | Program output: -60                
Correct output: 86                  | Program output: 86                 
Correct output: 86                  | Program output: 86                 
Correct output: 35                  | Program output: 35                 
Correct output: 11                  | Program output: 11                 
Correct output: 13                  | Program output: 13                 
Correct output: 45                  | Program output: 79                 
Correct output: 25                  | Program output: 87                 
Correct output: 23                  | Program output: 72                 
Correct output: 6                   | Program output: 17                 
Correct output: 5                   | Program output: 54                 
Correct output: 1                   | Program output: 42                 
Correct output: 34                  | Program output: 93                 
Correct output: 34                  | Program output: 80                 
Correct output: 31                  | Program output: 61                 
Correct output: 34                  | Program output: 50                 
Correct output: 12                  | Program output: 12                 
Correct output: 3                   | Program output: 23                 
Correct output: 1                   | Program output: 1                  
Correct output: 21                  | Program output: 21                 
Correct output: 5                   | Program output: 12                 
Correct output: 3                   | Program output: 43                 
Correct output: 1                   | Program output: 71                 
Correct output: 63                  | Program output: 64                 
Correct output: 25                  | Program output: 27                 
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: -91                
Correct output: -97                 | Program output: -39                
Correct output: -85                 | Program output: -85                
Correct output: -81                 | Program output: -7                 
Correct output: 43                  | Program output: 87                 
Correct output: -74                 | Program output: -74                
Correct output: -75                 | Program output: -75                
Correct output: -44                 | Program output: -44                
Correct output: -53                 | Program output: 3                  
Correct output: -64                 | Program output: -64                
Correct output: -87                 | Program output: -86                
Correct output: -5                  | Program output: -5                 
Correct output: -57                 | Program output: -51                
Correct output: -68                 | Program output: -25                
Correct output: -49                 | Program output: -2                 
Correct output: -61                 | Program output: -61                
Correct output: -86                 | Program output: -27                
Correct output: -30                 | Program output: 28                 
Correct output: -70                 | Program output: -70                
Correct output: -83                 | Program output: -83                
Correct output: -70                 | Program output: -44                
Correct output: -59                 | Program output: -59                
Correct output: -92                 | Program output: -74                
Correct output: -67                 | Program output: -14                
Correct output: 23                  | Program output: 54                 
Correct output: -86                 | Program output: -32                
Correct output: -98                 | Program output: -97                
Correct output: -61                 | Program output: -61                
Correct output: -86                 | Program output: -86                
Correct output: -87                 | Program output: -61                
Correct output: -92                 | Program output: -92                
Correct output: -29                 | Program output: 4                  
Correct output: -74                 | Program output: 0                  
Correct output: -82                 | Program output: 61                 
Correct output: -83                 | Program output: -83                
Correct output: -5                  | Program output: 80                 
Correct output: -57                 | Program output: -12                
Correct output: -100                | Program output: -100               
Correct output: -33                 | Program output: 83                 
Correct output: -69                 | Program output: -41                
Correct output: -78                 | Program output: -78                
Correct output: -20                 | Program output: -20                
Correct output: -69                 | Program output: 100                
Correct output: -99                 | Program output: 40                 
Correct output: -96                 | Program output: -96                
Correct output: -24                 | Program output: -24                
Correct output: -85                 | Program output: -85                
Correct output: -87                 | Program output: -65                
Correct output: -56                 | Program output: -56                
Correct output: -100                | Program output: -100               
Correct output: -25                 | Program output: -19                
Correct output: -33                 | Program output: 56                 
Correct output: -86                 | Program output: -63                
Correct output: -94                 | Program output: 22                 
Correct output: -85                 | Program output: 85                 
Correct output: -46                 | Program output: -46                
Correct output: -98                 | Program output: -98                
Correct output: -80                 | Program output: 41                 
Correct output: -58                 | Program output: 30                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_gte} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 1, :instruction exec_s} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_when} {:close 0, :instruction integer_flush})
Lexicase best program: (integer_gte boolean_stackdepth exec_yank exec_swap (in2 in3) (integer_dup integer_shove) integer_dup integer_shove integer_dup integer_shove in2 integer_shove integer_dup integer_shove print_integer exec_yankdup exec_empty exec_stackdepth exec_eq boolean_rot integer_min exec_s () (exec_eq boolean_rot integer_min exec_s () (boolean_not boolean_swap exec_yank integer_stackdepth integer_mod exec_when () integer_flush) ()) ())
Lexicase best errors: [1 0 0 0 0 0 1 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 45
Percent parens: 0.222
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_gte} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 1, :instruction exec_s} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_when} {:close 0, :instruction integer_flush})
Zero cases best program: (integer_gte boolean_stackdepth exec_yank exec_swap (in2 in3) (integer_dup integer_shove) integer_dup integer_shove integer_dup integer_shove in2 integer_shove integer_dup integer_shove print_integer exec_yankdup exec_empty exec_stackdepth exec_eq boolean_rot integer_min exec_s () (exec_eq boolean_rot integer_min exec_s () (boolean_not boolean_swap exec_yank integer_stackdepth integer_mod exec_when () integer_flush) ()) ())
Zero cases best errors: [1 0 0 0 0 0 1 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 45
Percent parens: 0.222
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 474 94 475 681 442 1000 891 94 680)
Population mean number of elite cases: 5.83
Count of perfect (error zero) individuals by case: (0 474 94 475 681 442 0 891 94 680)
Population mean number of perfect (error zero) cases: 3.83
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_add} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 1, :instruction exec_s} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_when} {:close 0, :instruction integer_flush})
Best program: (integer_add boolean_stackdepth exec_yank exec_swap (in2 in3) (integer_dup integer_shove) integer_dup integer_shove integer_dup integer_shove in2 in1 integer_dup integer_shove integer_dup integer_lte integer_dup integer_shove print_integer exec_yankdup exec_empty exec_stackdepth exec_eq boolean_rot integer_min exec_s () (integer_fromboolean boolean_rot integer_min exec_s () (boolean_not boolean_swap exec_yank integer_stackdepth integer_mod exec_when () integer_flush) ()) ())
Errors: [1 0 0 0 0 0 1 0 0 0]
Total: 2
Mean: 0.2
Genome size: 39
Size: 49
Percent parens: 0.204
--- Population Statistics ---
Average total errors in population: 6.169
Median total errors in population: 7
Error averages by case: (1.0 0.526 0.906 0.525 0.319 0.558 1.0 0.109 0.906 0.32)
Error minima by case: (1 0 0 0 0 0 1 0 0 0)
Average genome size in population (length): 37.243
Average program size in population (points): 44.608
Average percent parens in population: 0.165
Minimum age in population: 22.142578125
Maximum age in population: 26.04193115234375
Average age in population: 23.71463275146484
Median age in population: 23.767578125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 219
Genome diversity (% unique genomes):	 0.468
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 234
Syntactic diversity (% unique Push programs):	 0.43
Total error diversity:				 0.009
Error (vector) diversity:			 0.02
Behavioral diversity:				 0.081
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 5403826
--- Timings ---
Current time: 1559314366786 milliseconds
Total Time:          43.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        32.5 seconds, 74.2%
Fitness Testing:      7.4 seconds, 16.8%
Report:               3.8 seconds,  8.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Smallest problem report - generation 17
Test total error for best: 452
Test mean error for best: 0.45200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -40                 | Program output: -40                
Correct output: 67                  | Program output: 67                 
Correct output: -85                 | Program output: -85                
Correct output: 69                  | Program output: 69                 
Correct output: 30                  | Program output: 30                 
Correct output: 22                  | Program output: 22                 
Correct output: -51                 | Program output: -51                
Correct output: 25                  | Program output: 53                 
Correct output: -76                 | Program output: -76                
Correct output: 53                  | Program output: 53                 
Correct output: -60                 | Program output: -60                
Correct output: 86                  | Program output: 86                 
Correct output: 86                  | Program output: 86                 
Correct output: 35                  | Program output: 35                 
Correct output: 11                  | Program output: 11                 
Correct output: 13                  | Program output: 13                 
Correct output: 45                  | Program output: 79                 
Correct output: 25                  | Program output: 87                 
Correct output: 23                  | Program output: 72                 
Correct output: 6                   | Program output: 17                 
Correct output: 5                   | Program output: 54                 
Correct output: 1                   | Program output: 1                  
Correct output: 34                  | Program output: 93                 
Correct output: 34                  | Program output: 80                 
Correct output: 31                  | Program output: 61                 
Correct output: 34                  | Program output: 50                 
Correct output: 12                  | Program output: 12                 
Correct output: 3                   | Program output: 23                 
Correct output: 1                   | Program output: 1                  
Correct output: 21                  | Program output: 21                 
Correct output: 5                   | Program output: 12                 
Correct output: 3                   | Program output: 43                 
Correct output: 1                   | Program output: 1                  
Correct output: 63                  | Program output: 64                 
Correct output: 25                  | Program output: 27                 
Correct output: -97                 | Program output: -10                
Correct output: -91                 | Program output: -12                
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -66                
Correct output: -81                 | Program output: -81                
Correct output: 43                  | Program output: 87                 
Correct output: -74                 | Program output: -22                
Correct output: -75                 | Program output: -75                
Correct output: -44                 | Program output: -44                
Correct output: -53                 | Program output: -8                 
Correct output: -64                 | Program output: -64                
Correct output: -87                 | Program output: -87                
Correct output: -5                  | Program output: -4                 
Correct output: -57                 | Program output: -57                
Correct output: -68                 | Program output: -68                
Correct output: -49                 | Program output: -49                
Correct output: -61                 | Program output: -61                
Correct output: -86                 | Program output: -55                
Correct output: -30                 | Program output: -30                
Correct output: -70                 | Program output: -9                 
Correct output: -83                 | Program output: -69                
Correct output: -70                 | Program output: -44                
Correct output: -59                 | Program output: -49                
Correct output: -92                 | Program output: -34                
Correct output: -67                 | Program output: -66                
Correct output: 23                  | Program output: 54                 
Correct output: -86                 | Program output: -86                
Correct output: -98                 | Program output: -14                
Correct output: -61                 | Program output: -61                
Correct output: -86                 | Program output: -53                
Correct output: -87                 | Program output: -74                
Correct output: -92                 | Program output: -92                
Correct output: -29                 | Program output: -29                
Correct output: -74                 | Program output: -74                
Correct output: -82                 | Program output: -82                
Correct output: -83                 | Program output: -83                
Correct output: -5                  | Program output: -5                 
Correct output: -57                 | Program output: -57                
Correct output: -100                | Program output: -3                 
Correct output: -33                 | Program output: 83                 
Correct output: -69                 | Program output: -69                
Correct output: -78                 | Program output: -78                
Correct output: -20                 | Program output: -20                
Correct output: -69                 | Program output: -69                
Correct output: -99                 | Program output: -99                
Correct output: -96                 | Program output: -48                
Correct output: -24                 | Program output: -24                
Correct output: -85                 | Program output: -85                
Correct output: -87                 | Program output: -59                
Correct output: -56                 | Program output: -54                
Correct output: -100                | Program output: -7                 
Correct output: -25                 | Program output: -19                
Correct output: -33                 | Program output: -33                
Correct output: -86                 | Program output: -86                
Correct output: -94                 | Program output: -93                
Correct output: -85                 | Program output: -85                
Correct output: -46                 | Program output: -17                
Correct output: -98                 | Program output: -20                
Correct output: -80                 | Program output: -80                
Correct output: -58                 | Program output: -58                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mult} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_when} {:close 0, :instruction integer_flush})
Lexicase best program: (integer_mult boolean_stackdepth exec_yank exec_swap (in2 in2 in3) (integer_dup integer_shove) integer_dup integer_shove integer_dup integer_shove in2 in1 integer_dup integer_shove exec_swap (integer_yankdup integer_dup integer_lte) (integer_dup integer_shove print_integer exec_yankdup) integer_fromboolean exec_stackdepth exec_eq boolean_rot integer_min exec_s () (boolean_not boolean_swap exec_yank integer_stackdepth integer_mod exec_when () integer_flush) ())
Lexicase best errors: [1 0 0 0 0 0 1 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 47
Percent parens: 0.191
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mult} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_when} {:close 0, :instruction integer_flush})
Zero cases best program: (integer_mult boolean_stackdepth exec_yank exec_swap (in2 in2 in3) (integer_dup integer_shove) integer_dup integer_shove integer_dup integer_shove in2 in1 integer_dup integer_shove exec_swap (integer_yankdup integer_dup integer_lte) (integer_dup integer_shove print_integer exec_yankdup) integer_fromboolean exec_stackdepth exec_eq boolean_rot integer_min exec_s () (boolean_not boolean_swap exec_yank integer_stackdepth integer_mod exec_when () integer_flush) ())
Zero cases best errors: [1 0 0 0 0 0 1 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 47
Percent parens: 0.191
--- Lexicase Population Statistics ---
Count of elite individuals by case: (852 46 272 271 428 46 1000 852 428 72)
Population mean number of elite cases: 4.27
Count of perfect (error zero) individuals by case: (852 46 272 271 428 46 0 852 428 72)
Population mean number of perfect (error zero) cases: 3.27
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mult} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_when} {:close 0, :instruction integer_flush})
Best program: (integer_mult boolean_stackdepth exec_yank exec_swap (in2 in2 in3) (integer_dup integer_shove) integer_dup integer_shove integer_dup integer_shove in2 in1 integer_dup integer_shove exec_swap (integer_yankdup integer_dup integer_lte) (integer_dup integer_shove print_integer exec_yankdup) integer_fromboolean exec_stackdepth exec_eq boolean_rot integer_min exec_s () (boolean_not boolean_swap exec_yank integer_stackdepth integer_mod exec_when () integer_flush) ())
Errors: [1 0 0 0 0 0 1 0 0 0]
Total: 2
Mean: 0.2
Genome size: 38
Size: 47
Percent parens: 0.191
--- Population Statistics ---
Average total errors in population: 6.733
Median total errors in population: 6
Error averages by case: (0.148 0.954 0.728 0.729 0.572 0.954 1.0 0.148 0.572 0.928)
Error minima by case: (0 0 0 0 0 0 1 0 0 0)
Average genome size in population (length): 36.27
Average program size in population (points): 43.875
Average percent parens in population: 0.174
Minimum age in population: 23.7623291015625
Maximum age in population: 27.3065185546875
Average age in population: 25.18405548095703
Median age in population: 25.267578125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 29
Genome diversity (% unique genomes):	 0.493
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 30
Syntactic diversity (% unique Push programs):	 0.464
Total error diversity:				 0.009
Error (vector) diversity:			 0.033
Behavioral diversity:				 0.104
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 5804651
--- Timings ---
Current time: 1559314369477 milliseconds
Total Time:          46.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        34.4 seconds, 74.1%
Fitness Testing:      7.8 seconds, 16.8%
Report:               4.1 seconds,  8.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Smallest problem report - generation 18
Test total error for best: 460
Test mean error for best: 0.46000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -40                 | Program output: -40                
Correct output: 67                  | Program output: 79                 
Correct output: -85                 | Program output: -85                
Correct output: 69                  | Program output: 69                 
Correct output: 30                  | Program output: 37                 
Correct output: 22                  | Program output: 28                 
Correct output: -51                 | Program output: -51                
Correct output: 25                  | Program output: 25                 
Correct output: -76                 | Program output: -76                
Correct output: 53                  | Program output: 57                 
Correct output: -60                 | Program output: -60                
Correct output: 86                  | Program output: 86                 
Correct output: 86                  | Program output: 86                 
Correct output: 35                  | Program output: 35                 
Correct output: 11                  | Program output: 11                 
Correct output: 13                  | Program output: 24                 
Correct output: 45                  | Program output: 45                 
Correct output: 25                  | Program output: 98                 
Correct output: 23                  | Program output: 64                 
Correct output: 6                   | Program output: 64                 
Correct output: 5                   | Program output: 5                  
Correct output: 1                   | Program output: 1                  
Correct output: 34                  | Program output: 99                 
Correct output: 34                  | Program output: 34                 
Correct output: 31                  | Program output: 32                 
Correct output: 34                  | Program output: 34                 
Correct output: 12                  | Program output: 75                 
Correct output: 3                   | Program output: 61                 
Correct output: 1                   | Program output: 63                 
Correct output: 21                  | Program output: 24                 
Correct output: 5                   | Program output: 5                  
Correct output: 3                   | Program output: 95                 
Correct output: 1                   | Program output: 1                  
Correct output: 63                  | Program output: 83                 
Correct output: 25                  | Program output: 25                 
Correct output: -97                 | Program output: -10                
Correct output: -91                 | Program output: -12                
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -66                
Correct output: -81                 | Program output: -81                
Correct output: 43                  | Program output: 65                 
Correct output: -74                 | Program output: -22                
Correct output: -75                 | Program output: -75                
Correct output: -44                 | Program output: -44                
Correct output: -53                 | Program output: -8                 
Correct output: -64                 | Program output: -64                
Correct output: -87                 | Program output: -87                
Correct output: -5                  | Program output: -4                 
Correct output: -57                 | Program output: -57                
Correct output: -68                 | Program output: -68                
Correct output: -49                 | Program output: -49                
Correct output: -61                 | Program output: -61                
Correct output: -86                 | Program output: -55                
Correct output: -30                 | Program output: -30                
Correct output: -70                 | Program output: -9                 
Correct output: -83                 | Program output: -69                
Correct output: -70                 | Program output: -44                
Correct output: -59                 | Program output: -49                
Correct output: -92                 | Program output: -34                
Correct output: -67                 | Program output: -66                
Correct output: 23                  | Program output: 23                 
Correct output: -86                 | Program output: -86                
Correct output: -98                 | Program output: -14                
Correct output: -61                 | Program output: -61                
Correct output: -86                 | Program output: -53                
Correct output: -87                 | Program output: -74                
Correct output: -92                 | Program output: -92                
Correct output: -29                 | Program output: -29                
Correct output: -74                 | Program output: -74                
Correct output: -82                 | Program output: -82                
Correct output: -83                 | Program output: -83                
Correct output: -5                  | Program output: -5                 
Correct output: -57                 | Program output: -57                
Correct output: -100                | Program output: -3                 
Correct output: -33                 | Program output: 11                 
Correct output: -69                 | Program output: -69                
Correct output: -78                 | Program output: -78                
Correct output: -20                 | Program output: -20                
Correct output: -69                 | Program output: -69                
Correct output: -99                 | Program output: -99                
Correct output: -96                 | Program output: -48                
Correct output: -24                 | Program output: -24                
Correct output: -85                 | Program output: -85                
Correct output: -87                 | Program output: -59                
Correct output: -56                 | Program output: -54                
Correct output: -100                | Program output: -7                 
Correct output: -25                 | Program output: -19                
Correct output: -33                 | Program output: -33                
Correct output: -86                 | Program output: -86                
Correct output: -94                 | Program output: -93                
Correct output: -85                 | Program output: -85                
Correct output: -46                 | Program output: -17                
Correct output: -98                 | Program output: -20                
Correct output: -80                 | Program output: -80                
Correct output: -58                 | Program output: -58                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mult} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 1, :instruction exec_s} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_when} {:close 0, :instruction integer_flush})
Lexicase best program: (integer_mult boolean_stackdepth exec_yank exec_swap (in2 exec_swap (in2 in3) (integer_dup integer_shove) integer_dup exec_swap (in2 in3) (integer_dup integer_shove) integer_dup integer_shove) (integer_dup integer_shove in2 in1) integer_dup integer_shove integer_dup integer_lte integer_dup integer_shove print_integer exec_yankdup exec_empty exec_stackdepth exec_eq boolean_rot integer_min exec_s () (integer_fromboolean boolean_rot integer_min exec_s () (boolean_not boolean_swap exec_yank integer_stackdepth integer_mod exec_when () integer_flush) ()) ())
Lexicase best errors: [0 0 1 0 0 1 0 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 61
Percent parens: 0.230
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mult} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 1, :instruction exec_s} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_when} {:close 0, :instruction integer_flush})
Zero cases best program: (integer_mult boolean_stackdepth exec_yank exec_swap (in2 exec_swap (in2 in3) (integer_dup integer_shove) integer_dup exec_swap (in2 in3) (integer_dup integer_shove) integer_dup integer_shove) (integer_dup integer_shove in2 in1) integer_dup integer_shove integer_dup integer_lte integer_dup integer_shove print_integer exec_yankdup exec_empty exec_stackdepth exec_eq boolean_rot integer_min exec_s () (integer_fromboolean boolean_rot integer_min exec_s () (boolean_not boolean_swap exec_yank integer_stackdepth integer_mod exec_when () integer_flush) ()) ())
Zero cases best errors: [0 0 1 0 0 1 0 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 61
Percent parens: 0.230
--- Lexicase Population Statistics ---
Count of elite individuals by case: (612 430 77 430 611 141 612 933 159 459)
Population mean number of elite cases: 4.46
Count of perfect (error zero) individuals by case: (612 430 77 430 611 141 612 933 159 459)
Population mean number of perfect (error zero) cases: 4.46
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mult} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 0, :instruction exec_noop} {:close 1, :instruction in3} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_when} {:close 0, :instruction integer_flush})
Best program: (integer_mult boolean_stackdepth exec_yank exec_swap (in2 exec_noop in3) (integer_dup integer_shove) integer_dup integer_shove integer_dup integer_shove in2 in1 integer_dup integer_shove exec_swap (integer_yankdup integer_dup integer_lte) (integer_dup integer_shove print_integer exec_yankdup) integer_fromboolean exec_stackdepth exec_eq boolean_rot integer_min exec_s () (boolean_not boolean_swap exec_yank integer_stackdepth integer_mod exec_when () integer_flush) ())
Errors: [0 1 0 1 0 0 0 0 1 0]
Total: 3
Mean: 0.3
Genome size: 38
Size: 47
Percent parens: 0.191
--- Population Statistics ---
Average total errors in population: 5.536
Median total errors in population: 5
Error averages by case: (0.388 0.57 0.923 0.57 0.389 0.859 0.388 0.067 0.841 0.541)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.078
Average program size in population (points): 50.089
Average percent parens in population: 0.198
Minimum age in population: 24.767578125
Maximum age in population: 27.78704833984375
Average age in population: 26.71104556274414
Median age in population: 26.78704833984375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 271
Genome diversity (% unique genomes):	 0.501
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 284
Syntactic diversity (% unique Push programs):	 0.476
Total error diversity:				 0.008
Error (vector) diversity:			 0.024
Behavioral diversity:				 0.085
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 6201813
--- Timings ---
Current time: 1559314372183 milliseconds
Total Time:          49.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        36.3 seconds, 73.9%
Fitness Testing:      8.3 seconds, 16.9%
Report:               4.4 seconds,  9.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Smallest problem report - generation 19
Test total error for best: 481
Test mean error for best: 0.48100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -40                 | Program output: -40                
Correct output: 67                  | Program output: 79                 
Correct output: -85                 | Program output: -85                
Correct output: 69                  | Program output: 69                 
Correct output: 30                  | Program output: 37                 
Correct output: 22                  | Program output: 22                 
Correct output: -51                 | Program output: -51                
Correct output: 25                  | Program output: 25                 
Correct output: -76                 | Program output: -76                
Correct output: 53                  | Program output: 57                 
Correct output: -60                 | Program output: -60                
Correct output: 86                  | Program output: 86                 
Correct output: 86                  | Program output: 86                 
Correct output: 35                  | Program output: 35                 
Correct output: 11                  | Program output: 11                 
Correct output: 13                  | Program output: 13                 
Correct output: 45                  | Program output: 45                 
Correct output: 25                  | Program output: 98                 
Correct output: 23                  | Program output: 64                 
Correct output: 6                   | Program output: 77                 
Correct output: 5                   | Program output: 5                  
Correct output: 1                   | Program output: 1                  
Correct output: 34                  | Program output: 99                 
Correct output: 34                  | Program output: 34                 
Correct output: 31                  | Program output: 32                 
Correct output: 34                  | Program output: 34                 
Correct output: 12                  | Program output: 12                 
Correct output: 3                   | Program output: 61                 
Correct output: 1                   | Program output: 1                  
Correct output: 21                  | Program output: 24                 
Correct output: 5                   | Program output: 12                 
Correct output: 3                   | Program output: 95                 
Correct output: 1                   | Program output: 1                  
Correct output: 63                  | Program output: 83                 
Correct output: 25                  | Program output: 25                 
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: -91                
Correct output: -97                 | Program output: -39                
Correct output: -85                 | Program output: -9                 
Correct output: -81                 | Program output: -72                
Correct output: 43                  | Program output: 65                 
Correct output: -74                 | Program output: -74                
Correct output: -75                 | Program output: 9                  
Correct output: -44                 | Program output: -44                
Correct output: -53                 | Program output: -8                 
Correct output: -64                 | Program output: -64                
Correct output: -87                 | Program output: -86                
Correct output: -5                  | Program output: -5                 
Correct output: -57                 | Program output: -51                
Correct output: -68                 | Program output: -25                
Correct output: -49                 | Program output: -2                 
Correct output: -61                 | Program output: -61                
Correct output: -86                 | Program output: -27                
Correct output: -30                 | Program output: -30                
Correct output: -70                 | Program output: -70                
Correct output: -83                 | Program output: -83                
Correct output: -70                 | Program output: -44                
Correct output: -59                 | Program output: -59                
Correct output: -92                 | Program output: -92                
Correct output: -67                 | Program output: -66                
Correct output: 23                  | Program output: 23                 
Correct output: -86                 | Program output: -72                
Correct output: -98                 | Program output: -98                
Correct output: -61                 | Program output: -61                
Correct output: -86                 | Program output: -86                
Correct output: -87                 | Program output: -87                
Correct output: -92                 | Program output: -92                
Correct output: -29                 | Program output: -29                
Correct output: -74                 | Program output: 0                  
Correct output: -82                 | Program output: -82                
Correct output: -83                 | Program output: -83                
Correct output: -5                  | Program output: -5                 
Correct output: -57                 | Program output: -12                
Correct output: -100                | Program output: -100               
Correct output: -33                 | Program output: 11                 
Correct output: -69                 | Program output: -21                
Correct output: -78                 | Program output: -78                
Correct output: -20                 | Program output: -20                
Correct output: -69                 | Program output: -69                
Correct output: -99                 | Program output: -99                
Correct output: -96                 | Program output: -96                
Correct output: -24                 | Program output: -24                
Correct output: -85                 | Program output: -85                
Correct output: -87                 | Program output: -87                
Correct output: -56                 | Program output: -56                
Correct output: -100                | Program output: -100               
Correct output: -25                 | Program output: -19                
Correct output: -33                 | Program output: -33                
Correct output: -86                 | Program output: 9                  
Correct output: -94                 | Program output: -93                
Correct output: -85                 | Program output: -85                
Correct output: -46                 | Program output: -46                
Correct output: -98                 | Program output: -98                
Correct output: -80                 | Program output: -80                
Correct output: -58                 | Program output: -58                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mult} {:close 2, :instruction exec_if} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_when} {:close 0, :instruction integer_flush})
Lexicase best program: (integer_mult exec_if () () exec_yank exec_swap (in2 in2 in3) (integer_dup integer_shove) integer_dup integer_shove integer_dup integer_shove in2 in1 integer_dup integer_shove exec_swap (in2 exec_yank exec_swap (in2 in3) (integer_dup integer_shove) integer_dup integer_shove) (integer_dup integer_shove in2 boolean_yank) integer_dup integer_shove integer_dup integer_yankdup integer_dup integer_lte integer_dup integer_shove print_integer exec_yankdup exec_dup () exec_stackdepth exec_eq boolean_rot integer_min exec_s () (boolean_not boolean_swap exec_yank integer_stackdepth integer_mod exec_when () integer_flush) ())
Lexicase best errors: [0 0 0 0 1 0 1 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 68
Percent parens: 0.206
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mult} {:close 2, :instruction exec_if} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_when} {:close 0, :instruction integer_flush})
Zero cases best program: (integer_mult exec_if () () exec_yank exec_swap (in2 in2 in3) (integer_dup integer_shove) integer_dup integer_shove integer_dup integer_shove in2 in1 integer_dup integer_shove exec_swap (in2 exec_yank exec_swap (in2 in3) (integer_dup integer_shove) integer_dup integer_shove) (integer_dup integer_shove in2 boolean_yank) integer_dup integer_shove integer_dup integer_yankdup integer_dup integer_lte integer_dup integer_shove print_integer exec_yankdup exec_dup () exec_stackdepth exec_eq boolean_rot integer_min exec_s () (boolean_not boolean_swap exec_yank integer_stackdepth integer_mod exec_when () integer_flush) ())
Zero cases best errors: [0 0 0 0 1 0 1 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 68
Percent parens: 0.206
--- Lexicase Population Statistics ---
Count of elite individuals by case: (391 524 469 444 1 665 1 664 823 140)
Population mean number of elite cases: 4.12
Count of perfect (error zero) individuals by case: (391 524 469 444 1 665 1 664 823 140)
Population mean number of perfect (error zero) cases: 4.12
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mult} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_when} {:close 0, :instruction integer_flush})
Best program: (integer_mult boolean_stackdepth exec_yank exec_swap (in2 in2 in3) (integer_dup integer_shove) integer_dup integer_shove integer_dup integer_shove in2 in1 integer_dup integer_shove exec_swap (in2 exec_yank exec_swap (in2 in3) (integer_dup integer_shove) integer_dup integer_shove) (integer_dup integer_shove in2 boolean_yank) integer_dup integer_shove integer_dup integer_yankdup integer_dup integer_lte integer_dup integer_shove print_integer exec_yankdup integer_fromboolean exec_stackdepth exec_eq boolean_rot integer_min exec_s () (boolean_not boolean_swap exec_yank integer_stackdepth integer_mod exec_when () integer_flush) ())
Errors: [0 0 0 0 1 0 1 0 0 1]
Total: 3
Mean: 0.3
Genome size: 54
Size: 65
Percent parens: 0.169
--- Population Statistics ---
Average total errors in population: 5.878
Median total errors in population: 6
Error averages by case: (0.609 0.476 0.531 0.556 0.999 0.335 0.999 0.336 0.177 0.86)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 44.522
Average program size in population (points): 55.58
Average percent parens in population: 0.199
Minimum age in population: 25.767578125
Maximum age in population: 29.64497375488281
Average age in population: 28.54074908447266
Median age in population: 28.50289916992188
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 98
Genome diversity (% unique genomes):	 0.565
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 104
Syntactic diversity (% unique Push programs):	 0.546
Total error diversity:				 0.008
Error (vector) diversity:			 0.062
Behavioral diversity:				 0.134
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 6647562
--- Timings ---
Current time: 1559314375090 milliseconds
Total Time:          51.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        38.3 seconds, 73.8%
Fitness Testing:      8.8 seconds, 16.9%
Report:               4.7 seconds,  9.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Smallest problem report - generation 20
Test total error for best: 554
Test mean error for best: 0.55400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -40                 | Program output: -40                
Correct output: 67                  | Program output: 67                 
Correct output: -85                 | Program output: -85                
Correct output: 69                  | Program output: 69                 
Correct output: 30                  | Program output: 30                 
Correct output: 22                  | Program output: 28                 
Correct output: -51                 | Program output: -51                
Correct output: 25                  | Program output: 53                 
Correct output: -76                 | Program output: -76                
Correct output: 53                  | Program output: 53                 
Correct output: -60                 | Program output: -60                
Correct output: 86                  | Program output: 86                 
Correct output: 86                  | Program output: 86                 
Correct output: 35                  | Program output: 35                 
Correct output: 11                  | Program output: 11                 
Correct output: 13                  | Program output: 13                 
Correct output: 45                  | Program output: 79                 
Correct output: 25                  | Program output: 87                 
Correct output: 23                  | Program output: 72                 
Correct output: 6                   | Program output: 17                 
Correct output: 5                   | Program output: 54                 
Correct output: 1                   | Program output: 42                 
Correct output: 34                  | Program output: 93                 
Correct output: 34                  | Program output: 80                 
Correct output: 31                  | Program output: 61                 
Correct output: 34                  | Program output: 50                 
Correct output: 12                  | Program output: 38                 
Correct output: 3                   | Program output: 23                 
Correct output: 1                   | Program output: 1                  
Correct output: 21                  | Program output: 24                 
Correct output: 5                   | Program output: 96                 
Correct output: 3                   | Program output: 43                 
Correct output: 1                   | Program output: 71                 
Correct output: 63                  | Program output: 64                 
Correct output: 25                  | Program output: 27                 
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: -91                
Correct output: -97                 | Program output: -39                
Correct output: -85                 | Program output: -9                 
Correct output: -81                 | Program output: -72                
Correct output: 43                  | Program output: 87                 
Correct output: -74                 | Program output: -74                
Correct output: -75                 | Program output: -75                
Correct output: -44                 | Program output: -44                
Correct output: -53                 | Program output: 65                 
Correct output: -64                 | Program output: -64                
Correct output: -87                 | Program output: -86                
Correct output: -5                  | Program output: -5                 
Correct output: -57                 | Program output: -51                
Correct output: -68                 | Program output: -25                
Correct output: -49                 | Program output: -2                 
Correct output: -61                 | Program output: -61                
Correct output: -86                 | Program output: -27                
Correct output: -30                 | Program output: 49                 
Correct output: -70                 | Program output: -70                
Correct output: -83                 | Program output: -83                
Correct output: -70                 | Program output: -44                
Correct output: -59                 | Program output: -59                
Correct output: -92                 | Program output: -92                
Correct output: -67                 | Program output: -66                
Correct output: 23                  | Program output: 54                 
Correct output: -86                 | Program output: -72                
Correct output: -98                 | Program output: -98                
Correct output: -61                 | Program output: -61                
Correct output: -86                 | Program output: -86                
Correct output: -87                 | Program output: -87                
Correct output: -92                 | Program output: -92                
Correct output: -29                 | Program output: 33                 
Correct output: -74                 | Program output: 0                  
Correct output: -82                 | Program output: 87                 
Correct output: -83                 | Program output: -83                
Correct output: -5                  | Program output: 61                 
Correct output: -57                 | Program output: -12                
Correct output: -100                | Program output: -100               
Correct output: -33                 | Program output: 83                 
Correct output: -69                 | Program output: -21                
Correct output: -78                 | Program output: -78                
Correct output: -20                 | Program output: -20                
Correct output: -69                 | Program output: -69                
Correct output: -99                 | Program output: 37                 
Correct output: -96                 | Program output: -96                
Correct output: -24                 | Program output: -24                
Correct output: -85                 | Program output: -85                
Correct output: -87                 | Program output: -87                
Correct output: -56                 | Program output: -56                
Correct output: -100                | Program output: -100               
Correct output: -25                 | Program output: -19                
Correct output: -33                 | Program output: 1                  
Correct output: -86                 | Program output: -86                
Correct output: -94                 | Program output: 33                 
Correct output: -85                 | Program output: 33                 
Correct output: -46                 | Program output: -46                
Correct output: -98                 | Program output: -98                
Correct output: -80                 | Program output: 50                 
Correct output: -58                 | Program output: 36                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mult} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_when} {:close 0, :instruction integer_flush})
Lexicase best program: (integer_mult boolean_stackdepth exec_yank exec_swap (print_integer in2 in3) (integer_dup integer_shove) exec_empty integer_shove integer_dup integer_shove in2 in1 integer_dup integer_shove exec_swap (in2 exec_yank exec_swap (in2 in3) (integer_dup integer_shove) integer_dup integer_shove) (integer_dup integer_shove in2 boolean_yank) integer_dup integer_shove integer_dup integer_yankdup integer_dup integer_lte integer_dup integer_shove print_integer exec_yankdup integer_fromboolean exec_stackdepth exec_eq boolean_rot integer_min exec_s () (boolean_not boolean_swap exec_yank integer_stackdepth integer_mod exec_when () integer_flush) ())
Lexicase best errors: [0 1 0 0 0 0 1 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 65
Percent parens: 0.169
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mult} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_when} {:close 0, :instruction integer_flush})
Zero cases best program: (integer_mult boolean_stackdepth exec_yank exec_swap (print_integer in2 in3) (integer_dup integer_shove) exec_empty integer_shove integer_dup integer_shove in2 in1 integer_dup integer_shove exec_swap (in2 exec_yank exec_swap (in2 in3) (integer_dup integer_shove) integer_dup integer_shove) (integer_dup integer_shove in2 boolean_yank) integer_dup integer_shove integer_dup integer_yankdup integer_dup integer_lte integer_dup integer_shove print_integer exec_yankdup integer_fromboolean exec_stackdepth exec_eq boolean_rot integer_min exec_s () (boolean_not boolean_swap exec_yank integer_stackdepth integer_mod exec_when () integer_flush) ())
Zero cases best errors: [0 1 0 0 0 0 1 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 65
Percent parens: 0.169
--- Lexicase Population Statistics ---
Count of elite individuals by case: (639 168 724 755 701 82 167 722 167 631)
Population mean number of elite cases: 4.76
Count of perfect (error zero) individuals by case: (639 168 724 755 701 82 167 722 167 631)
Population mean number of perfect (error zero) cases: 4.76
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mult} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_when} {:close 0, :instruction integer_flush})
Best program: (integer_mult boolean_stackdepth exec_yank exec_swap (in2 in2 in3) (integer_dup integer_shove) integer_dup integer_shove integer_dup integer_shove in2 in1 integer_dup integer_shove exec_swap (in2 exec_yank exec_swap (in2 in3) (integer_dup integer_shove) integer_dup integer_shove) (integer_dup integer_shove boolean_swap boolean_yank) integer_dup integer_shove integer_dup integer_yankdup integer_dup integer_lte integer_dup integer_shove print_integer integer_min exec_s () (boolean_not boolean_swap exec_yank integer_stackdepth integer_mod integer_fromboolean) (exec_stackdepth exec_eq boolean_rot integer_min exec_s () (boolean_not boolean_swap exec_yank integer_stackdepth integer_mod exec_when () integer_flush) ()))
Errors: [0 1 0 0 0 0 1 0 1 0]
Total: 3
Mean: 0.3
Genome size: 60
Size: 74
Percent parens: 0.189
--- Population Statistics ---
Average total errors in population: 5.244
Median total errors in population: 4
Error averages by case: (0.361 0.832 0.276 0.245 0.299 0.918 0.833 0.278 0.833 0.369)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.049
Average program size in population (points): 60.907
Average percent parens in population: 0.179
Minimum age in population: 28.38523864746094
Maximum age in population: 31.37546539306641
Average age in population: 30.26419898986816
Median age in population: 30.31785202026367
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 134
Genome diversity (% unique genomes):	 0.582
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 151
Syntactic diversity (% unique Push programs):	 0.548
Total error diversity:				 0.008
Error (vector) diversity:			 0.037
Behavioral diversity:				 0.194
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 7161196
--- Timings ---
Current time: 1559314378111 milliseconds
Total Time:          54.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        40.3 seconds, 73.3%
Fitness Testing:      9.4 seconds, 17.1%
Report:               5.2 seconds,  9.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Smallest problem report - generation 21
Test total error for best: 486
Test mean error for best: 0.48600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -40                 | Program output: -40                
Correct output: 67                  | Program output: 79                 
Correct output: -85                 | Program output: -85                
Correct output: 69                  | Program output: 69                 
Correct output: 30                  | Program output: 37                 
Correct output: 22                  | Program output: 22                 
Correct output: -51                 | Program output: -51                
Correct output: 25                  | Program output: 25                 
Correct output: -76                 | Program output: -76                
Correct output: 53                  | Program output: 57                 
Correct output: -60                 | Program output: -60                
Correct output: 86                  | Program output: 86                 
Correct output: 86                  | Program output: 86                 
Correct output: 35                  | Program output: 35                 
Correct output: 11                  | Program output: 11                 
Correct output: 13                  | Program output: 13                 
Correct output: 45                  | Program output: 45                 
Correct output: 25                  | Program output: 98                 
Correct output: 23                  | Program output: 64                 
Correct output: 6                   | Program output: 17                 
Correct output: 5                   | Program output: 5                  
Correct output: 1                   | Program output: 1                  
Correct output: 34                  | Program output: 99                 
Correct output: 34                  | Program output: 34                 
Correct output: 31                  | Program output: 32                 
Correct output: 34                  | Program output: 34                 
Correct output: 12                  | Program output: 38                 
Correct output: 3                   | Program output: 61                 
Correct output: 1                   | Program output: 1                  
Correct output: 21                  | Program output: 24                 
Correct output: 5                   | Program output: 96                 
Correct output: 3                   | Program output: 95                 
Correct output: 1                   | Program output: 1                  
Correct output: 63                  | Program output: 83                 
Correct output: 25                  | Program output: 25                 
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: -91                
Correct output: -97                 | Program output: -39                
Correct output: -85                 | Program output: -9                 
Correct output: -81                 | Program output: -72                
Correct output: 43                  | Program output: 65                 
Correct output: -74                 | Program output: -74                
Correct output: -75                 | Program output: 9                  
Correct output: -44                 | Program output: -44                
Correct output: -53                 | Program output: -8                 
Correct output: -64                 | Program output: -64                
Correct output: -87                 | Program output: -86                
Correct output: -5                  | Program output: -5                 
Correct output: -57                 | Program output: -51                
Correct output: -68                 | Program output: -25                
Correct output: -49                 | Program output: -2                 
Correct output: -61                 | Program output: -61                
Correct output: -86                 | Program output: -27                
Correct output: -30                 | Program output: -30                
Correct output: -70                 | Program output: -70                
Correct output: -83                 | Program output: -83                
Correct output: -70                 | Program output: -44                
Correct output: -59                 | Program output: -59                
Correct output: -92                 | Program output: -92                
Correct output: -67                 | Program output: -66                
Correct output: 23                  | Program output: 23                 
Correct output: -86                 | Program output: -72                
Correct output: -98                 | Program output: -98                
Correct output: -61                 | Program output: -61                
Correct output: -86                 | Program output: -86                
Correct output: -87                 | Program output: -87                
Correct output: -92                 | Program output: -92                
Correct output: -29                 | Program output: -29                
Correct output: -74                 | Program output: 0                  
Correct output: -82                 | Program output: -82                
Correct output: -83                 | Program output: -83                
Correct output: -5                  | Program output: -5                 
Correct output: -57                 | Program output: -12                
Correct output: -100                | Program output: -100               
Correct output: -33                 | Program output: 3                  
Correct output: -69                 | Program output: -21                
Correct output: -78                 | Program output: -78                
Correct output: -20                 | Program output: -20                
Correct output: -69                 | Program output: 100                
Correct output: -99                 | Program output: -99                
Correct output: -96                 | Program output: -96                
Correct output: -24                 | Program output: -24                
Correct output: -85                 | Program output: -85                
Correct output: -87                 | Program output: -87                
Correct output: -56                 | Program output: -56                
Correct output: -100                | Program output: -100               
Correct output: -25                 | Program output: -19                
Correct output: -33                 | Program output: -33                
Correct output: -86                 | Program output: -86                
Correct output: -94                 | Program output: -93                
Correct output: -85                 | Program output: -85                
Correct output: -46                 | Program output: -46                
Correct output: -98                 | Program output: -98                
Correct output: -80                 | Program output: -80                
Correct output: -58                 | Program output: -58                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mult} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 1, :instruction exec_s} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_when} {:close 0, :instruction integer_flush})
Lexicase best program: (integer_mult boolean_stackdepth exec_yank exec_swap (in2 in2 in3) (integer_dup integer_shove) integer_dup boolean_dup_items integer_dup integer_shove in2 in1 integer_dup integer_shove exec_swap (in2 exec_yank exec_swap (in2 in3) (integer_dup integer_shove) integer_dup integer_shove integer_dup integer_shove in2 boolean_yank integer_dup integer_shove) (integer_dup integer_yankdup integer_dup integer_lte) integer_dup integer_shove print_integer exec_yankdup integer_fromboolean exec_stackdepth exec_eq boolean_rot integer_min exec_s () (integer_fromboolean boolean_swap boolean_dup_times integer_stackdepth integer_mod exec_when () integer_flush) ())
Lexicase best errors: [0 0 0 1 0 0 1 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 65
Percent parens: 0.169
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mult} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 1, :instruction exec_s} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_when} {:close 0, :instruction integer_flush})
Zero cases best program: (integer_mult boolean_stackdepth exec_yank exec_swap (in2 in2 in3) (integer_dup integer_shove) integer_dup boolean_dup_items integer_dup integer_shove in2 in1 integer_dup integer_shove exec_swap (in2 exec_yank exec_swap (in2 in3) (integer_dup integer_shove) integer_dup integer_shove integer_dup integer_shove in2 boolean_yank integer_dup integer_shove) (integer_dup integer_yankdup integer_dup integer_lte) integer_dup integer_shove print_integer exec_yankdup integer_fromboolean exec_stackdepth exec_eq boolean_rot integer_min exec_s () (integer_fromboolean boolean_swap boolean_dup_times integer_stackdepth integer_mod exec_when () integer_flush) ())
Zero cases best errors: [0 0 0 1 0 0 1 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 65
Percent parens: 0.169
--- Lexicase Population Statistics ---
Count of elite individuals by case: (229 485 899 79 864 493 429 72 72 295)
Population mean number of elite cases: 3.92
Count of perfect (error zero) individuals by case: (229 485 899 79 864 493 429 72 72 295)
Population mean number of perfect (error zero) cases: 3.92
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mult} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 1, :instruction exec_s} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_when} {:close 0, :instruction integer_flush})
Best program: (integer_mult boolean_stackdepth exec_yank exec_swap (in2 in2 in3) (integer_dup integer_shove) integer_dup boolean_dup_items integer_dup integer_shove in2 in1 integer_dup integer_shove exec_swap (in2 exec_yank exec_swap (in2 in3) (integer_dup integer_shove) integer_dup integer_shove integer_dup integer_shove in2 boolean_yank integer_dup integer_shove) (integer_dup integer_yankdup integer_dup integer_lte) integer_dup integer_shove print_integer exec_yankdup integer_fromboolean exec_stackdepth exec_eq boolean_rot integer_min exec_s () (integer_fromboolean boolean_swap boolean_dup_times integer_stackdepth integer_mod exec_when () integer_flush) ())
Errors: [0 0 0 1 0 0 1 0 0 0]
Total: 2
Mean: 0.2
Genome size: 54
Size: 65
Percent parens: 0.169
--- Population Statistics ---
Average total errors in population: 6.083
Median total errors in population: 5
Error averages by case: (0.771 0.515 0.101 0.921 0.136 0.507 0.571 0.928 0.928 0.705)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.752
Average program size in population (points): 62.87
Average percent parens in population: 0.195
Minimum age in population: 29.9931640625
Maximum age in population: 33.30442810058594
Average age in population: 32.04350080490112
Median age in population: 32.05442810058594
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 186
Genome diversity (% unique genomes):	 0.579
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 194
Syntactic diversity (% unique Push programs):	 0.562
Total error diversity:				 0.009
Error (vector) diversity:			 0.068
Behavioral diversity:				 0.167
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 7691068
--- Timings ---
Current time: 1559314381027 milliseconds
Total Time:          57.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        42.1 seconds, 72.8%
Fitness Testing:     10.0 seconds, 17.2%
Report:               5.7 seconds,  9.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Smallest problem report - generation 22
Test total error for best: 535
Test mean error for best: 0.53500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -40                 | Program output: -40                
Correct output: 67                  | Program output: 67                 
Correct output: -85                 | Program output: -85                
Correct output: 69                  | Program output: 69                 
Correct output: 30                  | Program output: 30                 
Correct output: 22                  | Program output: 22                 
Correct output: -51                 | Program output: -51                
Correct output: 25                  | Program output: 25                 
Correct output: -76                 | Program output: -76                
Correct output: 53                  | Program output: 53                 
Correct output: -60                 | Program output: -60                
Correct output: 86                  | Program output: 86                 
Correct output: 86                  | Program output: 86                 
Correct output: 35                  | Program output: 35                 
Correct output: 11                  | Program output: 11                 
Correct output: 13                  | Program output: 13                 
Correct output: 45                  | Program output: 79                 
Correct output: 25                  | Program output: 87                 
Correct output: 23                  | Program output: 72                 
Correct output: 6                   | Program output: 0                  
Correct output: 5                   | Program output: 54                 
Correct output: 1                   | Program output: 1                  
Correct output: 34                  | Program output: 93                 
Correct output: 34                  | Program output: 80                 
Correct output: 31                  | Program output: 61                 
Correct output: 34                  | Program output: 50                 
Correct output: 12                  | Program output: 0                  
Correct output: 3                   | Program output: 23                 
Correct output: 1                   | Program output: 1                  
Correct output: 21                  | Program output: 21                 
Correct output: 5                   | Program output: 0                  
Correct output: 3                   | Program output: 43                 
Correct output: 1                   | Program output: 1                  
Correct output: 63                  | Program output: 64                 
Correct output: 25                  | Program output: 25                 
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: -91                
Correct output: -97                 | Program output: -39                
Correct output: -85                 | Program output: -9                 
Correct output: -81                 | Program output: -72                
Correct output: 43                  | Program output: 87                 
Correct output: -74                 | Program output: -74                
Correct output: -75                 | Program output: 9                  
Correct output: -44                 | Program output: -44                
Correct output: -53                 | Program output: -8                 
Correct output: -64                 | Program output: -64                
Correct output: -87                 | Program output: -86                
Correct output: -5                  | Program output: -5                 
Correct output: -57                 | Program output: -51                
Correct output: -68                 | Program output: -25                
Correct output: -49                 | Program output: -2                 
Correct output: -61                 | Program output: -61                
Correct output: -86                 | Program output: -27                
Correct output: -30                 | Program output: 49                 
Correct output: -70                 | Program output: -70                
Correct output: -83                 | Program output: -83                
Correct output: -70                 | Program output: -44                
Correct output: -59                 | Program output: -59                
Correct output: -92                 | Program output: -92                
Correct output: -67                 | Program output: -66                
Correct output: 23                  | Program output: 0                  
Correct output: -86                 | Program output: -72                
Correct output: -98                 | Program output: -98                
Correct output: -61                 | Program output: -61                
Correct output: -86                 | Program output: -86                
Correct output: -87                 | Program output: -87                
Correct output: -92                 | Program output: -92                
Correct output: -29                 | Program output: -29                
Correct output: -74                 | Program output: -74                
Correct output: -82                 | Program output: 87                 
Correct output: -83                 | Program output: -83                
Correct output: -5                  | Program output: 61                 
Correct output: -57                 | Program output: -12                
Correct output: -100                | Program output: -100               
Correct output: -33                 | Program output: 83                 
Correct output: -69                 | Program output: -21                
Correct output: -78                 | Program output: -78                
Correct output: -20                 | Program output: -20                
Correct output: -69                 | Program output: 14                 
Correct output: -99                 | Program output: 37                 
Correct output: -96                 | Program output: -96                
Correct output: -24                 | Program output: -24                
Correct output: -85                 | Program output: -85                
Correct output: -87                 | Program output: -87                
Correct output: -56                 | Program output: -56                
Correct output: -100                | Program output: -100               
Correct output: -25                 | Program output: -19                
Correct output: -33                 | Program output: -33                
Correct output: -86                 | Program output: -86                
Correct output: -94                 | Program output: -93                
Correct output: -85                 | Program output: 33                 
Correct output: -46                 | Program output: -46                
Correct output: -98                 | Program output: -98                
Correct output: -80                 | Program output: 50                 
Correct output: -58                 | Program output: 36                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mult} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 1, :instruction exec_s} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_when} {:close 0, :instruction integer_flush})
Lexicase best program: (integer_mult boolean_stackdepth exec_yank exec_swap (in2 in2 in3) (boolean_stackdepth) exec_yank exec_swap (in2 in2 in3) (integer_dup integer_shove) integer_dup boolean_dup_items integer_dup integer_shove in2 in1 integer_dup integer_shove exec_swap (in2 exec_yank exec_swap (in2 in3) (integer_dup integer_shove) integer_dup integer_shove integer_dup integer_shove in2 boolean_yank integer_dup integer_shove) (integer_dup integer_yankdup integer_dup integer_lte) integer_dup integer_shove print_integer exec_yankdup integer_fromboolean exec_stackdepth exec_eq boolean_rot integer_min exec_s () (integer_fromboolean boolean_swap boolean_dup_times integer_stackdepth integer_mod exec_when () integer_flush) ())
Lexicase best errors: [0 0 0 0 1 1 0 0 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 73
Percent parens: 0.178
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mult} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 1, :instruction exec_s} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_when} {:close 0, :instruction integer_flush})
Zero cases best program: (integer_mult boolean_stackdepth exec_yank exec_swap (in2 in2 in3) (boolean_stackdepth) exec_yank exec_swap (in2 in2 in3) (integer_dup integer_shove) integer_dup boolean_dup_items integer_dup integer_shove in2 in1 integer_dup integer_shove exec_swap (in2 exec_yank exec_swap (in2 in3) (integer_dup integer_shove) integer_dup integer_shove integer_dup integer_shove in2 boolean_yank integer_dup integer_shove) (integer_dup integer_yankdup integer_dup integer_lte) integer_dup integer_shove print_integer exec_yankdup integer_fromboolean exec_stackdepth exec_eq boolean_rot integer_min exec_s () (integer_fromboolean boolean_swap boolean_dup_times integer_stackdepth integer_mod exec_when () integer_flush) ())
Zero cases best errors: [0 0 0 0 1 1 0 0 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 73
Percent parens: 0.178
--- Lexicase Population Statistics ---
Count of elite individuals by case: (390 751 705 872 1000 91 336 828 58 1)
Population mean number of elite cases: 5.03
Count of perfect (error zero) individuals by case: (390 751 705 872 0 91 336 828 58 1)
Population mean number of perfect (error zero) cases: 4.03
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mult} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 1, :instruction exec_s} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_when} {:close 0, :instruction integer_flush})
Best program: (integer_mult boolean_stackdepth exec_yank exec_swap (in2 in2 in3) (boolean_stackdepth) exec_yank exec_swap (in2 in2 in3) (integer_dup integer_shove) integer_dup boolean_dup_items integer_dup integer_shove in2 in1 integer_dup integer_shove exec_swap (in2 exec_yank exec_swap (in2 in3) (integer_dup integer_shove) integer_dup integer_shove integer_dup integer_shove in2 boolean_yank integer_dup integer_shove) (integer_dup integer_yankdup integer_dup integer_lte) integer_dup integer_shove print_integer exec_yankdup integer_fromboolean exec_stackdepth exec_eq boolean_rot integer_min exec_s () (integer_fromboolean boolean_swap boolean_dup_times integer_stackdepth integer_mod exec_when () integer_flush) ())
Errors: [0 0 0 0 1 1 0 0 1 1]
Total: 4
Mean: 0.4
Genome size: 60
Size: 73
Percent parens: 0.178
--- Population Statistics ---
Average total errors in population: 5.968
Median total errors in population: 6
Error averages by case: (0.61 0.249 0.295 0.128 1.0 0.909 0.664 0.172 0.942 0.999)
Error minima by case: (0 0 0 0 1 0 0 0 0 0)
Average genome size in population (length): 54.536
Average program size in population (points): 65.875
Average percent parens in population: 0.172
Minimum age in population: 31.7431640625
Maximum age in population: 34.85527229309082
Average age in population: 33.87795886802673
Median age in population: 33.77622985839844
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 210
Genome diversity (% unique genomes):	 0.614
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 220
Syntactic diversity (% unique Push programs):	 0.59
Total error diversity:				 0.007
Error (vector) diversity:			 0.052
Behavioral diversity:				 0.184
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 8256607
--- Timings ---
Current time: 1559314384057 milliseconds
Total Time:          60.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        44.1 seconds, 72.4%
Fitness Testing:     10.6 seconds, 17.4%
Report:               6.1 seconds, 10.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
;;******************************
;; -*- Smallest problem report - generation 23
Test total error for best: 448
Test mean error for best: 0.44800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -40                 | Program output: -40                
Correct output: 67                  | Program output: 67                 
Correct output: -85                 | Program output: -85                
Correct output: 69                  | Program output: 69                 
Correct output: 30                  | Program output: 30                 
Correct output: 22                  | Program output: 22                 
Correct output: -51                 | Program output: -51                
Correct output: 25                  | Program output: 53                 
Correct output: -76                 | Program output: -76                
Correct output: 53                  | Program output: 53                 
Correct output: -60                 | Program output: -60                
Correct output: 86                  | Program output: 86                 
Correct output: 86                  | Program output: 86                 
Correct output: 35                  | Program output: 35                 
Correct output: 11                  | Program output: 11                 
Correct output: 13                  | Program output: 13                 
Correct output: 45                  | Program output: 79                 
Correct output: 25                  | Program output: 87                 
Correct output: 23                  | Program output: 72                 
Correct output: 6                   | Program output: 17                 
Correct output: 5                   | Program output: 54                 
Correct output: 1                   | Program output: 42                 
Correct output: 34                  | Program output: 93                 
Correct output: 34                  | Program output: 80                 
Correct output: 31                  | Program output: 61                 
Correct output: 34                  | Program output: 50                 
Correct output: 12                  | Program output: 12                 
Correct output: 3                   | Program output: 23                 
Correct output: 1                   | Program output: 1                  
Correct output: 21                  | Program output: 21                 
Correct output: 5                   | Program output: 12                 
Correct output: 3                   | Program output: 43                 
Correct output: 1                   | Program output: 71                 
Correct output: 63                  | Program output: 64                 
Correct output: 25                  | Program output: 27                 
Correct output: -97                 | Program output: -10                
Correct output: -91                 | Program output: -12                
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -66                
Correct output: -81                 | Program output: -81                
Correct output: 43                  | Program output: 87                 
Correct output: -74                 | Program output: -22                
Correct output: -75                 | Program output: -75                
Correct output: -44                 | Program output: -44                
Correct output: -53                 | Program output: -8                 
Correct output: -64                 | Program output: -64                
Correct output: -87                 | Program output: -87                
Correct output: -5                  | Program output: -4                 
Correct output: -57                 | Program output: -57                
Correct output: -68                 | Program output: -68                
Correct output: -49                 | Program output: -49                
Correct output: -61                 | Program output: -61                
Correct output: -86                 | Program output: -55                
Correct output: -30                 | Program output: -30                
Correct output: -70                 | Program output: -9                 
Correct output: -83                 | Program output: -69                
Correct output: -70                 | Program output: -44                
Correct output: -59                 | Program output: -49                
Correct output: -92                 | Program output: -34                
Correct output: -67                 | Program output: -66                
Correct output: 23                  | Program output: 54                 
Correct output: -86                 | Program output: -86                
Correct output: -98                 | Program output: -14                
Correct output: -61                 | Program output: -61                
Correct output: -86                 | Program output: -53                
Correct output: -87                 | Program output: -74                
Correct output: -92                 | Program output: -92                
Correct output: -29                 | Program output: -29                
Correct output: -74                 | Program output: -74                
Correct output: -82                 | Program output: -82                
Correct output: -83                 | Program output: -83                
Correct output: -5                  | Program output: -5                 
Correct output: -57                 | Program output: -57                
Correct output: -100                | Program output: -3                 
Correct output: -33                 | Program output: 83                 
Correct output: -69                 | Program output: -69                
Correct output: -78                 | Program output: -78                
Correct output: -20                 | Program output: -20                
Correct output: -69                 | Program output: -69                
Correct output: -99                 | Program output: -99                
Correct output: -96                 | Program output: -48                
Correct output: -24                 | Program output: -24                
Correct output: -85                 | Program output: -85                
Correct output: -87                 | Program output: -59                
Correct output: -56                 | Program output: -54                
Correct output: -100                | Program output: -7                 
Correct output: -25                 | Program output: -19                
Correct output: -33                 | Program output: -33                
Correct output: -86                 | Program output: -86                
Correct output: -94                 | Program output: -93                
Correct output: -85                 | Program output: -85                
Correct output: -46                 | Program output: -17                
Correct output: -98                 | Program output: -20                
Correct output: -80                 | Program output: -80                
Correct output: -58                 | Program output: -58                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mult} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 1, :instruction exec_s} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_when} {:close 0, :instruction integer_flush})
Lexicase best program: (integer_mult boolean_stackdepth exec_yank exec_swap (in2 in2 in3) (integer_dup integer_shove) integer_dup boolean_dup_items integer_dup integer_shove in2 in1 integer_dup integer_shove exec_swap (in2 exec_yank exec_swap (in2 in3) (integer_dup integer_shove) integer_dup integer_shove integer_dup integer_shove in2 boolean_yank integer_dup integer_shove integer_dup integer_yankdup integer_dup integer_lte) (integer_dup integer_shove print_integer exec_yankdup integer_fromboolean) exec_stackdepth exec_eq boolean_rot integer_min exec_s () (integer_fromboolean boolean_swap boolean_dup_times exec_s (integer_mod exec_when () integer_flush) () ()) ())
Lexicase best errors: [1 0 0 0 0 0 0 1 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 68
Percent parens: 0.206
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mult} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 1, :instruction exec_s} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_when} {:close 0, :instruction integer_flush})
Zero cases best program: (integer_mult boolean_stackdepth exec_yank exec_swap (in2 in2 in3) (integer_dup integer_shove) integer_dup boolean_dup_items integer_dup integer_shove in2 in1 integer_dup integer_shove exec_swap (in2 exec_yank exec_swap (in2 in3) (integer_dup integer_shove) integer_dup integer_shove integer_dup integer_shove in2 boolean_yank integer_dup integer_shove integer_dup integer_yankdup integer_dup integer_lte) (integer_dup integer_shove print_integer exec_yankdup integer_fromboolean) exec_stackdepth exec_eq boolean_rot integer_min exec_s () (integer_fromboolean boolean_swap boolean_dup_times exec_s (integer_mod exec_when () integer_flush) () ()) ())
Zero cases best errors: [1 0 0 0 0 0 0 1 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 68
Percent parens: 0.206
--- Lexicase Population Statistics ---
Count of elite individuals by case: (15 277 758 542 886 767 387 405 928 183)
Population mean number of elite cases: 5.15
Count of perfect (error zero) individuals by case: (15 277 758 542 886 767 387 405 928 183)
Population mean number of perfect (error zero) cases: 5.15
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mult} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 1, :instruction exec_s} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_when} {:close 0, :instruction integer_flush})
Best program: (integer_mult boolean_stackdepth exec_yank exec_swap (in2 in2 in3) (integer_dup boolean_xor) integer_dup integer_shove integer_dup integer_shove in2 in3 integer_dup integer_shove exec_empty integer_shove integer_dup integer_shove in2 in1 integer_dup integer_shove exec_swap (in2 exec_yank integer_dup integer_shove in2 boolean_yank integer_dup integer_shove) (integer_dup exec_s_when_autoconstructing (integer_dup integer_lte) (integer_dup integer_shove print_integer exec_yankdup) (integer_fromboolean) exec_stackdepth exec_eq boolean_rot integer_min exec_s () (integer_fromboolean boolean_swap boolean_dup_times integer_stackdepth integer_mod exec_when () integer_flush) ()))
Errors: [1 0 0 0 0 0 0 1 0 1]
Total: 3
Mean: 0.3
Genome size: 55
Size: 67
Percent parens: 0.179
--- Population Statistics ---
Average total errors in population: 4.852
Median total errors in population: 4
Error averages by case: (0.985 0.723 0.242 0.458 0.114 0.233 0.613 0.595 0.072 0.817)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 56.106
Average program size in population (points): 67.595
Average percent parens in population: 0.169
Minimum age in population: 32.8681640625
Maximum age in population: 36.81392097473145
Average age in population: 35.50001454257965
Median age in population: 35.56514263153076
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 101
Genome diversity (% unique genomes):	 0.63
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 105
Syntactic diversity (% unique Push programs):	 0.608
Total error diversity:				 0.008
Error (vector) diversity:			 0.064
Behavioral diversity:				 0.19
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 8848792
--- Timings ---
Current time: 1559314387109 milliseconds
Total Time:          63.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        46.0 seconds, 72.0%
Fitness Testing:     11.3 seconds, 17.6%
Report:               6.5 seconds, 10.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
;;******************************
;; -*- Smallest problem report - generation 24
Test total error for best: 460
Test mean error for best: 0.46000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -40                 | Program output: -40                
Correct output: 67                  | Program output: 79                 
Correct output: -85                 | Program output: -85                
Correct output: 69                  | Program output: 69                 
Correct output: 30                  | Program output: 37                 
Correct output: 22                  | Program output: 28                 
Correct output: -51                 | Program output: -51                
Correct output: 25                  | Program output: 25                 
Correct output: -76                 | Program output: -76                
Correct output: 53                  | Program output: 57                 
Correct output: -60                 | Program output: -60                
Correct output: 86                  | Program output: 86                 
Correct output: 86                  | Program output: 86                 
Correct output: 35                  | Program output: 35                 
Correct output: 11                  | Program output: 11                 
Correct output: 13                  | Program output: 24                 
Correct output: 45                  | Program output: 45                 
Correct output: 25                  | Program output: 98                 
Correct output: 23                  | Program output: 64                 
Correct output: 6                   | Program output: 64                 
Correct output: 5                   | Program output: 5                  
Correct output: 1                   | Program output: 1                  
Correct output: 34                  | Program output: 99                 
Correct output: 34                  | Program output: 34                 
Correct output: 31                  | Program output: 32                 
Correct output: 34                  | Program output: 34                 
Correct output: 12                  | Program output: 75                 
Correct output: 3                   | Program output: 61                 
Correct output: 1                   | Program output: 63                 
Correct output: 21                  | Program output: 24                 
Correct output: 5                   | Program output: 5                  
Correct output: 3                   | Program output: 95                 
Correct output: 1                   | Program output: 1                  
Correct output: 63                  | Program output: 83                 
Correct output: 25                  | Program output: 25                 
Correct output: -97                 | Program output: -10                
Correct output: -91                 | Program output: -12                
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -66                
Correct output: -81                 | Program output: -81                
Correct output: 43                  | Program output: 65                 
Correct output: -74                 | Program output: -22                
Correct output: -75                 | Program output: -75                
Correct output: -44                 | Program output: -44                
Correct output: -53                 | Program output: -8                 
Correct output: -64                 | Program output: -64                
Correct output: -87                 | Program output: -87                
Correct output: -5                  | Program output: -4                 
Correct output: -57                 | Program output: -57                
Correct output: -68                 | Program output: -68                
Correct output: -49                 | Program output: -49                
Correct output: -61                 | Program output: -61                
Correct output: -86                 | Program output: -55                
Correct output: -30                 | Program output: -30                
Correct output: -70                 | Program output: -9                 
Correct output: -83                 | Program output: -69                
Correct output: -70                 | Program output: -44                
Correct output: -59                 | Program output: -49                
Correct output: -92                 | Program output: -34                
Correct output: -67                 | Program output: -66                
Correct output: 23                  | Program output: 23                 
Correct output: -86                 | Program output: -86                
Correct output: -98                 | Program output: -14                
Correct output: -61                 | Program output: -61                
Correct output: -86                 | Program output: -53                
Correct output: -87                 | Program output: -74                
Correct output: -92                 | Program output: -92                
Correct output: -29                 | Program output: -29                
Correct output: -74                 | Program output: -74                
Correct output: -82                 | Program output: -82                
Correct output: -83                 | Program output: -83                
Correct output: -5                  | Program output: -5                 
Correct output: -57                 | Program output: -57                
Correct output: -100                | Program output: -3                 
Correct output: -33                 | Program output: 11                 
Correct output: -69                 | Program output: -69                
Correct output: -78                 | Program output: -78                
Correct output: -20                 | Program output: -20                
Correct output: -69                 | Program output: -69                
Correct output: -99                 | Program output: -99                
Correct output: -96                 | Program output: -48                
Correct output: -24                 | Program output: -24                
Correct output: -85                 | Program output: -85                
Correct output: -87                 | Program output: -59                
Correct output: -56                 | Program output: -54                
Correct output: -100                | Program output: -7                 
Correct output: -25                 | Program output: -19                
Correct output: -33                 | Program output: -33                
Correct output: -86                 | Program output: -86                
Correct output: -94                 | Program output: -93                
Correct output: -85                 | Program output: -85                
Correct output: -46                 | Program output: -17                
Correct output: -98                 | Program output: -20                
Correct output: -80                 | Program output: -80                
Correct output: -58                 | Program output: -58                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mult} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 1, :instruction exec_s} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_when} {:close 0, :instruction integer_flush})
Lexicase best program: (integer_mult boolean_stackdepth exec_yank exec_swap (print_integer in2 in3) (integer_dup integer_shove) integer_dup integer_shove integer_dup integer_shove in2 in1 integer_dup integer_shove exec_swap (boolean_pop exec_yank exec_swap (in2 in3) (exec_swap (in2 in3) (integer_dup integer_shove) integer_dup integer_shove integer_dup integer_shove in2 boolean_yank integer_dup integer_shove) integer_dup integer_yankdup integer_dup integer_lte) (integer_dup integer_shove print_integer exec_yankdup) integer_fromboolean exec_stackdepth exec_eq boolean_rot integer_min exec_s () (integer_fromboolean boolean_swap boolean_dup_times integer_stackdepth integer_mod exec_when () integer_flush) ())
Lexicase best errors: [0 0 1 0 0 0 1 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 70
Percent parens: 0.186
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mult} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 1, :instruction exec_s} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_when} {:close 0, :instruction integer_flush})
Zero cases best program: (integer_mult boolean_stackdepth exec_yank exec_swap (print_integer in2 in3) (integer_dup integer_shove) integer_dup integer_shove integer_dup integer_shove in2 in1 integer_dup integer_shove exec_swap (boolean_pop exec_yank exec_swap (in2 in3) (exec_swap (in2 in3) (integer_dup integer_shove) integer_dup integer_shove integer_dup integer_shove in2 boolean_yank integer_dup integer_shove) integer_dup integer_yankdup integer_dup integer_lte) (integer_dup integer_shove print_integer exec_yankdup) integer_fromboolean exec_stackdepth exec_eq boolean_rot integer_min exec_s () (integer_fromboolean boolean_swap boolean_dup_times integer_stackdepth integer_mod exec_when () integer_flush) ())
Zero cases best errors: [0 0 1 0 0 0 1 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 70
Percent parens: 0.186
--- Lexicase Population Statistics ---
Count of elite individuals by case: (141 858 144 260 378 207 33 113 866 210)
Population mean number of elite cases: 3.21
Count of perfect (error zero) individuals by case: (141 858 144 260 378 207 33 113 866 210)
Population mean number of perfect (error zero) cases: 3.21
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mult} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 1, :instruction exec_s} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_when} {:close 0, :instruction integer_flush})
Best program: (integer_mult boolean_stackdepth exec_yank exec_swap (print_integer in2 in3) (integer_dup integer_shove) integer_dup integer_shove integer_dup integer_shove in2 in1 integer_dup integer_shove exec_swap (boolean_pop exec_yank exec_swap (in2 in3) (exec_swap (in2 in3) (integer_dup integer_shove) integer_dup integer_shove integer_dup integer_shove in2 boolean_yank integer_dup integer_shove) integer_dup integer_yankdup integer_dup integer_lte) (integer_dup integer_shove print_integer exec_yankdup) integer_fromboolean exec_stackdepth exec_eq boolean_rot integer_min exec_s () (integer_fromboolean boolean_swap boolean_dup_times integer_stackdepth integer_mod exec_when () integer_flush) ())
Errors: [0 0 1 0 0 0 1 0 0 0]
Total: 2
Mean: 0.2
Genome size: 57
Size: 70
Percent parens: 0.186
--- Population Statistics ---
Average total errors in population: 6.79
Median total errors in population: 7
Error averages by case: (0.859 0.142 0.856 0.74 0.622 0.793 0.967 0.887 0.134 0.79)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 57.533
Average program size in population (points): 68.854
Average percent parens in population: 0.163
Minimum age in population: 34.58507919311523
Maximum age in population: 38.5999174118042
Average age in population: 37.34775288391113
Median age in population: 37.38591384887695
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 38
Genome diversity (% unique genomes):	 0.677
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 40
Syntactic diversity (% unique Push programs):	 0.655
Total error diversity:				 0.009
Error (vector) diversity:			 0.068
Behavioral diversity:				 0.309
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 9441235
--- Timings ---
Current time: 1559314390212 milliseconds
Total Time:          67.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        48.0 seconds, 71.6%
Fitness Testing:     11.9 seconds, 17.8%
Report:               7.0 seconds, 10.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
;;******************************
;; -*- Smallest problem report - generation 25
Test total error for best: 487
Test mean error for best: 0.48700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -40                 | Program output: -40                
Correct output: 67                  | Program output: 79                 
Correct output: -85                 | Program output: -85                
Correct output: 69                  | Program output: 69                 
Correct output: 30                  | Program output: 37                 
Correct output: 22                  | Program output: 28                 
Correct output: -51                 | Program output: -51                
Correct output: 25                  | Program output: 25                 
Correct output: -76                 | Program output: -76                
Correct output: 53                  | Program output: 57                 
Correct output: -60                 | Program output: -60                
Correct output: 86                  | Program output: 86                 
Correct output: 86                  | Program output: 86                 
Correct output: 35                  | Program output: 35                 
Correct output: 11                  | Program output: 11                 
Correct output: 13                  | Program output: 24                 
Correct output: 45                  | Program output: 45                 
Correct output: 25                  | Program output: 98                 
Correct output: 23                  | Program output: 64                 
Correct output: 6                   | Program output: 64                 
Correct output: 5                   | Program output: 5                  
Correct output: 1                   | Program output: 42                 
Correct output: 34                  | Program output: 99                 
Correct output: 34                  | Program output: 34                 
Correct output: 31                  | Program output: 32                 
Correct output: 34                  | Program output: 34                 
Correct output: 12                  | Program output: 12                 
Correct output: 3                   | Program output: 61                 
Correct output: 1                   | Program output: 1                  
Correct output: 21                  | Program output: 21                 
Correct output: 5                   | Program output: 12                 
Correct output: 3                   | Program output: 95                 
Correct output: 1                   | Program output: 71                 
Correct output: 63                  | Program output: 83                 
Correct output: 25                  | Program output: 25                 
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: -91                
Correct output: -97                 | Program output: -39                
Correct output: -85                 | Program output: -85                
Correct output: -81                 | Program output: -7                 
Correct output: 43                  | Program output: 65                 
Correct output: -74                 | Program output: -74                
Correct output: -75                 | Program output: -75                
Correct output: -44                 | Program output: -44                
Correct output: -53                 | Program output: -8                 
Correct output: -64                 | Program output: -64                
Correct output: -87                 | Program output: -86                
Correct output: -5                  | Program output: -5                 
Correct output: -57                 | Program output: -51                
Correct output: -68                 | Program output: -25                
Correct output: -49                 | Program output: -2                 
Correct output: -61                 | Program output: -61                
Correct output: -86                 | Program output: -55                
Correct output: -30                 | Program output: -30                
Correct output: -70                 | Program output: -70                
Correct output: -83                 | Program output: -83                
Correct output: -70                 | Program output: -44                
Correct output: -59                 | Program output: -59                
Correct output: -92                 | Program output: -74                
Correct output: -67                 | Program output: -14                
Correct output: 23                  | Program output: 23                 
Correct output: -86                 | Program output: -32                
Correct output: -98                 | Program output: -97                
Correct output: -61                 | Program output: -61                
Correct output: -86                 | Program output: -86                
Correct output: -87                 | Program output: -61                
Correct output: -92                 | Program output: -92                
Correct output: -29                 | Program output: -29                
Correct output: -74                 | Program output: 0                  
Correct output: -82                 | Program output: -82                
Correct output: -83                 | Program output: -83                
Correct output: -5                  | Program output: -5                 
Correct output: -57                 | Program output: -57                
Correct output: -100                | Program output: -100               
Correct output: -33                 | Program output: 11                 
Correct output: -69                 | Program output: -41                
Correct output: -78                 | Program output: -78                
Correct output: -20                 | Program output: -20                
Correct output: -69                 | Program output: -69                
Correct output: -99                 | Program output: -99                
Correct output: -96                 | Program output: -48                
Correct output: -24                 | Program output: -24                
Correct output: -85                 | Program output: -85                
Correct output: -87                 | Program output: -65                
Correct output: -56                 | Program output: -56                
Correct output: -100                | Program output: -7                 
Correct output: -25                 | Program output: -19                
Correct output: -33                 | Program output: -33                
Correct output: -86                 | Program output: -63                
Correct output: -94                 | Program output: -93                
Correct output: -85                 | Program output: -85                
Correct output: -46                 | Program output: -46                
Correct output: -98                 | Program output: -20                
Correct output: -80                 | Program output: -80                
Correct output: -58                 | Program output: -58                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mult} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction in2} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 1, :instruction in3} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 1, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 1, :instruction exec_s} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_when} {:close 0, :instruction integer_flush})
Lexicase best program: (integer_mult boolean_stackdepth exec_yank exec_swap (exec_empty in2 boolean_frominteger) (integer_dup integer_shove) integer_dup boolean_stackdepth exec_yank exec_swap (print_integer in1 in3) (integer_dup integer_shove) integer_dup integer_shove integer_dup integer_shove in2 in1 integer_shove in3 in2 exec_yank exec_swap (in2 in3) (integer_dup integer_shove) integer_dup integer_shove integer_dup integer_shove in2 boolean_yank integer_dup integer_shove integer_dup integer_yankdup integer_dup integer_lte integer_dup integer_shove print_integer exec_yankdup integer_fromboolean exec_stackdepth exec_eq boolean_rot integer_min exec_s () (integer_fromboolean boolean_swap boolean_dup_times integer_stackdepth integer_mod exec_when () integer_flush) ())
Lexicase best errors: [1 0 1 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 73
Percent parens: 0.151
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mult} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction in2} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 1, :instruction in3} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 1, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 1, :instruction exec_s} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_when} {:close 0, :instruction integer_flush})
Zero cases best program: (integer_mult boolean_stackdepth exec_yank exec_swap (exec_empty in2 boolean_frominteger) (integer_dup integer_shove) integer_dup boolean_stackdepth exec_yank exec_swap (print_integer in1 in3) (integer_dup integer_shove) integer_dup integer_shove integer_dup integer_shove in2 in1 integer_shove in3 in2 exec_yank exec_swap (in2 in3) (integer_dup integer_shove) integer_dup integer_shove integer_dup integer_shove in2 boolean_yank integer_dup integer_shove integer_dup integer_yankdup integer_dup integer_lte integer_dup integer_shove print_integer exec_yankdup integer_fromboolean exec_stackdepth exec_eq boolean_rot integer_min exec_s () (integer_fromboolean boolean_swap boolean_dup_times integer_stackdepth integer_mod exec_when () integer_flush) ())
Zero cases best errors: [1 0 1 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 73
Percent parens: 0.151
--- Lexicase Population Statistics ---
Count of elite individuals by case: (32 709 515 588 330 846 320 618 312 319)
Population mean number of elite cases: 4.59
Count of perfect (error zero) individuals by case: (32 709 515 588 330 846 320 618 312 319)
Population mean number of perfect (error zero) cases: 4.59
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mult} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 2, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_swap} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 1, :instruction in2} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_when} {:close 0, :instruction integer_flush})
Best program: (integer_mult boolean_stackdepth exec_yank exec_swap (in2 in2 in3) (integer_dup integer_shove) integer_dup in2 integer_dup integer_shove in2 in1 integer_dup integer_shove exec_swap (in2 exec_yank exec_swap () (in2 in3) integer_dup integer_shove integer_dup integer_shove integer_dup integer_shove in2) (boolean_yank integer_dup integer_yankdup integer_dup integer_lte) integer_dup integer_shove print_integer exec_yankdup integer_fromboolean exec_stackdepth exec_eq boolean_rot integer_min exec_s () (boolean_not boolean_swap exec_yank integer_stackdepth integer_mod exec_when () integer_flush) ())
Errors: [1 0 0 0 1 0 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 52
Size: 63
Percent parens: 0.175
--- Population Statistics ---
Average total errors in population: 5.411
Median total errors in population: 5
Error averages by case: (0.968 0.291 0.485 0.412 0.67 0.154 0.68 0.382 0.688 0.681)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 58.312
Average program size in population (points): 70.346
Average percent parens in population: 0.171
Minimum age in population: 36.64235496520996
Maximum age in population: 40.41272163391113
Average age in population: 38.59190888261795
Median age in population: 38.65062141418457
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 91
Genome diversity (% unique genomes):	 0.614
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 94
Syntactic diversity (% unique Push programs):	 0.587
Total error diversity:				 0.009
Error (vector) diversity:			 0.108
Behavioral diversity:				 0.22
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 10076470
--- Timings ---
Current time: 1559314393286 milliseconds
Total Time:          70.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        49.9 seconds, 71.2%
Fitness Testing:     12.6 seconds, 18.0%
Report:               7.5 seconds, 10.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 26
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 26
;;******************************
;; -*- Smallest problem report - generation 26
Test total error for best: 485
Test mean error for best: 0.48500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -40                 | Program output: -40                
Correct output: 67                  | Program output: 67                 
Correct output: -85                 | Program output: -85                
Correct output: 69                  | Program output: 69                 
Correct output: 30                  | Program output: 30                 
Correct output: 22                  | Program output: 22                 
Correct output: -51                 | Program output: -51                
Correct output: 25                  | Program output: 53                 
Correct output: -76                 | Program output: -76                
Correct output: 53                  | Program output: 53                 
Correct output: -60                 | Program output: -60                
Correct output: 86                  | Program output: 86                 
Correct output: 86                  | Program output: 86                 
Correct output: 35                  | Program output: 35                 
Correct output: 11                  | Program output: 11                 
Correct output: 13                  | Program output: 13                 
Correct output: 45                  | Program output: 79                 
Correct output: 25                  | Program output: 87                 
Correct output: 23                  | Program output: 72                 
Correct output: 6                   | Program output: 17                 
Correct output: 5                   | Program output: 54                 
Correct output: 1                   | Program output: 1                  
Correct output: 34                  | Program output: 93                 
Correct output: 34                  | Program output: 80                 
Correct output: 31                  | Program output: 61                 
Correct output: 34                  | Program output: 50                 
Correct output: 12                  | Program output: 12                 
Correct output: 3                   | Program output: 23                 
Correct output: 1                   | Program output: 1                  
Correct output: 21                  | Program output: 21                 
Correct output: 5                   | Program output: 12                 
Correct output: 3                   | Program output: 43                 
Correct output: 1                   | Program output: 1                  
Correct output: 63                  | Program output: 64                 
Correct output: 25                  | Program output: 1                  
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: -91                
Correct output: -97                 | Program output: -39                
Correct output: -85                 | Program output: -85                
Correct output: -81                 | Program output: -7                 
Correct output: 43                  | Program output: 87                 
Correct output: -74                 | Program output: -74                
Correct output: -75                 | Program output: -75                
Correct output: -44                 | Program output: -44                
Correct output: -53                 | Program output: -8                 
Correct output: -64                 | Program output: -64                
Correct output: -87                 | Program output: -86                
Correct output: -5                  | Program output: -5                 
Correct output: -57                 | Program output: -51                
Correct output: -68                 | Program output: -25                
Correct output: -49                 | Program output: -2                 
Correct output: -61                 | Program output: -61                
Correct output: -86                 | Program output: -55                
Correct output: -30                 | Program output: -30                
Correct output: -70                 | Program output: -70                
Correct output: -83                 | Program output: -83                
Correct output: -70                 | Program output: -44                
Correct output: -59                 | Program output: -59                
Correct output: -92                 | Program output: -74                
Correct output: -67                 | Program output: -14                
Correct output: 23                  | Program output: 54                 
Correct output: -86                 | Program output: -32                
Correct output: -98                 | Program output: -97                
Correct output: -61                 | Program output: -61                
Correct output: -86                 | Program output: -86                
Correct output: -87                 | Program output: -61                
Correct output: -92                 | Program output: -92                
Correct output: -29                 | Program output: -29                
Correct output: -74                 | Program output: 0                  
Correct output: -82                 | Program output: -82                
Correct output: -83                 | Program output: 20                 
Correct output: -5                  | Program output: -5                 
Correct output: -57                 | Program output: -57                
Correct output: -100                | Program output: -100               
Correct output: -33                 | Program output: 83                 
Correct output: -69                 | Program output: -41                
Correct output: -78                 | Program output: -78                
Correct output: -20                 | Program output: -20                
Correct output: -69                 | Program output: -69                
Correct output: -99                 | Program output: -99                
Correct output: -96                 | Program output: -48                
Correct output: -24                 | Program output: -24                
Correct output: -85                 | Program output: -85                
Correct output: -87                 | Program output: -65                
Correct output: -56                 | Program output: -56                
Correct output: -100                | Program output: -7                 
Correct output: -25                 | Program output: -19                
Correct output: -33                 | Program output: 17                 
Correct output: -86                 | Program output: -63                
Correct output: -94                 | Program output: -93                
Correct output: -85                 | Program output: -85                
Correct output: -46                 | Program output: -46                
Correct output: -98                 | Program output: -20                
Correct output: -80                 | Program output: -80                
Correct output: -58                 | Program output: -58                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mult} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 2, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_swap} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 1, :instruction in2} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_when} {:close 0, :instruction integer_flush})
Lexicase best program: (integer_mult boolean_stackdepth exec_yank exec_swap (in2 in2 in3) (integer_dup integer_shove) integer_dup in2 integer_dup integer_shove in2 in1 integer_dup integer_shove exec_swap (in2 exec_yank exec_swap () (in2 in3) integer_dup integer_shove integer_dup integer_shove integer_dup integer_shove in2) (boolean_yank integer_dup integer_yankdup integer_dup integer_lte) integer_dup integer_shove print_integer exec_yankdup integer_fromboolean exec_stackdepth exec_eq boolean_rot integer_min exec_s () (boolean_not boolean_swap exec_yank integer_stackdepth integer_mod exec_when () integer_flush) ())
Lexicase best errors: [0 0 1 0 0 1 0 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 63
Percent parens: 0.175
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mult} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 2, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_swap} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 1, :instruction in2} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_when} {:close 0, :instruction integer_flush})
Zero cases best program: (integer_mult boolean_stackdepth exec_yank exec_swap (in2 in2 in3) (integer_dup integer_shove) integer_dup in2 integer_dup integer_shove in2 in1 integer_dup integer_shove exec_swap (in2 exec_yank exec_swap () (in2 in3) integer_dup integer_shove integer_dup integer_shove integer_dup integer_shove in2) (boolean_yank integer_dup integer_yankdup integer_dup integer_lte) integer_dup integer_shove print_integer exec_yankdup integer_fromboolean exec_stackdepth exec_eq boolean_rot integer_min exec_s () (boolean_not boolean_swap exec_yank integer_stackdepth integer_mod exec_when () integer_flush) ())
Zero cases best errors: [0 0 1 0 0 1 0 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 63
Percent parens: 0.175
--- Lexicase Population Statistics ---
Count of elite individuals by case: (502 583 182 794 531 49 356 890 663 7)
Population mean number of elite cases: 4.56
Count of perfect (error zero) individuals by case: (502 583 182 794 531 49 356 890 663 7)
Population mean number of perfect (error zero) cases: 4.56
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mult} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 2, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_swap} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 1, :instruction in2} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 1, :instruction exec_s} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_when} {:close 0, :instruction integer_flush})
Best program: (integer_mult boolean_stackdepth exec_yank exec_swap (in2 in2 in3) (integer_dup integer_shove) integer_dup in2 integer_dup integer_shove in2 in1 integer_dup integer_shove exec_swap (in2 exec_yank exec_swap () (in2 in3) integer_dup integer_shove integer_dup integer_shove integer_dup integer_shove in2) (boolean_yank integer_dup integer_yankdup integer_dup integer_lte) integer_dup integer_shove integer_dup integer_shove integer_dup integer_shove in2 boolean_yank integer_dup integer_shove integer_dup integer_yankdup integer_dup integer_lte integer_dup integer_shove print_integer exec_yankdup integer_fromboolean exec_stackdepth exec_eq boolean_rot integer_min exec_s () (integer_fromboolean boolean_swap boolean_dup_times integer_stackdepth integer_mod exec_when () integer_flush) ())
Errors: [0 0 0 0 0 1 1 0 0 1]
Total: 3
Mean: 0.3
Genome size: 66
Size: 77
Percent parens: 0.143
--- Population Statistics ---
Average total errors in population: 5.443
Median total errors in population: 5
Error averages by case: (0.498 0.417 0.818 0.206 0.469 0.951 0.644 0.11 0.337 0.993)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 58.518
Average program size in population (points): 69.273
Average percent parens in population: 0.155
Minimum age in population: 37.64235496520996
Maximum age in population: 41.62189674377441
Average age in population: 39.39111219608784
Median age in population: 39.39790236949921
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 75
Genome diversity (% unique genomes):	 0.611
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 78
Syntactic diversity (% unique Push programs):	 0.581
Total error diversity:				 0.008
Error (vector) diversity:			 0.078
Behavioral diversity:				 0.291
--- Run Statistics ---
Number of program evaluations used so far: 27000
Number of point (instruction) evaluations so far: 10678057
--- Timings ---
Current time: 1559314396446 milliseconds
Total Time:          73.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        51.9 seconds, 70.9%
Fitness Testing:     13.3 seconds, 18.1%
Report:               7.9 seconds, 10.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 26
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 27
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 27
;;******************************
;; -*- Smallest problem report - generation 27
Test total error for best: 491
Test mean error for best: 0.49100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -40                 | Program output: -40                
Correct output: 67                  | Program output: 79                 
Correct output: -85                 | Program output: -85                
Correct output: 69                  | Program output: 69                 
Correct output: 30                  | Program output: 30                 
Correct output: 22                  | Program output: 22                 
Correct output: -51                 | Program output: -51                
Correct output: 25                  | Program output: 53                 
Correct output: -76                 | Program output: -76                
Correct output: 53                  | Program output: 57                 
Correct output: -60                 | Program output: -60                
Correct output: 86                  | Program output: 86                 
Correct output: 86                  | Program output: 86                 
Correct output: 35                  | Program output: 35                 
Correct output: 11                  | Program output: 11                 
Correct output: 13                  | Program output: 57                 
Correct output: 45                  | Program output: 75                 
Correct output: 25                  | Program output: 25                 
Correct output: 23                  | Program output: 100                
Correct output: 6                   | Program output: 77                 
Correct output: 5                   | Program output: 5                  
Correct output: 1                   | Program output: 42                 
Correct output: 34                  | Program output: 34                 
Correct output: 34                  | Program output: 77                 
Correct output: 31                  | Program output: 31                 
Correct output: 34                  | Program output: 42                 
Correct output: 12                  | Program output: 38                 
Correct output: 3                   | Program output: 94                 
Correct output: 1                   | Program output: 1                  
Correct output: 21                  | Program output: 61                 
Correct output: 5                   | Program output: 5                  
Correct output: 3                   | Program output: 52                 
Correct output: 1                   | Program output: 71                 
Correct output: 63                  | Program output: 94                 
Correct output: 25                  | Program output: 27                 
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: -91                
Correct output: -97                 | Program output: -39                
Correct output: -85                 | Program output: -85                
Correct output: -81                 | Program output: -7                 
Correct output: 43                  | Program output: 43                 
Correct output: -74                 | Program output: -74                
Correct output: -75                 | Program output: -75                
Correct output: -44                 | Program output: -44                
Correct output: -53                 | Program output: -8                 
Correct output: -64                 | Program output: -64                
Correct output: -87                 | Program output: -86                
Correct output: -5                  | Program output: -5                 
Correct output: -57                 | Program output: -51                
Correct output: -68                 | Program output: -25                
Correct output: -49                 | Program output: -2                 
Correct output: -61                 | Program output: -61                
Correct output: -86                 | Program output: -27                
Correct output: -30                 | Program output: -30                
Correct output: -70                 | Program output: -70                
Correct output: -83                 | Program output: -83                
Correct output: -70                 | Program output: -44                
Correct output: -59                 | Program output: -59                
Correct output: -92                 | Program output: -74                
Correct output: -67                 | Program output: -14                
Correct output: 23                  | Program output: 43                 
Correct output: -86                 | Program output: -32                
Correct output: -98                 | Program output: -97                
Correct output: -61                 | Program output: -61                
Correct output: -86                 | Program output: -86                
Correct output: -87                 | Program output: -61                
Correct output: -92                 | Program output: -92                
Correct output: -29                 | Program output: 4                  
Correct output: -74                 | Program output: 0                  
Correct output: -82                 | Program output: -82                
Correct output: -83                 | Program output: -83                
Correct output: -5                  | Program output: -5                 
Correct output: -57                 | Program output: -12                
Correct output: -100                | Program output: -100               
Correct output: -33                 | Program output: 3                  
Correct output: -69                 | Program output: -41                
Correct output: -78                 | Program output: -78                
Correct output: -20                 | Program output: -20                
Correct output: -69                 | Program output: -69                
Correct output: -99                 | Program output: -99                
Correct output: -96                 | Program output: -96                
Correct output: -24                 | Program output: -24                
Correct output: -85                 | Program output: -85                
Correct output: -87                 | Program output: -65                
Correct output: -56                 | Program output: -56                
Correct output: -100                | Program output: -100               
Correct output: -25                 | Program output: -19                
Correct output: -33                 | Program output: -33                
Correct output: -86                 | Program output: -63                
Correct output: -94                 | Program output: -93                
Correct output: -85                 | Program output: -85                
Correct output: -46                 | Program output: -46                
Correct output: -98                 | Program output: -98                
Correct output: -80                 | Program output: -80                
Correct output: -58                 | Program output: -58                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mult} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 1, :instruction exec_s} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_when} {:close 0, :instruction integer_flush})
Lexicase best program: (integer_mult boolean_stackdepth exec_yank exec_swap (print_integer in2 in3) (integer_dup integer_shove) integer_dup integer_shove integer_dup integer_shove in2 in1 integer_dup integer_shove exec_swap (boolean_pop exec_yank exec_swap (in2 in3) (integer_dup integer_shove) integer_dup integer_shove) (in2 in3) integer_dup integer_shove integer_dup integer_shove integer_dup integer_shove in2 boolean_yank in1 integer_shove integer_dup integer_yankdup integer_dup integer_lte integer_dup integer_shove print_integer exec_yankdup integer_fromboolean integer_fromboolean exec_stackdepth exec_eq boolean_rot integer_min exec_s () (integer_fromboolean boolean_swap boolean_dup_times integer_stackdepth integer_mod exec_when () integer_flush) ())
Lexicase best errors: [0 0 0 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 72
Percent parens: 0.153
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mult} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 1, :instruction exec_s} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_when} {:close 0, :instruction integer_flush})
Zero cases best program: (integer_mult boolean_stackdepth exec_yank exec_swap (print_integer in2 in3) (integer_dup integer_shove) integer_dup integer_shove integer_dup integer_shove in2 in1 integer_dup integer_shove exec_swap (boolean_pop exec_yank exec_swap (in2 in3) (integer_dup integer_shove) integer_dup integer_shove) (in2 in3) integer_dup integer_shove integer_dup integer_shove integer_dup integer_shove in2 boolean_yank in1 integer_shove integer_dup integer_yankdup integer_dup integer_lte integer_dup integer_shove print_integer exec_yankdup integer_fromboolean integer_fromboolean exec_stackdepth exec_eq boolean_rot integer_min exec_s () (integer_fromboolean boolean_swap boolean_dup_times integer_stackdepth integer_mod exec_when () integer_flush) ())
Zero cases best errors: [0 0 0 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 72
Percent parens: 0.153
--- Lexicase Population Statistics ---
Count of elite individuals by case: (639 450 876 273 592 498 613 272 511 103)
Population mean number of elite cases: 4.83
Count of perfect (error zero) individuals by case: (639 450 876 273 592 498 613 272 511 103)
Population mean number of perfect (error zero) cases: 4.83
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mult} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 1, :instruction exec_s} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_when} {:close 0, :instruction integer_flush})
Best program: (integer_mult boolean_stackdepth exec_yank exec_swap (print_integer in2 in3) (integer_dup integer_shove) integer_dup integer_shove integer_dup integer_shove in2 in1 integer_dup integer_shove exec_swap (boolean_pop exec_yank exec_swap (in2 in3) (integer_dup integer_shove) integer_dup integer_shove) (in2 in3) integer_dup integer_shove integer_dup integer_shove integer_dup integer_shove in2 boolean_yank in1 integer_shove integer_dup integer_yankdup integer_dup integer_lte integer_dup integer_shove print_integer exec_yankdup integer_fromboolean integer_fromboolean exec_stackdepth exec_eq boolean_rot integer_min exec_s () (integer_fromboolean boolean_swap boolean_dup_times integer_stackdepth integer_mod exec_when () integer_flush) ())
Errors: [0 0 0 0 0 0 0 1 0 0]
Total: 1
Mean: 0.1
Genome size: 61
Size: 72
Percent parens: 0.153
--- Population Statistics ---
Average total errors in population: 5.173
Median total errors in population: 5
Error averages by case: (0.361 0.55 0.124 0.727 0.408 0.502 0.387 0.728 0.489 0.897)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 55.648
Average program size in population (points): 66.397
Average percent parens in population: 0.162
Minimum age in population: 38.64235496520996
Maximum age in population: 43.00989955663681
Average age in population: 41.11563036966324
Median age in population: 41.22315442562103
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 72
Genome diversity (% unique genomes):	 0.647
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 76
Syntactic diversity (% unique Push programs):	 0.62
Total error diversity:				 0.01
Error (vector) diversity:			 0.125
Behavioral diversity:				 0.278
--- Run Statistics ---
Number of program evaluations used so far: 28000
Number of point (instruction) evaluations so far: 11251038
--- Timings ---
Current time: 1559314399496 milliseconds
Total Time:          76.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        53.9 seconds, 70.6%
Fitness Testing:     13.9 seconds, 18.2%
Report:               8.4 seconds, 11.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 27
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 28
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 28
;;******************************
;; -*- Smallest problem report - generation 28
Test total error for best: 447
Test mean error for best: 0.44700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -40                 | Program output: -40                
Correct output: 67                  | Program output: 79                 
Correct output: -85                 | Program output: -85                
Correct output: 69                  | Program output: 69                 
Correct output: 30                  | Program output: 30                 
Correct output: 22                  | Program output: 28                 
Correct output: -51                 | Program output: -51                
Correct output: 25                  | Program output: 25                 
Correct output: -76                 | Program output: -76                
Correct output: 53                  | Program output: 57                 
Correct output: -60                 | Program output: -60                
Correct output: 86                  | Program output: 86                 
Correct output: 86                  | Program output: 86                 
Correct output: 35                  | Program output: 35                 
Correct output: 11                  | Program output: 11                 
Correct output: 13                  | Program output: 98                 
Correct output: 45                  | Program output: 45                 
Correct output: 25                  | Program output: 98                 
Correct output: 23                  | Program output: 64                 
Correct output: 6                   | Program output: 6                  
Correct output: 5                   | Program output: 5                  
Correct output: 1                   | Program output: 1                  
Correct output: 34                  | Program output: 99                 
Correct output: 34                  | Program output: 34                 
Correct output: 31                  | Program output: 32                 
Correct output: 34                  | Program output: 34                 
Correct output: 12                  | Program output: 75                 
Correct output: 3                   | Program output: 23                 
Correct output: 1                   | Program output: 1                  
Correct output: 21                  | Program output: 21                 
Correct output: 5                   | Program output: 5                  
Correct output: 3                   | Program output: 95                 
Correct output: 1                   | Program output: 1                  
Correct output: 63                  | Program output: 83                 
Correct output: 25                  | Program output: 51                 
Correct output: -97                 | Program output: -10                
Correct output: -91                 | Program output: -12                
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -66                
Correct output: -81                 | Program output: -81                
Correct output: 43                  | Program output: 65                 
Correct output: -74                 | Program output: -22                
Correct output: -75                 | Program output: -75                
Correct output: -44                 | Program output: -44                
Correct output: -53                 | Program output: -8                 
Correct output: -64                 | Program output: -64                
Correct output: -87                 | Program output: -87                
Correct output: -5                  | Program output: -4                 
Correct output: -57                 | Program output: -57                
Correct output: -68                 | Program output: -68                
Correct output: -49                 | Program output: -49                
Correct output: -61                 | Program output: -61                
Correct output: -86                 | Program output: -27                
Correct output: -30                 | Program output: -30                
Correct output: -70                 | Program output: -9                 
Correct output: -83                 | Program output: -69                
Correct output: -70                 | Program output: -44                
Correct output: -59                 | Program output: -49                
Correct output: -92                 | Program output: -34                
Correct output: -67                 | Program output: -66                
Correct output: 23                  | Program output: 23                 
Correct output: -86                 | Program output: -86                
Correct output: -98                 | Program output: -14                
Correct output: -61                 | Program output: -61                
Correct output: -86                 | Program output: -53                
Correct output: -87                 | Program output: -74                
Correct output: -92                 | Program output: -92                
Correct output: -29                 | Program output: -29                
Correct output: -74                 | Program output: -74                
Correct output: -82                 | Program output: -82                
Correct output: -83                 | Program output: -83                
Correct output: -5                  | Program output: -5                 
Correct output: -57                 | Program output: -12                
Correct output: -100                | Program output: -3                 
Correct output: -33                 | Program output: 83                 
Correct output: -69                 | Program output: -69                
Correct output: -78                 | Program output: -78                
Correct output: -20                 | Program output: -20                
Correct output: -69                 | Program output: -69                
Correct output: -99                 | Program output: -99                
Correct output: -96                 | Program output: -96                
Correct output: -24                 | Program output: -24                
Correct output: -85                 | Program output: -85                
Correct output: -87                 | Program output: -59                
Correct output: -56                 | Program output: -54                
Correct output: -100                | Program output: -100               
Correct output: -25                 | Program output: -19                
Correct output: -33                 | Program output: -33                
Correct output: -86                 | Program output: -86                
Correct output: -94                 | Program output: -93                
Correct output: -85                 | Program output: -85                
Correct output: -46                 | Program output: -17                
Correct output: -98                 | Program output: -98                
Correct output: -80                 | Program output: -80                
Correct output: -58                 | Program output: -58                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mult} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 1, :instruction in3} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 1, :instruction exec_s} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_when} {:close 0, :instruction integer_flush})
Lexicase best program: (integer_mult boolean_stackdepth exec_yank exec_swap (print_integer in2 in3) (integer_dup integer_shove) integer_dup integer_shove integer_dup integer_shove in2 in1 integer_dup integer_shove exec_swap (in3) (integer_dup integer_shove) integer_dup integer_shove integer_dup integer_shove integer_dup integer_shove integer_dup integer_yankdup integer_dup integer_lte integer_dup integer_shove integer_dup integer_dup integer_shove in2 boolean_yank in1 integer_shove integer_dup integer_yankdup integer_dup integer_lte integer_dup integer_shove print_integer exec_yankdup integer_fromboolean integer_fromboolean exec_stackdepth exec_eq boolean_rot integer_min exec_s () (integer_fromboolean boolean_swap boolean_dup_times integer_stackdepth integer_mod exec_when () integer_flush) ())
Lexicase best errors: [0 0 0 0 1 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 71
Percent parens: 0.127
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mult} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 1, :instruction in3} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 1, :instruction exec_s} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_when} {:close 0, :instruction integer_flush})
Zero cases best program: (integer_mult boolean_stackdepth exec_yank exec_swap (print_integer in2 in3) (integer_dup integer_shove) integer_dup integer_shove integer_dup integer_shove in2 in1 integer_dup integer_shove exec_swap (in3) (integer_dup integer_shove) integer_dup integer_shove integer_dup integer_shove integer_dup integer_shove integer_dup integer_yankdup integer_dup integer_lte integer_dup integer_shove integer_dup integer_dup integer_shove in2 boolean_yank in1 integer_shove integer_dup integer_yankdup integer_dup integer_lte integer_dup integer_shove print_integer exec_yankdup integer_fromboolean integer_fromboolean exec_stackdepth exec_eq boolean_rot integer_min exec_s () (integer_fromboolean boolean_swap boolean_dup_times integer_stackdepth integer_mod exec_when () integer_flush) ())
Zero cases best errors: [0 0 0 0 1 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 71
Percent parens: 0.127
--- Lexicase Population Statistics ---
Count of elite individuals by case: (108 673 318 839 372 847 86 622 614 621)
Population mean number of elite cases: 5.10
Count of perfect (error zero) individuals by case: (108 673 318 839 372 847 86 622 614 621)
Population mean number of perfect (error zero) cases: 5.10
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mult} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction in2} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 1, :instruction integer_shove} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup} {:close 1, :instruction in1} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 1, :instruction exec_s} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_when} {:close 0, :instruction integer_flush})
Best program: (integer_mult boolean_stackdepth exec_yank exec_swap (exec_empty in2 boolean_frominteger) (integer_dup integer_shove) integer_dup boolean_stackdepth exec_yank exec_swap (boolean_not in1 in3 integer_dup integer_shove) (integer_dup integer_shove) integer_dup integer_shove in2 in1 integer_shove in4 in2 exec_yank exec_swap (in2 in3) (boolean_swap integer_shove) integer_dup integer_shove integer_dup integer_shove in2 boolean_yank integer_dup exec_swap (in2 in3) (boolean_swap integer_shove) integer_dup integer_shove integer_dup integer_shove in2 boolean_yank integer_dup in1 integer_dup integer_yankdup integer_dup integer_lte integer_dup integer_shove print_integer exec_yankdup integer_fromboolean exec_stackdepth exec_eq boolean_rot integer_min exec_s () (integer_fromboolean boolean_swap boolean_dup_times integer_stackdepth integer_mod exec_when () integer_flush) ())
Errors: [0 0 0 0 0 0 1 0 0 0]
Total: 1
Mean: 0.1
Genome size: 74
Size: 87
Percent parens: 0.149
--- Population Statistics ---
Average total errors in population: 4.9
Median total errors in population: 4
Error averages by case: (0.892 0.327 0.682 0.161 0.628 0.153 0.914 0.378 0.386 0.379)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 62.592
Average program size in population (points): 74.385
Average percent parens in population: 0.159
Minimum age in population: 39.64235496520996
Maximum age in population: 44.49611359834671
Average age in population: 42.39055264309049
Median age in population: 42.4312424659729
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 47
Genome diversity (% unique genomes):	 0.662
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 75
Syntactic diversity (% unique Push programs):	 0.633
Total error diversity:				 0.01
Error (vector) diversity:			 0.123
Behavioral diversity:				 0.287
--- Run Statistics ---
Number of program evaluations used so far: 29000
Number of point (instruction) evaluations so far: 11868833
--- Timings ---
Current time: 1559314402788 milliseconds
Total Time:          79.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        56.0 seconds, 70.4%
Fitness Testing:     14.6 seconds, 18.4%
Report:               8.8 seconds, 11.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 28
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 29
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 29
;;******************************
;; -*- Smallest problem report - generation 29
Test total error for best: 489
Test mean error for best: 0.48900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -40                 | Program output: -40                
Correct output: 67                  | Program output: 67                 
Correct output: -85                 | Program output: -85                
Correct output: 69                  | Program output: 69                 
Correct output: 30                  | Program output: 30                 
Correct output: 22                  | Program output: 22                 
Correct output: -51                 | Program output: -51                
Correct output: 25                  | Program output: 53                 
Correct output: -76                 | Program output: -76                
Correct output: 53                  | Program output: 53                 
Correct output: -60                 | Program output: -60                
Correct output: 86                  | Program output: 86                 
Correct output: 86                  | Program output: 86                 
Correct output: 35                  | Program output: 35                 
Correct output: 11                  | Program output: 11                 
Correct output: 13                  | Program output: 13                 
Correct output: 45                  | Program output: 79                 
Correct output: 25                  | Program output: 87                 
Correct output: 23                  | Program output: 72                 
Correct output: 6                   | Program output: 17                 
Correct output: 5                   | Program output: 54                 
Correct output: 1                   | Program output: 1                  
Correct output: 34                  | Program output: 93                 
Correct output: 34                  | Program output: 80                 
Correct output: 31                  | Program output: 61                 
Correct output: 34                  | Program output: 50                 
Correct output: 12                  | Program output: 12                 
Correct output: 3                   | Program output: 23                 
Correct output: 1                   | Program output: 1                  
Correct output: 21                  | Program output: 21                 
Correct output: 5                   | Program output: 12                 
Correct output: 3                   | Program output: 43                 
Correct output: 1                   | Program output: 1                  
Correct output: 63                  | Program output: 64                 
Correct output: 25                  | Program output: 27                 
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: -91                
Correct output: -97                 | Program output: -39                
Correct output: -85                 | Program output: -9                 
Correct output: -81                 | Program output: -72                
Correct output: 43                  | Program output: 87                 
Correct output: -74                 | Program output: -74                
Correct output: -75                 | Program output: -75                
Correct output: -44                 | Program output: -44                
Correct output: -53                 | Program output: -8                 
Correct output: -64                 | Program output: -64                
Correct output: -87                 | Program output: -86                
Correct output: -5                  | Program output: -5                 
Correct output: -57                 | Program output: -51                
Correct output: -68                 | Program output: -25                
Correct output: -49                 | Program output: -2                 
Correct output: -61                 | Program output: -61                
Correct output: -86                 | Program output: -27                
Correct output: -30                 | Program output: -30                
Correct output: -70                 | Program output: -70                
Correct output: -83                 | Program output: -83                
Correct output: -70                 | Program output: -44                
Correct output: -59                 | Program output: -59                
Correct output: -92                 | Program output: -92                
Correct output: -67                 | Program output: -14                
Correct output: 23                  | Program output: 54                 
Correct output: -86                 | Program output: -72                
Correct output: -98                 | Program output: -98                
Correct output: -61                 | Program output: -61                
Correct output: -86                 | Program output: -86                
Correct output: -87                 | Program output: -87                
Correct output: -92                 | Program output: -92                
Correct output: -29                 | Program output: 4                  
Correct output: -74                 | Program output: 0                  
Correct output: -82                 | Program output: -82                
Correct output: -83                 | Program output: -83                
Correct output: -5                  | Program output: -5                 
Correct output: -57                 | Program output: -12                
Correct output: -100                | Program output: -100               
Correct output: -33                 | Program output: 11                 
Correct output: -69                 | Program output: -21                
Correct output: -78                 | Program output: -78                
Correct output: -20                 | Program output: -20                
Correct output: -69                 | Program output: -69                
Correct output: -99                 | Program output: -99                
Correct output: -96                 | Program output: -96                
Correct output: -24                 | Program output: -24                
Correct output: -85                 | Program output: -85                
Correct output: -87                 | Program output: -87                
Correct output: -56                 | Program output: -56                
Correct output: -100                | Program output: -100               
Correct output: -25                 | Program output: -19                
Correct output: -33                 | Program output: -33                
Correct output: -86                 | Program output: -63                
Correct output: -94                 | Program output: -93                
Correct output: -85                 | Program output: -85                
Correct output: -46                 | Program output: -46                
Correct output: -98                 | Program output: -98                
Correct output: -80                 | Program output: -80                
Correct output: -58                 | Program output: -58                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 1, :instruction in3} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 1, :instruction exec_s} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_when} {:close 0, :instruction integer_flush})
Lexicase best program: (print_integer in2 in3 integer_dup integer_shove integer_dup integer_shove integer_dup integer_shove in2 in1 integer_dup integer_shove exec_swap (in3) (integer_dup integer_shove) integer_dup integer_shove integer_dup integer_shove integer_dup integer_shove integer_dup integer_yankdup integer_dup integer_lte integer_dup integer_shove integer_dup integer_dup integer_shove in2 boolean_yank in1 integer_shove integer_dup integer_yankdup integer_dup integer_lte integer_dup integer_shove print_integer exec_yankdup integer_fromboolean integer_fromboolean exec_stackdepth exec_eq boolean_rot integer_min exec_s () (integer_fromboolean boolean_swap boolean_dup_times integer_stackdepth integer_mod exec_when () integer_flush) ())
Lexicase best errors: [0 0 0 1 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 65
Percent parens: 0.108
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 1, :instruction in3} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 1, :instruction exec_s} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_when} {:close 0, :instruction integer_flush})
Zero cases best program: (print_integer in2 in3 integer_dup integer_shove integer_dup integer_shove integer_dup integer_shove in2 in1 integer_dup integer_shove exec_swap (in3) (integer_dup integer_shove) integer_dup integer_shove integer_dup integer_shove integer_dup integer_shove integer_dup integer_yankdup integer_dup integer_lte integer_dup integer_shove integer_dup integer_dup integer_shove in2 boolean_yank in1 integer_shove integer_dup integer_yankdup integer_dup integer_lte integer_dup integer_shove print_integer exec_yankdup integer_fromboolean integer_fromboolean exec_stackdepth exec_eq boolean_rot integer_min exec_s () (integer_fromboolean boolean_swap boolean_dup_times integer_stackdepth integer_mod exec_when () integer_flush) ())
Zero cases best errors: [0 0 0 1 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 65
Percent parens: 0.108
--- Lexicase Population Statistics ---
Count of elite individuals by case: (711 470 850 3 782 515 825 854 515 869)
Population mean number of elite cases: 6.39
Count of perfect (error zero) individuals by case: (711 470 850 3 782 515 825 854 515 869)
Population mean number of perfect (error zero) cases: 6.39
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mult} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 1, :instruction exec_s} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_when} {:close 0, :instruction integer_flush})
Best program: (integer_mult boolean_stackdepth exec_yank exec_swap (print_integer in2 in3) (integer_dup integer_shove) integer_dup integer_shove integer_dup integer_shove in2 in1 integer_dup integer_shove exec_swap (boolean_pop exec_yank exec_swap (in2 in3) (integer_dup integer_shove) integer_dup integer_shove) (in2 in3) integer_dup integer_dup integer_lte integer_dup integer_shove print_integer exec_yankdup integer_fromboolean integer_fromboolean exec_stackdepth exec_eq boolean_rot integer_min exec_s () (integer_fromboolean boolean_swap boolean_dup_times integer_stackdepth integer_mod exec_when () integer_flush) ())
Errors: [0 0 0 1 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 50
Size: 61
Percent parens: 0.180
--- Population Statistics ---
Average total errors in population: 3.606
Median total errors in population: 3
Error averages by case: (0.289 0.53 0.15 0.997 0.218 0.485 0.175 0.146 0.485 0.131)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 64.087
Average program size in population (points): 75.115
Average percent parens in population: 0.146
Minimum age in population: 40.64235496520996
Maximum age in population: 45.77968713641167
Average age in population: 44.23180695573986
Median age in population: 44.47057101130486
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 148
Genome diversity (% unique genomes):	 0.663
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 163
Syntactic diversity (% unique Push programs):	 0.62
Total error diversity:				 0.01
Error (vector) diversity:			 0.051
Behavioral diversity:				 0.172
--- Run Statistics ---
Number of program evaluations used so far: 30000
Number of point (instruction) evaluations so far: 12509138
--- Timings ---
Current time: 1559314405893 milliseconds
Total Time:          82.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        58.0 seconds, 70.0%
Fitness Testing:     15.3 seconds, 18.5%
Report:               9.4 seconds, 11.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 29
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 30
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 30
;;******************************
;; -*- Smallest problem report - generation 30
Test total error for best: 539
Test mean error for best: 0.53900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -40                 | Program output: -40                
Correct output: 67                  | Program output: 79                 
Correct output: -85                 | Program output: -85                
Correct output: 69                  | Program output: 69                 
Correct output: 30                  | Program output: 37                 
Correct output: 22                  | Program output: 22                 
Correct output: -51                 | Program output: -51                
Correct output: 25                  | Program output: 25                 
Correct output: -76                 | Program output: -76                
Correct output: 53                  | Program output: 57                 
Correct output: -60                 | Program output: -60                
Correct output: 86                  | Program output: 86                 
Correct output: 86                  | Program output: 86                 
Correct output: 35                  | Program output: 35                 
Correct output: 11                  | Program output: 11                 
Correct output: 13                  | Program output: 57                 
Correct output: 45                  | Program output: 45                 
Correct output: 25                  | Program output: 98                 
Correct output: 23                  | Program output: 64                 
Correct output: 6                   | Program output: 17                 
Correct output: 5                   | Program output: 5                  
Correct output: 1                   | Program output: 1                  
Correct output: 34                  | Program output: 99                 
Correct output: 34                  | Program output: 34                 
Correct output: 31                  | Program output: 32                 
Correct output: 34                  | Program output: 34                 
Correct output: 12                  | Program output: 12                 
Correct output: 3                   | Program output: 23                 
Correct output: 1                   | Program output: 5                  
Correct output: 21                  | Program output: 61                 
Correct output: 5                   | Program output: 12                 
Correct output: 3                   | Program output: 95                 
Correct output: 1                   | Program output: 1                  
Correct output: 63                  | Program output: 83                 
Correct output: 25                  | Program output: 25                 
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: -12                
Correct output: -97                 | Program output: -39                
Correct output: -85                 | Program output: -9                 
Correct output: -81                 | Program output: -72                
Correct output: 43                  | Program output: 65                 
Correct output: -74                 | Program output: -74                
Correct output: -75                 | Program output: 9                  
Correct output: -44                 | Program output: -44                
Correct output: -53                 | Program output: 3                  
Correct output: -64                 | Program output: -64                
Correct output: -87                 | Program output: -86                
Correct output: -5                  | Program output: -5                 
Correct output: -57                 | Program output: -51                
Correct output: -68                 | Program output: -25                
Correct output: -49                 | Program output: -2                 
Correct output: -61                 | Program output: -61                
Correct output: -86                 | Program output: -27                
Correct output: -30                 | Program output: 28                 
Correct output: -70                 | Program output: -70                
Correct output: -83                 | Program output: -83                
Correct output: -70                 | Program output: -44                
Correct output: -59                 | Program output: -59                
Correct output: -92                 | Program output: -92                
Correct output: -67                 | Program output: -66                
Correct output: 23                  | Program output: 23                 
Correct output: -86                 | Program output: -72                
Correct output: -98                 | Program output: -98                
Correct output: -61                 | Program output: -61                
Correct output: -86                 | Program output: -86                
Correct output: -87                 | Program output: -87                
Correct output: -92                 | Program output: -92                
Correct output: -29                 | Program output: 4                  
Correct output: -74                 | Program output: 0                  
Correct output: -82                 | Program output: 61                 
Correct output: -83                 | Program output: -83                
Correct output: -5                  | Program output: 80                 
Correct output: -57                 | Program output: -12                
Correct output: -100                | Program output: -100               
Correct output: -33                 | Program output: 11                 
Correct output: -69                 | Program output: -21                
Correct output: -78                 | Program output: -78                
Correct output: -20                 | Program output: -20                
Correct output: -69                 | Program output: -69                
Correct output: -99                 | Program output: 40                 
Correct output: -96                 | Program output: -96                
Correct output: -24                 | Program output: -24                
Correct output: -85                 | Program output: -85                
Correct output: -87                 | Program output: -87                
Correct output: -56                 | Program output: -56                
Correct output: -100                | Program output: -100               
Correct output: -25                 | Program output: -19                
Correct output: -33                 | Program output: -33                
Correct output: -86                 | Program output: 9                  
Correct output: -94                 | Program output: 22                 
Correct output: -85                 | Program output: 85                 
Correct output: -46                 | Program output: -46                
Correct output: -98                 | Program output: -98                
Correct output: -80                 | Program output: 41                 
Correct output: -58                 | Program output: 30                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mult} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 1, :instruction -34} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_when} {:close 0, :instruction integer_flush})
Lexicase best program: (integer_mult boolean_stackdepth exec_yank exec_swap (print_integer in2 integer_min) (integer_dup integer_shove) integer_dup integer_shove integer_dup integer_shove in2 in1 integer_dup integer_shove exec_swap (boolean_pop exec_yank exec_swap (in2 in3) (integer_dup integer_shove) integer_dup integer_shove) (in2 boolean_yank in1 integer_shove) integer_dup integer_yankdup integer_dup integer_lte integer_dup integer_shove print_integer exec_yankdup integer_fromboolean exec_stackdepth exec_eq boolean_rot integer_min -34 integer_fromboolean boolean_swap boolean_dup_times integer_stackdepth integer_mod exec_when () integer_flush)
Lexicase best errors: [0 0 0 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 60
Percent parens: 0.133
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mult} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 1, :instruction -34} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_when} {:close 0, :instruction integer_flush})
Zero cases best program: (integer_mult boolean_stackdepth exec_yank exec_swap (print_integer in2 integer_min) (integer_dup integer_shove) integer_dup integer_shove integer_dup integer_shove in2 in1 integer_dup integer_shove exec_swap (boolean_pop exec_yank exec_swap (in2 in3) (integer_dup integer_shove) integer_dup integer_shove) (in2 boolean_yank in1 integer_shove) integer_dup integer_yankdup integer_dup integer_lte integer_dup integer_shove print_integer exec_yankdup integer_fromboolean exec_stackdepth exec_eq boolean_rot integer_min -34 integer_fromboolean boolean_swap boolean_dup_times integer_stackdepth integer_mod exec_when () integer_flush)
Zero cases best errors: [0 0 0 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 60
Percent parens: 0.133
--- Lexicase Population Statistics ---
Count of elite individuals by case: (613 735 138 767 575 750 565 187 736 123)
Population mean number of elite cases: 5.19
Count of perfect (error zero) individuals by case: (613 735 138 767 575 750 565 187 736 123)
Population mean number of perfect (error zero) cases: 5.19
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mult} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 1, :instruction -34} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_when} {:close 0, :instruction integer_flush})
Best program: (integer_mult boolean_stackdepth exec_yank exec_swap (print_integer in2 integer_min) (integer_dup integer_shove) integer_dup integer_shove integer_dup integer_shove in2 in1 integer_dup integer_shove exec_swap (boolean_pop exec_yank exec_swap (in2 in3) (integer_dup integer_shove) integer_dup integer_shove) (in2 boolean_yank in1 integer_shove) integer_dup integer_yankdup integer_dup integer_lte integer_dup integer_shove print_integer exec_yankdup integer_fromboolean exec_stackdepth exec_eq boolean_rot integer_min -34 integer_fromboolean boolean_swap boolean_dup_times integer_stackdepth integer_mod exec_when () integer_flush)
Errors: [0 0 0 0 0 0 0 1 0 0]
Total: 1
Mean: 0.1
Genome size: 52
Size: 60
Percent parens: 0.133
--- Population Statistics ---
Average total errors in population: 4.811
Median total errors in population: 4
Error averages by case: (0.387 0.265 0.862 0.233 0.425 0.25 0.435 0.813 0.264 0.877)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 57.815
Average program size in population (points): 68.122
Average percent parens in population: 0.152
Minimum age in population: 43.05646298825741
Maximum age in population: 47.315086632967
Average age in population: 45.87522061000019
Median age in population: 45.98334230482578
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 58
Genome diversity (% unique genomes):	 0.662
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 65
Syntactic diversity (% unique Push programs):	 0.63
Total error diversity:				 0.01
Error (vector) diversity:			 0.091
Behavioral diversity:				 0.244
--- Run Statistics ---
Number of program evaluations used so far: 31000
Number of point (instruction) evaluations so far: 13089856
--- Timings ---
Current time: 1559314408887 milliseconds
Total Time:          85.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        59.9 seconds, 69.9%
Fitness Testing:     15.9 seconds, 18.6%
Report:               9.8 seconds, 11.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 30
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 31
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 31
;;******************************
;; -*- Smallest problem report - generation 31
Test total error for best: 554
Test mean error for best: 0.55400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -40                 | Program output: -40                
Correct output: 67                  | Program output: 79                 
Correct output: -85                 | Program output: 61                 
Correct output: 69                  | Program output: 69                 
Correct output: 30                  | Program output: 37                 
Correct output: 22                  | Program output: 28                 
Correct output: -51                 | Program output: 100                
Correct output: 25                  | Program output: 25                 
Correct output: -76                 | Program output: -76                
Correct output: 53                  | Program output: 57                 
Correct output: -60                 | Program output: -60                
Correct output: 86                  | Program output: 86                 
Correct output: 86                  | Program output: 86                 
Correct output: 35                  | Program output: 35                 
Correct output: 11                  | Program output: 11                 
Correct output: 13                  | Program output: 24                 
Correct output: 45                  | Program output: 45                 
Correct output: 25                  | Program output: 98                 
Correct output: 23                  | Program output: 64                 
Correct output: 6                   | Program output: 64                 
Correct output: 5                   | Program output: 5                  
Correct output: 1                   | Program output: 42                 
Correct output: 34                  | Program output: 99                 
Correct output: 34                  | Program output: 34                 
Correct output: 31                  | Program output: 32                 
Correct output: 34                  | Program output: 34                 
Correct output: 12                  | Program output: 75                 
Correct output: 3                   | Program output: 61                 
Correct output: 1                   | Program output: 63                 
Correct output: 21                  | Program output: 24                 
Correct output: 5                   | Program output: 5                  
Correct output: 3                   | Program output: 95                 
Correct output: 1                   | Program output: 71                 
Correct output: 63                  | Program output: 83                 
Correct output: 25                  | Program output: 25                 
Correct output: -97                 | Program output: -10                
Correct output: -91                 | Program output: -91                
Correct output: -97                 | Program output: -39                
Correct output: -85                 | Program output: -9                 
Correct output: -81                 | Program output: -72                
Correct output: 43                  | Program output: 65                 
Correct output: -74                 | Program output: -74                
Correct output: -75                 | Program output: 9                  
Correct output: -44                 | Program output: 89                 
Correct output: -53                 | Program output: -8                 
Correct output: -64                 | Program output: 43                 
Correct output: -87                 | Program output: -87                
Correct output: -5                  | Program output: -4                 
Correct output: -57                 | Program output: -57                
Correct output: -68                 | Program output: -68                
Correct output: -49                 | Program output: -49                
Correct output: -61                 | Program output: -61                
Correct output: -86                 | Program output: -55                
Correct output: -30                 | Program output: -30                
Correct output: -70                 | Program output: -9                 
Correct output: -83                 | Program output: -69                
Correct output: -70                 | Program output: 53                 
Correct output: -59                 | Program output: -49                
Correct output: -92                 | Program output: -92                
Correct output: -67                 | Program output: -14                
Correct output: 23                  | Program output: 23                 
Correct output: -86                 | Program output: -72                
Correct output: -98                 | Program output: -98                
Correct output: -61                 | Program output: -61                
Correct output: -86                 | Program output: -86                
Correct output: -87                 | Program output: -87                
Correct output: -92                 | Program output: 77                 
Correct output: -29                 | Program output: -29                
Correct output: -74                 | Program output: -74                
Correct output: -82                 | Program output: -82                
Correct output: -83                 | Program output: 20                 
Correct output: -5                  | Program output: -5                 
Correct output: -57                 | Program output: -57                
Correct output: -100                | Program output: -3                 
Correct output: -33                 | Program output: 11                 
Correct output: -69                 | Program output: -21                
Correct output: -78                 | Program output: -78                
Correct output: -20                 | Program output: -20                
Correct output: -69                 | Program output: -69                
Correct output: -99                 | Program output: -99                
Correct output: -96                 | Program output: -48                
Correct output: -24                 | Program output: -24                
Correct output: -85                 | Program output: -85                
Correct output: -87                 | Program output: -87                
Correct output: -56                 | Program output: -56                
Correct output: -100                | Program output: -7                 
Correct output: -25                 | Program output: 50                 
Correct output: -33                 | Program output: -33                
Correct output: -86                 | Program output: -63                
Correct output: -94                 | Program output: -93                
Correct output: -85                 | Program output: -85                
Correct output: -46                 | Program output: -46                
Correct output: -98                 | Program output: -20                
Correct output: -80                 | Program output: -80                
Correct output: -58                 | Program output: -58                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mult} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 1, :instruction -34} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_when} {:close 0, :instruction integer_flush})
Lexicase best program: (integer_mult boolean_stackdepth exec_yank exec_swap (exec_empty in2 boolean_frominteger integer_dup integer_shove integer_dup boolean_stackdepth) () exec_yank exec_swap (boolean_not in1 in3 integer_dup integer_dup integer_shove) (integer_dup integer_shove) in2 boolean_yank in1 integer_shove integer_dup integer_yankdup integer_dup integer_lte integer_dup integer_shove print_integer exec_yankdup integer_fromboolean exec_stackdepth exec_eq boolean_rot integer_min -34 integer_fromboolean boolean_swap boolean_dup_times integer_stackdepth integer_mod exec_when () integer_flush)
Lexicase best errors: [0 0 1 1 1 0 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 52
Percent parens: 0.115
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mult} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 1, :instruction -34} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_when} {:close 0, :instruction integer_flush})
Zero cases best program: (integer_mult boolean_stackdepth exec_yank exec_swap (exec_empty in2 boolean_frominteger integer_dup integer_shove integer_dup boolean_stackdepth) () exec_yank exec_swap (boolean_not in1 in3 integer_dup integer_dup integer_shove) (integer_dup integer_shove) in2 boolean_yank in1 integer_shove integer_dup integer_yankdup integer_dup integer_lte integer_dup integer_shove print_integer exec_yankdup integer_fromboolean exec_stackdepth exec_eq boolean_rot integer_min -34 integer_fromboolean boolean_swap boolean_dup_times integer_stackdepth integer_mod exec_when () integer_flush)
Zero cases best errors: [0 0 1 1 1 0 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 52
Percent parens: 0.115
--- Lexicase Population Statistics ---
Count of elite individuals by case: (426 66 810 225 11 68 33 903 587 34)
Population mean number of elite cases: 3.16
Count of perfect (error zero) individuals by case: (426 66 810 225 11 68 33 903 587 34)
Population mean number of perfect (error zero) cases: 3.16
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mult} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 1, :instruction -34} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_when} {:close 0, :instruction integer_flush})
Best program: (integer_mult boolean_stackdepth exec_yank exec_swap (exec_empty in2 boolean_frominteger integer_dup integer_shove integer_dup boolean_stackdepth) () exec_yank exec_swap (boolean_not in1 in3 integer_dup integer_dup integer_shove) (integer_dup integer_shove) in2 boolean_yank in1 integer_shove integer_dup integer_yankdup integer_dup integer_lte integer_dup integer_shove print_integer exec_yankdup integer_fromboolean exec_stackdepth exec_eq boolean_rot integer_min -34 integer_fromboolean boolean_swap boolean_dup_times integer_stackdepth integer_mod exec_when () integer_flush)
Errors: [0 0 1 1 1 0 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 46
Size: 52
Percent parens: 0.115
--- Population Statistics ---
Average total errors in population: 6.837
Median total errors in population: 7
Error averages by case: (0.574 0.934 0.19 0.775 0.989 0.932 0.967 0.097 0.413 0.966)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 55.967
Average program size in population (points): 64.419
Average percent parens in population: 0.130
Minimum age in population: 45.55497711896896
Maximum age in population: 48.98334230482578
Average age in population: 46.85332345746085
Median age in population: 46.76915971189737
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 234
Genome diversity (% unique genomes):	 0.591
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 253
Syntactic diversity (% unique Push programs):	 0.554
Total error diversity:				 0.008
Error (vector) diversity:			 0.038
Behavioral diversity:				 0.141
--- Run Statistics ---
Number of program evaluations used so far: 32000
Number of point (instruction) evaluations so far: 13653800
--- Timings ---
Current time: 1559314411732 milliseconds
Total Time:          88.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        61.8 seconds, 69.7%
Fitness Testing:     16.5 seconds, 18.7%
Report:              10.2 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 31
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 32
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 32
;;******************************
;; -*- Smallest problem report - generation 32
Test total error for best: 518
Test mean error for best: 0.51800
Test Case    0 | Error: 1
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 1
Test Case    5 | Error: 1
Test Case    6 | Error: 0
Test Case    7 | Error: 1
Test Case    8 | Error: 0
Test Case    9 | Error: 1
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 1
Test Case   13 | Error: 1
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 1
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 1
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 1
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 1
Test Case   33 | Error: 1
Test Case   34 | Error: 1
Test Case   35 | Error: 0
Test Case   36 | Error: 1
Test Case   37 | Error: 1
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 1
Test Case   41 | Error: 1
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 1
Test Case   46 | Error: 1
Test Case   47 | Error: 1
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 1
Test Case   51 | Error: 0
Test Case   52 | Error: 1
Test Case   53 | Error: 0
Test Case   54 | Error: 1
Test Case   55 | Error: 0
Test Case   56 | Error: 1
Test Case   57 | Error: 0
Test Case   58 | Error: 1
Test Case   59 | Error: 1
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 1
Test Case   65 | Error: 0
Test Case   66 | Error: 1
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 1
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 1
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 1
Test Case   82 | Error: 1
Test Case   83 | Error: 1
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 1
Test Case   88 | Error: 1
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 1
Test Case   94 | Error: 1
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 1
Test Case   99 | Error: 1
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 1
Test Case  202 | Error: 1
Test Case  203 | Error: 1
Test Case  204 | Error: 0
Test Case  205 | Error: 1
Test Case  206 | Error: 1
Test Case  207 | Error: 1
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 1
Test Case  211 | Error: 1
Test Case  212 | Error: 1
Test Case  213 | Error: 1
Test Case  214 | Error: 1
Test Case  215 | Error: 1
Test Case  216 | Error: 1
Test Case  217 | Error: 1
Test Case  218 | Error: 1
Test Case  219 | Error: 1
Test Case  220 | Error: 1
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 1
Test Case  226 | Error: 1
Test Case  227 | Error: 1
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 1
Test Case  231 | Error: 1
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 1
Test Case  236 | Error: 1
Test Case  237 | Error: 1
Test Case  238 | Error: 0
Test Case  239 | Error: 1
Test Case  240 | Error: 0
Test Case  241 | Error: 1
Test Case  242 | Error: 1
Test Case  243 | Error: 0
Test Case  244 | Error: 1
Test Case  245 | Error: 1
Test Case  246 | Error: 1
Test Case  247 | Error: 1
Test Case  248 | Error: 1
Test Case  249 | Error: 1
Test Case  250 | Error: 1
Test Case  251 | Error: 1
Test Case  252 | Error: 1
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 1
Test Case  256 | Error: 1
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 1
Test Case  260 | Error: 1
Test Case  261 | Error: 1
Test Case  262 | Error: 1
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 1
Test Case  266 | Error: 1
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 1
Test Case  271 | Error: 1
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 1
Test Case  275 | Error: 1
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 1
Test Case  280 | Error: 1
Test Case  281 | Error: 0
Test Case  282 | Error: 1
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 1
Test Case  286 | Error: 0
Test Case  287 | Error: 1
Test Case  288 | Error: 1
Test Case  289 | Error: 1
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 1
Test Case  294 | Error: 1
Test Case  295 | Error: 1
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 1
Test Case  299 | Error: 1
Test Case  300 | Error: 1
Test Case  301 | Error: 1
Test Case  302 | Error: 0
Test Case  303 | Error: 1
Test Case  304 | Error: 1
Test Case  305 | Error: 1
Test Case  306 | Error: 0
Test Case  307 | Error: 1
Test Case  308 | Error: 1
Test Case  309 | Error: 1
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 1
Test Case  314 | Error: 1
Test Case  315 | Error: 0
Test Case  316 | Error: 1
Test Case  317 | Error: 0
Test Case  318 | Error: 1
Test Case  319 | Error: 1
Test Case  320 | Error: 1
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 1
Test Case  324 | Error: 0
Test Case  325 | Error: 1
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 1
Test Case  329 | Error: 1
Test Case  330 | Error: 1
Test Case  331 | Error: 1
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 1
Test Case  335 | Error: 0
Test Case  336 | Error: 1
Test Case  337 | Error: 1
Test Case  338 | Error: 1
Test Case  339 | Error: 1
Test Case  340 | Error: 1
Test Case  341 | Error: 1
Test Case  342 | Error: 1
Test Case  343 | Error: 1
Test Case  344 | Error: 1
Test Case  345 | Error: 1
Test Case  346 | Error: 1
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 1
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 1
Test Case  353 | Error: 1
Test Case  354 | Error: 1
Test Case  355 | Error: 1
Test Case  356 | Error: 1
Test Case  357 | Error: 1
Test Case  358 | Error: 1
Test Case  359 | Error: 1
Test Case  360 | Error: 1
Test Case  361 | Error: 1
Test Case  362 | Error: 0
Test Case  363 | Error: 1
Test Case  364 | Error: 1
Test Case  365 | Error: 0
Test Case  366 | Error: 1
Test Case  367 | Error: 1
Test Case  368 | Error: 1
Test Case  369 | Error: 0
Test Case  370 | Error: 1
Test Case  371 | Error: 1
Test Case  372 | Error: 1
Test Case  373 | Error: 1
Test Case  374 | Error: 1
Test Case  375 | Error: 1
Test Case  376 | Error: 0
Test Case  377 | Error: 1
Test Case  378 | Error: 1
Test Case  379 | Error: 0
Test Case  380 | Error: 1
Test Case  381 | Error: 1
Test Case  382 | Error: 0
Test Case  383 | Error: 1
Test Case  384 | Error: 0
Test Case  385 | Error: 1
Test Case  386 | Error: 0
Test Case  387 | Error: 1
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 1
Test Case  391 | Error: 0
Test Case  392 | Error: 1
Test Case  393 | Error: 1
Test Case  394 | Error: 1
Test Case  395 | Error: 1
Test Case  396 | Error: 0
Test Case  397 | Error: 1
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 1
Test Case  401 | Error: 1
Test Case  402 | Error: 0
Test Case  403 | Error: 1
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 1
Test Case  408 | Error: 1
Test Case  409 | Error: 1
Test Case  410 | Error: 1
Test Case  411 | Error: 1
Test Case  412 | Error: 1
Test Case  413 | Error: 1
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 1
Test Case  417 | Error: 1
Test Case  418 | Error: 1
Test Case  419 | Error: 0
Test Case  420 | Error: 1
Test Case  421 | Error: 1
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 1
Test Case  425 | Error: 0
Test Case  426 | Error: 1
Test Case  427 | Error: 1
Test Case  428 | Error: 1
Test Case  429 | Error: 1
Test Case  430 | Error: 0
Test Case  431 | Error: 1
Test Case  432 | Error: 1
Test Case  433 | Error: 1
Test Case  434 | Error: 1
Test Case  435 | Error: 0
Test Case  436 | Error: 1
Test Case  437 | Error: 1
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 1
Test Case  441 | Error: 1
Test Case  442 | Error: 0
Test Case  443 | Error: 1
Test Case  444 | Error: 1
Test Case  445 | Error: 1
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 1
Test Case  449 | Error: 1
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 1
Test Case  453 | Error: 0
Test Case  454 | Error: 1
Test Case  455 | Error: 1
Test Case  456 | Error: 0
Test Case  457 | Error: 1
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 1
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 1
Test Case  465 | Error: 1
Test Case  466 | Error: 1
Test Case  467 | Error: 1
Test Case  468 | Error: 0
Test Case  469 | Error: 1
Test Case  470 | Error: 1
Test Case  471 | Error: 0
Test Case  472 | Error: 1
Test Case  473 | Error: 1
Test Case  474 | Error: 1
Test Case  475 | Error: 1
Test Case  476 | Error: 1
Test Case  477 | Error: 1
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 1
Test Case  481 | Error: 1
Test Case  482 | Error: 1
Test Case  483 | Error: 1
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 1
Test Case  487 | Error: 1
Test Case  488 | Error: 0
Test Case  489 | Error: 1
Test Case  490 | Error: 1
Test Case  491 | Error: 0
Test Case  492 | Error: 1
Test Case  493 | Error: 0
Test Case  494 | Error: 1
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 1
Test Case  500 | Error: 0
Test Case  501 | Error: 1
Test Case  502 | Error: 1
Test Case  503 | Error: 1
Test Case  504 | Error: 0
Test Case  505 | Error: 1
Test Case  506 | Error: 1
Test Case  507 | Error: 1
Test Case  508 | Error: 0
Test Case  509 | Error: 1
Test Case  510 | Error: 0
Test Case  511 | Error: 1
Test Case  512 | Error: 0
Test Case  513 | Error: 1
Test Case  514 | Error: 1
Test Case  515 | Error: 1
Test Case  516 | Error: 0
Test Case  517 | Error: 1
Test Case  518 | Error: 1
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 1
Test Case  522 | Error: 1
Test Case  523 | Error: 1
Test Case  524 | Error: 1
Test Case  525 | Error: 0
Test Case  526 | Error: 1
Test Case  527 | Error: 1
Test Case  528 | Error: 1
Test Case  529 | Error: 0
Test Case  530 | Error: 1
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 1
Test Case  535 | Error: 1
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 1
Test Case  540 | Error: 1
Test Case  541 | Error: 1
Test Case  542 | Error: 0
Test Case  543 | Error: 1
Test Case  544 | Error: 0
Test Case  545 | Error: 1
Test Case  546 | Error: 0
Test Case  547 | Error: 1
Test Case  548 | Error: 1
Test Case  549 | Error: 0
Test Case  550 | Error: 1
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 1
Test Case  554 | Error: 1
Test Case  555 | Error: 0
Test Case  556 | Error: 1
Test Case  557 | Error: 1
Test Case  558 | Error: 0
Test Case  559 | Error: 1
Test Case  560 | Error: 1
Test Case  561 | Error: 0
Test Case  562 | Error: 1
Test Case  563 | Error: 1
Test Case  564 | Error: 0
Test Case  565 | Error: 1
Test Case  566 | Error: 1
Test Case  567 | Error: 1
Test Case  568 | Error: 1
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 1
Test Case  572 | Error: 1
Test Case  573 | Error: 0
Test Case  574 | Error: 1
Test Case  575 | Error: 0
Test Case  576 | Error: 1
Test Case  577 | Error: 1
Test Case  578 | Error: 0
Test Case  579 | Error: 1
Test Case  580 | Error: 0
Test Case  581 | Error: 1
Test Case  582 | Error: 0
Test Case  583 | Error: 1
Test Case  584 | Error: 1
Test Case  585 | Error: 1
Test Case  586 | Error: 1
Test Case  587 | Error: 1
Test Case  588 | Error: 1
Test Case  589 | Error: 1
Test Case  590 | Error: 1
Test Case  591 | Error: 1
Test Case  592 | Error: 0
Test Case  593 | Error: 1
Test Case  594 | Error: 0
Test Case  595 | Error: 1
Test Case  596 | Error: 1
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 1
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 1
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 1
Test Case  606 | Error: 1
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 1
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 1
Test Case  613 | Error: 1
Test Case  614 | Error: 1
Test Case  615 | Error: 1
Test Case  616 | Error: 1
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 1
Test Case  620 | Error: 1
Test Case  621 | Error: 0
Test Case  622 | Error: 1
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 1
Test Case  630 | Error: 0
Test Case  631 | Error: 1
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 1
Test Case  637 | Error: 1
Test Case  638 | Error: 1
Test Case  639 | Error: 1
Test Case  640 | Error: 1
Test Case  641 | Error: 1
Test Case  642 | Error: 1
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 1
Test Case  648 | Error: 1
Test Case  649 | Error: 1
Test Case  650 | Error: 0
Test Case  651 | Error: 1
Test Case  652 | Error: 1
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 1
Test Case  656 | Error: 1
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 1
Test Case  661 | Error: 1
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 1
Test Case  665 | Error: 0
Test Case  666 | Error: 1
Test Case  667 | Error: 1
Test Case  668 | Error: 1
Test Case  669 | Error: 1
Test Case  670 | Error: 1
Test Case  671 | Error: 0
Test Case  672 | Error: 1
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 1
Test Case  676 | Error: 0
Test Case  677 | Error: 1
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 1
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 1
Test Case  686 | Error: 1
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 1
Test Case  690 | Error: 0
Test Case  691 | Error: 1
Test Case  692 | Error: 1
Test Case  693 | Error: 0
Test Case  694 | Error: 1
Test Case  695 | Error: 0
Test Case  696 | Error: 1
Test Case  697 | Error: 1
Test Case  698 | Error: 1
Test Case  699 | Error: 1
Test Case  700 | Error: 1
Test Case  701 | Error: 1
Test Case  702 | Error: 0
Test Case  703 | Error: 1
Test Case  704 | Error: 1
Test Case  705 | Error: 1
Test Case  706 | Error: 1
Test Case  707 | Error: 1
Test Case  708 | Error: 1
Test Case  709 | Error: 1
Test Case  710 | Error: 0
Test Case  711 | Error: 1
Test Case  712 | Error: 1
Test Case  713 | Error: 1
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 1
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 1
Test Case  720 | Error: 1
Test Case  721 | Error: 1
Test Case  722 | Error: 0
Test Case  723 | Error: 1
Test Case  724 | Error: 0
Test Case  725 | Error: 1
Test Case  726 | Error: 1
Test Case  727 | Error: 1
Test Case  728 | Error: 1
Test Case  729 | Error: 1
Test Case  730 | Error: 0
Test Case  731 | Error: 1
Test Case  732 | Error: 0
Test Case  733 | Error: 1
Test Case  734 | Error: 1
Test Case  735 | Error: 1
Test Case  736 | Error: 1
Test Case  737 | Error: 1
Test Case  738 | Error: 1
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 1
Test Case  742 | Error: 1
Test Case  743 | Error: 1
Test Case  744 | Error: 0
Test Case  745 | Error: 1
Test Case  746 | Error: 1
Test Case  747 | Error: 0
Test Case  748 | Error: 1
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 1
Test Case  753 | Error: 1
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 1
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 1
Test Case  760 | Error: 1
Test Case  761 | Error: 1
Test Case  762 | Error: 0
Test Case  763 | Error: 1
Test Case  764 | Error: 1
Test Case  765 | Error: 1
Test Case  766 | Error: 0
Test Case  767 | Error: 1
Test Case  768 | Error: 1
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 1
Test Case  772 | Error: 0
Test Case  773 | Error: 1
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 1
Test Case  778 | Error: 1
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 1
Test Case  782 | Error: 0
Test Case  783 | Error: 1
Test Case  784 | Error: 0
Test Case  785 | Error: 1
Test Case  786 | Error: 1
Test Case  787 | Error: 1
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 1
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 1
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 1
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 1
Test Case  801 | Error: 0
Test Case  802 | Error: 1
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 1
Test Case  807 | Error: 1
Test Case  808 | Error: 1
Test Case  809 | Error: 0
Test Case  810 | Error: 1
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 1
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 1
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 1
Test Case  822 | Error: 1
Test Case  823 | Error: 0
Test Case  824 | Error: 1
Test Case  825 | Error: 1
Test Case  826 | Error: 0
Test Case  827 | Error: 1
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 1
Test Case  831 | Error: 0
Test Case  832 | Error: 1
Test Case  833 | Error: 1
Test Case  834 | Error: 0
Test Case  835 | Error: 1
Test Case  836 | Error: 1
Test Case  837 | Error: 0
Test Case  838 | Error: 1
Test Case  839 | Error: 0
Test Case  840 | Error: 1
Test Case  841 | Error: 0
Test Case  842 | Error: 1
Test Case  843 | Error: 1
Test Case  844 | Error: 0
Test Case  845 | Error: 1
Test Case  846 | Error: 1
Test Case  847 | Error: 0
Test Case  848 | Error: 1
Test Case  849 | Error: 1
Test Case  850 | Error: 1
Test Case  851 | Error: 1
Test Case  852 | Error: 1
Test Case  853 | Error: 1
Test Case  854 | Error: 1
Test Case  855 | Error: 1
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 1
Test Case  860 | Error: 0
Test Case  861 | Error: 1
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 1
Test Case  865 | Error: 1
Test Case  866 | Error: 1
Test Case  867 | Error: 1
Test Case  868 | Error: 0
Test Case  869 | Error: 1
Test Case  870 | Error: 1
Test Case  871 | Error: 1
Test Case  872 | Error: 1
Test Case  873 | Error: 1
Test Case  874 | Error: 0
Test Case  875 | Error: 1
Test Case  876 | Error: 1
Test Case  877 | Error: 0
Test Case  878 | Error: 1
Test Case  879 | Error: 1
Test Case  880 | Error: 1
Test Case  881 | Error: 1
Test Case  882 | Error: 1
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 1
Test Case  888 | Error: 1
Test Case  889 | Error: 1
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 1
Test Case  894 | Error: 1
Test Case  895 | Error: 0
Test Case  896 | Error: 1
Test Case  897 | Error: 1
Test Case  898 | Error: 0
Test Case  899 | Error: 1
Test Case  900 | Error: 1
Test Case  901 | Error: 1
Test Case  902 | Error: 1
Test Case  903 | Error: 1
Test Case  904 | Error: 0
Test Case  905 | Error: 1
Test Case  906 | Error: 1
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 1
Test Case  910 | Error: 0
Test Case  911 | Error: 1
Test Case  912 | Error: 1
Test Case  913 | Error: 1
Test Case  914 | Error: 0
Test Case  915 | Error: 1
Test Case  916 | Error: 0
Test Case  917 | Error: 1
Test Case  918 | Error: 0
Test Case  919 | Error: 1
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 1
Test Case  923 | Error: 1
Test Case  924 | Error: 1
Test Case  925 | Error: 1
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 1
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 1
Test Case  934 | Error: 1
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 1
Test Case  938 | Error: 1
Test Case  939 | Error: 1
Test Case  940 | Error: 0
Test Case  941 | Error: 1
Test Case  942 | Error: 1
Test Case  943 | Error: 0
Test Case  944 | Error: 1
Test Case  945 | Error: 0
Test Case  946 | Error: 1
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 1
Test Case  950 | Error: 0
Test Case  951 | Error: 1
Test Case  952 | Error: 1
Test Case  953 | Error: 1
Test Case  954 | Error: 1
Test Case  955 | Error: 1
Test Case  956 | Error: 1
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 1
Test Case  960 | Error: 1
Test Case  961 | Error: 1
Test Case  962 | Error: 0
Test Case  963 | Error: 1
Test Case  964 | Error: 1
Test Case  965 | Error: 1
Test Case  966 | Error: 0
Test Case  967 | Error: 1
Test Case  968 | Error: 1
Test Case  969 | Error: 0
Test Case  970 | Error: 1
Test Case  971 | Error: 1
Test Case  972 | Error: 0
Test Case  973 | Error: 1
Test Case  974 | Error: 1
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 1
Test Case  978 | Error: 0
Test Case  979 | Error: 1
Test Case  980 | Error: 1
Test Case  981 | Error: 1
Test Case  982 | Error: 1
Test Case  983 | Error: 0
Test Case  984 | Error: 1
Test Case  985 | Error: 1
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 1
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 1
Test Case  993 | Error: 1
Test Case  994 | Error: 1
Test Case  995 | Error: 1
Test Case  996 | Error: 1
Test Case  997 | Error: 1
Test Case  998 | Error: 0
Test Case  999 | Error: 1
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -40                 | Program output: -40                
Correct output: 67                  | Program output: 79                 
Correct output: -85                 | Program output: -85                
Correct output: 69                  | Program output: 69                 
Correct output: 30                  | Program output: 37                 
Correct output: 22                  | Program output: 22                 
Correct output: -51                 | Program output: -51                
Correct output: 25                  | Program output: 25                 
Correct output: -76                 | Program output: -76                
Correct output: 53                  | Program output: 57                 
Correct output: -60                 | Program output: -60                
Correct output: 86                  | Program output: 86                 
Correct output: 86                  | Program output: 86                 
Correct output: 35                  | Program output: 35                 
Correct output: 11                  | Program output: 11                 
Correct output: 13                  | Program output: 13                 
Correct output: 45                  | Program output: 45                 
Correct output: 25                  | Program output: 98                 
Correct output: 23                  | Program output: 64                 
Correct output: 6                   | Program output: 17                 
Correct output: 5                   | Program output: 5                  
Correct output: 1                   | Program output: 1                  
Correct output: 34                  | Program output: 99                 
Correct output: 34                  | Program output: 34                 
Correct output: 31                  | Program output: 32                 
Correct output: 34                  | Program output: 34                 
Correct output: 12                  | Program output: 12                 
Correct output: 3                   | Program output: 61                 
Correct output: 1                   | Program output: 1                  
Correct output: 21                  | Program output: 21                 
Correct output: 5                   | Program output: 12                 
Correct output: 3                   | Program output: 95                 
Correct output: 1                   | Program output: 1                  
Correct output: 63                  | Program output: 83                 
Correct output: 25                  | Program output: 25                 
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: -91                
Correct output: -97                 | Program output: -39                
Correct output: -85                 | Program output: -9                 
Correct output: -81                 | Program output: -72                
Correct output: 43                  | Program output: 65                 
Correct output: -74                 | Program output: -74                
Correct output: -75                 | Program output: 9                  
Correct output: -44                 | Program output: -44                
Correct output: -53                 | Program output: 3                  
Correct output: -64                 | Program output: -64                
Correct output: -87                 | Program output: -86                
Correct output: -5                  | Program output: -5                 
Correct output: -57                 | Program output: -51                
Correct output: -68                 | Program output: -25                
Correct output: -49                 | Program output: -2                 
Correct output: -61                 | Program output: -61                
Correct output: -86                 | Program output: -27                
Correct output: -30                 | Program output: 28                 
Correct output: -70                 | Program output: -70                
Correct output: -83                 | Program output: -83                
Correct output: -70                 | Program output: -44                
Correct output: -59                 | Program output: -59                
Correct output: -92                 | Program output: -92                
Correct output: -67                 | Program output: -66                
Correct output: 23                  | Program output: 23                 
Correct output: -86                 | Program output: -72                
Correct output: -98                 | Program output: -98                
Correct output: -61                 | Program output: -61                
Correct output: -86                 | Program output: -86                
Correct output: -87                 | Program output: -87                
Correct output: -92                 | Program output: -92                
Correct output: -29                 | Program output: 4                  
Correct output: -74                 | Program output: 0                  
Correct output: -82                 | Program output: 61                 
Correct output: -83                 | Program output: -83                
Correct output: -5                  | Program output: 80                 
Correct output: -57                 | Program output: -12                
Correct output: -100                | Program output: -100               
Correct output: -33                 | Program output: 11                 
Correct output: -69                 | Program output: -21                
Correct output: -78                 | Program output: -78                
Correct output: -20                 | Program output: -20                
Correct output: -69                 | Program output: -69                
Correct output: -99                 | Program output: 40                 
Correct output: -96                 | Program output: -96                
Correct output: -24                 | Program output: -24                
Correct output: -85                 | Program output: -85                
Correct output: -87                 | Program output: -87                
Correct output: -56                 | Program output: -56                
Correct output: -100                | Program output: -100               
Correct output: -25                 | Program output: -19                
Correct output: -33                 | Program output: -33                
Correct output: -86                 | Program output: 9                  
Correct output: -94                 | Program output: 22                 
Correct output: -85                 | Program output: 85                 
Correct output: -46                 | Program output: -46                
Correct output: -98                 | Program output: -98                
Correct output: -80                 | Program output: 41                 
Correct output: -58                 | Program output: 30                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mult} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 1, :instruction -34} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_when})
Lexicase best program: (integer_mult boolean_stackdepth exec_yank exec_s (print_integer in2 integer_dup integer_shove in2 in1) (integer_dup integer_shove) (exec_swap (boolean_pop exec_yank exec_swap (in2 in3) (integer_dup integer_shove) integer_dup integer_shove) (in2 boolean_yank in1 integer_shove) integer_dup integer_yankdup integer_dup integer_lte) integer_dup integer_shove print_integer exec_yankdup integer_fromboolean exec_stackdepth exec_eq boolean_rot integer_min -34 integer_fromboolean boolean_swap boolean_dup_times integer_stackdepth integer_mod exec_when ())
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 55
Percent parens: 0.164
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mult} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 1, :instruction -34} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_when})
Zero cases best program: (integer_mult boolean_stackdepth exec_yank exec_s (print_integer in2 integer_dup integer_shove in2 in1) (integer_dup integer_shove) (exec_swap (boolean_pop exec_yank exec_swap (in2 in3) (integer_dup integer_shove) integer_dup integer_shove) (in2 boolean_yank in1 integer_shove) integer_dup integer_yankdup integer_dup integer_lte) integer_dup integer_shove print_integer exec_yankdup integer_fromboolean exec_stackdepth exec_eq boolean_rot integer_min -34 integer_fromboolean boolean_swap boolean_dup_times integer_stackdepth integer_mod exec_when ())
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 55
Percent parens: 0.164
--- Lexicase Population Statistics ---
Count of elite individuals by case: (331 748 410 867 242 848 417 722 287 313)
Population mean number of elite cases: 5.18
Count of perfect (error zero) individuals by case: (331 748 410 867 242 848 417 722 287 313)
Population mean number of perfect (error zero) cases: 5.18
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mult} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction in2} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 1, :instruction exec_s} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_flush})
Best program: (integer_mult boolean_stackdepth exec_yank exec_swap (print_integer in2 integer_yank) (integer_dup integer_shove) integer_dup integer_shove integer_dup integer_shove in2 in1 integer_dup integer_shove exec_swap (boolean_pop exec_yank exec_swap (in2 in3) (integer_dup integer_shove) integer_dup integer_shove) (in2 boolean_yank in1 integer_dup integer_shove integer_dup integer_dup in2 boolean_yank in1 integer_shove) integer_dup integer_yankdup integer_dup integer_lte integer_dup integer_shove print_integer exec_yankdup integer_fromboolean integer_fromboolean exec_stackdepth exec_eq exec_eq boolean_rot integer_min exec_s () (integer_fromboolean boolean_swap boolean_dup_times integer_stackdepth integer_mod integer_gt) (integer_flush))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 61
Size: 71
Percent parens: 0.141
--- Population Statistics ---
Average total errors in population: 4.815
Median total errors in population: 4
Error averages by case: (0.669 0.252 0.59 0.133 0.758 0.152 0.583 0.278 0.713 0.687)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 52.015
Average program size in population (points): 59.95
Average percent parens in population: 0.131
Minimum age in population: 46.55497711896896
Maximum age in population: 50.60195665806532
Average age in population: 48.60815184507146
Median age in population: 48.66206841543317
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 174
Genome diversity (% unique genomes):	 0.6
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 179
Syntactic diversity (% unique Push programs):	 0.566
Total error diversity:				 0.011
Error (vector) diversity:			 0.084
Behavioral diversity:				 0.197
--- Run Statistics ---
Number of program evaluations used so far: 33000
Number of point (instruction) evaluations so far: 14182007
--- Timings ---
Current time: 1559314414592 milliseconds
Total Time:          91.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        63.6 seconds, 69.6%
Fitness Testing:     17.1 seconds, 18.7%
Report:              10.6 seconds, 11.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 32
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 32
Successful program: (integer_mult boolean_stackdepth exec_yank exec_swap (print_integer in2 integer_yank) (integer_dup integer_shove) integer_dup integer_shove integer_dup integer_shove in2 in1 integer_dup integer_shove exec_swap (boolean_pop exec_yank exec_swap (in2 in3) (integer_dup integer_shove) integer_dup integer_shove) (in2 boolean_yank in1 integer_dup integer_shove integer_dup integer_dup in2 boolean_yank in1 integer_shove) integer_dup integer_yankdup integer_dup integer_lte integer_dup integer_shove print_integer exec_yankdup integer_fromboolean integer_fromboolean exec_stackdepth exec_eq exec_eq boolean_rot integer_min exec_s () (integer_fromboolean boolean_swap boolean_dup_times integer_stackdepth integer_mod integer_gt) (integer_flush))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 71


Auto-simplifying with starting size: 71
step: 0
program: (integer_mult boolean_stackdepth exec_yank exec_swap (print_integer in2 integer_yank) (integer_dup integer_shove) integer_dup integer_shove integer_dup integer_shove in2 in1 integer_dup integer_shove exec_swap (boolean_pop exec_yank exec_swap (in2 in3) (integer_dup integer_shove) integer_dup integer_shove) (in2 boolean_yank in1 integer_dup integer_shove integer_dup integer_dup in2 boolean_yank in1 integer_shove) integer_dup integer_yankdup integer_dup integer_lte integer_dup integer_shove print_integer exec_yankdup integer_fromboolean integer_fromboolean exec_stackdepth exec_eq exec_eq boolean_rot integer_min exec_s () (integer_fromboolean boolean_swap boolean_dup_times integer_stackdepth integer_mod integer_gt) (integer_flush))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 71

step: 500
program: (integer_mult boolean_stackdepth exec_yank exec_swap (print_integer in2 integer_yank) (integer_dup integer_shove) integer_dup integer_shove integer_dup integer_shove in2 in1 integer_dup integer_shove exec_swap (boolean_pop exec_yank exec_swap (in2 in3) (integer_dup integer_shove) integer_dup integer_shove) (in2 boolean_yank in1 integer_dup integer_shove integer_dup integer_dup in2 boolean_yank in1 integer_shove) integer_dup integer_yankdup integer_dup integer_lte integer_dup integer_shove print_integer exec_yankdup integer_fromboolean integer_fromboolean exec_stackdepth exec_eq exec_eq boolean_rot integer_min exec_s () (integer_fromboolean boolean_swap boolean_dup_times integer_stackdepth integer_mod integer_gt) (integer_flush))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 71

step: 1000
program: (integer_mult boolean_stackdepth exec_yank exec_swap (print_integer in2 integer_yank) (integer_dup integer_shove) integer_dup integer_shove integer_dup integer_shove in2 in1 integer_dup integer_shove exec_swap (boolean_pop exec_yank exec_swap (in2 in3) (integer_dup integer_shove) integer_dup integer_shove) (in2 boolean_yank in1 integer_dup integer_shove integer_dup integer_dup in2 boolean_yank in1 integer_shove) integer_dup integer_yankdup integer_dup integer_lte integer_dup integer_shove print_integer exec_yankdup integer_fromboolean integer_fromboolean exec_stackdepth exec_eq exec_eq boolean_rot integer_min exec_s () (integer_fromboolean boolean_swap boolean_dup_times integer_stackdepth integer_mod integer_gt) (integer_flush))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 71

step: 1500
program: (integer_mult boolean_stackdepth exec_yank exec_swap (print_integer in2 integer_yank) (integer_dup integer_shove) integer_dup integer_shove integer_dup integer_shove in2 in1 integer_dup integer_shove exec_swap (boolean_pop exec_yank exec_swap (in2 in3) (integer_dup integer_shove) integer_dup integer_shove) (in2 boolean_yank in1 integer_dup integer_shove integer_dup integer_dup in2 boolean_yank in1 integer_shove) integer_dup integer_yankdup integer_dup integer_lte integer_dup integer_shove print_integer exec_yankdup integer_fromboolean integer_fromboolean exec_stackdepth exec_eq exec_eq boolean_rot integer_min exec_s () (integer_fromboolean boolean_swap boolean_dup_times integer_stackdepth integer_mod integer_gt) (integer_flush))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 71

step: 2000
program: (integer_mult boolean_stackdepth exec_yank exec_swap (print_integer in2 integer_yank) (integer_dup integer_shove) integer_dup integer_shove integer_dup integer_shove in2 in1 integer_dup integer_shove exec_swap (boolean_pop exec_yank exec_swap (in2 in3) (integer_dup integer_shove) integer_dup integer_shove) (in2 boolean_yank in1 integer_dup integer_shove integer_dup integer_dup in2 boolean_yank in1 integer_shove) integer_dup integer_yankdup integer_dup integer_lte integer_dup integer_shove print_integer exec_yankdup integer_fromboolean integer_fromboolean exec_stackdepth exec_eq exec_eq boolean_rot integer_min exec_s () (integer_fromboolean boolean_swap boolean_dup_times integer_stackdepth integer_mod integer_gt) (integer_flush))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 71

step: 2500
program: (integer_mult boolean_stackdepth exec_yank exec_swap (print_integer in2 integer_yank) (integer_dup integer_shove) integer_dup integer_shove integer_dup integer_shove in2 in1 integer_dup integer_shove exec_swap (boolean_pop exec_yank exec_swap (in2 in3) (integer_dup integer_shove) integer_dup integer_shove) (in2 boolean_yank in1 integer_dup integer_shove integer_dup integer_dup in2 boolean_yank in1 integer_shove) integer_dup integer_yankdup integer_dup integer_lte integer_dup integer_shove print_integer exec_yankdup integer_fromboolean integer_fromboolean exec_stackdepth exec_eq exec_eq boolean_rot integer_min exec_s () (integer_fromboolean boolean_swap boolean_dup_times integer_stackdepth integer_mod integer_gt) (integer_flush))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 71

step: 3000
program: (integer_mult boolean_stackdepth exec_yank exec_swap (print_integer in2 integer_yank) (integer_dup integer_shove) integer_dup integer_shove integer_dup integer_shove in2 in1 integer_dup integer_shove exec_swap (boolean_pop exec_yank exec_swap (in2 in3) (integer_dup integer_shove) integer_dup integer_shove) (in2 boolean_yank in1 integer_dup integer_shove integer_dup integer_dup in2 boolean_yank in1 integer_shove) integer_dup integer_yankdup integer_dup integer_lte integer_dup integer_shove print_integer exec_yankdup integer_fromboolean integer_fromboolean exec_stackdepth exec_eq exec_eq boolean_rot integer_min exec_s () (integer_fromboolean boolean_swap boolean_dup_times integer_stackdepth integer_mod integer_gt) (integer_flush))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 71

step: 3500
program: (integer_mult boolean_stackdepth exec_yank exec_swap (print_integer in2 integer_yank) (integer_dup integer_shove) integer_dup integer_shove integer_dup integer_shove in2 in1 integer_dup integer_shove exec_swap (boolean_pop exec_yank exec_swap (in2 in3) (integer_dup integer_shove) integer_dup integer_shove) (in2 boolean_yank in1 integer_dup integer_shove integer_dup integer_dup in2 boolean_yank in1 integer_shove) integer_dup integer_yankdup integer_dup integer_lte integer_dup integer_shove print_integer exec_yankdup integer_fromboolean integer_fromboolean exec_stackdepth exec_eq exec_eq boolean_rot integer_min exec_s () (integer_fromboolean boolean_swap boolean_dup_times integer_stackdepth integer_mod integer_gt) (integer_flush))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 71

step: 4000
program: (integer_mult boolean_stackdepth exec_yank exec_swap (print_integer in2 integer_yank) (integer_dup integer_shove) integer_dup integer_shove integer_dup integer_shove in2 in1 integer_dup integer_shove exec_swap (boolean_pop exec_yank exec_swap (in2 in3) (integer_dup integer_shove) integer_dup integer_shove) (in2 boolean_yank in1 integer_dup integer_shove integer_dup integer_dup in2 boolean_yank in1 integer_shove) integer_dup integer_yankdup integer_dup integer_lte integer_dup integer_shove print_integer exec_yankdup integer_fromboolean integer_fromboolean exec_stackdepth exec_eq exec_eq boolean_rot integer_min exec_s () (integer_fromboolean boolean_swap boolean_dup_times integer_stackdepth integer_mod integer_gt) (integer_flush))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 71

step: 4500
program: (integer_mult boolean_stackdepth exec_yank exec_swap (print_integer in2 integer_yank) (integer_dup integer_shove) integer_dup integer_shove integer_dup integer_shove in2 in1 integer_dup integer_shove exec_swap (boolean_pop exec_yank exec_swap (in2 in3) (integer_dup integer_shove) integer_dup integer_shove) (in2 boolean_yank in1 integer_dup integer_shove integer_dup integer_dup in2 boolean_yank in1 integer_shove) integer_dup integer_yankdup integer_dup integer_lte integer_dup integer_shove print_integer exec_yankdup integer_fromboolean integer_fromboolean exec_stackdepth exec_eq exec_eq boolean_rot integer_min exec_s () (integer_fromboolean boolean_swap boolean_dup_times integer_stackdepth integer_mod integer_gt) (integer_flush))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 71

step: 5000
program: (integer_mult boolean_stackdepth exec_yank exec_swap (print_integer in2 integer_yank) (integer_dup integer_shove) integer_dup integer_shove integer_dup integer_shove in2 in1 integer_dup integer_shove exec_swap (boolean_pop exec_yank exec_swap (in2 in3) (integer_dup integer_shove) integer_dup integer_shove) (in2 boolean_yank in1 integer_dup integer_shove integer_dup integer_dup in2 boolean_yank in1 integer_shove) integer_dup integer_yankdup integer_dup integer_lte integer_dup integer_shove print_integer exec_yankdup integer_fromboolean integer_fromboolean exec_stackdepth exec_eq exec_eq boolean_rot integer_min exec_s () (integer_fromboolean boolean_swap boolean_dup_times integer_stackdepth integer_mod integer_gt) (integer_flush))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 71

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 32
Test total error for best: 518
Test mean error for best: 0.51800
Test Case    0 | Error: 1
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 1
Test Case    5 | Error: 1
Test Case    6 | Error: 0
Test Case    7 | Error: 1
Test Case    8 | Error: 0
Test Case    9 | Error: 1
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 1
Test Case   13 | Error: 1
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 1
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 1
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 1
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 1
Test Case   33 | Error: 1
Test Case   34 | Error: 1
Test Case   35 | Error: 0
Test Case   36 | Error: 1
Test Case   37 | Error: 1
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 1
Test Case   41 | Error: 1
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 1
Test Case   46 | Error: 1
Test Case   47 | Error: 1
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 1
Test Case   51 | Error: 0
Test Case   52 | Error: 1
Test Case   53 | Error: 0
Test Case   54 | Error: 1
Test Case   55 | Error: 0
Test Case   56 | Error: 1
Test Case   57 | Error: 0
Test Case   58 | Error: 1
Test Case   59 | Error: 1
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 1
Test Case   65 | Error: 0
Test Case   66 | Error: 1
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 1
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 1
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 1
Test Case   82 | Error: 1
Test Case   83 | Error: 1
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 1
Test Case   88 | Error: 1
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 1
Test Case   94 | Error: 1
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 1
Test Case   99 | Error: 1
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 1
Test Case  202 | Error: 1
Test Case  203 | Error: 1
Test Case  204 | Error: 0
Test Case  205 | Error: 1
Test Case  206 | Error: 1
Test Case  207 | Error: 1
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 1
Test Case  211 | Error: 1
Test Case  212 | Error: 1
Test Case  213 | Error: 1
Test Case  214 | Error: 1
Test Case  215 | Error: 1
Test Case  216 | Error: 1
Test Case  217 | Error: 1
Test Case  218 | Error: 1
Test Case  219 | Error: 1
Test Case  220 | Error: 1
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 1
Test Case  226 | Error: 1
Test Case  227 | Error: 1
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 1
Test Case  231 | Error: 1
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 1
Test Case  236 | Error: 1
Test Case  237 | Error: 1
Test Case  238 | Error: 0
Test Case  239 | Error: 1
Test Case  240 | Error: 0
Test Case  241 | Error: 1
Test Case  242 | Error: 1
Test Case  243 | Error: 0
Test Case  244 | Error: 1
Test Case  245 | Error: 1
Test Case  246 | Error: 1
Test Case  247 | Error: 1
Test Case  248 | Error: 1
Test Case  249 | Error: 1
Test Case  250 | Error: 1
Test Case  251 | Error: 1
Test Case  252 | Error: 1
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 1
Test Case  256 | Error: 1
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 1
Test Case  260 | Error: 1
Test Case  261 | Error: 1
Test Case  262 | Error: 1
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 1
Test Case  266 | Error: 1
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 1
Test Case  271 | Error: 1
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 1
Test Case  275 | Error: 1
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 1
Test Case  280 | Error: 1
Test Case  281 | Error: 0
Test Case  282 | Error: 1
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 1
Test Case  286 | Error: 0
Test Case  287 | Error: 1
Test Case  288 | Error: 1
Test Case  289 | Error: 1
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 1
Test Case  294 | Error: 1
Test Case  295 | Error: 1
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 1
Test Case  299 | Error: 1
Test Case  300 | Error: 1
Test Case  301 | Error: 1
Test Case  302 | Error: 0
Test Case  303 | Error: 1
Test Case  304 | Error: 1
Test Case  305 | Error: 1
Test Case  306 | Error: 0
Test Case  307 | Error: 1
Test Case  308 | Error: 1
Test Case  309 | Error: 1
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 1
Test Case  314 | Error: 1
Test Case  315 | Error: 0
Test Case  316 | Error: 1
Test Case  317 | Error: 0
Test Case  318 | Error: 1
Test Case  319 | Error: 1
Test Case  320 | Error: 1
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 1
Test Case  324 | Error: 0
Test Case  325 | Error: 1
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 1
Test Case  329 | Error: 1
Test Case  330 | Error: 1
Test Case  331 | Error: 1
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 1
Test Case  335 | Error: 0
Test Case  336 | Error: 1
Test Case  337 | Error: 1
Test Case  338 | Error: 1
Test Case  339 | Error: 1
Test Case  340 | Error: 1
Test Case  341 | Error: 1
Test Case  342 | Error: 1
Test Case  343 | Error: 1
Test Case  344 | Error: 1
Test Case  345 | Error: 1
Test Case  346 | Error: 1
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 1
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 1
Test Case  353 | Error: 1
Test Case  354 | Error: 1
Test Case  355 | Error: 1
Test Case  356 | Error: 1
Test Case  357 | Error: 1
Test Case  358 | Error: 1
Test Case  359 | Error: 1
Test Case  360 | Error: 1
Test Case  361 | Error: 1
Test Case  362 | Error: 0
Test Case  363 | Error: 1
Test Case  364 | Error: 1
Test Case  365 | Error: 0
Test Case  366 | Error: 1
Test Case  367 | Error: 1
Test Case  368 | Error: 1
Test Case  369 | Error: 0
Test Case  370 | Error: 1
Test Case  371 | Error: 1
Test Case  372 | Error: 1
Test Case  373 | Error: 1
Test Case  374 | Error: 1
Test Case  375 | Error: 1
Test Case  376 | Error: 0
Test Case  377 | Error: 1
Test Case  378 | Error: 1
Test Case  379 | Error: 0
Test Case  380 | Error: 1
Test Case  381 | Error: 1
Test Case  382 | Error: 0
Test Case  383 | Error: 1
Test Case  384 | Error: 0
Test Case  385 | Error: 1
Test Case  386 | Error: 0
Test Case  387 | Error: 1
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 1
Test Case  391 | Error: 0
Test Case  392 | Error: 1
Test Case  393 | Error: 1
Test Case  394 | Error: 1
Test Case  395 | Error: 1
Test Case  396 | Error: 0
Test Case  397 | Error: 1
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 1
Test Case  401 | Error: 1
Test Case  402 | Error: 0
Test Case  403 | Error: 1
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 1
Test Case  408 | Error: 1
Test Case  409 | Error: 1
Test Case  410 | Error: 1
Test Case  411 | Error: 1
Test Case  412 | Error: 1
Test Case  413 | Error: 1
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 1
Test Case  417 | Error: 1
Test Case  418 | Error: 1
Test Case  419 | Error: 0
Test Case  420 | Error: 1
Test Case  421 | Error: 1
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 1
Test Case  425 | Error: 0
Test Case  426 | Error: 1
Test Case  427 | Error: 1
Test Case  428 | Error: 1
Test Case  429 | Error: 1
Test Case  430 | Error: 0
Test Case  431 | Error: 1
Test Case  432 | Error: 1
Test Case  433 | Error: 1
Test Case  434 | Error: 1
Test Case  435 | Error: 0
Test Case  436 | Error: 1
Test Case  437 | Error: 1
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 1
Test Case  441 | Error: 1
Test Case  442 | Error: 0
Test Case  443 | Error: 1
Test Case  444 | Error: 1
Test Case  445 | Error: 1
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 1
Test Case  449 | Error: 1
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 1
Test Case  453 | Error: 0
Test Case  454 | Error: 1
Test Case  455 | Error: 1
Test Case  456 | Error: 0
Test Case  457 | Error: 1
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 1
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 1
Test Case  465 | Error: 1
Test Case  466 | Error: 1
Test Case  467 | Error: 1
Test Case  468 | Error: 0
Test Case  469 | Error: 1
Test Case  470 | Error: 1
Test Case  471 | Error: 0
Test Case  472 | Error: 1
Test Case  473 | Error: 1
Test Case  474 | Error: 1
Test Case  475 | Error: 1
Test Case  476 | Error: 1
Test Case  477 | Error: 1
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 1
Test Case  481 | Error: 1
Test Case  482 | Error: 1
Test Case  483 | Error: 1
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 1
Test Case  487 | Error: 1
Test Case  488 | Error: 0
Test Case  489 | Error: 1
Test Case  490 | Error: 1
Test Case  491 | Error: 0
Test Case  492 | Error: 1
Test Case  493 | Error: 0
Test Case  494 | Error: 1
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 1
Test Case  500 | Error: 0
Test Case  501 | Error: 1
Test Case  502 | Error: 1
Test Case  503 | Error: 1
Test Case  504 | Error: 0
Test Case  505 | Error: 1
Test Case  506 | Error: 1
Test Case  507 | Error: 1
Test Case  508 | Error: 0
Test Case  509 | Error: 1
Test Case  510 | Error: 0
Test Case  511 | Error: 1
Test Case  512 | Error: 0
Test Case  513 | Error: 1
Test Case  514 | Error: 1
Test Case  515 | Error: 1
Test Case  516 | Error: 0
Test Case  517 | Error: 1
Test Case  518 | Error: 1
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 1
Test Case  522 | Error: 1
Test Case  523 | Error: 1
Test Case  524 | Error: 1
Test Case  525 | Error: 0
Test Case  526 | Error: 1
Test Case  527 | Error: 1
Test Case  528 | Error: 1
Test Case  529 | Error: 0
Test Case  530 | Error: 1
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 1
Test Case  535 | Error: 1
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 1
Test Case  540 | Error: 1
Test Case  541 | Error: 1
Test Case  542 | Error: 0
Test Case  543 | Error: 1
Test Case  544 | Error: 0
Test Case  545 | Error: 1
Test Case  546 | Error: 0
Test Case  547 | Error: 1
Test Case  548 | Error: 1
Test Case  549 | Error: 0
Test Case  550 | Error: 1
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 1
Test Case  554 | Error: 1
Test Case  555 | Error: 0
Test Case  556 | Error: 1
Test Case  557 | Error: 1
Test Case  558 | Error: 0
Test Case  559 | Error: 1
Test Case  560 | Error: 1
Test Case  561 | Error: 0
Test Case  562 | Error: 1
Test Case  563 | Error: 1
Test Case  564 | Error: 0
Test Case  565 | Error: 1
Test Case  566 | Error: 1
Test Case  567 | Error: 1
Test Case  568 | Error: 1
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 1
Test Case  572 | Error: 1
Test Case  573 | Error: 0
Test Case  574 | Error: 1
Test Case  575 | Error: 0
Test Case  576 | Error: 1
Test Case  577 | Error: 1
Test Case  578 | Error: 0
Test Case  579 | Error: 1
Test Case  580 | Error: 0
Test Case  581 | Error: 1
Test Case  582 | Error: 0
Test Case  583 | Error: 1
Test Case  584 | Error: 1
Test Case  585 | Error: 1
Test Case  586 | Error: 1
Test Case  587 | Error: 1
Test Case  588 | Error: 1
Test Case  589 | Error: 1
Test Case  590 | Error: 1
Test Case  591 | Error: 1
Test Case  592 | Error: 0
Test Case  593 | Error: 1
Test Case  594 | Error: 0
Test Case  595 | Error: 1
Test Case  596 | Error: 1
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 1
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 1
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 1
Test Case  606 | Error: 1
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 1
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 1
Test Case  613 | Error: 1
Test Case  614 | Error: 1
Test Case  615 | Error: 1
Test Case  616 | Error: 1
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 1
Test Case  620 | Error: 1
Test Case  621 | Error: 0
Test Case  622 | Error: 1
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 1
Test Case  630 | Error: 0
Test Case  631 | Error: 1
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 1
Test Case  637 | Error: 1
Test Case  638 | Error: 1
Test Case  639 | Error: 1
Test Case  640 | Error: 1
Test Case  641 | Error: 1
Test Case  642 | Error: 1
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 1
Test Case  648 | Error: 1
Test Case  649 | Error: 1
Test Case  650 | Error: 0
Test Case  651 | Error: 1
Test Case  652 | Error: 1
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 1
Test Case  656 | Error: 1
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 1
Test Case  661 | Error: 1
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 1
Test Case  665 | Error: 0
Test Case  666 | Error: 1
Test Case  667 | Error: 1
Test Case  668 | Error: 1
Test Case  669 | Error: 1
Test Case  670 | Error: 1
Test Case  671 | Error: 0
Test Case  672 | Error: 1
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 1
Test Case  676 | Error: 0
Test Case  677 | Error: 1
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 1
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 1
Test Case  686 | Error: 1
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 1
Test Case  690 | Error: 0
Test Case  691 | Error: 1
Test Case  692 | Error: 1
Test Case  693 | Error: 0
Test Case  694 | Error: 1
Test Case  695 | Error: 0
Test Case  696 | Error: 1
Test Case  697 | Error: 1
Test Case  698 | Error: 1
Test Case  699 | Error: 1
Test Case  700 | Error: 1
Test Case  701 | Error: 1
Test Case  702 | Error: 0
Test Case  703 | Error: 1
Test Case  704 | Error: 1
Test Case  705 | Error: 1
Test Case  706 | Error: 1
Test Case  707 | Error: 1
Test Case  708 | Error: 1
Test Case  709 | Error: 1
Test Case  710 | Error: 0
Test Case  711 | Error: 1
Test Case  712 | Error: 1
Test Case  713 | Error: 1
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 1
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 1
Test Case  720 | Error: 1
Test Case  721 | Error: 1
Test Case  722 | Error: 0
Test Case  723 | Error: 1
Test Case  724 | Error: 0
Test Case  725 | Error: 1
Test Case  726 | Error: 1
Test Case  727 | Error: 1
Test Case  728 | Error: 1
Test Case  729 | Error: 1
Test Case  730 | Error: 0
Test Case  731 | Error: 1
Test Case  732 | Error: 0
Test Case  733 | Error: 1
Test Case  734 | Error: 1
Test Case  735 | Error: 1
Test Case  736 | Error: 1
Test Case  737 | Error: 1
Test Case  738 | Error: 1
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 1
Test Case  742 | Error: 1
Test Case  743 | Error: 1
Test Case  744 | Error: 0
Test Case  745 | Error: 1
Test Case  746 | Error: 1
Test Case  747 | Error: 0
Test Case  748 | Error: 1
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 1
Test Case  753 | Error: 1
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 1
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 1
Test Case  760 | Error: 1
Test Case  761 | Error: 1
Test Case  762 | Error: 0
Test Case  763 | Error: 1
Test Case  764 | Error: 1
Test Case  765 | Error: 1
Test Case  766 | Error: 0
Test Case  767 | Error: 1
Test Case  768 | Error: 1
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 1
Test Case  772 | Error: 0
Test Case  773 | Error: 1
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 1
Test Case  778 | Error: 1
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 1
Test Case  782 | Error: 0
Test Case  783 | Error: 1
Test Case  784 | Error: 0
Test Case  785 | Error: 1
Test Case  786 | Error: 1
Test Case  787 | Error: 1
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 1
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 1
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 1
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 1
Test Case  801 | Error: 0
Test Case  802 | Error: 1
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 1
Test Case  807 | Error: 1
Test Case  808 | Error: 1
Test Case  809 | Error: 0
Test Case  810 | Error: 1
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 1
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 1
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 1
Test Case  822 | Error: 1
Test Case  823 | Error: 0
Test Case  824 | Error: 1
Test Case  825 | Error: 1
Test Case  826 | Error: 0
Test Case  827 | Error: 1
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 1
Test Case  831 | Error: 0
Test Case  832 | Error: 1
Test Case  833 | Error: 1
Test Case  834 | Error: 0
Test Case  835 | Error: 1
Test Case  836 | Error: 1
Test Case  837 | Error: 0
Test Case  838 | Error: 1
Test Case  839 | Error: 0
Test Case  840 | Error: 1
Test Case  841 | Error: 0
Test Case  842 | Error: 1
Test Case  843 | Error: 1
Test Case  844 | Error: 0
Test Case  845 | Error: 1
Test Case  846 | Error: 1
Test Case  847 | Error: 0
Test Case  848 | Error: 1
Test Case  849 | Error: 1
Test Case  850 | Error: 1
Test Case  851 | Error: 1
Test Case  852 | Error: 1
Test Case  853 | Error: 1
Test Case  854 | Error: 1
Test Case  855 | Error: 1
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 1
Test Case  860 | Error: 0
Test Case  861 | Error: 1
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 1
Test Case  865 | Error: 1
Test Case  866 | Error: 1
Test Case  867 | Error: 1
Test Case  868 | Error: 0
Test Case  869 | Error: 1
Test Case  870 | Error: 1
Test Case  871 | Error: 1
Test Case  872 | Error: 1
Test Case  873 | Error: 1
Test Case  874 | Error: 0
Test Case  875 | Error: 1
Test Case  876 | Error: 1
Test Case  877 | Error: 0
Test Case  878 | Error: 1
Test Case  879 | Error: 1
Test Case  880 | Error: 1
Test Case  881 | Error: 1
Test Case  882 | Error: 1
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 1
Test Case  888 | Error: 1
Test Case  889 | Error: 1
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 1
Test Case  894 | Error: 1
Test Case  895 | Error: 0
Test Case  896 | Error: 1
Test Case  897 | Error: 1
Test Case  898 | Error: 0
Test Case  899 | Error: 1
Test Case  900 | Error: 1
Test Case  901 | Error: 1
Test Case  902 | Error: 1
Test Case  903 | Error: 1
Test Case  904 | Error: 0
Test Case  905 | Error: 1
Test Case  906 | Error: 1
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 1
Test Case  910 | Error: 0
Test Case  911 | Error: 1
Test Case  912 | Error: 1
Test Case  913 | Error: 1
Test Case  914 | Error: 0
Test Case  915 | Error: 1
Test Case  916 | Error: 0
Test Case  917 | Error: 1
Test Case  918 | Error: 0
Test Case  919 | Error: 1
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 1
Test Case  923 | Error: 1
Test Case  924 | Error: 1
Test Case  925 | Error: 1
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 1
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 1
Test Case  934 | Error: 1
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 1
Test Case  938 | Error: 1
Test Case  939 | Error: 1
Test Case  940 | Error: 0
Test Case  941 | Error: 1
Test Case  942 | Error: 1
Test Case  943 | Error: 0
Test Case  944 | Error: 1
Test Case  945 | Error: 0
Test Case  946 | Error: 1
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 1
Test Case  950 | Error: 0
Test Case  951 | Error: 1
Test Case  952 | Error: 1
Test Case  953 | Error: 1
Test Case  954 | Error: 1
Test Case  955 | Error: 1
Test Case  956 | Error: 1
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 1
Test Case  960 | Error: 1
Test Case  961 | Error: 1
Test Case  962 | Error: 0
Test Case  963 | Error: 1
Test Case  964 | Error: 1
Test Case  965 | Error: 1
Test Case  966 | Error: 0
Test Case  967 | Error: 1
Test Case  968 | Error: 1
Test Case  969 | Error: 0
Test Case  970 | Error: 1
Test Case  971 | Error: 1
Test Case  972 | Error: 0
Test Case  973 | Error: 1
Test Case  974 | Error: 1
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 1
Test Case  978 | Error: 0
Test Case  979 | Error: 1
Test Case  980 | Error: 1
Test Case  981 | Error: 1
Test Case  982 | Error: 1
Test Case  983 | Error: 0
Test Case  984 | Error: 1
Test Case  985 | Error: 1
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 1
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 1
Test Case  993 | Error: 1
Test Case  994 | Error: 1
Test Case  995 | Error: 1
Test Case  996 | Error: 1
Test Case  997 | Error: 1
Test Case  998 | Error: 0
Test Case  999 | Error: 1
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -40                 | Program output: -40                
Correct output: 67                  | Program output: 79                 
Correct output: -85                 | Program output: -85                
Correct output: 69                  | Program output: 69                 
Correct output: 30                  | Program output: 37                 
Correct output: 22                  | Program output: 22                 
Correct output: -51                 | Program output: -51                
Correct output: 25                  | Program output: 25                 
Correct output: -76                 | Program output: -76                
Correct output: 53                  | Program output: 57                 
Correct output: -60                 | Program output: -60                
Correct output: 86                  | Program output: 86                 
Correct output: 86                  | Program output: 86                 
Correct output: 35                  | Program output: 35                 
Correct output: 11                  | Program output: 11                 
Correct output: 13                  | Program output: 13                 
Correct output: 45                  | Program output: 45                 
Correct output: 25                  | Program output: 98                 
Correct output: 23                  | Program output: 64                 
Correct output: 6                   | Program output: 17                 
Correct output: 5                   | Program output: 5                  
Correct output: 1                   | Program output: 1                  
Correct output: 34                  | Program output: 99                 
Correct output: 34                  | Program output: 34                 
Correct output: 31                  | Program output: 32                 
Correct output: 34                  | Program output: 34                 
Correct output: 12                  | Program output: 12                 
Correct output: 3                   | Program output: 61                 
Correct output: 1                   | Program output: 1                  
Correct output: 21                  | Program output: 21                 
Correct output: 5                   | Program output: 12                 
Correct output: 3                   | Program output: 95                 
Correct output: 1                   | Program output: 1                  
Correct output: 63                  | Program output: 83                 
Correct output: 25                  | Program output: 25                 
Correct output: -97                 | Program output: -97                
Correct output: -91                 | Program output: -91                
Correct output: -97                 | Program output: -39                
Correct output: -85                 | Program output: -9                 
Correct output: -81                 | Program output: -72                
Correct output: 43                  | Program output: 65                 
Correct output: -74                 | Program output: -74                
Correct output: -75                 | Program output: 9                  
Correct output: -44                 | Program output: -44                
Correct output: -53                 | Program output: 3                  
Correct output: -64                 | Program output: -64                
Correct output: -87                 | Program output: -86                
Correct output: -5                  | Program output: -5                 
Correct output: -57                 | Program output: -51                
Correct output: -68                 | Program output: -25                
Correct output: -49                 | Program output: -2                 
Correct output: -61                 | Program output: -61                
Correct output: -86                 | Program output: -27                
Correct output: -30                 | Program output: 28                 
Correct output: -70                 | Program output: -70                
Correct output: -83                 | Program output: -83                
Correct output: -70                 | Program output: -44                
Correct output: -59                 | Program output: -59                
Correct output: -92                 | Program output: -92                
Correct output: -67                 | Program output: -66                
Correct output: 23                  | Program output: 23                 
Correct output: -86                 | Program output: -72                
Correct output: -98                 | Program output: -98                
Correct output: -61                 | Program output: -61                
Correct output: -86                 | Program output: -86                
Correct output: -87                 | Program output: -87                
Correct output: -92                 | Program output: -92                
Correct output: -29                 | Program output: 4                  
Correct output: -74                 | Program output: 0                  
Correct output: -82                 | Program output: 61                 
Correct output: -83                 | Program output: -83                
Correct output: -5                  | Program output: 80                 
Correct output: -57                 | Program output: -12                
Correct output: -100                | Program output: -100               
Correct output: -33                 | Program output: 11                 
Correct output: -69                 | Program output: -21                
Correct output: -78                 | Program output: -78                
Correct output: -20                 | Program output: -20                
Correct output: -69                 | Program output: -69                
Correct output: -99                 | Program output: 40                 
Correct output: -96                 | Program output: -96                
Correct output: -24                 | Program output: -24                
Correct output: -85                 | Program output: -85                
Correct output: -87                 | Program output: -87                
Correct output: -56                 | Program output: -56                
Correct output: -100                | Program output: -100               
Correct output: -25                 | Program output: -19                
Correct output: -33                 | Program output: -33                
Correct output: -86                 | Program output: 9                  
Correct output: -94                 | Program output: 22                 
Correct output: -85                 | Program output: 85                 
Correct output: -46                 | Program output: -46                
Correct output: -98                 | Program output: -98                
Correct output: -80                 | Program output: 41                 
Correct output: -58                 | Program output: 30                 
;;******************************
