Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x30b9728f clojush.problems.software.smallest$fn__7460@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@24b8a393]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-74 -74 -74 36] -74] [[-23 -23 -23 14] -23] [[-21 -21 -11 -21] -21] [[75 -24 -24 -24] -24] [[-58 -58 -58 39] -58] [[-50 -50 43 -50] -50] [[33 33 14 33] 14] [[-9 -9 -9 0] -9] [[98 98 98 18] 18] [[47 -5 47 47] -5] [(100 100 100 100) 100] [(-19 -19 -19 -19) -19] [(-31 -31 -31 -31) -31] [(10 10 10 10) 10] [(47 47 47 47) 47] [(17 34 87 75) 17] [(8 1 29 73) 1] [(0 20 67 97) 0] [(35 57 40 14) 14] [(58 28 60 7) 7] [(87 46 1 8) 1] [(69 36 44 58) 36] [(69 59 30 14) 14] [(22 13 57 29) 13] [(38 1 76 52) 1] [(20 61 56 70) 20] [(92 41 66 28) 28] [(88 22 22 61) 22] [(77 45 19 75) 19] [(87 73 33 94) 33] [(95 14 44 72) 14] [(93 23 27 38) 23] [(60 20 0 85) 0] [(86 85 16 52) 16] [(74 74 30 4) 4] [(-87 78 15 63) -87] [(6 -21 10 41) -21] [(-31 -94 -48 92) -94] [(-12 -99 72 75) -99] [(-39 -65 -60 -25) -65] [(-35 52 -65 -8) -65] [(37 -52 -81 46) -81] [(50 36 -16 -99) -99] [(93 -86 -81 -39) -86] [(29 -30 25 12) -30] [(23 53 15 56) 15] [(-46 57 -7 -16) -46] [(23 36 42 8) 8] [(55 52 16 33) 16] [(80 73 22 -48) -48] [(88 -1 -79 80) -79] [(58 -91 52 78) -91] [(-82 -46 -80 -31) -82] [(-55 -9 37 -52) -55] [(-51 35 -9 54) -51] [(-40 -9 -24 53) -40] [(-26 82 14 9) -26] [(-65 -41 -21 50) -65] [(-71 -51 31 38) -71] [(12 -40 54 39) -40] [(-84 -43 69 27) -84] [(100 21 22 -87) -87] [(-33 -56 -22 -29) -56] [(29 -9 -43 18) -43] [(-15 75 -61 62) -61] [(-25 75 84 -6) -25] [(-43 -67 92 69) -67] [(46 86 69 90) 46] [(52 85 -53 49) -53] [(-55 -33 72 1) -55] [(93 41 15 63) 15] [(-78 -30 69 0) -78] [(-78 -36 -99 -83) -99] [(24 7 64 11) 7] [(-13 -43 -52 -18) -52] [(7 37 -21 90) -21] [(-39 35 28 -48) -48] [(92 -89 47 -50) -89] [(83 28 48 42) 28] [(26 65 51 93) 26] [(96 -42 -88 34) -88] [(21 -54 -99 18) -99] [(16 58 -83 -71) -83] [(61 26 48 -89) -89] [(-66 10 11 -88) -88] [(19 59 -57 28) -57] [(-74 -65 -50 -55) -74] [(20 -64 14 -1) -64] [(81 69 7 -93) -93] [(67 22 -9 -73) -73] [(2 73 -88 -61) -88] [(31 29 16 -39) -39] [(-45 -48 86 -36) -48] [(-79 -74 25 -69) -79] [(13 57 87 95) 13])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[-74 -74 -74 36] -74]
Train Case:   6 | Input/Output: [[-23 -23 -23 14] -23]
Train Case:   7 | Input/Output: [[-21 -21 -11 -21] -21]
Train Case:   8 | Input/Output: [[75 -24 -24 -24] -24]
Train Case:   9 | Input/Output: [[-58 -58 -58 39] -58]
Train Case:  10 | Input/Output: [[-50 -50 43 -50] -50]
Train Case:  11 | Input/Output: [[33 33 14 33] 14]
Train Case:  12 | Input/Output: [[-9 -9 -9 0] -9]
Train Case:  13 | Input/Output: [[98 98 98 18] 18]
Train Case:  14 | Input/Output: [[47 -5 47 47] -5]
Train Case:  15 | Input/Output: [(100 100 100 100) 100]
Train Case:  16 | Input/Output: [(-19 -19 -19 -19) -19]
Train Case:  17 | Input/Output: [(-31 -31 -31 -31) -31]
Train Case:  18 | Input/Output: [(10 10 10 10) 10]
Train Case:  19 | Input/Output: [(47 47 47 47) 47]
Train Case:  20 | Input/Output: [(17 34 87 75) 17]
Train Case:  21 | Input/Output: [(8 1 29 73) 1]
Train Case:  22 | Input/Output: [(0 20 67 97) 0]
Train Case:  23 | Input/Output: [(35 57 40 14) 14]
Train Case:  24 | Input/Output: [(58 28 60 7) 7]
Train Case:  25 | Input/Output: [(87 46 1 8) 1]
Train Case:  26 | Input/Output: [(69 36 44 58) 36]
Train Case:  27 | Input/Output: [(69 59 30 14) 14]
Train Case:  28 | Input/Output: [(22 13 57 29) 13]
Train Case:  29 | Input/Output: [(38 1 76 52) 1]
Train Case:  30 | Input/Output: [(20 61 56 70) 20]
Train Case:  31 | Input/Output: [(92 41 66 28) 28]
Train Case:  32 | Input/Output: [(88 22 22 61) 22]
Train Case:  33 | Input/Output: [(77 45 19 75) 19]
Train Case:  34 | Input/Output: [(87 73 33 94) 33]
Train Case:  35 | Input/Output: [(95 14 44 72) 14]
Train Case:  36 | Input/Output: [(93 23 27 38) 23]
Train Case:  37 | Input/Output: [(60 20 0 85) 0]
Train Case:  38 | Input/Output: [(86 85 16 52) 16]
Train Case:  39 | Input/Output: [(74 74 30 4) 4]
Train Case:  40 | Input/Output: [(-87 78 15 63) -87]
Train Case:  41 | Input/Output: [(6 -21 10 41) -21]
Train Case:  42 | Input/Output: [(-31 -94 -48 92) -94]
Train Case:  43 | Input/Output: [(-12 -99 72 75) -99]
Train Case:  44 | Input/Output: [(-39 -65 -60 -25) -65]
Train Case:  45 | Input/Output: [(-35 52 -65 -8) -65]
Train Case:  46 | Input/Output: [(37 -52 -81 46) -81]
Train Case:  47 | Input/Output: [(50 36 -16 -99) -99]
Train Case:  48 | Input/Output: [(93 -86 -81 -39) -86]
Train Case:  49 | Input/Output: [(29 -30 25 12) -30]
Train Case:  50 | Input/Output: [(23 53 15 56) 15]
Train Case:  51 | Input/Output: [(-46 57 -7 -16) -46]
Train Case:  52 | Input/Output: [(23 36 42 8) 8]
Train Case:  53 | Input/Output: [(55 52 16 33) 16]
Train Case:  54 | Input/Output: [(80 73 22 -48) -48]
Train Case:  55 | Input/Output: [(88 -1 -79 80) -79]
Train Case:  56 | Input/Output: [(58 -91 52 78) -91]
Train Case:  57 | Input/Output: [(-82 -46 -80 -31) -82]
Train Case:  58 | Input/Output: [(-55 -9 37 -52) -55]
Train Case:  59 | Input/Output: [(-51 35 -9 54) -51]
Train Case:  60 | Input/Output: [(-40 -9 -24 53) -40]
Train Case:  61 | Input/Output: [(-26 82 14 9) -26]
Train Case:  62 | Input/Output: [(-65 -41 -21 50) -65]
Train Case:  63 | Input/Output: [(-71 -51 31 38) -71]
Train Case:  64 | Input/Output: [(12 -40 54 39) -40]
Train Case:  65 | Input/Output: [(-84 -43 69 27) -84]
Train Case:  66 | Input/Output: [(100 21 22 -87) -87]
Train Case:  67 | Input/Output: [(-33 -56 -22 -29) -56]
Train Case:  68 | Input/Output: [(29 -9 -43 18) -43]
Train Case:  69 | Input/Output: [(-15 75 -61 62) -61]
Train Case:  70 | Input/Output: [(-25 75 84 -6) -25]
Train Case:  71 | Input/Output: [(-43 -67 92 69) -67]
Train Case:  72 | Input/Output: [(46 86 69 90) 46]
Train Case:  73 | Input/Output: [(52 85 -53 49) -53]
Train Case:  74 | Input/Output: [(-55 -33 72 1) -55]
Train Case:  75 | Input/Output: [(93 41 15 63) 15]
Train Case:  76 | Input/Output: [(-78 -30 69 0) -78]
Train Case:  77 | Input/Output: [(-78 -36 -99 -83) -99]
Train Case:  78 | Input/Output: [(24 7 64 11) 7]
Train Case:  79 | Input/Output: [(-13 -43 -52 -18) -52]
Train Case:  80 | Input/Output: [(7 37 -21 90) -21]
Train Case:  81 | Input/Output: [(-39 35 28 -48) -48]
Train Case:  82 | Input/Output: [(92 -89 47 -50) -89]
Train Case:  83 | Input/Output: [(83 28 48 42) 28]
Train Case:  84 | Input/Output: [(26 65 51 93) 26]
Train Case:  85 | Input/Output: [(96 -42 -88 34) -88]
Train Case:  86 | Input/Output: [(21 -54 -99 18) -99]
Train Case:  87 | Input/Output: [(16 58 -83 -71) -83]
Train Case:  88 | Input/Output: [(61 26 48 -89) -89]
Train Case:  89 | Input/Output: [(-66 10 11 -88) -88]
Train Case:  90 | Input/Output: [(19 59 -57 28) -57]
Train Case:  91 | Input/Output: [(-74 -65 -50 -55) -74]
Train Case:  92 | Input/Output: [(20 -64 14 -1) -64]
Train Case:  93 | Input/Output: [(81 69 7 -93) -93]
Train Case:  94 | Input/Output: [(67 22 -9 -73) -73]
Train Case:  95 | Input/Output: [(2 73 -88 -61) -88]
Train Case:  96 | Input/Output: [(31 29 16 -39) -39]
Train Case:  97 | Input/Output: [(-45 -48 86 -36) -48]
Train Case:  98 | Input/Output: [(-79 -74 25 -69) -79]
Train Case:  99 | Input/Output: [(13 57 87 95) 13]
Test Case:   0 | Input/Output: [[57 -60 57 57] -60]
Test Case:   1 | Input/Output: [[-97 -97 -6 -97] -97]
Test Case:   2 | Input/Output: [[-3 -3 36 -3] -3]
Test Case:   3 | Input/Output: [[-55 -55 -55 -58] -58]
Test Case:   4 | Input/Output: [[-35 85 85 85] -35]
Test Case:   5 | Input/Output: [[-62 -62 -62 -23] -62]
Test Case:   6 | Input/Output: [[27 27 27 15] 15]
Test Case:   7 | Input/Output: [[-20 -20 -20 -95] -95]
Test Case:   8 | Input/Output: [[42 42 42 24] 24]
Test Case:   9 | Input/Output: [[-64 71 71 71] -64]
Test Case:  10 | Input/Output: [[26 -52 -52 -52] -52]
Test Case:  11 | Input/Output: [[-36 -68 -68 -68] -68]
Test Case:  12 | Input/Output: [[-63 -63 -55 -63] -63]
Test Case:  13 | Input/Output: [[-51 -51 43 -51] -51]
Test Case:  14 | Input/Output: [[-48 -98 -48 -48] -98]
Test Case:  15 | Input/Output: [[-57 -24 -24 -24] -57]
Test Case:  16 | Input/Output: [[-12 -97 -97 -97] -97]
Test Case:  17 | Input/Output: [[-95 -95 53 -95] -95]
Test Case:  18 | Input/Output: [[-68 -31 -68 -68] -68]
Test Case:  19 | Input/Output: [[-11 -47 -11 -11] -47]
Test Case:  20 | Input/Output: [[44 -82 44 44] -82]
Test Case:  21 | Input/Output: [[-38 -38 -38 -16] -38]
Test Case:  22 | Input/Output: [[-12 -12 -12 -11] -12]
Test Case:  23 | Input/Output: [[-61 -93 -61 -61] -93]
Test Case:  24 | Input/Output: [[72 72 72 44] 44]
Test Case:  25 | Input/Output: [[-7 -7 -25 -7] -25]
Test Case:  26 | Input/Output: [[100 64 100 100] 64]
Test Case:  27 | Input/Output: [[-38 -44 -38 -38] -44]
Test Case:  28 | Input/Output: [[30 30 30 -24] -24]
Test Case:  29 | Input/Output: [[-96 -96 -96 78] -96]
Test Case:  30 | Input/Output: [[-13 38 -13 -13] -13]
Test Case:  31 | Input/Output: [[-23 97 97 97] -23]
Test Case:  32 | Input/Output: [[71 71 75 71] 71]
Test Case:  33 | Input/Output: [[41 -38 -38 -38] -38]
Test Case:  34 | Input/Output: [[62 22 22 22] 22]
Test Case:  35 | Input/Output: [[18 5 18 18] 5]
Test Case:  36 | Input/Output: [[-69 -69 -69 37] -69]
Test Case:  37 | Input/Output: [[94 84 94 94] 84]
Test Case:  38 | Input/Output: [[-22 42 42 42] -22]
Test Case:  39 | Input/Output: [[-80 -80 -75 -80] -80]
Test Case:  40 | Input/Output: [[12 12 12 -23] -23]
Test Case:  41 | Input/Output: [[46 -32 46 46] -32]
Test Case:  42 | Input/Output: [[70 70 -96 70] -96]
Test Case:  43 | Input/Output: [[78 -9 -9 -9] -9]
Test Case:  44 | Input/Output: [[0 64 64 64] 0]
Test Case:  45 | Input/Output: [[-52 -52 -30 -52] -52]
Test Case:  46 | Input/Output: [[-31 -28 -31 -31] -31]
Test Case:  47 | Input/Output: [[-9 -9 -37 -9] -37]
Test Case:  48 | Input/Output: [[48 48 48 79] 48]
Test Case:  49 | Input/Output: [[9 9 15 9] 9]
Test Case:  50 | Input/Output: [[-61 -61 -61 -100] -100]
Test Case:  51 | Input/Output: [[98 98 -19 98] -19]
Test Case:  52 | Input/Output: [[29 29 29 -3] -3]
Test Case:  53 | Input/Output: [[87 87 61 87] 61]
Test Case:  54 | Input/Output: [[-40 -40 -40 95] -40]
Test Case:  55 | Input/Output: [[-83 66 -83 -83] -83]
Test Case:  56 | Input/Output: [[-92 -92 -92 9] -92]
Test Case:  57 | Input/Output: [[26 56 26 26] 26]
Test Case:  58 | Input/Output: [[-66 -66 22 -66] -66]
Test Case:  59 | Input/Output: [[-49 -24 -24 -24] -49]
Test Case:  60 | Input/Output: [[-69 73 73 73] -69]
Test Case:  61 | Input/Output: [[83 83 -100 83] -100]
Test Case:  62 | Input/Output: [[62 -2 -2 -2] -2]
Test Case:  63 | Input/Output: [[39 48 48 48] 39]
Test Case:  64 | Input/Output: [[43 43 -79 43] -79]
Test Case:  65 | Input/Output: [[-67 -87 -87 -87] -87]
Test Case:  66 | Input/Output: [[-27 -78 -78 -78] -78]
Test Case:  67 | Input/Output: [[-76 -11 -11 -11] -76]
Test Case:  68 | Input/Output: [[5 -7 -7 -7] -7]
Test Case:  69 | Input/Output: [[38 -25 38 38] -25]
Test Case:  70 | Input/Output: [[-6 -6 -76 -6] -76]
Test Case:  71 | Input/Output: [[-18 14 -18 -18] -18]
Test Case:  72 | Input/Output: [[-61 -19 -61 -61] -61]
Test Case:  73 | Input/Output: [[66 66 66 58] 58]
Test Case:  74 | Input/Output: [[70 2 70 70] 2]
Test Case:  75 | Input/Output: [[-9 57 57 57] -9]
Test Case:  76 | Input/Output: [[81 -71 81 81] -71]
Test Case:  77 | Input/Output: [[-27 -27 50 -27] -27]
Test Case:  78 | Input/Output: [[-73 -68 -73 -73] -73]
Test Case:  79 | Input/Output: [[-8 -8 -80 -8] -80]
Test Case:  80 | Input/Output: [[80 80 80 -34] -34]
Test Case:  81 | Input/Output: [[-33 -54 -54 -54] -54]
Test Case:  82 | Input/Output: [[100 100 -46 100] -46]
Test Case:  83 | Input/Output: [[-78 -78 -14 -78] -78]
Test Case:  84 | Input/Output: [[-27 -70 -27 -27] -70]
Test Case:  85 | Input/Output: [[-96 -96 -96 -35] -96]
Test Case:  86 | Input/Output: [[-92 -92 -38 -92] -92]
Test Case:  87 | Input/Output: [[-6 -30 -30 -30] -30]
Test Case:  88 | Input/Output: [[45 45 -44 45] -44]
Test Case:  89 | Input/Output: [[-68 9 -68 -68] -68]
Test Case:  90 | Input/Output: [[17 17 79 17] 17]
Test Case:  91 | Input/Output: [[100 28 28 28] 28]
Test Case:  92 | Input/Output: [[67 -25 67 67] -25]
Test Case:  93 | Input/Output: [[94 -31 94 94] -31]
Test Case:  94 | Input/Output: [[5 94 5 5] 5]
Test Case:  95 | Input/Output: [[76 -6 76 76] -6]
Test Case:  96 | Input/Output: [[82 -52 82 82] -52]
Test Case:  97 | Input/Output: [[91 21 21 21] 21]
Test Case:  98 | Input/Output: [[-62 55 55 55] -62]
Test Case:  99 | Input/Output: [[78 78 78 44] 44]
Test Case: 100 | Input/Output: [(-31 -31 -31 -31) -31]
Test Case: 101 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 102 | Input/Output: [(-86 -86 -86 -86) -86]
Test Case: 103 | Input/Output: [(65 65 65 65) 65]
Test Case: 104 | Input/Output: [(20 20 20 20) 20]
Test Case: 105 | Input/Output: [(-96 -96 -96 -96) -96]
Test Case: 106 | Input/Output: [(-81 -81 -81 -81) -81]
Test Case: 107 | Input/Output: [(44 44 44 44) 44]
Test Case: 108 | Input/Output: [(13 13 13 13) 13]
Test Case: 109 | Input/Output: [(-61 -61 -61 -61) -61]
Test Case: 110 | Input/Output: [(-21 -21 -21 -21) -21]
Test Case: 111 | Input/Output: [(-41 -41 -41 -41) -41]
Test Case: 112 | Input/Output: [(-73 -73 -73 -73) -73]
Test Case: 113 | Input/Output: [(7 7 7 7) 7]
Test Case: 114 | Input/Output: [(-90 -90 -90 -90) -90]
Test Case: 115 | Input/Output: [(72 72 72 72) 72]
Test Case: 116 | Input/Output: [(-9 -9 -9 -9) -9]
Test Case: 117 | Input/Output: [(-78 -78 -78 -78) -78]
Test Case: 118 | Input/Output: [(37 37 37 37) 37]
Test Case: 119 | Input/Output: [(59 59 59 59) 59]
Test Case: 120 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 121 | Input/Output: [(-33 -33 -33 -33) -33]
Test Case: 122 | Input/Output: [(85 85 85 85) 85]
Test Case: 123 | Input/Output: [(-16 -16 -16 -16) -16]
Test Case: 124 | Input/Output: [(95 95 95 95) 95]
Test Case: 125 | Input/Output: [(-7 -7 -7 -7) -7]
Test Case: 126 | Input/Output: [(29 29 29 29) 29]
Test Case: 127 | Input/Output: [(20 20 20 20) 20]
Test Case: 128 | Input/Output: [(-21 -21 -21 -21) -21]
Test Case: 129 | Input/Output: [(85 85 85 85) 85]
Test Case: 130 | Input/Output: [(-30 -30 -30 -30) -30]
Test Case: 131 | Input/Output: [(-93 -93 -93 -93) -93]
Test Case: 132 | Input/Output: [(47 47 47 47) 47]
Test Case: 133 | Input/Output: [(41 41 41 41) 41]
Test Case: 134 | Input/Output: [(-79 -79 -79 -79) -79]
Test Case: 135 | Input/Output: [(75 75 75 75) 75]
Test Case: 136 | Input/Output: [(-60 -60 -60 -60) -60]
Test Case: 137 | Input/Output: [(99 99 99 99) 99]
Test Case: 138 | Input/Output: [(-17 -17 -17 -17) -17]
Test Case: 139 | Input/Output: [(-43 -43 -43 -43) -43]
Test Case: 140 | Input/Output: [(64 64 64 64) 64]
Test Case: 141 | Input/Output: [(81 81 81 81) 81]
Test Case: 142 | Input/Output: [(-70 -70 -70 -70) -70]
Test Case: 143 | Input/Output: [(11 11 11 11) 11]
Test Case: 144 | Input/Output: [(-68 -68 -68 -68) -68]
Test Case: 145 | Input/Output: [(-93 -93 -93 -93) -93]
Test Case: 146 | Input/Output: [(-80 -80 -80 -80) -80]
Test Case: 147 | Input/Output: [(-19 -19 -19 -19) -19]
Test Case: 148 | Input/Output: [(-8 -8 -8 -8) -8]
Test Case: 149 | Input/Output: [(48 48 48 48) 48]
Test Case: 150 | Input/Output: [(24 24 24 24) 24]
Test Case: 151 | Input/Output: [(32 32 32 32) 32]
Test Case: 152 | Input/Output: [(93 93 93 93) 93]
Test Case: 153 | Input/Output: [(-55 -55 -55 -55) -55]
Test Case: 154 | Input/Output: [(-1 -1 -1 -1) -1]
Test Case: 155 | Input/Output: [(26 26 26 26) 26]
Test Case: 156 | Input/Output: [(-65 -65 -65 -65) -65]
Test Case: 157 | Input/Output: [(-57 -57 -57 -57) -57]
Test Case: 158 | Input/Output: [(24 24 24 24) 24]
Test Case: 159 | Input/Output: [(37 37 37 37) 37]
Test Case: 160 | Input/Output: [(91 91 91 91) 91]
Test Case: 161 | Input/Output: [(97 97 97 97) 97]
Test Case: 162 | Input/Output: [(66 66 66 66) 66]
Test Case: 163 | Input/Output: [(93 93 93 93) 93]
Test Case: 164 | Input/Output: [(98 98 98 98) 98]
Test Case: 165 | Input/Output: [(79 79 79 79) 79]
Test Case: 166 | Input/Output: [(-63 -63 -63 -63) -63]
Test Case: 167 | Input/Output: [(88 88 88 88) 88]
Test Case: 168 | Input/Output: [(-44 -44 -44 -44) -44]
Test Case: 169 | Input/Output: [(14 14 14 14) 14]
Test Case: 170 | Input/Output: [(27 27 27 27) 27]
Test Case: 171 | Input/Output: [(72 72 72 72) 72]
Test Case: 172 | Input/Output: [(-60 -60 -60 -60) -60]
Test Case: 173 | Input/Output: [(30 30 30 30) 30]
Test Case: 174 | Input/Output: [(-89 -89 -89 -89) -89]
Test Case: 175 | Input/Output: [(-34 -34 -34 -34) -34]
Test Case: 176 | Input/Output: [(23 23 23 23) 23]
Test Case: 177 | Input/Output: [(39 39 39 39) 39]
Test Case: 178 | Input/Output: [(-6 -6 -6 -6) -6]
Test Case: 179 | Input/Output: [(13 13 13 13) 13]
Test Case: 180 | Input/Output: [(21 21 21 21) 21]
Test Case: 181 | Input/Output: [(91 91 91 91) 91]
Test Case: 182 | Input/Output: [(72 72 72 72) 72]
Test Case: 183 | Input/Output: [(-88 -88 -88 -88) -88]
Test Case: 184 | Input/Output: [(-30 -30 -30 -30) -30]
Test Case: 185 | Input/Output: [(16 16 16 16) 16]
Test Case: 186 | Input/Output: [(-47 -47 -47 -47) -47]
Test Case: 187 | Input/Output: [(-12 -12 -12 -12) -12]
Test Case: 188 | Input/Output: [(48 48 48 48) 48]
Test Case: 189 | Input/Output: [(-11 -11 -11 -11) -11]
Test Case: 190 | Input/Output: [(-4 -4 -4 -4) -4]
Test Case: 191 | Input/Output: [(1 1 1 1) 1]
Test Case: 192 | Input/Output: [(55 55 55 55) 55]
Test Case: 193 | Input/Output: [(-28 -28 -28 -28) -28]
Test Case: 194 | Input/Output: [(76 76 76 76) 76]
Test Case: 195 | Input/Output: [(43 43 43 43) 43]
Test Case: 196 | Input/Output: [(-97 -97 -97 -97) -97]
Test Case: 197 | Input/Output: [(45 45 45 45) 45]
Test Case: 198 | Input/Output: [(24 24 24 24) 24]
Test Case: 199 | Input/Output: [(25 25 25 25) 25]
Test Case: 200 | Input/Output: [(66 4 55 72) 4]
Test Case: 201 | Input/Output: [(31 54 32 57) 31]
Test Case: 202 | Input/Output: [(55 68 15 46) 15]
Test Case: 203 | Input/Output: [(44 73 47 80) 44]
Test Case: 204 | Input/Output: [(37 80 94 67) 37]
Test Case: 205 | Input/Output: [(44 74 8 80) 8]
Test Case: 206 | Input/Output: [(99 62 73 43) 43]
Test Case: 207 | Input/Output: [(1 54 79 54) 1]
Test Case: 208 | Input/Output: [(11 13 41 65) 11]
Test Case: 209 | Input/Output: [(66 37 13 30) 13]
Test Case: 210 | Input/Output: [(86 40 35 82) 35]
Test Case: 211 | Input/Output: [(17 25 35 3) 3]
Test Case: 212 | Input/Output: [(26 60 83 79) 26]
Test Case: 213 | Input/Output: [(32 0 44 74) 0]
Test Case: 214 | Input/Output: [(82 45 94 3) 3]
Test Case: 215 | Input/Output: [(62 38 64 48) 38]
Test Case: 216 | Input/Output: [(30 88 68 68) 30]
Test Case: 217 | Input/Output: [(69 18 55 9) 9]
Test Case: 218 | Input/Output: [(33 7 69 91) 7]
Test Case: 219 | Input/Output: [(10 72 42 65) 10]
Test Case: 220 | Input/Output: [(0 80 29 13) 0]
Test Case: 221 | Input/Output: [(74 22 16 87) 16]
Test Case: 222 | Input/Output: [(70 87 42 90) 42]
Test Case: 223 | Input/Output: [(78 74 52 31) 31]
Test Case: 224 | Input/Output: [(38 34 48 88) 34]
Test Case: 225 | Input/Output: [(73 3 88 72) 3]
Test Case: 226 | Input/Output: [(57 97 51 27) 27]
Test Case: 227 | Input/Output: [(25 75 30 21) 21]
Test Case: 228 | Input/Output: [(24 91 38 3) 3]
Test Case: 229 | Input/Output: [(36 93 67 42) 36]
Test Case: 230 | Input/Output: [(85 52 98 42) 42]
Test Case: 231 | Input/Output: [(49 59 26 98) 26]
Test Case: 232 | Input/Output: [(41 31 52 4) 4]
Test Case: 233 | Input/Output: [(39 34 27 16) 16]
Test Case: 234 | Input/Output: [(10 0 84 28) 0]
Test Case: 235 | Input/Output: [(9 17 25 82) 9]
Test Case: 236 | Input/Output: [(2 44 49 100) 2]
Test Case: 237 | Input/Output: [(36 99 91 100) 36]
Test Case: 238 | Input/Output: [(60 13 4 89) 4]
Test Case: 239 | Input/Output: [(90 21 51 64) 21]
Test Case: 240 | Input/Output: [(72 35 91 30) 30]
Test Case: 241 | Input/Output: [(33 12 54 54) 12]
Test Case: 242 | Input/Output: [(4 35 89 99) 4]
Test Case: 243 | Input/Output: [(94 57 4 61) 4]
Test Case: 244 | Input/Output: [(55 83 76 9) 9]
Test Case: 245 | Input/Output: [(45 91 5 43) 5]
Test Case: 246 | Input/Output: [(71 21 61 4) 4]
Test Case: 247 | Input/Output: [(45 93 38 18) 18]
Test Case: 248 | Input/Output: [(59 77 33 96) 33]
Test Case: 249 | Input/Output: [(21 0 32 51) 0]
Test Case: 250 | Input/Output: [(83 95 99 58) 58]
Test Case: 251 | Input/Output: [(12 44 94 2) 2]
Test Case: 252 | Input/Output: [(80 92 38 5) 5]
Test Case: 253 | Input/Output: [(46 49 27 9) 9]
Test Case: 254 | Input/Output: [(74 24 36 16) 16]
Test Case: 255 | Input/Output: [(46 72 99 67) 46]
Test Case: 256 | Input/Output: [(0 52 45 59) 0]
Test Case: 257 | Input/Output: [(86 20 85 25) 20]
Test Case: 258 | Input/Output: [(31 65 29 34) 29]
Test Case: 259 | Input/Output: [(44 80 34 75) 34]
Test Case: 260 | Input/Output: [(38 29 78 47) 29]
Test Case: 261 | Input/Output: [(71 0 24 67) 0]
Test Case: 262 | Input/Output: [(82 65 32 11) 11]
Test Case: 263 | Input/Output: [(28 54 85 89) 28]
Test Case: 264 | Input/Output: [(59 12 15 77) 12]
Test Case: 265 | Input/Output: [(100 79 37 95) 37]
Test Case: 266 | Input/Output: [(73 63 48 17) 17]
Test Case: 267 | Input/Output: [(30 89 91 78) 30]
Test Case: 268 | Input/Output: [(27 8 42 50) 8]
Test Case: 269 | Input/Output: [(99 60 6 20) 6]
Test Case: 270 | Input/Output: [(33 22 59 63) 22]
Test Case: 271 | Input/Output: [(7 65 12 54) 7]
Test Case: 272 | Input/Output: [(22 76 67 22) 22]
Test Case: 273 | Input/Output: [(63 34 7 72) 7]
Test Case: 274 | Input/Output: [(48 73 46 38) 38]
Test Case: 275 | Input/Output: [(33 18 73 72) 18]
Test Case: 276 | Input/Output: [(62 1 10 56) 1]
Test Case: 277 | Input/Output: [(100 4 35 100) 4]
Test Case: 278 | Input/Output: [(17 49 29 4) 4]
Test Case: 279 | Input/Output: [(44 73 63 7) 7]
Test Case: 280 | Input/Output: [(74 1 13 0) 0]
Test Case: 281 | Input/Output: [(65 85 29 45) 29]
Test Case: 282 | Input/Output: [(73 79 95 72) 72]
Test Case: 283 | Input/Output: [(3 1 52 1) 1]
Test Case: 284 | Input/Output: [(22 13 96 87) 13]
Test Case: 285 | Input/Output: [(34 43 52 68) 34]
Test Case: 286 | Input/Output: [(13 0 44 10) 0]
Test Case: 287 | Input/Output: [(9 95 83 26) 9]
Test Case: 288 | Input/Output: [(49 44 39 14) 14]
Test Case: 289 | Input/Output: [(17 94 79 37) 17]
Test Case: 290 | Input/Output: [(2 80 8 59) 2]
Test Case: 291 | Input/Output: [(82 26 49 9) 9]
Test Case: 292 | Input/Output: [(58 49 19 3) 3]
Test Case: 293 | Input/Output: [(62 58 28 86) 28]
Test Case: 294 | Input/Output: [(74 21 91 0) 0]
Test Case: 295 | Input/Output: [(88 0 84 100) 0]
Test Case: 296 | Input/Output: [(64 58 28 62) 28]
Test Case: 297 | Input/Output: [(1 20 81 44) 1]
Test Case: 298 | Input/Output: [(79 92 66 29) 29]
Test Case: 299 | Input/Output: [(81 42 75 18) 18]
Test Case: 300 | Input/Output: [(24 11 3 5) 3]
Test Case: 301 | Input/Output: [(100 48 3 9) 3]
Test Case: 302 | Input/Output: [(73 33 33 84) 33]
Test Case: 303 | Input/Output: [(38 72 78 80) 38]
Test Case: 304 | Input/Output: [(76 12 82 75) 12]
Test Case: 305 | Input/Output: [(59 2 91 63) 2]
Test Case: 306 | Input/Output: [(80 18 12 57) 12]
Test Case: 307 | Input/Output: [(58 51 75 48) 48]
Test Case: 308 | Input/Output: [(68 99 31 97) 31]
Test Case: 309 | Input/Output: [(85 59 92 69) 59]
Test Case: 310 | Input/Output: [(0 0 61 12) 0]
Test Case: 311 | Input/Output: [(8 18 70 26) 8]
Test Case: 312 | Input/Output: [(62 65 77 13) 13]
Test Case: 313 | Input/Output: [(74 20 31 73) 20]
Test Case: 314 | Input/Output: [(92 49 24 60) 24]
Test Case: 315 | Input/Output: [(43 67 43 15) 15]
Test Case: 316 | Input/Output: [(60 39 29 28) 28]
Test Case: 317 | Input/Output: [(53 28 57 62) 28]
Test Case: 318 | Input/Output: [(64 97 28 99) 28]
Test Case: 319 | Input/Output: [(18 100 56 23) 18]
Test Case: 320 | Input/Output: [(44 15 57 93) 15]
Test Case: 321 | Input/Output: [(96 58 60 91) 58]
Test Case: 322 | Input/Output: [(23 90 36 35) 23]
Test Case: 323 | Input/Output: [(17 53 29 10) 10]
Test Case: 324 | Input/Output: [(33 75 45 32) 32]
Test Case: 325 | Input/Output: [(19 2 76 24) 2]
Test Case: 326 | Input/Output: [(52 71 73 62) 52]
Test Case: 327 | Input/Output: [(4 63 78 19) 4]
Test Case: 328 | Input/Output: [(44 27 95 74) 27]
Test Case: 329 | Input/Output: [(91 38 14 86) 14]
Test Case: 330 | Input/Output: [(83 53 45 38) 38]
Test Case: 331 | Input/Output: [(51 78 2 36) 2]
Test Case: 332 | Input/Output: [(21 90 34 75) 21]
Test Case: 333 | Input/Output: [(37 2 77 26) 2]
Test Case: 334 | Input/Output: [(42 62 69 25) 25]
Test Case: 335 | Input/Output: [(70 60 86 37) 37]
Test Case: 336 | Input/Output: [(93 21 52 36) 21]
Test Case: 337 | Input/Output: [(95 19 52 11) 11]
Test Case: 338 | Input/Output: [(59 38 71 79) 38]
Test Case: 339 | Input/Output: [(43 97 13 11) 11]
Test Case: 340 | Input/Output: [(9 73 51 100) 9]
Test Case: 341 | Input/Output: [(39 21 67 1) 1]
Test Case: 342 | Input/Output: [(64 62 2 68) 2]
Test Case: 343 | Input/Output: [(80 76 74 92) 74]
Test Case: 344 | Input/Output: [(9 90 96 7) 7]
Test Case: 345 | Input/Output: [(13 48 15 37) 13]
Test Case: 346 | Input/Output: [(56 87 59 16) 16]
Test Case: 347 | Input/Output: [(27 8 90 72) 8]
Test Case: 348 | Input/Output: [(76 8 67 20) 8]
Test Case: 349 | Input/Output: [(1 99 14 23) 1]
Test Case: 350 | Input/Output: [(94 80 44 41) 41]
Test Case: 351 | Input/Output: [(100 51 4 70) 4]
Test Case: 352 | Input/Output: [(92 59 11 59) 11]
Test Case: 353 | Input/Output: [(28 56 48 46) 28]
Test Case: 354 | Input/Output: [(14 32 14 92) 14]
Test Case: 355 | Input/Output: [(84 9 89 90) 9]
Test Case: 356 | Input/Output: [(58 9 5 64) 5]
Test Case: 357 | Input/Output: [(75 59 50 23) 23]
Test Case: 358 | Input/Output: [(18 66 91 95) 18]
Test Case: 359 | Input/Output: [(40 73 37 18) 18]
Test Case: 360 | Input/Output: [(50 45 76 85) 45]
Test Case: 361 | Input/Output: [(9 5 59 60) 5]
Test Case: 362 | Input/Output: [(14 15 56 51) 14]
Test Case: 363 | Input/Output: [(98 63 34 78) 34]
Test Case: 364 | Input/Output: [(34 68 35 2) 2]
Test Case: 365 | Input/Output: [(6 31 56 1) 1]
Test Case: 366 | Input/Output: [(25 87 77 17) 17]
Test Case: 367 | Input/Output: [(34 38 41 48) 34]
Test Case: 368 | Input/Output: [(7 37 53 83) 7]
Test Case: 369 | Input/Output: [(61 49 14 61) 14]
Test Case: 370 | Input/Output: [(60 11 38 56) 11]
Test Case: 371 | Input/Output: [(91 24 80 2) 2]
Test Case: 372 | Input/Output: [(3 79 8 65) 3]
Test Case: 373 | Input/Output: [(57 61 38 32) 32]
Test Case: 374 | Input/Output: [(70 40 39 62) 39]
Test Case: 375 | Input/Output: [(77 29 91 42) 29]
Test Case: 376 | Input/Output: [(57 6 51 17) 6]
Test Case: 377 | Input/Output: [(34 81 79 90) 34]
Test Case: 378 | Input/Output: [(28 16 44 76) 16]
Test Case: 379 | Input/Output: [(2 11 95 66) 2]
Test Case: 380 | Input/Output: [(99 76 59 17) 17]
Test Case: 381 | Input/Output: [(20 42 92 44) 20]
Test Case: 382 | Input/Output: [(55 18 6 47) 6]
Test Case: 383 | Input/Output: [(5 89 51 92) 5]
Test Case: 384 | Input/Output: [(21 3 99 87) 3]
Test Case: 385 | Input/Output: [(62 42 15 82) 15]
Test Case: 386 | Input/Output: [(95 19 19 67) 19]
Test Case: 387 | Input/Output: [(51 62 1 48) 1]
Test Case: 388 | Input/Output: [(97 87 25 26) 25]
Test Case: 389 | Input/Output: [(20 3 80 59) 3]
Test Case: 390 | Input/Output: [(75 12 72 96) 12]
Test Case: 391 | Input/Output: [(84 29 25 52) 25]
Test Case: 392 | Input/Output: [(96 4 13 59) 4]
Test Case: 393 | Input/Output: [(63 35 36 42) 35]
Test Case: 394 | Input/Output: [(47 25 24 62) 24]
Test Case: 395 | Input/Output: [(61 7 24 49) 7]
Test Case: 396 | Input/Output: [(33 58 57 42) 33]
Test Case: 397 | Input/Output: [(95 67 65 6) 6]
Test Case: 398 | Input/Output: [(91 14 68 92) 14]
Test Case: 399 | Input/Output: [(19 20 46 60) 19]
Test Case: 400 | Input/Output: [(48 -39 -71 0) -71]
Test Case: 401 | Input/Output: [(-6 -72 -84 8) -84]
Test Case: 402 | Input/Output: [(-19 -26 69 67) -26]
Test Case: 403 | Input/Output: [(9 -48 7 81) -48]
Test Case: 404 | Input/Output: [(-20 -76 52 20) -76]
Test Case: 405 | Input/Output: [(82 -68 20 -31) -68]
Test Case: 406 | Input/Output: [(13 -8 55 -52) -52]
Test Case: 407 | Input/Output: [(21 6 -70 22) -70]
Test Case: 408 | Input/Output: [(57 -93 -50 -88) -93]
Test Case: 409 | Input/Output: [(29 97 61 89) 29]
Test Case: 410 | Input/Output: [(41 29 44 -19) -19]
Test Case: 411 | Input/Output: [(98 12 88 19) 12]
Test Case: 412 | Input/Output: [(11 -6 12 99) -6]
Test Case: 413 | Input/Output: [(14 62 97 -17) -17]
Test Case: 414 | Input/Output: [(53 9 -13 -24) -24]
Test Case: 415 | Input/Output: [(85 -41 -81 66) -81]
Test Case: 416 | Input/Output: [(-86 -61 54 69) -86]
Test Case: 417 | Input/Output: [(11 -94 -47 -33) -94]
Test Case: 418 | Input/Output: [(3 3 -67 -8) -67]
Test Case: 419 | Input/Output: [(-79 93 24 29) -79]
Test Case: 420 | Input/Output: [(48 -66 27 17) -66]
Test Case: 421 | Input/Output: [(-81 -79 72 -54) -81]
Test Case: 422 | Input/Output: [(27 11 -93 -27) -93]
Test Case: 423 | Input/Output: [(-81 18 -80 21) -81]
Test Case: 424 | Input/Output: [(-10 29 1 94) -10]
Test Case: 425 | Input/Output: [(-38 -22 92 79) -38]
Test Case: 426 | Input/Output: [(-9 -61 -11 -62) -62]
Test Case: 427 | Input/Output: [(67 -70 -32 61) -70]
Test Case: 428 | Input/Output: [(17 -42 77 4) -42]
Test Case: 429 | Input/Output: [(-11 34 7 -28) -28]
Test Case: 430 | Input/Output: [(-34 -87 -40 66) -87]
Test Case: 431 | Input/Output: [(55 -83 -84 -14) -84]
Test Case: 432 | Input/Output: [(10 -97 -22 70) -97]
Test Case: 433 | Input/Output: [(82 64 43 7) 7]
Test Case: 434 | Input/Output: [(38 24 -57 73) -57]
Test Case: 435 | Input/Output: [(62 -85 -3 91) -85]
Test Case: 436 | Input/Output: [(-47 0 -38 41) -47]
Test Case: 437 | Input/Output: [(-34 -3 -69 -43) -69]
Test Case: 438 | Input/Output: [(-99 -89 -58 -31) -99]
Test Case: 439 | Input/Output: [(62 63 -3 67) -3]
Test Case: 440 | Input/Output: [(-47 59 85 27) -47]
Test Case: 441 | Input/Output: [(27 -78 12 -94) -94]
Test Case: 442 | Input/Output: [(32 78 -95 -75) -95]
Test Case: 443 | Input/Output: [(38 51 -90 -35) -90]
Test Case: 444 | Input/Output: [(57 11 10 99) 10]
Test Case: 445 | Input/Output: [(73 -1 96 13) -1]
Test Case: 446 | Input/Output: [(2 -60 -63 -92) -92]
Test Case: 447 | Input/Output: [(100 17 -51 62) -51]
Test Case: 448 | Input/Output: [(37 59 -23 94) -23]
Test Case: 449 | Input/Output: [(-88 74 -42 100) -88]
Test Case: 450 | Input/Output: [(14 70 -15 82) -15]
Test Case: 451 | Input/Output: [(-13 9 16 2) -13]
Test Case: 452 | Input/Output: [(-15 74 10 -61) -61]
Test Case: 453 | Input/Output: [(-57 99 83 -97) -97]
Test Case: 454 | Input/Output: [(98 -97 40 -86) -97]
Test Case: 455 | Input/Output: [(-71 -31 94 -55) -71]
Test Case: 456 | Input/Output: [(22 -73 1 44) -73]
Test Case: 457 | Input/Output: [(48 -67 -22 -65) -67]
Test Case: 458 | Input/Output: [(-87 -47 66 91) -87]
Test Case: 459 | Input/Output: [(40 29 23 34) 23]
Test Case: 460 | Input/Output: [(78 -51 19 90) -51]
Test Case: 461 | Input/Output: [(86 64 -83 98) -83]
Test Case: 462 | Input/Output: [(-11 -94 -50 -29) -94]
Test Case: 463 | Input/Output: [(43 29 3 67) 3]
Test Case: 464 | Input/Output: [(40 30 69 -86) -86]
Test Case: 465 | Input/Output: [(32 -6 40 9) -6]
Test Case: 466 | Input/Output: [(-98 70 -20 63) -98]
Test Case: 467 | Input/Output: [(32 8 -23 62) -23]
Test Case: 468 | Input/Output: [(78 -99 4 61) -99]
Test Case: 469 | Input/Output: [(7 -71 -12 89) -71]
Test Case: 470 | Input/Output: [(-42 97 92 -63) -63]
Test Case: 471 | Input/Output: [(-49 -48 82 24) -49]
Test Case: 472 | Input/Output: [(71 96 -95 -26) -95]
Test Case: 473 | Input/Output: [(-94 29 -73 25) -94]
Test Case: 474 | Input/Output: [(38 -4 42 73) -4]
Test Case: 475 | Input/Output: [(-15 -8 -63 -93) -93]
Test Case: 476 | Input/Output: [(43 16 -96 -54) -96]
Test Case: 477 | Input/Output: [(-47 76 7 2) -47]
Test Case: 478 | Input/Output: [(-25 56 15 91) -25]
Test Case: 479 | Input/Output: [(79 31 30 18) 18]
Test Case: 480 | Input/Output: [(94 -25 -9 -85) -85]
Test Case: 481 | Input/Output: [(82 95 49 92) 49]
Test Case: 482 | Input/Output: [(-31 4 -53 -55) -55]
Test Case: 483 | Input/Output: [(-15 94 65 -37) -37]
Test Case: 484 | Input/Output: [(-85 2 -22 -3) -85]
Test Case: 485 | Input/Output: [(-17 74 74 -16) -17]
Test Case: 486 | Input/Output: [(-9 -21 -71 -47) -71]
Test Case: 487 | Input/Output: [(-2 -37 12 -98) -98]
Test Case: 488 | Input/Output: [(-34 -31 -54 93) -54]
Test Case: 489 | Input/Output: [(55 -49 -11 -78) -78]
Test Case: 490 | Input/Output: [(52 39 71 -93) -93]
Test Case: 491 | Input/Output: [(49 68 -13 -31) -31]
Test Case: 492 | Input/Output: [(44 31 4 23) 4]
Test Case: 493 | Input/Output: [(-82 99 16 -51) -82]
Test Case: 494 | Input/Output: [(58 -89 18 -87) -89]
Test Case: 495 | Input/Output: [(-12 94 20 95) -12]
Test Case: 496 | Input/Output: [(-20 75 -80 -94) -94]
Test Case: 497 | Input/Output: [(-58 -98 -42 -98) -98]
Test Case: 498 | Input/Output: [(-93 90 -4 -45) -93]
Test Case: 499 | Input/Output: [(-12 23 14 96) -12]
Test Case: 500 | Input/Output: [(-83 -64 79 12) -83]
Test Case: 501 | Input/Output: [(76 61 98 -91) -91]
Test Case: 502 | Input/Output: [(-65 -27 42 9) -65]
Test Case: 503 | Input/Output: [(92 -16 83 -56) -56]
Test Case: 504 | Input/Output: [(-43 -51 -21 54) -51]
Test Case: 505 | Input/Output: [(-42 -4 12 -81) -81]
Test Case: 506 | Input/Output: [(30 6 -27 -81) -81]
Test Case: 507 | Input/Output: [(79 -58 21 -47) -58]
Test Case: 508 | Input/Output: [(-76 -8 -51 -68) -76]
Test Case: 509 | Input/Output: [(-79 -7 87 51) -79]
Test Case: 510 | Input/Output: [(80 94 30 36) 30]
Test Case: 511 | Input/Output: [(52 -90 -37 49) -90]
Test Case: 512 | Input/Output: [(20 -79 38 -81) -81]
Test Case: 513 | Input/Output: [(-22 4 -89 -66) -89]
Test Case: 514 | Input/Output: [(-25 73 48 -96) -96]
Test Case: 515 | Input/Output: [(34 96 -56 45) -56]
Test Case: 516 | Input/Output: [(-78 -45 -15 -21) -78]
Test Case: 517 | Input/Output: [(-85 -58 -88 7) -88]
Test Case: 518 | Input/Output: [(-71 -99 59 47) -99]
Test Case: 519 | Input/Output: [(68 66 -17 -51) -51]
Test Case: 520 | Input/Output: [(-89 40 -92 -83) -92]
Test Case: 521 | Input/Output: [(4 59 16 -73) -73]
Test Case: 522 | Input/Output: [(-50 48 -57 7) -57]
Test Case: 523 | Input/Output: [(-75 -63 30 -23) -75]
Test Case: 524 | Input/Output: [(-91 -86 66 -48) -91]
Test Case: 525 | Input/Output: [(64 -38 89 74) -38]
Test Case: 526 | Input/Output: [(-80 60 -68 -21) -80]
Test Case: 527 | Input/Output: [(15 3 -38 91) -38]
Test Case: 528 | Input/Output: [(-52 -45 -74 -81) -81]
Test Case: 529 | Input/Output: [(46 -46 -65 -76) -76]
Test Case: 530 | Input/Output: [(-98 -21 -66 3) -98]
Test Case: 531 | Input/Output: [(-57 67 1 72) -57]
Test Case: 532 | Input/Output: [(45 36 79 -88) -88]
Test Case: 533 | Input/Output: [(-81 91 79 -96) -96]
Test Case: 534 | Input/Output: [(61 45 22 68) 22]
Test Case: 535 | Input/Output: [(-71 -88 89 22) -88]
Test Case: 536 | Input/Output: [(-6 68 67 -12) -12]
Test Case: 537 | Input/Output: [(-17 -5 -1 -16) -17]
Test Case: 538 | Input/Output: [(-36 -24 -53 -90) -90]
Test Case: 539 | Input/Output: [(-95 54 65 13) -95]
Test Case: 540 | Input/Output: [(-60 22 -55 -98) -98]
Test Case: 541 | Input/Output: [(13 36 12 24) 12]
Test Case: 542 | Input/Output: [(32 -5 -28 -62) -62]
Test Case: 543 | Input/Output: [(66 -88 -47 88) -88]
Test Case: 544 | Input/Output: [(43 11 55 69) 11]
Test Case: 545 | Input/Output: [(-39 -59 65 -46) -59]
Test Case: 546 | Input/Output: [(-73 44 -61 -67) -73]
Test Case: 547 | Input/Output: [(54 30 -57 -43) -57]
Test Case: 548 | Input/Output: [(13 62 73 35) 13]
Test Case: 549 | Input/Output: [(8 -34 61 -32) -34]
Test Case: 550 | Input/Output: [(11 35 -51 -13) -51]
Test Case: 551 | Input/Output: [(88 -21 62 41) -21]
Test Case: 552 | Input/Output: [(-94 54 -43 -62) -94]
Test Case: 553 | Input/Output: [(45 70 45 52) 45]
Test Case: 554 | Input/Output: [(66 -49 -51 100) -51]
Test Case: 555 | Input/Output: [(63 -46 24 59) -46]
Test Case: 556 | Input/Output: [(15 -11 -57 18) -57]
Test Case: 557 | Input/Output: [(85 -73 -80 -69) -80]
Test Case: 558 | Input/Output: [(56 -90 67 95) -90]
Test Case: 559 | Input/Output: [(-82 -61 -88 -65) -88]
Test Case: 560 | Input/Output: [(-31 78 -67 -63) -67]
Test Case: 561 | Input/Output: [(78 97 82 65) 65]
Test Case: 562 | Input/Output: [(82 21 66 43) 21]
Test Case: 563 | Input/Output: [(-8 28 33 -73) -73]
Test Case: 564 | Input/Output: [(58 25 -36 -42) -42]
Test Case: 565 | Input/Output: [(99 -69 85 -81) -81]
Test Case: 566 | Input/Output: [(-44 -11 66 93) -44]
Test Case: 567 | Input/Output: [(10 31 -83 75) -83]
Test Case: 568 | Input/Output: [(18 -87 -97 92) -97]
Test Case: 569 | Input/Output: [(-45 26 34 -37) -45]
Test Case: 570 | Input/Output: [(85 -30 59 90) -30]
Test Case: 571 | Input/Output: [(-24 32 77 72) -24]
Test Case: 572 | Input/Output: [(98 -53 -66 -61) -66]
Test Case: 573 | Input/Output: [(-60 9 -78 -85) -85]
Test Case: 574 | Input/Output: [(3 39 86 43) 3]
Test Case: 575 | Input/Output: [(24 -82 76 -98) -98]
Test Case: 576 | Input/Output: [(86 94 41 73) 41]
Test Case: 577 | Input/Output: [(-27 54 -40 72) -40]
Test Case: 578 | Input/Output: [(13 -44 14 38) -44]
Test Case: 579 | Input/Output: [(-35 56 46 60) -35]
Test Case: 580 | Input/Output: [(29 -95 -89 58) -95]
Test Case: 581 | Input/Output: [(-1 5 -55 99) -55]
Test Case: 582 | Input/Output: [(-40 40 -95 -74) -95]
Test Case: 583 | Input/Output: [(-34 73 63 75) -34]
Test Case: 584 | Input/Output: [(-5 -27 11 49) -27]
Test Case: 585 | Input/Output: [(11 62 11 -2) -2]
Test Case: 586 | Input/Output: [(-24 72 20 -86) -86]
Test Case: 587 | Input/Output: [(-68 9 50 -68) -68]
Test Case: 588 | Input/Output: [(73 -88 89 62) -88]
Test Case: 589 | Input/Output: [(-92 -32 -70 45) -92]
Test Case: 590 | Input/Output: [(-59 -54 -96 -55) -96]
Test Case: 591 | Input/Output: [(34 -84 36 -66) -84]
Test Case: 592 | Input/Output: [(-86 -73 -95 28) -95]
Test Case: 593 | Input/Output: [(99 54 37 6) 6]
Test Case: 594 | Input/Output: [(22 -46 -20 83) -46]
Test Case: 595 | Input/Output: [(-6 47 -10 -67) -67]
Test Case: 596 | Input/Output: [(-31 -35 80 -85) -85]
Test Case: 597 | Input/Output: [(-93 17 -83 89) -93]
Test Case: 598 | Input/Output: [(49 15 -59 -8) -59]
Test Case: 599 | Input/Output: [(21 -34 14 -69) -69]
Test Case: 600 | Input/Output: [(26 -61 79 42) -61]
Test Case: 601 | Input/Output: [(83 98 -52 35) -52]
Test Case: 602 | Input/Output: [(-47 -45 -75 3) -75]
Test Case: 603 | Input/Output: [(-14 -50 -16 -30) -50]
Test Case: 604 | Input/Output: [(76 44 4 11) 4]
Test Case: 605 | Input/Output: [(85 14 82 -90) -90]
Test Case: 606 | Input/Output: [(82 14 46 28) 14]
Test Case: 607 | Input/Output: [(85 -48 48 -51) -51]
Test Case: 608 | Input/Output: [(19 94 30 -52) -52]
Test Case: 609 | Input/Output: [(-9 -4 87 -78) -78]
Test Case: 610 | Input/Output: [(82 -37 65 2) -37]
Test Case: 611 | Input/Output: [(-45 -87 -57 36) -87]
Test Case: 612 | Input/Output: [(-50 -28 4 54) -50]
Test Case: 613 | Input/Output: [(-4 60 17 45) -4]
Test Case: 614 | Input/Output: [(77 80 -99 -12) -99]
Test Case: 615 | Input/Output: [(-17 17 -2 -19) -19]
Test Case: 616 | Input/Output: [(23 69 16 -19) -19]
Test Case: 617 | Input/Output: [(-63 35 -55 82) -63]
Test Case: 618 | Input/Output: [(-23 -8 -98 -7) -98]
Test Case: 619 | Input/Output: [(-86 13 -65 -28) -86]
Test Case: 620 | Input/Output: [(-44 100 -18 46) -44]
Test Case: 621 | Input/Output: [(68 -62 -86 74) -86]
Test Case: 622 | Input/Output: [(-97 38 81 58) -97]
Test Case: 623 | Input/Output: [(18 25 -77 75) -77]
Test Case: 624 | Input/Output: [(8 4 8 30) 4]
Test Case: 625 | Input/Output: [(90 -38 95 55) -38]
Test Case: 626 | Input/Output: [(-75 -26 23 22) -75]
Test Case: 627 | Input/Output: [(-5 -12 -46 60) -46]
Test Case: 628 | Input/Output: [(-29 39 40 -50) -50]
Test Case: 629 | Input/Output: [(62 -63 -42 38) -63]
Test Case: 630 | Input/Output: [(17 -94 -68 -55) -94]
Test Case: 631 | Input/Output: [(59 -90 -28 -55) -90]
Test Case: 632 | Input/Output: [(33 -95 -1 38) -95]
Test Case: 633 | Input/Output: [(45 -46 -19 80) -46]
Test Case: 634 | Input/Output: [(16 8 -37 -69) -69]
Test Case: 635 | Input/Output: [(-7 -14 23 18) -14]
Test Case: 636 | Input/Output: [(-98 85 99 10) -98]
Test Case: 637 | Input/Output: [(-18 -92 -10 -15) -92]
Test Case: 638 | Input/Output: [(-91 22 22 -65) -91]
Test Case: 639 | Input/Output: [(-41 -33 46 33) -41]
Test Case: 640 | Input/Output: [(72 69 8 18) 8]
Test Case: 641 | Input/Output: [(98 -23 36 62) -23]
Test Case: 642 | Input/Output: [(22 57 -65 -97) -97]
Test Case: 643 | Input/Output: [(84 -51 -50 -97) -97]
Test Case: 644 | Input/Output: [(-44 65 60 -93) -93]
Test Case: 645 | Input/Output: [(60 3 62 19) 3]
Test Case: 646 | Input/Output: [(50 73 -73 61) -73]
Test Case: 647 | Input/Output: [(-24 -19 -63 5) -63]
Test Case: 648 | Input/Output: [(20 -63 24 91) -63]
Test Case: 649 | Input/Output: [(-66 38 72 -25) -66]
Test Case: 650 | Input/Output: [(74 18 69 -67) -67]
Test Case: 651 | Input/Output: [(99 58 63 -54) -54]
Test Case: 652 | Input/Output: [(-90 -46 23 -43) -90]
Test Case: 653 | Input/Output: [(22 52 90 -41) -41]
Test Case: 654 | Input/Output: [(94 -29 53 58) -29]
Test Case: 655 | Input/Output: [(59 5 58 -39) -39]
Test Case: 656 | Input/Output: [(71 -29 10 65) -29]
Test Case: 657 | Input/Output: [(-4 -57 -19 -59) -59]
Test Case: 658 | Input/Output: [(73 -86 -23 10) -86]
Test Case: 659 | Input/Output: [(76 -30 -21 99) -30]
Test Case: 660 | Input/Output: [(18 65 -65 56) -65]
Test Case: 661 | Input/Output: [(-61 12 2 3) -61]
Test Case: 662 | Input/Output: [(-100 -48 92 39) -100]
Test Case: 663 | Input/Output: [(27 -43 25 100) -43]
Test Case: 664 | Input/Output: [(66 75 56 97) 56]
Test Case: 665 | Input/Output: [(-90 82 -72 -7) -90]
Test Case: 666 | Input/Output: [(-35 76 97 16) -35]
Test Case: 667 | Input/Output: [(43 52 27 -43) -43]
Test Case: 668 | Input/Output: [(-15 96 81 -51) -51]
Test Case: 669 | Input/Output: [(-41 96 37 -5) -41]
Test Case: 670 | Input/Output: [(-58 -99 -64 -76) -99]
Test Case: 671 | Input/Output: [(-39 -43 -99 10) -99]
Test Case: 672 | Input/Output: [(-24 -98 -81 -86) -98]
Test Case: 673 | Input/Output: [(-25 -20 5 -63) -63]
Test Case: 674 | Input/Output: [(8 85 13 -42) -42]
Test Case: 675 | Input/Output: [(-23 -10 28 33) -23]
Test Case: 676 | Input/Output: [(85 30 47 30) 30]
Test Case: 677 | Input/Output: [(86 24 62 -1) -1]
Test Case: 678 | Input/Output: [(6 -58 -22 -92) -92]
Test Case: 679 | Input/Output: [(-68 73 18 47) -68]
Test Case: 680 | Input/Output: [(31 -56 -23 42) -56]
Test Case: 681 | Input/Output: [(1 58 -82 -48) -82]
Test Case: 682 | Input/Output: [(14 -65 13 -46) -65]
Test Case: 683 | Input/Output: [(12 -24 11 27) -24]
Test Case: 684 | Input/Output: [(79 88 63 53) 53]
Test Case: 685 | Input/Output: [(15 -18 -52 -68) -68]
Test Case: 686 | Input/Output: [(-47 57 -5 55) -47]
Test Case: 687 | Input/Output: [(34 -10 -71 16) -71]
Test Case: 688 | Input/Output: [(1 -10 -76 90) -76]
Test Case: 689 | Input/Output: [(-86 50 27 -94) -94]
Test Case: 690 | Input/Output: [(-38 -26 62 97) -38]
Test Case: 691 | Input/Output: [(-23 -94 55 -70) -94]
Test Case: 692 | Input/Output: [(25 -67 -74 100) -74]
Test Case: 693 | Input/Output: [(30 -30 -98 -93) -98]
Test Case: 694 | Input/Output: [(-55 32 -97 44) -97]
Test Case: 695 | Input/Output: [(67 -72 43 62) -72]
Test Case: 696 | Input/Output: [(71 82 -28 18) -28]
Test Case: 697 | Input/Output: [(-85 79 -26 -63) -85]
Test Case: 698 | Input/Output: [(70 77 -72 -56) -72]
Test Case: 699 | Input/Output: [(0 -39 -23 93) -39]
Test Case: 700 | Input/Output: [(-10 50 63 28) -10]
Test Case: 701 | Input/Output: [(77 -81 -29 -99) -99]
Test Case: 702 | Input/Output: [(-21 93 31 -59) -59]
Test Case: 703 | Input/Output: [(-33 7 43 57) -33]
Test Case: 704 | Input/Output: [(-59 10 91 -18) -59]
Test Case: 705 | Input/Output: [(-60 31 -83 50) -83]
Test Case: 706 | Input/Output: [(-52 100 -14 89) -52]
Test Case: 707 | Input/Output: [(68 -74 2 -47) -74]
Test Case: 708 | Input/Output: [(40 94 -26 -75) -75]
Test Case: 709 | Input/Output: [(-10 -58 52 70) -58]
Test Case: 710 | Input/Output: [(87 -42 -78 72) -78]
Test Case: 711 | Input/Output: [(31 79 -16 -72) -72]
Test Case: 712 | Input/Output: [(-86 54 -99 33) -99]
Test Case: 713 | Input/Output: [(69 -40 36 -56) -56]
Test Case: 714 | Input/Output: [(16 17 -63 -42) -63]
Test Case: 715 | Input/Output: [(-66 75 55 -30) -66]
Test Case: 716 | Input/Output: [(-26 -91 11 39) -91]
Test Case: 717 | Input/Output: [(52 72 58 85) 52]
Test Case: 718 | Input/Output: [(-67 75 -45 -40) -67]
Test Case: 719 | Input/Output: [(-58 95 75 -93) -93]
Test Case: 720 | Input/Output: [(-20 -73 78 44) -73]
Test Case: 721 | Input/Output: [(59 -52 42 -10) -52]
Test Case: 722 | Input/Output: [(0 -8 73 -83) -83]
Test Case: 723 | Input/Output: [(-6 10 -33 -47) -47]
Test Case: 724 | Input/Output: [(81 95 -50 -93) -93]
Test Case: 725 | Input/Output: [(5 -24 13 -50) -50]
Test Case: 726 | Input/Output: [(77 11 95 90) 11]
Test Case: 727 | Input/Output: [(96 53 -79 0) -79]
Test Case: 728 | Input/Output: [(95 47 -94 -98) -98]
Test Case: 729 | Input/Output: [(39 -68 62 -94) -94]
Test Case: 730 | Input/Output: [(50 84 -29 1) -29]
Test Case: 731 | Input/Output: [(47 18 -10 15) -10]
Test Case: 732 | Input/Output: [(-54 30 -80 -73) -80]
Test Case: 733 | Input/Output: [(-99 37 -75 -32) -99]
Test Case: 734 | Input/Output: [(-63 4 -67 93) -67]
Test Case: 735 | Input/Output: [(-23 -26 -32 -10) -32]
Test Case: 736 | Input/Output: [(99 29 43 100) 29]
Test Case: 737 | Input/Output: [(-19 12 23 -73) -73]
Test Case: 738 | Input/Output: [(-83 -26 -3 85) -83]
Test Case: 739 | Input/Output: [(65 88 36 34) 34]
Test Case: 740 | Input/Output: [(-86 -23 -28 -69) -86]
Test Case: 741 | Input/Output: [(94 -9 -1 22) -9]
Test Case: 742 | Input/Output: [(79 -4 -27 -77) -77]
Test Case: 743 | Input/Output: [(-50 45 75 -9) -50]
Test Case: 744 | Input/Output: [(-72 0 -1 -97) -97]
Test Case: 745 | Input/Output: [(17 51 -39 90) -39]
Test Case: 746 | Input/Output: [(-35 37 74 -47) -47]
Test Case: 747 | Input/Output: [(79 -7 20 -55) -55]
Test Case: 748 | Input/Output: [(-7 33 66 3) -7]
Test Case: 749 | Input/Output: [(85 50 24 -70) -70]
Test Case: 750 | Input/Output: [(-86 -70 67 -43) -86]
Test Case: 751 | Input/Output: [(75 19 99 -60) -60]
Test Case: 752 | Input/Output: [(43 42 -91 -30) -91]
Test Case: 753 | Input/Output: [(35 -73 -63 14) -73]
Test Case: 754 | Input/Output: [(-56 -17 47 53) -56]
Test Case: 755 | Input/Output: [(-15 -11 -63 -29) -63]
Test Case: 756 | Input/Output: [(16 -54 14 49) -54]
Test Case: 757 | Input/Output: [(91 56 -37 -72) -72]
Test Case: 758 | Input/Output: [(-32 61 69 45) -32]
Test Case: 759 | Input/Output: [(-94 -96 -47 -32) -96]
Test Case: 760 | Input/Output: [(43 -24 47 -10) -24]
Test Case: 761 | Input/Output: [(42 -22 -58 -54) -58]
Test Case: 762 | Input/Output: [(37 -62 60 -47) -62]
Test Case: 763 | Input/Output: [(82 -70 -84 0) -84]
Test Case: 764 | Input/Output: [(-62 66 -5 10) -62]
Test Case: 765 | Input/Output: [(19 38 -77 12) -77]
Test Case: 766 | Input/Output: [(-82 94 -33 -27) -82]
Test Case: 767 | Input/Output: [(7 -21 42 -27) -27]
Test Case: 768 | Input/Output: [(-64 40 5 -96) -96]
Test Case: 769 | Input/Output: [(54 41 45 -36) -36]
Test Case: 770 | Input/Output: [(2 -52 74 12) -52]
Test Case: 771 | Input/Output: [(-78 -98 100 98) -98]
Test Case: 772 | Input/Output: [(-51 -54 82 -10) -54]
Test Case: 773 | Input/Output: [(30 -14 39 16) -14]
Test Case: 774 | Input/Output: [(55 -95 -61 -94) -95]
Test Case: 775 | Input/Output: [(-11 -49 80 -59) -59]
Test Case: 776 | Input/Output: [(45 41 -83 -64) -83]
Test Case: 777 | Input/Output: [(-6 -63 -93 6) -93]
Test Case: 778 | Input/Output: [(-15 15 -95 83) -95]
Test Case: 779 | Input/Output: [(-18 -78 -94 56) -94]
Test Case: 780 | Input/Output: [(55 36 11 92) 11]
Test Case: 781 | Input/Output: [(32 69 -68 86) -68]
Test Case: 782 | Input/Output: [(84 18 66 -81) -81]
Test Case: 783 | Input/Output: [(58 -8 51 -15) -15]
Test Case: 784 | Input/Output: [(-17 65 85 -43) -43]
Test Case: 785 | Input/Output: [(-32 -13 62 -30) -32]
Test Case: 786 | Input/Output: [(20 81 25 -4) -4]
Test Case: 787 | Input/Output: [(75 56 -50 -57) -57]
Test Case: 788 | Input/Output: [(62 42 -95 93) -95]
Test Case: 789 | Input/Output: [(99 76 65 -44) -44]
Test Case: 790 | Input/Output: [(-35 -7 -17 -84) -84]
Test Case: 791 | Input/Output: [(41 -67 3 -22) -67]
Test Case: 792 | Input/Output: [(-1 -5 -65 25) -65]
Test Case: 793 | Input/Output: [(12 100 68 -97) -97]
Test Case: 794 | Input/Output: [(-56 54 -92 -93) -93]
Test Case: 795 | Input/Output: [(-74 -67 21 72) -74]
Test Case: 796 | Input/Output: [(31 72 -12 -54) -54]
Test Case: 797 | Input/Output: [(59 62 76 77) 59]
Test Case: 798 | Input/Output: [(79 43 96 -66) -66]
Test Case: 799 | Input/Output: [(27 46 78 31) 27]
Test Case: 800 | Input/Output: [(-32 14 44 93) -32]
Test Case: 801 | Input/Output: [(-45 63 28 5) -45]
Test Case: 802 | Input/Output: [(-20 53 80 -36) -36]
Test Case: 803 | Input/Output: [(1 94 68 -34) -34]
Test Case: 804 | Input/Output: [(-57 -68 -100 40) -100]
Test Case: 805 | Input/Output: [(81 -75 -7 -57) -75]
Test Case: 806 | Input/Output: [(68 -60 -98 75) -98]
Test Case: 807 | Input/Output: [(-42 -87 -41 -69) -87]
Test Case: 808 | Input/Output: [(67 -76 -6 4) -76]
Test Case: 809 | Input/Output: [(2 56 13 78) 2]
Test Case: 810 | Input/Output: [(26 -39 -25 -67) -67]
Test Case: 811 | Input/Output: [(71 -6 27 31) -6]
Test Case: 812 | Input/Output: [(-6 -15 -92 -70) -92]
Test Case: 813 | Input/Output: [(-35 -72 -59 -24) -72]
Test Case: 814 | Input/Output: [(42 -85 0 -40) -85]
Test Case: 815 | Input/Output: [(-15 -48 -57 -83) -83]
Test Case: 816 | Input/Output: [(-77 -44 -95 51) -95]
Test Case: 817 | Input/Output: [(4 -58 54 -45) -58]
Test Case: 818 | Input/Output: [(-7 -35 -18 74) -35]
Test Case: 819 | Input/Output: [(36 -7 -93 -64) -93]
Test Case: 820 | Input/Output: [(56 -62 96 75) -62]
Test Case: 821 | Input/Output: [(-47 97 -65 20) -65]
Test Case: 822 | Input/Output: [(-57 97 -35 26) -57]
Test Case: 823 | Input/Output: [(71 9 -7 49) -7]
Test Case: 824 | Input/Output: [(52 -72 -36 91) -72]
Test Case: 825 | Input/Output: [(-3 6 97 94) -3]
Test Case: 826 | Input/Output: [(-12 7 -56 -85) -85]
Test Case: 827 | Input/Output: [(77 100 -31 -78) -78]
Test Case: 828 | Input/Output: [(-36 -72 -30 3) -72]
Test Case: 829 | Input/Output: [(-6 26 -25 -74) -74]
Test Case: 830 | Input/Output: [(-75 93 -25 65) -75]
Test Case: 831 | Input/Output: [(98 -18 5 -64) -64]
Test Case: 832 | Input/Output: [(100 -39 -84 -28) -84]
Test Case: 833 | Input/Output: [(-43 -10 -97 -83) -97]
Test Case: 834 | Input/Output: [(-81 -93 -66 -76) -93]
Test Case: 835 | Input/Output: [(52 23 73 -46) -46]
Test Case: 836 | Input/Output: [(-33 51 30 -74) -74]
Test Case: 837 | Input/Output: [(85 27 81 -83) -83]
Test Case: 838 | Input/Output: [(26 72 75 -73) -73]
Test Case: 839 | Input/Output: [(64 42 -98 -62) -98]
Test Case: 840 | Input/Output: [(0 -38 80 34) -38]
Test Case: 841 | Input/Output: [(-90 -76 -34 56) -90]
Test Case: 842 | Input/Output: [(85 -65 73 65) -65]
Test Case: 843 | Input/Output: [(-99 -74 2 79) -99]
Test Case: 844 | Input/Output: [(25 23 44 -40) -40]
Test Case: 845 | Input/Output: [(-80 -16 53 65) -80]
Test Case: 846 | Input/Output: [(75 31 5 -37) -37]
Test Case: 847 | Input/Output: [(-11 -98 36 93) -98]
Test Case: 848 | Input/Output: [(93 -15 15 -68) -68]
Test Case: 849 | Input/Output: [(-7 27 -63 -96) -96]
Test Case: 850 | Input/Output: [(3 -74 47 93) -74]
Test Case: 851 | Input/Output: [(66 -79 -52 11) -79]
Test Case: 852 | Input/Output: [(47 93 -18 59) -18]
Test Case: 853 | Input/Output: [(-100 72 -68 -43) -100]
Test Case: 854 | Input/Output: [(-17 -5 38 -82) -82]
Test Case: 855 | Input/Output: [(-100 78 75 77) -100]
Test Case: 856 | Input/Output: [(-58 -21 4 -60) -60]
Test Case: 857 | Input/Output: [(-24 16 -65 85) -65]
Test Case: 858 | Input/Output: [(-15 69 47 94) -15]
Test Case: 859 | Input/Output: [(88 -52 59 -18) -52]
Test Case: 860 | Input/Output: [(34 -32 42 89) -32]
Test Case: 861 | Input/Output: [(-4 -79 -51 57) -79]
Test Case: 862 | Input/Output: [(9 37 -11 -65) -65]
Test Case: 863 | Input/Output: [(11 -84 -64 -84) -84]
Test Case: 864 | Input/Output: [(95 19 87 85) 19]
Test Case: 865 | Input/Output: [(-67 -18 -40 69) -67]
Test Case: 866 | Input/Output: [(30 38 -44 72) -44]
Test Case: 867 | Input/Output: [(-35 40 25 78) -35]
Test Case: 868 | Input/Output: [(29 -71 31 -69) -71]
Test Case: 869 | Input/Output: [(-87 -49 -22 -81) -87]
Test Case: 870 | Input/Output: [(-58 58 -6 62) -58]
Test Case: 871 | Input/Output: [(84 47 16 92) 16]
Test Case: 872 | Input/Output: [(-1 55 -41 -74) -74]
Test Case: 873 | Input/Output: [(61 -8 -47 68) -47]
Test Case: 874 | Input/Output: [(-81 -90 -16 61) -90]
Test Case: 875 | Input/Output: [(95 51 34 1) 1]
Test Case: 876 | Input/Output: [(94 -90 -18 26) -90]
Test Case: 877 | Input/Output: [(58 -61 -22 -37) -61]
Test Case: 878 | Input/Output: [(32 70 -42 75) -42]
Test Case: 879 | Input/Output: [(-70 -43 -1 89) -70]
Test Case: 880 | Input/Output: [(-62 -28 5 64) -62]
Test Case: 881 | Input/Output: [(-80 92 -13 100) -80]
Test Case: 882 | Input/Output: [(-71 65 77 25) -71]
Test Case: 883 | Input/Output: [(-17 -99 24 -82) -99]
Test Case: 884 | Input/Output: [(-64 12 -80 43) -80]
Test Case: 885 | Input/Output: [(-30 -5 45 -32) -32]
Test Case: 886 | Input/Output: [(-15 0 20 11) -15]
Test Case: 887 | Input/Output: [(-6 72 53 52) -6]
Test Case: 888 | Input/Output: [(-25 73 14 56) -25]
Test Case: 889 | Input/Output: [(100 -8 1 -64) -64]
Test Case: 890 | Input/Output: [(-24 -54 -99 -92) -99]
Test Case: 891 | Input/Output: [(13 89 -22 22) -22]
Test Case: 892 | Input/Output: [(51 -40 -36 75) -40]
Test Case: 893 | Input/Output: [(-51 2 84 65) -51]
Test Case: 894 | Input/Output: [(54 -76 -75 77) -76]
Test Case: 895 | Input/Output: [(78 98 -11 59) -11]
Test Case: 896 | Input/Output: [(70 28 17 65) 17]
Test Case: 897 | Input/Output: [(72 -28 -6 -73) -73]
Test Case: 898 | Input/Output: [(-44 -31 -3 -12) -44]
Test Case: 899 | Input/Output: [(-75 -99 79 74) -99]
Test Case: 900 | Input/Output: [(-52 -9 60 -43) -52]
Test Case: 901 | Input/Output: [(-6 93 30 -16) -16]
Test Case: 902 | Input/Output: [(-95 -10 86 7) -95]
Test Case: 903 | Input/Output: [(59 -70 -87 -91) -91]
Test Case: 904 | Input/Output: [(-73 63 -95 15) -95]
Test Case: 905 | Input/Output: [(-10 46 52 -55) -55]
Test Case: 906 | Input/Output: [(-22 -37 98 61) -37]
Test Case: 907 | Input/Output: [(-71 66 -16 42) -71]
Test Case: 908 | Input/Output: [(-65 41 79 93) -65]
Test Case: 909 | Input/Output: [(-13 -23 -77 44) -77]
Test Case: 910 | Input/Output: [(-43 -100 -71 -46) -100]
Test Case: 911 | Input/Output: [(5 -67 -51 74) -67]
Test Case: 912 | Input/Output: [(-14 -2 10 -77) -77]
Test Case: 913 | Input/Output: [(74 50 74 60) 50]
Test Case: 914 | Input/Output: [(31 -26 14 -2) -26]
Test Case: 915 | Input/Output: [(69 -11 91 -92) -92]
Test Case: 916 | Input/Output: [(-49 21 -92 99) -92]
Test Case: 917 | Input/Output: [(-5 -27 54 0) -27]
Test Case: 918 | Input/Output: [(-93 64 -98 99) -98]
Test Case: 919 | Input/Output: [(31 -56 -98 99) -98]
Test Case: 920 | Input/Output: [(0 0 66 -87) -87]
Test Case: 921 | Input/Output: [(-71 2 22 -99) -99]
Test Case: 922 | Input/Output: [(-26 -81 -16 -73) -81]
Test Case: 923 | Input/Output: [(24 -99 90 -17) -99]
Test Case: 924 | Input/Output: [(-4 25 -60 -32) -60]
Test Case: 925 | Input/Output: [(90 -91 -73 5) -91]
Test Case: 926 | Input/Output: [(91 -51 -53 81) -53]
Test Case: 927 | Input/Output: [(-3 -8 -86 -73) -86]
Test Case: 928 | Input/Output: [(43 2 -56 -85) -85]
Test Case: 929 | Input/Output: [(95 53 -32 10) -32]
Test Case: 930 | Input/Output: [(8 -73 -45 -21) -73]
Test Case: 931 | Input/Output: [(41 -58 -94 -81) -94]
Test Case: 932 | Input/Output: [(-98 2 32 -10) -98]
Test Case: 933 | Input/Output: [(34 30 -58 -13) -58]
Test Case: 934 | Input/Output: [(80 97 81 73) 73]
Test Case: 935 | Input/Output: [(33 -38 -41 -36) -41]
Test Case: 936 | Input/Output: [(-72 68 75 -14) -72]
Test Case: 937 | Input/Output: [(68 -58 -45 28) -58]
Test Case: 938 | Input/Output: [(13 6 -45 -21) -45]
Test Case: 939 | Input/Output: [(-86 -98 -49 69) -98]
Test Case: 940 | Input/Output: [(-43 29 44 49) -43]
Test Case: 941 | Input/Output: [(6 49 67 43) 6]
Test Case: 942 | Input/Output: [(-42 58 34 -77) -77]
Test Case: 943 | Input/Output: [(99 37 -60 -95) -95]
Test Case: 944 | Input/Output: [(-38 -60 44 -61) -61]
Test Case: 945 | Input/Output: [(-48 44 -82 3) -82]
Test Case: 946 | Input/Output: [(-74 79 82 -45) -74]
Test Case: 947 | Input/Output: [(-27 22 93 86) -27]
Test Case: 948 | Input/Output: [(-7 -48 90 -89) -89]
Test Case: 949 | Input/Output: [(87 98 92 -73) -73]
Test Case: 950 | Input/Output: [(65 17 -67 -32) -67]
Test Case: 951 | Input/Output: [(16 -2 -92 28) -92]
Test Case: 952 | Input/Output: [(-32 -55 19 64) -55]
Test Case: 953 | Input/Output: [(-43 91 37 -73) -73]
Test Case: 954 | Input/Output: [(38 -23 77 -34) -34]
Test Case: 955 | Input/Output: [(66 3 -100 41) -100]
Test Case: 956 | Input/Output: [(-12 29 -25 39) -25]
Test Case: 957 | Input/Output: [(-80 -3 45 41) -80]
Test Case: 958 | Input/Output: [(14 -21 -39 -89) -89]
Test Case: 959 | Input/Output: [(40 44 29 -82) -82]
Test Case: 960 | Input/Output: [(82 41 -27 50) -27]
Test Case: 961 | Input/Output: [(28 31 21 -80) -80]
Test Case: 962 | Input/Output: [(66 30 7 -1) -1]
Test Case: 963 | Input/Output: [(-14 37 23 -89) -89]
Test Case: 964 | Input/Output: [(87 -82 -35 1) -82]
Test Case: 965 | Input/Output: [(-37 59 -57 -86) -86]
Test Case: 966 | Input/Output: [(5 26 -55 11) -55]
Test Case: 967 | Input/Output: [(-91 -37 12 -94) -94]
Test Case: 968 | Input/Output: [(-97 28 55 -77) -97]
Test Case: 969 | Input/Output: [(72 86 -11 -62) -62]
Test Case: 970 | Input/Output: [(24 80 -34 48) -34]
Test Case: 971 | Input/Output: [(-80 -30 93 -24) -80]
Test Case: 972 | Input/Output: [(-13 -73 -19 84) -73]
Test Case: 973 | Input/Output: [(93 -34 -42 63) -42]
Test Case: 974 | Input/Output: [(-76 73 -53 -88) -88]
Test Case: 975 | Input/Output: [(15 -59 76 -58) -59]
Test Case: 976 | Input/Output: [(-90 -34 80 -24) -90]
Test Case: 977 | Input/Output: [(-33 54 -72 58) -72]
Test Case: 978 | Input/Output: [(-43 43 -43 31) -43]
Test Case: 979 | Input/Output: [(-91 12 -17 47) -91]
Test Case: 980 | Input/Output: [(45 67 -7 -12) -12]
Test Case: 981 | Input/Output: [(-28 29 88 82) -28]
Test Case: 982 | Input/Output: [(25 83 -75 -30) -75]
Test Case: 983 | Input/Output: [(95 6 -24 -27) -27]
Test Case: 984 | Input/Output: [(-40 49 41 4) -40]
Test Case: 985 | Input/Output: [(-91 82 76 -64) -91]
Test Case: 986 | Input/Output: [(-99 12 -60 -54) -99]
Test Case: 987 | Input/Output: [(-85 2 50 -72) -85]
Test Case: 988 | Input/Output: [(11 -5 99 -98) -98]
Test Case: 989 | Input/Output: [(39 -47 24 17) -47]
Test Case: 990 | Input/Output: [(63 13 22 5) 5]
Test Case: 991 | Input/Output: [(-7 67 -41 -20) -41]
Test Case: 992 | Input/Output: [(-3 4 -26 22) -26]
Test Case: 993 | Input/Output: [(-58 99 37 30) -58]
Test Case: 994 | Input/Output: [(-14 -95 50 -2) -95]
Test Case: 995 | Input/Output: [(-34 -35 -33 -15) -35]
Test Case: 996 | Input/Output: [(26 -86 47 -88) -88]
Test Case: 997 | Input/Output: [(-9 49 68 91) -9]
Test Case: 998 | Input/Output: [(-88 53 40 28) -88]
Test Case: 999 | Input/Output: [(89 -40 61 -89) -89]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 98f17fffbd710431b7ffe02918e462d48a2ebada
GitHub link = https://github.com/lspector/Clojush/commit/98f17fffbd710431b7ffe02918e462d48a2ebada
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x30b9728f clojush.problems.software.smallest$fn__7460@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@24b8a393]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
random-screen = false
random-seed = -45 -59 -36 28 -111 -76 54 47 107 -37 -102 68 11 -7 72 -34
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-74 -74 -74 36] -74] [[-23 -23 -23 14] -23] [[-21 -21 -11 -21] -21] [[75 -24 -24 -24] -24] [[-58 -58 -58 39] -58] [[-50 -50 43 -50] -50] [[33 33 14 33] 14] [[-9 -9 -9 0] -9] [[98 98 98 18] 18] [[47 -5 47 47] -5] [(100 100 100 100) 100] [(-19 -19 -19 -19) -19] [(-31 -31 -31 -31) -31] [(10 10 10 10) 10] [(47 47 47 47) 47] [(17 34 87 75) 17] [(8 1 29 73) 1] [(0 20 67 97) 0] [(35 57 40 14) 14] [(58 28 60 7) 7] [(87 46 1 8) 1] [(69 36 44 58) 36] [(69 59 30 14) 14] [(22 13 57 29) 13] [(38 1 76 52) 1] [(20 61 56 70) 20] [(92 41 66 28) 28] [(88 22 22 61) 22] [(77 45 19 75) 19] [(87 73 33 94) 33] [(95 14 44 72) 14] [(93 23 27 38) 23] [(60 20 0 85) 0] [(86 85 16 52) 16] [(74 74 30 4) 4] [(-87 78 15 63) -87] [(6 -21 10 41) -21] [(-31 -94 -48 92) -94] [(-12 -99 72 75) -99] [(-39 -65 -60 -25) -65] [(-35 52 -65 -8) -65] [(37 -52 -81 46) -81] [(50 36 -16 -99) -99] [(93 -86 -81 -39) -86] [(29 -30 25 12) -30] [(23 53 15 56) 15] [(-46 57 -7 -16) -46] [(23 36 42 8) 8] [(55 52 16 33) 16] [(80 73 22 -48) -48] [(88 -1 -79 80) -79] [(58 -91 52 78) -91] [(-82 -46 -80 -31) -82] [(-55 -9 37 -52) -55] [(-51 35 -9 54) -51] [(-40 -9 -24 53) -40] [(-26 82 14 9) -26] [(-65 -41 -21 50) -65] [(-71 -51 31 38) -71] [(12 -40 54 39) -40] [(-84 -43 69 27) -84] [(100 21 22 -87) -87] [(-33 -56 -22 -29) -56] [(29 -9 -43 18) -43] [(-15 75 -61 62) -61] [(-25 75 84 -6) -25] [(-43 -67 92 69) -67] [(46 86 69 90) 46] [(52 85 -53 49) -53] [(-55 -33 72 1) -55] [(93 41 15 63) 15] [(-78 -30 69 0) -78] [(-78 -36 -99 -83) -99] [(24 7 64 11) 7] [(-13 -43 -52 -18) -52] [(7 37 -21 90) -21] [(-39 35 28 -48) -48] [(92 -89 47 -50) -89] [(83 28 48 42) 28] [(26 65 51 93) 26] [(96 -42 -88 34) -88] [(21 -54 -99 18) -99] [(16 58 -83 -71) -83] [(61 26 48 -89) -89] [(-66 10 11 -88) -88] [(19 59 -57 28) -57] [(-74 -65 -50 -55) -74] [(20 -64 14 -1) -64] [(81 69 7 -93) -93] [(67 22 -9 -73) -73] [(2 73 -88 -61) -88] [(31 29 16 -39) -39] [(-45 -48 86 -36) -48] [(-79 -74 25 -69) -79] [(13 57 87 95) 13])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 645
Test mean error for best: 0.64500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -74                 | Program output: -74                
Correct output: -23                 | Program output: -23                
Correct output: -21                 | Program output: -21                
Correct output: -24                 | Program output: -24                
Correct output: -58                 | Program output: -58                
Correct output: -50                 | Program output: -50                
Correct output: 14                  | Program output: 33                 
Correct output: -9                  | Program output: -9                 
Correct output: 18                  | Program output: 98                 
Correct output: -5                  | Program output: -5                 
Correct output: 100                 | Program output: 100                
Correct output: -19                 | Program output: -19                
Correct output: -31                 | Program output: -31                
Correct output: 10                  | Program output: 10                 
Correct output: 47                  | Program output: 47                 
Correct output: 17                  | Program output: 34                 
Correct output: 1                   | Program output: 1                  
Correct output: 0                   | Program output: 20                 
Correct output: 14                  | Program output: 57                 
Correct output: 7                   | Program output: 28                 
Correct output: 1                   | Program output: 46                 
Correct output: 36                  | Program output: 36                 
Correct output: 14                  | Program output: 59                 
Correct output: 13                  | Program output: 13                 
Correct output: 1                   | Program output: 1                  
Correct output: 20                  | Program output: 61                 
Correct output: 28                  | Program output: 41                 
Correct output: 22                  | Program output: 22                 
Correct output: 19                  | Program output: 45                 
Correct output: 33                  | Program output: 73                 
Correct output: 14                  | Program output: 14                 
Correct output: 23                  | Program output: 23                 
Correct output: 0                   | Program output: 20                 
Correct output: 16                  | Program output: 85                 
Correct output: 4                   | Program output: 74                 
Correct output: -87                 | Program output: 78                 
Correct output: -21                 | Program output: -21                
Correct output: -94                 | Program output: -94                
Correct output: -99                 | Program output: -99                
Correct output: -65                 | Program output: -65                
Correct output: -65                 | Program output: 52                 
Correct output: -81                 | Program output: -52                
Correct output: -99                 | Program output: 36                 
Correct output: -86                 | Program output: -86                
Correct output: -30                 | Program output: -30                
Correct output: 15                  | Program output: 53                 
Correct output: -46                 | Program output: 57                 
Correct output: 8                   | Program output: 36                 
Correct output: 16                  | Program output: 52                 
Correct output: -48                 | Program output: 73                 
Correct output: -79                 | Program output: -1                 
Correct output: -91                 | Program output: -91                
Correct output: -82                 | Program output: -46                
Correct output: -55                 | Program output: -9                 
Correct output: -51                 | Program output: 35                 
Correct output: -40                 | Program output: -9                 
Correct output: -26                 | Program output: 82                 
Correct output: -65                 | Program output: -41                
Correct output: -71                 | Program output: -51                
Correct output: -40                 | Program output: -40                
Correct output: -84                 | Program output: -43                
Correct output: -87                 | Program output: 21                 
Correct output: -56                 | Program output: -56                
Correct output: -43                 | Program output: -9                 
Correct output: -61                 | Program output: 75                 
Correct output: -25                 | Program output: 75                 
Correct output: -67                 | Program output: -67                
Correct output: 46                  | Program output: 86                 
Correct output: -53                 | Program output: 85                 
Correct output: -55                 | Program output: -33                
Correct output: 15                  | Program output: 41                 
Correct output: -78                 | Program output: -30                
Correct output: -99                 | Program output: -36                
Correct output: 7                   | Program output: 7                  
Correct output: -52                 | Program output: -43                
Correct output: -21                 | Program output: 37                 
Correct output: -48                 | Program output: 35                 
Correct output: -89                 | Program output: -89                
Correct output: 28                  | Program output: 28                 
Correct output: 26                  | Program output: 65                 
Correct output: -88                 | Program output: -42                
Correct output: -99                 | Program output: -54                
Correct output: -83                 | Program output: 58                 
Correct output: -89                 | Program output: 26                 
Correct output: -88                 | Program output: 10                 
Correct output: -57                 | Program output: 59                 
Correct output: -74                 | Program output: -65                
Correct output: -64                 | Program output: -64                
Correct output: -93                 | Program output: 69                 
Correct output: -73                 | Program output: 22                 
Correct output: -88                 | Program output: 73                 
Correct output: -39                 | Program output: 29                 
Correct output: -48                 | Program output: -48                
Correct output: -79                 | Program output: -74                
Correct output: 13                  | Program output: 57                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 2, :instruction tagged_115} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction exec_shove} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_if} {:close 0, :instruction -32} {:close 0, :instruction print_exec} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_lte} {:close 2, :instruction integer_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_swap} {:close 0, :instruction in2} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_integer_275} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_s} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_min} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_eq} {:close 1, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_dup_items} {:close 1, :instruction integer_add} {:close 0, :instruction exec_k} {:close 0, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_and})
Lexicase best program: (tagged_115 boolean_flush exec_pop (exec_yank exec_eq) integer_fromboolean boolean_dup_items exec_shove () boolean_dup exec_rot (integer_stackdepth) (integer_div print_integer boolean_flush) (exec_do*range (in2 boolean_invert_second_then_and exec_eq) exec_if (-32 print_exec (boolean_dup) integer_div exec_if (exec_dup_items integer_shove integer_lte integer_lte integer_pop) () integer_lte integer_min exec_do*while (exec_shove (boolean_swap in2 boolean_frominteger) exec_if (exec_do*while (integer_pop boolean_dup_times) integer_sub tag_integer_275 boolean_empty boolean_dup_items integer_stackdepth exec_do*range (exec_dup_times (boolean_not) exec_y_when_autoconstructing (boolean_stackdepth) boolean_flush exec_k_when_autoconstructing (integer_dup_items) (integer_inc exec_s (integer_mult) (integer_eq exec_empty print_boolean integer_min exec_y_when_autoconstructing (integer_yank exec_pop (exec_swap (integer_lte integer_eq in4) (integer_shove boolean_not exec_yank exec_dup_items) integer_add) exec_k (in1 exec_stackdepth in2 boolean_invert_second_then_and integer_fromboolean boolean_eq integer_inc integer_swap exec_flush) (exec_dup_times () exec_do*times (exec_s (integer_empty) (boolean_and) ())))) ()))) ())) ()))
Lexicase best errors: [0 0 0 1 1 0 0 1 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 123
Percent parens: 0.293
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 2, :instruction tagged_115} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction exec_shove} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_if} {:close 0, :instruction -32} {:close 0, :instruction print_exec} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_lte} {:close 2, :instruction integer_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_swap} {:close 0, :instruction in2} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_integer_275} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_s} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_min} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_eq} {:close 1, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_dup_items} {:close 1, :instruction integer_add} {:close 0, :instruction exec_k} {:close 0, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_and})
Zero cases best program: (tagged_115 boolean_flush exec_pop (exec_yank exec_eq) integer_fromboolean boolean_dup_items exec_shove () boolean_dup exec_rot (integer_stackdepth) (integer_div print_integer boolean_flush) (exec_do*range (in2 boolean_invert_second_then_and exec_eq) exec_if (-32 print_exec (boolean_dup) integer_div exec_if (exec_dup_items integer_shove integer_lte integer_lte integer_pop) () integer_lte integer_min exec_do*while (exec_shove (boolean_swap in2 boolean_frominteger) exec_if (exec_do*while (integer_pop boolean_dup_times) integer_sub tag_integer_275 boolean_empty boolean_dup_items integer_stackdepth exec_do*range (exec_dup_times (boolean_not) exec_y_when_autoconstructing (boolean_stackdepth) boolean_flush exec_k_when_autoconstructing (integer_dup_items) (integer_inc exec_s (integer_mult) (integer_eq exec_empty print_boolean integer_min exec_y_when_autoconstructing (integer_yank exec_pop (exec_swap (integer_lte integer_eq in4) (integer_shove boolean_not exec_yank exec_dup_items) integer_add) exec_k (in1 exec_stackdepth in2 boolean_invert_second_then_and integer_fromboolean boolean_eq integer_inc integer_swap exec_flush) (exec_dup_times () exec_do*times (exec_s (integer_empty) (boolean_and) ())))) ()))) ())) ()))
Zero cases best errors: [0 0 0 1 1 0 0 1 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 123
Percent parens: 0.293
--- Lexicase Population Statistics ---
Count of elite individuals by case: (19 4 3 2 1 3 9 2 1 3)
Population mean number of elite cases: 0.05
Count of perfect (error zero) individuals by case: (19 4 3 2 1 3 9 2 1 3)
Population mean number of perfect (error zero) cases: 0.05
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_when} {:close 2, :instruction exec_shove} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction boolean_swap} {:close 1, :instruction integer_gt})
Best program: (integer_min in3 boolean_not boolean_flush exec_rot (integer_stackdepth) (exec_swap (integer_dup_items print_integer boolean_eq exec_when (exec_shove ()) exec_yank) (boolean_invert_second_then_and in2 in2 boolean_swap) integer_gt) ())
Errors: [0 0 0 1 1 0 0 1 1 1]
Total: 5
Mean: 0.5
Genome size: 18
Size: 26
Percent parens: 0.308
--- Population Statistics ---
Average total errors in population: 9.953
Median total errors in population: 10
Error averages by case: (0.981 0.996 0.997 0.998 0.999 0.997 0.991 0.998 0.999 0.997)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.893
Average program size in population (points): 70.276
Average percent parens in population: 0.280
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.006
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.291
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 507859
--- Timings ---
Current time: 1559314636072 milliseconds
Total Time:           2.7 seconds
Initialization:       0.1 seconds,  4.1%
Reproduction:         0.9 seconds, 32.1%
Fitness Testing:      1.7 seconds, 63.8%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 645
Test mean error for best: 0.64500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -74                 | Program output: -74                
Correct output: -23                 | Program output: -23                
Correct output: -21                 | Program output: -21                
Correct output: -24                 | Program output: -24                
Correct output: -58                 | Program output: -58                
Correct output: -50                 | Program output: -50                
Correct output: 14                  | Program output: 33                 
Correct output: -9                  | Program output: -9                 
Correct output: 18                  | Program output: 98                 
Correct output: -5                  | Program output: -5                 
Correct output: 100                 | Program output: 100                
Correct output: -19                 | Program output: -19                
Correct output: -31                 | Program output: -31                
Correct output: 10                  | Program output: 10                 
Correct output: 47                  | Program output: 47                 
Correct output: 17                  | Program output: 34                 
Correct output: 1                   | Program output: 1                  
Correct output: 0                   | Program output: 20                 
Correct output: 14                  | Program output: 57                 
Correct output: 7                   | Program output: 28                 
Correct output: 1                   | Program output: 46                 
Correct output: 36                  | Program output: 36                 
Correct output: 14                  | Program output: 59                 
Correct output: 13                  | Program output: 13                 
Correct output: 1                   | Program output: 1                  
Correct output: 20                  | Program output: 61                 
Correct output: 28                  | Program output: 41                 
Correct output: 22                  | Program output: 22                 
Correct output: 19                  | Program output: 45                 
Correct output: 33                  | Program output: 73                 
Correct output: 14                  | Program output: 14                 
Correct output: 23                  | Program output: 23                 
Correct output: 0                   | Program output: 20                 
Correct output: 16                  | Program output: 85                 
Correct output: 4                   | Program output: 74                 
Correct output: -87                 | Program output: 78                 
Correct output: -21                 | Program output: -21                
Correct output: -94                 | Program output: -94                
Correct output: -99                 | Program output: -99                
Correct output: -65                 | Program output: -65                
Correct output: -65                 | Program output: 52                 
Correct output: -81                 | Program output: -52                
Correct output: -99                 | Program output: 36                 
Correct output: -86                 | Program output: -86                
Correct output: -30                 | Program output: -30                
Correct output: 15                  | Program output: 53                 
Correct output: -46                 | Program output: 57                 
Correct output: 8                   | Program output: 36                 
Correct output: 16                  | Program output: 52                 
Correct output: -48                 | Program output: 73                 
Correct output: -79                 | Program output: -1                 
Correct output: -91                 | Program output: -91                
Correct output: -82                 | Program output: -46                
Correct output: -55                 | Program output: -9                 
Correct output: -51                 | Program output: 35                 
Correct output: -40                 | Program output: -9                 
Correct output: -26                 | Program output: 82                 
Correct output: -65                 | Program output: -41                
Correct output: -71                 | Program output: -51                
Correct output: -40                 | Program output: -40                
Correct output: -84                 | Program output: -43                
Correct output: -87                 | Program output: 21                 
Correct output: -56                 | Program output: -56                
Correct output: -43                 | Program output: -9                 
Correct output: -61                 | Program output: 75                 
Correct output: -25                 | Program output: 75                 
Correct output: -67                 | Program output: -67                
Correct output: 46                  | Program output: 86                 
Correct output: -53                 | Program output: 85                 
Correct output: -55                 | Program output: -33                
Correct output: 15                  | Program output: 41                 
Correct output: -78                 | Program output: -30                
Correct output: -99                 | Program output: -36                
Correct output: 7                   | Program output: 7                  
Correct output: -52                 | Program output: -43                
Correct output: -21                 | Program output: 37                 
Correct output: -48                 | Program output: 35                 
Correct output: -89                 | Program output: -89                
Correct output: 28                  | Program output: 28                 
Correct output: 26                  | Program output: 65                 
Correct output: -88                 | Program output: -42                
Correct output: -99                 | Program output: -54                
Correct output: -83                 | Program output: 58                 
Correct output: -89                 | Program output: 26                 
Correct output: -88                 | Program output: 10                 
Correct output: -57                 | Program output: 59                 
Correct output: -74                 | Program output: -65                
Correct output: -64                 | Program output: -64                
Correct output: -93                 | Program output: 69                 
Correct output: -73                 | Program output: 22                 
Correct output: -88                 | Program output: 73                 
Correct output: -39                 | Program output: 29                 
Correct output: -48                 | Program output: -48                
Correct output: -79                 | Program output: -74                
Correct output: 13                  | Program output: 57                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 0, :instruction integer_div} {:close 1, :instruction exec_k} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 2, :instruction integer_div} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_flush} {:close 1, :instruction print_exec} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_y} {:close 1, :instruction exec_when} {:close 0, :instruction tagged_19} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_if} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_y} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_dec} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_dup_items} {:close 0, :instruction tag_boolean_648} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_not})
Lexicase best program: (boolean_dup_items exec_s (boolean_shove boolean_yankdup in2 integer_div exec_k () (integer_dup_items integer_sub) integer_dup_times print_integer exec_y (integer_div)) (boolean_invert_first_then_and exec_dup_times (exec_yankdup) boolean_swap exec_k_when_autoconstructing (integer_div boolean_pop integer_gte) (integer_dup_items boolean_pop integer_flush print_exec () boolean_rot) exec_y (exec_when () tagged_19 exec_swap (exec_s (exec_y (exec_empty boolean_rot boolean_eq integer_stackdepth integer_shove exec_if (integer_min integer_gt exec_pop (integer_yankdup exec_y () integer_fromboolean) exec_k_when_autoconstructing (exec_dup (boolean_rot boolean_invert_first_then_and) exec_pop (boolean_frominteger boolean_not integer_mult) exec_y_when_autoconstructing (integer_dec) boolean_eq) (exec_s_when_autoconstructing (boolean_shove exec_do*range (boolean_frominteger boolean_flush exec_rot (integer_dup_items tag_boolean_648 in3 in2 boolean_and) (exec_while (integer_div boolean_not)) ())) () ())) ())) () ()) ())) ())
Lexicase best errors: [0 0 0 1 0 1 1 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 105
Percent parens: 0.343
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 0, :instruction integer_div} {:close 1, :instruction exec_k} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 2, :instruction integer_div} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_flush} {:close 1, :instruction print_exec} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_y} {:close 1, :instruction exec_when} {:close 0, :instruction tagged_19} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_if} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_y} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_dec} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_dup_items} {:close 0, :instruction tag_boolean_648} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_not})
Zero cases best program: (boolean_dup_items exec_s (boolean_shove boolean_yankdup in2 integer_div exec_k () (integer_dup_items integer_sub) integer_dup_times print_integer exec_y (integer_div)) (boolean_invert_first_then_and exec_dup_times (exec_yankdup) boolean_swap exec_k_when_autoconstructing (integer_div boolean_pop integer_gte) (integer_dup_items boolean_pop integer_flush print_exec () boolean_rot) exec_y (exec_when () tagged_19 exec_swap (exec_s (exec_y (exec_empty boolean_rot boolean_eq integer_stackdepth integer_shove exec_if (integer_min integer_gt exec_pop (integer_yankdup exec_y () integer_fromboolean) exec_k_when_autoconstructing (exec_dup (boolean_rot boolean_invert_first_then_and) exec_pop (boolean_frominteger boolean_not integer_mult) exec_y_when_autoconstructing (integer_dec) boolean_eq) (exec_s_when_autoconstructing (boolean_shove exec_do*range (boolean_frominteger boolean_flush exec_rot (integer_dup_items tag_boolean_648 in3 in2 boolean_and) (exec_while (integer_div boolean_not)) ())) () ())) ())) () ()) ())) ())
Zero cases best errors: [0 0 0 1 0 1 1 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 105
Percent parens: 0.343
--- Lexicase Population Statistics ---
Count of elite individuals by case: (313 313 529 231 645 216 216 231 313 231)
Population mean number of elite cases: 3.24
Count of perfect (error zero) individuals by case: (313 313 529 231 645 216 216 231 313 231)
Population mean number of perfect (error zero) cases: 3.24
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction tagged_115} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction exec_shove} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_if} {:close 0, :instruction -32} {:close 0, :instruction print_exec} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_lte} {:close 2, :instruction integer_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_swap} {:close 0, :instruction in2} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_integer_275} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_s} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_min} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yankdup})
Best program: (tagged_115 boolean_flush exec_pop (exec_yank exec_eq) integer_fromboolean boolean_dup_items exec_shove () boolean_dup exec_rot (integer_stackdepth) (integer_div print_integer boolean_flush) (exec_do*range (in2 boolean_invert_second_then_and exec_eq) exec_if (-32 print_exec (boolean_dup) integer_div exec_if (exec_dup_items integer_shove integer_lte integer_lte integer_pop) () integer_lte integer_min exec_do*while (exec_shove (boolean_swap in2 boolean_frominteger) exec_if (exec_do*while (integer_pop boolean_dup_times) integer_sub tag_integer_275 boolean_empty boolean_dup_items integer_stackdepth exec_do*range (exec_dup_times (boolean_not) exec_y_when_autoconstructing (boolean_stackdepth) boolean_flush exec_k_when_autoconstructing (integer_dup_items) (integer_inc exec_s (integer_mult) (integer_eq exec_empty print_boolean integer_min exec_y_when_autoconstructing (integer_yank exec_pop (exec_swap (integer_lte integer_eq integer_fromboolean) (exec_dup (exec_swap (integer_gt boolean_yankdup) ()))))) ()))) ())) ()))
Errors: [0 0 0 1 0 1 1 1 0 1]
Total: 5
Mean: 0.5
Genome size: 71
Size: 103
Percent parens: 0.311
--- Population Statistics ---
Average total errors in population: 6.762
Median total errors in population: 6
Error averages by case: (0.687 0.687 0.471 0.769 0.355 0.784 0.784 0.769 0.687 0.769)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 61.891
Average program size in population (points): 87.504
Average percent parens in population: 0.283
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.496
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 109
Genome diversity (% unique genomes):	 0.628
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 111
Syntactic diversity (% unique Push programs):	 0.623
Total error diversity:				 0.005
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.051
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 975611
--- Timings ---
Current time: 1559314638794 milliseconds
Total Time:           5.6 seconds
Initialization:       0.1 seconds,  2.0%
Reproduction:         2.7 seconds, 48.9%
Fitness Testing:      2.3 seconds, 41.3%
Report:               0.4 seconds,  7.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 665
Test mean error for best: 0.66500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -74                 | Program output: -74                
Correct output: -23                 | Program output: -23                
Correct output: -21                 | Program output: -11                
Correct output: -24                 | Program output: -24                
Correct output: -58                 | Program output: -58                
Correct output: -50                 | Program output: 43                 
Correct output: 14                  | Program output: 14                 
Correct output: -9                  | Program output: -9                 
Correct output: 18                  | Program output: 98                 
Correct output: -5                  | Program output: 47                 
Correct output: 100                 | Program output: 100                
Correct output: -19                 | Program output: -19                
Correct output: -31                 | Program output: -31                
Correct output: 10                  | Program output: 10                 
Correct output: 47                  | Program output: 47                 
Correct output: 17                  | Program output: 87                 
Correct output: 1                   | Program output: 29                 
Correct output: 0                   | Program output: 67                 
Correct output: 14                  | Program output: 40                 
Correct output: 7                   | Program output: 60                 
Correct output: 1                   | Program output: 1                  
Correct output: 36                  | Program output: 44                 
Correct output: 14                  | Program output: 30                 
Correct output: 13                  | Program output: 57                 
Correct output: 1                   | Program output: 76                 
Correct output: 20                  | Program output: 56                 
Correct output: 28                  | Program output: 66                 
Correct output: 22                  | Program output: 22                 
Correct output: 19                  | Program output: 19                 
Correct output: 33                  | Program output: 33                 
Correct output: 14                  | Program output: 44                 
Correct output: 23                  | Program output: 27                 
Correct output: 0                   | Program output: 0                  
Correct output: 16                  | Program output: 16                 
Correct output: 4                   | Program output: 30                 
Correct output: -87                 | Program output: 15                 
Correct output: -21                 | Program output: 10                 
Correct output: -94                 | Program output: -48                
Correct output: -99                 | Program output: 72                 
Correct output: -65                 | Program output: -60                
Correct output: -65                 | Program output: -65                
Correct output: -81                 | Program output: -81                
Correct output: -99                 | Program output: -16                
Correct output: -86                 | Program output: -81                
Correct output: -30                 | Program output: 25                 
Correct output: 15                  | Program output: 15                 
Correct output: -46                 | Program output: -7                 
Correct output: 8                   | Program output: 42                 
Correct output: 16                  | Program output: 16                 
Correct output: -48                 | Program output: 22                 
Correct output: -79                 | Program output: -79                
Correct output: -91                 | Program output: 52                 
Correct output: -82                 | Program output: -80                
Correct output: -55                 | Program output: 37                 
Correct output: -51                 | Program output: -9                 
Correct output: -40                 | Program output: -24                
Correct output: -26                 | Program output: 14                 
Correct output: -65                 | Program output: -21                
Correct output: -71                 | Program output: 31                 
Correct output: -40                 | Program output: 54                 
Correct output: -84                 | Program output: 69                 
Correct output: -87                 | Program output: 22                 
Correct output: -56                 | Program output: -22                
Correct output: -43                 | Program output: -43                
Correct output: -61                 | Program output: -61                
Correct output: -25                 | Program output: 84                 
Correct output: -67                 | Program output: 92                 
Correct output: 46                  | Program output: 69                 
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: 72                 
Correct output: 15                  | Program output: 15                 
Correct output: -78                 | Program output: 69                 
Correct output: -99                 | Program output: -99                
Correct output: 7                   | Program output: 64                 
Correct output: -52                 | Program output: -52                
Correct output: -21                 | Program output: -21                
Correct output: -48                 | Program output: 28                 
Correct output: -89                 | Program output: 47                 
Correct output: 28                  | Program output: 48                 
Correct output: 26                  | Program output: 51                 
Correct output: -88                 | Program output: -88                
Correct output: -99                 | Program output: -99                
Correct output: -83                 | Program output: -83                
Correct output: -89                 | Program output: 48                 
Correct output: -88                 | Program output: 11                 
Correct output: -57                 | Program output: -57                
Correct output: -74                 | Program output: -50                
Correct output: -64                 | Program output: 14                 
Correct output: -93                 | Program output: 7                  
Correct output: -73                 | Program output: -9                 
Correct output: -88                 | Program output: -88                
Correct output: -39                 | Program output: 16                 
Correct output: -48                 | Program output: 86                 
Correct output: -79                 | Program output: 25                 
Correct output: 13                  | Program output: 87                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction print_integer} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_min} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction 78} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_shove} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_eq} {:close 1, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction tag_exec_279} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_or} {:close 2, :instruction boolean_yankdup} {:close 2, :instruction exec_k} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_rot} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_yank} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_if} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_or} {:close 1, :instruction integer_dec} {:close 1, :instruction in2} {:close 0, :instruction exec_flush} {:close 0, :instruction tagged_317} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction tag_exec_464} {:close 0, :instruction integer_min} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_when} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gte} {:close 1, :instruction in4} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yankdup})
Lexicase best program: (print_integer integer_empty integer_min integer_rot integer_dup_times integer_stackdepth boolean_frominteger 78 integer_yank integer_dup_times boolean_eq integer_shove integer_fromboolean integer_min integer_fromboolean print_boolean boolean_stackdepth exec_rot (integer_shove integer_inc exec_s_when_autoconstructing (exec_yankdup integer_eq in3) (print_integer) (exec_do*while (tag_exec_279 (exec_s (boolean_or boolean_yankdup) () (exec_k () () boolean_stackdepth exec_empty exec_rot () (integer_dec) (exec_s_when_autoconstructing (boolean_yank) (integer_yank) (boolean_yankdup print_boolean) exec_if (exec_s_when_autoconstructing (integer_shove integer_shove integer_lt) (exec_yankdup in2) (boolean_yankdup) integer_stackdepth integer_gt) (integer_dup_items print_boolean boolean_or) integer_dec) in2) exec_flush tagged_317 exec_dup_times (integer_shove integer_empty integer_div exec_do*while (boolean_dup_items tag_exec_464 () integer_min integer_inc exec_when (integer_swap boolean_empty integer_gte in4) exec_dup (exec_swap (integer_gt boolean_yankdup) ()))))))) () ())
Lexicase best errors: [0 1 0 0 1 1 1 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 107
Percent parens: 0.299
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction print_integer} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_min} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction 78} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_shove} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_eq} {:close 1, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction tag_exec_279} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_or} {:close 2, :instruction boolean_yankdup} {:close 2, :instruction exec_k} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_rot} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_yank} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_if} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_or} {:close 1, :instruction integer_dec} {:close 1, :instruction in2} {:close 0, :instruction exec_flush} {:close 0, :instruction tagged_317} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction tag_exec_464} {:close 0, :instruction integer_min} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_when} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gte} {:close 1, :instruction in4} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yankdup})
Zero cases best program: (print_integer integer_empty integer_min integer_rot integer_dup_times integer_stackdepth boolean_frominteger 78 integer_yank integer_dup_times boolean_eq integer_shove integer_fromboolean integer_min integer_fromboolean print_boolean boolean_stackdepth exec_rot (integer_shove integer_inc exec_s_when_autoconstructing (exec_yankdup integer_eq in3) (print_integer) (exec_do*while (tag_exec_279 (exec_s (boolean_or boolean_yankdup) () (exec_k () () boolean_stackdepth exec_empty exec_rot () (integer_dec) (exec_s_when_autoconstructing (boolean_yank) (integer_yank) (boolean_yankdup print_boolean) exec_if (exec_s_when_autoconstructing (integer_shove integer_shove integer_lt) (exec_yankdup in2) (boolean_yankdup) integer_stackdepth integer_gt) (integer_dup_items print_boolean boolean_or) integer_dec) in2) exec_flush tagged_317 exec_dup_times (integer_shove integer_empty integer_div exec_do*while (boolean_dup_items tag_exec_464 () integer_min integer_inc exec_when (integer_swap boolean_empty integer_gte in4) exec_dup (exec_swap (integer_gt boolean_yankdup) ()))))))) () ())
Zero cases best errors: [0 1 0 0 1 1 1 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 107
Percent parens: 0.299
--- Lexicase Population Statistics ---
Count of elite individuals by case: (232 1 512 232 339 339 1 232 852 339)
Population mean number of elite cases: 3.08
Count of perfect (error zero) individuals by case: (232 1 512 232 339 339 1 232 852 339)
Population mean number of perfect (error zero) cases: 3.08
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction print_integer} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_min} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction 78} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_shove} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_eq} {:close 1, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction tag_exec_279} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_yankdup} {:close 2, :instruction exec_k} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_rot} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_yank} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_if} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_or} {:close 1, :instruction integer_dec} {:close 1, :instruction in2} {:close 0, :instruction exec_flush} {:close 0, :instruction tagged_317} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction tag_exec_464} {:close 0, :instruction integer_min} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_when} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_when})
Best program: (print_integer integer_empty integer_min integer_rot integer_dup_times exec_when (boolean_frominteger 78 integer_yank integer_dup_times integer_gte integer_shove) integer_fromboolean integer_min integer_fromboolean print_boolean boolean_stackdepth exec_rot (integer_shove integer_inc exec_s_when_autoconstructing (exec_yankdup integer_eq in3) (print_integer) (exec_do*while (tag_exec_279 (exec_s (print_integer boolean_yankdup) () (exec_k () () boolean_stackdepth exec_empty exec_rot () (integer_dec) (exec_s_when_autoconstructing (boolean_yank) (integer_yank) (boolean_yankdup print_boolean) exec_if (exec_s_when_autoconstructing (integer_shove integer_shove integer_lt) (exec_yankdup in2) (boolean_yankdup) integer_stackdepth integer_gt) (integer_dup_items print_boolean boolean_or) integer_dec) in2) exec_flush tagged_317 exec_dup_times (integer_shove integer_empty integer_div exec_do*while (boolean_dup_items tag_exec_464 () integer_min integer_inc exec_when (integer_swap boolean_empty integer_gte integer_fromboolean) exec_dup (exec_swap (integer_gt exec_when ()) ()))))))) () ())
Errors: [0 1 0 0 1 1 1 0 0 1]
Total: 5
Mean: 0.5
Genome size: 75
Size: 109
Percent parens: 0.312
--- Population Statistics ---
Average total errors in population: 6.921
Median total errors in population: 6
Error averages by case: (0.768 0.999 0.488 0.768 0.661 0.661 0.999 0.768 0.148 0.661)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 58.268
Average program size in population (points): 82.183
Average percent parens in population: 0.281
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 2.997
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 81
Genome diversity (% unique genomes):	 0.746
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 82
Syntactic diversity (% unique Push programs):	 0.74
Total error diversity:				 0.006
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.056
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1328376
--- Timings ---
Current time: 1559314642021 milliseconds
Total Time:           8.7 seconds
Initialization:       0.1 seconds,  1.3%
Reproduction:         5.2 seconds, 59.3%
Fitness Testing:      2.7 seconds, 31.0%
Report:               0.7 seconds,  8.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 665
Test mean error for best: 0.66500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -74                 | Program output: -74                
Correct output: -23                 | Program output: -23                
Correct output: -21                 | Program output: -11                
Correct output: -24                 | Program output: -24                
Correct output: -58                 | Program output: -58                
Correct output: -50                 | Program output: 43                 
Correct output: 14                  | Program output: 14                 
Correct output: -9                  | Program output: -9                 
Correct output: 18                  | Program output: 98                 
Correct output: -5                  | Program output: 47                 
Correct output: 100                 | Program output: 100                
Correct output: -19                 | Program output: -19                
Correct output: -31                 | Program output: -31                
Correct output: 10                  | Program output: 10                 
Correct output: 47                  | Program output: 47                 
Correct output: 17                  | Program output: 87                 
Correct output: 1                   | Program output: 29                 
Correct output: 0                   | Program output: 67                 
Correct output: 14                  | Program output: 40                 
Correct output: 7                   | Program output: 60                 
Correct output: 1                   | Program output: 1                  
Correct output: 36                  | Program output: 44                 
Correct output: 14                  | Program output: 30                 
Correct output: 13                  | Program output: 57                 
Correct output: 1                   | Program output: 76                 
Correct output: 20                  | Program output: 56                 
Correct output: 28                  | Program output: 66                 
Correct output: 22                  | Program output: 22                 
Correct output: 19                  | Program output: 19                 
Correct output: 33                  | Program output: 33                 
Correct output: 14                  | Program output: 44                 
Correct output: 23                  | Program output: 27                 
Correct output: 0                   | Program output: 0                  
Correct output: 16                  | Program output: 16                 
Correct output: 4                   | Program output: 30                 
Correct output: -87                 | Program output: 15                 
Correct output: -21                 | Program output: 10                 
Correct output: -94                 | Program output: -48                
Correct output: -99                 | Program output: 72                 
Correct output: -65                 | Program output: -60                
Correct output: -65                 | Program output: -65                
Correct output: -81                 | Program output: -81                
Correct output: -99                 | Program output: -16                
Correct output: -86                 | Program output: -81                
Correct output: -30                 | Program output: 25                 
Correct output: 15                  | Program output: 15                 
Correct output: -46                 | Program output: -7                 
Correct output: 8                   | Program output: 42                 
Correct output: 16                  | Program output: 16                 
Correct output: -48                 | Program output: 22                 
Correct output: -79                 | Program output: -79                
Correct output: -91                 | Program output: 52                 
Correct output: -82                 | Program output: -80                
Correct output: -55                 | Program output: 37                 
Correct output: -51                 | Program output: -9                 
Correct output: -40                 | Program output: -24                
Correct output: -26                 | Program output: 14                 
Correct output: -65                 | Program output: -21                
Correct output: -71                 | Program output: 31                 
Correct output: -40                 | Program output: 54                 
Correct output: -84                 | Program output: 69                 
Correct output: -87                 | Program output: 22                 
Correct output: -56                 | Program output: -22                
Correct output: -43                 | Program output: -43                
Correct output: -61                 | Program output: -61                
Correct output: -25                 | Program output: 84                 
Correct output: -67                 | Program output: 92                 
Correct output: 46                  | Program output: 69                 
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: 72                 
Correct output: 15                  | Program output: 15                 
Correct output: -78                 | Program output: 69                 
Correct output: -99                 | Program output: -99                
Correct output: 7                   | Program output: 64                 
Correct output: -52                 | Program output: -52                
Correct output: -21                 | Program output: -21                
Correct output: -48                 | Program output: 28                 
Correct output: -89                 | Program output: 47                 
Correct output: 28                  | Program output: 48                 
Correct output: 26                  | Program output: 51                 
Correct output: -88                 | Program output: -88                
Correct output: -99                 | Program output: -99                
Correct output: -83                 | Program output: -83                
Correct output: -89                 | Program output: 48                 
Correct output: -88                 | Program output: 11                 
Correct output: -57                 | Program output: -57                
Correct output: -74                 | Program output: -50                
Correct output: -64                 | Program output: 14                 
Correct output: -93                 | Program output: 7                  
Correct output: -73                 | Program output: -9                 
Correct output: -88                 | Program output: -88                
Correct output: -39                 | Program output: 16                 
Correct output: -48                 | Program output: 86                 
Correct output: -79                 | Program output: 25                 
Correct output: 13                  | Program output: 87                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction print_integer} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_min} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction 78} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_shove} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_shove} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_eq} {:close 1, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction tag_exec_279} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_or} {:close 2, :instruction boolean_yankdup} {:close 2, :instruction exec_k} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_rot} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_yank} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_if} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_or} {:close 1, :instruction integer_dec} {:close 1, :instruction in2} {:close 0, :instruction exec_flush} {:close 0, :instruction tagged_317} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction tag_exec_464} {:close 0, :instruction integer_min} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_when} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yankdup})
Lexicase best program: (print_integer integer_empty integer_min integer_rot integer_dup_times exec_when (boolean_frominteger 78 integer_yank integer_dup_times integer_gte integer_shove) integer_fromboolean integer_min integer_fromboolean print_boolean boolean_stackdepth exec_rot (integer_dup_times integer_gte integer_shove) (integer_fromboolean) () integer_min integer_fromboolean print_boolean boolean_stackdepth exec_rot (integer_shove integer_inc exec_s_when_autoconstructing (exec_yankdup integer_eq in3) (print_integer) (exec_do*while (tag_exec_279 (exec_s (boolean_or boolean_yankdup) () (exec_k () () boolean_stackdepth exec_empty exec_rot () (integer_dec) (exec_s_when_autoconstructing (boolean_yank) (integer_yank) (boolean_yankdup print_boolean) exec_if (exec_s_when_autoconstructing (integer_shove integer_shove integer_lt) (exec_yankdup in2) (boolean_yankdup) integer_stackdepth integer_gt) (integer_dup_items print_boolean boolean_or) integer_dec) in2) exec_flush tagged_317 exec_dup_times (integer_shove integer_empty integer_div exec_do*while (boolean_dup_items tag_exec_464 () integer_min integer_inc exec_when (integer_swap boolean_empty integer_gte integer_fromboolean) exec_dup (exec_swap (integer_gt boolean_yankdup) ()))))))) () ())
Lexicase best errors: [0 0 0 0 0 1 1 0 1 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 120
Percent parens: 0.300
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction print_integer} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_min} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction 78} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_shove} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_shove} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_eq} {:close 1, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction tag_exec_279} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_or} {:close 2, :instruction boolean_yankdup} {:close 2, :instruction exec_k} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_rot} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_yank} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_if} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_or} {:close 1, :instruction integer_dec} {:close 1, :instruction in2} {:close 0, :instruction exec_flush} {:close 0, :instruction tagged_317} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction tag_exec_464} {:close 0, :instruction integer_min} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_when} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yankdup})
Zero cases best program: (print_integer integer_empty integer_min integer_rot integer_dup_times exec_when (boolean_frominteger 78 integer_yank integer_dup_times integer_gte integer_shove) integer_fromboolean integer_min integer_fromboolean print_boolean boolean_stackdepth exec_rot (integer_dup_times integer_gte integer_shove) (integer_fromboolean) () integer_min integer_fromboolean print_boolean boolean_stackdepth exec_rot (integer_shove integer_inc exec_s_when_autoconstructing (exec_yankdup integer_eq in3) (print_integer) (exec_do*while (tag_exec_279 (exec_s (boolean_or boolean_yankdup) () (exec_k () () boolean_stackdepth exec_empty exec_rot () (integer_dec) (exec_s_when_autoconstructing (boolean_yank) (integer_yank) (boolean_yankdup print_boolean) exec_if (exec_s_when_autoconstructing (integer_shove integer_shove integer_lt) (exec_yankdup in2) (boolean_yankdup) integer_stackdepth integer_gt) (integer_dup_items print_boolean boolean_or) integer_dec) in2) exec_flush tagged_317 exec_dup_times (integer_shove integer_empty integer_div exec_do*while (boolean_dup_items tag_exec_464 () integer_min integer_inc exec_when (integer_swap boolean_empty integer_gte integer_fromboolean) exec_dup (exec_swap (integer_gt boolean_yankdup) ()))))))) () ())
Zero cases best errors: [0 0 0 0 0 1 1 0 1 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 120
Percent parens: 0.300
--- Lexicase Population Statistics ---
Count of elite individuals by case: (380 873 381 381 872 284 287 884 1000 1000)
Population mean number of elite cases: 6.34
Count of perfect (error zero) individuals by case: (380 873 381 381 872 284 287 884 0 0)
Population mean number of perfect (error zero) cases: 4.34
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction print_integer} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_min} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction 78} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_shove} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_eq} {:close 1, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction tag_exec_279} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_or} {:close 2, :instruction boolean_yankdup} {:close 2, :instruction exec_k} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_rot} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_yank} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_dec} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction tag_boolean_648} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_not})
Best program: (print_integer integer_empty integer_min integer_rot integer_dup_times exec_when (boolean_frominteger 78 integer_yank integer_dup_times integer_gte integer_shove) integer_fromboolean integer_min integer_fromboolean print_boolean boolean_stackdepth exec_rot (integer_shove integer_inc exec_s_when_autoconstructing (exec_yankdup integer_eq in3) (print_integer) (exec_do*while (tag_exec_279 (exec_s (boolean_or boolean_yankdup) () (exec_k () () boolean_stackdepth exec_empty exec_rot () (integer_dec) (exec_s_when_autoconstructing (boolean_yank) (integer_fromboolean) (exec_k_when_autoconstructing (exec_dup (boolean_eq boolean_invert_first_then_and) exec_pop (boolean_frominteger boolean_not integer_mult) exec_y_when_autoconstructing (integer_dec) boolean_eq) (exec_s_when_autoconstructing (boolean_shove exec_do*range (boolean_frominteger boolean_flush exec_rot (integer_fromboolean tag_boolean_648 in3 in2 boolean_and) (exec_while (integer_div boolean_not)) ())) () ())))))))) () ())
Errors: [0 0 0 0 0 1 1 0 1 1]
Total: 4
Mean: 0.4
Genome size: 63
Size: 97
Percent parens: 0.351
--- Population Statistics ---
Average total errors in population: 5.658
Median total errors in population: 5
Error averages by case: (0.62 0.127 0.619 0.619 0.128 0.716 0.713 0.116 1.0 1.0)
Error minima by case: (0 0 0 0 0 0 0 0 1 1)
Average genome size in population (length): 64.258
Average program size in population (points): 94.882
Average percent parens in population: 0.321
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.222
Median age in population: 4.25
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 84
Genome diversity (% unique genomes):	 0.793
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 85
Syntactic diversity (% unique Push programs):	 0.786
Total error diversity:				 0.006
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.049
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 1878048
--- Timings ---
Current time: 1559314645392 milliseconds
Total Time:          12.1 seconds
Initialization:       0.1 seconds,  0.9%
Reproduction:         7.6 seconds, 62.9%
Fitness Testing:      3.3 seconds, 27.2%
Report:               1.1 seconds,  9.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 645
Test mean error for best: 0.64500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -74                 | Program output: -74                
Correct output: -23                 | Program output: -23                
Correct output: -21                 | Program output: -21                
Correct output: -24                 | Program output: -24                
Correct output: -58                 | Program output: -58                
Correct output: -50                 | Program output: -50                
Correct output: 14                  | Program output: 33                 
Correct output: -9                  | Program output: -9                 
Correct output: 18                  | Program output: 98                 
Correct output: -5                  | Program output: -5                 
Correct output: 100                 | Program output: 100                
Correct output: -19                 | Program output: -19                
Correct output: -31                 | Program output: -31                
Correct output: 10                  | Program output: 10                 
Correct output: 47                  | Program output: 47                 
Correct output: 17                  | Program output: 34                 
Correct output: 1                   | Program output: 1                  
Correct output: 0                   | Program output: 20                 
Correct output: 14                  | Program output: 57                 
Correct output: 7                   | Program output: 28                 
Correct output: 1                   | Program output: 46                 
Correct output: 36                  | Program output: 36                 
Correct output: 14                  | Program output: 59                 
Correct output: 13                  | Program output: 13                 
Correct output: 1                   | Program output: 1                  
Correct output: 20                  | Program output: 61                 
Correct output: 28                  | Program output: 41                 
Correct output: 22                  | Program output: 22                 
Correct output: 19                  | Program output: 45                 
Correct output: 33                  | Program output: 73                 
Correct output: 14                  | Program output: 14                 
Correct output: 23                  | Program output: 23                 
Correct output: 0                   | Program output: 20                 
Correct output: 16                  | Program output: 85                 
Correct output: 4                   | Program output: 74                 
Correct output: -87                 | Program output: 78                 
Correct output: -21                 | Program output: -21                
Correct output: -94                 | Program output: -94                
Correct output: -99                 | Program output: -99                
Correct output: -65                 | Program output: -65                
Correct output: -65                 | Program output: 52                 
Correct output: -81                 | Program output: -52                
Correct output: -99                 | Program output: 36                 
Correct output: -86                 | Program output: -86                
Correct output: -30                 | Program output: -30                
Correct output: 15                  | Program output: 53                 
Correct output: -46                 | Program output: 57                 
Correct output: 8                   | Program output: 36                 
Correct output: 16                  | Program output: 52                 
Correct output: -48                 | Program output: 73                 
Correct output: -79                 | Program output: -1                 
Correct output: -91                 | Program output: -91                
Correct output: -82                 | Program output: -46                
Correct output: -55                 | Program output: -9                 
Correct output: -51                 | Program output: 35                 
Correct output: -40                 | Program output: -9                 
Correct output: -26                 | Program output: 82                 
Correct output: -65                 | Program output: -41                
Correct output: -71                 | Program output: -51                
Correct output: -40                 | Program output: -40                
Correct output: -84                 | Program output: -43                
Correct output: -87                 | Program output: 21                 
Correct output: -56                 | Program output: -56                
Correct output: -43                 | Program output: -9                 
Correct output: -61                 | Program output: 75                 
Correct output: -25                 | Program output: 75                 
Correct output: -67                 | Program output: -67                
Correct output: 46                  | Program output: 86                 
Correct output: -53                 | Program output: 85                 
Correct output: -55                 | Program output: -33                
Correct output: 15                  | Program output: 41                 
Correct output: -78                 | Program output: -30                
Correct output: -99                 | Program output: -36                
Correct output: 7                   | Program output: 7                  
Correct output: -52                 | Program output: -43                
Correct output: -21                 | Program output: 37                 
Correct output: -48                 | Program output: 35                 
Correct output: -89                 | Program output: -89                
Correct output: 28                  | Program output: 28                 
Correct output: 26                  | Program output: 65                 
Correct output: -88                 | Program output: -42                
Correct output: -99                 | Program output: -54                
Correct output: -83                 | Program output: 58                 
Correct output: -89                 | Program output: 26                 
Correct output: -88                 | Program output: 10                 
Correct output: -57                 | Program output: 59                 
Correct output: -74                 | Program output: -65                
Correct output: -64                 | Program output: -64                
Correct output: -93                 | Program output: 69                 
Correct output: -73                 | Program output: 22                 
Correct output: -88                 | Program output: 73                 
Correct output: -39                 | Program output: 29                 
Correct output: -48                 | Program output: -48                
Correct output: -79                 | Program output: -74                
Correct output: 13                  | Program output: 57                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction print_integer} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_min} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction 78} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_shove} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_eq} {:close 1, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction tag_exec_279} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_or} {:close 2, :instruction boolean_yankdup} {:close 2, :instruction exec_k} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_rot} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_yank} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_dec} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_dup_items} {:close 0, :instruction tag_boolean_648} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_not})
Lexicase best program: (print_integer integer_empty integer_min integer_rot integer_dup_times exec_when (boolean_frominteger 78 integer_yank integer_dup_times integer_gte integer_shove) integer_fromboolean integer_min integer_fromboolean print_boolean boolean_stackdepth exec_rot (integer_shove integer_inc exec_s_when_autoconstructing (exec_yankdup integer_eq in3) (print_integer) (exec_do*while (tag_exec_279 (exec_s (boolean_or boolean_yankdup) () (exec_k () () boolean_stackdepth exec_empty exec_rot () (integer_dec) (exec_s_when_autoconstructing (boolean_yank) (integer_yank) (boolean_yankdup print_boolean) integer_flush exec_s_when_autoconstructing (integer_shove integer_shove integer_lt) (exec_yankdup in2) (integer_fromboolean) exec_k_when_autoconstructing (exec_dup (boolean_rot boolean_invert_first_then_and) exec_pop (boolean_frominteger boolean_not integer_mult) exec_y_when_autoconstructing (integer_dec) boolean_eq) (exec_s_when_autoconstructing (boolean_shove exec_do*range (boolean_frominteger boolean_flush exec_rot (integer_dup_items tag_boolean_648 in3 in2 boolean_and) (exec_while (integer_div boolean_not)) ())) () ()))))))) () ())
Lexicase best errors: [0 1 1 0 1 1 0 0 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 110
Percent parens: 0.336
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction print_integer} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_min} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction 78} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_shove} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_eq} {:close 1, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction tag_exec_279} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_or} {:close 2, :instruction boolean_yankdup} {:close 2, :instruction exec_k} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_rot} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_yank} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_dec} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_dup_items} {:close 0, :instruction tag_boolean_648} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_not})
Zero cases best program: (print_integer integer_empty integer_min integer_rot integer_dup_times exec_when (boolean_frominteger 78 integer_yank integer_dup_times integer_gte integer_shove) integer_fromboolean integer_min integer_fromboolean print_boolean boolean_stackdepth exec_rot (integer_shove integer_inc exec_s_when_autoconstructing (exec_yankdup integer_eq in3) (print_integer) (exec_do*while (tag_exec_279 (exec_s (boolean_or boolean_yankdup) () (exec_k () () boolean_stackdepth exec_empty exec_rot () (integer_dec) (exec_s_when_autoconstructing (boolean_yank) (integer_yank) (boolean_yankdup print_boolean) integer_flush exec_s_when_autoconstructing (integer_shove integer_shove integer_lt) (exec_yankdup in2) (integer_fromboolean) exec_k_when_autoconstructing (exec_dup (boolean_rot boolean_invert_first_then_and) exec_pop (boolean_frominteger boolean_not integer_mult) exec_y_when_autoconstructing (integer_dec) boolean_eq) (exec_s_when_autoconstructing (boolean_shove exec_do*range (boolean_frominteger boolean_flush exec_rot (integer_dup_items tag_boolean_648 in3 in2 boolean_and) (exec_while (integer_div boolean_not)) ())) () ()))))))) () ())
Zero cases best errors: [0 1 1 0 1 1 0 0 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 110
Percent parens: 0.336
--- Lexicase Population Statistics ---
Count of elite individuals by case: (538 332 332 538 331 1 870 538 1000 1000)
Population mean number of elite cases: 5.48
Count of perfect (error zero) individuals by case: (538 332 332 538 331 1 870 538 0 0)
Population mean number of perfect (error zero) cases: 3.48
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_when} {:close 2, :instruction exec_shove} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction boolean_swap} {:close 1, :instruction integer_gt})
Best program: (integer_min in3 boolean_not boolean_flush exec_rot (integer_stackdepth) (exec_swap (integer_dup_items print_integer boolean_eq exec_when (exec_shove ()) exec_yank) (boolean_invert_second_then_and in2 in2 boolean_swap) integer_gt) ())
Errors: [1 0 0 1 0 1 0 1 1 1]
Total: 6
Mean: 0.6
Genome size: 18
Size: 26
Percent parens: 0.308
--- Population Statistics ---
Average total errors in population: 6.52
Median total errors in population: 6
Error averages by case: (0.462 0.668 0.668 0.462 0.669 0.999 0.13 0.462 1.0 1.0)
Error minima by case: (0 0 0 0 0 0 0 0 1 1)
Average genome size in population (length): 61.69
Average program size in population (points): 90.163
Average percent parens in population: 0.314
Minimum age in population: 4.0
Maximum age in population: 7.625
Average age in population: 5.88625
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 46
Genome diversity (% unique genomes):	 0.848
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 48
Syntactic diversity (% unique Push programs):	 0.845
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.041
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 2294950
--- Timings ---
Current time: 1559314648278 milliseconds
Total Time:          15.0 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         9.8 seconds, 64.9%
Fitness Testing:      3.7 seconds, 24.7%
Report:               1.5 seconds,  9.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 665
Test mean error for best: 0.66500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -74                 | Program output: -74                
Correct output: -23                 | Program output: -23                
Correct output: -21                 | Program output: -11                
Correct output: -24                 | Program output: -24                
Correct output: -58                 | Program output: -58                
Correct output: -50                 | Program output: 43                 
Correct output: 14                  | Program output: 14                 
Correct output: -9                  | Program output: -9                 
Correct output: 18                  | Program output: 98                 
Correct output: -5                  | Program output: 47                 
Correct output: 100                 | Program output: 100                
Correct output: -19                 | Program output: -19                
Correct output: -31                 | Program output: -31                
Correct output: 10                  | Program output: 10                 
Correct output: 47                  | Program output: 47                 
Correct output: 17                  | Program output: 87                 
Correct output: 1                   | Program output: 29                 
Correct output: 0                   | Program output: 67                 
Correct output: 14                  | Program output: 40                 
Correct output: 7                   | Program output: 60                 
Correct output: 1                   | Program output: 1                  
Correct output: 36                  | Program output: 44                 
Correct output: 14                  | Program output: 30                 
Correct output: 13                  | Program output: 57                 
Correct output: 1                   | Program output: 76                 
Correct output: 20                  | Program output: 56                 
Correct output: 28                  | Program output: 66                 
Correct output: 22                  | Program output: 22                 
Correct output: 19                  | Program output: 19                 
Correct output: 33                  | Program output: 33                 
Correct output: 14                  | Program output: 44                 
Correct output: 23                  | Program output: 27                 
Correct output: 0                   | Program output: 0                  
Correct output: 16                  | Program output: 16                 
Correct output: 4                   | Program output: 30                 
Correct output: -87                 | Program output: 15                 
Correct output: -21                 | Program output: 10                 
Correct output: -94                 | Program output: -48                
Correct output: -99                 | Program output: 72                 
Correct output: -65                 | Program output: -60                
Correct output: -65                 | Program output: -65                
Correct output: -81                 | Program output: -81                
Correct output: -99                 | Program output: -16                
Correct output: -86                 | Program output: -81                
Correct output: -30                 | Program output: 25                 
Correct output: 15                  | Program output: 15                 
Correct output: -46                 | Program output: -7                 
Correct output: 8                   | Program output: 42                 
Correct output: 16                  | Program output: 16                 
Correct output: -48                 | Program output: 22                 
Correct output: -79                 | Program output: -79                
Correct output: -91                 | Program output: 52                 
Correct output: -82                 | Program output: -80                
Correct output: -55                 | Program output: 37                 
Correct output: -51                 | Program output: -9                 
Correct output: -40                 | Program output: -24                
Correct output: -26                 | Program output: 14                 
Correct output: -65                 | Program output: -21                
Correct output: -71                 | Program output: 31                 
Correct output: -40                 | Program output: 54                 
Correct output: -84                 | Program output: 69                 
Correct output: -87                 | Program output: 22                 
Correct output: -56                 | Program output: -22                
Correct output: -43                 | Program output: -43                
Correct output: -61                 | Program output: -61                
Correct output: -25                 | Program output: 84                 
Correct output: -67                 | Program output: 92                 
Correct output: 46                  | Program output: 69                 
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: 72                 
Correct output: 15                  | Program output: 15                 
Correct output: -78                 | Program output: 69                 
Correct output: -99                 | Program output: -99                
Correct output: 7                   | Program output: 64                 
Correct output: -52                 | Program output: -52                
Correct output: -21                 | Program output: -21                
Correct output: -48                 | Program output: 28                 
Correct output: -89                 | Program output: 47                 
Correct output: 28                  | Program output: 48                 
Correct output: 26                  | Program output: 51                 
Correct output: -88                 | Program output: -88                
Correct output: -99                 | Program output: -99                
Correct output: -83                 | Program output: -83                
Correct output: -89                 | Program output: 48                 
Correct output: -88                 | Program output: 11                 
Correct output: -57                 | Program output: -57                
Correct output: -74                 | Program output: -50                
Correct output: -64                 | Program output: 14                 
Correct output: -93                 | Program output: 7                  
Correct output: -73                 | Program output: -9                 
Correct output: -88                 | Program output: -88                
Correct output: -39                 | Program output: 16                 
Correct output: -48                 | Program output: 86                 
Correct output: -79                 | Program output: 25                 
Correct output: 13                  | Program output: 87                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction print_integer} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_min} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction 78} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_shove} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_eq} {:close 1, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction tag_exec_279} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_or} {:close 2, :instruction boolean_yankdup} {:close 2, :instruction exec_k} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_rot} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_if} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_min} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_eq} {:close 1, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_dup_items} {:close 1, :instruction integer_add} {:close 0, :instruction exec_k} {:close 0, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_and})
Lexicase best program: (print_integer integer_empty integer_min integer_rot integer_dup_times exec_when (boolean_frominteger 78 integer_yank integer_dup_times integer_gte integer_shove) integer_fromboolean integer_min integer_fromboolean print_boolean boolean_stackdepth integer_swap integer_shove integer_inc exec_s_when_autoconstructing (exec_yankdup integer_eq in3) (print_integer) (exec_do*while (tag_exec_279 (exec_s (boolean_or boolean_yankdup) () (exec_k () () boolean_stackdepth exec_empty exec_rot () (integer_dec) (exec_s_when_autoconstructing (boolean_yank integer_yank) (boolean_yankdup print_boolean) (exec_if (exec_s_when_autoconstructing (integer_shove integer_shove integer_mult) (integer_eq exec_empty print_boolean integer_min exec_y_when_autoconstructing (integer_yank exec_pop (exec_swap (integer_lte integer_eq in4) (integer_shove boolean_not exec_yank exec_dup_items) integer_add) exec_k (in1 exec_stackdepth in2 boolean_invert_second_then_and integer_fromboolean boolean_eq integer_inc integer_swap exec_flush) (exec_dup_times () exec_do*times (exec_y_when_autoconstructing (integer_empty) boolean_and)))) ()) ())))))))
Lexicase best errors: [1 1 0 1 0 0 1 1 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 108
Percent parens: 0.296
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction print_integer} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_min} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction 78} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_shove} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_eq} {:close 1, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction tag_exec_279} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_or} {:close 2, :instruction boolean_yankdup} {:close 2, :instruction exec_k} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_rot} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_if} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_min} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_eq} {:close 1, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_dup_items} {:close 1, :instruction integer_add} {:close 0, :instruction exec_k} {:close 0, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_and})
Zero cases best program: (print_integer integer_empty integer_min integer_rot integer_dup_times exec_when (boolean_frominteger 78 integer_yank integer_dup_times integer_gte integer_shove) integer_fromboolean integer_min integer_fromboolean print_boolean boolean_stackdepth integer_swap integer_shove integer_inc exec_s_when_autoconstructing (exec_yankdup integer_eq in3) (print_integer) (exec_do*while (tag_exec_279 (exec_s (boolean_or boolean_yankdup) () (exec_k () () boolean_stackdepth exec_empty exec_rot () (integer_dec) (exec_s_when_autoconstructing (boolean_yank integer_yank) (boolean_yankdup print_boolean) (exec_if (exec_s_when_autoconstructing (integer_shove integer_shove integer_mult) (integer_eq exec_empty print_boolean integer_min exec_y_when_autoconstructing (integer_yank exec_pop (exec_swap (integer_lte integer_eq in4) (integer_shove boolean_not exec_yank exec_dup_items) integer_add) exec_k (in1 exec_stackdepth in2 boolean_invert_second_then_and integer_fromboolean boolean_eq integer_inc integer_swap exec_flush) (exec_dup_times () exec_do*times (exec_y_when_autoconstructing (integer_empty) boolean_and)))) ()) ())))))))
Zero cases best errors: [1 1 0 1 0 0 1 1 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 108
Percent parens: 0.296
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 1000 382 159 541 860 159 318 319 382)
Population mean number of elite cases: 5.12
Count of perfect (error zero) individuals by case: (0 0 382 159 541 860 159 318 319 382)
Population mean number of perfect (error zero) cases: 3.12
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction print_integer} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_min} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction 78} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_shove} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_eq} {:close 1, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction tag_exec_279} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_or} {:close 2, :instruction boolean_yankdup} {:close 2, :instruction exec_k} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_rot} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_yank} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_if} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_if} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_or} {:close 1, :instruction integer_dec} {:close 1, :instruction in2} {:close 0, :instruction exec_flush} {:close 0, :instruction tagged_317} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction tag_exec_464} {:close 0, :instruction integer_min} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_when} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gte})
Best program: (print_integer integer_empty integer_min integer_rot integer_dup_times exec_when (boolean_frominteger 78 integer_yank integer_dup_times integer_gte integer_shove) integer_fromboolean integer_min integer_fromboolean print_boolean boolean_stackdepth exec_rot (integer_shove integer_inc exec_s_when_autoconstructing (exec_yankdup integer_eq in3) (print_integer) (exec_do*while (tag_exec_279 (exec_s (boolean_or boolean_yankdup) () (exec_k () () boolean_stackdepth exec_empty exec_rot () (integer_dec) (exec_s_when_autoconstructing (boolean_yank) (integer_yank) (boolean_yankdup print_boolean) exec_if (exec_s_when_autoconstructing (integer_yank) (boolean_yankdup print_boolean) (exec_if (exec_s_when_autoconstructing (integer_shove integer_shove integer_lt) (exec_yankdup in2) (boolean_yankdup) integer_stackdepth integer_gt) (integer_dup_items print_boolean boolean_or) integer_dec) in2) (exec_flush tagged_317 exec_dup_times (integer_shove integer_empty integer_div exec_do*while (boolean_dup_items tag_exec_464 (integer_min integer_inc exec_when (integer_swap boolean_empty integer_gte))))))))))) () ())
Errors: [1 1 0 1 0 0 1 1 1 0]
Total: 6
Mean: 0.6
Genome size: 75
Size: 110
Percent parens: 0.318
--- Population Statistics ---
Average total errors in population: 6.88
Median total errors in population: 6
Error averages by case: (1.0 1.0 0.618 0.841 0.459 0.14 0.841 0.682 0.681 0.618)
Error minima by case: (1 1 0 0 0 0 0 0 0 0)
Average genome size in population (length): 61.566
Average program size in population (points): 90.015
Average percent parens in population: 0.314
Minimum age in population: 5.0
Maximum age in population: 9.125
Average age in population: 7.31825
Median age in population: 7.375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 56
Genome diversity (% unique genomes):	 0.828
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 56
Syntactic diversity (% unique Push programs):	 0.821
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.058
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 2695193
--- Timings ---
Current time: 1559314650935 milliseconds
Total Time:          17.7 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:        11.7 seconds, 66.1%
Fitness Testing:      4.1 seconds, 23.2%
Report:               1.8 seconds, 10.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 664
Test mean error for best: 0.66400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -74                 | Program output: -74                
Correct output: -23                 | Program output: -23                
Correct output: -21                 | Program output: -21                
Correct output: -24                 | Program output: 75                 
Correct output: -58                 | Program output: -58                
Correct output: -50                 | Program output: -50                
Correct output: 14                  | Program output: 33                 
Correct output: -9                  | Program output: -9                 
Correct output: 18                  | Program output: 98                 
Correct output: -5                  | Program output: 47                 
Correct output: 100                 | Program output: 100                
Correct output: -19                 | Program output: -19                
Correct output: -31                 | Program output: -31                
Correct output: 10                  | Program output: 10                 
Correct output: 47                  | Program output: 47                 
Correct output: 17                  | Program output: 17                 
Correct output: 1                   | Program output: 8                  
Correct output: 0                   | Program output: 0                  
Correct output: 14                  | Program output: 35                 
Correct output: 7                   | Program output: 58                 
Correct output: 1                   | Program output: 87                 
Correct output: 36                  | Program output: 69                 
Correct output: 14                  | Program output: 69                 
Correct output: 13                  | Program output: 22                 
Correct output: 1                   | Program output: 38                 
Correct output: 20                  | Program output: 20                 
Correct output: 28                  | Program output: 92                 
Correct output: 22                  | Program output: 88                 
Correct output: 19                  | Program output: 77                 
Correct output: 33                  | Program output: 87                 
Correct output: 14                  | Program output: 95                 
Correct output: 23                  | Program output: 93                 
Correct output: 0                   | Program output: 60                 
Correct output: 16                  | Program output: 86                 
Correct output: 4                   | Program output: 74                 
Correct output: -87                 | Program output: -87                
Correct output: -21                 | Program output: 6                  
Correct output: -94                 | Program output: -31                
Correct output: -99                 | Program output: -12                
Correct output: -65                 | Program output: -39                
Correct output: -65                 | Program output: -35                
Correct output: -81                 | Program output: 37                 
Correct output: -99                 | Program output: 50                 
Correct output: -86                 | Program output: 93                 
Correct output: -30                 | Program output: 29                 
Correct output: 15                  | Program output: 23                 
Correct output: -46                 | Program output: -46                
Correct output: 8                   | Program output: 23                 
Correct output: 16                  | Program output: 55                 
Correct output: -48                 | Program output: 80                 
Correct output: -79                 | Program output: 88                 
Correct output: -91                 | Program output: 58                 
Correct output: -82                 | Program output: -82                
Correct output: -55                 | Program output: -55                
Correct output: -51                 | Program output: -51                
Correct output: -40                 | Program output: -40                
Correct output: -26                 | Program output: -26                
Correct output: -65                 | Program output: -65                
Correct output: -71                 | Program output: -71                
Correct output: -40                 | Program output: 12                 
Correct output: -84                 | Program output: -84                
Correct output: -87                 | Program output: 100                
Correct output: -56                 | Program output: -33                
Correct output: -43                 | Program output: 29                 
Correct output: -61                 | Program output: -15                
Correct output: -25                 | Program output: -25                
Correct output: -67                 | Program output: -43                
Correct output: 46                  | Program output: 46                 
Correct output: -53                 | Program output: 52                 
Correct output: -55                 | Program output: -55                
Correct output: 15                  | Program output: 93                 
Correct output: -78                 | Program output: -78                
Correct output: -99                 | Program output: -78                
Correct output: 7                   | Program output: 24                 
Correct output: -52                 | Program output: -13                
Correct output: -21                 | Program output: 7                  
Correct output: -48                 | Program output: -39                
Correct output: -89                 | Program output: 92                 
Correct output: 28                  | Program output: 83                 
Correct output: 26                  | Program output: 26                 
Correct output: -88                 | Program output: 96                 
Correct output: -99                 | Program output: 21                 
Correct output: -83                 | Program output: 16                 
Correct output: -89                 | Program output: 61                 
Correct output: -88                 | Program output: -66                
Correct output: -57                 | Program output: 19                 
Correct output: -74                 | Program output: -74                
Correct output: -64                 | Program output: 20                 
Correct output: -93                 | Program output: 81                 
Correct output: -73                 | Program output: 67                 
Correct output: -88                 | Program output: 2                  
Correct output: -39                 | Program output: 31                 
Correct output: -48                 | Program output: -45                
Correct output: -79                 | Program output: -79                
Correct output: 13                  | Program output: 13                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_min} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction 78} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_shove} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_eq} {:close 1, :instruction in1} {:close 1, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction tag_exec_279} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_or} {:close 2, :instruction boolean_yankdup} {:close 2, :instruction exec_k} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_if} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_or} {:close 1, :instruction integer_dec} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction tagged_317} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction tag_exec_464} {:close 0, :instruction integer_min} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_when} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yankdup})
Lexicase best program: (print_integer integer_mod integer_min integer_rot integer_dup_times exec_when (boolean_frominteger 78 integer_yank exec_rot (integer_gte integer_shove) (integer_fromboolean) () integer_min integer_fromboolean print_boolean boolean_stackdepth exec_rot (integer_shove integer_inc exec_s_when_autoconstructing (exec_yankdup integer_eq in1) (print_integer) (exec_do*while (tag_exec_279 (exec_s (boolean_or boolean_yankdup) () (exec_k () () boolean_stackdepth exec_empty exec_rot () (boolean_dup_items) (exec_s_when_autoconstructing (exec_dup () integer_yank) (boolean_yankdup print_boolean) (exec_if (exec_s_when_autoconstructing (integer_shove integer_shove integer_lt) (exec_yankdup in2) (boolean_yankdup) integer_stackdepth integer_gt) (integer_dup_items print_boolean boolean_or) integer_dec) boolean_swap) exec_flush tagged_317 exec_dup_times (integer_shove integer_empty integer_add exec_do*while (boolean_dup_items tag_exec_464 () integer_min integer_inc exec_when (integer_swap exec_s (integer_gte integer_fromboolean) (exec_dup (exec_swap (integer_gt boolean_yankdup) ())) ())))))))) () ()))
Lexicase best errors: [1 0 1 1 1 0 1 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 115
Percent parens: 0.348
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_min} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction 78} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_shove} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_eq} {:close 1, :instruction in1} {:close 1, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction tag_exec_279} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_or} {:close 2, :instruction boolean_yankdup} {:close 2, :instruction exec_k} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_if} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_or} {:close 1, :instruction integer_dec} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction tagged_317} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction tag_exec_464} {:close 0, :instruction integer_min} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_when} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yankdup})
Zero cases best program: (print_integer integer_mod integer_min integer_rot integer_dup_times exec_when (boolean_frominteger 78 integer_yank exec_rot (integer_gte integer_shove) (integer_fromboolean) () integer_min integer_fromboolean print_boolean boolean_stackdepth exec_rot (integer_shove integer_inc exec_s_when_autoconstructing (exec_yankdup integer_eq in1) (print_integer) (exec_do*while (tag_exec_279 (exec_s (boolean_or boolean_yankdup) () (exec_k () () boolean_stackdepth exec_empty exec_rot () (boolean_dup_items) (exec_s_when_autoconstructing (exec_dup () integer_yank) (boolean_yankdup print_boolean) (exec_if (exec_s_when_autoconstructing (integer_shove integer_shove integer_lt) (exec_yankdup in2) (boolean_yankdup) integer_stackdepth integer_gt) (integer_dup_items print_boolean boolean_or) integer_dec) boolean_swap) exec_flush tagged_317 exec_dup_times (integer_shove integer_empty integer_add exec_do*while (boolean_dup_items tag_exec_464 () integer_min integer_inc exec_when (integer_swap exec_s (integer_gte integer_fromboolean) (exec_dup (exec_swap (integer_gt boolean_yankdup) ())) ())))))))) () ()))
Zero cases best errors: [1 0 1 1 1 0 1 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 115
Percent parens: 0.348
--- Lexicase Population Statistics ---
Count of elite individuals by case: (317 333 1000 1000 221 333 541 333 333 333)
Population mean number of elite cases: 4.74
Count of perfect (error zero) individuals by case: (317 333 0 0 221 333 541 333 333 333)
Population mean number of perfect (error zero) cases: 2.74
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction print_integer} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_min} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction 78} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in3} {:close 1, :instruction integer_shove} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_eq} {:close 1, :instruction in1} {:close 1, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction tag_exec_279} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_yankdup} {:close 2, :instruction exec_k} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_if} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_or} {:close 1, :instruction integer_dec} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_flush} {:close 1, :instruction tagged_317} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction tag_exec_464} {:close 0, :instruction integer_min} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_when} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yankdup})
Best program: (print_integer integer_empty integer_min integer_rot integer_dup_times exec_when (boolean_frominteger 78 integer_yank integer_dup_times in3 integer_shove) integer_fromboolean integer_min integer_fromboolean print_boolean boolean_stackdepth exec_rot (integer_shove integer_inc exec_s_when_autoconstructing (exec_yankdup integer_eq in1) (print_integer) (exec_do*while (tag_exec_279 (exec_s (boolean_or boolean_yankdup) (exec_k () () boolean_stackdepth exec_empty exec_rot () (integer_dec exec_s_when_autoconstructing (exec_dup () integer_yank) (boolean_yankdup print_boolean) (exec_if (exec_s_when_autoconstructing (integer_shove integer_shove integer_lt) (exec_yankdup in2) (boolean_yankdup) integer_gte integer_gt) (integer_dup_items print_boolean boolean_or) integer_dec) boolean_swap) (exec_flush tagged_317) exec_dup_times (integer_shove integer_empty integer_div exec_do*while (boolean_dup_items tag_exec_464 () integer_min integer_inc exec_when (integer_swap boolean_empty integer_gte integer_fromboolean) exec_dup (exec_swap (integer_gt boolean_yankdup) ())))) ())))) () ())
Errors: [1 0 1 1 1 0 1 0 0 0]
Total: 5
Mean: 0.5
Genome size: 75
Size: 109
Percent parens: 0.312
--- Population Statistics ---
Average total errors in population: 7.256
Median total errors in population: 8
Error averages by case: (0.683 0.667 1.0 1.0 0.779 0.667 0.459 0.667 0.667 0.667)
Error minima by case: (0 0 1 1 0 0 0 0 0 0)
Average genome size in population (length): 63.127
Average program size in population (points): 92.478
Average percent parens in population: 0.315
Minimum age in population: 6.0
Maximum age in population: 10.46875
Average age in population: 8.783625
Median age in population: 8.859375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 43
Genome diversity (% unique genomes):	 0.865
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 43
Syntactic diversity (% unique Push programs):	 0.858
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.05
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 3059851
--- Timings ---
Current time: 1559314653699 milliseconds
Total Time:          20.4 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        13.7 seconds, 67.2%
Fitness Testing:      4.4 seconds, 21.8%
Report:               2.1 seconds, 10.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 665
Test mean error for best: 0.66500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -74                 | Program output: -74                
Correct output: -23                 | Program output: -23                
Correct output: -21                 | Program output: -11                
Correct output: -24                 | Program output: -24                
Correct output: -58                 | Program output: -58                
Correct output: -50                 | Program output: 43                 
Correct output: 14                  | Program output: 14                 
Correct output: -9                  | Program output: -9                 
Correct output: 18                  | Program output: 98                 
Correct output: -5                  | Program output: 47                 
Correct output: 100                 | Program output: 100                
Correct output: -19                 | Program output: -19                
Correct output: -31                 | Program output: -31                
Correct output: 10                  | Program output: 10                 
Correct output: 47                  | Program output: 47                 
Correct output: 17                  | Program output: 87                 
Correct output: 1                   | Program output: 29                 
Correct output: 0                   | Program output: 67                 
Correct output: 14                  | Program output: 40                 
Correct output: 7                   | Program output: 60                 
Correct output: 1                   | Program output: 1                  
Correct output: 36                  | Program output: 44                 
Correct output: 14                  | Program output: 30                 
Correct output: 13                  | Program output: 57                 
Correct output: 1                   | Program output: 76                 
Correct output: 20                  | Program output: 56                 
Correct output: 28                  | Program output: 66                 
Correct output: 22                  | Program output: 22                 
Correct output: 19                  | Program output: 19                 
Correct output: 33                  | Program output: 33                 
Correct output: 14                  | Program output: 44                 
Correct output: 23                  | Program output: 27                 
Correct output: 0                   | Program output: 0                  
Correct output: 16                  | Program output: 16                 
Correct output: 4                   | Program output: 30                 
Correct output: -87                 | Program output: 15                 
Correct output: -21                 | Program output: 10                 
Correct output: -94                 | Program output: -48                
Correct output: -99                 | Program output: 72                 
Correct output: -65                 | Program output: -60                
Correct output: -65                 | Program output: -65                
Correct output: -81                 | Program output: -81                
Correct output: -99                 | Program output: -16                
Correct output: -86                 | Program output: -81                
Correct output: -30                 | Program output: 25                 
Correct output: 15                  | Program output: 15                 
Correct output: -46                 | Program output: -7                 
Correct output: 8                   | Program output: 42                 
Correct output: 16                  | Program output: 16                 
Correct output: -48                 | Program output: 22                 
Correct output: -79                 | Program output: -79                
Correct output: -91                 | Program output: 52                 
Correct output: -82                 | Program output: -80                
Correct output: -55                 | Program output: 37                 
Correct output: -51                 | Program output: -9                 
Correct output: -40                 | Program output: -24                
Correct output: -26                 | Program output: 14                 
Correct output: -65                 | Program output: -21                
Correct output: -71                 | Program output: 31                 
Correct output: -40                 | Program output: 54                 
Correct output: -84                 | Program output: 69                 
Correct output: -87                 | Program output: 22                 
Correct output: -56                 | Program output: -22                
Correct output: -43                 | Program output: -43                
Correct output: -61                 | Program output: -61                
Correct output: -25                 | Program output: 84                 
Correct output: -67                 | Program output: 92                 
Correct output: 46                  | Program output: 69                 
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: 72                 
Correct output: 15                  | Program output: 15                 
Correct output: -78                 | Program output: 69                 
Correct output: -99                 | Program output: -99                
Correct output: 7                   | Program output: 64                 
Correct output: -52                 | Program output: -52                
Correct output: -21                 | Program output: -21                
Correct output: -48                 | Program output: 28                 
Correct output: -89                 | Program output: 47                 
Correct output: 28                  | Program output: 48                 
Correct output: 26                  | Program output: 51                 
Correct output: -88                 | Program output: -88                
Correct output: -99                 | Program output: -99                
Correct output: -83                 | Program output: -83                
Correct output: -89                 | Program output: 48                 
Correct output: -88                 | Program output: 11                 
Correct output: -57                 | Program output: -57                
Correct output: -74                 | Program output: -50                
Correct output: -64                 | Program output: 14                 
Correct output: -93                 | Program output: 7                  
Correct output: -73                 | Program output: -9                 
Correct output: -88                 | Program output: -88                
Correct output: -39                 | Program output: 16                 
Correct output: -48                 | Program output: 86                 
Correct output: -79                 | Program output: 25                 
Correct output: 13                  | Program output: 87                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction print_integer} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_min} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction 78} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_shove} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction tag_exec_279})
Lexicase best program: (print_integer integer_empty integer_min integer_rot integer_dup_times exec_when (boolean_frominteger 78 integer_yank integer_dup_times integer_gte integer_shove) integer_fromboolean integer_min integer_fromboolean print_boolean boolean_stackdepth exec_rot (integer_shove integer_inc exec_s_when_autoconstructing (exec_yankdup boolean_stackdepth in3) (print_integer) (exec_do*while (tag_exec_279 ()))) () ())
Lexicase best errors: [0 0 0 1 0 0 0 1 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 37
Percent parens: 0.270
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction print_integer} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_min} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction 78} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_shove} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction tag_exec_279})
Zero cases best program: (print_integer integer_empty integer_min integer_rot integer_dup_times exec_when (boolean_frominteger 78 integer_yank integer_dup_times integer_gte integer_shove) integer_fromboolean integer_min integer_fromboolean print_boolean boolean_stackdepth exec_rot (integer_shove integer_inc exec_s_when_autoconstructing (exec_yankdup boolean_stackdepth in3) (print_integer) (exec_do*while (tag_exec_279 ()))) () ())
Zero cases best errors: [0 0 0 1 0 0 0 1 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 37
Percent parens: 0.270
--- Lexicase Population Statistics ---
Count of elite individuals by case: (180 180 180 531 180 180 351 704 171 1000)
Population mean number of elite cases: 3.66
Count of perfect (error zero) individuals by case: (180 180 180 531 180 180 351 704 171 0)
Population mean number of perfect (error zero) cases: 2.66
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction print_integer} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_min} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction 78} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_shove} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_eq} {:close 1, :instruction in3} {:close 1, :instruction print_integer} {:close 1, :instruction exec_do*while} {:close 0, :instruction tag_exec_279} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_or} {:close 2, :instruction boolean_yankdup} {:close 2, :instruction exec_k} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_empty} {:close 2, :instruction exec_rot} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_yank} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_if} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_min} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_eq} {:close 1, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_dup_items} {:close 1, :instruction integer_add} {:close 0, :instruction exec_k} {:close 0, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_and})
Best program: (print_integer integer_empty integer_min integer_rot integer_dup_times exec_when (boolean_frominteger 78 integer_yank integer_dup_times integer_gte integer_shove integer_fromboolean) integer_min integer_fromboolean integer_dup boolean_stackdepth exec_rot (integer_shove integer_inc exec_s_when_autoconstructing (exec_yankdup integer_eq in3) (print_integer) (exec_do*while () tag_exec_279 (exec_s (boolean_or boolean_yankdup) () (exec_k () () boolean_stackdepth exec_empty exec_rot () () (integer_dec) exec_s_when_autoconstructing (boolean_yank) (integer_yank) (boolean_yankdup print_boolean) exec_if (exec_s_when_autoconstructing (integer_shove integer_shove integer_lt) (exec_yankdup in2) (integer_mult) integer_eq exec_empty print_boolean integer_min exec_y_when_autoconstructing (integer_yank exec_pop (exec_swap (integer_lte integer_eq in4) (integer_shove boolean_not exec_yank exec_dup_items) integer_add) exec_k (in1 exec_stackdepth in2 boolean_invert_second_then_and exec_shove (boolean_eq integer_inc integer_swap exec_flush) exec_dup_times () exec_do*times (exec_s (integer_empty) (boolean_and) ())) ())) ())))) () ())
Errors: [0 0 0 1 0 0 0 1 1 1]
Total: 4
Mean: 0.4
Genome size: 79
Size: 117
Percent parens: 0.325
--- Population Statistics ---
Average total errors in population: 7.343
Median total errors in population: 8
Error averages by case: (0.82 0.82 0.82 0.469 0.82 0.82 0.649 0.296 0.829 1.0)
Error minima by case: (0 0 0 0 0 0 0 0 0 1)
Average genome size in population (length): 64.406
Average program size in population (points): 94.279
Average percent parens in population: 0.315
Minimum age in population: 7.5
Maximum age in population: 12.109375
Average age in population: 10.27775
Median age in population: 10.328125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 26
Genome diversity (% unique genomes):	 0.886
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 26
Syntactic diversity (% unique Push programs):	 0.883
Total error diversity:				 0.005
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.051
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 3420458
--- Timings ---
Current time: 1559314656532 milliseconds
Total Time:          23.3 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        15.8 seconds, 68.1%
Fitness Testing:      4.8 seconds, 20.7%
Report:               2.5 seconds, 10.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 665
Test mean error for best: 0.66500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -74                 | Program output: -74                
Correct output: -23                 | Program output: -23                
Correct output: -21                 | Program output: -11                
Correct output: -24                 | Program output: -24                
Correct output: -58                 | Program output: -58                
Correct output: -50                 | Program output: 43                 
Correct output: 14                  | Program output: 14                 
Correct output: -9                  | Program output: -9                 
Correct output: 18                  | Program output: 98                 
Correct output: -5                  | Program output: 47                 
Correct output: 100                 | Program output: 100                
Correct output: -19                 | Program output: -19                
Correct output: -31                 | Program output: -31                
Correct output: 10                  | Program output: 10                 
Correct output: 47                  | Program output: 47                 
Correct output: 17                  | Program output: 87                 
Correct output: 1                   | Program output: 29                 
Correct output: 0                   | Program output: 67                 
Correct output: 14                  | Program output: 40                 
Correct output: 7                   | Program output: 60                 
Correct output: 1                   | Program output: 1                  
Correct output: 36                  | Program output: 44                 
Correct output: 14                  | Program output: 30                 
Correct output: 13                  | Program output: 57                 
Correct output: 1                   | Program output: 76                 
Correct output: 20                  | Program output: 56                 
Correct output: 28                  | Program output: 66                 
Correct output: 22                  | Program output: 22                 
Correct output: 19                  | Program output: 19                 
Correct output: 33                  | Program output: 33                 
Correct output: 14                  | Program output: 44                 
Correct output: 23                  | Program output: 27                 
Correct output: 0                   | Program output: 0                  
Correct output: 16                  | Program output: 16                 
Correct output: 4                   | Program output: 30                 
Correct output: -87                 | Program output: 15                 
Correct output: -21                 | Program output: 10                 
Correct output: -94                 | Program output: -48                
Correct output: -99                 | Program output: 72                 
Correct output: -65                 | Program output: -60                
Correct output: -65                 | Program output: -65                
Correct output: -81                 | Program output: -81                
Correct output: -99                 | Program output: -16                
Correct output: -86                 | Program output: -81                
Correct output: -30                 | Program output: 25                 
Correct output: 15                  | Program output: 15                 
Correct output: -46                 | Program output: -7                 
Correct output: 8                   | Program output: 42                 
Correct output: 16                  | Program output: 16                 
Correct output: -48                 | Program output: 22                 
Correct output: -79                 | Program output: -79                
Correct output: -91                 | Program output: 52                 
Correct output: -82                 | Program output: -80                
Correct output: -55                 | Program output: 37                 
Correct output: -51                 | Program output: -9                 
Correct output: -40                 | Program output: -24                
Correct output: -26                 | Program output: 14                 
Correct output: -65                 | Program output: -21                
Correct output: -71                 | Program output: 31                 
Correct output: -40                 | Program output: 54                 
Correct output: -84                 | Program output: 69                 
Correct output: -87                 | Program output: 22                 
Correct output: -56                 | Program output: -22                
Correct output: -43                 | Program output: -43                
Correct output: -61                 | Program output: -61                
Correct output: -25                 | Program output: 84                 
Correct output: -67                 | Program output: 92                 
Correct output: 46                  | Program output: 69                 
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: 72                 
Correct output: 15                  | Program output: 15                 
Correct output: -78                 | Program output: 69                 
Correct output: -99                 | Program output: -99                
Correct output: 7                   | Program output: 64                 
Correct output: -52                 | Program output: -52                
Correct output: -21                 | Program output: -21                
Correct output: -48                 | Program output: 28                 
Correct output: -89                 | Program output: 47                 
Correct output: 28                  | Program output: 48                 
Correct output: 26                  | Program output: 51                 
Correct output: -88                 | Program output: -88                
Correct output: -99                 | Program output: -99                
Correct output: -83                 | Program output: -83                
Correct output: -89                 | Program output: 48                 
Correct output: -88                 | Program output: 11                 
Correct output: -57                 | Program output: -57                
Correct output: -74                 | Program output: -50                
Correct output: -64                 | Program output: 14                 
Correct output: -93                 | Program output: 7                  
Correct output: -73                 | Program output: -9                 
Correct output: -88                 | Program output: -88                
Correct output: -39                 | Program output: 16                 
Correct output: -48                 | Program output: 86                 
Correct output: -79                 | Program output: 25                 
Correct output: 13                  | Program output: 87                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction print_integer} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_min} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction 78} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_shove} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_eq} {:close 1, :instruction in3} {:close 1, :instruction print_integer})
Lexicase best program: (print_integer integer_empty integer_min integer_rot integer_dup_times exec_when (boolean_frominteger 78 integer_yank integer_dup_times integer_gte integer_shove) integer_fromboolean integer_min integer_fromboolean print_boolean boolean_stackdepth exec_rot (integer_shove integer_inc exec_s_when_autoconstructing (exec_yankdup integer_eq in3) (print_integer) ()) () ())
Lexicase best errors: [1 0 0 0 1 1 0 0 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 33
Percent parens: 0.242
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction print_integer} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_min} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction 78} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_shove} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_eq} {:close 1, :instruction in3} {:close 1, :instruction print_integer})
Zero cases best program: (print_integer integer_empty integer_min integer_rot integer_dup_times exec_when (boolean_frominteger 78 integer_yank integer_dup_times integer_gte integer_shove) integer_fromboolean integer_min integer_fromboolean print_boolean boolean_stackdepth exec_rot (integer_shove integer_inc exec_s_when_autoconstructing (exec_yankdup integer_eq in3) (print_integer) ()) () ())
Zero cases best errors: [1 0 0 0 1 1 0 0 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 33
Percent parens: 0.242
--- Lexicase Population Statistics ---
Count of elite individuals by case: (128 576 575 576 174 128 575 576 128 1)
Population mean number of elite cases: 3.44
Count of perfect (error zero) individuals by case: (128 576 575 576 174 128 575 576 128 1)
Population mean number of perfect (error zero) cases: 3.44
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction print_integer} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_min} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction 78} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_shove} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction integer_min} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_eq} {:close 1, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction tag_exec_279} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_or} {:close 2, :instruction boolean_yankdup} {:close 2, :instruction exec_k} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_yank} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_if} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_or} {:close 1, :instruction integer_dec} {:close 1, :instruction print_newline} {:close 0, :instruction exec_flush} {:close 0, :instruction tagged_317} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction tag_exec_464} {:close 0, :instruction integer_min} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_when} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_swap})
Best program: (print_integer integer_empty integer_min integer_rot integer_dup_times exec_when (boolean_frominteger 78 integer_yank boolean_swap integer_gte integer_dup_times integer_gte integer_shove) integer_fromboolean integer_min integer_fromboolean print_boolean boolean_stackdepth exec_rot (integer_shove integer_inc exec_s_when_autoconstructing (exec_yankdup integer_eq in3) (print_integer) (exec_do*while (tag_exec_279 (exec_s (boolean_or boolean_yankdup) () (exec_k () () boolean_stackdepth integer_shove exec_rot () (integer_dec) (exec_s_when_autoconstructing (boolean_yank) (integer_yank) (boolean_yankdup print_boolean) exec_if (exec_s_when_autoconstructing (integer_shove integer_shove integer_dup_times) (exec_yankdup in2) (boolean_yankdup) integer_stackdepth integer_gt) (integer_dup_items print_boolean boolean_or) integer_dec) print_newline) exec_flush tagged_317 exec_dup_times (integer_shove integer_empty integer_div exec_do*while (boolean_dup_items tag_exec_464 () integer_min integer_inc exec_when (integer_swap boolean_empty integer_gte integer_fromboolean) exec_dup (exec_swap () ()))))))) () ())
Errors: [1 0 0 0 1 1 0 0 1 1]
Total: 5
Mean: 0.5
Genome size: 75
Size: 108
Percent parens: 0.306
--- Population Statistics ---
Average total errors in population: 6.563
Median total errors in population: 5
Error averages by case: (0.872 0.424 0.425 0.424 0.826 0.872 0.425 0.424 0.872 0.999)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 58.616
Average program size in population (points): 86.323
Average percent parens in population: 0.319
Minimum age in population: 9.375
Maximum age in population: 13.6328125
Average age in population: 11.7456796875
Median age in population: 11.80859375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 8
Genome diversity (% unique genomes):	 0.816
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.811
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.048
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 3790681
--- Timings ---
Current time: 1559314659404 milliseconds
Total Time:          26.1 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        18.0 seconds, 68.9%
Fitness Testing:      5.2 seconds, 19.8%
Report:               2.8 seconds, 10.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 645
Test mean error for best: 0.64500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -74                 | Program output: -74                
Correct output: -23                 | Program output: -23                
Correct output: -21                 | Program output: -21                
Correct output: -24                 | Program output: -24                
Correct output: -58                 | Program output: -58                
Correct output: -50                 | Program output: -50                
Correct output: 14                  | Program output: 33                 
Correct output: -9                  | Program output: -9                 
Correct output: 18                  | Program output: 98                 
Correct output: -5                  | Program output: -5                 
Correct output: 100                 | Program output: 100                
Correct output: -19                 | Program output: -19                
Correct output: -31                 | Program output: -31                
Correct output: 10                  | Program output: 10                 
Correct output: 47                  | Program output: 47                 
Correct output: 17                  | Program output: 34                 
Correct output: 1                   | Program output: 1                  
Correct output: 0                   | Program output: 20                 
Correct output: 14                  | Program output: 57                 
Correct output: 7                   | Program output: 28                 
Correct output: 1                   | Program output: 46                 
Correct output: 36                  | Program output: 36                 
Correct output: 14                  | Program output: 59                 
Correct output: 13                  | Program output: 13                 
Correct output: 1                   | Program output: 1                  
Correct output: 20                  | Program output: 61                 
Correct output: 28                  | Program output: 41                 
Correct output: 22                  | Program output: 22                 
Correct output: 19                  | Program output: 45                 
Correct output: 33                  | Program output: 73                 
Correct output: 14                  | Program output: 14                 
Correct output: 23                  | Program output: 23                 
Correct output: 0                   | Program output: 20                 
Correct output: 16                  | Program output: 85                 
Correct output: 4                   | Program output: 74                 
Correct output: -87                 | Program output: 78                 
Correct output: -21                 | Program output: -21                
Correct output: -94                 | Program output: -94                
Correct output: -99                 | Program output: -99                
Correct output: -65                 | Program output: -65                
Correct output: -65                 | Program output: 52                 
Correct output: -81                 | Program output: -52                
Correct output: -99                 | Program output: 36                 
Correct output: -86                 | Program output: -86                
Correct output: -30                 | Program output: -30                
Correct output: 15                  | Program output: 53                 
Correct output: -46                 | Program output: 57                 
Correct output: 8                   | Program output: 36                 
Correct output: 16                  | Program output: 52                 
Correct output: -48                 | Program output: 73                 
Correct output: -79                 | Program output: -1                 
Correct output: -91                 | Program output: -91                
Correct output: -82                 | Program output: -46                
Correct output: -55                 | Program output: -9                 
Correct output: -51                 | Program output: 35                 
Correct output: -40                 | Program output: -9                 
Correct output: -26                 | Program output: 82                 
Correct output: -65                 | Program output: -41                
Correct output: -71                 | Program output: -51                
Correct output: -40                 | Program output: -40                
Correct output: -84                 | Program output: -43                
Correct output: -87                 | Program output: 21                 
Correct output: -56                 | Program output: -56                
Correct output: -43                 | Program output: -9                 
Correct output: -61                 | Program output: 75                 
Correct output: -25                 | Program output: 75                 
Correct output: -67                 | Program output: -67                
Correct output: 46                  | Program output: 86                 
Correct output: -53                 | Program output: 85                 
Correct output: -55                 | Program output: -33                
Correct output: 15                  | Program output: 41                 
Correct output: -78                 | Program output: -30                
Correct output: -99                 | Program output: -36                
Correct output: 7                   | Program output: 7                  
Correct output: -52                 | Program output: -43                
Correct output: -21                 | Program output: 37                 
Correct output: -48                 | Program output: 35                 
Correct output: -89                 | Program output: -89                
Correct output: 28                  | Program output: 28                 
Correct output: 26                  | Program output: 65                 
Correct output: -88                 | Program output: -42                
Correct output: -99                 | Program output: -54                
Correct output: -83                 | Program output: 58                 
Correct output: -89                 | Program output: 26                 
Correct output: -88                 | Program output: 10                 
Correct output: -57                 | Program output: 59                 
Correct output: -74                 | Program output: -65                
Correct output: -64                 | Program output: -64                
Correct output: -93                 | Program output: 69                 
Correct output: -73                 | Program output: 22                 
Correct output: -88                 | Program output: 73                 
Correct output: -39                 | Program output: 29                 
Correct output: -48                 | Program output: -48                
Correct output: -79                 | Program output: -74                
Correct output: 13                  | Program output: 57                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_when} {:close 2, :instruction exec_shove} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction boolean_swap} {:close 1, :instruction integer_gt})
Lexicase best program: (integer_min in3 boolean_not boolean_flush exec_rot (integer_dup_items) (exec_swap (integer_dup_items print_integer boolean_eq exec_when (exec_shove ()) exec_yank) (boolean_invert_second_then_and in2 in2 boolean_swap) integer_gt) ())
Lexicase best errors: [0 1 1 1 0 1 1 0 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 26
Percent parens: 0.308
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_when} {:close 2, :instruction exec_shove} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction boolean_swap} {:close 1, :instruction integer_gt})
Zero cases best program: (integer_min in3 boolean_not boolean_flush exec_rot (integer_dup_items) (exec_swap (integer_dup_items print_integer boolean_eq exec_when (exec_shove ()) exec_yank) (boolean_invert_second_then_and in2 in2 boolean_swap) integer_gt) ())
Zero cases best errors: [0 1 1 1 0 1 1 0 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 26
Percent parens: 0.308
--- Lexicase Population Statistics ---
Count of elite individuals by case: (85 94 442 93 85 442 442 85 885 85)
Population mean number of elite cases: 2.74
Count of perfect (error zero) individuals by case: (85 94 442 93 85 442 442 85 885 85)
Population mean number of perfect (error zero) cases: 2.74
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 0, :instruction integer_div} {:close 1, :instruction exec_k} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 2, :instruction integer_div} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction tag_exec_279} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_or} {:close 1, :instruction boolean_yankdup} {:close 2, :instruction exec_k} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_rot} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_if} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_y} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_dec} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_dup_items} {:close 0, :instruction tag_boolean_648} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_not})
Best program: (boolean_dup_items exec_s (boolean_shove boolean_yankdup in2 integer_div exec_k () (integer_dup_items integer_sub) integer_dup_times print_integer exec_y (integer_div)) (boolean_invert_first_then_and exec_dup_times (exec_yankdup) integer_yank exec_s_when_autoconstructing (exec_yankdup integer_eq integer_min) (print_integer) (exec_do*while (tag_exec_279 (exec_s (boolean_or) (boolean_yankdup) (exec_k () () integer_dup exec_empty exec_rot () (integer_dec) (exec_s_when_autoconstructing (boolean_yank) (integer_yank boolean_yankdup print_boolean) (exec_if (exec_s_when_autoconstructing (integer_shove exec_shove (exec_y () integer_fromboolean) exec_k_when_autoconstructing (exec_dup (boolean_rot boolean_invert_first_then_and) exec_pop (boolean_frominteger boolean_not integer_mult) exec_y_when_autoconstructing (integer_dec) boolean_eq) (exec_s_when_autoconstructing (boolean_shove exec_do*range (boolean_frominteger boolean_flush exec_rot (integer_dup_items tag_boolean_648 in3 in2 boolean_and) (exec_while (integer_div boolean_not)) ())) () ())) () ()) ()))))))) ())
Errors: [0 1 1 1 0 1 1 0 0 0]
Total: 5
Mean: 0.5
Genome size: 68
Size: 112
Percent parens: 0.393
--- Population Statistics ---
Average total errors in population: 7.262
Median total errors in population: 6
Error averages by case: (0.915 0.906 0.558 0.907 0.915 0.558 0.558 0.915 0.115 0.915)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 58.453
Average program size in population (points): 86.525
Average percent parens in population: 0.323
Minimum age in population: 10.46875
Maximum age in population: 15.53125
Average age in population: 13.34643359375
Median age in population: 13.4375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 50
Genome diversity (% unique genomes):	 0.835
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 52
Syntactic diversity (% unique Push programs):	 0.826
Total error diversity:				 0.006
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.052
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 4216804
--- Timings ---
Current time: 1559314662557 milliseconds
Total Time:          28.8 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        20.0 seconds, 69.2%
Fitness Testing:      5.6 seconds, 19.3%
Report:               3.2 seconds, 11.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 665
Test mean error for best: 0.66500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -74                 | Program output: -74                
Correct output: -23                 | Program output: -23                
Correct output: -21                 | Program output: -11                
Correct output: -24                 | Program output: -24                
Correct output: -58                 | Program output: -58                
Correct output: -50                 | Program output: 43                 
Correct output: 14                  | Program output: 14                 
Correct output: -9                  | Program output: -9                 
Correct output: 18                  | Program output: 98                 
Correct output: -5                  | Program output: 47                 
Correct output: 100                 | Program output: 100                
Correct output: -19                 | Program output: -19                
Correct output: -31                 | Program output: -31                
Correct output: 10                  | Program output: 10                 
Correct output: 47                  | Program output: 47                 
Correct output: 17                  | Program output: 87                 
Correct output: 1                   | Program output: 29                 
Correct output: 0                   | Program output: 67                 
Correct output: 14                  | Program output: 40                 
Correct output: 7                   | Program output: 60                 
Correct output: 1                   | Program output: 1                  
Correct output: 36                  | Program output: 44                 
Correct output: 14                  | Program output: 30                 
Correct output: 13                  | Program output: 57                 
Correct output: 1                   | Program output: 76                 
Correct output: 20                  | Program output: 56                 
Correct output: 28                  | Program output: 66                 
Correct output: 22                  | Program output: 22                 
Correct output: 19                  | Program output: 19                 
Correct output: 33                  | Program output: 33                 
Correct output: 14                  | Program output: 44                 
Correct output: 23                  | Program output: 27                 
Correct output: 0                   | Program output: 0                  
Correct output: 16                  | Program output: 16                 
Correct output: 4                   | Program output: 30                 
Correct output: -87                 | Program output: 15                 
Correct output: -21                 | Program output: 10                 
Correct output: -94                 | Program output: -48                
Correct output: -99                 | Program output: 72                 
Correct output: -65                 | Program output: -60                
Correct output: -65                 | Program output: -65                
Correct output: -81                 | Program output: -81                
Correct output: -99                 | Program output: -16                
Correct output: -86                 | Program output: -81                
Correct output: -30                 | Program output: 25                 
Correct output: 15                  | Program output: 15                 
Correct output: -46                 | Program output: -7                 
Correct output: 8                   | Program output: 42                 
Correct output: 16                  | Program output: 16                 
Correct output: -48                 | Program output: 22                 
Correct output: -79                 | Program output: -79                
Correct output: -91                 | Program output: 52                 
Correct output: -82                 | Program output: -80                
Correct output: -55                 | Program output: 37                 
Correct output: -51                 | Program output: -9                 
Correct output: -40                 | Program output: -24                
Correct output: -26                 | Program output: 14                 
Correct output: -65                 | Program output: -21                
Correct output: -71                 | Program output: 31                 
Correct output: -40                 | Program output: 54                 
Correct output: -84                 | Program output: 69                 
Correct output: -87                 | Program output: 22                 
Correct output: -56                 | Program output: -22                
Correct output: -43                 | Program output: -43                
Correct output: -61                 | Program output: -61                
Correct output: -25                 | Program output: 84                 
Correct output: -67                 | Program output: 92                 
Correct output: 46                  | Program output: 69                 
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: 72                 
Correct output: 15                  | Program output: 15                 
Correct output: -78                 | Program output: 69                 
Correct output: -99                 | Program output: -99                
Correct output: 7                   | Program output: 64                 
Correct output: -52                 | Program output: -52                
Correct output: -21                 | Program output: -21                
Correct output: -48                 | Program output: 28                 
Correct output: -89                 | Program output: 47                 
Correct output: 28                  | Program output: 48                 
Correct output: 26                  | Program output: 51                 
Correct output: -88                 | Program output: -88                
Correct output: -99                 | Program output: -99                
Correct output: -83                 | Program output: -83                
Correct output: -89                 | Program output: 48                 
Correct output: -88                 | Program output: 11                 
Correct output: -57                 | Program output: -57                
Correct output: -74                 | Program output: -50                
Correct output: -64                 | Program output: 14                 
Correct output: -93                 | Program output: 7                  
Correct output: -73                 | Program output: -9                 
Correct output: -88                 | Program output: -88                
Correct output: -39                 | Program output: 16                 
Correct output: -48                 | Program output: 86                 
Correct output: -79                 | Program output: 25                 
Correct output: 13                  | Program output: 87                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction print_integer} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_min} {:close 1, :instruction integer_rot} {:close 2, :instruction integer_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction 78} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_shove} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction tag_exec_279} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_or} {:close 2, :instruction boolean_yankdup} {:close 1, :instruction exec_k} {:close 0, :instruction in2} {:close 1, :instruction tagged_601} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_integer_275} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_s} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_empty} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_min} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_eq} {:close 1, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_dup_items} {:close 2, :instruction integer_add} {:close 0, :instruction exec_k} {:close 0, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_flush})
Lexicase best program: (print_integer integer_empty integer_min integer_rot integer_dup_times exec_when (boolean_frominteger 78 integer_yank integer_dup_times integer_gte integer_shove) integer_fromboolean integer_min integer_fromboolean print_boolean boolean_stackdepth exec_rot (exec_if (exec_s_when_autoconstructing (exec_s_when_autoconstructing (exec_yankdup boolean_dup_items in3 print_integer) (exec_do*while (tag_exec_279 (exec_s (boolean_or boolean_yankdup) () (exec_k () (in2 tagged_601) exec_if (exec_do*while (integer_pop exec_s_when_autoconstructing () (integer_sub tag_integer_275 boolean_empty boolean_dup_items integer_stackdepth exec_do*range (exec_dup_times (boolean_not exec_y_when_autoconstructing (boolean_stackdepth) boolean_flush exec_k_when_autoconstructing (integer_dup_items) (integer_inc exec_s (integer_mult) (integer_eq exec_empty) (print_boolean integer_min exec_y_when_autoconstructing (integer_yank exec_pop (exec_swap (integer_lte integer_eq in4) (integer_shove boolean_not exec_yank exec_dup_items) integer_add)) exec_k (in1 exec_stackdepth in2 boolean_invert_second_then_and integer_fromboolean boolean_eq integer_inc integer_swap exec_flush) ()))))) ())) ())))) ()) () ()) ()) () ())
Lexicase best errors: [0 0 0 1 0 1 1 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 119
Percent parens: 0.336
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction print_integer} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_min} {:close 1, :instruction integer_rot} {:close 2, :instruction integer_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction 78} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_shove} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction tag_exec_279} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_or} {:close 2, :instruction boolean_yankdup} {:close 1, :instruction exec_k} {:close 0, :instruction in2} {:close 1, :instruction tagged_601} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_integer_275} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_s} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_empty} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_min} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_eq} {:close 1, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_dup_items} {:close 2, :instruction integer_add} {:close 0, :instruction exec_k} {:close 0, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_flush})
Zero cases best program: (print_integer integer_empty integer_min integer_rot integer_dup_times exec_when (boolean_frominteger 78 integer_yank integer_dup_times integer_gte integer_shove) integer_fromboolean integer_min integer_fromboolean print_boolean boolean_stackdepth exec_rot (exec_if (exec_s_when_autoconstructing (exec_s_when_autoconstructing (exec_yankdup boolean_dup_items in3 print_integer) (exec_do*while (tag_exec_279 (exec_s (boolean_or boolean_yankdup) () (exec_k () (in2 tagged_601) exec_if (exec_do*while (integer_pop exec_s_when_autoconstructing () (integer_sub tag_integer_275 boolean_empty boolean_dup_items integer_stackdepth exec_do*range (exec_dup_times (boolean_not exec_y_when_autoconstructing (boolean_stackdepth) boolean_flush exec_k_when_autoconstructing (integer_dup_items) (integer_inc exec_s (integer_mult) (integer_eq exec_empty) (print_boolean integer_min exec_y_when_autoconstructing (integer_yank exec_pop (exec_swap (integer_lte integer_eq in4) (integer_shove boolean_not exec_yank exec_dup_items) integer_add)) exec_k (in1 exec_stackdepth in2 boolean_invert_second_then_and integer_fromboolean boolean_eq integer_inc integer_swap exec_flush) ()))))) ())) ())))) ()) () ()) ()) () ())
Zero cases best errors: [0 0 0 1 0 1 1 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 119
Percent parens: 0.336
--- Lexicase Population Statistics ---
Count of elite individuals by case: (307 710 307 1 904 1 401 906 403 307)
Population mean number of elite cases: 4.25
Count of perfect (error zero) individuals by case: (307 710 307 1 904 1 401 906 403 307)
Population mean number of perfect (error zero) cases: 4.25
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction print_integer} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_min} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction 78} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_shove} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gt} {:close 0, :instruction tag_boolean_297} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_eq} {:close 1, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction tag_exec_279} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_yankdup} {:close 2, :instruction exec_k} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_rot} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_yank} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_if} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_dup_items})
Best program: (print_integer integer_empty integer_min integer_rot integer_dup_times exec_when (boolean_frominteger 78 integer_yank integer_dup_times integer_gte integer_shove) integer_fromboolean integer_min integer_gt tag_boolean_297 boolean_stackdepth exec_rot (integer_shove integer_inc exec_s_when_autoconstructing (exec_yankdup integer_eq in3) (print_integer) (exec_do*while (tag_exec_279 (exec_s (boolean_or boolean_yankdup) (exec_k () () boolean_stackdepth exec_empty exec_rot () (integer_dec) (exec_s_when_autoconstructing (boolean_yank) (integer_yank) (boolean_yankdup exec_do*count () exec_if (exec_s_when_autoconstructing (integer_shove integer_shove integer_lt) (exec_yankdup in2) (boolean_yankdup) integer_stackdepth integer_gt) (integer_dup_items)))) ())))) () ())
Errors: [0 0 0 1 0 1 1 0 1 0]
Total: 4
Mean: 0.4
Genome size: 51
Size: 78
Percent parens: 0.346
--- Population Statistics ---
Average total errors in population: 5.753
Median total errors in population: 5
Error averages by case: (0.693 0.29 0.693 0.999 0.096 0.999 0.599 0.094 0.597 0.693)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.312
Average program size in population (points): 74.614
Average percent parens in population: 0.322
Minimum age in population: 11.46875
Maximum age in population: 16.861328125
Average age in population: 14.949046875
Median age in population: 14.970703125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 55
Genome diversity (% unique genomes):	 0.752
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 58
Syntactic diversity (% unique Push programs):	 0.743
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.035
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 4871714
--- Timings ---
Current time: 1559314665708 milliseconds
Total Time:          32.5 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        22.1 seconds, 68.2%
Fitness Testing:      6.2 seconds, 19.1%
Report:               4.0 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 645
Test mean error for best: 0.64500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -74                 | Program output: -74                
Correct output: -23                 | Program output: -23                
Correct output: -21                 | Program output: -21                
Correct output: -24                 | Program output: -24                
Correct output: -58                 | Program output: -58                
Correct output: -50                 | Program output: -50                
Correct output: 14                  | Program output: 33                 
Correct output: -9                  | Program output: -9                 
Correct output: 18                  | Program output: 98                 
Correct output: -5                  | Program output: -5                 
Correct output: 100                 | Program output: 100                
Correct output: -19                 | Program output: -19                
Correct output: -31                 | Program output: -31                
Correct output: 10                  | Program output: 10                 
Correct output: 47                  | Program output: 47                 
Correct output: 17                  | Program output: 34                 
Correct output: 1                   | Program output: 1                  
Correct output: 0                   | Program output: 20                 
Correct output: 14                  | Program output: 57                 
Correct output: 7                   | Program output: 28                 
Correct output: 1                   | Program output: 46                 
Correct output: 36                  | Program output: 36                 
Correct output: 14                  | Program output: 59                 
Correct output: 13                  | Program output: 13                 
Correct output: 1                   | Program output: 1                  
Correct output: 20                  | Program output: 61                 
Correct output: 28                  | Program output: 41                 
Correct output: 22                  | Program output: 22                 
Correct output: 19                  | Program output: 45                 
Correct output: 33                  | Program output: 73                 
Correct output: 14                  | Program output: 14                 
Correct output: 23                  | Program output: 23                 
Correct output: 0                   | Program output: 20                 
Correct output: 16                  | Program output: 85                 
Correct output: 4                   | Program output: 74                 
Correct output: -87                 | Program output: 78                 
Correct output: -21                 | Program output: -21                
Correct output: -94                 | Program output: -94                
Correct output: -99                 | Program output: -99                
Correct output: -65                 | Program output: -65                
Correct output: -65                 | Program output: 52                 
Correct output: -81                 | Program output: -52                
Correct output: -99                 | Program output: 36                 
Correct output: -86                 | Program output: -86                
Correct output: -30                 | Program output: -30                
Correct output: 15                  | Program output: 53                 
Correct output: -46                 | Program output: 57                 
Correct output: 8                   | Program output: 36                 
Correct output: 16                  | Program output: 52                 
Correct output: -48                 | Program output: 73                 
Correct output: -79                 | Program output: -1                 
Correct output: -91                 | Program output: -91                
Correct output: -82                 | Program output: -46                
Correct output: -55                 | Program output: -9                 
Correct output: -51                 | Program output: 35                 
Correct output: -40                 | Program output: -9                 
Correct output: -26                 | Program output: 82                 
Correct output: -65                 | Program output: -41                
Correct output: -71                 | Program output: -51                
Correct output: -40                 | Program output: -40                
Correct output: -84                 | Program output: -43                
Correct output: -87                 | Program output: 21                 
Correct output: -56                 | Program output: -56                
Correct output: -43                 | Program output: -9                 
Correct output: -61                 | Program output: 75                 
Correct output: -25                 | Program output: 75                 
Correct output: -67                 | Program output: -67                
Correct output: 46                  | Program output: 86                 
Correct output: -53                 | Program output: 85                 
Correct output: -55                 | Program output: -33                
Correct output: 15                  | Program output: 41                 
Correct output: -78                 | Program output: -30                
Correct output: -99                 | Program output: -36                
Correct output: 7                   | Program output: 7                  
Correct output: -52                 | Program output: -43                
Correct output: -21                 | Program output: 37                 
Correct output: -48                 | Program output: 35                 
Correct output: -89                 | Program output: -89                
Correct output: 28                  | Program output: 28                 
Correct output: 26                  | Program output: 65                 
Correct output: -88                 | Program output: -42                
Correct output: -99                 | Program output: -54                
Correct output: -83                 | Program output: 58                 
Correct output: -89                 | Program output: 26                 
Correct output: -88                 | Program output: 10                 
Correct output: -57                 | Program output: 59                 
Correct output: -74                 | Program output: -65                
Correct output: -64                 | Program output: -64                
Correct output: -93                 | Program output: 69                 
Correct output: -73                 | Program output: 22                 
Correct output: -88                 | Program output: 73                 
Correct output: -39                 | Program output: 29                 
Correct output: -48                 | Program output: -48                
Correct output: -79                 | Program output: -74                
Correct output: 13                  | Program output: 57                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_when} {:close 2, :instruction exec_pop} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction boolean_swap} {:close 1, :instruction integer_gt})
Lexicase best program: (integer_min in3 boolean_not boolean_flush exec_rot (integer_stackdepth) (exec_swap (integer_dup_items print_integer exec_noop exec_when (exec_pop ()) exec_yank) (boolean_invert_second_then_and in2 in2 boolean_swap) integer_gt) ())
Lexicase best errors: [0 0 1 0 0 1 1 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 26
Percent parens: 0.308
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_when} {:close 2, :instruction exec_pop} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction boolean_swap} {:close 1, :instruction integer_gt})
Zero cases best program: (integer_min in3 boolean_not boolean_flush exec_rot (integer_stackdepth) (exec_swap (integer_dup_items print_integer exec_noop exec_when (exec_pop ()) exec_yank) (boolean_invert_second_then_and in2 in2 boolean_swap) integer_gt) ())
Zero cases best errors: [0 0 1 0 0 1 1 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 26
Percent parens: 0.308
--- Lexicase Population Statistics ---
Count of elite individuals by case: (198 892 420 198 200 276 1000 198 420 892)
Population mean number of elite cases: 4.69
Count of perfect (error zero) individuals by case: (198 892 420 198 200 276 0 198 420 892)
Population mean number of perfect (error zero) cases: 3.69
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 0, :instruction integer_div} {:close 1, :instruction exec_k} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 2, :instruction integer_div} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_add} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_eq} {:close 1, :instruction in3} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction tag_exec_279} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction boolean_yankdup} {:close 2, :instruction exec_noop} {:close 0, :instruction tag_exec_279} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_eq} {:close 1, :instruction in3} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction tag_exec_279} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_or} {:close 2, :instruction boolean_yankdup} {:close 2, :instruction exec_k} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_rot} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction in4} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_if} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_shove})
Best program: (boolean_dup_items exec_s (boolean_shove boolean_yankdup in2 integer_div exec_k () (integer_dup_items integer_sub) integer_dup_times print_integer exec_y (integer_div)) (boolean_invert_first_then_and exec_dup_times (exec_yankdup) boolean_swap exec_k_when_autoconstructing (integer_div boolean_pop integer_gte) (integer_dup_items boolean_pop integer_shove integer_inc integer_add exec_yankdup integer_eq in3) exec_dup () exec_do*while (tag_exec_279 (exec_s (boolean_dup_times boolean_yankdup) () (exec_noop)) tag_exec_279 (exec_yankdup integer_eq in3) exec_dup () exec_do*while (tag_exec_279 (exec_s (boolean_or boolean_yankdup) () (exec_k () () boolean_stackdepth exec_empty exec_rot () (integer_dec) (exec_s_when_autoconstructing (in4) (integer_yank) (boolean_yankdup print_boolean) exec_if (exec_s_when_autoconstructing (integer_shove) () ()) ())))))) ())
Errors: [0 0 1 0 0 1 1 0 1 0]
Total: 4
Mean: 0.4
Genome size: 59
Size: 95
Percent parens: 0.379
--- Population Statistics ---
Average total errors in population: 6.306
Median total errors in population: 6
Error averages by case: (0.802 0.108 0.58 0.802 0.8 0.724 1.0 0.802 0.58 0.108)
Error minima by case: (0 0 0 0 0 0 1 0 0 0)
Average genome size in population (length): 40.702
Average program size in population (points): 60.114
Average percent parens in population: 0.315
Minimum age in population: 12.46875
Maximum age in population: 18.0849609375
Average age in population: 16.333541015625
Median age in population: 16.30712890625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 234
Genome diversity (% unique genomes):	 0.662
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 238
Syntactic diversity (% unique Push programs):	 0.653
Total error diversity:				 0.006
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.034
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 5244931
--- Timings ---
Current time: 1559314669053 milliseconds
Total Time:          35.4 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        24.4 seconds, 68.8%
Fitness Testing:      6.6 seconds, 18.7%
Report:               4.3 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 645
Test mean error for best: 0.64500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -74                 | Program output: -74                
Correct output: -23                 | Program output: -23                
Correct output: -21                 | Program output: -21                
Correct output: -24                 | Program output: -24                
Correct output: -58                 | Program output: -58                
Correct output: -50                 | Program output: -50                
Correct output: 14                  | Program output: 33                 
Correct output: -9                  | Program output: -9                 
Correct output: 18                  | Program output: 98                 
Correct output: -5                  | Program output: -5                 
Correct output: 100                 | Program output: 100                
Correct output: -19                 | Program output: -19                
Correct output: -31                 | Program output: -31                
Correct output: 10                  | Program output: 10                 
Correct output: 47                  | Program output: 47                 
Correct output: 17                  | Program output: 34                 
Correct output: 1                   | Program output: 1                  
Correct output: 0                   | Program output: 20                 
Correct output: 14                  | Program output: 57                 
Correct output: 7                   | Program output: 28                 
Correct output: 1                   | Program output: 46                 
Correct output: 36                  | Program output: 36                 
Correct output: 14                  | Program output: 59                 
Correct output: 13                  | Program output: 13                 
Correct output: 1                   | Program output: 1                  
Correct output: 20                  | Program output: 61                 
Correct output: 28                  | Program output: 41                 
Correct output: 22                  | Program output: 22                 
Correct output: 19                  | Program output: 45                 
Correct output: 33                  | Program output: 73                 
Correct output: 14                  | Program output: 14                 
Correct output: 23                  | Program output: 23                 
Correct output: 0                   | Program output: 20                 
Correct output: 16                  | Program output: 85                 
Correct output: 4                   | Program output: 74                 
Correct output: -87                 | Program output: 78                 
Correct output: -21                 | Program output: -21                
Correct output: -94                 | Program output: -94                
Correct output: -99                 | Program output: -99                
Correct output: -65                 | Program output: -65                
Correct output: -65                 | Program output: 52                 
Correct output: -81                 | Program output: -52                
Correct output: -99                 | Program output: 36                 
Correct output: -86                 | Program output: -86                
Correct output: -30                 | Program output: -30                
Correct output: 15                  | Program output: 53                 
Correct output: -46                 | Program output: 57                 
Correct output: 8                   | Program output: 36                 
Correct output: 16                  | Program output: 52                 
Correct output: -48                 | Program output: 73                 
Correct output: -79                 | Program output: -1                 
Correct output: -91                 | Program output: -91                
Correct output: -82                 | Program output: -46                
Correct output: -55                 | Program output: -9                 
Correct output: -51                 | Program output: 35                 
Correct output: -40                 | Program output: -9                 
Correct output: -26                 | Program output: 82                 
Correct output: -65                 | Program output: -41                
Correct output: -71                 | Program output: -51                
Correct output: -40                 | Program output: -40                
Correct output: -84                 | Program output: -43                
Correct output: -87                 | Program output: 21                 
Correct output: -56                 | Program output: -56                
Correct output: -43                 | Program output: -9                 
Correct output: -61                 | Program output: 75                 
Correct output: -25                 | Program output: 75                 
Correct output: -67                 | Program output: -67                
Correct output: 46                  | Program output: 86                 
Correct output: -53                 | Program output: 85                 
Correct output: -55                 | Program output: -33                
Correct output: 15                  | Program output: 41                 
Correct output: -78                 | Program output: -30                
Correct output: -99                 | Program output: -36                
Correct output: 7                   | Program output: 7                  
Correct output: -52                 | Program output: -43                
Correct output: -21                 | Program output: 37                 
Correct output: -48                 | Program output: 35                 
Correct output: -89                 | Program output: -89                
Correct output: 28                  | Program output: 28                 
Correct output: 26                  | Program output: 65                 
Correct output: -88                 | Program output: -42                
Correct output: -99                 | Program output: -54                
Correct output: -83                 | Program output: 58                 
Correct output: -89                 | Program output: 26                 
Correct output: -88                 | Program output: 10                 
Correct output: -57                 | Program output: 59                 
Correct output: -74                 | Program output: -65                
Correct output: -64                 | Program output: -64                
Correct output: -93                 | Program output: 69                 
Correct output: -73                 | Program output: 22                 
Correct output: -88                 | Program output: 73                 
Correct output: -39                 | Program output: 29                 
Correct output: -48                 | Program output: -48                
Correct output: -79                 | Program output: -74                
Correct output: 13                  | Program output: 57                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_when} {:close 2, :instruction exec_pop} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_gt})
Lexicase best program: (integer_min in3 boolean_not boolean_flush exec_rot (integer_stackdepth) (exec_swap (integer_dup_items print_integer boolean_eq exec_when (exec_pop ()) integer_sub) (boolean_invert_second_then_and in2 in2 boolean_swap) integer_gt) ())
Lexicase best errors: [0 0 0 0 0 0 0 1 1 1]
Lexicase best number of elite cases: 10
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 26
Percent parens: 0.308
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_when} {:close 2, :instruction exec_pop} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_gt})
Zero cases best program: (integer_min in3 boolean_not boolean_flush exec_rot (integer_stackdepth) (exec_swap (integer_dup_items print_integer boolean_eq exec_when (exec_pop ()) integer_sub) (boolean_invert_second_then_and in2 in2 boolean_swap) integer_gt) ())
Zero cases best errors: [0 0 0 0 0 0 0 1 1 1]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 26
Percent parens: 0.308
--- Lexicase Population Statistics ---
Count of elite individuals by case: (494 748 496 496 862 609 494 1000 1000 1000)
Population mean number of elite cases: 7.20
Count of perfect (error zero) individuals by case: (494 748 496 496 862 609 494 0 0 0)
Population mean number of perfect (error zero) cases: 4.20
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction print_integer} {:close 0, :instruction integer_empty} {:close 2, :instruction tagged_115} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction exec_shove} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_shove} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_div} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_if} {:close 0, :instruction -32} {:close 0, :instruction print_exec} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_dup} {:close 2, :instruction exec_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_swap})
Best program: (print_integer integer_empty tagged_115 boolean_flush exec_pop (exec_yank exec_eq) integer_fromboolean boolean_dup_items boolean_dup_times integer_fromboolean boolean_dup_items exec_shove () boolean_rot exec_rot (exec_shove () boolean_dup) (exec_rot (boolean_not) (integer_div print_integer boolean_flush) (exec_do*range (in2 boolean_invert_second_then_and exec_eq) exec_if (-32 print_exec (boolean_dup_times) exec_swap (exec_s (exec_y (exec_empty boolean_rot exec_if (exec_dup_items boolean_yankdup integer_lte boolean_dup exec_pop ()) (integer_lte integer_min exec_do*while (exec_shove (boolean_swap))))) () ()) ()) ())) ())
Errors: [0 0 0 0 0 0 0 1 1 1]
Total: 3
Mean: 0.3
Genome size: 46
Size: 71
Percent parens: 0.352
--- Population Statistics ---
Average total errors in population: 5.801
Median total errors in population: 8
Error averages by case: (0.506 0.252 0.504 0.504 0.138 0.391 0.506 1.0 1.0 1.0)
Error minima by case: (0 0 0 0 0 0 0 1 1 1)
Average genome size in population (length): 41.033
Average program size in population (points): 60.912
Average percent parens in population: 0.317
Minimum age in population: 13.46875
Maximum age in population: 19.708984375
Average age in population: 17.8751728515625
Median age in population: 17.982177734375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 89
Genome diversity (% unique genomes):	 0.68
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 91
Syntactic diversity (% unique Push programs):	 0.67
Total error diversity:				 0.004
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.043
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 5798183
--- Timings ---
Current time: 1559314672117 milliseconds
Total Time:          38.9 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        26.6 seconds, 68.3%
Fitness Testing:      7.2 seconds, 18.4%
Report:               5.0 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 665
Test mean error for best: 0.66500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -74                 | Program output: -74                
Correct output: -23                 | Program output: -23                
Correct output: -21                 | Program output: -11                
Correct output: -24                 | Program output: -24                
Correct output: -58                 | Program output: -58                
Correct output: -50                 | Program output: 43                 
Correct output: 14                  | Program output: 14                 
Correct output: -9                  | Program output: -9                 
Correct output: 18                  | Program output: 98                 
Correct output: -5                  | Program output: 47                 
Correct output: 100                 | Program output: 100                
Correct output: -19                 | Program output: -19                
Correct output: -31                 | Program output: -31                
Correct output: 10                  | Program output: 10                 
Correct output: 47                  | Program output: 47                 
Correct output: 17                  | Program output: 87                 
Correct output: 1                   | Program output: 29                 
Correct output: 0                   | Program output: 67                 
Correct output: 14                  | Program output: 40                 
Correct output: 7                   | Program output: 60                 
Correct output: 1                   | Program output: 1                  
Correct output: 36                  | Program output: 44                 
Correct output: 14                  | Program output: 30                 
Correct output: 13                  | Program output: 57                 
Correct output: 1                   | Program output: 76                 
Correct output: 20                  | Program output: 56                 
Correct output: 28                  | Program output: 66                 
Correct output: 22                  | Program output: 22                 
Correct output: 19                  | Program output: 19                 
Correct output: 33                  | Program output: 33                 
Correct output: 14                  | Program output: 44                 
Correct output: 23                  | Program output: 27                 
Correct output: 0                   | Program output: 0                  
Correct output: 16                  | Program output: 16                 
Correct output: 4                   | Program output: 30                 
Correct output: -87                 | Program output: 15                 
Correct output: -21                 | Program output: 10                 
Correct output: -94                 | Program output: -48                
Correct output: -99                 | Program output: 72                 
Correct output: -65                 | Program output: -60                
Correct output: -65                 | Program output: -65                
Correct output: -81                 | Program output: -81                
Correct output: -99                 | Program output: -16                
Correct output: -86                 | Program output: -81                
Correct output: -30                 | Program output: 25                 
Correct output: 15                  | Program output: 15                 
Correct output: -46                 | Program output: -7                 
Correct output: 8                   | Program output: 42                 
Correct output: 16                  | Program output: 16                 
Correct output: -48                 | Program output: 22                 
Correct output: -79                 | Program output: -79                
Correct output: -91                 | Program output: 52                 
Correct output: -82                 | Program output: -80                
Correct output: -55                 | Program output: 37                 
Correct output: -51                 | Program output: -9                 
Correct output: -40                 | Program output: -24                
Correct output: -26                 | Program output: 14                 
Correct output: -65                 | Program output: -21                
Correct output: -71                 | Program output: 31                 
Correct output: -40                 | Program output: 54                 
Correct output: -84                 | Program output: 69                 
Correct output: -87                 | Program output: 22                 
Correct output: -56                 | Program output: -22                
Correct output: -43                 | Program output: -43                
Correct output: -61                 | Program output: -61                
Correct output: -25                 | Program output: 84                 
Correct output: -67                 | Program output: 92                 
Correct output: 46                  | Program output: 69                 
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: 72                 
Correct output: 15                  | Program output: 15                 
Correct output: -78                 | Program output: 69                 
Correct output: -99                 | Program output: -99                
Correct output: 7                   | Program output: 64                 
Correct output: -52                 | Program output: -52                
Correct output: -21                 | Program output: -21                
Correct output: -48                 | Program output: 28                 
Correct output: -89                 | Program output: 47                 
Correct output: 28                  | Program output: 48                 
Correct output: 26                  | Program output: 51                 
Correct output: -88                 | Program output: -88                
Correct output: -99                 | Program output: -99                
Correct output: -83                 | Program output: -83                
Correct output: -89                 | Program output: 48                 
Correct output: -88                 | Program output: 11                 
Correct output: -57                 | Program output: -57                
Correct output: -74                 | Program output: -50                
Correct output: -64                 | Program output: 14                 
Correct output: -93                 | Program output: 7                  
Correct output: -73                 | Program output: -9                 
Correct output: -88                 | Program output: -88                
Correct output: -39                 | Program output: 16                 
Correct output: -48                 | Program output: 86                 
Correct output: -79                 | Program output: 25                 
Correct output: 13                  | Program output: 87                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_when} {:close 2, :instruction exec_shove} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_gt})
Lexicase best program: (integer_min in3 boolean_not boolean_flush exec_rot (integer_stackdepth) (exec_swap (integer_dup_items print_integer boolean_eq exec_when (exec_shove ()) exec_yank) (boolean_invert_second_then_and in2 in2 boolean_swap integer_gt)) ())
Lexicase best errors: [0 0 0 1 0 0 1 1 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 26
Percent parens: 0.308
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_when} {:close 2, :instruction exec_shove} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_gt})
Zero cases best program: (integer_min in3 boolean_not boolean_flush exec_rot (integer_stackdepth) (exec_swap (integer_dup_items print_integer boolean_eq exec_when (exec_shove ()) exec_yank) (boolean_invert_second_then_and in2 in2 boolean_swap integer_gt)) ())
Zero cases best errors: [0 0 0 1 0 0 1 1 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 26
Percent parens: 0.308
--- Lexicase Population Statistics ---
Count of elite individuals by case: (883 7 7 873 10 7 1000 1000 9 1)
Population mean number of elite cases: 3.80
Count of perfect (error zero) individuals by case: (883 7 7 873 10 7 0 0 9 1)
Population mean number of perfect (error zero) cases: 1.80
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 0, :instruction integer_div} {:close 1, :instruction exec_k} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_sub} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_eq} {:close 1, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction tag_exec_279} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_or} {:close 2, :instruction boolean_yankdup} {:close 2, :instruction exec_k} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_rot} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_yank} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_if} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_or} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction tagged_317} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction tag_exec_464} {:close 0, :instruction integer_min} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_when} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yankdup})
Best program: (boolean_dup_items exec_s (boolean_shove boolean_yankdup in2 integer_div exec_k () (integer_dup_items integer_sub) exec_yankdup) (boolean_swap exec_k_when_autoconstructing (exec_yankdup integer_eq in3) (print_integer) exec_do*while (tag_exec_279 (exec_s (boolean_or boolean_yankdup) () (exec_k () () boolean_stackdepth exec_empty exec_rot () (integer_mod) (exec_s_when_autoconstructing (boolean_yank) (integer_yank) (boolean_yankdup integer_yank) exec_if (exec_s_when_autoconstructing (integer_shove integer_shove integer_lt) (exec_yankdup in2) (boolean_yankdup) integer_stackdepth integer_gt) (boolean_yankdup) integer_stackdepth integer_gt) integer_dup_items print_boolean boolean_or) exec_stackdepth) boolean_swap) exec_flush tagged_317 exec_dup_times (integer_shove integer_empty integer_div exec_do*while (boolean_dup_items tag_exec_464 () integer_min integer_inc exec_when (integer_swap boolean_empty integer_gte integer_fromboolean) exec_dup (exec_swap (integer_gt boolean_yankdup) ())))) ())
Errors: [0 0 0 1 0 0 1 1 1 1]
Total: 5
Mean: 0.5
Genome size: 69
Size: 102
Percent parens: 0.324
--- Population Statistics ---
Average total errors in population: 8.203
Median total errors in population: 8
Error averages by case: (0.117 0.993 0.993 0.127 0.99 0.993 1.0 1.0 0.991 0.999)
Error minima by case: (0 0 0 0 0 0 1 1 0 0)
Average genome size in population (length): 40.387
Average program size in population (points): 60.104
Average percent parens in population: 0.314
Minimum age in population: 16.703125
Maximum age in population: 21.33740234375
Average age in population: 19.46691015625
Median age in population: 19.4921875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 17
Genome diversity (% unique genomes):	 0.669
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 19
Syntactic diversity (% unique Push programs):	 0.66
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.039
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 6560874
--- Timings ---
Current time: 1559314675097 milliseconds
Total Time:          41.9 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        28.5 seconds, 68.1%
Fitness Testing:      7.9 seconds, 18.9%
Report:               5.3 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 665
Test mean error for best: 0.66500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -74                 | Program output: -74                
Correct output: -23                 | Program output: -23                
Correct output: -21                 | Program output: -11                
Correct output: -24                 | Program output: -24                
Correct output: -58                 | Program output: -58                
Correct output: -50                 | Program output: 43                 
Correct output: 14                  | Program output: 14                 
Correct output: -9                  | Program output: -9                 
Correct output: 18                  | Program output: 98                 
Correct output: -5                  | Program output: 47                 
Correct output: 100                 | Program output: 100                
Correct output: -19                 | Program output: -19                
Correct output: -31                 | Program output: -31                
Correct output: 10                  | Program output: 10                 
Correct output: 47                  | Program output: 47                 
Correct output: 17                  | Program output: 87                 
Correct output: 1                   | Program output: 29                 
Correct output: 0                   | Program output: 67                 
Correct output: 14                  | Program output: 40                 
Correct output: 7                   | Program output: 60                 
Correct output: 1                   | Program output: 1                  
Correct output: 36                  | Program output: 44                 
Correct output: 14                  | Program output: 30                 
Correct output: 13                  | Program output: 57                 
Correct output: 1                   | Program output: 76                 
Correct output: 20                  | Program output: 56                 
Correct output: 28                  | Program output: 66                 
Correct output: 22                  | Program output: 22                 
Correct output: 19                  | Program output: 19                 
Correct output: 33                  | Program output: 33                 
Correct output: 14                  | Program output: 44                 
Correct output: 23                  | Program output: 27                 
Correct output: 0                   | Program output: 0                  
Correct output: 16                  | Program output: 16                 
Correct output: 4                   | Program output: 30                 
Correct output: -87                 | Program output: 15                 
Correct output: -21                 | Program output: 10                 
Correct output: -94                 | Program output: -48                
Correct output: -99                 | Program output: 72                 
Correct output: -65                 | Program output: -60                
Correct output: -65                 | Program output: -65                
Correct output: -81                 | Program output: -81                
Correct output: -99                 | Program output: -16                
Correct output: -86                 | Program output: -81                
Correct output: -30                 | Program output: 25                 
Correct output: 15                  | Program output: 15                 
Correct output: -46                 | Program output: -7                 
Correct output: 8                   | Program output: 42                 
Correct output: 16                  | Program output: 16                 
Correct output: -48                 | Program output: 22                 
Correct output: -79                 | Program output: -79                
Correct output: -91                 | Program output: 52                 
Correct output: -82                 | Program output: -80                
Correct output: -55                 | Program output: 37                 
Correct output: -51                 | Program output: -9                 
Correct output: -40                 | Program output: -24                
Correct output: -26                 | Program output: 14                 
Correct output: -65                 | Program output: -21                
Correct output: -71                 | Program output: 31                 
Correct output: -40                 | Program output: 54                 
Correct output: -84                 | Program output: 69                 
Correct output: -87                 | Program output: 22                 
Correct output: -56                 | Program output: -22                
Correct output: -43                 | Program output: -43                
Correct output: -61                 | Program output: -61                
Correct output: -25                 | Program output: 84                 
Correct output: -67                 | Program output: 92                 
Correct output: 46                  | Program output: 69                 
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: 72                 
Correct output: 15                  | Program output: 15                 
Correct output: -78                 | Program output: 69                 
Correct output: -99                 | Program output: -99                
Correct output: 7                   | Program output: 64                 
Correct output: -52                 | Program output: -52                
Correct output: -21                 | Program output: -21                
Correct output: -48                 | Program output: 28                 
Correct output: -89                 | Program output: 47                 
Correct output: 28                  | Program output: 48                 
Correct output: 26                  | Program output: 51                 
Correct output: -88                 | Program output: -88                
Correct output: -99                 | Program output: -99                
Correct output: -83                 | Program output: -83                
Correct output: -89                 | Program output: 48                 
Correct output: -88                 | Program output: 11                 
Correct output: -57                 | Program output: -57                
Correct output: -74                 | Program output: -50                
Correct output: -64                 | Program output: 14                 
Correct output: -93                 | Program output: 7                  
Correct output: -73                 | Program output: -9                 
Correct output: -88                 | Program output: -88                
Correct output: -39                 | Program output: 16                 
Correct output: -48                 | Program output: 86                 
Correct output: -79                 | Program output: 25                 
Correct output: 13                  | Program output: 87                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 1, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_when} {:close 2, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 2, :instruction integer_div} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction integer_eq} {:close 1, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_eq} {:close 1, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction tag_exec_279} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_while} {:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_div} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_rot} {:close 2, :instruction boolean_swap} {:close 0, :instruction boolean_invert_first_then_and})
Lexicase best program: (integer_min in3 boolean_not boolean_flush exec_rot (integer_dup_items) (exec_swap (integer_dup_items print_integer boolean_eq exec_when (exec_shove ()) print_integer exec_y (integer_div)) (boolean_invert_first_then_and exec_dup_times (exec_yankdup integer_eq in3 integer_eq in3) print_integer) integer_shove integer_inc exec_s_when_autoconstructing (exec_yankdup integer_eq in3) (print_integer) (exec_do*while (tag_exec_279 (exec_s (boolean_or exec_while () in1) (boolean_eq integer_div) (exec_flush boolean_xor boolean_shove exec_rot (boolean_swap) () (boolean_invert_first_then_and)))))) ())
Lexicase best errors: [1 0 0 1 0 0 1 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 66
Percent parens: 0.333
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 1, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_when} {:close 2, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 2, :instruction integer_div} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction integer_eq} {:close 1, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_eq} {:close 1, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction tag_exec_279} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_while} {:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_div} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_rot} {:close 2, :instruction boolean_swap} {:close 0, :instruction boolean_invert_first_then_and})
Zero cases best program: (integer_min in3 boolean_not boolean_flush exec_rot (integer_dup_items) (exec_swap (integer_dup_items print_integer boolean_eq exec_when (exec_shove ()) print_integer exec_y (integer_div)) (boolean_invert_first_then_and exec_dup_times (exec_yankdup integer_eq in3 integer_eq in3) print_integer) integer_shove integer_inc exec_s_when_autoconstructing (exec_yankdup integer_eq in3) (print_integer) (exec_do*while (tag_exec_279 (exec_s (boolean_or exec_while () in1) (boolean_eq integer_div) (exec_flush boolean_xor boolean_shove exec_rot (boolean_swap) () (boolean_invert_first_then_and)))))) ())
Zero cases best errors: [1 0 0 1 0 0 1 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 66
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (225 479 479 226 483 632 149 149 225 870)
Population mean number of elite cases: 3.92
Count of perfect (error zero) individuals by case: (225 479 479 226 483 632 149 149 225 870)
Population mean number of perfect (error zero) cases: 3.92
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 0, :instruction integer_div} {:close 1, :instruction exec_k} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_sub} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_eq} {:close 1, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction tag_exec_279} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_or} {:close 2, :instruction boolean_yankdup} {:close 2, :instruction exec_k} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_rot} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_yank} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_if} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_or} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction tagged_317} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction tag_exec_464} {:close 0, :instruction integer_min} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_when} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yankdup})
Best program: (boolean_dup_items exec_s (boolean_shove boolean_yankdup in2 integer_div exec_k () (integer_dup_items integer_sub) exec_yankdup) (boolean_swap exec_k_when_autoconstructing (exec_yankdup integer_eq in3) (print_integer) exec_do*while (tag_exec_279 (exec_s (boolean_or boolean_yankdup) () (exec_k () () boolean_stackdepth exec_empty exec_rot () (integer_mod) (exec_s_when_autoconstructing (boolean_yank) (integer_yank) (boolean_yankdup integer_yank) exec_if (exec_s_when_autoconstructing (integer_shove integer_shove integer_lt) (exec_yankdup in2) (boolean_yankdup) integer_stackdepth integer_gt) (boolean_yankdup) integer_stackdepth integer_gt) integer_dup_items print_boolean boolean_or) exec_stackdepth) boolean_swap) exec_flush tagged_317 exec_dup_times (integer_shove integer_empty integer_div exec_do*while (boolean_dup_items tag_exec_464 () integer_min integer_inc exec_when (integer_swap boolean_empty integer_gte integer_fromboolean) exec_dup (exec_swap (integer_gt boolean_yankdup) ())))) ())
Errors: [1 0 0 1 0 0 1 1 1 0]
Total: 5
Mean: 0.5
Genome size: 69
Size: 102
Percent parens: 0.324
--- Population Statistics ---
Average total errors in population: 6.083
Median total errors in population: 6
Error averages by case: (0.775 0.521 0.521 0.774 0.517 0.368 0.851 0.851 0.775 0.13)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.564
Average program size in population (points): 56.936
Average percent parens in population: 0.324
Minimum age in population: 17.9921875
Maximum age in population: 22.50244140625
Average age in population: 20.68644873046875
Median age in population: 20.80224609375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 139
Genome diversity (% unique genomes):	 0.504
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 140
Syntactic diversity (% unique Push programs):	 0.496
Total error diversity:				 0.006
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.034
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 7220131
--- Timings ---
Current time: 1559314677530 milliseconds
Total Time:          44.3 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        30.0 seconds, 67.8%
Fitness Testing:      8.5 seconds, 19.3%
Report:               5.6 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 665
Test mean error for best: 0.66500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -74                 | Program output: -74                
Correct output: -23                 | Program output: -23                
Correct output: -21                 | Program output: -11                
Correct output: -24                 | Program output: -24                
Correct output: -58                 | Program output: -58                
Correct output: -50                 | Program output: 43                 
Correct output: 14                  | Program output: 14                 
Correct output: -9                  | Program output: -9                 
Correct output: 18                  | Program output: 98                 
Correct output: -5                  | Program output: 47                 
Correct output: 100                 | Program output: 100                
Correct output: -19                 | Program output: -19                
Correct output: -31                 | Program output: -31                
Correct output: 10                  | Program output: 10                 
Correct output: 47                  | Program output: 47                 
Correct output: 17                  | Program output: 87                 
Correct output: 1                   | Program output: 29                 
Correct output: 0                   | Program output: 67                 
Correct output: 14                  | Program output: 40                 
Correct output: 7                   | Program output: 60                 
Correct output: 1                   | Program output: 1                  
Correct output: 36                  | Program output: 44                 
Correct output: 14                  | Program output: 30                 
Correct output: 13                  | Program output: 57                 
Correct output: 1                   | Program output: 76                 
Correct output: 20                  | Program output: 56                 
Correct output: 28                  | Program output: 66                 
Correct output: 22                  | Program output: 22                 
Correct output: 19                  | Program output: 19                 
Correct output: 33                  | Program output: 33                 
Correct output: 14                  | Program output: 44                 
Correct output: 23                  | Program output: 27                 
Correct output: 0                   | Program output: 0                  
Correct output: 16                  | Program output: 16                 
Correct output: 4                   | Program output: 30                 
Correct output: -87                 | Program output: 15                 
Correct output: -21                 | Program output: 10                 
Correct output: -94                 | Program output: -48                
Correct output: -99                 | Program output: 72                 
Correct output: -65                 | Program output: -60                
Correct output: -65                 | Program output: -65                
Correct output: -81                 | Program output: -81                
Correct output: -99                 | Program output: -16                
Correct output: -86                 | Program output: -81                
Correct output: -30                 | Program output: 25                 
Correct output: 15                  | Program output: 15                 
Correct output: -46                 | Program output: -7                 
Correct output: 8                   | Program output: 42                 
Correct output: 16                  | Program output: 16                 
Correct output: -48                 | Program output: 22                 
Correct output: -79                 | Program output: -79                
Correct output: -91                 | Program output: 52                 
Correct output: -82                 | Program output: -80                
Correct output: -55                 | Program output: 37                 
Correct output: -51                 | Program output: -9                 
Correct output: -40                 | Program output: -24                
Correct output: -26                 | Program output: 14                 
Correct output: -65                 | Program output: -21                
Correct output: -71                 | Program output: 31                 
Correct output: -40                 | Program output: 54                 
Correct output: -84                 | Program output: 69                 
Correct output: -87                 | Program output: 22                 
Correct output: -56                 | Program output: -22                
Correct output: -43                 | Program output: -43                
Correct output: -61                 | Program output: -61                
Correct output: -25                 | Program output: 84                 
Correct output: -67                 | Program output: 92                 
Correct output: 46                  | Program output: 69                 
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: 72                 
Correct output: 15                  | Program output: 15                 
Correct output: -78                 | Program output: 69                 
Correct output: -99                 | Program output: -99                
Correct output: 7                   | Program output: 64                 
Correct output: -52                 | Program output: -52                
Correct output: -21                 | Program output: -21                
Correct output: -48                 | Program output: 28                 
Correct output: -89                 | Program output: 47                 
Correct output: 28                  | Program output: 48                 
Correct output: 26                  | Program output: 51                 
Correct output: -88                 | Program output: -88                
Correct output: -99                 | Program output: -99                
Correct output: -83                 | Program output: -83                
Correct output: -89                 | Program output: 48                 
Correct output: -88                 | Program output: 11                 
Correct output: -57                 | Program output: -57                
Correct output: -74                 | Program output: -50                
Correct output: -64                 | Program output: 14                 
Correct output: -93                 | Program output: 7                  
Correct output: -73                 | Program output: -9                 
Correct output: -88                 | Program output: -88                
Correct output: -39                 | Program output: 16                 
Correct output: -48                 | Program output: 86                 
Correct output: -79                 | Program output: 25                 
Correct output: 13                  | Program output: 87                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 1, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_when} {:close 2, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 2, :instruction integer_div} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction integer_eq} {:close 1, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_eq} {:close 1, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction tag_exec_279} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_while} {:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_div} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_rot} {:close 2, :instruction boolean_swap} {:close 0, :instruction boolean_invert_first_then_and})
Lexicase best program: (integer_min in3 boolean_not boolean_flush exec_rot (integer_dup_items) (exec_swap (integer_dup_items print_integer boolean_eq exec_when (exec_shove ()) print_integer exec_y (integer_div)) (boolean_invert_first_then_and exec_dup_times (exec_yankdup integer_eq in3 integer_eq in3) print_integer) integer_shove integer_inc exec_s_when_autoconstructing (exec_yankdup integer_eq in3) (print_integer) (exec_do*while (tag_exec_279 (exec_s (boolean_or exec_while () in1) (boolean_eq integer_div) (exec_flush boolean_xor boolean_stackdepth exec_rot (boolean_swap) () (boolean_invert_first_then_and)))))) ())
Lexicase best errors: [1 0 0 0 0 0 0 1 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 66
Percent parens: 0.333
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 1, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_when} {:close 2, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 2, :instruction integer_div} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction integer_eq} {:close 1, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_eq} {:close 1, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction tag_exec_279} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_while} {:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_div} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_rot} {:close 2, :instruction boolean_swap} {:close 0, :instruction boolean_invert_first_then_and})
Zero cases best program: (integer_min in3 boolean_not boolean_flush exec_rot (integer_dup_items) (exec_swap (integer_dup_items print_integer boolean_eq exec_when (exec_shove ()) print_integer exec_y (integer_div)) (boolean_invert_first_then_and exec_dup_times (exec_yankdup integer_eq in3 integer_eq in3) print_integer) integer_shove integer_inc exec_s_when_autoconstructing (exec_yankdup integer_eq in3) (print_integer) (exec_do*while (tag_exec_279 (exec_s (boolean_or exec_while () in1) (boolean_eq integer_div) (exec_flush boolean_xor boolean_stackdepth exec_rot (boolean_swap) () (boolean_invert_first_then_and)))))) ())
Zero cases best errors: [1 0 0 0 0 0 0 1 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 66
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (257 874 350 340 350 355 622 266 265 350)
Population mean number of elite cases: 4.03
Count of perfect (error zero) individuals by case: (257 874 350 340 350 355 622 266 265 350)
Population mean number of perfect (error zero) cases: 4.03
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_when} {:close 2, :instruction exec_shove} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction boolean_swap} {:close 1, :instruction integer_gt})
Best program: (integer_min in3 boolean_not boolean_flush exec_swap (integer_dup_items) (exec_swap (integer_dup_items print_integer boolean_eq exec_when (exec_shove ()) exec_yank) (boolean_invert_second_then_and in2) in2 boolean_swap) integer_gt)
Errors: [1 0 0 0 0 0 0 1 1 0]
Total: 3
Mean: 0.3
Genome size: 18
Size: 25
Percent parens: 0.280
--- Population Statistics ---
Average total errors in population: 5.971
Median total errors in population: 6
Error averages by case: (0.743 0.126 0.65 0.66 0.65 0.645 0.378 0.734 0.735 0.65)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.075
Average program size in population (points): 59.689
Average percent parens in population: 0.333
Minimum age in population: 18.9921875
Maximum age in population: 23.75946044921875
Average age in population: 22.1175419921875
Median age in population: 22.171630859375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 100
Genome diversity (% unique genomes):	 0.628
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 101
Syntactic diversity (% unique Push programs):	 0.623
Total error diversity:				 0.007
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.048
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 7959949
--- Timings ---
Current time: 1559314680625 milliseconds
Total Time:          47.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        32.2 seconds, 67.8%
Fitness Testing:      9.2 seconds, 19.5%
Report:               5.9 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 664
Test mean error for best: 0.66400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -74                 | Program output: -74                
Correct output: -23                 | Program output: -23                
Correct output: -21                 | Program output: -21                
Correct output: -24                 | Program output: 75                 
Correct output: -58                 | Program output: -58                
Correct output: -50                 | Program output: -50                
Correct output: 14                  | Program output: 33                 
Correct output: -9                  | Program output: -9                 
Correct output: 18                  | Program output: 98                 
Correct output: -5                  | Program output: 47                 
Correct output: 100                 | Program output: 100                
Correct output: -19                 | Program output: -19                
Correct output: -31                 | Program output: -31                
Correct output: 10                  | Program output: 10                 
Correct output: 47                  | Program output: 47                 
Correct output: 17                  | Program output: 17                 
Correct output: 1                   | Program output: 8                  
Correct output: 0                   | Program output: 0                  
Correct output: 14                  | Program output: 35                 
Correct output: 7                   | Program output: 58                 
Correct output: 1                   | Program output: 87                 
Correct output: 36                  | Program output: 69                 
Correct output: 14                  | Program output: 69                 
Correct output: 13                  | Program output: 22                 
Correct output: 1                   | Program output: 38                 
Correct output: 20                  | Program output: 20                 
Correct output: 28                  | Program output: 92                 
Correct output: 22                  | Program output: 88                 
Correct output: 19                  | Program output: 77                 
Correct output: 33                  | Program output: 87                 
Correct output: 14                  | Program output: 95                 
Correct output: 23                  | Program output: 93                 
Correct output: 0                   | Program output: 60                 
Correct output: 16                  | Program output: 86                 
Correct output: 4                   | Program output: 74                 
Correct output: -87                 | Program output: -87                
Correct output: -21                 | Program output: 6                  
Correct output: -94                 | Program output: -31                
Correct output: -99                 | Program output: -12                
Correct output: -65                 | Program output: -39                
Correct output: -65                 | Program output: -35                
Correct output: -81                 | Program output: 37                 
Correct output: -99                 | Program output: 50                 
Correct output: -86                 | Program output: 93                 
Correct output: -30                 | Program output: 29                 
Correct output: 15                  | Program output: 23                 
Correct output: -46                 | Program output: -46                
Correct output: 8                   | Program output: 23                 
Correct output: 16                  | Program output: 55                 
Correct output: -48                 | Program output: 80                 
Correct output: -79                 | Program output: 88                 
Correct output: -91                 | Program output: 58                 
Correct output: -82                 | Program output: -82                
Correct output: -55                 | Program output: -55                
Correct output: -51                 | Program output: -51                
Correct output: -40                 | Program output: -40                
Correct output: -26                 | Program output: -26                
Correct output: -65                 | Program output: -65                
Correct output: -71                 | Program output: -71                
Correct output: -40                 | Program output: 12                 
Correct output: -84                 | Program output: -84                
Correct output: -87                 | Program output: 100                
Correct output: -56                 | Program output: -33                
Correct output: -43                 | Program output: 29                 
Correct output: -61                 | Program output: -15                
Correct output: -25                 | Program output: -25                
Correct output: -67                 | Program output: -43                
Correct output: 46                  | Program output: 46                 
Correct output: -53                 | Program output: 52                 
Correct output: -55                 | Program output: -55                
Correct output: 15                  | Program output: 93                 
Correct output: -78                 | Program output: -78                
Correct output: -99                 | Program output: -78                
Correct output: 7                   | Program output: 24                 
Correct output: -52                 | Program output: -13                
Correct output: -21                 | Program output: 7                  
Correct output: -48                 | Program output: -39                
Correct output: -89                 | Program output: 92                 
Correct output: 28                  | Program output: 83                 
Correct output: 26                  | Program output: 26                 
Correct output: -88                 | Program output: 96                 
Correct output: -99                 | Program output: 21                 
Correct output: -83                 | Program output: 16                 
Correct output: -89                 | Program output: 61                 
Correct output: -88                 | Program output: -66                
Correct output: -57                 | Program output: 19                 
Correct output: -74                 | Program output: -74                
Correct output: -64                 | Program output: 20                 
Correct output: -93                 | Program output: 81                 
Correct output: -73                 | Program output: 67                 
Correct output: -88                 | Program output: 2                  
Correct output: -39                 | Program output: 31                 
Correct output: -48                 | Program output: -45                
Correct output: -79                 | Program output: -79                
Correct output: 13                  | Program output: 13                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 1, :instruction integer_div} {:close 1, :instruction exec_k} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 2, :instruction integer_div} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_inc} {:close 1, :instruction in1} {:close 1, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction tag_exec_279} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_or} {:close 2, :instruction boolean_yankdup} {:close 2, :instruction exec_k} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_rot} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_y} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_if} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_gt})
Lexicase best program: (boolean_dup_items exec_s (boolean_shove boolean_yankdup in2 integer_pop boolean_shove boolean_yankdup in2 integer_div) (exec_k () (integer_dup_items integer_sub) integer_dup_times print_integer exec_y (integer_div)) (boolean_invert_first_then_and exec_dup_times (exec_yankdup) integer_inc in1) print_integer exec_do*while (tag_exec_279 (exec_s (boolean_or boolean_yankdup) () (exec_k () () boolean_stackdepth exec_empty exec_rot () (integer_dec) (exec_s_when_autoconstructing (integer_yank) (integer_yank) (exec_y (print_boolean) exec_if (exec_s_when_autoconstructing (integer_shove integer_shove integer_lt) (exec_yankdup in2) (boolean_yankdup integer_stackdepth integer_gt)) ()))))))
Lexicase best errors: [0 0 0 0 0 1 1 1 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 75
Percent parens: 0.360
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 1, :instruction integer_div} {:close 1, :instruction exec_k} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 2, :instruction integer_div} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_inc} {:close 1, :instruction in1} {:close 1, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction tag_exec_279} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_or} {:close 2, :instruction boolean_yankdup} {:close 2, :instruction exec_k} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_rot} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_y} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_if} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_gt})
Zero cases best program: (boolean_dup_items exec_s (boolean_shove boolean_yankdup in2 integer_pop boolean_shove boolean_yankdup in2 integer_div) (exec_k () (integer_dup_items integer_sub) integer_dup_times print_integer exec_y (integer_div)) (boolean_invert_first_then_and exec_dup_times (exec_yankdup) integer_inc in1) print_integer exec_do*while (tag_exec_279 (exec_s (boolean_or boolean_yankdup) () (exec_k () () boolean_stackdepth exec_empty exec_rot () (integer_dec) (exec_s_when_autoconstructing (integer_yank) (integer_yank) (exec_y (print_boolean) exec_if (exec_s_when_autoconstructing (integer_shove integer_shove integer_lt) (exec_yankdup in2) (boolean_yankdup integer_stackdepth integer_gt)) ()))))))
Zero cases best errors: [0 0 0 0 0 1 1 1 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 75
Percent parens: 0.360
--- Lexicase Population Statistics ---
Count of elite individuals by case: (870 142 870 141 870 2 224 492 141 504)
Population mean number of elite cases: 4.26
Count of perfect (error zero) individuals by case: (870 142 870 141 870 2 224 492 141 504)
Population mean number of perfect (error zero) cases: 4.26
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_div} {:close 1, :instruction exec_k} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 2, :instruction integer_div} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_inc} {:close 1, :instruction in1} {:close 1, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction tag_exec_279} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_or} {:close 2, :instruction boolean_yankdup} {:close 2, :instruction exec_k} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_rot} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_y} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_if} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_gt})
Best program: (boolean_dup_items exec_s (boolean_shove boolean_yankdup boolean_yankdup integer_lte integer_div) (exec_k () (integer_dup_items integer_sub) integer_dup_times print_integer exec_y (integer_div)) (boolean_invert_first_then_and exec_dup_times (exec_yankdup) integer_inc in1) print_integer exec_do*while (tag_exec_279 (exec_s (boolean_or boolean_yankdup) () (exec_k () () boolean_stackdepth exec_empty exec_rot () (integer_dec) (exec_s_when_autoconstructing (integer_yank) (integer_yank) (exec_y (print_boolean) exec_if (exec_s_when_autoconstructing (integer_shove integer_shove integer_lt) (exec_yankdup in2) (boolean_yankdup integer_stackdepth integer_shove integer_lt) exec_yankdup in2) (boolean_yankdup integer_stackdepth integer_gt)))))))
Errors: [0 0 0 0 0 1 1 1 0 1]
Total: 4
Mean: 0.4
Genome size: 51
Size: 78
Percent parens: 0.346
--- Population Statistics ---
Average total errors in population: 5.744
Median total errors in population: 5
Error averages by case: (0.13 0.858 0.13 0.859 0.13 0.998 0.776 0.508 0.859 0.496)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.453
Average program size in population (points): 53.658
Average percent parens in population: 0.322
Minimum age in population: 21.0665283203125
Maximum age in population: 25.59304809570312
Average age in population: 23.72710458374023
Median age in population: 23.77085876464844
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 53
Genome diversity (% unique genomes):	 0.627
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 59
Syntactic diversity (% unique Push programs):	 0.62
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.041
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 8540662
--- Timings ---
Current time: 1559314683714 milliseconds
Total Time:          50.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        34.0 seconds, 67.9%
Fitness Testing:      9.8 seconds, 19.6%
Report:               6.2 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Smallest problem report - generation 17
Test total error for best: 665
Test mean error for best: 0.66500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -74                 | Program output: -74                
Correct output: -23                 | Program output: -23                
Correct output: -21                 | Program output: -11                
Correct output: -24                 | Program output: -24                
Correct output: -58                 | Program output: -58                
Correct output: -50                 | Program output: 43                 
Correct output: 14                  | Program output: 14                 
Correct output: -9                  | Program output: -9                 
Correct output: 18                  | Program output: 98                 
Correct output: -5                  | Program output: 47                 
Correct output: 100                 | Program output: 100                
Correct output: -19                 | Program output: -19                
Correct output: -31                 | Program output: -31                
Correct output: 10                  | Program output: 10                 
Correct output: 47                  | Program output: 47                 
Correct output: 17                  | Program output: 87                 
Correct output: 1                   | Program output: 29                 
Correct output: 0                   | Program output: 67                 
Correct output: 14                  | Program output: 40                 
Correct output: 7                   | Program output: 60                 
Correct output: 1                   | Program output: 1                  
Correct output: 36                  | Program output: 44                 
Correct output: 14                  | Program output: 30                 
Correct output: 13                  | Program output: 57                 
Correct output: 1                   | Program output: 76                 
Correct output: 20                  | Program output: 56                 
Correct output: 28                  | Program output: 66                 
Correct output: 22                  | Program output: 22                 
Correct output: 19                  | Program output: 19                 
Correct output: 33                  | Program output: 33                 
Correct output: 14                  | Program output: 44                 
Correct output: 23                  | Program output: 27                 
Correct output: 0                   | Program output: 0                  
Correct output: 16                  | Program output: 16                 
Correct output: 4                   | Program output: 30                 
Correct output: -87                 | Program output: 15                 
Correct output: -21                 | Program output: 10                 
Correct output: -94                 | Program output: -48                
Correct output: -99                 | Program output: 72                 
Correct output: -65                 | Program output: -60                
Correct output: -65                 | Program output: -65                
Correct output: -81                 | Program output: -81                
Correct output: -99                 | Program output: -16                
Correct output: -86                 | Program output: -81                
Correct output: -30                 | Program output: 25                 
Correct output: 15                  | Program output: 15                 
Correct output: -46                 | Program output: -7                 
Correct output: 8                   | Program output: 42                 
Correct output: 16                  | Program output: 16                 
Correct output: -48                 | Program output: 22                 
Correct output: -79                 | Program output: -79                
Correct output: -91                 | Program output: 52                 
Correct output: -82                 | Program output: -80                
Correct output: -55                 | Program output: 37                 
Correct output: -51                 | Program output: -9                 
Correct output: -40                 | Program output: -24                
Correct output: -26                 | Program output: 14                 
Correct output: -65                 | Program output: -21                
Correct output: -71                 | Program output: 31                 
Correct output: -40                 | Program output: 54                 
Correct output: -84                 | Program output: 69                 
Correct output: -87                 | Program output: 22                 
Correct output: -56                 | Program output: -22                
Correct output: -43                 | Program output: -43                
Correct output: -61                 | Program output: -61                
Correct output: -25                 | Program output: 84                 
Correct output: -67                 | Program output: 92                 
Correct output: 46                  | Program output: 69                 
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: 72                 
Correct output: 15                  | Program output: 15                 
Correct output: -78                 | Program output: 69                 
Correct output: -99                 | Program output: -99                
Correct output: 7                   | Program output: 64                 
Correct output: -52                 | Program output: -52                
Correct output: -21                 | Program output: -21                
Correct output: -48                 | Program output: 28                 
Correct output: -89                 | Program output: 47                 
Correct output: 28                  | Program output: 48                 
Correct output: 26                  | Program output: 51                 
Correct output: -88                 | Program output: -88                
Correct output: -99                 | Program output: -99                
Correct output: -83                 | Program output: -83                
Correct output: -89                 | Program output: 48                 
Correct output: -88                 | Program output: 11                 
Correct output: -57                 | Program output: -57                
Correct output: -74                 | Program output: -50                
Correct output: -64                 | Program output: 14                 
Correct output: -93                 | Program output: 7                  
Correct output: -73                 | Program output: -9                 
Correct output: -88                 | Program output: -88                
Correct output: -39                 | Program output: 16                 
Correct output: -48                 | Program output: 86                 
Correct output: -79                 | Program output: 25                 
Correct output: 13                  | Program output: 87                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_flush} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_when} {:close 2, :instruction exec_shove} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in2} {:close 1, :instruction boolean_swap} {:close 1, :instruction integer_gt})
Lexicase best program: (integer_min in3 integer_gt boolean_flush in3 integer_dup_items print_integer boolean_eq exec_when (exec_shove ()) exec_yank boolean_invert_second_then_and boolean_dup_items in2 boolean_swap integer_gt)
Lexicase best errors: [0 1 0 0 1 1 0 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 19
Percent parens: 0.158
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_flush} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_when} {:close 2, :instruction exec_shove} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in2} {:close 1, :instruction boolean_swap} {:close 1, :instruction integer_gt})
Zero cases best program: (integer_min in3 integer_gt boolean_flush in3 integer_dup_items print_integer boolean_eq exec_when (exec_shove ()) exec_yank boolean_invert_second_then_and boolean_dup_items in2 boolean_swap integer_gt)
Zero cases best errors: [0 1 0 0 1 1 0 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 19
Percent parens: 0.158
--- Lexicase Population Statistics ---
Count of elite individuals by case: (297 149 815 297 366 148 301 150 297 297)
Population mean number of elite cases: 3.12
Count of perfect (error zero) individuals by case: (297 149 815 297 366 148 301 150 297 297)
Population mean number of perfect (error zero) cases: 3.12
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 1, :instruction integer_div} {:close 1, :instruction exec_k} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_sub} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_eq} {:close 1, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction tag_exec_279} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_or} {:close 2, :instruction boolean_yankdup} {:close 2, :instruction exec_k} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_rot} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_yank} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_if} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_or} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction tagged_317} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction tag_exec_464} {:close 0, :instruction integer_min} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_when} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yankdup})
Best program: (boolean_dup_items exec_dup (boolean_shove boolean_yankdup in2 integer_div) exec_k () (integer_dup_items integer_sub) exec_yankdup boolean_swap exec_k_when_autoconstructing (exec_yankdup integer_eq in3) (print_integer) exec_do*while (tag_exec_279 (exec_s (boolean_or boolean_yankdup) () (exec_k () () boolean_stackdepth exec_empty exec_rot () (integer_mod) (exec_s_when_autoconstructing (boolean_yank) (integer_yank) (boolean_yankdup integer_yank) exec_if (exec_s_when_autoconstructing (integer_shove integer_shove integer_lt) (exec_yankdup in2) (boolean_yankdup) integer_stackdepth integer_gt) (boolean_yankdup) integer_stackdepth integer_gt) integer_dup_items print_boolean boolean_or) exec_stackdepth) boolean_swap) exec_flush tagged_317 exec_dup_times (integer_shove integer_empty integer_div exec_do*while (boolean_dup_items tag_exec_464 () integer_min integer_inc exec_when (integer_swap boolean_empty integer_gte integer_fromboolean) exec_dup (exec_swap (integer_gt boolean_yankdup) ()))))
Errors: [0 1 0 0 1 1 0 1 0 0]
Total: 4
Mean: 0.4
Genome size: 69
Size: 100
Percent parens: 0.310
--- Population Statistics ---
Average total errors in population: 6.883
Median total errors in population: 8
Error averages by case: (0.703 0.851 0.185 0.703 0.634 0.852 0.699 0.85 0.703 0.703)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.904
Average program size in population (points): 57.413
Average percent parens in population: 0.344
Minimum age in population: 22.633056640625
Maximum age in population: 27.11064147949219
Average age in population: 25.11219888305664
Median age in population: 25.18673706054688
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 45
Genome diversity (% unique genomes):	 0.671
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 45
Syntactic diversity (% unique Push programs):	 0.665
Total error diversity:				 0.006
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.046
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 9173496
--- Timings ---
Current time: 1559314686950 milliseconds
Total Time:          53.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        36.3 seconds, 67.6%
Fitness Testing:     10.4 seconds, 19.4%
Report:               6.9 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Smallest problem report - generation 18
Test total error for best: 665
Test mean error for best: 0.66500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -74                 | Program output: -74                
Correct output: -23                 | Program output: -23                
Correct output: -21                 | Program output: -11                
Correct output: -24                 | Program output: -24                
Correct output: -58                 | Program output: -58                
Correct output: -50                 | Program output: 43                 
Correct output: 14                  | Program output: 14                 
Correct output: -9                  | Program output: -9                 
Correct output: 18                  | Program output: 98                 
Correct output: -5                  | Program output: 47                 
Correct output: 100                 | Program output: 100                
Correct output: -19                 | Program output: -19                
Correct output: -31                 | Program output: -31                
Correct output: 10                  | Program output: 10                 
Correct output: 47                  | Program output: 47                 
Correct output: 17                  | Program output: 87                 
Correct output: 1                   | Program output: 29                 
Correct output: 0                   | Program output: 67                 
Correct output: 14                  | Program output: 40                 
Correct output: 7                   | Program output: 60                 
Correct output: 1                   | Program output: 1                  
Correct output: 36                  | Program output: 44                 
Correct output: 14                  | Program output: 30                 
Correct output: 13                  | Program output: 57                 
Correct output: 1                   | Program output: 76                 
Correct output: 20                  | Program output: 56                 
Correct output: 28                  | Program output: 66                 
Correct output: 22                  | Program output: 22                 
Correct output: 19                  | Program output: 19                 
Correct output: 33                  | Program output: 33                 
Correct output: 14                  | Program output: 44                 
Correct output: 23                  | Program output: 27                 
Correct output: 0                   | Program output: 0                  
Correct output: 16                  | Program output: 16                 
Correct output: 4                   | Program output: 30                 
Correct output: -87                 | Program output: 15                 
Correct output: -21                 | Program output: 10                 
Correct output: -94                 | Program output: -48                
Correct output: -99                 | Program output: 72                 
Correct output: -65                 | Program output: -60                
Correct output: -65                 | Program output: -65                
Correct output: -81                 | Program output: -81                
Correct output: -99                 | Program output: -16                
Correct output: -86                 | Program output: -81                
Correct output: -30                 | Program output: 25                 
Correct output: 15                  | Program output: 15                 
Correct output: -46                 | Program output: -7                 
Correct output: 8                   | Program output: 42                 
Correct output: 16                  | Program output: 16                 
Correct output: -48                 | Program output: 22                 
Correct output: -79                 | Program output: -79                
Correct output: -91                 | Program output: 52                 
Correct output: -82                 | Program output: -80                
Correct output: -55                 | Program output: 37                 
Correct output: -51                 | Program output: -9                 
Correct output: -40                 | Program output: -24                
Correct output: -26                 | Program output: 14                 
Correct output: -65                 | Program output: -21                
Correct output: -71                 | Program output: 31                 
Correct output: -40                 | Program output: 54                 
Correct output: -84                 | Program output: 69                 
Correct output: -87                 | Program output: 22                 
Correct output: -56                 | Program output: -22                
Correct output: -43                 | Program output: -43                
Correct output: -61                 | Program output: -61                
Correct output: -25                 | Program output: 84                 
Correct output: -67                 | Program output: 92                 
Correct output: 46                  | Program output: 69                 
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: 72                 
Correct output: 15                  | Program output: 15                 
Correct output: -78                 | Program output: 69                 
Correct output: -99                 | Program output: -99                
Correct output: 7                   | Program output: 64                 
Correct output: -52                 | Program output: -52                
Correct output: -21                 | Program output: -21                
Correct output: -48                 | Program output: 28                 
Correct output: -89                 | Program output: 47                 
Correct output: 28                  | Program output: 48                 
Correct output: 26                  | Program output: 51                 
Correct output: -88                 | Program output: -88                
Correct output: -99                 | Program output: -99                
Correct output: -83                 | Program output: -83                
Correct output: -89                 | Program output: 48                 
Correct output: -88                 | Program output: 11                 
Correct output: -57                 | Program output: -57                
Correct output: -74                 | Program output: -50                
Correct output: -64                 | Program output: 14                 
Correct output: -93                 | Program output: 7                  
Correct output: -73                 | Program output: -9                 
Correct output: -88                 | Program output: -88                
Correct output: -39                 | Program output: 16                 
Correct output: -48                 | Program output: 86                 
Correct output: -79                 | Program output: 25                 
Correct output: 13                  | Program output: 87                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_when} {:close 2, :instruction exec_shove} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_gt})
Lexicase best program: (integer_min in3 boolean_not boolean_flush exec_swap (integer_dup_items) (exec_swap (integer_dup_items print_integer boolean_eq exec_when (exec_shove ()) exec_yank) (boolean_invert_second_then_and in2) in2 boolean_swap) integer_gt)
Lexicase best errors: [1 1 1 1 0 1 1 1 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 8
Lexicase best mean error: 0.8
Lexicase best size: 25
Percent parens: 0.280
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_when} {:close 2, :instruction exec_shove} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_gt})
Zero cases best program: (integer_min in3 boolean_not boolean_flush exec_swap (integer_dup_items) (exec_swap (integer_dup_items print_integer boolean_eq exec_when (exec_shove ()) exec_yank) (boolean_invert_second_then_and in2) in2 boolean_swap) integer_gt)
Zero cases best errors: [1 1 1 1 0 1 1 1 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 2
Zero cases best total error: 8
Zero cases best mean error: 0.8
Zero cases best size: 25
Percent parens: 0.280
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 321 1000 91 469 1000 1000 321 91 469)
Population mean number of elite cases: 5.76
Count of perfect (error zero) individuals by case: (0 321 0 91 469 0 0 321 91 469)
Population mean number of perfect (error zero) cases: 1.76
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 1, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_dup_items} {:close 1, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction tag_exec_279} {:close 0, :instruction in3} {:close 0, :instruction exec_rot} {:close 2, :instruction boolean_yankdup} {:close 2, :instruction exec_k} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_rot} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_s_when_autoconstructing})
Best program: (integer_min in3 boolean_not boolean_flush exec_rot (integer_dup_items) (in3) (print_integer) exec_do*while (tag_exec_279 (in3 exec_rot (boolean_yankdup) () (exec_k () () boolean_stackdepth exec_empty exec_rot () (integer_mod) (exec_s_when_autoconstructing () () ())))))
Errors: [1 1 1 1 0 1 1 1 1 0]
Total: 8
Mean: 0.8
Genome size: 19
Size: 36
Percent parens: 0.472
--- Population Statistics ---
Average total errors in population: 8.238
Median total errors in population: 8
Error averages by case: (1.0 0.679 1.0 0.909 0.531 1.0 1.0 0.679 0.909 0.531)
Error minima by case: (1 0 1 0 0 1 1 0 0 0)
Average genome size in population (length): 33.488
Average program size in population (points): 50.697
Average percent parens in population: 0.321
Minimum age in population: 23.633056640625
Maximum age in population: 28.51972961425781
Average age in population: 26.72560982513428
Median age in population: 26.79993057250977
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 47
Genome diversity (% unique genomes):	 0.674
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 48
Syntactic diversity (% unique Push programs):	 0.67
Total error diversity:				 0.002
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.037
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 9758894
--- Timings ---
Current time: 1559314689764 milliseconds
Total Time:          56.6 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        38.4 seconds, 67.7%
Fitness Testing:     11.0 seconds, 19.4%
Report:               7.2 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Smallest problem report - generation 19
Test total error for best: 665
Test mean error for best: 0.66500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -74                 | Program output: -74                
Correct output: -23                 | Program output: -23                
Correct output: -21                 | Program output: -11                
Correct output: -24                 | Program output: -24                
Correct output: -58                 | Program output: -58                
Correct output: -50                 | Program output: 43                 
Correct output: 14                  | Program output: 14                 
Correct output: -9                  | Program output: -9                 
Correct output: 18                  | Program output: 98                 
Correct output: -5                  | Program output: 47                 
Correct output: 100                 | Program output: 100                
Correct output: -19                 | Program output: -19                
Correct output: -31                 | Program output: -31                
Correct output: 10                  | Program output: 10                 
Correct output: 47                  | Program output: 47                 
Correct output: 17                  | Program output: 87                 
Correct output: 1                   | Program output: 29                 
Correct output: 0                   | Program output: 67                 
Correct output: 14                  | Program output: 40                 
Correct output: 7                   | Program output: 60                 
Correct output: 1                   | Program output: 1                  
Correct output: 36                  | Program output: 44                 
Correct output: 14                  | Program output: 30                 
Correct output: 13                  | Program output: 57                 
Correct output: 1                   | Program output: 76                 
Correct output: 20                  | Program output: 56                 
Correct output: 28                  | Program output: 66                 
Correct output: 22                  | Program output: 22                 
Correct output: 19                  | Program output: 19                 
Correct output: 33                  | Program output: 33                 
Correct output: 14                  | Program output: 44                 
Correct output: 23                  | Program output: 27                 
Correct output: 0                   | Program output: 0                  
Correct output: 16                  | Program output: 16                 
Correct output: 4                   | Program output: 30                 
Correct output: -87                 | Program output: 15                 
Correct output: -21                 | Program output: 10                 
Correct output: -94                 | Program output: -48                
Correct output: -99                 | Program output: 72                 
Correct output: -65                 | Program output: -60                
Correct output: -65                 | Program output: -65                
Correct output: -81                 | Program output: -81                
Correct output: -99                 | Program output: -16                
Correct output: -86                 | Program output: -81                
Correct output: -30                 | Program output: 25                 
Correct output: 15                  | Program output: 15                 
Correct output: -46                 | Program output: -7                 
Correct output: 8                   | Program output: 42                 
Correct output: 16                  | Program output: 16                 
Correct output: -48                 | Program output: 22                 
Correct output: -79                 | Program output: -79                
Correct output: -91                 | Program output: 52                 
Correct output: -82                 | Program output: -80                
Correct output: -55                 | Program output: 37                 
Correct output: -51                 | Program output: -9                 
Correct output: -40                 | Program output: -24                
Correct output: -26                 | Program output: 14                 
Correct output: -65                 | Program output: -21                
Correct output: -71                 | Program output: 31                 
Correct output: -40                 | Program output: 54                 
Correct output: -84                 | Program output: 69                 
Correct output: -87                 | Program output: 22                 
Correct output: -56                 | Program output: -22                
Correct output: -43                 | Program output: -43                
Correct output: -61                 | Program output: -61                
Correct output: -25                 | Program output: 84                 
Correct output: -67                 | Program output: 92                 
Correct output: 46                  | Program output: 69                 
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: 72                 
Correct output: 15                  | Program output: 15                 
Correct output: -78                 | Program output: 69                 
Correct output: -99                 | Program output: -99                
Correct output: 7                   | Program output: 64                 
Correct output: -52                 | Program output: -52                
Correct output: -21                 | Program output: -21                
Correct output: -48                 | Program output: 28                 
Correct output: -89                 | Program output: 47                 
Correct output: 28                  | Program output: 48                 
Correct output: 26                  | Program output: 51                 
Correct output: -88                 | Program output: -88                
Correct output: -99                 | Program output: -99                
Correct output: -83                 | Program output: -83                
Correct output: -89                 | Program output: 48                 
Correct output: -88                 | Program output: 11                 
Correct output: -57                 | Program output: -57                
Correct output: -74                 | Program output: -50                
Correct output: -64                 | Program output: 14                 
Correct output: -93                 | Program output: 7                  
Correct output: -73                 | Program output: -9                 
Correct output: -88                 | Program output: -88                
Correct output: -39                 | Program output: 16                 
Correct output: -48                 | Program output: 86                 
Correct output: -79                 | Program output: 25                 
Correct output: 13                  | Program output: 87                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_when} {:close 1, :instruction exec_shove} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction boolean_swap} {:close 1, :instruction exec_while})
Lexicase best program: (integer_min in3 boolean_not boolean_flush exec_rot (integer_stackdepth) (exec_swap (integer_dup_items print_integer boolean_eq exec_when (exec_shove () exec_yank) boolean_invert_second_then_and in2 in2 boolean_swap) (exec_while ())) ())
Lexicase best errors: [0 0 1 0 0 1 1 1 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 27
Percent parens: 0.333
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_when} {:close 1, :instruction exec_shove} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction boolean_swap} {:close 1, :instruction exec_while})
Zero cases best program: (integer_min in3 boolean_not boolean_flush exec_rot (integer_stackdepth) (exec_swap (integer_dup_items print_integer boolean_eq exec_when (exec_shove () exec_yank) boolean_invert_second_then_and in2 in2 boolean_swap) (exec_while ())) ())
Zero cases best errors: [0 0 1 0 0 1 1 1 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 27
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (319 319 293 307 310 1000 283 576 319 292)
Population mean number of elite cases: 4.02
Count of perfect (error zero) individuals by case: (319 319 293 307 310 0 283 576 319 292)
Population mean number of perfect (error zero) cases: 3.02
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_when} {:close 1, :instruction exec_shove} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction boolean_swap} {:close 1, :instruction exec_while})
Best program: (integer_min in3 boolean_not boolean_flush exec_rot (integer_stackdepth) (exec_swap (integer_dup_items print_integer boolean_eq exec_when (exec_shove () exec_yank) boolean_invert_second_then_and in2 in2 boolean_swap) (exec_while ())) ())
Errors: [0 0 1 0 0 1 1 1 0 1]
Total: 5
Mean: 0.5
Genome size: 18
Size: 27
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 6.982
Median total errors in population: 7
Error averages by case: (0.681 0.681 0.707 0.693 0.69 1.0 0.717 0.424 0.681 0.708)
Error minima by case: (0 0 0 0 0 1 0 0 0 0)
Average genome size in population (length): 34.275
Average program size in population (points): 52.885
Average percent parens in population: 0.337
Minimum age in population: 25.27911376953125
Maximum age in population: 30.14898681640625
Average age in population: 28.23725171279907
Median age in population: 28.27587127685547
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 24
Genome diversity (% unique genomes):	 0.684
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 24
Syntactic diversity (% unique Push programs):	 0.673
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.042
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 10326573
--- Timings ---
Current time: 1559314692753 milliseconds
Total Time:          59.6 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        40.6 seconds, 68.1%
Fitness Testing:     11.6 seconds, 19.4%
Report:               7.4 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Smallest problem report - generation 20
Test total error for best: 665
Test mean error for best: 0.66500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -74                 | Program output: -74                
Correct output: -23                 | Program output: -23                
Correct output: -21                 | Program output: -11                
Correct output: -24                 | Program output: -24                
Correct output: -58                 | Program output: -58                
Correct output: -50                 | Program output: 43                 
Correct output: 14                  | Program output: 14                 
Correct output: -9                  | Program output: -9                 
Correct output: 18                  | Program output: 98                 
Correct output: -5                  | Program output: 47                 
Correct output: 100                 | Program output: 100                
Correct output: -19                 | Program output: -19                
Correct output: -31                 | Program output: -31                
Correct output: 10                  | Program output: 10                 
Correct output: 47                  | Program output: 47                 
Correct output: 17                  | Program output: 87                 
Correct output: 1                   | Program output: 29                 
Correct output: 0                   | Program output: 67                 
Correct output: 14                  | Program output: 40                 
Correct output: 7                   | Program output: 60                 
Correct output: 1                   | Program output: 1                  
Correct output: 36                  | Program output: 44                 
Correct output: 14                  | Program output: 30                 
Correct output: 13                  | Program output: 57                 
Correct output: 1                   | Program output: 76                 
Correct output: 20                  | Program output: 56                 
Correct output: 28                  | Program output: 66                 
Correct output: 22                  | Program output: 22                 
Correct output: 19                  | Program output: 19                 
Correct output: 33                  | Program output: 33                 
Correct output: 14                  | Program output: 44                 
Correct output: 23                  | Program output: 27                 
Correct output: 0                   | Program output: 0                  
Correct output: 16                  | Program output: 16                 
Correct output: 4                   | Program output: 30                 
Correct output: -87                 | Program output: 15                 
Correct output: -21                 | Program output: 10                 
Correct output: -94                 | Program output: -48                
Correct output: -99                 | Program output: 72                 
Correct output: -65                 | Program output: -60                
Correct output: -65                 | Program output: -65                
Correct output: -81                 | Program output: -81                
Correct output: -99                 | Program output: -16                
Correct output: -86                 | Program output: -81                
Correct output: -30                 | Program output: 25                 
Correct output: 15                  | Program output: 15                 
Correct output: -46                 | Program output: -7                 
Correct output: 8                   | Program output: 42                 
Correct output: 16                  | Program output: 16                 
Correct output: -48                 | Program output: 22                 
Correct output: -79                 | Program output: -79                
Correct output: -91                 | Program output: 52                 
Correct output: -82                 | Program output: -80                
Correct output: -55                 | Program output: 37                 
Correct output: -51                 | Program output: -9                 
Correct output: -40                 | Program output: -24                
Correct output: -26                 | Program output: 14                 
Correct output: -65                 | Program output: -21                
Correct output: -71                 | Program output: 31                 
Correct output: -40                 | Program output: 54                 
Correct output: -84                 | Program output: 69                 
Correct output: -87                 | Program output: 22                 
Correct output: -56                 | Program output: -22                
Correct output: -43                 | Program output: -43                
Correct output: -61                 | Program output: -61                
Correct output: -25                 | Program output: 84                 
Correct output: -67                 | Program output: 92                 
Correct output: 46                  | Program output: 69                 
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: 72                 
Correct output: 15                  | Program output: 15                 
Correct output: -78                 | Program output: 69                 
Correct output: -99                 | Program output: -99                
Correct output: 7                   | Program output: 64                 
Correct output: -52                 | Program output: -52                
Correct output: -21                 | Program output: -21                
Correct output: -48                 | Program output: 28                 
Correct output: -89                 | Program output: 47                 
Correct output: 28                  | Program output: 48                 
Correct output: 26                  | Program output: 51                 
Correct output: -88                 | Program output: -88                
Correct output: -99                 | Program output: -99                
Correct output: -83                 | Program output: -83                
Correct output: -89                 | Program output: 48                 
Correct output: -88                 | Program output: 11                 
Correct output: -57                 | Program output: -57                
Correct output: -74                 | Program output: -50                
Correct output: -64                 | Program output: 14                 
Correct output: -93                 | Program output: 7                  
Correct output: -73                 | Program output: -9                 
Correct output: -88                 | Program output: -88                
Correct output: -39                 | Program output: 16                 
Correct output: -48                 | Program output: 86                 
Correct output: -79                 | Program output: 25                 
Correct output: 13                  | Program output: 87                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_when} {:close 2, :instruction exec_shove} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction boolean_swap} {:close 1, :instruction integer_gt})
Lexicase best program: (integer_min in3 boolean_not boolean_flush exec_swap (integer_dup_items) (exec_swap (integer_dup_items print_integer boolean_eq exec_when (exec_shove ()) exec_yank) (boolean_invert_second_then_and in2) in2 boolean_swap) integer_gt)
Lexicase best errors: [0 0 1 1 0 0 1 0 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 25
Percent parens: 0.280
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_when} {:close 2, :instruction exec_shove} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction boolean_swap} {:close 1, :instruction integer_gt})
Zero cases best program: (integer_min in3 boolean_not boolean_flush exec_swap (integer_dup_items) (exec_swap (integer_dup_items print_integer boolean_eq exec_when (exec_shove ()) exec_yank) (boolean_invert_second_then_and in2) in2 boolean_swap) integer_gt)
Zero cases best errors: [0 0 1 1 0 0 1 0 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 25
Percent parens: 0.280
--- Lexicase Population Statistics ---
Count of elite individuals by case: (436 620 243 467 436 890 233 622 1000 1000)
Population mean number of elite cases: 5.95
Count of perfect (error zero) individuals by case: (436 620 243 467 436 890 233 622 0 0)
Population mean number of perfect (error zero) cases: 3.95
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 2, :instruction integer_div} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction tag_exec_279} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_or} {:close 2, :instruction boolean_yankdup} {:close 2, :instruction exec_k} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_rot} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_yank} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_if} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tagged_907} {:close 0, :instruction integer_yank} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_or} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction tagged_317} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction tag_exec_464} {:close 0, :instruction integer_min} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_when} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yankdup})
Best program: (integer_min in3 integer_gt boolean_flush integer_sub integer_dup_times print_integer exec_y (integer_div) boolean_invert_first_then_and print_integer exec_do*while (tag_exec_279 (exec_s (boolean_or boolean_yankdup) () (exec_k () () boolean_stackdepth exec_empty exec_rot () (integer_mod) (exec_s_when_autoconstructing (boolean_yank) (integer_yank) (boolean_yankdup integer_yank) exec_if (exec_s_when_autoconstructing (integer_shove integer_shove integer_lt) (exec_yankdup in2) (boolean_yankdup) integer_stackdepth integer_gt) (boolean_yankdup) integer_stackdepth tagged_907) integer_yank print_boolean boolean_or) exec_stackdepth) boolean_swap) exec_flush tagged_317 exec_dup_times (integer_shove integer_empty integer_div exec_do*while (boolean_dup_items tag_exec_464 () integer_min integer_inc exec_when (integer_swap boolean_empty integer_gte integer_fromboolean) exec_dup (exec_swap (integer_gt boolean_yankdup) ()))))
Errors: [0 0 1 1 0 0 1 0 1 1]
Total: 5
Mean: 0.5
Genome size: 64
Size: 91
Percent parens: 0.297
--- Population Statistics ---
Average total errors in population: 6.053
Median total errors in population: 5
Error averages by case: (0.564 0.38 0.757 0.533 0.564 0.11 0.767 0.378 1.0 1.0)
Error minima by case: (0 0 0 0 0 0 0 0 1 1)
Average genome size in population (length): 29.662
Average program size in population (points): 44.352
Average percent parens in population: 0.309
Minimum age in population: 26.95953369140625
Maximum age in population: 31.51241683959961
Average age in population: 29.60885838127136
Median age in population: 29.70134353637695
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 168
Genome diversity (% unique genomes):	 0.593
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 171
Syntactic diversity (% unique Push programs):	 0.578
Total error diversity:				 0.006
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.047
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 10754297
--- Timings ---
Current time: 1559314695868 milliseconds
Total Time:          62.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        42.6 seconds, 68.4%
Fitness Testing:     12.0 seconds, 19.3%
Report:               7.6 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Smallest problem report - generation 21
Test total error for best: 649
Test mean error for best: 0.64900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -74                 | Program output: -74                
Correct output: -23                 | Program output: -23                
Correct output: -21                 | Program output: -21                
Correct output: -24                 | Program output: -24                
Correct output: -58                 | Program output: -58                
Correct output: -50                 | Program output: -50                
Correct output: 14                  | Program output: 33                 
Correct output: -9                  | Program output: -9                 
Correct output: 18                  | Program output: 98                 
Correct output: -5                  | Program output: -5                 
Correct output: 100                 | Program output: 100                
Correct output: -19                 | Program output: -19                
Correct output: -31                 | Program output: -31                
Correct output: 10                  | Program output: 10                 
Correct output: 47                  | Program output: 47                 
Correct output: 17                  | Program output: 34                 
Correct output: 1                   | Program output: 1                  
Correct output: 0                   | Program output: 20                 
Correct output: 14                  | Program output: 57                 
Correct output: 7                   | Program output: 28                 
Correct output: 1                   | Program output: 46                 
Correct output: 36                  | Program output: 36                 
Correct output: 14                  | Program output: 59                 
Correct output: 13                  | Program output: 13                 
Correct output: 1                   | Program output: 1                  
Correct output: 20                  | Program output: 61                 
Correct output: 28                  | Program output: 41                 
Correct output: 22                  | Program output: 22                 
Correct output: 19                  | Program output: 45                 
Correct output: 33                  | Program output: 73                 
Correct output: 14                  | Program output: 14                 
Correct output: 23                  | Program output: 23                 
Correct output: 0                   | Program output: 20                 
Correct output: 16                  | Program output: 85                 
Correct output: 4                   | Program output: 74                 
Correct output: -87                 | Program output: 78                 
Correct output: -21                 | Program output: -21                
Correct output: -94                 | Program output: -94                
Correct output: -99                 | Program output: -99                
Correct output: -65                 | Program output: -65                
Correct output: -65                 | Program output: 52                 
Correct output: -81                 | Program output: -52                
Correct output: -99                 | Program output: 36                 
Correct output: -86                 | Program output: -86                
Correct output: -30                 | Program output: -30                
Correct output: 15                  | Program output: 53                 
Correct output: -46                 | Program output: 57                 
Correct output: 8                   | Program output: 36                 
Correct output: 16                  | Program output: 52                 
Correct output: -48                 | Program output: 73                 
Correct output: -79                 | Program output: -1                 
Correct output: -91                 | Program output: -91                
Correct output: -82                 | Program output: -46                
Correct output: -55                 | Program output: -9                 
Correct output: -51                 | Program output: 35                 
Correct output: -40                 | Program output: -9                 
Correct output: -26                 | Program output: 82                 
Correct output: -65                 | Program output: -41                
Correct output: -71                 | Program output: -51                
Correct output: -40                 | Program output: -40                
Correct output: -84                 | Program output: -43                
Correct output: -87                 | Program output: 21                 
Correct output: -56                 | Program output: -56                
Correct output: -43                 | Program output: -9                 
Correct output: -61                 | Program output: 75                 
Correct output: -25                 | Program output: 75                 
Correct output: -67                 | Program output: -67                
Correct output: 46                  | Program output: 86                 
Correct output: -53                 | Program output: 85                 
Correct output: -55                 | Program output: -33                
Correct output: 15                  | Program output: 41                 
Correct output: -78                 | Program output: -30                
Correct output: -99                 | Program output: -36                
Correct output: 7                   | Program output: 7                  
Correct output: -52                 | Program output: -43                
Correct output: -21                 | Program output: 37                 
Correct output: -48                 | Program output: 35                 
Correct output: -89                 | Program output: -89                
Correct output: 28                  | Program output: 28                 
Correct output: 26                  | Program output: 65                 
Correct output: -88                 | Program output: -42                
Correct output: -99                 | Program output: -54                
Correct output: -83                 | Program output: 58                 
Correct output: -89                 | Program output: 26                 
Correct output: -88                 | Program output:                    
Correct output: -57                 | Program output: 59                 
Correct output: -74                 | Program output: -65                
Correct output: -64                 | Program output: -64                
Correct output: -93                 | Program output: 69                 
Correct output: -73                 | Program output: 22                 
Correct output: -88                 | Program output: 73                 
Correct output: -39                 | Program output: 29                 
Correct output: -48                 | Program output: -48                
Correct output: -79                 | Program output: -74                
Correct output: 13                  | Program output: 57                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_when} {:close 2, :instruction exec_shove} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_gt})
Lexicase best program: (integer_min in3 boolean_not boolean_flush exec_rot (integer_stackdepth) (exec_swap (integer_dup_items print_integer boolean_eq exec_when (exec_shove ()) exec_yank) (exec_y_when_autoconstructing (in2 in2 in2 exec_yank) boolean_invert_second_then_and in2 in2 boolean_swap integer_gt)) ())
Lexicase best errors: [0 1 0 0 1 0 1 1 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 32
Percent parens: 0.281
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_when} {:close 2, :instruction exec_shove} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_gt})
Zero cases best program: (integer_min in3 boolean_not boolean_flush exec_rot (integer_stackdepth) (exec_swap (integer_dup_items print_integer boolean_eq exec_when (exec_shove ()) exec_yank) (exec_y_when_autoconstructing (in2 in2 in2 exec_yank) boolean_invert_second_then_and in2 in2 boolean_swap integer_gt)) ())
Zero cases best errors: [0 1 0 0 1 0 1 1 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 32
Percent parens: 0.281
--- Lexicase Population Statistics ---
Count of elite individuals by case: (510 1000 894 508 1000 30 195 668 31 1000)
Population mean number of elite cases: 5.84
Count of perfect (error zero) individuals by case: (510 0 894 508 0 30 195 668 31 0)
Population mean number of perfect (error zero) cases: 2.84
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_when} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_gt})
Best program: (integer_min in3 boolean_not boolean_flush exec_rot (integer_stackdepth exec_swap (integer_dup_items print_integer boolean_eq) (exec_when (exec_shove () exec_yank boolean_invert_second_then_and in2 in2 in2 exec_yank) boolean_invert_second_then_and in2 in2 boolean_swap integer_gt)) () ())
Errors: [0 1 0 0 1 0 1 1 0 1]
Total: 5
Mean: 0.5
Genome size: 23
Size: 31
Percent parens: 0.258
--- Population Statistics ---
Average total errors in population: 7.164
Median total errors in population: 8
Error averages by case: (0.49 1.0 0.106 0.492 1.0 0.97 0.805 0.332 0.969 1.0)
Error minima by case: (0 1 0 0 1 0 0 0 0 1)
Average genome size in population (length): 25.325
Average program size in population (points): 34.915
Average percent parens in population: 0.258
Minimum age in population: 28.84199523925781
Maximum age in population: 32.75605010986328
Average age in population: 31.11406525611877
Median age in population: 31.15947723388672
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 226
Genome diversity (% unique genomes):	 0.464
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 229
Syntactic diversity (% unique Push programs):	 0.446
Total error diversity:				 0.006
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.048
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 11074551
--- Timings ---
Current time: 1559314698460 milliseconds
Total Time:          65.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        44.6 seconds, 68.3%
Fitness Testing:     12.3 seconds, 18.9%
Report:               8.2 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Smallest problem report - generation 22
Test total error for best: 541
Test mean error for best: 0.54100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -74                 | Program output: -74                
Correct output: -23                 | Program output: -23                
Correct output: -21                 | Program output: -21                
Correct output: -24                 | Program output: -24                
Correct output: -58                 | Program output: -58                
Correct output: -50                 | Program output: -50                
Correct output: 14                  | Program output: 33                 
Correct output: -9                  | Program output: -9                 
Correct output: 18                  | Program output: 98                 
Correct output: -5                  | Program output: -5                 
Correct output: 100                 | Program output: 100                
Correct output: -19                 | Program output: -19                
Correct output: -31                 | Program output: -31                
Correct output: 10                  | Program output: 10                 
Correct output: 47                  | Program output: 47                 
Correct output: 17                  | Program output: 17                 
Correct output: 1                   | Program output: 1                  
Correct output: 0                   | Program output: 0                  
Correct output: 14                  | Program output: 35                 
Correct output: 7                   | Program output: 58                 
Correct output: 1                   | Program output: 87                 
Correct output: 36                  | Program output: 69                 
Correct output: 14                  | Program output: 69                 
Correct output: 13                  | Program output: 22                 
Correct output: 1                   | Program output: 1                  
Correct output: 20                  | Program output: 20                 
Correct output: 28                  | Program output: 92                 
Correct output: 22                  | Program output: 88                 
Correct output: 19                  | Program output: 77                 
Correct output: 33                  | Program output: 87                 
Correct output: 14                  | Program output: 95                 
Correct output: 23                  | Program output: 93                 
Correct output: 0                   | Program output: 60                 
Correct output: 16                  | Program output: 86                 
Correct output: 4                   | Program output: 74                 
Correct output: -87                 | Program output: -87                
Correct output: -21                 | Program output: -21                
Correct output: -94                 | Program output: -94                
Correct output: -99                 | Program output: -99                
Correct output: -65                 | Program output: -65                
Correct output: -65                 | Program output: -35                
Correct output: -81                 | Program output: -52                
Correct output: -99                 | Program output: 50                 
Correct output: -86                 | Program output: -86                
Correct output: -30                 | Program output: -30                
Correct output: 15                  | Program output: 23                 
Correct output: -46                 | Program output: -46                
Correct output: 8                   | Program output: 23                 
Correct output: 16                  | Program output: 55                 
Correct output: -48                 | Program output: 80                 
Correct output: -79                 | Program output: -1                 
Correct output: -91                 | Program output: -91                
Correct output: -82                 | Program output: -46                
Correct output: -55                 | Program output: -9                 
Correct output: -51                 | Program output: -51                
Correct output: -40                 | Program output: -9                 
Correct output: -26                 | Program output: -26                
Correct output: -65                 | Program output: -41                
Correct output: -71                 | Program output: -51                
Correct output: -40                 | Program output: -40                
Correct output: -84                 | Program output: -43                
Correct output: -87                 | Program output: 100                
Correct output: -56                 | Program output: -56                
Correct output: -43                 | Program output: -9                 
Correct output: -61                 | Program output: -15                
Correct output: -25                 | Program output: -25                
Correct output: -67                 | Program output: -67                
Correct output: 46                  | Program output: 46                 
Correct output: -53                 | Program output: 52                 
Correct output: -55                 | Program output: -33                
Correct output: 15                  | Program output: 93                 
Correct output: -78                 | Program output: -30                
Correct output: -99                 | Program output: -36                
Correct output: 7                   | Program output: 24                 
Correct output: -52                 | Program output: -43                
Correct output: -21                 | Program output: 7                  
Correct output: -48                 | Program output: -39                
Correct output: -89                 | Program output: -89                
Correct output: 28                  | Program output: 83                 
Correct output: 26                  | Program output: 26                 
Correct output: -88                 | Program output: -42                
Correct output: -99                 | Program output: -54                
Correct output: -83                 | Program output: 16                 
Correct output: -89                 | Program output: 61                 
Correct output: -88                 | Program output: -66                
Correct output: -57                 | Program output: 19                 
Correct output: -74                 | Program output: -65                
Correct output: -64                 | Program output: -64                
Correct output: -93                 | Program output: 81                 
Correct output: -73                 | Program output: 67                 
Correct output: -88                 | Program output: 2                  
Correct output: -39                 | Program output: 31                 
Correct output: -48                 | Program output: -48                
Correct output: -79                 | Program output: -74                
Correct output: 13                  | Program output: 13                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_when} {:close 2, :instruction exec_shove} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_gt})
Lexicase best program: (integer_min in3 boolean_not boolean_flush in1 integer_stackdepth exec_swap (integer_dup_items print_integer boolean_eq exec_when (exec_shove ()) exec_yank) (boolean_invert_second_then_and in2 in2 in2 exec_yank) boolean_invert_second_then_and in2 in2 boolean_swap integer_gt)
Lexicase best errors: [1 0 1 0 1 1 1 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 28
Percent parens: 0.179
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_when} {:close 2, :instruction exec_shove} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_gt})
Zero cases best program: (integer_min in3 boolean_not boolean_flush in1 integer_stackdepth exec_swap (integer_dup_items print_integer boolean_eq exec_when (exec_shove ()) exec_yank) (boolean_invert_second_then_and in2 in2 in2 exec_yank) boolean_invert_second_then_and in2 in2 boolean_swap integer_gt)
Zero cases best errors: [1 0 1 0 1 1 1 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 28
Percent parens: 0.179
--- Lexicase Population Statistics ---
Count of elite individuals by case: (25 905 1000 207 1000 25 1000 886 930 207)
Population mean number of elite cases: 6.18
Count of perfect (error zero) individuals by case: (25 905 0 207 0 25 0 886 930 207)
Population mean number of perfect (error zero) cases: 3.18
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_when} {:close 2, :instruction exec_shove} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_gt})
Best program: (integer_min in3 boolean_not boolean_flush boolean_not boolean_flush in1 integer_stackdepth exec_swap (integer_dup_items print_integer boolean_eq exec_when (exec_shove ()) exec_yank) (boolean_invert_second_then_and in2 in2 in2 exec_yank) boolean_invert_second_then_and in2 in2 boolean_swap integer_gt)
Errors: [1 0 1 0 1 1 1 0 0 0]
Total: 5
Mean: 0.5
Genome size: 25
Size: 30
Percent parens: 0.167
--- Population Statistics ---
Average total errors in population: 6.815
Median total errors in population: 7
Error averages by case: (0.975 0.095 1.0 0.793 1.0 0.975 1.0 0.114 0.07 0.793)
Error minima by case: (0 0 1 0 1 0 1 0 0 0)
Average genome size in population (length): 23.91
Average program size in population (points): 30.814
Average percent parens in population: 0.221
Minimum age in population: 30.85043334960938
Maximum age in population: 34.16816997528076
Average age in population: 32.79833546829224
Median age in population: 32.85043334960938
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 248
Genome diversity (% unique genomes):	 0.365
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 251
Syntactic diversity (% unique Push programs):	 0.347
Total error diversity:				 0.006
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.045
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 11313096
--- Timings ---
Current time: 1559314700749 milliseconds
Total Time:          67.6 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        46.4 seconds, 68.7%
Fitness Testing:     12.6 seconds, 18.6%
Report:               8.5 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
;;******************************
;; -*- Smallest problem report - generation 23
Test total error for best: 647
Test mean error for best: 0.64700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -74                 | Program output: -74                
Correct output: -23                 | Program output: -23                
Correct output: -21                 | Program output: -21                
Correct output: -24                 | Program output: -24                
Correct output: -58                 | Program output: -58                
Correct output: -50                 | Program output: -50                
Correct output: 14                  | Program output: 33                 
Correct output: -9                  | Program output: -9                 
Correct output: 18                  | Program output: 98                 
Correct output: -5                  | Program output: -5                 
Correct output: 100                 | Program output: 100                
Correct output: -19                 | Program output: -19                
Correct output: -31                 | Program output: -31                
Correct output: 10                  | Program output: 10                 
Correct output: 47                  | Program output: 47                 
Correct output: 17                  | Program output: 34                 
Correct output: 1                   | Program output: 1                  
Correct output: 0                   | Program output: 20                 
Correct output: 14                  | Program output: 57                 
Correct output: 7                   | Program output: 28                 
Correct output: 1                   | Program output: 46                 
Correct output: 36                  | Program output: 36                 
Correct output: 14                  | Program output: 59                 
Correct output: 13                  | Program output: 13                 
Correct output: 1                   | Program output: 1                  
Correct output: 20                  | Program output: 61                 
Correct output: 28                  | Program output: 41                 
Correct output: 22                  | Program output: 22                 
Correct output: 19                  | Program output: 45                 
Correct output: 33                  | Program output: 73                 
Correct output: 14                  | Program output: 14                 
Correct output: 23                  | Program output: 23                 
Correct output: 0                   | Program output: 20                 
Correct output: 16                  | Program output: 85                 
Correct output: 4                   | Program output: 74                 
Correct output: -87                 | Program output: 78                 
Correct output: -21                 | Program output: -21                
Correct output: -94                 | Program output: -94                
Correct output: -99                 | Program output: -99                
Correct output: -65                 | Program output: -65                
Correct output: -65                 | Program output: 52                 
Correct output: -81                 | Program output: -52                
Correct output: -99                 | Program output: 36                 
Correct output: -86                 | Program output: -86                
Correct output: -30                 | Program output: -30                
Correct output: 15                  | Program output: 53                 
Correct output: -46                 | Program output: 57                 
Correct output: 8                   | Program output: 36                 
Correct output: 16                  | Program output: 52                 
Correct output: -48                 | Program output: 73                 
Correct output: -79                 | Program output: -1                 
Correct output: -91                 | Program output: -91                
Correct output: -82                 | Program output: -46                
Correct output: -55                 | Program output: -9                 
Correct output: -51                 | Program output: 35                 
Correct output: -40                 | Program output: -9                 
Correct output: -26                 | Program output: 82                 
Correct output: -65                 | Program output: -41                
Correct output: -71                 | Program output: -51                
Correct output: -40                 | Program output: -40                
Correct output: -84                 | Program output: -43                
Correct output: -87                 | Program output: 21                 
Correct output: -56                 | Program output: -56                
Correct output: -43                 | Program output: -9                 
Correct output: -61                 | Program output: 75                 
Correct output: -25                 | Program output: 75                 
Correct output: -67                 | Program output: -67                
Correct output: 46                  | Program output: 86                 
Correct output: -53                 | Program output: 85                 
Correct output: -55                 | Program output: -33                
Correct output: 15                  | Program output: 41                 
Correct output: -78                 | Program output: -30                
Correct output: -99                 | Program output: -36                
Correct output: 7                   | Program output: 7                  
Correct output: -52                 | Program output: -43                
Correct output: -21                 | Program output: 37                 
Correct output: -48                 | Program output: 35                 
Correct output: -89                 | Program output: -89                
Correct output: 28                  | Program output: 28                 
Correct output: 26                  | Program output: 65                 
Correct output: -88                 | Program output: -42                
Correct output: -99                 | Program output: -54                
Correct output: -83                 | Program output: 58                 
Correct output: -89                 | Program output: 26                 
Correct output: -88                 | Program output: 10                 
Correct output: -57                 | Program output: 59                 
Correct output: -74                 | Program output: -65                
Correct output: -64                 | Program output: -64                
Correct output: -93                 | Program output: 69                 
Correct output: -73                 | Program output: 22                 
Correct output: -88                 | Program output: 73                 
Correct output: -39                 | Program output: 29                 
Correct output: -48                 | Program output: -48                
Correct output: -79                 | Program output: -74                
Correct output: 13                  | Program output: 57                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_when} {:close 2, :instruction exec_shove} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_gt})
Lexicase best program: (integer_min in3 boolean_not boolean_flush boolean_not boolean_flush in1 integer_stackdepth exec_swap (integer_dup_items print_integer boolean_eq exec_when (exec_shove ()) exec_yank) (boolean_invert_second_then_and in2 in2 in2 in2 in2 boolean_swap integer_gt))
Lexicase best errors: [1 0 1 0 1 1 0 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 28
Percent parens: 0.179
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_when} {:close 2, :instruction exec_shove} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_gt})
Zero cases best program: (integer_min in3 boolean_not boolean_flush boolean_not boolean_flush in1 integer_stackdepth exec_swap (integer_dup_items print_integer boolean_eq exec_when (exec_shove ()) exec_yank) (boolean_invert_second_then_and in2 in2 in2 in2 in2 boolean_swap integer_gt))
Zero cases best errors: [1 0 1 0 1 1 0 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 28
Percent parens: 0.179
--- Lexicase Population Statistics ---
Count of elite individuals by case: (578 49 1000 80 255 256 49 256 645 919)
Population mean number of elite cases: 4.09
Count of perfect (error zero) individuals by case: (578 49 0 80 255 256 49 256 645 919)
Population mean number of perfect (error zero) cases: 3.09
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_when} {:close 2, :instruction exec_shove} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_while})
Best program: (integer_min in3 boolean_not boolean_flush in1 integer_stackdepth exec_swap (integer_dup_items print_integer boolean_eq exec_when (exec_shove ()) exec_yank) (boolean_invert_second_then_and in2 in2 in2 exec_yank) boolean_invert_second_then_and in2 in2 boolean_swap exec_while ())
Errors: [1 0 1 0 1 1 0 1 0 0]
Total: 5
Mean: 0.5
Genome size: 23
Size: 29
Percent parens: 0.207
--- Population Statistics ---
Average total errors in population: 6.913
Median total errors in population: 7
Error averages by case: (0.422 0.951 1.0 0.92 0.745 0.744 0.951 0.744 0.355 0.081)
Error minima by case: (0 0 1 0 0 0 0 0 0 0)
Average genome size in population (length): 22.915
Average program size in population (points): 28.811
Average percent parens in population: 0.203
Minimum age in population: 32.12770843505859
Maximum age in population: 36.16816997528076
Average age in population: 34.24455497002602
Median age in population: 34.35596907138824
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 337
Genome diversity (% unique genomes):	 0.366
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 382
Syntactic diversity (% unique Push programs):	 0.335
Total error diversity:				 0.006
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.047
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 11541429
--- Timings ---
Current time: 1559314703536 milliseconds
Total Time:          70.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        48.7 seconds, 69.3%
Fitness Testing:     12.8 seconds, 18.2%
Report:               8.7 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
;;******************************
;; -*- Smallest problem report - generation 24
Test total error for best: 549
Test mean error for best: 0.54900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -74                 | Program output: -74                
Correct output: -23                 | Program output: -23                
Correct output: -21                 | Program output: -21                
Correct output: -24                 | Program output: -24                
Correct output: -58                 | Program output: -58                
Correct output: -50                 | Program output: -50                
Correct output: 14                  | Program output: 14                 
Correct output: -9                  | Program output: -9                 
Correct output: 18                  | Program output: 98                 
Correct output: -5                  | Program output: -5                 
Correct output: 100                 | Program output: 100                
Correct output: -19                 | Program output: -19                
Correct output: -31                 | Program output: -31                
Correct output: 10                  | Program output: 10                 
Correct output: 47                  | Program output: 47                 
Correct output: 17                  | Program output: 87                 
Correct output: 1                   | Program output: 1                  
Correct output: 0                   | Program output: 67                 
Correct output: 14                  | Program output: 40                 
Correct output: 7                   | Program output: 60                 
Correct output: 1                   | Program output: 1                  
Correct output: 36                  | Program output: 44                 
Correct output: 14                  | Program output: 30                 
Correct output: 13                  | Program output: 57                 
Correct output: 1                   | Program output: 1                  
Correct output: 20                  | Program output: 56                 
Correct output: 28                  | Program output: 66                 
Correct output: 22                  | Program output: 22                 
Correct output: 19                  | Program output: 19                 
Correct output: 33                  | Program output: 33                 
Correct output: 14                  | Program output: 44                 
Correct output: 23                  | Program output: 27                 
Correct output: 0                   | Program output: 0                  
Correct output: 16                  | Program output: 16                 
Correct output: 4                   | Program output: 30                 
Correct output: -87                 | Program output: 15                 
Correct output: -21                 | Program output: -21                
Correct output: -94                 | Program output: -94                
Correct output: -99                 | Program output: -99                
Correct output: -65                 | Program output: -65                
Correct output: -65                 | Program output: -65                
Correct output: -81                 | Program output: -52                
Correct output: -99                 | Program output: -16                
Correct output: -86                 | Program output: -86                
Correct output: -30                 | Program output: -30                
Correct output: 15                  | Program output: 15                 
Correct output: -46                 | Program output: -7                 
Correct output: 8                   | Program output: 42                 
Correct output: 16                  | Program output: 16                 
Correct output: -48                 | Program output: 22                 
Correct output: -79                 | Program output: -1                 
Correct output: -91                 | Program output: -91                
Correct output: -82                 | Program output: -46                
Correct output: -55                 | Program output: -9                 
Correct output: -51                 | Program output: -9                 
Correct output: -40                 | Program output: -9                 
Correct output: -26                 | Program output: 14                 
Correct output: -65                 | Program output: -41                
Correct output: -71                 | Program output: -51                
Correct output: -40                 | Program output: -40                
Correct output: -84                 | Program output: -43                
Correct output: -87                 | Program output: 22                 
Correct output: -56                 | Program output: -56                
Correct output: -43                 | Program output: -9                 
Correct output: -61                 | Program output: -61                
Correct output: -25                 | Program output: 84                 
Correct output: -67                 | Program output: -67                
Correct output: 46                  | Program output: 69                 
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: -33                
Correct output: 15                  | Program output: 15                 
Correct output: -78                 | Program output: -30                
Correct output: -99                 | Program output: -36                
Correct output: 7                   | Program output: 64                 
Correct output: -52                 | Program output: -43                
Correct output: -21                 | Program output: -21                
Correct output: -48                 | Program output: 28                 
Correct output: -89                 | Program output: -89                
Correct output: 28                  | Program output: 48                 
Correct output: 26                  | Program output: 51                 
Correct output: -88                 | Program output: -42                
Correct output: -99                 | Program output: -54                
Correct output: -83                 | Program output: -83                
Correct output: -89                 | Program output: 48                 
Correct output: -88                 | Program output: 11                 
Correct output: -57                 | Program output: -57                
Correct output: -74                 | Program output: -65                
Correct output: -64                 | Program output: -64                
Correct output: -93                 | Program output: 7                  
Correct output: -73                 | Program output: -9                 
Correct output: -88                 | Program output: -88                
Correct output: -39                 | Program output: 16                 
Correct output: -48                 | Program output: -48                
Correct output: -79                 | Program output: -74                
Correct output: 13                  | Program output: 87                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_when} {:close 2, :instruction exec_shove} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 2, :instruction integer_gt})
Lexicase best program: (integer_min in3 exec_eq boolean_flush in1 integer_stackdepth exec_swap (integer_dup_items print_integer boolean_eq exec_when (exec_shove ()) exec_yank) (boolean_invert_second_then_and in2 in2 in2 exec_yank) boolean_invert_second_then_and in2 in2 boolean_swap integer_gt)
Lexicase best errors: [0 0 1 1 0 1 0 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 28
Percent parens: 0.179
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_when} {:close 2, :instruction exec_shove} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 2, :instruction integer_gt})
Zero cases best program: (integer_min in3 exec_eq boolean_flush in1 integer_stackdepth exec_swap (integer_dup_items print_integer boolean_eq exec_when (exec_shove ()) exec_yank) (boolean_invert_second_then_and in2 in2 in2 exec_yank) boolean_invert_second_then_and in2 in2 boolean_swap integer_gt)
Zero cases best errors: [0 0 1 1 0 1 0 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 28
Percent parens: 0.179
--- Lexicase Population Statistics ---
Count of elite individuals by case: (899 360 25 23 898 1 361 25 1 873)
Population mean number of elite cases: 3.47
Count of perfect (error zero) individuals by case: (899 360 25 23 898 1 361 25 1 873)
Population mean number of perfect (error zero) cases: 3.47
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_when} {:close 2, :instruction exec_shove} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 2, :instruction integer_gt})
Best program: (integer_min in3 exec_eq boolean_flush in1 integer_stackdepth exec_swap (integer_dup_items print_integer boolean_eq exec_when (exec_shove ()) exec_yank) (boolean_invert_second_then_and in2 in2 in2 exec_yank) boolean_invert_second_then_and in2 in2 boolean_swap integer_gt)
Errors: [0 0 1 1 0 1 0 1 1 0]
Total: 5
Mean: 0.5
Genome size: 23
Size: 28
Percent parens: 0.179
--- Population Statistics ---
Average total errors in population: 6.534
Median total errors in population: 7
Error averages by case: (0.101 0.64 0.975 0.977 0.102 0.999 0.639 0.975 0.999 0.127)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 23.859
Average program size in population (points): 29.649
Average percent parens in population: 0.193
Minimum age in population: 34.32011938095093
Maximum age in population: 37.55527651309967
Average age in population: 36.0118071641922
Median age in population: 36.10043334960938
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 98
Genome diversity (% unique genomes):	 0.369
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 102
Syntactic diversity (% unique Push programs):	 0.346
Total error diversity:				 0.006
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.043
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 11774047
--- Timings ---
Current time: 1559314705798 milliseconds
Total Time:          72.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        50.6 seconds, 69.6%
Fitness Testing:     13.1 seconds, 18.0%
Report:               8.9 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
;;******************************
;; -*- Smallest problem report - generation 25
Test total error for best: 661
Test mean error for best: 0.66100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -74                 | Program output: -74                
Correct output: -23                 | Program output: -23                
Correct output: -21                 | Program output: -21                
Correct output: -24                 | Program output: 75                 
Correct output: -58                 | Program output: -58                
Correct output: -50                 | Program output: -50                
Correct output: 14                  | Program output: 33                 
Correct output: -9                  | Program output: -9                 
Correct output: 18                  | Program output: 98                 
Correct output: -5                  | Program output: 47                 
Correct output: 100                 | Program output: 100                
Correct output: -19                 | Program output: -19                
Correct output: -31                 | Program output: -31                
Correct output: 10                  | Program output: 10                 
Correct output: 47                  | Program output: 47                 
Correct output: 17                  | Program output: 17                 
Correct output: 1                   | Program output: 2                  
Correct output: 0                   | Program output: 0                  
Correct output: 14                  | Program output: 35                 
Correct output: 7                   | Program output: 58                 
Correct output: 1                   | Program output: 87                 
Correct output: 36                  | Program output: 69                 
Correct output: 14                  | Program output: 69                 
Correct output: 13                  | Program output: 22                 
Correct output: 1                   | Program output: 2                  
Correct output: 20                  | Program output: 20                 
Correct output: 28                  | Program output: 92                 
Correct output: 22                  | Program output: 88                 
Correct output: 19                  | Program output: 77                 
Correct output: 33                  | Program output: 87                 
Correct output: 14                  | Program output: 95                 
Correct output: 23                  | Program output: 93                 
Correct output: 0                   | Program output: 60                 
Correct output: 16                  | Program output: 86                 
Correct output: 4                   | Program output: 74                 
Correct output: -87                 | Program output: -87                
Correct output: -21                 | Program output: 6                  
Correct output: -94                 | Program output: -31                
Correct output: -99                 | Program output: -12                
Correct output: -65                 | Program output: -39                
Correct output: -65                 | Program output: -35                
Correct output: -81                 | Program output: 37                 
Correct output: -99                 | Program output: 50                 
Correct output: -86                 | Program output: 93                 
Correct output: -30                 | Program output: 29                 
Correct output: 15                  | Program output: 23                 
Correct output: -46                 | Program output: -46                
Correct output: 8                   | Program output: 23                 
Correct output: 16                  | Program output: 55                 
Correct output: -48                 | Program output: 80                 
Correct output: -79                 | Program output: 88                 
Correct output: -91                 | Program output: 58                 
Correct output: -82                 | Program output: -82                
Correct output: -55                 | Program output: -55                
Correct output: -51                 | Program output: -51                
Correct output: -40                 | Program output: -40                
Correct output: -26                 | Program output: -26                
Correct output: -65                 | Program output: -65                
Correct output: -71                 | Program output: -71                
Correct output: -40                 | Program output: 12                 
Correct output: -84                 | Program output: -84                
Correct output: -87                 | Program output: 100                
Correct output: -56                 | Program output: -33                
Correct output: -43                 | Program output: 29                 
Correct output: -61                 | Program output: -15                
Correct output: -25                 | Program output: -25                
Correct output: -67                 | Program output: -43                
Correct output: 46                  | Program output: 46                 
Correct output: -53                 | Program output: 52                 
Correct output: -55                 | Program output: -55                
Correct output: 15                  | Program output: 93                 
Correct output: -78                 | Program output: -78                
Correct output: -99                 | Program output: -78                
Correct output: 7                   | Program output: 24                 
Correct output: -52                 | Program output: -13                
Correct output: -21                 | Program output: 7                  
Correct output: -48                 | Program output: -39                
Correct output: -89                 | Program output: 92                 
Correct output: 28                  | Program output: 83                 
Correct output: 26                  | Program output: 26                 
Correct output: -88                 | Program output: 96                 
Correct output: -99                 | Program output: 21                 
Correct output: -83                 | Program output: 16                 
Correct output: -89                 | Program output: 61                 
Correct output: -88                 | Program output: -66                
Correct output: -57                 | Program output: 19                 
Correct output: -74                 | Program output: -74                
Correct output: -64                 | Program output: 20                 
Correct output: -93                 | Program output: 81                 
Correct output: -73                 | Program output: 67                 
Correct output: -88                 | Program output: 2                  
Correct output: -39                 | Program output: 31                 
Correct output: -48                 | Program output: -45                
Correct output: -79                 | Program output: -79                
Correct output: 13                  | Program output: 13                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_when} {:close 1, :instruction exec_shove} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_gt})
Lexicase best program: (integer_min in3 boolean_not boolean_flush in1 integer_stackdepth exec_swap (integer_dup_items print_integer boolean_eq exec_when (exec_shove () exec_yank) boolean_invert_second_then_and in2 in2 in2 integer_sub) (boolean_invert_second_then_and in2 in2 boolean_swap integer_gt))
Lexicase best errors: [0 1 0 1 0 0 0 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 28
Percent parens: 0.179
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_when} {:close 1, :instruction exec_shove} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_gt})
Zero cases best program: (integer_min in3 boolean_not boolean_flush in1 integer_stackdepth exec_swap (integer_dup_items print_integer boolean_eq exec_when (exec_shove () exec_yank) boolean_invert_second_then_and in2 in2 in2 integer_sub) (boolean_invert_second_then_and in2 in2 boolean_swap integer_gt))
Zero cases best errors: [0 1 0 1 0 0 0 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 28
Percent parens: 0.179
--- Lexicase Population Statistics ---
Count of elite individuals by case: (642 206 936 461 223 177 936 331 223 731)
Population mean number of elite cases: 4.87
Count of perfect (error zero) individuals by case: (642 206 936 461 223 177 936 331 223 731)
Population mean number of perfect (error zero) cases: 4.87
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_when} {:close 2, :instruction exec_shove} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_gt})
Best program: (integer_min in3 boolean_not boolean_flush in1 integer_stackdepth exec_swap (integer_dup_items print_integer boolean_eq exec_when (exec_shove ()) exec_yank) (boolean_invert_second_then_and in2 in2 integer_dup_items exec_yank boolean_invert_second_then_and in2 in2 boolean_swap integer_gt))
Errors: [0 1 0 1 0 0 0 1 0 0]
Total: 3
Mean: 0.3
Genome size: 23
Size: 28
Percent parens: 0.179
--- Population Statistics ---
Average total errors in population: 5.134
Median total errors in population: 5
Error averages by case: (0.358 0.794 0.064 0.539 0.777 0.823 0.064 0.669 0.777 0.269)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 22.519
Average program size in population (points): 27.185
Average percent parens in population: 0.171
Minimum age in population: 35.3326518535614
Maximum age in population: 38.93320250511169
Average age in population: 37.44355606848001
Median age in population: 37.44011509418488
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 149
Genome diversity (% unique genomes):	 0.379
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 161
Syntactic diversity (% unique Push programs):	 0.341
Total error diversity:				 0.007
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.045
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 11996872
--- Timings ---
Current time: 1559314708048 milliseconds
Total Time:          74.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        52.4 seconds, 69.9%
Fitness Testing:     13.3 seconds, 17.8%
Report:               9.1 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 26
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 26
;;******************************
;; -*- Smallest problem report - generation 26
Test total error for best: 549
Test mean error for best: 0.54900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -74                 | Program output: -74                
Correct output: -23                 | Program output: -23                
Correct output: -21                 | Program output: -21                
Correct output: -24                 | Program output: -24                
Correct output: -58                 | Program output: -58                
Correct output: -50                 | Program output: -50                
Correct output: 14                  | Program output: 33                 
Correct output: -9                  | Program output: -9                 
Correct output: 18                  | Program output: 98                 
Correct output: -5                  | Program output: -5                 
Correct output: 100                 | Program output: 100                
Correct output: -19                 | Program output: -19                
Correct output: -31                 | Program output: -31                
Correct output: 10                  | Program output: 10                 
Correct output: 47                  | Program output: 47                 
Correct output: 17                  | Program output: 17                 
Correct output: 1                   | Program output: 1                  
Correct output: 0                   | Program output: 0                  
Correct output: 14                  | Program output: 35                 
Correct output: 7                   | Program output: 58                 
Correct output: 1                   | Program output: 87                 
Correct output: 36                  | Program output: 69                 
Correct output: 14                  | Program output: 69                 
Correct output: 13                  | Program output: 22                 
Correct output: 1                   | Program output: 1                  
Correct output: 20                  | Program output: 20                 
Correct output: 28                  | Program output: 92                 
Correct output: 22                  | Program output: 88                 
Correct output: 19                  | Program output: 77                 
Correct output: 33                  | Program output: 87                 
Correct output: 14                  | Program output: 95                 
Correct output: 23                  | Program output: 93                 
Correct output: 0                   | Program output: 60                 
Correct output: 16                  | Program output: 86                 
Correct output: 4                   | Program output: 74                 
Correct output: -87                 | Program output: -87                
Correct output: -21                 | Program output: -21                
Correct output: -94                 | Program output: -94                
Correct output: -99                 | Program output: -99                
Correct output: -65                 | Program output: -65                
Correct output: -65                 | Program output: -35                
Correct output: -81                 | Program output: -52                
Correct output: -99                 | Program output: 50                 
Correct output: -86                 | Program output: -86                
Correct output: -30                 | Program output: -30                
Correct output: 15                  | Program output: 23                 
Correct output: -46                 | Program output: -46                
Correct output: 8                   | Program output: 23                 
Correct output: 16                  | Program output: 55                 
Correct output: -48                 | Program output: 80                 
Correct output: -79                 | Program output: -1                 
Correct output: -91                 | Program output: -91                
Correct output: -82                 | Program output: -46                
Correct output: -55                 | Program output: -9                 
Correct output: -51                 | Program output: -51                
Correct output: -40                 | Program output: -9                 
Correct output: -26                 | Program output: -26                
Correct output: -65                 | Program output: -41                
Correct output: -71                 | Program output: -51                
Correct output: -40                 | Program output: -40                
Correct output: -84                 | Program output: -43                
Correct output: -87                 | Program output: 100                
Correct output: -56                 | Program output: -56                
Correct output: -43                 | Program output: -9                 
Correct output: -61                 | Program output: -15                
Correct output: -25                 | Program output: -25                
Correct output: -67                 | Program output: -67                
Correct output: 46                  | Program output: 46                 
Correct output: -53                 | Program output: 52                 
Correct output: -55                 | Program output: -33                
Correct output: 15                  | Program output: 93                 
Correct output: -78                 | Program output: -30                
Correct output: -99                 | Program output: -36                
Correct output: 7                   | Program output: 24                 
Correct output: -52                 | Program output: -43                
Correct output: -21                 | Program output: 7                  
Correct output: -48                 | Program output: -39                
Correct output: -89                 | Program output: -89                
Correct output: 28                  | Program output: 83                 
Correct output: 26                  | Program output: 26                 
Correct output: -88                 | Program output: -42                
Correct output: -99                 | Program output: -54                
Correct output: -83                 | Program output: 16                 
Correct output: -89                 | Program output: 61                 
Correct output: -88                 | Program output: -66                
Correct output: -57                 | Program output: 19                 
Correct output: -74                 | Program output: -65                
Correct output: -64                 | Program output: -64                
Correct output: -93                 | Program output: 81                 
Correct output: -73                 | Program output: 67                 
Correct output: -88                 | Program output: 2                  
Correct output: -39                 | Program output: 31                 
Correct output: -48                 | Program output: -48                
Correct output: -79                 | Program output: -74                
Correct output: 13                  | Program output: 13                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_when} {:close 2, :instruction exec_shove} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 2, :instruction integer_gt})
Lexicase best program: (integer_min in3 exec_eq boolean_flush in1 integer_stackdepth exec_swap (integer_dup_items print_integer boolean_eq exec_when (exec_shove ()) exec_yank) (boolean_invert_second_then_and in2 in2 in2 exec_yank) boolean_invert_second_then_and in2 in2 boolean_swap integer_gt)
Lexicase best errors: [0 0 1 0 1 0 1 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 28
Percent parens: 0.179
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_when} {:close 2, :instruction exec_shove} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 2, :instruction integer_gt})
Zero cases best program: (integer_min in3 exec_eq boolean_flush in1 integer_stackdepth exec_swap (integer_dup_items print_integer boolean_eq exec_when (exec_shove ()) exec_yank) (boolean_invert_second_then_and in2 in2 in2 exec_yank) boolean_invert_second_then_and in2 in2 boolean_swap integer_gt)
Zero cases best errors: [0 0 1 0 1 0 1 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 28
Percent parens: 0.179
--- Lexicase Population Statistics ---
Count of elite individuals by case: (370 351 389 908 518 908 391 921 368 346)
Population mean number of elite cases: 5.47
Count of perfect (error zero) individuals by case: (370 351 389 908 518 908 391 921 368 346)
Population mean number of perfect (error zero) cases: 5.47
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 2, :instruction exec_shove} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_gt})
Best program: (integer_fromboolean in3 boolean_not boolean_flush in1 integer_stackdepth exec_swap (integer_dup_items print_integer exec_when (exec_shove ()) exec_yank) (boolean_invert_second_then_and in2 in2 in2 exec_yank) boolean_invert_second_then_and in2 exec_dup (boolean_swap integer_gt))
Errors: [0 1 0 0 1 0 0 0 0 1]
Total: 3
Mean: 0.3
Genome size: 22
Size: 28
Percent parens: 0.214
--- Population Statistics ---
Average total errors in population: 4.53
Median total errors in population: 4
Error averages by case: (0.63 0.649 0.611 0.092 0.482 0.092 0.609 0.079 0.632 0.654)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 23.989
Average program size in population (points): 29.764
Average percent parens in population: 0.193
Minimum age in population: 36.3326518535614
Maximum age in population: 40.4322547018528
Average age in population: 39.02254347842932
Median age in population: 39.04094088077545
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 115
Genome diversity (% unique genomes):	 0.371
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 119
Syntactic diversity (% unique Push programs):	 0.352
Total error diversity:				 0.008
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.062
--- Run Statistics ---
Number of program evaluations used so far: 27000
Number of point (instruction) evaluations so far: 12242183
--- Timings ---
Current time: 1559314710317 milliseconds
Total Time:          77.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        54.2 seconds, 70.2%
Fitness Testing:     13.6 seconds, 17.6%
Report:               9.3 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 26
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 27
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 27
;;******************************
;; -*- Smallest problem report - generation 27
Test total error for best: 660
Test mean error for best: 0.66000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -74                 | Program output: -74                
Correct output: -23                 | Program output: -23                
Correct output: -21                 | Program output: -21                
Correct output: -24                 | Program output: 75                 
Correct output: -58                 | Program output: -58                
Correct output: -50                 | Program output: -50                
Correct output: 14                  | Program output: 14                 
Correct output: -9                  | Program output: -9                 
Correct output: 18                  | Program output: 98                 
Correct output: -5                  | Program output: 47                 
Correct output: 100                 | Program output: 100                
Correct output: -19                 | Program output: -19                
Correct output: -31                 | Program output: -31                
Correct output: 10                  | Program output: 10                 
Correct output: 47                  | Program output: 47                 
Correct output: 17                  | Program output: 87                 
Correct output: 1                   | Program output: 8                  
Correct output: 0                   | Program output: 67                 
Correct output: 14                  | Program output: 40                 
Correct output: 7                   | Program output: 60                 
Correct output: 1                   | Program output: 1                  
Correct output: 36                  | Program output: 44                 
Correct output: 14                  | Program output: 30                 
Correct output: 13                  | Program output: 57                 
Correct output: 1                   | Program output: 38                 
Correct output: 20                  | Program output: 56                 
Correct output: 28                  | Program output: 66                 
Correct output: 22                  | Program output: 22                 
Correct output: 19                  | Program output: 19                 
Correct output: 33                  | Program output: 33                 
Correct output: 14                  | Program output: 44                 
Correct output: 23                  | Program output: 27                 
Correct output: 0                   | Program output: 0                  
Correct output: 16                  | Program output: 16                 
Correct output: 4                   | Program output: 30                 
Correct output: -87                 | Program output: 15                 
Correct output: -21                 | Program output: 6                  
Correct output: -94                 | Program output: -31                
Correct output: -99                 | Program output: -12                
Correct output: -65                 | Program output: -39                
Correct output: -65                 | Program output: -65                
Correct output: -81                 | Program output: 37                 
Correct output: -99                 | Program output: -16                
Correct output: -86                 | Program output: 93                 
Correct output: -30                 | Program output: 29                 
Correct output: 15                  | Program output: 15                 
Correct output: -46                 | Program output: -7                 
Correct output: 8                   | Program output: 42                 
Correct output: 16                  | Program output: 16                 
Correct output: -48                 | Program output: 22                 
Correct output: -79                 | Program output: 88                 
Correct output: -91                 | Program output: 58                 
Correct output: -82                 | Program output: -82                
Correct output: -55                 | Program output: -55                
Correct output: -51                 | Program output: -9                 
Correct output: -40                 | Program output: -40                
Correct output: -26                 | Program output: 14                 
Correct output: -65                 | Program output: -65                
Correct output: -71                 | Program output: -71                
Correct output: -40                 | Program output: 12                 
Correct output: -84                 | Program output: -84                
Correct output: -87                 | Program output: 22                 
Correct output: -56                 | Program output: -33                
Correct output: -43                 | Program output: 29                 
Correct output: -61                 | Program output: -61                
Correct output: -25                 | Program output: 84                 
Correct output: -67                 | Program output: -43                
Correct output: 46                  | Program output: 69                 
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: -55                
Correct output: 15                  | Program output: 15                 
Correct output: -78                 | Program output: -78                
Correct output: -99                 | Program output: -78                
Correct output: 7                   | Program output: 7                  
Correct output: -52                 | Program output: -13                
Correct output: -21                 | Program output: -21                
Correct output: -48                 | Program output: 28                 
Correct output: -89                 | Program output: 92                 
Correct output: 28                  | Program output: 48                 
Correct output: 26                  | Program output: 51                 
Correct output: -88                 | Program output: 96                 
Correct output: -99                 | Program output: 21                 
Correct output: -83                 | Program output: -83                
Correct output: -89                 | Program output: 48                 
Correct output: -88                 | Program output: 11                 
Correct output: -57                 | Program output: -57                
Correct output: -74                 | Program output: -74                
Correct output: -64                 | Program output: 20                 
Correct output: -93                 | Program output: 7                  
Correct output: -73                 | Program output: -9                 
Correct output: -88                 | Program output: -88                
Correct output: -39                 | Program output: 16                 
Correct output: -48                 | Program output: -45                
Correct output: -79                 | Program output: -79                
Correct output: 13                  | Program output: 87                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_when} {:close 2, :instruction exec_shove} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 2, :instruction integer_gt})
Lexicase best program: (integer_min in3 in4 boolean_flush in1 exec_swap (integer_dup_items print_integer boolean_eq exec_when (exec_shove ()) exec_yank) (boolean_invert_second_then_and in2 in2 exec_yank) boolean_invert_second_then_and in2 in2 in2 exec_yank boolean_invert_second_then_and in2 in2 boolean_swap integer_gt)
Lexicase best errors: [0 0 0 0 1 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 31
Percent parens: 0.161
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_when} {:close 2, :instruction exec_shove} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 2, :instruction integer_gt})
Zero cases best program: (integer_min in3 in4 boolean_flush in1 exec_swap (integer_dup_items print_integer boolean_eq exec_when (exec_shove ()) exec_yank) (boolean_invert_second_then_and in2 in2 exec_yank) boolean_invert_second_then_and in2 in2 in2 exec_yank boolean_invert_second_then_and in2 in2 boolean_swap integer_gt)
Zero cases best errors: [0 0 0 0 1 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 31
Percent parens: 0.161
--- Lexicase Population Statistics ---
Count of elite individuals by case: (906 858 283 831 4 382 906 283 63 283)
Population mean number of elite cases: 4.80
Count of perfect (error zero) individuals by case: (906 858 283 831 4 382 906 283 63 283)
Population mean number of perfect (error zero) cases: 4.80
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_when} {:close 2, :instruction exec_shove} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 2, :instruction integer_gt})
Best program: (integer_min in3 in4 boolean_flush in1 exec_swap (integer_dup_items print_integer boolean_eq exec_when (exec_shove ()) exec_yank) (boolean_invert_second_then_and in2 in2 exec_yank) boolean_invert_second_then_and in2 in2 in2 exec_yank boolean_invert_second_then_and in2 in2 boolean_swap integer_gt)
Errors: [0 0 0 0 1 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 26
Size: 31
Percent parens: 0.161
--- Population Statistics ---
Average total errors in population: 5.201
Median total errors in population: 5
Error averages by case: (0.094 0.142 0.717 0.169 0.996 0.618 0.094 0.717 0.937 0.717)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 23.352
Average program size in population (points): 28.98
Average percent parens in population: 0.193
Minimum age in population: 38.05007690191269
Maximum age in population: 42.13564603030682
Average age in population: 40.39754892976582
Median age in population: 40.47035136073828
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 76
Genome diversity (% unique genomes):	 0.409
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 86
Syntactic diversity (% unique Push programs):	 0.383
Total error diversity:				 0.01
Error (vector) diversity:			 0.019
Behavioral diversity:				 0.06
--- Run Statistics ---
Number of program evaluations used so far: 28000
Number of point (instruction) evaluations so far: 12476356
--- Timings ---
Current time: 1559314712602 milliseconds
Total Time:          79.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        56.0 seconds, 70.4%
Fitness Testing:     13.8 seconds, 17.4%
Report:               9.6 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 27
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 28
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 28
;;******************************
;; -*- Smallest problem report - generation 28
Test total error for best: 658
Test mean error for best: 0.65800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -74                 | Program output: -74                
Correct output: -23                 | Program output: -23                
Correct output: -21                 | Program output: -21                
Correct output: -24                 | Program output: 75                 
Correct output: -58                 | Program output: -58                
Correct output: -50                 | Program output: -50                
Correct output: 14                  | Program output: 14                 
Correct output: -9                  | Program output: -9                 
Correct output: 18                  | Program output: 98                 
Correct output: -5                  | Program output: 47                 
Correct output: 100                 | Program output: 100                
Correct output: -19                 | Program output: -19                
Correct output: -31                 | Program output: -31                
Correct output: 10                  | Program output: 10                 
Correct output: 47                  | Program output: 47                 
Correct output: 17                  | Program output: 87                 
Correct output: 1                   | Program output: 1                  
Correct output: 0                   | Program output: 67                 
Correct output: 14                  | Program output: 40                 
Correct output: 7                   | Program output: 60                 
Correct output: 1                   | Program output: 1                  
Correct output: 36                  | Program output: 44                 
Correct output: 14                  | Program output: 30                 
Correct output: 13                  | Program output: 57                 
Correct output: 1                   | Program output: 1                  
Correct output: 20                  | Program output: 56                 
Correct output: 28                  | Program output: 66                 
Correct output: 22                  | Program output: 22                 
Correct output: 19                  | Program output: 19                 
Correct output: 33                  | Program output: 33                 
Correct output: 14                  | Program output: 44                 
Correct output: 23                  | Program output: 27                 
Correct output: 0                   | Program output: 0                  
Correct output: 16                  | Program output: 16                 
Correct output: 4                   | Program output: 30                 
Correct output: -87                 | Program output: 15                 
Correct output: -21                 | Program output: 6                  
Correct output: -94                 | Program output: -31                
Correct output: -99                 | Program output: -12                
Correct output: -65                 | Program output: -39                
Correct output: -65                 | Program output: -65                
Correct output: -81                 | Program output: 37                 
Correct output: -99                 | Program output: -16                
Correct output: -86                 | Program output: 93                 
Correct output: -30                 | Program output: 29                 
Correct output: 15                  | Program output: 15                 
Correct output: -46                 | Program output: -7                 
Correct output: 8                   | Program output: 42                 
Correct output: 16                  | Program output: 16                 
Correct output: -48                 | Program output: 22                 
Correct output: -79                 | Program output: 88                 
Correct output: -91                 | Program output: 58                 
Correct output: -82                 | Program output: -82                
Correct output: -55                 | Program output: -55                
Correct output: -51                 | Program output: -9                 
Correct output: -40                 | Program output: -40                
Correct output: -26                 | Program output: 14                 
Correct output: -65                 | Program output: -65                
Correct output: -71                 | Program output: -71                
Correct output: -40                 | Program output: 12                 
Correct output: -84                 | Program output: -84                
Correct output: -87                 | Program output: 22                 
Correct output: -56                 | Program output: -33                
Correct output: -43                 | Program output: 29                 
Correct output: -61                 | Program output: -61                
Correct output: -25                 | Program output: 84                 
Correct output: -67                 | Program output: -43                
Correct output: 46                  | Program output: 69                 
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: -55                
Correct output: 15                  | Program output: 15                 
Correct output: -78                 | Program output: -78                
Correct output: -99                 | Program output: -78                
Correct output: 7                   | Program output: 7                  
Correct output: -52                 | Program output: -13                
Correct output: -21                 | Program output: -21                
Correct output: -48                 | Program output: 28                 
Correct output: -89                 | Program output: 92                 
Correct output: 28                  | Program output: 48                 
Correct output: 26                  | Program output: 51                 
Correct output: -88                 | Program output: 96                 
Correct output: -99                 | Program output: 21                 
Correct output: -83                 | Program output: -83                
Correct output: -89                 | Program output: 48                 
Correct output: -88                 | Program output: 11                 
Correct output: -57                 | Program output: -57                
Correct output: -74                 | Program output: -74                
Correct output: -64                 | Program output: 20                 
Correct output: -93                 | Program output: 7                  
Correct output: -73                 | Program output: -9                 
Correct output: -88                 | Program output: -88                
Correct output: -39                 | Program output: 16                 
Correct output: -48                 | Program output: -45                
Correct output: -79                 | Program output: -79                
Correct output: 13                  | Program output: 87                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_when} {:close 2, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_when} {:close 3, :instruction exec_shove} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_gt})
Lexicase best program: (integer_min in3 in4 boolean_flush boolean_yank boolean_flush in1 exec_swap (integer_dup_items print_integer boolean_eq exec_when (exec_shove ()) exec_dup (exec_when (exec_shove ())) exec_yank) (boolean_invert_second_then_and in2 integer_swap in2 exec_yank) boolean_swap integer_gt)
Lexicase best errors: [0 0 0 1 1 1 1 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 32
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_when} {:close 2, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_when} {:close 3, :instruction exec_shove} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_gt})
Zero cases best program: (integer_min in3 in4 boolean_flush boolean_yank boolean_flush in1 exec_swap (integer_dup_items print_integer boolean_eq exec_when (exec_shove ()) exec_dup (exec_when (exec_shove ())) exec_yank) (boolean_invert_second_then_and in2 integer_swap in2 exec_yank) boolean_swap integer_gt)
Zero cases best errors: [0 0 0 1 1 1 1 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 32
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (196 675 93 34 148 739 44 675 899 675)
Population mean number of elite cases: 4.18
Count of perfect (error zero) individuals by case: (196 675 93 34 148 739 44 675 899 675)
Population mean number of perfect (error zero) cases: 4.18
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_when} {:close 2, :instruction exec_shove} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 2, :instruction integer_gt})
Best program: (integer_min in3 in4 boolean_flush in1 exec_swap (integer_dup_items print_integer boolean_eq exec_when (exec_shove ()) exec_yank) (boolean_invert_second_then_and in2 in2 exec_yank) in3 in2 in2 in2 exec_yank boolean_invert_second_then_and in2 in2 boolean_swap integer_gt)
Errors: [1 0 0 1 1 0 1 0 0 0]
Total: 4
Mean: 0.4
Genome size: 26
Size: 31
Percent parens: 0.161
--- Population Statistics ---
Average total errors in population: 5.822
Median total errors in population: 5
Error averages by case: (0.804 0.325 0.907 0.966 0.852 0.261 0.956 0.325 0.101 0.325)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 26.39
Average program size in population (points): 31.693
Average percent parens in population: 0.167
Minimum age in population: 40.31577256321907
Maximum age in population: 42.34649783372879
Average age in population: 41.76011323039234
Median age in population: 41.34649783372879
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 545
Genome diversity (% unique genomes):	 0.333
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 558
Syntactic diversity (% unique Push programs):	 0.308
Total error diversity:				 0.007
Error (vector) diversity:			 0.02
Behavioral diversity:				 0.059
--- Run Statistics ---
Number of program evaluations used so far: 29000
Number of point (instruction) evaluations so far: 12742866
--- Timings ---
Current time: 1559314714932 milliseconds
Total Time:          81.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        57.8 seconds, 70.7%
Fitness Testing:     14.1 seconds, 17.2%
Report:               9.8 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 28
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 29
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 29
;;******************************
;; -*- Smallest problem report - generation 29
Test total error for best: 658
Test mean error for best: 0.65800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -74                 | Program output: -74                
Correct output: -23                 | Program output: -23                
Correct output: -21                 | Program output: -21                
Correct output: -24                 | Program output: 75                 
Correct output: -58                 | Program output: -58                
Correct output: -50                 | Program output: -50                
Correct output: 14                  | Program output: 14                 
Correct output: -9                  | Program output: -9                 
Correct output: 18                  | Program output: 98                 
Correct output: -5                  | Program output: 47                 
Correct output: 100                 | Program output: 100                
Correct output: -19                 | Program output: -19                
Correct output: -31                 | Program output: -31                
Correct output: 10                  | Program output: 10                 
Correct output: 47                  | Program output: 47                 
Correct output: 17                  | Program output: 87                 
Correct output: 1                   | Program output: 1                  
Correct output: 0                   | Program output: 67                 
Correct output: 14                  | Program output: 40                 
Correct output: 7                   | Program output: 60                 
Correct output: 1                   | Program output: 1                  
Correct output: 36                  | Program output: 44                 
Correct output: 14                  | Program output: 30                 
Correct output: 13                  | Program output: 57                 
Correct output: 1                   | Program output: 1                  
Correct output: 20                  | Program output: 56                 
Correct output: 28                  | Program output: 66                 
Correct output: 22                  | Program output: 22                 
Correct output: 19                  | Program output: 19                 
Correct output: 33                  | Program output: 33                 
Correct output: 14                  | Program output: 44                 
Correct output: 23                  | Program output: 27                 
Correct output: 0                   | Program output: 0                  
Correct output: 16                  | Program output: 16                 
Correct output: 4                   | Program output: 30                 
Correct output: -87                 | Program output: 15                 
Correct output: -21                 | Program output: 6                  
Correct output: -94                 | Program output: -31                
Correct output: -99                 | Program output: -12                
Correct output: -65                 | Program output: -39                
Correct output: -65                 | Program output: -65                
Correct output: -81                 | Program output: 37                 
Correct output: -99                 | Program output: -16                
Correct output: -86                 | Program output: 93                 
Correct output: -30                 | Program output: 29                 
Correct output: 15                  | Program output: 15                 
Correct output: -46                 | Program output: -7                 
Correct output: 8                   | Program output: 42                 
Correct output: 16                  | Program output: 16                 
Correct output: -48                 | Program output: 22                 
Correct output: -79                 | Program output: 88                 
Correct output: -91                 | Program output: 58                 
Correct output: -82                 | Program output: -82                
Correct output: -55                 | Program output: -55                
Correct output: -51                 | Program output: -9                 
Correct output: -40                 | Program output: -40                
Correct output: -26                 | Program output: 14                 
Correct output: -65                 | Program output: -65                
Correct output: -71                 | Program output: -71                
Correct output: -40                 | Program output: 12                 
Correct output: -84                 | Program output: -84                
Correct output: -87                 | Program output: 22                 
Correct output: -56                 | Program output: -33                
Correct output: -43                 | Program output: 29                 
Correct output: -61                 | Program output: -61                
Correct output: -25                 | Program output: 84                 
Correct output: -67                 | Program output: -43                
Correct output: 46                  | Program output: 69                 
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: -55                
Correct output: 15                  | Program output: 15                 
Correct output: -78                 | Program output: -78                
Correct output: -99                 | Program output: -78                
Correct output: 7                   | Program output: 7                  
Correct output: -52                 | Program output: -13                
Correct output: -21                 | Program output: -21                
Correct output: -48                 | Program output: 28                 
Correct output: -89                 | Program output: 92                 
Correct output: 28                  | Program output: 48                 
Correct output: 26                  | Program output: 51                 
Correct output: -88                 | Program output: 96                 
Correct output: -99                 | Program output: 21                 
Correct output: -83                 | Program output: -83                
Correct output: -89                 | Program output: 48                 
Correct output: -88                 | Program output: 11                 
Correct output: -57                 | Program output: -57                
Correct output: -74                 | Program output: -74                
Correct output: -64                 | Program output: 20                 
Correct output: -93                 | Program output: 7                  
Correct output: -73                 | Program output: -9                 
Correct output: -88                 | Program output: -88                
Correct output: -39                 | Program output: 16                 
Correct output: -48                 | Program output: -45                
Correct output: -79                 | Program output: -79                
Correct output: 13                  | Program output: 87                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_when} {:close 2, :instruction exec_shove} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 2, :instruction integer_gt})
Lexicase best program: (integer_min in3 in4 boolean_flush in1 exec_swap (integer_dup_items print_integer boolean_eq exec_when (exec_shove ()) exec_yank) (boolean_invert_second_then_and in2 in2 exec_yank) in3 in2 in2 in2 exec_yank boolean_invert_second_then_and in2 in2 boolean_swap integer_gt)
Lexicase best errors: [0 0 1 1 1 0 0 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 31
Percent parens: 0.161
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_when} {:close 2, :instruction exec_shove} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 2, :instruction integer_gt})
Zero cases best program: (integer_min in3 in4 boolean_flush in1 exec_swap (integer_dup_items print_integer boolean_eq exec_when (exec_shove ()) exec_yank) (boolean_invert_second_then_and in2 in2 exec_yank) in3 in2 in2 in2 exec_yank boolean_invert_second_then_and in2 in2 boolean_swap integer_gt)
Zero cases best errors: [0 0 1 1 1 0 0 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 31
Percent parens: 0.161
--- Lexicase Population Statistics ---
Count of elite individuals by case: (917 366 30 210 181 413 430 365 414 209)
Population mean number of elite cases: 3.54
Count of perfect (error zero) individuals by case: (917 366 30 210 181 413 430 365 414 209)
Population mean number of perfect (error zero) cases: 3.54
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_when} {:close 2, :instruction exec_shove} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 2, :instruction integer_gt})
Best program: (integer_min in3 in4 boolean_flush in1 exec_swap (integer_dup_items print_integer boolean_eq exec_when (exec_shove ()) exec_yank) (boolean_invert_second_then_and in2 in2 exec_yank) in3 in2 in2 in2 exec_yank boolean_invert_second_then_and in2 in2 boolean_swap integer_gt)
Errors: [0 0 1 1 1 0 0 0 0 1]
Total: 4
Mean: 0.4
Genome size: 26
Size: 31
Percent parens: 0.161
--- Population Statistics ---
Average total errors in population: 6.465
Median total errors in population: 13/2
Error averages by case: (0.083 0.634 0.97 0.79 0.819 0.587 0.57 0.635 0.586 0.791)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 26.902
Average program size in population (points): 33.492
Average percent parens in population: 0.197
Minimum age in population: 41.31577256321907
Maximum age in population: 44.34649783372879
Average age in population: 43.05388079455495
Median age in population: 43.2978151589632
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 181
Genome diversity (% unique genomes):	 0.388
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 191
Syntactic diversity (% unique Push programs):	 0.365
Total error diversity:				 0.007
Error (vector) diversity:			 0.025
Behavioral diversity:				 0.069
--- Run Statistics ---
Number of program evaluations used so far: 30000
Number of point (instruction) evaluations so far: 13027552
--- Timings ---
Current time: 1559314717302 milliseconds
Total Time:          84.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        59.6 seconds, 70.9%
Fitness Testing:     14.4 seconds, 17.1%
Report:              10.0 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 29
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 30
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 30
;;******************************
;; -*- Smallest problem report - generation 30
Test total error for best: 347
Test mean error for best: 0.34700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -74                 | Program output: -74                
Correct output: -23                 | Program output: -23                
Correct output: -21                 | Program output: -21                
Correct output: -24                 | Program output: -24                
Correct output: -58                 | Program output: -58                
Correct output: -50                 | Program output: -50                
Correct output: 14                  | Program output: 14                 
Correct output: -9                  | Program output: -9                 
Correct output: 18                  | Program output: 98                 
Correct output: -5                  | Program output: -5                 
Correct output: 100                 | Program output: 100                
Correct output: -19                 | Program output: -19                
Correct output: -31                 | Program output: -31                
Correct output: 10                  | Program output: 10                 
Correct output: 47                  | Program output: 47                 
Correct output: 17                  | Program output: 17                 
Correct output: 1                   | Program output: 1                  
Correct output: 0                   | Program output: 0                  
Correct output: 14                  | Program output: 35                 
Correct output: 7                   | Program output: 58                 
Correct output: 1                   | Program output: 1                  
Correct output: 36                  | Program output: 44                 
Correct output: 14                  | Program output: 30                 
Correct output: 13                  | Program output: 22                 
Correct output: 1                   | Program output: 1                  
Correct output: 20                  | Program output: 20                 
Correct output: 28                  | Program output: 66                 
Correct output: 22                  | Program output: 22                 
Correct output: 19                  | Program output: 19                 
Correct output: 33                  | Program output: 33                 
Correct output: 14                  | Program output: 44                 
Correct output: 23                  | Program output: 27                 
Correct output: 0                   | Program output: 0                  
Correct output: 16                  | Program output: 16                 
Correct output: 4                   | Program output: 30                 
Correct output: -87                 | Program output: -87                
Correct output: -21                 | Program output: -21                
Correct output: -94                 | Program output: -94                
Correct output: -99                 | Program output: -99                
Correct output: -65                 | Program output: -65                
Correct output: -65                 | Program output: -65                
Correct output: -81                 | Program output: -52                
Correct output: -99                 | Program output: -16                
Correct output: -86                 | Program output: -86                
Correct output: -30                 | Program output: -30                
Correct output: 15                  | Program output: 15                 
Correct output: -46                 | Program output: -46                
Correct output: 8                   | Program output: 23                 
Correct output: 16                  | Program output: 16                 
Correct output: -48                 | Program output: 22                 
Correct output: -79                 | Program output: -1                 
Correct output: -91                 | Program output: -91                
Correct output: -82                 | Program output: -82                
Correct output: -55                 | Program output: -55                
Correct output: -51                 | Program output: -51                
Correct output: -40                 | Program output: -40                
Correct output: -26                 | Program output: -26                
Correct output: -65                 | Program output: -65                
Correct output: -71                 | Program output: -71                
Correct output: -40                 | Program output: -40                
Correct output: -84                 | Program output: -84                
Correct output: -87                 | Program output: 22                 
Correct output: -56                 | Program output: -56                
Correct output: -43                 | Program output: -9                 
Correct output: -61                 | Program output: -61                
Correct output: -25                 | Program output: -25                
Correct output: -67                 | Program output: -67                
Correct output: 46                  | Program output: 46                 
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: -55                
Correct output: 15                  | Program output: 15                 
Correct output: -78                 | Program output: -78                
Correct output: -99                 | Program output: -78                
Correct output: 7                   | Program output: 7                  
Correct output: -52                 | Program output: -43                
Correct output: -21                 | Program output: -21                
Correct output: -48                 | Program output: -39                
Correct output: -89                 | Program output: -89                
Correct output: 28                  | Program output: 48                 
Correct output: 26                  | Program output: 26                 
Correct output: -88                 | Program output: -42                
Correct output: -99                 | Program output: -54                
Correct output: -83                 | Program output: -83                
Correct output: -89                 | Program output: 48                 
Correct output: -88                 | Program output: -66                
Correct output: -57                 | Program output: -57                
Correct output: -74                 | Program output: -74                
Correct output: -64                 | Program output: -64                
Correct output: -93                 | Program output: 7                  
Correct output: -73                 | Program output: -9                 
Correct output: -88                 | Program output: -88                
Correct output: -39                 | Program output: 16                 
Correct output: -48                 | Program output: -48                
Correct output: -79                 | Program output: -79                
Correct output: 13                  | Program output: 13                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_when} {:close 2, :instruction exec_shove} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 2, :instruction integer_gt})
Lexicase best program: (integer_min in3 in3 boolean_flush boolean_yank boolean_flush in1 boolean_flush in1 exec_swap (integer_min print_integer boolean_eq exec_when (exec_shove ()) exec_yank) (boolean_invert_second_then_and in2 in2 exec_yank) boolean_invert_second_then_and in2 in2 in2 exec_yank boolean_invert_second_then_and in2 in2 boolean_swap integer_gt)
Lexicase best errors: [0 1 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 35
Percent parens: 0.143
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_when} {:close 2, :instruction exec_shove} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 2, :instruction integer_gt})
Zero cases best program: (integer_min in3 in3 boolean_flush boolean_yank boolean_flush in1 boolean_flush in1 exec_swap (integer_min print_integer boolean_eq exec_when (exec_shove ()) exec_yank) (boolean_invert_second_then_and in2 in2 exec_yank) boolean_invert_second_then_and in2 in2 in2 exec_yank boolean_invert_second_then_and in2 in2 boolean_swap integer_gt)
Zero cases best errors: [0 1 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 35
Percent parens: 0.143
--- Lexicase Population Statistics ---
Count of elite individuals by case: (423 416 922 475 357 198 423 221 423 515)
Population mean number of elite cases: 4.37
Count of perfect (error zero) individuals by case: (423 416 922 475 357 198 423 221 423 515)
Population mean number of perfect (error zero) cases: 4.37
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_when} {:close 2, :instruction exec_shove} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 2, :instruction integer_gt})
Best program: (integer_min in3 boolean_flush in1 boolean_flush in1 exec_swap (integer_min print_integer boolean_eq exec_when (exec_shove ()) exec_yank) (boolean_invert_second_then_and in2 in2 exec_yank) boolean_invert_second_then_and in2 in2 in2 exec_yank boolean_invert_second_then_and in2 in2 boolean_swap integer_gt)
Errors: [0 1 0 0 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 27
Size: 32
Percent parens: 0.156
--- Population Statistics ---
Average total errors in population: 5.627
Median total errors in population: 5
Error averages by case: (0.577 0.584 0.078 0.525 0.643 0.802 0.577 0.779 0.577 0.485)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 27.785
Average program size in population (points): 33.559
Average percent parens in population: 0.173
Minimum age in population: 42.7978151589632
Maximum age in population: 46.34649783372879
Average age in population: 45.0544823169224
Median age in population: 45.20932716503739
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 173
Genome diversity (% unique genomes):	 0.368
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 188
Syntactic diversity (% unique Push programs):	 0.346
Total error diversity:				 0.009
Error (vector) diversity:			 0.035
Behavioral diversity:				 0.067
--- Run Statistics ---
Number of program evaluations used so far: 31000
Number of point (instruction) evaluations so far: 13307930
--- Timings ---
Current time: 1559314719634 milliseconds
Total Time:          86.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        61.4 seconds, 71.0%
Fitness Testing:     14.7 seconds, 17.0%
Report:              10.3 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 30
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 31
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 31
;;******************************
;; -*- Smallest problem report - generation 31
Test total error for best: 406
Test mean error for best: 0.40600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -74                 | Program output: -74                
Correct output: -23                 | Program output: -23                
Correct output: -21                 | Program output: -21                
Correct output: -24                 | Program output: -24                
Correct output: -58                 | Program output: -58                
Correct output: -50                 | Program output: -50                
Correct output: 14                  | Program output: 14                 
Correct output: -9                  | Program output: -9                 
Correct output: 18                  | Program output: 18                 
Correct output: -5                  | Program output: 47                 
Correct output: 100                 | Program output: 100                
Correct output: -19                 | Program output: -19                
Correct output: -31                 | Program output: -31                
Correct output: 10                  | Program output: 10                 
Correct output: 47                  | Program output: 47                 
Correct output: 17                  | Program output: 75                 
Correct output: 1                   | Program output: 1                  
Correct output: 0                   | Program output: 67                 
Correct output: 14                  | Program output: 14                 
Correct output: 7                   | Program output: 7                  
Correct output: 1                   | Program output: 1                  
Correct output: 36                  | Program output: 44                 
Correct output: 14                  | Program output: 14                 
Correct output: 13                  | Program output: 29                 
Correct output: 1                   | Program output: 52                 
Correct output: 20                  | Program output: 56                 
Correct output: 28                  | Program output: 28                 
Correct output: 22                  | Program output: 22                 
Correct output: 19                  | Program output: 19                 
Correct output: 33                  | Program output: 33                 
Correct output: 14                  | Program output: 44                 
Correct output: 23                  | Program output: 27                 
Correct output: 0                   | Program output: 0                  
Correct output: 16                  | Program output: 16                 
Correct output: 4                   | Program output: 4                  
Correct output: -87                 | Program output: 15                 
Correct output: -21                 | Program output: 10                 
Correct output: -94                 | Program output: -48                
Correct output: -99                 | Program output: 72                 
Correct output: -65                 | Program output: -60                
Correct output: -65                 | Program output: -65                
Correct output: -81                 | Program output: -81                
Correct output: -99                 | Program output: -99                
Correct output: -86                 | Program output: -81                
Correct output: -30                 | Program output: 12                 
Correct output: 15                  | Program output: 15                 
Correct output: -46                 | Program output: -16                
Correct output: 8                   | Program output: 8                  
Correct output: 16                  | Program output: 16                 
Correct output: -48                 | Program output: -48                
Correct output: -79                 | Program output: -79                
Correct output: -91                 | Program output: 52                 
Correct output: -82                 | Program output: -80                
Correct output: -55                 | Program output: -52                
Correct output: -51                 | Program output: -9                 
Correct output: -40                 | Program output: -24                
Correct output: -26                 | Program output: 9                  
Correct output: -65                 | Program output: -21                
Correct output: -71                 | Program output: 31                 
Correct output: -40                 | Program output: -40                
Correct output: -84                 | Program output: 27                 
Correct output: -87                 | Program output: -87                
Correct output: -56                 | Program output: -29                
Correct output: -43                 | Program output: -43                
Correct output: -61                 | Program output: -61                
Correct output: -25                 | Program output: -6                 
Correct output: -67                 | Program output: 69                 
Correct output: 46                  | Program output: 69                 
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: 1                  
Correct output: 15                  | Program output: 15                 
Correct output: -78                 | Program output: 0                  
Correct output: -99                 | Program output: -99                
Correct output: 7                   | Program output: 11                 
Correct output: -52                 | Program output: -52                
Correct output: -21                 | Program output: 37                 
Correct output: -48                 | Program output: -48                
Correct output: -89                 | Program output: -50                
Correct output: 28                  | Program output: 42                 
Correct output: 26                  | Program output: 51                 
Correct output: -88                 | Program output: -88                
Correct output: -99                 | Program output: -99                
Correct output: -83                 | Program output: -83                
Correct output: -89                 | Program output: -89                
Correct output: -88                 | Program output: -88                
Correct output: -57                 | Program output: -57                
Correct output: -74                 | Program output: -55                
Correct output: -64                 | Program output: -1                 
Correct output: -93                 | Program output: -93                
Correct output: -73                 | Program output: -73                
Correct output: -88                 | Program output: -88                
Correct output: -39                 | Program output: -39                
Correct output: -48                 | Program output: -36                
Correct output: -79                 | Program output: -69                
Correct output: 13                  | Program output: 57                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_when} {:close 2, :instruction exec_shove} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 2, :instruction integer_gt})
Lexicase best program: (integer_min in3 in4 boolean_flush boolean_yank boolean_flush in1 boolean_flush in1 exec_swap (integer_min print_integer boolean_eq) (exec_when (exec_shove ()) exec_yank) boolean_invert_second_then_and in2 in2 exec_yank boolean_invert_second_then_and in2 in2 in2 exec_yank boolean_invert_second_then_and in2 in2 boolean_swap integer_gt)
Lexicase best errors: [0 0 1 1 0 0 1 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 35
Percent parens: 0.143
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_when} {:close 2, :instruction exec_shove} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 2, :instruction integer_gt})
Zero cases best program: (integer_min in3 in4 boolean_flush boolean_yank boolean_flush in1 boolean_flush in1 exec_swap (integer_min print_integer boolean_eq) (exec_when (exec_shove ()) exec_yank) boolean_invert_second_then_and in2 in2 exec_yank boolean_invert_second_then_and in2 in2 in2 exec_yank boolean_invert_second_then_and in2 in2 boolean_swap integer_gt)
Zero cases best errors: [0 0 1 1 0 0 1 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 35
Percent parens: 0.143
--- Lexicase Population Statistics ---
Count of elite individuals by case: (210 277 703 701 739 707 59 276 939 706)
Population mean number of elite cases: 5.32
Count of perfect (error zero) individuals by case: (210 277 703 701 739 707 59 276 939 706)
Population mean number of perfect (error zero) cases: 5.32
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_when} {:close 2, :instruction exec_shove} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 2, :instruction integer_gt})
Best program: (integer_min in3 in4 boolean_flush boolean_yank boolean_flush in1 boolean_flush in1 exec_swap (integer_min print_integer boolean_eq) (exec_when (exec_shove ()) exec_yank) boolean_invert_second_then_and in2 in2 exec_yank boolean_invert_second_then_and in2 in2 in2 exec_yank boolean_invert_second_then_and in2 in2 boolean_swap integer_gt)
Errors: [0 0 1 1 0 0 1 0 0 0]
Total: 3
Mean: 0.3
Genome size: 30
Size: 35
Percent parens: 0.143
--- Population Statistics ---
Average total errors in population: 4.683
Median total errors in population: 4
Error averages by case: (0.79 0.723 0.297 0.299 0.261 0.293 0.941 0.724 0.061 0.294)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 28.794
Average program size in population (points): 33.82
Average percent parens in population: 0.149
Minimum age in population: 45.45099715515971
Maximum age in population: 47.70099715515971
Average age in population: 46.40780846806802
Median age in population: 46.45099715515971
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 213
Genome diversity (% unique genomes):	 0.379
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 219
Syntactic diversity (% unique Push programs):	 0.355
Total error diversity:				 0.008
Error (vector) diversity:			 0.034
Behavioral diversity:				 0.066
--- Run Statistics ---
Number of program evaluations used so far: 32000
Number of point (instruction) evaluations so far: 13597413
--- Timings ---
Current time: 1559314722016 milliseconds
Total Time:          88.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        63.3 seconds, 71.2%
Fitness Testing:     15.0 seconds, 16.8%
Report:              10.5 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 31
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 32
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 32
;;******************************
;; -*- Smallest problem report - generation 32
Test total error for best: 445
Test mean error for best: 0.44500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -74                 | Program output: -74                
Correct output: -23                 | Program output: -23                
Correct output: -21                 | Program output: -21                
Correct output: -24                 | Program output: -24                
Correct output: -58                 | Program output: -58                
Correct output: -50                 | Program output: -50                
Correct output: 14                  | Program output: 14                 
Correct output: -9                  | Program output: -9                 
Correct output: 18                  | Program output: 98                 
Correct output: -5                  | Program output: 47                 
Correct output: 100                 | Program output: 100                
Correct output: -19                 | Program output: -19                
Correct output: -31                 | Program output: -31                
Correct output: 10                  | Program output: 10                 
Correct output: 47                  | Program output: 47                 
Correct output: 17                  | Program output: 17                 
Correct output: 1                   | Program output: 1                  
Correct output: 0                   | Program output: 0                  
Correct output: 14                  | Program output: 35                 
Correct output: 7                   | Program output: 58                 
Correct output: 1                   | Program output: 1                  
Correct output: 36                  | Program output: 44                 
Correct output: 14                  | Program output: 30                 
Correct output: 13                  | Program output: 22                 
Correct output: 1                   | Program output: 38                 
Correct output: 20                  | Program output: 20                 
Correct output: 28                  | Program output: 66                 
Correct output: 22                  | Program output: 22                 
Correct output: 19                  | Program output: 19                 
Correct output: 33                  | Program output: 33                 
Correct output: 14                  | Program output: 44                 
Correct output: 23                  | Program output: 27                 
Correct output: 0                   | Program output: 0                  
Correct output: 16                  | Program output: 16                 
Correct output: 4                   | Program output: 30                 
Correct output: -87                 | Program output: -87                
Correct output: -21                 | Program output: 6                  
Correct output: -94                 | Program output: -48                
Correct output: -99                 | Program output: -12                
Correct output: -65                 | Program output: -60                
Correct output: -65                 | Program output: -65                
Correct output: -81                 | Program output: -81                
Correct output: -99                 | Program output: -16                
Correct output: -86                 | Program output: -81                
Correct output: -30                 | Program output: 25                 
Correct output: 15                  | Program output: 15                 
Correct output: -46                 | Program output: -46                
Correct output: 8                   | Program output: 23                 
Correct output: 16                  | Program output: 16                 
Correct output: -48                 | Program output: 22                 
Correct output: -79                 | Program output: -79                
Correct output: -91                 | Program output: 52                 
Correct output: -82                 | Program output: -82                
Correct output: -55                 | Program output: -55                
Correct output: -51                 | Program output: -51                
Correct output: -40                 | Program output: -40                
Correct output: -26                 | Program output: -26                
Correct output: -65                 | Program output: -65                
Correct output: -71                 | Program output: -71                
Correct output: -40                 | Program output: -40                
Correct output: -84                 | Program output: -84                
Correct output: -87                 | Program output: 22                 
Correct output: -56                 | Program output: -33                
Correct output: -43                 | Program output: -43                
Correct output: -61                 | Program output: -61                
Correct output: -25                 | Program output: -25                
Correct output: -67                 | Program output: -43                
Correct output: 46                  | Program output: 46                 
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: -55                
Correct output: 15                  | Program output: 15                 
Correct output: -78                 | Program output: -78                
Correct output: -99                 | Program output: -99                
Correct output: 7                   | Program output: 24                 
Correct output: -52                 | Program output: -52                
Correct output: -21                 | Program output: 7                  
Correct output: -48                 | Program output: -39                
Correct output: -89                 | Program output: 47                 
Correct output: 28                  | Program output: 48                 
Correct output: 26                  | Program output: 26                 
Correct output: -88                 | Program output: -88                
Correct output: -99                 | Program output: -99                
Correct output: -83                 | Program output: -83                
Correct output: -89                 | Program output: 48                 
Correct output: -88                 | Program output: -66                
Correct output: -57                 | Program output: -57                
Correct output: -74                 | Program output: -74                
Correct output: -64                 | Program output: 14                 
Correct output: -93                 | Program output: 7                  
Correct output: -73                 | Program output: -9                 
Correct output: -88                 | Program output: -88                
Correct output: -39                 | Program output: 16                 
Correct output: -48                 | Program output: -45                
Correct output: -79                 | Program output: -79                
Correct output: 13                  | Program output: 13                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_when} {:close 2, :instruction exec_shove} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 2, :instruction integer_gt})
Lexicase best program: (integer_min in3 in3 boolean_flush boolean_yank boolean_flush in1 boolean_flush in1 in1 exec_swap (integer_min print_integer) (boolean_eq exec_when (exec_shove ()) exec_yank) boolean_invert_second_then_and in2 in2 exec_yank boolean_invert_second_then_and in2 in2 in2 exec_yank boolean_invert_second_then_and in2 in2 boolean_swap integer_gt)
Lexicase best errors: [0 1 0 0 0 0 1 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 36
Percent parens: 0.139
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_when} {:close 2, :instruction exec_shove} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 2, :instruction integer_gt})
Zero cases best program: (integer_min in3 in3 boolean_flush boolean_yank boolean_flush in1 boolean_flush in1 in1 exec_swap (integer_min print_integer) (boolean_eq exec_when (exec_shove ()) exec_yank) boolean_invert_second_then_and in2 in2 exec_yank boolean_invert_second_then_and in2 in2 in2 exec_yank boolean_invert_second_then_and in2 in2 boolean_swap integer_gt)
Zero cases best errors: [0 1 0 0 0 0 1 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 36
Percent parens: 0.139
--- Lexicase Population Statistics ---
Count of elite individuals by case: (698 455 411 448 398 698 58 699 701 689)
Population mean number of elite cases: 5.26
Count of perfect (error zero) individuals by case: (698 455 411 448 398 698 58 699 701 689)
Population mean number of perfect (error zero) cases: 5.26
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_when} {:close 2, :instruction exec_shove} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 2, :instruction integer_gt})
Best program: (integer_min in3 in3 boolean_flush boolean_yank boolean_flush in1 boolean_flush in1 in1 exec_swap (integer_min print_integer) (boolean_eq exec_when (exec_shove ()) exec_yank) boolean_invert_second_then_and in2 in2 exec_yank boolean_invert_second_then_and in2 in2 in2 exec_yank boolean_invert_second_then_and in2 in2 boolean_swap integer_gt)
Errors: [0 1 0 0 0 0 1 0 0 0]
Total: 2
Mean: 0.2
Genome size: 31
Size: 36
Percent parens: 0.139
--- Population Statistics ---
Average total errors in population: 4.745
Median total errors in population: 5
Error averages by case: (0.302 0.545 0.589 0.552 0.602 0.302 0.942 0.301 0.299 0.311)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 32.635
Average program size in population (points): 37.872
Average percent parens in population: 0.139
Minimum age in population: 46.50324681587517
Maximum age in population: 49.57599715515971
Average age in population: 48.08889373035822
Median age in population: 48.10212198551744
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 104
Genome diversity (% unique genomes):	 0.448
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 111
Syntactic diversity (% unique Push programs):	 0.406
Total error diversity:				 0.009
Error (vector) diversity:			 0.061
Behavioral diversity:				 0.126
--- Run Statistics ---
Number of program evaluations used so far: 33000
Number of point (instruction) evaluations so far: 13928660
--- Timings ---
Current time: 1559314724442 milliseconds
Total Time:          91.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        65.1 seconds, 71.3%
Fitness Testing:     15.3 seconds, 16.8%
Report:              10.8 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 32
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 33
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 33
;;******************************
;; -*- Smallest problem report - generation 33
Test total error for best: 337
Test mean error for best: 0.33700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -74                 | Program output: -74                
Correct output: -23                 | Program output: -23                
Correct output: -21                 | Program output: -21                
Correct output: -24                 | Program output: -24                
Correct output: -58                 | Program output: -58                
Correct output: -50                 | Program output: -50                
Correct output: 14                  | Program output: 33                 
Correct output: -9                  | Program output: -9                 
Correct output: 18                  | Program output: 18                 
Correct output: -5                  | Program output: -5                 
Correct output: 100                 | Program output: 100                
Correct output: -19                 | Program output: -19                
Correct output: -31                 | Program output: -31                
Correct output: 10                  | Program output: 10                 
Correct output: 47                  | Program output: 47                 
Correct output: 17                  | Program output: 17                 
Correct output: 1                   | Program output: 1                  
Correct output: 0                   | Program output: 20                 
Correct output: 14                  | Program output: 14                 
Correct output: 7                   | Program output: 7                  
Correct output: 1                   | Program output: 8                  
Correct output: 36                  | Program output: 58                 
Correct output: 14                  | Program output: 14                 
Correct output: 13                  | Program output: 13                 
Correct output: 1                   | Program output: 1                  
Correct output: 20                  | Program output: 20                 
Correct output: 28                  | Program output: 28                 
Correct output: 22                  | Program output: 88                 
Correct output: 19                  | Program output: 75                 
Correct output: 33                  | Program output: 87                 
Correct output: 14                  | Program output: 14                 
Correct output: 23                  | Program output: 23                 
Correct output: 0                   | Program output: 20                 
Correct output: 16                  | Program output: 52                 
Correct output: 4                   | Program output: 4                  
Correct output: -87                 | Program output: -87                
Correct output: -21                 | Program output: -21                
Correct output: -94                 | Program output: -94                
Correct output: -99                 | Program output: -99                
Correct output: -65                 | Program output: -65                
Correct output: -65                 | Program output: -35                
Correct output: -81                 | Program output: -52                
Correct output: -99                 | Program output: -99                
Correct output: -86                 | Program output: -86                
Correct output: -30                 | Program output: -30                
Correct output: 15                  | Program output: 23                 
Correct output: -46                 | Program output: -46                
Correct output: 8                   | Program output: 8                  
Correct output: 16                  | Program output: 33                 
Correct output: -48                 | Program output: -48                
Correct output: -79                 | Program output: -1                 
Correct output: -91                 | Program output: -91                
Correct output: -82                 | Program output: -82                
Correct output: -55                 | Program output: -55                
Correct output: -51                 | Program output: -51                
Correct output: -40                 | Program output: -40                
Correct output: -26                 | Program output: -26                
Correct output: -65                 | Program output: -65                
Correct output: -71                 | Program output: -71                
Correct output: -40                 | Program output: -40                
Correct output: -84                 | Program output: -84                
Correct output: -87                 | Program output: 21                 
Correct output: -56                 | Program output: -56                
Correct output: -43                 | Program output: -9                 
Correct output: -61                 | Program output: -15                
Correct output: -25                 | Program output: -25                
Correct output: -67                 | Program output: -67                
Correct output: 46                  | Program output: 46                 
Correct output: -53                 | Program output: 49                 
Correct output: -55                 | Program output: -55                
Correct output: 15                  | Program output: 63                 
Correct output: -78                 | Program output: -78                
Correct output: -99                 | Program output: -78                
Correct output: 7                   | Program output: 7                  
Correct output: -52                 | Program output: -43                
Correct output: -21                 | Program output: 7                  
Correct output: -48                 | Program output: -48                
Correct output: -89                 | Program output: -89                
Correct output: 28                  | Program output: 42                 
Correct output: 26                  | Program output: 26                 
Correct output: -88                 | Program output: -42                
Correct output: -99                 | Program output: -54                
Correct output: -83                 | Program output: -71                
Correct output: -89                 | Program output: 26                 
Correct output: -88                 | Program output: -66                
Correct output: -57                 | Program output: 19                 
Correct output: -74                 | Program output: -74                
Correct output: -64                 | Program output: -64                
Correct output: -93                 | Program output: -93                
Correct output: -73                 | Program output: 67                 
Correct output: -88                 | Program output: -61                
Correct output: -39                 | Program output: -39                
Correct output: -48                 | Program output: -48                
Correct output: -79                 | Program output: -79                
Correct output: 13                  | Program output: 13                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_when} {:close 2, :instruction exec_shove} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 2, :instruction integer_gt})
Lexicase best program: (integer_min in3 in4 boolean_flush boolean_yank boolean_flush in1 boolean_flush in1 exec_swap (integer_min print_integer boolean_eq exec_when (exec_shove ()) exec_yank) (boolean_invert_second_then_and in2 in2 exec_yank) boolean_invert_second_then_and in2 in2 exec_yank boolean_invert_second_then_and in2 in2 exec_yank boolean_invert_second_then_and exec_yank boolean_invert_second_then_and in2 in2 in2 exec_yank boolean_invert_second_then_and in2 boolean_invert_second_then_and in2 in2 in2 exec_yank boolean_invert_second_then_and in2 in2 boolean_swap integer_gt)
Lexicase best errors: [0 0 0 0 0 0 0 0 0 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 52
Percent parens: 0.096
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_when} {:close 2, :instruction exec_shove} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 2, :instruction integer_gt})
Zero cases best program: (integer_min in3 in4 boolean_flush boolean_yank boolean_flush in1 boolean_flush in1 exec_swap (integer_min print_integer boolean_eq exec_when (exec_shove ()) exec_yank) (boolean_invert_second_then_and in2 in2 exec_yank) boolean_invert_second_then_and in2 in2 exec_yank boolean_invert_second_then_and in2 in2 exec_yank boolean_invert_second_then_and exec_yank boolean_invert_second_then_and in2 in2 in2 exec_yank boolean_invert_second_then_and in2 boolean_invert_second_then_and in2 in2 in2 exec_yank boolean_invert_second_then_and in2 in2 boolean_swap integer_gt)
Zero cases best errors: [0 0 0 0 0 0 0 0 0 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 52
Percent parens: 0.096
--- Lexicase Population Statistics ---
Count of elite individuals by case: (298 56 239 764 931 926 488 768 931 423)
Population mean number of elite cases: 5.82
Count of perfect (error zero) individuals by case: (298 56 239 764 931 926 488 768 931 423)
Population mean number of perfect (error zero) cases: 5.82
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_when} {:close 2, :instruction exec_shove} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 2, :instruction integer_gt})
Best program: (integer_min in3 in4 boolean_flush boolean_yank boolean_flush in1 boolean_flush in1 exec_swap (integer_min print_integer boolean_eq exec_when (exec_shove ()) exec_yank) (boolean_invert_second_then_and in2 in2 exec_yank) boolean_invert_second_then_and in2 in2 exec_yank boolean_invert_second_then_and in2 in2 exec_yank boolean_invert_second_then_and exec_yank boolean_invert_second_then_and in2 in2 in2 exec_yank boolean_invert_second_then_and in2 boolean_invert_second_then_and in2 in2 in2 exec_yank boolean_invert_second_then_and in2 in2 boolean_swap integer_gt)
Errors: [0 0 0 0 0 0 0 0 0 1]
Total: 1
Mean: 0.1
Genome size: 47
Size: 52
Percent parens: 0.096
--- Population Statistics ---
Average total errors in population: 4.176
Median total errors in population: 4
Error averages by case: (0.702 0.944 0.761 0.236 0.069 0.074 0.512 0.232 0.069 0.577)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.685
Average program size in population (points): 44.398
Average percent parens in population: 0.130
Minimum age in population: 48.00324681587517
Maximum age in population: 51.32599715515971
Average age in population: 50.01183163561951
Median age in population: 50.07391465269029
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 130
Genome diversity (% unique genomes):	 0.516
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 147
Syntactic diversity (% unique Push programs):	 0.471
Total error diversity:				 0.01
Error (vector) diversity:			 0.045
Behavioral diversity:				 0.116
--- Run Statistics ---
Number of program evaluations used so far: 34000
Number of point (instruction) evaluations so far: 14326489
--- Timings ---
Current time: 1559314727045 milliseconds
Total Time:          93.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        66.9 seconds, 71.4%
Fitness Testing:     15.7 seconds, 16.7%
Report:              11.0 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 33
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 34
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 34
;;******************************
;; -*- Smallest problem report - generation 34
Test total error for best: 175
Test mean error for best: 0.17500
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 1
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 1
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 1
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 1
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 1
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 1
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 1
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 1
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 1
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 1
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 1
Test Case  202 | Error: 0
Test Case  203 | Error: 1
Test Case  204 | Error: 1
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 1
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 1
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 1
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 1
Test Case  235 | Error: 1
Test Case  236 | Error: 0
Test Case  237 | Error: 1
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 1
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 1
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 1
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 1
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 1
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 1
Test Case  286 | Error: 1
Test Case  287 | Error: 1
Test Case  288 | Error: 0
Test Case  289 | Error: 1
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 1
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 1
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 1
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 1
Test Case  327 | Error: 1
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 1
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 1
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 1
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 1
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 1
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 1
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 1
Test Case  366 | Error: 0
Test Case  367 | Error: 1
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 1
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 1
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 1
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 1
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 1
Test Case  403 | Error: 0
Test Case  404 | Error: 1
Test Case  405 | Error: 0
Test Case  406 | Error: 1
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 1
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 1
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 1
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 1
Test Case  430 | Error: 1
Test Case  431 | Error: 0
Test Case  432 | Error: 1
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 1
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 1
Test Case  453 | Error: 1
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 1
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 1
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 1
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 1
Test Case  483 | Error: 1
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 1
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 1
Test Case  497 | Error: 1
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 1
Test Case  505 | Error: 1
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 1
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 1
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 1
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 1
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 1
Test Case  534 | Error: 0
Test Case  535 | Error: 1
Test Case  536 | Error: 1
Test Case  537 | Error: 0
Test Case  538 | Error: 1
Test Case  539 | Error: 0
Test Case  540 | Error: 1
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 1
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 1
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 1
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 1
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 1
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 1
Test Case  585 | Error: 1
Test Case  586 | Error: 1
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 1
Test Case  596 | Error: 1
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 1
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 1
Test Case  610 | Error: 0
Test Case  611 | Error: 1
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 1
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 1
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 1
Test Case  636 | Error: 0
Test Case  637 | Error: 1
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 1
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 1
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 1
Test Case  669 | Error: 0
Test Case  670 | Error: 1
Test Case  671 | Error: 0
Test Case  672 | Error: 1
Test Case  673 | Error: 1
Test Case  674 | Error: 1
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 1
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 1
Test Case  690 | Error: 0
Test Case  691 | Error: 1
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 1
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 1
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 1
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 1
Test Case  717 | Error: 1
Test Case  718 | Error: 0
Test Case  719 | Error: 1
Test Case  720 | Error: 1
Test Case  721 | Error: 0
Test Case  722 | Error: 1
Test Case  723 | Error: 1
Test Case  724 | Error: 0
Test Case  725 | Error: 1
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 1
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 1
Test Case  745 | Error: 0
Test Case  746 | Error: 1
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 1
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 1
Test Case  768 | Error: 1
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 1
Test Case  772 | Error: 1
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 1
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 1
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 1
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 1
Test Case  794 | Error: 1
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 1
Test Case  798 | Error: 0
Test Case  799 | Error: 1
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 1
Test Case  803 | Error: 1
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 1
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 1
Test Case  814 | Error: 0
Test Case  815 | Error: 1
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 1
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 1
Test Case  827 | Error: 0
Test Case  828 | Error: 1
Test Case  829 | Error: 1
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 1
Test Case  835 | Error: 0
Test Case  836 | Error: 1
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 1
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 1
Test Case  848 | Error: 0
Test Case  849 | Error: 1
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 1
Test Case  855 | Error: 0
Test Case  856 | Error: 1
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 1
Test Case  862 | Error: 1
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 1
Test Case  873 | Error: 0
Test Case  874 | Error: 1
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 1
Test Case  884 | Error: 0
Test Case  885 | Error: 1
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 1
Test Case  900 | Error: 0
Test Case  901 | Error: 1
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 1
Test Case  906 | Error: 1
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 1
Test Case  911 | Error: 1
Test Case  912 | Error: 1
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 1
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 1
Test Case  921 | Error: 1
Test Case  922 | Error: 1
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 1
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 1
Test Case  943 | Error: 0
Test Case  944 | Error: 1
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 1
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 1
Test Case  953 | Error: 1
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 1
Test Case  964 | Error: 0
Test Case  965 | Error: 1
Test Case  966 | Error: 0
Test Case  967 | Error: 1
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 1
Test Case  973 | Error: 0
Test Case  974 | Error: 1
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 1
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 1
Test Case  995 | Error: 1
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -74                 | Program output: -74                
Correct output: -23                 | Program output: -23                
Correct output: -21                 | Program output: -21                
Correct output: -24                 | Program output: -24                
Correct output: -58                 | Program output: -58                
Correct output: -50                 | Program output: -50                
Correct output: 14                  | Program output: 14                 
Correct output: -9                  | Program output: -9                 
Correct output: 18                  | Program output: 18                 
Correct output: -5                  | Program output: -5                 
Correct output: 100                 | Program output: 100                
Correct output: -19                 | Program output: -19                
Correct output: -31                 | Program output: -31                
Correct output: 10                  | Program output: 10                 
Correct output: 47                  | Program output: 47                 
Correct output: 17                  | Program output: 34                 
Correct output: 1                   | Program output: 1                  
Correct output: 0                   | Program output: 0                  
Correct output: 14                  | Program output: 14                 
Correct output: 7                   | Program output: 7                  
Correct output: 1                   | Program output: 1                  
Correct output: 36                  | Program output: 36                 
Correct output: 14                  | Program output: 14                 
Correct output: 13                  | Program output: 13                 
Correct output: 1                   | Program output: 1                  
Correct output: 20                  | Program output: 56                 
Correct output: 28                  | Program output: 28                 
Correct output: 22                  | Program output: 22                 
Correct output: 19                  | Program output: 19                 
Correct output: 33                  | Program output: 33                 
Correct output: 14                  | Program output: 14                 
Correct output: 23                  | Program output: 23                 
Correct output: 0                   | Program output: 0                  
Correct output: 16                  | Program output: 16                 
Correct output: 4                   | Program output: 4                  
Correct output: -87                 | Program output: -87                
Correct output: -21                 | Program output: -21                
Correct output: -94                 | Program output: -48                
Correct output: -99                 | Program output: -12                
Correct output: -65                 | Program output: -60                
Correct output: -65                 | Program output: -65                
Correct output: -81                 | Program output: -81                
Correct output: -99                 | Program output: -99                
Correct output: -86                 | Program output: -86                
Correct output: -30                 | Program output: -30                
Correct output: 15                  | Program output: 15                 
Correct output: -46                 | Program output: -46                
Correct output: 8                   | Program output: 8                  
Correct output: 16                  | Program output: 16                 
Correct output: -48                 | Program output: -48                
Correct output: -79                 | Program output: -79                
Correct output: -91                 | Program output: -91                
Correct output: -82                 | Program output: -82                
Correct output: -55                 | Program output: -55                
Correct output: -51                 | Program output: -51                
Correct output: -40                 | Program output: -40                
Correct output: -26                 | Program output: -26                
Correct output: -65                 | Program output: -65                
Correct output: -71                 | Program output: -71                
Correct output: -40                 | Program output: -40                
Correct output: -84                 | Program output: -84                
Correct output: -87                 | Program output: -87                
Correct output: -56                 | Program output: -33                
Correct output: -43                 | Program output: -43                
Correct output: -61                 | Program output: -61                
Correct output: -25                 | Program output: -25                
Correct output: -67                 | Program output: -43                
Correct output: 46                  | Program output: 69                 
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: -55                
Correct output: 15                  | Program output: 15                 
Correct output: -78                 | Program output: -78                
Correct output: -99                 | Program output: -99                
Correct output: 7                   | Program output: 7                  
Correct output: -52                 | Program output: -52                
Correct output: -21                 | Program output: 7                  
Correct output: -48                 | Program output: -39                
Correct output: -89                 | Program output: -89                
Correct output: 28                  | Program output: 28                 
Correct output: 26                  | Program output: 51                 
Correct output: -88                 | Program output: -88                
Correct output: -99                 | Program output: -99                
Correct output: -83                 | Program output: -83                
Correct output: -89                 | Program output: -89                
Correct output: -88                 | Program output: -66                
Correct output: -57                 | Program output: -57                
Correct output: -74                 | Program output: -74                
Correct output: -64                 | Program output: -64                
Correct output: -93                 | Program output: -93                
Correct output: -73                 | Program output: -73                
Correct output: -88                 | Program output: 2                  
Correct output: -39                 | Program output: -39                
Correct output: -48                 | Program output: -45                
Correct output: -79                 | Program output: -79                
Correct output: 13                  | Program output: 13                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 2, :instruction exec_shove} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 2, :instruction integer_gt})
Lexicase best program: (integer_min in3 in4 boolean_flush integer_min in2 in3 boolean_flush boolean_yank boolean_flush in1 boolean_flush in1 exec_swap (integer_min print_integer boolean_eq integer_gte exec_shove ()) (exec_yank) boolean_invert_second_then_and in2 in2 exec_yank boolean_invert_second_then_and in2 in2 in2 exec_yank boolean_invert_second_then_and in2 in2 boolean_swap integer_gt)
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 38
Percent parens: 0.105
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 2, :instruction exec_shove} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 2, :instruction integer_gt})
Zero cases best program: (integer_min in3 in4 boolean_flush integer_min in2 in3 boolean_flush boolean_yank boolean_flush in1 boolean_flush in1 exec_swap (integer_min print_integer boolean_eq integer_gte exec_shove ()) (exec_yank) boolean_invert_second_then_and in2 in2 exec_yank boolean_invert_second_then_and in2 in2 in2 exec_yank boolean_invert_second_then_and in2 in2 boolean_swap integer_gt)
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 38
Percent parens: 0.105
--- Lexicase Population Statistics ---
Count of elite individuals by case: (369 825 582 375 901 566 815 825 400 866)
Population mean number of elite cases: 6.52
Count of perfect (error zero) individuals by case: (369 825 582 375 901 566 815 825 400 866)
Population mean number of perfect (error zero) cases: 6.52
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 2, :instruction exec_shove} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 2, :instruction integer_gt})
Best program: (integer_min in3 in4 boolean_flush integer_min in2 in3 boolean_flush boolean_yank boolean_flush in1 boolean_flush in1 exec_swap (integer_min print_integer boolean_eq integer_gte exec_shove ()) (exec_yank) boolean_invert_second_then_and in2 in2 exec_yank boolean_invert_second_then_and in2 in2 in2 exec_yank boolean_invert_second_then_and in2 in2 boolean_swap integer_gt)
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 34
Size: 38
Percent parens: 0.105
--- Population Statistics ---
Average total errors in population: 3.476
Median total errors in population: 3
Error averages by case: (0.631 0.175 0.418 0.625 0.099 0.434 0.185 0.175 0.6 0.134)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 41.852
Average program size in population (points): 46.701
Average percent parens in population: 0.104
Minimum age in population: 49.97712198551744
Maximum age in population: 53.17575773713179
Average age in population: 51.70786646299786
Median age in population: 51.86518440069631
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 223
Genome diversity (% unique genomes):	 0.451
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 284
Syntactic diversity (% unique Push programs):	 0.406
Total error diversity:				 0.011
Error (vector) diversity:			 0.061
Behavioral diversity:				 0.109
--- Run Statistics ---
Number of program evaluations used so far: 35000
Number of point (instruction) evaluations so far: 14751947
--- Timings ---
Current time: 1559314729634 milliseconds
Total Time:          96.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        68.8 seconds, 71.4%
Fitness Testing:     16.1 seconds, 16.7%
Report:              11.4 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 34
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 34
Successful program: (integer_min in3 in4 boolean_flush integer_min in2 in3 boolean_flush boolean_yank boolean_flush in1 boolean_flush in1 exec_swap (integer_min print_integer boolean_eq integer_gte exec_shove ()) (exec_yank) boolean_invert_second_then_and in2 in2 exec_yank boolean_invert_second_then_and in2 in2 in2 exec_yank boolean_invert_second_then_and in2 in2 boolean_swap integer_gt)
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 38


Auto-simplifying with starting size: 38
step: 0
program: (integer_min in3 in4 boolean_flush integer_min in2 in3 boolean_flush boolean_yank boolean_flush in1 boolean_flush in1 exec_swap (integer_min print_integer boolean_eq integer_gte exec_shove ()) (exec_yank) boolean_invert_second_then_and in2 in2 exec_yank boolean_invert_second_then_and in2 in2 in2 exec_yank boolean_invert_second_then_and in2 in2 boolean_swap integer_gt)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 38

step: 500
program: (integer_min in3 in4 boolean_flush integer_min in2 in3 boolean_flush boolean_yank boolean_flush in1 boolean_flush in1 exec_swap (integer_min print_integer boolean_eq integer_gte exec_shove ()) (exec_yank) boolean_invert_second_then_and in2 in2 exec_yank boolean_invert_second_then_and in2 in2 in2 exec_yank boolean_invert_second_then_and in2 in2 boolean_swap integer_gt)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 38

step: 1000
program: (integer_min in3 in4 boolean_flush integer_min in2 in3 boolean_flush boolean_yank boolean_flush in1 boolean_flush in1 exec_swap (integer_min print_integer boolean_eq integer_gte exec_shove ()) (exec_yank) boolean_invert_second_then_and in2 in2 exec_yank boolean_invert_second_then_and in2 in2 in2 exec_yank boolean_invert_second_then_and in2 in2 boolean_swap integer_gt)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 38

step: 1500
program: (integer_min in3 in4 boolean_flush integer_min in2 in3 boolean_flush boolean_yank boolean_flush in1 boolean_flush in1 exec_swap (integer_min print_integer boolean_eq integer_gte exec_shove ()) (exec_yank) boolean_invert_second_then_and in2 in2 exec_yank boolean_invert_second_then_and in2 in2 in2 exec_yank boolean_invert_second_then_and in2 in2 boolean_swap integer_gt)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 38

step: 2000
program: (integer_min in3 in4 boolean_flush integer_min in2 in3 boolean_flush boolean_yank boolean_flush in1 boolean_flush in1 exec_swap (integer_min print_integer boolean_eq integer_gte exec_shove ()) (exec_yank) boolean_invert_second_then_and in2 in2 exec_yank boolean_invert_second_then_and in2 in2 in2 exec_yank boolean_invert_second_then_and in2 in2 boolean_swap integer_gt)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 38

step: 2500
program: (integer_min in3 in4 boolean_flush integer_min in2 in3 boolean_flush boolean_yank boolean_flush in1 boolean_flush in1 exec_swap (integer_min print_integer boolean_eq integer_gte exec_shove ()) (exec_yank) boolean_invert_second_then_and in2 in2 exec_yank boolean_invert_second_then_and in2 in2 in2 exec_yank boolean_invert_second_then_and in2 in2 boolean_swap integer_gt)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 38

step: 3000
program: (integer_min in3 in4 boolean_flush integer_min in2 in3 boolean_flush boolean_yank boolean_flush in1 boolean_flush in1 exec_swap (integer_min print_integer boolean_eq integer_gte exec_shove ()) (exec_yank) boolean_invert_second_then_and in2 in2 exec_yank boolean_invert_second_then_and in2 in2 in2 exec_yank boolean_invert_second_then_and in2 in2 boolean_swap integer_gt)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 38

step: 3500
program: (integer_min in3 in4 boolean_flush integer_min in2 in3 boolean_flush boolean_yank boolean_flush in1 boolean_flush in1 exec_swap (integer_min print_integer boolean_eq integer_gte exec_shove ()) (exec_yank) boolean_invert_second_then_and in2 in2 exec_yank boolean_invert_second_then_and in2 in2 in2 exec_yank boolean_invert_second_then_and in2 in2 boolean_swap integer_gt)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 38

step: 4000
program: (integer_min in3 in4 boolean_flush integer_min in2 in3 boolean_flush boolean_yank boolean_flush in1 boolean_flush in1 exec_swap (integer_min print_integer boolean_eq integer_gte exec_shove ()) (exec_yank) boolean_invert_second_then_and in2 in2 exec_yank boolean_invert_second_then_and in2 in2 in2 exec_yank boolean_invert_second_then_and in2 in2 boolean_swap integer_gt)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 38

step: 4500
program: (integer_min in3 in4 boolean_flush integer_min in2 in3 boolean_flush boolean_yank boolean_flush in1 boolean_flush in1 exec_swap (integer_min print_integer boolean_eq integer_gte exec_shove ()) (exec_yank) boolean_invert_second_then_and in2 in2 exec_yank boolean_invert_second_then_and in2 in2 in2 exec_yank boolean_invert_second_then_and in2 in2 boolean_swap integer_gt)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 38

step: 5000
program: (integer_min in3 in4 boolean_flush integer_min in2 in3 boolean_flush boolean_yank boolean_flush in1 boolean_flush in1 exec_swap (integer_min print_integer boolean_eq integer_gte exec_shove ()) (exec_yank) boolean_invert_second_then_and in2 in2 exec_yank boolean_invert_second_then_and in2 in2 in2 exec_yank boolean_invert_second_then_and in2 in2 boolean_swap integer_gt)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 38

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 34
Test total error for best: 175
Test mean error for best: 0.17500
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 1
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 1
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 1
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 1
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 1
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 1
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 1
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 1
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 1
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 1
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 1
Test Case  202 | Error: 0
Test Case  203 | Error: 1
Test Case  204 | Error: 1
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 1
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 1
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 1
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 1
Test Case  235 | Error: 1
Test Case  236 | Error: 0
Test Case  237 | Error: 1
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 1
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 1
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 1
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 1
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 1
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 1
Test Case  286 | Error: 1
Test Case  287 | Error: 1
Test Case  288 | Error: 0
Test Case  289 | Error: 1
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 1
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 1
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 1
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 1
Test Case  327 | Error: 1
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 1
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 1
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 1
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 1
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 1
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 1
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 1
Test Case  366 | Error: 0
Test Case  367 | Error: 1
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 1
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 1
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 1
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 1
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 1
Test Case  403 | Error: 0
Test Case  404 | Error: 1
Test Case  405 | Error: 0
Test Case  406 | Error: 1
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 1
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 1
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 1
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 1
Test Case  430 | Error: 1
Test Case  431 | Error: 0
Test Case  432 | Error: 1
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 1
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 1
Test Case  453 | Error: 1
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 1
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 1
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 1
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 1
Test Case  483 | Error: 1
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 1
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 1
Test Case  497 | Error: 1
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 1
Test Case  505 | Error: 1
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 1
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 1
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 1
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 1
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 1
Test Case  534 | Error: 0
Test Case  535 | Error: 1
Test Case  536 | Error: 1
Test Case  537 | Error: 0
Test Case  538 | Error: 1
Test Case  539 | Error: 0
Test Case  540 | Error: 1
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 1
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 1
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 1
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 1
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 1
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 1
Test Case  585 | Error: 1
Test Case  586 | Error: 1
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 1
Test Case  596 | Error: 1
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 1
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 1
Test Case  610 | Error: 0
Test Case  611 | Error: 1
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 1
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 1
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 1
Test Case  636 | Error: 0
Test Case  637 | Error: 1
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 1
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 1
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 1
Test Case  669 | Error: 0
Test Case  670 | Error: 1
Test Case  671 | Error: 0
Test Case  672 | Error: 1
Test Case  673 | Error: 1
Test Case  674 | Error: 1
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 1
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 1
Test Case  690 | Error: 0
Test Case  691 | Error: 1
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 1
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 1
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 1
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 1
Test Case  717 | Error: 1
Test Case  718 | Error: 0
Test Case  719 | Error: 1
Test Case  720 | Error: 1
Test Case  721 | Error: 0
Test Case  722 | Error: 1
Test Case  723 | Error: 1
Test Case  724 | Error: 0
Test Case  725 | Error: 1
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 1
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 1
Test Case  745 | Error: 0
Test Case  746 | Error: 1
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 1
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 1
Test Case  768 | Error: 1
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 1
Test Case  772 | Error: 1
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 1
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 1
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 1
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 1
Test Case  794 | Error: 1
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 1
Test Case  798 | Error: 0
Test Case  799 | Error: 1
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 1
Test Case  803 | Error: 1
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 1
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 1
Test Case  814 | Error: 0
Test Case  815 | Error: 1
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 1
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 1
Test Case  827 | Error: 0
Test Case  828 | Error: 1
Test Case  829 | Error: 1
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 1
Test Case  835 | Error: 0
Test Case  836 | Error: 1
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 1
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 1
Test Case  848 | Error: 0
Test Case  849 | Error: 1
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 1
Test Case  855 | Error: 0
Test Case  856 | Error: 1
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 1
Test Case  862 | Error: 1
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 1
Test Case  873 | Error: 0
Test Case  874 | Error: 1
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 1
Test Case  884 | Error: 0
Test Case  885 | Error: 1
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 1
Test Case  900 | Error: 0
Test Case  901 | Error: 1
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 1
Test Case  906 | Error: 1
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 1
Test Case  911 | Error: 1
Test Case  912 | Error: 1
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 1
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 1
Test Case  921 | Error: 1
Test Case  922 | Error: 1
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 1
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 1
Test Case  943 | Error: 0
Test Case  944 | Error: 1
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 1
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 1
Test Case  953 | Error: 1
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 1
Test Case  964 | Error: 0
Test Case  965 | Error: 1
Test Case  966 | Error: 0
Test Case  967 | Error: 1
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 1
Test Case  973 | Error: 0
Test Case  974 | Error: 1
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 1
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 1
Test Case  995 | Error: 1
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -74                 | Program output: -74                
Correct output: -23                 | Program output: -23                
Correct output: -21                 | Program output: -21                
Correct output: -24                 | Program output: -24                
Correct output: -58                 | Program output: -58                
Correct output: -50                 | Program output: -50                
Correct output: 14                  | Program output: 14                 
Correct output: -9                  | Program output: -9                 
Correct output: 18                  | Program output: 18                 
Correct output: -5                  | Program output: -5                 
Correct output: 100                 | Program output: 100                
Correct output: -19                 | Program output: -19                
Correct output: -31                 | Program output: -31                
Correct output: 10                  | Program output: 10                 
Correct output: 47                  | Program output: 47                 
Correct output: 17                  | Program output: 34                 
Correct output: 1                   | Program output: 1                  
Correct output: 0                   | Program output: 0                  
Correct output: 14                  | Program output: 14                 
Correct output: 7                   | Program output: 7                  
Correct output: 1                   | Program output: 1                  
Correct output: 36                  | Program output: 36                 
Correct output: 14                  | Program output: 14                 
Correct output: 13                  | Program output: 13                 
Correct output: 1                   | Program output: 1                  
Correct output: 20                  | Program output: 56                 
Correct output: 28                  | Program output: 28                 
Correct output: 22                  | Program output: 22                 
Correct output: 19                  | Program output: 19                 
Correct output: 33                  | Program output: 33                 
Correct output: 14                  | Program output: 14                 
Correct output: 23                  | Program output: 23                 
Correct output: 0                   | Program output: 0                  
Correct output: 16                  | Program output: 16                 
Correct output: 4                   | Program output: 4                  
Correct output: -87                 | Program output: -87                
Correct output: -21                 | Program output: -21                
Correct output: -94                 | Program output: -48                
Correct output: -99                 | Program output: -12                
Correct output: -65                 | Program output: -60                
Correct output: -65                 | Program output: -65                
Correct output: -81                 | Program output: -81                
Correct output: -99                 | Program output: -99                
Correct output: -86                 | Program output: -86                
Correct output: -30                 | Program output: -30                
Correct output: 15                  | Program output: 15                 
Correct output: -46                 | Program output: -46                
Correct output: 8                   | Program output: 8                  
Correct output: 16                  | Program output: 16                 
Correct output: -48                 | Program output: -48                
Correct output: -79                 | Program output: -79                
Correct output: -91                 | Program output: -91                
Correct output: -82                 | Program output: -82                
Correct output: -55                 | Program output: -55                
Correct output: -51                 | Program output: -51                
Correct output: -40                 | Program output: -40                
Correct output: -26                 | Program output: -26                
Correct output: -65                 | Program output: -65                
Correct output: -71                 | Program output: -71                
Correct output: -40                 | Program output: -40                
Correct output: -84                 | Program output: -84                
Correct output: -87                 | Program output: -87                
Correct output: -56                 | Program output: -33                
Correct output: -43                 | Program output: -43                
Correct output: -61                 | Program output: -61                
Correct output: -25                 | Program output: -25                
Correct output: -67                 | Program output: -43                
Correct output: 46                  | Program output: 69                 
Correct output: -53                 | Program output: -53                
Correct output: -55                 | Program output: -55                
Correct output: 15                  | Program output: 15                 
Correct output: -78                 | Program output: -78                
Correct output: -99                 | Program output: -99                
Correct output: 7                   | Program output: 7                  
Correct output: -52                 | Program output: -52                
Correct output: -21                 | Program output: 7                  
Correct output: -48                 | Program output: -39                
Correct output: -89                 | Program output: -89                
Correct output: 28                  | Program output: 28                 
Correct output: 26                  | Program output: 51                 
Correct output: -88                 | Program output: -88                
Correct output: -99                 | Program output: -99                
Correct output: -83                 | Program output: -83                
Correct output: -89                 | Program output: -89                
Correct output: -88                 | Program output: -66                
Correct output: -57                 | Program output: -57                
Correct output: -74                 | Program output: -74                
Correct output: -64                 | Program output: -64                
Correct output: -93                 | Program output: -93                
Correct output: -73                 | Program output: -73                
Correct output: -88                 | Program output: 2                  
Correct output: -39                 | Program output: -39                
Correct output: -48                 | Program output: -45                
Correct output: -79                 | Program output: -79                
Correct output: 13                  | Program output: 13                 
;;******************************
