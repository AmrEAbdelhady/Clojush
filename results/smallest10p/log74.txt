Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x30b9728f clojush.problems.software.smallest$fn__7460@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@24b8a393]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[77 -96 -96 -96] -96] [[63 38 63 63] 38] [[-79 -29 -79 -79] -79] [[-57 -57 -57 42] -57] [[7 -24 7 7] -24] [[61 -27 -27 -27] -27] [[-92 -92 73 -92] -92] [[68 68 -53 68] -53] [[-92 -92 -92 77] -92] [[-33 24 24 24] -33] [(1 1 1 1) 1] [(-94 -94 -94 -94) -94] [(-49 -49 -49 -49) -49] [(0 0 0 0) 0] [(-23 -23 -23 -23) -23] [(98 31 12 23) 12] [(22 41 53 31) 22] [(56 61 15 91) 15] [(97 35 54 48) 35] [(68 97 32 25) 25] [(59 62 35 65) 35] [(5 88 32 88) 5] [(33 82 95 74) 33] [(54 25 42 86) 25] [(45 0 32 6) 0] [(19 68 21 46) 19] [(94 11 52 7) 7] [(1 58 26 45) 1] [(0 39 44 54) 0] [(95 68 18 81) 18] [(7 93 9 3) 3] [(19 95 91 27) 19] [(77 46 32 41) 32] [(63 57 23 100) 23] [(97 76 49 11) 11] [(-91 74 68 95) -91] [(-34 -74 -49 25) -74] [(71 13 67 -4) -4] [(-81 -6 25 56) -81] [(-93 -25 -54 74) -93] [(62 -23 88 -29) -29] [(63 -21 0 -2) -21] [(-8 -91 90 -86) -91] [(15 18 -25 -2) -25] [(-38 -64 -9 -22) -64] [(-81 -77 90 100) -81] [(-40 34 68 -24) -40] [(17 85 5 -50) -50] [(-95 -16 -34 -64) -95] [(-61 -66 -54 35) -66] [(-35 8 -8 57) -35] [(-2 52 -39 -94) -94] [(-49 -54 -28 -59) -59] [(-27 38 -13 61) -27] [(-21 13 -95 72) -95] [(-72 90 -25 84) -72] [(-62 -29 60 57) -62] [(44 -16 -54 -70) -70] [(-3 65 -77 45) -77] [(94 -46 -63 -58) -63] [(63 -48 84 -97) -97] [(-32 -18 -62 99) -62] [(-11 6 -18 -29) -29] [(-11 -16 34 43) -16] [(69 -42 -89 64) -89] [(95 79 42 7) 7] [(36 -87 87 51) -87] [(87 -75 -29 -89) -89] [(-68 78 96 49) -68] [(-82 98 24 34) -82] [(57 -88 -22 77) -88] [(-1 -83 3 50) -83] [(64 20 -35 -38) -38] [(-17 87 -69 -19) -69] [(-56 -36 -53 80) -56] [(-59 9 -25 73) -59] [(27 91 -1 -85) -85] [(79 25 29 -57) -57] [(-78 2 99 -10) -78] [(-64 -75 97 -21) -75] [(-32 21 70 59) -32] [(85 -80 -30 25) -80] [(-81 -63 67 -70) -81] [(-72 67 34 -87) -87] [(56 86 27 69) 27] [(55 7 -19 -87) -87] [(64 -55 8 36) -55] [(43 18 28 99) 18] [(13 70 90 8) 8] [(-63 6 -84 -53) -84] [(-100 22 -53 100) -100] [(73 64 86 -71) -71] [(-59 -58 100 54) -59] [(-82 -7 -37 74) -82] [(65 9 -18 40) -18])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[77 -96 -96 -96] -96]
Train Case:   6 | Input/Output: [[63 38 63 63] 38]
Train Case:   7 | Input/Output: [[-79 -29 -79 -79] -79]
Train Case:   8 | Input/Output: [[-57 -57 -57 42] -57]
Train Case:   9 | Input/Output: [[7 -24 7 7] -24]
Train Case:  10 | Input/Output: [[61 -27 -27 -27] -27]
Train Case:  11 | Input/Output: [[-92 -92 73 -92] -92]
Train Case:  12 | Input/Output: [[68 68 -53 68] -53]
Train Case:  13 | Input/Output: [[-92 -92 -92 77] -92]
Train Case:  14 | Input/Output: [[-33 24 24 24] -33]
Train Case:  15 | Input/Output: [(1 1 1 1) 1]
Train Case:  16 | Input/Output: [(-94 -94 -94 -94) -94]
Train Case:  17 | Input/Output: [(-49 -49 -49 -49) -49]
Train Case:  18 | Input/Output: [(0 0 0 0) 0]
Train Case:  19 | Input/Output: [(-23 -23 -23 -23) -23]
Train Case:  20 | Input/Output: [(98 31 12 23) 12]
Train Case:  21 | Input/Output: [(22 41 53 31) 22]
Train Case:  22 | Input/Output: [(56 61 15 91) 15]
Train Case:  23 | Input/Output: [(97 35 54 48) 35]
Train Case:  24 | Input/Output: [(68 97 32 25) 25]
Train Case:  25 | Input/Output: [(59 62 35 65) 35]
Train Case:  26 | Input/Output: [(5 88 32 88) 5]
Train Case:  27 | Input/Output: [(33 82 95 74) 33]
Train Case:  28 | Input/Output: [(54 25 42 86) 25]
Train Case:  29 | Input/Output: [(45 0 32 6) 0]
Train Case:  30 | Input/Output: [(19 68 21 46) 19]
Train Case:  31 | Input/Output: [(94 11 52 7) 7]
Train Case:  32 | Input/Output: [(1 58 26 45) 1]
Train Case:  33 | Input/Output: [(0 39 44 54) 0]
Train Case:  34 | Input/Output: [(95 68 18 81) 18]
Train Case:  35 | Input/Output: [(7 93 9 3) 3]
Train Case:  36 | Input/Output: [(19 95 91 27) 19]
Train Case:  37 | Input/Output: [(77 46 32 41) 32]
Train Case:  38 | Input/Output: [(63 57 23 100) 23]
Train Case:  39 | Input/Output: [(97 76 49 11) 11]
Train Case:  40 | Input/Output: [(-91 74 68 95) -91]
Train Case:  41 | Input/Output: [(-34 -74 -49 25) -74]
Train Case:  42 | Input/Output: [(71 13 67 -4) -4]
Train Case:  43 | Input/Output: [(-81 -6 25 56) -81]
Train Case:  44 | Input/Output: [(-93 -25 -54 74) -93]
Train Case:  45 | Input/Output: [(62 -23 88 -29) -29]
Train Case:  46 | Input/Output: [(63 -21 0 -2) -21]
Train Case:  47 | Input/Output: [(-8 -91 90 -86) -91]
Train Case:  48 | Input/Output: [(15 18 -25 -2) -25]
Train Case:  49 | Input/Output: [(-38 -64 -9 -22) -64]
Train Case:  50 | Input/Output: [(-81 -77 90 100) -81]
Train Case:  51 | Input/Output: [(-40 34 68 -24) -40]
Train Case:  52 | Input/Output: [(17 85 5 -50) -50]
Train Case:  53 | Input/Output: [(-95 -16 -34 -64) -95]
Train Case:  54 | Input/Output: [(-61 -66 -54 35) -66]
Train Case:  55 | Input/Output: [(-35 8 -8 57) -35]
Train Case:  56 | Input/Output: [(-2 52 -39 -94) -94]
Train Case:  57 | Input/Output: [(-49 -54 -28 -59) -59]
Train Case:  58 | Input/Output: [(-27 38 -13 61) -27]
Train Case:  59 | Input/Output: [(-21 13 -95 72) -95]
Train Case:  60 | Input/Output: [(-72 90 -25 84) -72]
Train Case:  61 | Input/Output: [(-62 -29 60 57) -62]
Train Case:  62 | Input/Output: [(44 -16 -54 -70) -70]
Train Case:  63 | Input/Output: [(-3 65 -77 45) -77]
Train Case:  64 | Input/Output: [(94 -46 -63 -58) -63]
Train Case:  65 | Input/Output: [(63 -48 84 -97) -97]
Train Case:  66 | Input/Output: [(-32 -18 -62 99) -62]
Train Case:  67 | Input/Output: [(-11 6 -18 -29) -29]
Train Case:  68 | Input/Output: [(-11 -16 34 43) -16]
Train Case:  69 | Input/Output: [(69 -42 -89 64) -89]
Train Case:  70 | Input/Output: [(95 79 42 7) 7]
Train Case:  71 | Input/Output: [(36 -87 87 51) -87]
Train Case:  72 | Input/Output: [(87 -75 -29 -89) -89]
Train Case:  73 | Input/Output: [(-68 78 96 49) -68]
Train Case:  74 | Input/Output: [(-82 98 24 34) -82]
Train Case:  75 | Input/Output: [(57 -88 -22 77) -88]
Train Case:  76 | Input/Output: [(-1 -83 3 50) -83]
Train Case:  77 | Input/Output: [(64 20 -35 -38) -38]
Train Case:  78 | Input/Output: [(-17 87 -69 -19) -69]
Train Case:  79 | Input/Output: [(-56 -36 -53 80) -56]
Train Case:  80 | Input/Output: [(-59 9 -25 73) -59]
Train Case:  81 | Input/Output: [(27 91 -1 -85) -85]
Train Case:  82 | Input/Output: [(79 25 29 -57) -57]
Train Case:  83 | Input/Output: [(-78 2 99 -10) -78]
Train Case:  84 | Input/Output: [(-64 -75 97 -21) -75]
Train Case:  85 | Input/Output: [(-32 21 70 59) -32]
Train Case:  86 | Input/Output: [(85 -80 -30 25) -80]
Train Case:  87 | Input/Output: [(-81 -63 67 -70) -81]
Train Case:  88 | Input/Output: [(-72 67 34 -87) -87]
Train Case:  89 | Input/Output: [(56 86 27 69) 27]
Train Case:  90 | Input/Output: [(55 7 -19 -87) -87]
Train Case:  91 | Input/Output: [(64 -55 8 36) -55]
Train Case:  92 | Input/Output: [(43 18 28 99) 18]
Train Case:  93 | Input/Output: [(13 70 90 8) 8]
Train Case:  94 | Input/Output: [(-63 6 -84 -53) -84]
Train Case:  95 | Input/Output: [(-100 22 -53 100) -100]
Train Case:  96 | Input/Output: [(73 64 86 -71) -71]
Train Case:  97 | Input/Output: [(-59 -58 100 54) -59]
Train Case:  98 | Input/Output: [(-82 -7 -37 74) -82]
Train Case:  99 | Input/Output: [(65 9 -18 40) -18]
Test Case:   0 | Input/Output: [[-25 67 -25 -25] -25]
Test Case:   1 | Input/Output: [[38 85 38 38] 38]
Test Case:   2 | Input/Output: [[-59 -87 -87 -87] -87]
Test Case:   3 | Input/Output: [[-48 -6 -6 -6] -48]
Test Case:   4 | Input/Output: [[58 58 -29 58] -29]
Test Case:   5 | Input/Output: [[-68 23 -68 -68] -68]
Test Case:   6 | Input/Output: [[-82 -82 -77 -82] -82]
Test Case:   7 | Input/Output: [[-95 -95 -95 -24] -95]
Test Case:   8 | Input/Output: [[49 49 49 44] 44]
Test Case:   9 | Input/Output: [[6 6 6 0] 0]
Test Case:  10 | Input/Output: [[70 70 70 95] 70]
Test Case:  11 | Input/Output: [[-65 -65 -65 88] -65]
Test Case:  12 | Input/Output: [[2 2 2 85] 2]
Test Case:  13 | Input/Output: [[51 85 85 85] 51]
Test Case:  14 | Input/Output: [[-7 -7 -57 -7] -57]
Test Case:  15 | Input/Output: [[-99 -94 -94 -94] -99]
Test Case:  16 | Input/Output: [[64 -78 -78 -78] -78]
Test Case:  17 | Input/Output: [[5 -57 5 5] -57]
Test Case:  18 | Input/Output: [[-98 10 10 10] -98]
Test Case:  19 | Input/Output: [[1 1 1 75] 1]
Test Case:  20 | Input/Output: [[-100 83 83 83] -100]
Test Case:  21 | Input/Output: [[-91 -91 70 -91] -91]
Test Case:  22 | Input/Output: [[45 84 84 84] 45]
Test Case:  23 | Input/Output: [[-55 -85 -85 -85] -85]
Test Case:  24 | Input/Output: [[0 0 64 0] 0]
Test Case:  25 | Input/Output: [[-36 -36 -58 -36] -58]
Test Case:  26 | Input/Output: [[50 50 -44 50] -44]
Test Case:  27 | Input/Output: [[-43 -43 25 -43] -43]
Test Case:  28 | Input/Output: [[-3 -3 -60 -3] -60]
Test Case:  29 | Input/Output: [[-90 77 77 77] -90]
Test Case:  30 | Input/Output: [[92 92 92 -45] -45]
Test Case:  31 | Input/Output: [[-49 -39 -49 -49] -49]
Test Case:  32 | Input/Output: [[32 -7 32 32] -7]
Test Case:  33 | Input/Output: [[-64 -64 -64 -44] -64]
Test Case:  34 | Input/Output: [[-27 -27 -27 11] -27]
Test Case:  35 | Input/Output: [[55 55 55 -59] -59]
Test Case:  36 | Input/Output: [[27 27 -89 27] -89]
Test Case:  37 | Input/Output: [[-9 -72 -9 -9] -72]
Test Case:  38 | Input/Output: [[16 16 16 -7] -7]
Test Case:  39 | Input/Output: [[45 -93 45 45] -93]
Test Case:  40 | Input/Output: [[30 30 -44 30] -44]
Test Case:  41 | Input/Output: [[-64 -64 63 -64] -64]
Test Case:  42 | Input/Output: [[-1 -23 -1 -1] -23]
Test Case:  43 | Input/Output: [[90 90 90 -13] -13]
Test Case:  44 | Input/Output: [[-38 62 62 62] -38]
Test Case:  45 | Input/Output: [[-90 -90 -2 -90] -90]
Test Case:  46 | Input/Output: [[-25 -25 -25 80] -25]
Test Case:  47 | Input/Output: [[59 59 59 58] 58]
Test Case:  48 | Input/Output: [[19 19 19 -4] -4]
Test Case:  49 | Input/Output: [[-38 -38 -38 34] -38]
Test Case:  50 | Input/Output: [[87 87 87 10] 10]
Test Case:  51 | Input/Output: [[90 90 46 90] 46]
Test Case:  52 | Input/Output: [[-25 78 -25 -25] -25]
Test Case:  53 | Input/Output: [[-87 44 -87 -87] -87]
Test Case:  54 | Input/Output: [[-82 -82 -82 -61] -82]
Test Case:  55 | Input/Output: [[-60 -60 98 -60] -60]
Test Case:  56 | Input/Output: [[-40 -40 -40 53] -40]
Test Case:  57 | Input/Output: [[59 59 59 36] 36]
Test Case:  58 | Input/Output: [[18 18 -7 18] -7]
Test Case:  59 | Input/Output: [[-89 -89 -89 -89] -89]
Test Case:  60 | Input/Output: [[58 -35 -35 -35] -35]
Test Case:  61 | Input/Output: [[-12 -12 -12 99] -12]
Test Case:  62 | Input/Output: [[69 84 84 84] 69]
Test Case:  63 | Input/Output: [[-77 72 -77 -77] -77]
Test Case:  64 | Input/Output: [[-7 -54 -54 -54] -54]
Test Case:  65 | Input/Output: [[26 -9 -9 -9] -9]
Test Case:  66 | Input/Output: [[-81 -26 -81 -81] -81]
Test Case:  67 | Input/Output: [[11 11 23 11] 11]
Test Case:  68 | Input/Output: [[-15 8 -15 -15] -15]
Test Case:  69 | Input/Output: [[50 50 -26 50] -26]
Test Case:  70 | Input/Output: [[-74 -74 57 -74] -74]
Test Case:  71 | Input/Output: [[72 5 72 72] 5]
Test Case:  72 | Input/Output: [[60 60 60 24] 24]
Test Case:  73 | Input/Output: [[38 -54 38 38] -54]
Test Case:  74 | Input/Output: [[-70 -70 -70 -70] -70]
Test Case:  75 | Input/Output: [[-28 -28 -28 47] -28]
Test Case:  76 | Input/Output: [[-79 -79 93 -79] -79]
Test Case:  77 | Input/Output: [[-46 77 77 77] -46]
Test Case:  78 | Input/Output: [[6 54 54 54] 6]
Test Case:  79 | Input/Output: [[88 -77 88 88] -77]
Test Case:  80 | Input/Output: [[99 -59 99 99] -59]
Test Case:  81 | Input/Output: [[9 9 -97 9] -97]
Test Case:  82 | Input/Output: [[-71 -6 -71 -71] -71]
Test Case:  83 | Input/Output: [[-61 -91 -91 -91] -91]
Test Case:  84 | Input/Output: [[45 -11 -11 -11] -11]
Test Case:  85 | Input/Output: [[33 -66 -66 -66] -66]
Test Case:  86 | Input/Output: [[-32 -49 -49 -49] -49]
Test Case:  87 | Input/Output: [[65 -62 -62 -62] -62]
Test Case:  88 | Input/Output: [[44 7 44 44] 7]
Test Case:  89 | Input/Output: [[58 58 -13 58] -13]
Test Case:  90 | Input/Output: [[-52 -51 -52 -52] -52]
Test Case:  91 | Input/Output: [[-94 -94 -94 -15] -94]
Test Case:  92 | Input/Output: [[22 22 22 -69] -69]
Test Case:  93 | Input/Output: [[13 -87 13 13] -87]
Test Case:  94 | Input/Output: [[93 -64 93 93] -64]
Test Case:  95 | Input/Output: [[-87 -94 -87 -87] -94]
Test Case:  96 | Input/Output: [[73 -80 -80 -80] -80]
Test Case:  97 | Input/Output: [[-37 -37 -60 -37] -60]
Test Case:  98 | Input/Output: [[-92 -92 -72 -92] -92]
Test Case:  99 | Input/Output: [[97 97 97 -74] -74]
Test Case: 100 | Input/Output: [(46 46 46 46) 46]
Test Case: 101 | Input/Output: [(-87 -87 -87 -87) -87]
Test Case: 102 | Input/Output: [(-79 -79 -79 -79) -79]
Test Case: 103 | Input/Output: [(-97 -97 -97 -97) -97]
Test Case: 104 | Input/Output: [(-74 -74 -74 -74) -74]
Test Case: 105 | Input/Output: [(-92 -92 -92 -92) -92]
Test Case: 106 | Input/Output: [(74 74 74 74) 74]
Test Case: 107 | Input/Output: [(76 76 76 76) 76]
Test Case: 108 | Input/Output: [(-26 -26 -26 -26) -26]
Test Case: 109 | Input/Output: [(-73 -73 -73 -73) -73]
Test Case: 110 | Input/Output: [(84 84 84 84) 84]
Test Case: 111 | Input/Output: [(12 12 12 12) 12]
Test Case: 112 | Input/Output: [(-85 -85 -85 -85) -85]
Test Case: 113 | Input/Output: [(25 25 25 25) 25]
Test Case: 114 | Input/Output: [(75 75 75 75) 75]
Test Case: 115 | Input/Output: [(89 89 89 89) 89]
Test Case: 116 | Input/Output: [(-55 -55 -55 -55) -55]
Test Case: 117 | Input/Output: [(-87 -87 -87 -87) -87]
Test Case: 118 | Input/Output: [(-19 -19 -19 -19) -19]
Test Case: 119 | Input/Output: [(-81 -81 -81 -81) -81]
Test Case: 120 | Input/Output: [(-66 -66 -66 -66) -66]
Test Case: 121 | Input/Output: [(-29 -29 -29 -29) -29]
Test Case: 122 | Input/Output: [(92 92 92 92) 92]
Test Case: 123 | Input/Output: [(47 47 47 47) 47]
Test Case: 124 | Input/Output: [(42 42 42 42) 42]
Test Case: 125 | Input/Output: [(53 53 53 53) 53]
Test Case: 126 | Input/Output: [(-83 -83 -83 -83) -83]
Test Case: 127 | Input/Output: [(-89 -89 -89 -89) -89]
Test Case: 128 | Input/Output: [(-36 -36 -36 -36) -36]
Test Case: 129 | Input/Output: [(27 27 27 27) 27]
Test Case: 130 | Input/Output: [(93 93 93 93) 93]
Test Case: 131 | Input/Output: [(-4 -4 -4 -4) -4]
Test Case: 132 | Input/Output: [(-75 -75 -75 -75) -75]
Test Case: 133 | Input/Output: [(-45 -45 -45 -45) -45]
Test Case: 134 | Input/Output: [(-8 -8 -8 -8) -8]
Test Case: 135 | Input/Output: [(-92 -92 -92 -92) -92]
Test Case: 136 | Input/Output: [(54 54 54 54) 54]
Test Case: 137 | Input/Output: [(21 21 21 21) 21]
Test Case: 138 | Input/Output: [(55 55 55 55) 55]
Test Case: 139 | Input/Output: [(-98 -98 -98 -98) -98]
Test Case: 140 | Input/Output: [(-91 -91 -91 -91) -91]
Test Case: 141 | Input/Output: [(58 58 58 58) 58]
Test Case: 142 | Input/Output: [(59 59 59 59) 59]
Test Case: 143 | Input/Output: [(41 41 41 41) 41]
Test Case: 144 | Input/Output: [(96 96 96 96) 96]
Test Case: 145 | Input/Output: [(38 38 38 38) 38]
Test Case: 146 | Input/Output: [(59 59 59 59) 59]
Test Case: 147 | Input/Output: [(55 55 55 55) 55]
Test Case: 148 | Input/Output: [(-87 -87 -87 -87) -87]
Test Case: 149 | Input/Output: [(29 29 29 29) 29]
Test Case: 150 | Input/Output: [(-79 -79 -79 -79) -79]
Test Case: 151 | Input/Output: [(-59 -59 -59 -59) -59]
Test Case: 152 | Input/Output: [(73 73 73 73) 73]
Test Case: 153 | Input/Output: [(-16 -16 -16 -16) -16]
Test Case: 154 | Input/Output: [(-82 -82 -82 -82) -82]
Test Case: 155 | Input/Output: [(-8 -8 -8 -8) -8]
Test Case: 156 | Input/Output: [(-24 -24 -24 -24) -24]
Test Case: 157 | Input/Output: [(13 13 13 13) 13]
Test Case: 158 | Input/Output: [(29 29 29 29) 29]
Test Case: 159 | Input/Output: [(-100 -100 -100 -100) -100]
Test Case: 160 | Input/Output: [(-57 -57 -57 -57) -57]
Test Case: 161 | Input/Output: [(-31 -31 -31 -31) -31]
Test Case: 162 | Input/Output: [(70 70 70 70) 70]
Test Case: 163 | Input/Output: [(75 75 75 75) 75]
Test Case: 164 | Input/Output: [(83 83 83 83) 83]
Test Case: 165 | Input/Output: [(29 29 29 29) 29]
Test Case: 166 | Input/Output: [(92 92 92 92) 92]
Test Case: 167 | Input/Output: [(87 87 87 87) 87]
Test Case: 168 | Input/Output: [(-73 -73 -73 -73) -73]
Test Case: 169 | Input/Output: [(-97 -97 -97 -97) -97]
Test Case: 170 | Input/Output: [(55 55 55 55) 55]
Test Case: 171 | Input/Output: [(58 58 58 58) 58]
Test Case: 172 | Input/Output: [(-2 -2 -2 -2) -2]
Test Case: 173 | Input/Output: [(76 76 76 76) 76]
Test Case: 174 | Input/Output: [(-17 -17 -17 -17) -17]
Test Case: 175 | Input/Output: [(18 18 18 18) 18]
Test Case: 176 | Input/Output: [(-65 -65 -65 -65) -65]
Test Case: 177 | Input/Output: [(-58 -58 -58 -58) -58]
Test Case: 178 | Input/Output: [(84 84 84 84) 84]
Test Case: 179 | Input/Output: [(83 83 83 83) 83]
Test Case: 180 | Input/Output: [(14 14 14 14) 14]
Test Case: 181 | Input/Output: [(-76 -76 -76 -76) -76]
Test Case: 182 | Input/Output: [(-22 -22 -22 -22) -22]
Test Case: 183 | Input/Output: [(70 70 70 70) 70]
Test Case: 184 | Input/Output: [(-84 -84 -84 -84) -84]
Test Case: 185 | Input/Output: [(-93 -93 -93 -93) -93]
Test Case: 186 | Input/Output: [(-29 -29 -29 -29) -29]
Test Case: 187 | Input/Output: [(15 15 15 15) 15]
Test Case: 188 | Input/Output: [(-79 -79 -79 -79) -79]
Test Case: 189 | Input/Output: [(-36 -36 -36 -36) -36]
Test Case: 190 | Input/Output: [(2 2 2 2) 2]
Test Case: 191 | Input/Output: [(-69 -69 -69 -69) -69]
Test Case: 192 | Input/Output: [(-41 -41 -41 -41) -41]
Test Case: 193 | Input/Output: [(92 92 92 92) 92]
Test Case: 194 | Input/Output: [(75 75 75 75) 75]
Test Case: 195 | Input/Output: [(-6 -6 -6 -6) -6]
Test Case: 196 | Input/Output: [(32 32 32 32) 32]
Test Case: 197 | Input/Output: [(-54 -54 -54 -54) -54]
Test Case: 198 | Input/Output: [(-27 -27 -27 -27) -27]
Test Case: 199 | Input/Output: [(86 86 86 86) 86]
Test Case: 200 | Input/Output: [(98 60 3 94) 3]
Test Case: 201 | Input/Output: [(89 31 26 69) 26]
Test Case: 202 | Input/Output: [(77 31 81 16) 16]
Test Case: 203 | Input/Output: [(62 33 25 67) 25]
Test Case: 204 | Input/Output: [(37 35 86 43) 35]
Test Case: 205 | Input/Output: [(93 81 65 81) 65]
Test Case: 206 | Input/Output: [(15 84 0 5) 0]
Test Case: 207 | Input/Output: [(13 10 46 49) 10]
Test Case: 208 | Input/Output: [(48 72 47 25) 25]
Test Case: 209 | Input/Output: [(48 70 81 41) 41]
Test Case: 210 | Input/Output: [(16 59 48 59) 16]
Test Case: 211 | Input/Output: [(6 22 45 92) 6]
Test Case: 212 | Input/Output: [(50 19 74 81) 19]
Test Case: 213 | Input/Output: [(29 12 10 56) 10]
Test Case: 214 | Input/Output: [(36 25 50 96) 25]
Test Case: 215 | Input/Output: [(35 87 98 51) 35]
Test Case: 216 | Input/Output: [(92 45 85 50) 45]
Test Case: 217 | Input/Output: [(96 23 54 60) 23]
Test Case: 218 | Input/Output: [(44 8 23 55) 8]
Test Case: 219 | Input/Output: [(90 64 83 46) 46]
Test Case: 220 | Input/Output: [(71 47 20 100) 20]
Test Case: 221 | Input/Output: [(79 79 1 54) 1]
Test Case: 222 | Input/Output: [(74 42 65 49) 42]
Test Case: 223 | Input/Output: [(79 27 77 84) 27]
Test Case: 224 | Input/Output: [(98 42 31 58) 31]
Test Case: 225 | Input/Output: [(53 90 49 99) 49]
Test Case: 226 | Input/Output: [(22 12 16 90) 12]
Test Case: 227 | Input/Output: [(100 48 38 39) 38]
Test Case: 228 | Input/Output: [(39 80 75 59) 39]
Test Case: 229 | Input/Output: [(71 76 60 64) 60]
Test Case: 230 | Input/Output: [(79 97 97 6) 6]
Test Case: 231 | Input/Output: [(84 13 88 27) 13]
Test Case: 232 | Input/Output: [(81 11 33 25) 11]
Test Case: 233 | Input/Output: [(87 29 2 31) 2]
Test Case: 234 | Input/Output: [(42 62 16 60) 16]
Test Case: 235 | Input/Output: [(19 27 26 15) 15]
Test Case: 236 | Input/Output: [(100 48 60 71) 48]
Test Case: 237 | Input/Output: [(65 61 70 71) 61]
Test Case: 238 | Input/Output: [(51 7 26 46) 7]
Test Case: 239 | Input/Output: [(33 21 74 23) 21]
Test Case: 240 | Input/Output: [(9 45 83 94) 9]
Test Case: 241 | Input/Output: [(3 11 11 56) 3]
Test Case: 242 | Input/Output: [(41 43 80 62) 41]
Test Case: 243 | Input/Output: [(60 17 5 9) 5]
Test Case: 244 | Input/Output: [(36 59 92 83) 36]
Test Case: 245 | Input/Output: [(46 38 62 49) 38]
Test Case: 246 | Input/Output: [(96 44 40 75) 40]
Test Case: 247 | Input/Output: [(16 4 4 52) 4]
Test Case: 248 | Input/Output: [(63 79 50 17) 17]
Test Case: 249 | Input/Output: [(44 35 80 88) 35]
Test Case: 250 | Input/Output: [(45 1 85 73) 1]
Test Case: 251 | Input/Output: [(70 58 99 46) 46]
Test Case: 252 | Input/Output: [(100 52 78 72) 52]
Test Case: 253 | Input/Output: [(41 49 74 22) 22]
Test Case: 254 | Input/Output: [(61 12 50 53) 12]
Test Case: 255 | Input/Output: [(35 44 82 85) 35]
Test Case: 256 | Input/Output: [(13 48 29 83) 13]
Test Case: 257 | Input/Output: [(25 58 86 90) 25]
Test Case: 258 | Input/Output: [(57 85 19 92) 19]
Test Case: 259 | Input/Output: [(65 84 27 53) 27]
Test Case: 260 | Input/Output: [(54 52 10 26) 10]
Test Case: 261 | Input/Output: [(48 91 66 18) 18]
Test Case: 262 | Input/Output: [(5 30 71 83) 5]
Test Case: 263 | Input/Output: [(76 88 64 93) 64]
Test Case: 264 | Input/Output: [(25 7 23 19) 7]
Test Case: 265 | Input/Output: [(72 30 32 2) 2]
Test Case: 266 | Input/Output: [(8 32 94 38) 8]
Test Case: 267 | Input/Output: [(77 68 32 29) 29]
Test Case: 268 | Input/Output: [(40 86 12 43) 12]
Test Case: 269 | Input/Output: [(65 43 7 45) 7]
Test Case: 270 | Input/Output: [(69 83 44 47) 44]
Test Case: 271 | Input/Output: [(16 14 93 69) 14]
Test Case: 272 | Input/Output: [(11 45 87 49) 11]
Test Case: 273 | Input/Output: [(21 30 43 51) 21]
Test Case: 274 | Input/Output: [(41 82 42 51) 41]
Test Case: 275 | Input/Output: [(65 54 2 92) 2]
Test Case: 276 | Input/Output: [(3 86 32 5) 3]
Test Case: 277 | Input/Output: [(0 22 12 81) 0]
Test Case: 278 | Input/Output: [(26 81 31 76) 26]
Test Case: 279 | Input/Output: [(39 19 67 56) 19]
Test Case: 280 | Input/Output: [(76 49 78 14) 14]
Test Case: 281 | Input/Output: [(93 23 12 94) 12]
Test Case: 282 | Input/Output: [(78 70 9 32) 9]
Test Case: 283 | Input/Output: [(37 16 99 19) 16]
Test Case: 284 | Input/Output: [(98 30 2 62) 2]
Test Case: 285 | Input/Output: [(100 23 32 64) 23]
Test Case: 286 | Input/Output: [(24 64 23 43) 23]
Test Case: 287 | Input/Output: [(91 51 44 20) 20]
Test Case: 288 | Input/Output: [(40 42 84 9) 9]
Test Case: 289 | Input/Output: [(36 11 80 30) 11]
Test Case: 290 | Input/Output: [(14 5 20 7) 5]
Test Case: 291 | Input/Output: [(26 28 66 60) 26]
Test Case: 292 | Input/Output: [(44 43 11 26) 11]
Test Case: 293 | Input/Output: [(27 52 8 47) 8]
Test Case: 294 | Input/Output: [(93 9 48 86) 9]
Test Case: 295 | Input/Output: [(32 67 48 75) 32]
Test Case: 296 | Input/Output: [(6 63 100 4) 4]
Test Case: 297 | Input/Output: [(78 42 84 7) 7]
Test Case: 298 | Input/Output: [(11 70 5 52) 5]
Test Case: 299 | Input/Output: [(93 67 58 13) 13]
Test Case: 300 | Input/Output: [(47 14 81 84) 14]
Test Case: 301 | Input/Output: [(99 57 34 86) 34]
Test Case: 302 | Input/Output: [(76 51 37 95) 37]
Test Case: 303 | Input/Output: [(69 45 26 18) 18]
Test Case: 304 | Input/Output: [(89 3 29 23) 3]
Test Case: 305 | Input/Output: [(77 1 36 62) 1]
Test Case: 306 | Input/Output: [(71 73 23 74) 23]
Test Case: 307 | Input/Output: [(32 27 89 89) 27]
Test Case: 308 | Input/Output: [(45 63 28 17) 17]
Test Case: 309 | Input/Output: [(82 81 67 6) 6]
Test Case: 310 | Input/Output: [(79 69 9 44) 9]
Test Case: 311 | Input/Output: [(78 60 24 74) 24]
Test Case: 312 | Input/Output: [(58 80 12 25) 12]
Test Case: 313 | Input/Output: [(89 61 40 42) 40]
Test Case: 314 | Input/Output: [(94 98 50 18) 18]
Test Case: 315 | Input/Output: [(61 18 15 34) 15]
Test Case: 316 | Input/Output: [(13 85 49 71) 13]
Test Case: 317 | Input/Output: [(85 72 74 45) 45]
Test Case: 318 | Input/Output: [(75 68 87 41) 41]
Test Case: 319 | Input/Output: [(62 61 39 95) 39]
Test Case: 320 | Input/Output: [(75 16 67 49) 16]
Test Case: 321 | Input/Output: [(65 27 14 57) 14]
Test Case: 322 | Input/Output: [(57 15 51 27) 15]
Test Case: 323 | Input/Output: [(37 58 54 84) 37]
Test Case: 324 | Input/Output: [(29 7 5 16) 5]
Test Case: 325 | Input/Output: [(35 92 20 31) 20]
Test Case: 326 | Input/Output: [(37 20 74 12) 12]
Test Case: 327 | Input/Output: [(36 91 66 48) 36]
Test Case: 328 | Input/Output: [(80 22 21 76) 21]
Test Case: 329 | Input/Output: [(89 66 3 13) 3]
Test Case: 330 | Input/Output: [(27 37 52 67) 27]
Test Case: 331 | Input/Output: [(99 72 34 28) 28]
Test Case: 332 | Input/Output: [(25 84 78 8) 8]
Test Case: 333 | Input/Output: [(12 96 30 17) 12]
Test Case: 334 | Input/Output: [(0 43 81 71) 0]
Test Case: 335 | Input/Output: [(74 59 78 87) 59]
Test Case: 336 | Input/Output: [(67 93 89 77) 67]
Test Case: 337 | Input/Output: [(68 2 50 13) 2]
Test Case: 338 | Input/Output: [(62 6 71 41) 6]
Test Case: 339 | Input/Output: [(34 52 74 16) 16]
Test Case: 340 | Input/Output: [(34 6 51 24) 6]
Test Case: 341 | Input/Output: [(37 81 86 90) 37]
Test Case: 342 | Input/Output: [(86 58 52 100) 52]
Test Case: 343 | Input/Output: [(11 8 16 13) 8]
Test Case: 344 | Input/Output: [(12 6 70 61) 6]
Test Case: 345 | Input/Output: [(45 4 68 88) 4]
Test Case: 346 | Input/Output: [(51 89 92 37) 37]
Test Case: 347 | Input/Output: [(14 11 53 15) 11]
Test Case: 348 | Input/Output: [(85 59 68 91) 59]
Test Case: 349 | Input/Output: [(47 94 66 4) 4]
Test Case: 350 | Input/Output: [(36 82 23 50) 23]
Test Case: 351 | Input/Output: [(69 66 29 92) 29]
Test Case: 352 | Input/Output: [(2 47 84 13) 2]
Test Case: 353 | Input/Output: [(22 53 47 22) 22]
Test Case: 354 | Input/Output: [(72 77 55 7) 7]
Test Case: 355 | Input/Output: [(34 72 23 58) 23]
Test Case: 356 | Input/Output: [(9 56 97 83) 9]
Test Case: 357 | Input/Output: [(29 2 3 1) 1]
Test Case: 358 | Input/Output: [(32 73 26 52) 26]
Test Case: 359 | Input/Output: [(33 96 13 83) 13]
Test Case: 360 | Input/Output: [(20 58 8 28) 8]
Test Case: 361 | Input/Output: [(71 15 86 82) 15]
Test Case: 362 | Input/Output: [(72 60 26 83) 26]
Test Case: 363 | Input/Output: [(88 48 60 39) 39]
Test Case: 364 | Input/Output: [(56 47 83 6) 6]
Test Case: 365 | Input/Output: [(31 46 5 88) 5]
Test Case: 366 | Input/Output: [(42 53 78 59) 42]
Test Case: 367 | Input/Output: [(11 41 76 31) 11]
Test Case: 368 | Input/Output: [(61 54 38 78) 38]
Test Case: 369 | Input/Output: [(88 39 69 25) 25]
Test Case: 370 | Input/Output: [(59 0 97 78) 0]
Test Case: 371 | Input/Output: [(11 80 77 11) 11]
Test Case: 372 | Input/Output: [(85 71 93 72) 71]
Test Case: 373 | Input/Output: [(23 58 75 28) 23]
Test Case: 374 | Input/Output: [(6 79 36 25) 6]
Test Case: 375 | Input/Output: [(4 28 98 10) 4]
Test Case: 376 | Input/Output: [(90 71 66 67) 66]
Test Case: 377 | Input/Output: [(65 49 64 81) 49]
Test Case: 378 | Input/Output: [(45 66 87 99) 45]
Test Case: 379 | Input/Output: [(34 30 18 50) 18]
Test Case: 380 | Input/Output: [(82 82 44 27) 27]
Test Case: 381 | Input/Output: [(18 66 7 70) 7]
Test Case: 382 | Input/Output: [(60 71 58 47) 47]
Test Case: 383 | Input/Output: [(85 18 14 24) 14]
Test Case: 384 | Input/Output: [(27 88 92 84) 27]
Test Case: 385 | Input/Output: [(38 80 80 26) 26]
Test Case: 386 | Input/Output: [(60 22 36 7) 7]
Test Case: 387 | Input/Output: [(71 60 5 35) 5]
Test Case: 388 | Input/Output: [(52 96 7 76) 7]
Test Case: 389 | Input/Output: [(19 60 64 13) 13]
Test Case: 390 | Input/Output: [(79 96 56 12) 12]
Test Case: 391 | Input/Output: [(83 18 21 50) 18]
Test Case: 392 | Input/Output: [(19 23 71 57) 19]
Test Case: 393 | Input/Output: [(9 63 59 91) 9]
Test Case: 394 | Input/Output: [(14 57 96 79) 14]
Test Case: 395 | Input/Output: [(19 91 66 46) 19]
Test Case: 396 | Input/Output: [(29 21 61 2) 2]
Test Case: 397 | Input/Output: [(86 5 96 87) 5]
Test Case: 398 | Input/Output: [(69 53 33 73) 33]
Test Case: 399 | Input/Output: [(12 0 18 96) 0]
Test Case: 400 | Input/Output: [(-62 64 28 49) -62]
Test Case: 401 | Input/Output: [(69 -55 10 52) -55]
Test Case: 402 | Input/Output: [(86 100 -51 100) -51]
Test Case: 403 | Input/Output: [(94 25 3 -67) -67]
Test Case: 404 | Input/Output: [(49 -95 -18 27) -95]
Test Case: 405 | Input/Output: [(47 43 -3 -15) -15]
Test Case: 406 | Input/Output: [(-77 14 71 -1) -77]
Test Case: 407 | Input/Output: [(-44 -54 22 26) -54]
Test Case: 408 | Input/Output: [(92 35 -41 68) -41]
Test Case: 409 | Input/Output: [(-7 69 78 89) -7]
Test Case: 410 | Input/Output: [(-76 51 11 62) -76]
Test Case: 411 | Input/Output: [(44 -9 -16 -22) -22]
Test Case: 412 | Input/Output: [(66 -12 41 -7) -12]
Test Case: 413 | Input/Output: [(-61 -56 -42 -6) -61]
Test Case: 414 | Input/Output: [(-37 54 -91 -48) -91]
Test Case: 415 | Input/Output: [(-57 -40 65 34) -57]
Test Case: 416 | Input/Output: [(46 -11 75 -85) -85]
Test Case: 417 | Input/Output: [(-28 68 -84 59) -84]
Test Case: 418 | Input/Output: [(43 -74 64 40) -74]
Test Case: 419 | Input/Output: [(-70 -32 -5 -34) -70]
Test Case: 420 | Input/Output: [(-34 91 -12 58) -34]
Test Case: 421 | Input/Output: [(78 58 16 70) 16]
Test Case: 422 | Input/Output: [(10 96 66 39) 10]
Test Case: 423 | Input/Output: [(0 21 78 -81) -81]
Test Case: 424 | Input/Output: [(-82 -61 22 59) -82]
Test Case: 425 | Input/Output: [(-43 -88 -7 8) -88]
Test Case: 426 | Input/Output: [(-44 25 -23 70) -44]
Test Case: 427 | Input/Output: [(45 78 -72 4) -72]
Test Case: 428 | Input/Output: [(35 72 -85 -61) -85]
Test Case: 429 | Input/Output: [(-46 -100 -27 31) -100]
Test Case: 430 | Input/Output: [(7 36 45 -71) -71]
Test Case: 431 | Input/Output: [(-49 -97 87 70) -97]
Test Case: 432 | Input/Output: [(-37 45 -49 -44) -49]
Test Case: 433 | Input/Output: [(6 -31 -83 90) -83]
Test Case: 434 | Input/Output: [(100 -34 -60 41) -60]
Test Case: 435 | Input/Output: [(10 4 15 -16) -16]
Test Case: 436 | Input/Output: [(-55 -89 37 -16) -89]
Test Case: 437 | Input/Output: [(-75 62 -96 2) -96]
Test Case: 438 | Input/Output: [(15 -100 46 81) -100]
Test Case: 439 | Input/Output: [(-51 -52 -6 92) -52]
Test Case: 440 | Input/Output: [(20 -93 -12 87) -93]
Test Case: 441 | Input/Output: [(90 53 -43 25) -43]
Test Case: 442 | Input/Output: [(90 -21 0 -84) -84]
Test Case: 443 | Input/Output: [(24 -5 66 42) -5]
Test Case: 444 | Input/Output: [(40 15 -75 83) -75]
Test Case: 445 | Input/Output: [(91 -51 -76 52) -76]
Test Case: 446 | Input/Output: [(94 -79 94 -83) -83]
Test Case: 447 | Input/Output: [(42 8 -8 17) -8]
Test Case: 448 | Input/Output: [(96 -42 12 -5) -42]
Test Case: 449 | Input/Output: [(-27 12 54 52) -27]
Test Case: 450 | Input/Output: [(55 64 59 78) 55]
Test Case: 451 | Input/Output: [(-15 -67 -15 -40) -67]
Test Case: 452 | Input/Output: [(-73 -55 -86 -49) -86]
Test Case: 453 | Input/Output: [(-32 -91 83 -70) -91]
Test Case: 454 | Input/Output: [(69 43 -44 50) -44]
Test Case: 455 | Input/Output: [(13 -84 39 -6) -84]
Test Case: 456 | Input/Output: [(50 -51 25 82) -51]
Test Case: 457 | Input/Output: [(-90 -78 78 -3) -90]
Test Case: 458 | Input/Output: [(-78 -25 -2 -30) -78]
Test Case: 459 | Input/Output: [(92 42 -81 41) -81]
Test Case: 460 | Input/Output: [(43 10 99 -86) -86]
Test Case: 461 | Input/Output: [(98 -60 -12 -18) -60]
Test Case: 462 | Input/Output: [(-38 -16 -32 -95) -95]
Test Case: 463 | Input/Output: [(-27 12 -83 -43) -83]
Test Case: 464 | Input/Output: [(-63 84 -33 -69) -69]
Test Case: 465 | Input/Output: [(76 -36 -83 -13) -83]
Test Case: 466 | Input/Output: [(2 67 -14 -65) -65]
Test Case: 467 | Input/Output: [(49 47 -32 -46) -46]
Test Case: 468 | Input/Output: [(-11 1 -7 78) -11]
Test Case: 469 | Input/Output: [(-38 -26 -100 40) -100]
Test Case: 470 | Input/Output: [(-61 -47 31 90) -61]
Test Case: 471 | Input/Output: [(33 -7 -79 -4) -79]
Test Case: 472 | Input/Output: [(-46 6 -13 -89) -89]
Test Case: 473 | Input/Output: [(-11 -22 -5 -46) -46]
Test Case: 474 | Input/Output: [(39 62 -7 -78) -78]
Test Case: 475 | Input/Output: [(70 89 23 95) 23]
Test Case: 476 | Input/Output: [(-83 -10 57 7) -83]
Test Case: 477 | Input/Output: [(-11 -87 73 -34) -87]
Test Case: 478 | Input/Output: [(79 9 16 91) 9]
Test Case: 479 | Input/Output: [(-54 -37 66 43) -54]
Test Case: 480 | Input/Output: [(-88 -55 -28 -1) -88]
Test Case: 481 | Input/Output: [(-18 -6 -20 38) -20]
Test Case: 482 | Input/Output: [(69 -52 89 -42) -52]
Test Case: 483 | Input/Output: [(-2 67 -84 -38) -84]
Test Case: 484 | Input/Output: [(-69 -97 34 74) -97]
Test Case: 485 | Input/Output: [(-13 62 36 -100) -100]
Test Case: 486 | Input/Output: [(16 33 -53 -98) -98]
Test Case: 487 | Input/Output: [(-49 22 -42 -98) -98]
Test Case: 488 | Input/Output: [(28 99 40 84) 28]
Test Case: 489 | Input/Output: [(37 86 -13 20) -13]
Test Case: 490 | Input/Output: [(1 93 80 -15) -15]
Test Case: 491 | Input/Output: [(-50 -83 58 -97) -97]
Test Case: 492 | Input/Output: [(0 -31 73 -60) -60]
Test Case: 493 | Input/Output: [(-86 -34 -91 8) -91]
Test Case: 494 | Input/Output: [(-42 4 -21 -44) -44]
Test Case: 495 | Input/Output: [(-94 -47 87 -58) -94]
Test Case: 496 | Input/Output: [(-37 -24 31 75) -37]
Test Case: 497 | Input/Output: [(54 30 -99 82) -99]
Test Case: 498 | Input/Output: [(1 98 -27 38) -27]
Test Case: 499 | Input/Output: [(86 -17 -21 -41) -41]
Test Case: 500 | Input/Output: [(86 -67 60 -80) -80]
Test Case: 501 | Input/Output: [(81 -73 -21 4) -73]
Test Case: 502 | Input/Output: [(-2 -40 45 -12) -40]
Test Case: 503 | Input/Output: [(-37 -24 -93 73) -93]
Test Case: 504 | Input/Output: [(71 -57 34 -37) -57]
Test Case: 505 | Input/Output: [(68 41 -97 82) -97]
Test Case: 506 | Input/Output: [(16 -38 15 89) -38]
Test Case: 507 | Input/Output: [(44 -63 9 91) -63]
Test Case: 508 | Input/Output: [(-99 67 -99 -82) -99]
Test Case: 509 | Input/Output: [(-61 -29 91 -94) -94]
Test Case: 510 | Input/Output: [(-84 88 -88 -38) -88]
Test Case: 511 | Input/Output: [(-61 39 -86 -69) -86]
Test Case: 512 | Input/Output: [(68 -58 -79 -24) -79]
Test Case: 513 | Input/Output: [(-67 29 22 99) -67]
Test Case: 514 | Input/Output: [(64 -38 7 -54) -54]
Test Case: 515 | Input/Output: [(42 91 -31 -64) -64]
Test Case: 516 | Input/Output: [(43 -92 -18 -54) -92]
Test Case: 517 | Input/Output: [(-28 45 92 56) -28]
Test Case: 518 | Input/Output: [(87 -59 -21 31) -59]
Test Case: 519 | Input/Output: [(-50 -49 44 -13) -50]
Test Case: 520 | Input/Output: [(55 -12 15 -36) -36]
Test Case: 521 | Input/Output: [(14 -13 25 -79) -79]
Test Case: 522 | Input/Output: [(93 -93 37 37) -93]
Test Case: 523 | Input/Output: [(-60 -49 -82 -99) -99]
Test Case: 524 | Input/Output: [(-30 -61 -81 -6) -81]
Test Case: 525 | Input/Output: [(-2 59 91 -57) -57]
Test Case: 526 | Input/Output: [(-61 -99 -74 37) -99]
Test Case: 527 | Input/Output: [(94 -48 48 100) -48]
Test Case: 528 | Input/Output: [(-23 72 56 29) -23]
Test Case: 529 | Input/Output: [(24 8 -33 52) -33]
Test Case: 530 | Input/Output: [(-96 80 -53 -34) -96]
Test Case: 531 | Input/Output: [(-27 -78 28 -43) -78]
Test Case: 532 | Input/Output: [(55 -90 3 0) -90]
Test Case: 533 | Input/Output: [(8 66 67 76) 8]
Test Case: 534 | Input/Output: [(-28 -27 61 4) -28]
Test Case: 535 | Input/Output: [(-54 -46 -1 75) -54]
Test Case: 536 | Input/Output: [(86 -16 52 26) -16]
Test Case: 537 | Input/Output: [(-45 -62 39 20) -62]
Test Case: 538 | Input/Output: [(44 63 -90 48) -90]
Test Case: 539 | Input/Output: [(23 -61 -32 -18) -61]
Test Case: 540 | Input/Output: [(-78 -26 45 41) -78]
Test Case: 541 | Input/Output: [(-37 39 -1 21) -37]
Test Case: 542 | Input/Output: [(-13 88 10 -33) -33]
Test Case: 543 | Input/Output: [(13 81 -62 -100) -100]
Test Case: 544 | Input/Output: [(-11 50 18 -74) -74]
Test Case: 545 | Input/Output: [(-33 -16 -38 14) -38]
Test Case: 546 | Input/Output: [(-79 12 35 -37) -79]
Test Case: 547 | Input/Output: [(16 8 11 -37) -37]
Test Case: 548 | Input/Output: [(-96 51 -66 -12) -96]
Test Case: 549 | Input/Output: [(-83 72 33 -75) -83]
Test Case: 550 | Input/Output: [(18 46 -4 82) -4]
Test Case: 551 | Input/Output: [(28 -73 -83 8) -83]
Test Case: 552 | Input/Output: [(43 10 37 -28) -28]
Test Case: 553 | Input/Output: [(-56 -12 -16 56) -56]
Test Case: 554 | Input/Output: [(24 -15 -56 -92) -92]
Test Case: 555 | Input/Output: [(30 55 43 89) 30]
Test Case: 556 | Input/Output: [(54 1 -87 46) -87]
Test Case: 557 | Input/Output: [(70 -97 -54 -13) -97]
Test Case: 558 | Input/Output: [(-60 89 -37 3) -60]
Test Case: 559 | Input/Output: [(32 45 72 -63) -63]
Test Case: 560 | Input/Output: [(21 62 -76 -11) -76]
Test Case: 561 | Input/Output: [(79 72 -49 86) -49]
Test Case: 562 | Input/Output: [(28 56 -37 -96) -96]
Test Case: 563 | Input/Output: [(-7 78 -85 -16) -85]
Test Case: 564 | Input/Output: [(0 -21 -61 51) -61]
Test Case: 565 | Input/Output: [(-15 -6 90 51) -15]
Test Case: 566 | Input/Output: [(100 -39 41 5) -39]
Test Case: 567 | Input/Output: [(-58 -71 71 37) -71]
Test Case: 568 | Input/Output: [(60 67 87 -71) -71]
Test Case: 569 | Input/Output: [(77 -9 80 74) -9]
Test Case: 570 | Input/Output: [(-40 89 -98 -21) -98]
Test Case: 571 | Input/Output: [(36 -23 31 -64) -64]
Test Case: 572 | Input/Output: [(4 71 17 -66) -66]
Test Case: 573 | Input/Output: [(-37 -33 -32 -57) -57]
Test Case: 574 | Input/Output: [(91 -65 64 19) -65]
Test Case: 575 | Input/Output: [(75 -43 74 34) -43]
Test Case: 576 | Input/Output: [(13 87 2 57) 2]
Test Case: 577 | Input/Output: [(53 79 47 -37) -37]
Test Case: 578 | Input/Output: [(50 7 -99 -83) -99]
Test Case: 579 | Input/Output: [(-15 -94 80 43) -94]
Test Case: 580 | Input/Output: [(3 -39 17 -7) -39]
Test Case: 581 | Input/Output: [(11 -76 -23 -72) -76]
Test Case: 582 | Input/Output: [(-53 27 42 94) -53]
Test Case: 583 | Input/Output: [(-79 23 -9 -52) -79]
Test Case: 584 | Input/Output: [(-20 36 -26 84) -26]
Test Case: 585 | Input/Output: [(-7 -32 61 -69) -69]
Test Case: 586 | Input/Output: [(-13 -19 -57 -32) -57]
Test Case: 587 | Input/Output: [(94 -39 13 99) -39]
Test Case: 588 | Input/Output: [(46 -40 -18 37) -40]
Test Case: 589 | Input/Output: [(-3 19 -26 74) -26]
Test Case: 590 | Input/Output: [(-58 15 -15 88) -58]
Test Case: 591 | Input/Output: [(59 -53 -53 -13) -53]
Test Case: 592 | Input/Output: [(-57 58 98 -64) -64]
Test Case: 593 | Input/Output: [(-20 99 -61 -75) -75]
Test Case: 594 | Input/Output: [(-71 -24 -16 6) -71]
Test Case: 595 | Input/Output: [(-13 -15 -38 -25) -38]
Test Case: 596 | Input/Output: [(-96 49 88 -58) -96]
Test Case: 597 | Input/Output: [(65 -100 -52 -73) -100]
Test Case: 598 | Input/Output: [(-88 -48 79 -71) -88]
Test Case: 599 | Input/Output: [(-55 99 -89 87) -89]
Test Case: 600 | Input/Output: [(10 30 -79 -86) -86]
Test Case: 601 | Input/Output: [(-74 70 2 27) -74]
Test Case: 602 | Input/Output: [(75 82 -20 46) -20]
Test Case: 603 | Input/Output: [(-13 -86 -42 4) -86]
Test Case: 604 | Input/Output: [(-37 -80 -67 43) -80]
Test Case: 605 | Input/Output: [(-63 -96 -92 70) -96]
Test Case: 606 | Input/Output: [(-29 -7 45 -82) -82]
Test Case: 607 | Input/Output: [(-76 -99 0 -94) -99]
Test Case: 608 | Input/Output: [(-8 53 46 49) -8]
Test Case: 609 | Input/Output: [(-98 -17 -71 -84) -98]
Test Case: 610 | Input/Output: [(0 94 -55 -72) -72]
Test Case: 611 | Input/Output: [(0 -22 57 18) -22]
Test Case: 612 | Input/Output: [(83 88 -33 -99) -99]
Test Case: 613 | Input/Output: [(-16 -4 84 -44) -44]
Test Case: 614 | Input/Output: [(33 -64 -79 -33) -79]
Test Case: 615 | Input/Output: [(-33 -26 2 80) -33]
Test Case: 616 | Input/Output: [(-54 -81 -6 -100) -100]
Test Case: 617 | Input/Output: [(12 61 92 68) 12]
Test Case: 618 | Input/Output: [(96 -85 -98 -66) -98]
Test Case: 619 | Input/Output: [(-42 -27 62 83) -42]
Test Case: 620 | Input/Output: [(-78 -9 61 -62) -78]
Test Case: 621 | Input/Output: [(-99 -83 21 -27) -99]
Test Case: 622 | Input/Output: [(16 -97 -33 62) -97]
Test Case: 623 | Input/Output: [(99 55 54 45) 45]
Test Case: 624 | Input/Output: [(48 -50 -12 23) -50]
Test Case: 625 | Input/Output: [(94 78 -68 -17) -68]
Test Case: 626 | Input/Output: [(67 -3 -21 -38) -38]
Test Case: 627 | Input/Output: [(54 -72 52 3) -72]
Test Case: 628 | Input/Output: [(-76 99 74 53) -76]
Test Case: 629 | Input/Output: [(43 12 32 -58) -58]
Test Case: 630 | Input/Output: [(-87 82 16 66) -87]
Test Case: 631 | Input/Output: [(19 95 -100 77) -100]
Test Case: 632 | Input/Output: [(42 56 87 -24) -24]
Test Case: 633 | Input/Output: [(40 -72 -5 4) -72]
Test Case: 634 | Input/Output: [(34 -56 9 29) -56]
Test Case: 635 | Input/Output: [(-72 96 10 -54) -72]
Test Case: 636 | Input/Output: [(-37 38 -8 83) -37]
Test Case: 637 | Input/Output: [(35 -82 -2 75) -82]
Test Case: 638 | Input/Output: [(-64 -87 46 0) -87]
Test Case: 639 | Input/Output: [(3 -90 93 -63) -90]
Test Case: 640 | Input/Output: [(-19 48 18 12) -19]
Test Case: 641 | Input/Output: [(-22 -51 -31 -77) -77]
Test Case: 642 | Input/Output: [(16 64 -40 -56) -56]
Test Case: 643 | Input/Output: [(-47 -48 45 -57) -57]
Test Case: 644 | Input/Output: [(-38 5 -53 -26) -53]
Test Case: 645 | Input/Output: [(63 -92 33 49) -92]
Test Case: 646 | Input/Output: [(-25 76 86 -99) -99]
Test Case: 647 | Input/Output: [(40 -37 35 35) -37]
Test Case: 648 | Input/Output: [(-83 -68 -2 78) -83]
Test Case: 649 | Input/Output: [(-39 -36 -57 -43) -57]
Test Case: 650 | Input/Output: [(28 32 -24 69) -24]
Test Case: 651 | Input/Output: [(88 -76 -75 -72) -76]
Test Case: 652 | Input/Output: [(67 76 -83 31) -83]
Test Case: 653 | Input/Output: [(10 -36 37 64) -36]
Test Case: 654 | Input/Output: [(-5 29 79 33) -5]
Test Case: 655 | Input/Output: [(-35 5 79 97) -35]
Test Case: 656 | Input/Output: [(14 41 -9 6) -9]
Test Case: 657 | Input/Output: [(-25 -44 -28 -40) -44]
Test Case: 658 | Input/Output: [(42 60 18 -48) -48]
Test Case: 659 | Input/Output: [(8 -43 -38 10) -43]
Test Case: 660 | Input/Output: [(-20 43 -71 76) -71]
Test Case: 661 | Input/Output: [(81 60 -36 -22) -36]
Test Case: 662 | Input/Output: [(21 38 95 -85) -85]
Test Case: 663 | Input/Output: [(-35 71 94 -47) -47]
Test Case: 664 | Input/Output: [(49 52 73 76) 49]
Test Case: 665 | Input/Output: [(-4 72 -82 -67) -82]
Test Case: 666 | Input/Output: [(19 54 -88 -38) -88]
Test Case: 667 | Input/Output: [(-46 55 -8 47) -46]
Test Case: 668 | Input/Output: [(-74 71 -43 67) -74]
Test Case: 669 | Input/Output: [(-1 64 76 -28) -28]
Test Case: 670 | Input/Output: [(-82 -1 -86 49) -86]
Test Case: 671 | Input/Output: [(64 -3 -71 56) -71]
Test Case: 672 | Input/Output: [(-2 82 50 -6) -6]
Test Case: 673 | Input/Output: [(-12 12 -49 -54) -54]
Test Case: 674 | Input/Output: [(53 68 7 -61) -61]
Test Case: 675 | Input/Output: [(-68 -9 0 4) -68]
Test Case: 676 | Input/Output: [(-2 -53 32 -59) -59]
Test Case: 677 | Input/Output: [(-95 -23 -47 -83) -95]
Test Case: 678 | Input/Output: [(-43 31 -43 -70) -70]
Test Case: 679 | Input/Output: [(93 -72 51 -52) -72]
Test Case: 680 | Input/Output: [(77 49 75 7) 7]
Test Case: 681 | Input/Output: [(-56 -12 73 -58) -58]
Test Case: 682 | Input/Output: [(-16 43 -75 -85) -85]
Test Case: 683 | Input/Output: [(13 39 -85 -24) -85]
Test Case: 684 | Input/Output: [(1 68 -49 -31) -49]
Test Case: 685 | Input/Output: [(51 79 20 -49) -49]
Test Case: 686 | Input/Output: [(-78 15 40 96) -78]
Test Case: 687 | Input/Output: [(-65 93 7 71) -65]
Test Case: 688 | Input/Output: [(71 -30 -4 -57) -57]
Test Case: 689 | Input/Output: [(41 44 37 28) 28]
Test Case: 690 | Input/Output: [(-85 88 -37 94) -85]
Test Case: 691 | Input/Output: [(4 26 3 -85) -85]
Test Case: 692 | Input/Output: [(21 61 -44 -69) -69]
Test Case: 693 | Input/Output: [(32 86 61 65) 32]
Test Case: 694 | Input/Output: [(-21 61 77 49) -21]
Test Case: 695 | Input/Output: [(-56 100 41 -67) -67]
Test Case: 696 | Input/Output: [(-75 -27 7 -94) -94]
Test Case: 697 | Input/Output: [(80 -91 -10 -67) -91]
Test Case: 698 | Input/Output: [(28 -22 -2 41) -22]
Test Case: 699 | Input/Output: [(-80 24 -56 96) -80]
Test Case: 700 | Input/Output: [(-47 -38 92 -1) -47]
Test Case: 701 | Input/Output: [(55 -24 40 94) -24]
Test Case: 702 | Input/Output: [(84 30 93 39) 30]
Test Case: 703 | Input/Output: [(-38 84 -87 -7) -87]
Test Case: 704 | Input/Output: [(36 97 -80 -17) -80]
Test Case: 705 | Input/Output: [(4 75 89 85) 4]
Test Case: 706 | Input/Output: [(22 74 -90 -37) -90]
Test Case: 707 | Input/Output: [(-52 -76 95 -96) -96]
Test Case: 708 | Input/Output: [(92 44 92 -91) -91]
Test Case: 709 | Input/Output: [(-99 -99 -54 0) -99]
Test Case: 710 | Input/Output: [(-66 69 8 -88) -88]
Test Case: 711 | Input/Output: [(-80 8 95 1) -80]
Test Case: 712 | Input/Output: [(-21 -32 -55 74) -55]
Test Case: 713 | Input/Output: [(-66 31 36 -41) -66]
Test Case: 714 | Input/Output: [(73 -70 75 -73) -73]
Test Case: 715 | Input/Output: [(-34 -9 -97 52) -97]
Test Case: 716 | Input/Output: [(93 80 74 76) 74]
Test Case: 717 | Input/Output: [(14 21 90 -29) -29]
Test Case: 718 | Input/Output: [(-4 -70 -14 93) -70]
Test Case: 719 | Input/Output: [(-69 -72 38 -49) -72]
Test Case: 720 | Input/Output: [(96 94 -37 46) -37]
Test Case: 721 | Input/Output: [(2 48 -24 43) -24]
Test Case: 722 | Input/Output: [(-54 -42 -29 -67) -67]
Test Case: 723 | Input/Output: [(76 -24 -58 72) -58]
Test Case: 724 | Input/Output: [(-60 -66 56 -31) -66]
Test Case: 725 | Input/Output: [(0 84 22 -18) -18]
Test Case: 726 | Input/Output: [(45 66 64 100) 45]
Test Case: 727 | Input/Output: [(-39 -25 -62 43) -62]
Test Case: 728 | Input/Output: [(-5 -65 99 64) -65]
Test Case: 729 | Input/Output: [(79 -64 -72 -87) -87]
Test Case: 730 | Input/Output: [(-39 93 69 -11) -39]
Test Case: 731 | Input/Output: [(9 86 5 -3) -3]
Test Case: 732 | Input/Output: [(78 64 81 -5) -5]
Test Case: 733 | Input/Output: [(64 26 -50 58) -50]
Test Case: 734 | Input/Output: [(-56 12 -46 100) -56]
Test Case: 735 | Input/Output: [(-66 -69 96 42) -69]
Test Case: 736 | Input/Output: [(-28 -9 29 -23) -28]
Test Case: 737 | Input/Output: [(6 -48 -83 58) -83]
Test Case: 738 | Input/Output: [(-93 97 27 93) -93]
Test Case: 739 | Input/Output: [(6 -86 3 47) -86]
Test Case: 740 | Input/Output: [(-13 -23 -11 -48) -48]
Test Case: 741 | Input/Output: [(-3 81 -48 19) -48]
Test Case: 742 | Input/Output: [(19 19 -70 91) -70]
Test Case: 743 | Input/Output: [(63 30 -29 56) -29]
Test Case: 744 | Input/Output: [(-28 99 -36 95) -36]
Test Case: 745 | Input/Output: [(-68 93 73 -95) -95]
Test Case: 746 | Input/Output: [(-69 -68 -88 -94) -94]
Test Case: 747 | Input/Output: [(20 -11 -34 22) -34]
Test Case: 748 | Input/Output: [(-93 -78 6 56) -93]
Test Case: 749 | Input/Output: [(2 87 47 -27) -27]
Test Case: 750 | Input/Output: [(-62 3 82 48) -62]
Test Case: 751 | Input/Output: [(64 -71 -81 69) -81]
Test Case: 752 | Input/Output: [(-69 95 -39 -39) -69]
Test Case: 753 | Input/Output: [(-44 34 5 -49) -49]
Test Case: 754 | Input/Output: [(-97 -69 -18 -83) -97]
Test Case: 755 | Input/Output: [(100 36 -88 -35) -88]
Test Case: 756 | Input/Output: [(57 42 54 62) 42]
Test Case: 757 | Input/Output: [(75 -32 -36 44) -36]
Test Case: 758 | Input/Output: [(77 -44 19 -59) -59]
Test Case: 759 | Input/Output: [(47 -11 -16 96) -16]
Test Case: 760 | Input/Output: [(52 -93 -61 7) -93]
Test Case: 761 | Input/Output: [(76 -30 -85 5) -85]
Test Case: 762 | Input/Output: [(59 1 -50 48) -50]
Test Case: 763 | Input/Output: [(-41 0 -38 -43) -43]
Test Case: 764 | Input/Output: [(-73 6 -47 -83) -83]
Test Case: 765 | Input/Output: [(-12 -59 23 -11) -59]
Test Case: 766 | Input/Output: [(96 -32 -78 83) -78]
Test Case: 767 | Input/Output: [(84 -11 22 -14) -14]
Test Case: 768 | Input/Output: [(15 71 26 -4) -4]
Test Case: 769 | Input/Output: [(38 93 81 -84) -84]
Test Case: 770 | Input/Output: [(24 -53 -76 -35) -76]
Test Case: 771 | Input/Output: [(-77 -21 -19 -11) -77]
Test Case: 772 | Input/Output: [(80 -45 -95 -39) -95]
Test Case: 773 | Input/Output: [(-28 6 84 -46) -46]
Test Case: 774 | Input/Output: [(22 -54 -7 49) -54]
Test Case: 775 | Input/Output: [(-6 -64 -88 16) -88]
Test Case: 776 | Input/Output: [(84 -20 65 -92) -92]
Test Case: 777 | Input/Output: [(-26 -98 -18 -29) -98]
Test Case: 778 | Input/Output: [(-97 61 -82 74) -97]
Test Case: 779 | Input/Output: [(-59 24 -14 68) -59]
Test Case: 780 | Input/Output: [(-72 97 39 -31) -72]
Test Case: 781 | Input/Output: [(84 95 -30 0) -30]
Test Case: 782 | Input/Output: [(88 -42 11 -89) -89]
Test Case: 783 | Input/Output: [(-28 -2 22 -21) -28]
Test Case: 784 | Input/Output: [(27 -62 -60 22) -62]
Test Case: 785 | Input/Output: [(73 -67 72 -1) -67]
Test Case: 786 | Input/Output: [(30 19 41 63) 19]
Test Case: 787 | Input/Output: [(7 -39 30 -82) -82]
Test Case: 788 | Input/Output: [(23 29 -43 39) -43]
Test Case: 789 | Input/Output: [(-98 -63 -94 -27) -98]
Test Case: 790 | Input/Output: [(95 7 67 34) 7]
Test Case: 791 | Input/Output: [(22 -92 -67 -86) -92]
Test Case: 792 | Input/Output: [(61 -24 -84 68) -84]
Test Case: 793 | Input/Output: [(31 22 5 41) 5]
Test Case: 794 | Input/Output: [(-11 84 30 93) -11]
Test Case: 795 | Input/Output: [(17 13 -3 51) -3]
Test Case: 796 | Input/Output: [(-71 47 35 16) -71]
Test Case: 797 | Input/Output: [(-18 -85 37 44) -85]
Test Case: 798 | Input/Output: [(-33 50 13 63) -33]
Test Case: 799 | Input/Output: [(-89 53 -97 -72) -97]
Test Case: 800 | Input/Output: [(37 -98 -16 39) -98]
Test Case: 801 | Input/Output: [(37 20 20 -11) -11]
Test Case: 802 | Input/Output: [(23 27 -77 27) -77]
Test Case: 803 | Input/Output: [(20 -73 82 82) -73]
Test Case: 804 | Input/Output: [(26 -66 -76 -28) -76]
Test Case: 805 | Input/Output: [(-79 -8 16 -90) -90]
Test Case: 806 | Input/Output: [(-12 -34 -100 48) -100]
Test Case: 807 | Input/Output: [(-68 -72 -64 22) -72]
Test Case: 808 | Input/Output: [(-27 53 -77 35) -77]
Test Case: 809 | Input/Output: [(66 98 -10 41) -10]
Test Case: 810 | Input/Output: [(12 68 -7 45) -7]
Test Case: 811 | Input/Output: [(19 83 -86 -1) -86]
Test Case: 812 | Input/Output: [(87 -80 -97 77) -97]
Test Case: 813 | Input/Output: [(-66 -74 -78 57) -78]
Test Case: 814 | Input/Output: [(-79 27 42 71) -79]
Test Case: 815 | Input/Output: [(25 -50 71 -68) -68]
Test Case: 816 | Input/Output: [(92 -38 51 72) -38]
Test Case: 817 | Input/Output: [(59 32 76 -10) -10]
Test Case: 818 | Input/Output: [(47 -27 72 13) -27]
Test Case: 819 | Input/Output: [(77 -92 18 -84) -92]
Test Case: 820 | Input/Output: [(92 -41 -82 -57) -82]
Test Case: 821 | Input/Output: [(17 -63 100 -34) -63]
Test Case: 822 | Input/Output: [(39 -95 94 -69) -95]
Test Case: 823 | Input/Output: [(-61 63 -61 -37) -61]
Test Case: 824 | Input/Output: [(-97 -31 7 -53) -97]
Test Case: 825 | Input/Output: [(3 27 5 87) 3]
Test Case: 826 | Input/Output: [(-63 -56 -50 76) -63]
Test Case: 827 | Input/Output: [(43 24 -96 -42) -96]
Test Case: 828 | Input/Output: [(-15 -8 0 29) -15]
Test Case: 829 | Input/Output: [(-88 -63 -73 -27) -88]
Test Case: 830 | Input/Output: [(49 -78 -9 84) -78]
Test Case: 831 | Input/Output: [(-92 -38 51 63) -92]
Test Case: 832 | Input/Output: [(-78 9 35 -80) -80]
Test Case: 833 | Input/Output: [(-52 -68 36 -95) -95]
Test Case: 834 | Input/Output: [(13 47 11 -64) -64]
Test Case: 835 | Input/Output: [(32 -41 -97 26) -97]
Test Case: 836 | Input/Output: [(51 -80 -46 78) -80]
Test Case: 837 | Input/Output: [(46 -8 56 -79) -79]
Test Case: 838 | Input/Output: [(-72 -37 21 -92) -92]
Test Case: 839 | Input/Output: [(32 -45 -5 -58) -58]
Test Case: 840 | Input/Output: [(13 -29 37 -30) -30]
Test Case: 841 | Input/Output: [(-76 73 79 -35) -76]
Test Case: 842 | Input/Output: [(100 -37 -51 -43) -51]
Test Case: 843 | Input/Output: [(29 56 -82 48) -82]
Test Case: 844 | Input/Output: [(94 -58 20 82) -58]
Test Case: 845 | Input/Output: [(-45 66 86 -36) -45]
Test Case: 846 | Input/Output: [(-52 -46 -46 71) -52]
Test Case: 847 | Input/Output: [(62 57 91 74) 57]
Test Case: 848 | Input/Output: [(62 -88 94 -39) -88]
Test Case: 849 | Input/Output: [(-67 59 -30 57) -67]
Test Case: 850 | Input/Output: [(-25 6 -42 67) -42]
Test Case: 851 | Input/Output: [(-54 -48 12 55) -54]
Test Case: 852 | Input/Output: [(-46 99 -19 10) -46]
Test Case: 853 | Input/Output: [(98 -75 90 39) -75]
Test Case: 854 | Input/Output: [(-14 -47 83 45) -47]
Test Case: 855 | Input/Output: [(68 71 4 -87) -87]
Test Case: 856 | Input/Output: [(43 72 58 32) 32]
Test Case: 857 | Input/Output: [(71 -65 -72 -28) -72]
Test Case: 858 | Input/Output: [(-18 9 -55 4) -55]
Test Case: 859 | Input/Output: [(-63 1 13 51) -63]
Test Case: 860 | Input/Output: [(-26 3 -39 95) -39]
Test Case: 861 | Input/Output: [(-72 -69 -81 -34) -81]
Test Case: 862 | Input/Output: [(42 23 -20 -61) -61]
Test Case: 863 | Input/Output: [(70 15 3 97) 3]
Test Case: 864 | Input/Output: [(-85 61 78 92) -85]
Test Case: 865 | Input/Output: [(41 -17 -41 84) -41]
Test Case: 866 | Input/Output: [(21 47 62 -97) -97]
Test Case: 867 | Input/Output: [(28 16 -85 14) -85]
Test Case: 868 | Input/Output: [(1 63 -50 92) -50]
Test Case: 869 | Input/Output: [(79 94 -96 -38) -96]
Test Case: 870 | Input/Output: [(36 -96 10 -85) -96]
Test Case: 871 | Input/Output: [(-85 -37 -22 -24) -85]
Test Case: 872 | Input/Output: [(-74 -26 63 70) -74]
Test Case: 873 | Input/Output: [(83 89 39 34) 34]
Test Case: 874 | Input/Output: [(-60 -54 87 -10) -60]
Test Case: 875 | Input/Output: [(-25 -1 16 -41) -41]
Test Case: 876 | Input/Output: [(-87 55 -75 90) -87]
Test Case: 877 | Input/Output: [(28 65 -97 66) -97]
Test Case: 878 | Input/Output: [(-84 66 74 -80) -84]
Test Case: 879 | Input/Output: [(-33 80 -74 88) -74]
Test Case: 880 | Input/Output: [(32 -100 -15 15) -100]
Test Case: 881 | Input/Output: [(2 -94 60 13) -94]
Test Case: 882 | Input/Output: [(34 -58 73 76) -58]
Test Case: 883 | Input/Output: [(-44 54 64 -84) -84]
Test Case: 884 | Input/Output: [(-34 -59 11 -33) -59]
Test Case: 885 | Input/Output: [(-41 -36 -48 -68) -68]
Test Case: 886 | Input/Output: [(0 -44 -16 -13) -44]
Test Case: 887 | Input/Output: [(55 -86 -13 46) -86]
Test Case: 888 | Input/Output: [(57 -19 82 73) -19]
Test Case: 889 | Input/Output: [(80 -54 19 -13) -54]
Test Case: 890 | Input/Output: [(-9 47 58 55) -9]
Test Case: 891 | Input/Output: [(7 45 -18 18) -18]
Test Case: 892 | Input/Output: [(-79 77 69 59) -79]
Test Case: 893 | Input/Output: [(39 7 30 -36) -36]
Test Case: 894 | Input/Output: [(100 66 -76 -53) -76]
Test Case: 895 | Input/Output: [(81 64 -60 -77) -77]
Test Case: 896 | Input/Output: [(47 -98 -16 82) -98]
Test Case: 897 | Input/Output: [(54 14 83 -77) -77]
Test Case: 898 | Input/Output: [(-27 -15 75 -25) -27]
Test Case: 899 | Input/Output: [(-58 5 -1 35) -58]
Test Case: 900 | Input/Output: [(63 -37 -1 95) -37]
Test Case: 901 | Input/Output: [(92 -95 85 83) -95]
Test Case: 902 | Input/Output: [(8 -89 35 41) -89]
Test Case: 903 | Input/Output: [(38 88 10 -32) -32]
Test Case: 904 | Input/Output: [(58 -11 -87 -98) -98]
Test Case: 905 | Input/Output: [(65 19 -37 4) -37]
Test Case: 906 | Input/Output: [(94 -88 -40 -22) -88]
Test Case: 907 | Input/Output: [(54 9 -29 37) -29]
Test Case: 908 | Input/Output: [(-83 -58 -1 -29) -83]
Test Case: 909 | Input/Output: [(35 -19 -42 -14) -42]
Test Case: 910 | Input/Output: [(37 -65 -96 -40) -96]
Test Case: 911 | Input/Output: [(-83 80 11 65) -83]
Test Case: 912 | Input/Output: [(-88 60 -98 9) -98]
Test Case: 913 | Input/Output: [(94 -15 71 26) -15]
Test Case: 914 | Input/Output: [(21 59 -41 84) -41]
Test Case: 915 | Input/Output: [(-37 46 -1 46) -37]
Test Case: 916 | Input/Output: [(-97 -45 -83 34) -97]
Test Case: 917 | Input/Output: [(-70 87 50 66) -70]
Test Case: 918 | Input/Output: [(72 7 -26 66) -26]
Test Case: 919 | Input/Output: [(-34 -47 14 -57) -57]
Test Case: 920 | Input/Output: [(97 15 27 55) 15]
Test Case: 921 | Input/Output: [(-54 71 -50 -28) -54]
Test Case: 922 | Input/Output: [(100 74 -47 -15) -47]
Test Case: 923 | Input/Output: [(61 -7 84 7) -7]
Test Case: 924 | Input/Output: [(-76 -58 -72 90) -76]
Test Case: 925 | Input/Output: [(-79 91 39 5) -79]
Test Case: 926 | Input/Output: [(59 18 -64 4) -64]
Test Case: 927 | Input/Output: [(-36 56 60 34) -36]
Test Case: 928 | Input/Output: [(23 -38 87 -54) -54]
Test Case: 929 | Input/Output: [(42 75 8 -69) -69]
Test Case: 930 | Input/Output: [(-11 -30 -78 10) -78]
Test Case: 931 | Input/Output: [(90 11 -77 43) -77]
Test Case: 932 | Input/Output: [(8 80 80 -77) -77]
Test Case: 933 | Input/Output: [(-3 -54 -63 -72) -72]
Test Case: 934 | Input/Output: [(56 37 -30 60) -30]
Test Case: 935 | Input/Output: [(62 16 -86 -60) -86]
Test Case: 936 | Input/Output: [(-99 89 41 -3) -99]
Test Case: 937 | Input/Output: [(-72 62 15 7) -72]
Test Case: 938 | Input/Output: [(70 52 14 -65) -65]
Test Case: 939 | Input/Output: [(74 20 -80 98) -80]
Test Case: 940 | Input/Output: [(59 50 46 21) 21]
Test Case: 941 | Input/Output: [(-83 -13 -95 93) -95]
Test Case: 942 | Input/Output: [(38 39 -50 53) -50]
Test Case: 943 | Input/Output: [(58 68 52 54) 52]
Test Case: 944 | Input/Output: [(-17 66 69 -88) -88]
Test Case: 945 | Input/Output: [(-99 32 3 -4) -99]
Test Case: 946 | Input/Output: [(68 -41 64 26) -41]
Test Case: 947 | Input/Output: [(98 -55 -90 55) -90]
Test Case: 948 | Input/Output: [(-56 -56 41 -92) -92]
Test Case: 949 | Input/Output: [(-91 -63 26 70) -91]
Test Case: 950 | Input/Output: [(47 91 5 -45) -45]
Test Case: 951 | Input/Output: [(42 -65 -46 23) -65]
Test Case: 952 | Input/Output: [(-31 -82 -47 81) -82]
Test Case: 953 | Input/Output: [(-16 64 18 -28) -28]
Test Case: 954 | Input/Output: [(93 28 64 -32) -32]
Test Case: 955 | Input/Output: [(5 23 -54 -11) -54]
Test Case: 956 | Input/Output: [(-25 68 -85 -68) -85]
Test Case: 957 | Input/Output: [(63 -22 97 -7) -22]
Test Case: 958 | Input/Output: [(43 -45 52 53) -45]
Test Case: 959 | Input/Output: [(-49 72 82 -16) -49]
Test Case: 960 | Input/Output: [(-17 78 21 32) -17]
Test Case: 961 | Input/Output: [(99 -25 -14 -82) -82]
Test Case: 962 | Input/Output: [(-76 -8 -59 -71) -76]
Test Case: 963 | Input/Output: [(-8 -6 -86 33) -86]
Test Case: 964 | Input/Output: [(-1 27 41 -3) -3]
Test Case: 965 | Input/Output: [(-39 89 82 13) -39]
Test Case: 966 | Input/Output: [(54 -80 -57 -9) -80]
Test Case: 967 | Input/Output: [(57 -92 84 -64) -92]
Test Case: 968 | Input/Output: [(83 54 -84 -78) -84]
Test Case: 969 | Input/Output: [(15 20 80 -10) -10]
Test Case: 970 | Input/Output: [(72 -4 -83 47) -83]
Test Case: 971 | Input/Output: [(75 29 77 35) 29]
Test Case: 972 | Input/Output: [(-16 -48 -18 98) -48]
Test Case: 973 | Input/Output: [(-100 65 -93 54) -100]
Test Case: 974 | Input/Output: [(27 -96 -80 34) -96]
Test Case: 975 | Input/Output: [(-85 66 81 -44) -85]
Test Case: 976 | Input/Output: [(42 35 97 60) 35]
Test Case: 977 | Input/Output: [(-91 -5 -96 51) -96]
Test Case: 978 | Input/Output: [(55 -56 -35 13) -56]
Test Case: 979 | Input/Output: [(-96 71 -17 95) -96]
Test Case: 980 | Input/Output: [(2 4 -24 59) -24]
Test Case: 981 | Input/Output: [(16 41 -11 67) -11]
Test Case: 982 | Input/Output: [(89 96 7 57) 7]
Test Case: 983 | Input/Output: [(28 -70 7 -22) -70]
Test Case: 984 | Input/Output: [(48 69 -86 67) -86]
Test Case: 985 | Input/Output: [(92 -94 67 20) -94]
Test Case: 986 | Input/Output: [(-68 -74 -15 84) -74]
Test Case: 987 | Input/Output: [(23 86 33 48) 23]
Test Case: 988 | Input/Output: [(81 -18 9 71) -18]
Test Case: 989 | Input/Output: [(-90 -47 -2 -92) -92]
Test Case: 990 | Input/Output: [(53 82 43 48) 43]
Test Case: 991 | Input/Output: [(-73 -31 20 -32) -73]
Test Case: 992 | Input/Output: [(-37 -52 47 68) -52]
Test Case: 993 | Input/Output: [(-80 16 -39 36) -80]
Test Case: 994 | Input/Output: [(-100 -80 -34 -45) -100]
Test Case: 995 | Input/Output: [(35 86 92 -12) -12]
Test Case: 996 | Input/Output: [(76 24 -83 -47) -83]
Test Case: 997 | Input/Output: [(-39 84 23 -55) -55]
Test Case: 998 | Input/Output: [(69 93 -89 -14) -89]
Test Case: 999 | Input/Output: [(73 -40 67 64) -40]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 98f17fffbd710431b7ffe02918e462d48a2ebada
GitHub link = https://github.com/lspector/Clojush/commit/98f17fffbd710431b7ffe02918e462d48a2ebada
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x30b9728f clojush.problems.software.smallest$fn__7460@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@24b8a393]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
random-screen = false
random-seed = 30 31 17 44 120 104 -23 -60 17 -76 -36 115 105 79 75 115
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[77 -96 -96 -96] -96] [[63 38 63 63] 38] [[-79 -29 -79 -79] -79] [[-57 -57 -57 42] -57] [[7 -24 7 7] -24] [[61 -27 -27 -27] -27] [[-92 -92 73 -92] -92] [[68 68 -53 68] -53] [[-92 -92 -92 77] -92] [[-33 24 24 24] -33] [(1 1 1 1) 1] [(-94 -94 -94 -94) -94] [(-49 -49 -49 -49) -49] [(0 0 0 0) 0] [(-23 -23 -23 -23) -23] [(98 31 12 23) 12] [(22 41 53 31) 22] [(56 61 15 91) 15] [(97 35 54 48) 35] [(68 97 32 25) 25] [(59 62 35 65) 35] [(5 88 32 88) 5] [(33 82 95 74) 33] [(54 25 42 86) 25] [(45 0 32 6) 0] [(19 68 21 46) 19] [(94 11 52 7) 7] [(1 58 26 45) 1] [(0 39 44 54) 0] [(95 68 18 81) 18] [(7 93 9 3) 3] [(19 95 91 27) 19] [(77 46 32 41) 32] [(63 57 23 100) 23] [(97 76 49 11) 11] [(-91 74 68 95) -91] [(-34 -74 -49 25) -74] [(71 13 67 -4) -4] [(-81 -6 25 56) -81] [(-93 -25 -54 74) -93] [(62 -23 88 -29) -29] [(63 -21 0 -2) -21] [(-8 -91 90 -86) -91] [(15 18 -25 -2) -25] [(-38 -64 -9 -22) -64] [(-81 -77 90 100) -81] [(-40 34 68 -24) -40] [(17 85 5 -50) -50] [(-95 -16 -34 -64) -95] [(-61 -66 -54 35) -66] [(-35 8 -8 57) -35] [(-2 52 -39 -94) -94] [(-49 -54 -28 -59) -59] [(-27 38 -13 61) -27] [(-21 13 -95 72) -95] [(-72 90 -25 84) -72] [(-62 -29 60 57) -62] [(44 -16 -54 -70) -70] [(-3 65 -77 45) -77] [(94 -46 -63 -58) -63] [(63 -48 84 -97) -97] [(-32 -18 -62 99) -62] [(-11 6 -18 -29) -29] [(-11 -16 34 43) -16] [(69 -42 -89 64) -89] [(95 79 42 7) 7] [(36 -87 87 51) -87] [(87 -75 -29 -89) -89] [(-68 78 96 49) -68] [(-82 98 24 34) -82] [(57 -88 -22 77) -88] [(-1 -83 3 50) -83] [(64 20 -35 -38) -38] [(-17 87 -69 -19) -69] [(-56 -36 -53 80) -56] [(-59 9 -25 73) -59] [(27 91 -1 -85) -85] [(79 25 29 -57) -57] [(-78 2 99 -10) -78] [(-64 -75 97 -21) -75] [(-32 21 70 59) -32] [(85 -80 -30 25) -80] [(-81 -63 67 -70) -81] [(-72 67 34 -87) -87] [(56 86 27 69) 27] [(55 7 -19 -87) -87] [(64 -55 8 36) -55] [(43 18 28 99) 18] [(13 70 90 8) 8] [(-63 6 -84 -53) -84] [(-100 22 -53 100) -100] [(73 64 86 -71) -71] [(-59 -58 100 54) -59] [(-82 -7 -37 74) -82] [(65 9 -18 40) -18])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 661
Test mean error for best: 0.66100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -96                 | Program output: 77                 
Correct output: 38                  | Program output: 63                 
Correct output: -79                 | Program output: -79                
Correct output: -57                 | Program output: -57                
Correct output: -24                 | Program output: 7                  
Correct output: -27                 | Program output: 61                 
Correct output: -92                 | Program output: -92                
Correct output: -53                 | Program output: 68                 
Correct output: -92                 | Program output: -92                
Correct output: -33                 | Program output: -33                
Correct output: 1                   | Program output: 1                  
Correct output: -94                 | Program output: -94                
Correct output: -49                 | Program output: -49                
Correct output: 0                   | Program output: 0                  
Correct output: -23                 | Program output: -23                
Correct output: 12                  | Program output: 98                 
Correct output: 22                  | Program output: 22                 
Correct output: 15                  | Program output: 56                 
Correct output: 35                  | Program output: 97                 
Correct output: 25                  | Program output: 68                 
Correct output: 35                  | Program output: 59                 
Correct output: 5                   | Program output: 5                  
Correct output: 33                  | Program output: 33                 
Correct output: 25                  | Program output: 54                 
Correct output: 0                   | Program output: 45                 
Correct output: 19                  | Program output: 19                 
Correct output: 7                   | Program output: 94                 
Correct output: 1                   | Program output: 1                  
Correct output: 0                   | Program output: 0                  
Correct output: 18                  | Program output: 95                 
Correct output: 3                   | Program output: 7                  
Correct output: 19                  | Program output: 19                 
Correct output: 32                  | Program output: 77                 
Correct output: 23                  | Program output: 63                 
Correct output: 11                  | Program output: 97                 
Correct output: -91                 | Program output: -91                
Correct output: -74                 | Program output: -34                
Correct output: -4                  | Program output: 71                 
Correct output: -81                 | Program output: -81                
Correct output: -93                 | Program output: -93                
Correct output: -29                 | Program output: 62                 
Correct output: -21                 | Program output: 63                 
Correct output: -91                 | Program output: -8                 
Correct output: -25                 | Program output: 15                 
Correct output: -64                 | Program output: -38                
Correct output: -81                 | Program output: -81                
Correct output: -40                 | Program output: -40                
Correct output: -50                 | Program output: 17                 
Correct output: -95                 | Program output: -95                
Correct output: -66                 | Program output: -61                
Correct output: -35                 | Program output: -35                
Correct output: -94                 | Program output: -2                 
Correct output: -59                 | Program output: -49                
Correct output: -27                 | Program output: -27                
Correct output: -95                 | Program output: -21                
Correct output: -72                 | Program output: -72                
Correct output: -62                 | Program output: -62                
Correct output: -70                 | Program output: 44                 
Correct output: -77                 | Program output: -3                 
Correct output: -63                 | Program output: 94                 
Correct output: -97                 | Program output: 63                 
Correct output: -62                 | Program output: -32                
Correct output: -29                 | Program output: -11                
Correct output: -16                 | Program output: -11                
Correct output: -89                 | Program output: 69                 
Correct output: 7                   | Program output: 95                 
Correct output: -87                 | Program output: 36                 
Correct output: -89                 | Program output: 87                 
Correct output: -68                 | Program output: -68                
Correct output: -82                 | Program output: -82                
Correct output: -88                 | Program output: 57                 
Correct output: -83                 | Program output: -1                 
Correct output: -38                 | Program output: 64                 
Correct output: -69                 | Program output: -17                
Correct output: -56                 | Program output: -56                
Correct output: -59                 | Program output: -59                
Correct output: -85                 | Program output: 27                 
Correct output: -57                 | Program output: 79                 
Correct output: -78                 | Program output: -78                
Correct output: -75                 | Program output: -64                
Correct output: -32                 | Program output: -32                
Correct output: -80                 | Program output: 85                 
Correct output: -81                 | Program output: -81                
Correct output: -87                 | Program output: -72                
Correct output: 27                  | Program output: 56                 
Correct output: -87                 | Program output: 55                 
Correct output: -55                 | Program output: 64                 
Correct output: 18                  | Program output: 43                 
Correct output: 8                   | Program output: 13                 
Correct output: -84                 | Program output: -63                
Correct output: -100                | Program output: -100               
Correct output: -71                 | Program output: 73                 
Correct output: -59                 | Program output: -59                
Correct output: -82                 | Program output: -82                
Correct output: -18                 | Program output: 65                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_mult} {:close 0, :instruction print_integer} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in4} {:close 0, :instruction exec_k} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_max} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_if} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_max} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_k} {:close 3, :instruction integer_fromboolean} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction -96} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_eq} {:close 0, :instruction tagged_273} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction tag_exec_495} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_flush} {:close 0, :instruction 75} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_do*while} {:close 0, :instruction tag_boolean_497} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_add} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*count})
Lexicase best program: (integer_mult print_integer exec_stackdepth boolean_frominteger integer_dup_times exec_dup (boolean_swap boolean_or) boolean_yankdup integer_yankdup in4 exec_k (in1 print_integer exec_flush integer_max exec_yank integer_mod) (exec_if (exec_yankdup integer_max) (exec_shove (exec_yank integer_fromboolean boolean_or exec_s (boolean_dup exec_k (integer_fromboolean) ()) (boolean_yankdup integer_sub) (-96 boolean_pop boolean_stackdepth integer_rot) exec_do*count (exec_noop exec_do*times () boolean_not boolean_dup_items exec_y_when_autoconstructing (integer_eq) tagged_273 boolean_dup_items tag_exec_495 () exec_yankdup integer_eq print_integer boolean_stackdepth integer_yank integer_yank boolean_dup_times) integer_lte boolean_flush 75 exec_shove (integer_pop exec_do*while () tag_boolean_497 integer_dup_items boolean_dup_times exec_flush integer_add) exec_s_when_autoconstructing () () (exec_do*count ())))))
Lexicase best errors: [0 1 1 0 0 0 0 1 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 87
Percent parens: 0.253
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_mult} {:close 0, :instruction print_integer} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in4} {:close 0, :instruction exec_k} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_max} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_if} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_max} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_k} {:close 3, :instruction integer_fromboolean} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction -96} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_eq} {:close 0, :instruction tagged_273} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction tag_exec_495} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_flush} {:close 0, :instruction 75} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_do*while} {:close 0, :instruction tag_boolean_497} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_add} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*count})
Zero cases best program: (integer_mult print_integer exec_stackdepth boolean_frominteger integer_dup_times exec_dup (boolean_swap boolean_or) boolean_yankdup integer_yankdup in4 exec_k (in1 print_integer exec_flush integer_max exec_yank integer_mod) (exec_if (exec_yankdup integer_max) (exec_shove (exec_yank integer_fromboolean boolean_or exec_s (boolean_dup exec_k (integer_fromboolean) ()) (boolean_yankdup integer_sub) (-96 boolean_pop boolean_stackdepth integer_rot) exec_do*count (exec_noop exec_do*times () boolean_not boolean_dup_items exec_y_when_autoconstructing (integer_eq) tagged_273 boolean_dup_items tag_exec_495 () exec_yankdup integer_eq print_integer boolean_stackdepth integer_yank integer_yank boolean_dup_times) integer_lte boolean_flush 75 exec_shove (integer_pop exec_do*while () tag_boolean_497 integer_dup_items boolean_dup_times exec_flush integer_add) exec_s_when_autoconstructing () () (exec_do*count ())))))
Zero cases best errors: [0 1 1 0 0 0 0 1 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 87
Percent parens: 0.253
--- Lexicase Population Statistics ---
Count of elite individuals by case: (3 2 3 3 3 11 3 2 11 1)
Population mean number of elite cases: 0.04
Count of perfect (error zero) individuals by case: (3 2 3 3 3 11 3 2 11 1)
Population mean number of perfect (error zero) cases: 0.04
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_sub} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*count} {:close 2, :instruction integer_swap} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_while} {:close 0, :instruction integer_add} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_max} {:close 0, :instruction print_exec} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_s} {:close 0, :instruction exec_y} {:close 1, :instruction integer_eq} {:close 2, :instruction exec_dup_items} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_flush} {:close 0, :instruction tag_exec_764} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_div} {:close 1, :instruction exec_y} {:close 1, :instruction in2} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_add} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction integer_min} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_or})
Best program: (in1 integer_lte boolean_and print_integer integer_yankdup integer_sub boolean_stackdepth boolean_or exec_shove (exec_do*count (exec_eq) boolean_flush exec_do*count (integer_swap)) boolean_and integer_empty exec_flush exec_while () integer_add integer_stackdepth boolean_frominteger boolean_not integer_max print_exec (integer_swap exec_yank boolean_dup integer_dup_times exec_s () (exec_y (integer_eq) exec_dup_items) () integer_fromboolean integer_empty) boolean_xor exec_do*times () exec_do*while (integer_gt boolean_flush tag_exec_764 (boolean_dup_times exec_when (integer_div exec_y () in2) boolean_flush) boolean_flush exec_yankdup exec_dup (boolean_stackdepth integer_lte boolean_swap boolean_dup_items exec_shove (exec_flush integer_add) boolean_yankdup) boolean_stackdepth integer_mult) integer_dup_times exec_dup_items print_boolean exec_rot (integer_stackdepth integer_max integer_min integer_dec) (boolean_dup exec_dup_items integer_lt) (integer_mod integer_yank boolean_stackdepth exec_s_when_autoconstructing (integer_rot) (boolean_or) ()))
Errors: [0 1 1 0 0 0 0 1 1 1]
Total: 5
Mean: 0.5
Genome size: 76
Size: 99
Percent parens: 0.232
--- Population Statistics ---
Average total errors in population: 9.958
Median total errors in population: 10
Error averages by case: (0.997 0.998 0.997 0.997 0.997 0.989 0.997 0.998 0.989 0.999)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 48.63
Average program size in population (points): 66.876
Average percent parens in population: 0.282
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.27
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 463973
--- Timings ---
Current time: 1559314641453 milliseconds
Total Time:           2.8 seconds
Initialization:       0.1 seconds,  3.6%
Reproduction:         0.7 seconds, 26.3%
Fitness Testing:      2.0 seconds, 70.0%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 661
Test mean error for best: 0.66100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -96                 | Program output: 77                 
Correct output: 38                  | Program output: 63                 
Correct output: -79                 | Program output: -79                
Correct output: -57                 | Program output: -57                
Correct output: -24                 | Program output: 7                  
Correct output: -27                 | Program output: 61                 
Correct output: -92                 | Program output: -92                
Correct output: -53                 | Program output: 68                 
Correct output: -92                 | Program output: -92                
Correct output: -33                 | Program output: -33                
Correct output: 1                   | Program output: 1                  
Correct output: -94                 | Program output: -94                
Correct output: -49                 | Program output: -49                
Correct output: 0                   | Program output: 0                  
Correct output: -23                 | Program output: -23                
Correct output: 12                  | Program output: 98                 
Correct output: 22                  | Program output: 22                 
Correct output: 15                  | Program output: 56                 
Correct output: 35                  | Program output: 97                 
Correct output: 25                  | Program output: 68                 
Correct output: 35                  | Program output: 59                 
Correct output: 5                   | Program output: 5                  
Correct output: 33                  | Program output: 33                 
Correct output: 25                  | Program output: 54                 
Correct output: 0                   | Program output: 45                 
Correct output: 19                  | Program output: 19                 
Correct output: 7                   | Program output: 94                 
Correct output: 1                   | Program output: 1                  
Correct output: 0                   | Program output: 0                  
Correct output: 18                  | Program output: 95                 
Correct output: 3                   | Program output: 7                  
Correct output: 19                  | Program output: 19                 
Correct output: 32                  | Program output: 77                 
Correct output: 23                  | Program output: 63                 
Correct output: 11                  | Program output: 97                 
Correct output: -91                 | Program output: -91                
Correct output: -74                 | Program output: -34                
Correct output: -4                  | Program output: 71                 
Correct output: -81                 | Program output: -81                
Correct output: -93                 | Program output: -93                
Correct output: -29                 | Program output: 62                 
Correct output: -21                 | Program output: 63                 
Correct output: -91                 | Program output: -8                 
Correct output: -25                 | Program output: 15                 
Correct output: -64                 | Program output: -38                
Correct output: -81                 | Program output: -81                
Correct output: -40                 | Program output: -40                
Correct output: -50                 | Program output: 17                 
Correct output: -95                 | Program output: -95                
Correct output: -66                 | Program output: -61                
Correct output: -35                 | Program output: -35                
Correct output: -94                 | Program output: -2                 
Correct output: -59                 | Program output: -49                
Correct output: -27                 | Program output: -27                
Correct output: -95                 | Program output: -21                
Correct output: -72                 | Program output: -72                
Correct output: -62                 | Program output: -62                
Correct output: -70                 | Program output: 44                 
Correct output: -77                 | Program output: -3                 
Correct output: -63                 | Program output: 94                 
Correct output: -97                 | Program output: 63                 
Correct output: -62                 | Program output: -32                
Correct output: -29                 | Program output: -11                
Correct output: -16                 | Program output: -11                
Correct output: -89                 | Program output: 69                 
Correct output: 7                   | Program output: 95                 
Correct output: -87                 | Program output: 36                 
Correct output: -89                 | Program output: 87                 
Correct output: -68                 | Program output: -68                
Correct output: -82                 | Program output: -82                
Correct output: -88                 | Program output: 57                 
Correct output: -83                 | Program output: -1                 
Correct output: -38                 | Program output: 64                 
Correct output: -69                 | Program output: -17                
Correct output: -56                 | Program output: -56                
Correct output: -59                 | Program output: -59                
Correct output: -85                 | Program output: 27                 
Correct output: -57                 | Program output: 79                 
Correct output: -78                 | Program output: -78                
Correct output: -75                 | Program output: -64                
Correct output: -32                 | Program output: -32                
Correct output: -80                 | Program output: 85                 
Correct output: -81                 | Program output: -81                
Correct output: -87                 | Program output: -72                
Correct output: 27                  | Program output: 56                 
Correct output: -87                 | Program output: 55                 
Correct output: -55                 | Program output: 64                 
Correct output: 18                  | Program output: 43                 
Correct output: 8                   | Program output: 13                 
Correct output: -84                 | Program output: -63                
Correct output: -100                | Program output: -100               
Correct output: -71                 | Program output: 73                 
Correct output: -59                 | Program output: -59                
Correct output: -82                 | Program output: -82                
Correct output: -18                 | Program output: 65                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_sub} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*count} {:close 2, :instruction integer_swap} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_while} {:close 0, :instruction integer_add} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_max} {:close 0, :instruction print_exec} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_s} {:close 0, :instruction exec_y} {:close 1, :instruction integer_eq} {:close 2, :instruction exec_dup_items} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_flush} {:close 0, :instruction tag_exec_764} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_div} {:close 1, :instruction exec_y} {:close 1, :instruction in2} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_add} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction integer_min} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_or})
Lexicase best program: (in1 integer_lte boolean_and print_integer integer_yankdup integer_sub boolean_stackdepth boolean_or exec_shove (exec_do*count (exec_eq) boolean_flush exec_do*count (integer_swap)) boolean_and integer_empty exec_flush exec_while () integer_add integer_stackdepth boolean_frominteger boolean_not integer_max print_exec (integer_swap exec_yank boolean_dup integer_dup_times exec_s () (exec_y (integer_eq) exec_dup_items) () integer_fromboolean integer_empty) boolean_xor exec_do*times () exec_do*while (integer_gt boolean_flush tag_exec_764 (boolean_dup_times exec_when (integer_div exec_y () in2) boolean_flush) boolean_flush exec_yankdup exec_dup (boolean_stackdepth integer_lte boolean_swap boolean_dup_items exec_shove (exec_flush integer_add) boolean_yankdup) boolean_stackdepth integer_mult) integer_dup_times exec_dup_items print_boolean exec_rot (integer_stackdepth integer_max integer_min integer_dec) (boolean_dup exec_dup_items integer_lt) (integer_mod integer_yank boolean_stackdepth exec_s_when_autoconstructing (integer_rot) (boolean_or) ()))
Lexicase best errors: [0 0 1 0 1 1 0 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 99
Percent parens: 0.232
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_sub} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*count} {:close 2, :instruction integer_swap} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_while} {:close 0, :instruction integer_add} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_max} {:close 0, :instruction print_exec} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_s} {:close 0, :instruction exec_y} {:close 1, :instruction integer_eq} {:close 2, :instruction exec_dup_items} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_flush} {:close 0, :instruction tag_exec_764} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_div} {:close 1, :instruction exec_y} {:close 1, :instruction in2} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_add} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction integer_min} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_or})
Zero cases best program: (in1 integer_lte boolean_and print_integer integer_yankdup integer_sub boolean_stackdepth boolean_or exec_shove (exec_do*count (exec_eq) boolean_flush exec_do*count (integer_swap)) boolean_and integer_empty exec_flush exec_while () integer_add integer_stackdepth boolean_frominteger boolean_not integer_max print_exec (integer_swap exec_yank boolean_dup integer_dup_times exec_s () (exec_y (integer_eq) exec_dup_items) () integer_fromboolean integer_empty) boolean_xor exec_do*times () exec_do*while (integer_gt boolean_flush tag_exec_764 (boolean_dup_times exec_when (integer_div exec_y () in2) boolean_flush) boolean_flush exec_yankdup exec_dup (boolean_stackdepth integer_lte boolean_swap boolean_dup_items exec_shove (exec_flush integer_add) boolean_yankdup) boolean_stackdepth integer_mult) integer_dup_times exec_dup_items print_boolean exec_rot (integer_stackdepth integer_max integer_min integer_dec) (boolean_dup exec_dup_items integer_lt) (integer_mod integer_yank boolean_stackdepth exec_s_when_autoconstructing (integer_rot) (boolean_or) ()))
Zero cases best errors: [0 0 1 0 1 1 0 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 99
Percent parens: 0.232
--- Lexicase Population Statistics ---
Count of elite individuals by case: (425 424 207 425 151 207 425 151 783 425)
Population mean number of elite cases: 3.62
Count of perfect (error zero) individuals by case: (425 424 207 425 151 207 425 151 783 425)
Population mean number of perfect (error zero) cases: 3.62
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_mult} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in4} {:close 0, :instruction exec_k} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_max} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_if} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_max} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_k} {:close 3, :instruction integer_fromboolean} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction -96} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_eq} {:close 0, :instruction tagged_273} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction tag_exec_495} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_flush} {:close 0, :instruction 75} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_do*while} {:close 0, :instruction tag_boolean_497} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_add} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*count})
Best program: (integer_mult exec_do*while (exec_stackdepth boolean_frominteger integer_dup_times exec_dup (boolean_swap boolean_or) boolean_yankdup integer_yankdup in4 exec_k (in1 print_integer exec_flush integer_max exec_yank integer_mod) (exec_if (exec_yankdup integer_max) (exec_shove (exec_yank integer_fromboolean boolean_or exec_s (boolean_dup exec_k (integer_fromboolean) ()) (boolean_yankdup integer_sub) (-96 boolean_pop boolean_stackdepth integer_rot) exec_do*count (exec_noop exec_do*times () boolean_not boolean_dup_items exec_y_when_autoconstructing (integer_eq) tagged_273 boolean_dup_items tag_exec_495 () exec_yankdup integer_eq print_integer boolean_stackdepth integer_yank integer_yank boolean_dup_times) integer_lte boolean_flush 75 exec_shove (integer_pop exec_do*while () tag_boolean_497 integer_dup_items boolean_dup_times exec_flush integer_add) exec_s_when_autoconstructing () () (exec_do*count ()))))))
Errors: [0 0 1 0 1 1 0 1 0 0]
Total: 4
Mean: 0.4
Genome size: 65
Size: 88
Percent parens: 0.261
--- Population Statistics ---
Average total errors in population: 6.377
Median total errors in population: 7
Error averages by case: (0.575 0.576 0.793 0.575 0.849 0.793 0.575 0.849 0.217 0.575)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 56.434
Average program size in population (points): 77.252
Average percent parens in population: 0.271
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.48
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 82
Genome diversity (% unique genomes):	 0.563
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 83
Syntactic diversity (% unique Push programs):	 0.553
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.04
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 816761
--- Timings ---
Current time: 1559314643890 milliseconds
Total Time:           5.3 seconds
Initialization:       0.1 seconds,  1.9%
Reproduction:         2.4 seconds, 45.3%
Fitness Testing:      2.5 seconds, 46.4%
Report:               0.3 seconds,  6.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 661
Test mean error for best: 0.66100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -96                 | Program output: 77                 
Correct output: 38                  | Program output: 63                 
Correct output: -79                 | Program output: -79                
Correct output: -57                 | Program output: -57                
Correct output: -24                 | Program output: 7                  
Correct output: -27                 | Program output: 61                 
Correct output: -92                 | Program output: -92                
Correct output: -53                 | Program output: 68                 
Correct output: -92                 | Program output: -92                
Correct output: -33                 | Program output: -33                
Correct output: 1                   | Program output: 1                  
Correct output: -94                 | Program output: -94                
Correct output: -49                 | Program output: -49                
Correct output: 0                   | Program output: 0                  
Correct output: -23                 | Program output: -23                
Correct output: 12                  | Program output: 98                 
Correct output: 22                  | Program output: 22                 
Correct output: 15                  | Program output: 56                 
Correct output: 35                  | Program output: 97                 
Correct output: 25                  | Program output: 68                 
Correct output: 35                  | Program output: 59                 
Correct output: 5                   | Program output: 5                  
Correct output: 33                  | Program output: 33                 
Correct output: 25                  | Program output: 54                 
Correct output: 0                   | Program output: 45                 
Correct output: 19                  | Program output: 19                 
Correct output: 7                   | Program output: 94                 
Correct output: 1                   | Program output: 1                  
Correct output: 0                   | Program output: 0                  
Correct output: 18                  | Program output: 95                 
Correct output: 3                   | Program output: 7                  
Correct output: 19                  | Program output: 19                 
Correct output: 32                  | Program output: 77                 
Correct output: 23                  | Program output: 63                 
Correct output: 11                  | Program output: 97                 
Correct output: -91                 | Program output: -91                
Correct output: -74                 | Program output: -34                
Correct output: -4                  | Program output: 71                 
Correct output: -81                 | Program output: -81                
Correct output: -93                 | Program output: -93                
Correct output: -29                 | Program output: 62                 
Correct output: -21                 | Program output: 63                 
Correct output: -91                 | Program output: -8                 
Correct output: -25                 | Program output: 15                 
Correct output: -64                 | Program output: -38                
Correct output: -81                 | Program output: -81                
Correct output: -40                 | Program output: -40                
Correct output: -50                 | Program output: 17                 
Correct output: -95                 | Program output: -95                
Correct output: -66                 | Program output: -61                
Correct output: -35                 | Program output: -35                
Correct output: -94                 | Program output: -2                 
Correct output: -59                 | Program output: -49                
Correct output: -27                 | Program output: -27                
Correct output: -95                 | Program output: -21                
Correct output: -72                 | Program output: -72                
Correct output: -62                 | Program output: -62                
Correct output: -70                 | Program output: 44                 
Correct output: -77                 | Program output: -3                 
Correct output: -63                 | Program output: 94                 
Correct output: -97                 | Program output: 63                 
Correct output: -62                 | Program output: -32                
Correct output: -29                 | Program output: -11                
Correct output: -16                 | Program output: -11                
Correct output: -89                 | Program output: 69                 
Correct output: 7                   | Program output: 95                 
Correct output: -87                 | Program output: 36                 
Correct output: -89                 | Program output: 87                 
Correct output: -68                 | Program output: -68                
Correct output: -82                 | Program output: -82                
Correct output: -88                 | Program output: 57                 
Correct output: -83                 | Program output: -1                 
Correct output: -38                 | Program output: 64                 
Correct output: -69                 | Program output: -17                
Correct output: -56                 | Program output: -56                
Correct output: -59                 | Program output: -59                
Correct output: -85                 | Program output: 27                 
Correct output: -57                 | Program output: 79                 
Correct output: -78                 | Program output: -78                
Correct output: -75                 | Program output: -64                
Correct output: -32                 | Program output: -32                
Correct output: -80                 | Program output: 85                 
Correct output: -81                 | Program output: -81                
Correct output: -87                 | Program output: -72                
Correct output: 27                  | Program output: 56                 
Correct output: -87                 | Program output: 55                 
Correct output: -55                 | Program output: 64                 
Correct output: 18                  | Program output: 43                 
Correct output: 8                   | Program output: 13                 
Correct output: -84                 | Program output: -63                
Correct output: -100                | Program output: -100               
Correct output: -71                 | Program output: 73                 
Correct output: -59                 | Program output: -59                
Correct output: -82                 | Program output: -82                
Correct output: -18                 | Program output: 65                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_sub} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*count} {:close 2, :instruction integer_swap} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_while} {:close 0, :instruction integer_add} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_max} {:close 0, :instruction print_exec} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_s} {:close 0, :instruction exec_y} {:close 1, :instruction integer_eq} {:close 2, :instruction exec_dup_items} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_flush} {:close 0, :instruction tag_exec_764} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_div} {:close 1, :instruction exec_y} {:close 1, :instruction in2} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_add} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_if} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction integer_min} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_or})
Lexicase best program: (in1 integer_lte boolean_and print_integer integer_yankdup integer_sub boolean_stackdepth boolean_or exec_shove (exec_do*count (exec_eq) boolean_flush exec_do*count (integer_swap)) boolean_and integer_empty exec_flush exec_while () integer_add integer_stackdepth boolean_frominteger boolean_not integer_max print_exec (integer_swap exec_yank boolean_dup integer_dup_times exec_s () (exec_y (integer_eq) exec_dup_items) () integer_fromboolean integer_empty) boolean_xor exec_do*times () exec_do*while (integer_gt boolean_flush tag_exec_764 (boolean_dup_times exec_when (integer_div exec_y () in2) boolean_flush) boolean_flush exec_yankdup exec_dup (boolean_stackdepth integer_lte boolean_swap boolean_dup_items exec_shove (exec_flush integer_add) boolean_yankdup) boolean_stackdepth integer_mult) integer_dup_times exec_dup_items exec_if (exec_rot (integer_stackdepth integer_max integer_min integer_dec) (boolean_dup exec_dup_items integer_lt) (integer_mod integer_yank boolean_stackdepth exec_s_when_autoconstructing (integer_rot) (boolean_or) ())) ())
Lexicase best errors: [1 0 1 0 1 0 0 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 101
Percent parens: 0.248
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_sub} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*count} {:close 2, :instruction integer_swap} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_while} {:close 0, :instruction integer_add} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_max} {:close 0, :instruction print_exec} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_s} {:close 0, :instruction exec_y} {:close 1, :instruction integer_eq} {:close 2, :instruction exec_dup_items} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_flush} {:close 0, :instruction tag_exec_764} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_div} {:close 1, :instruction exec_y} {:close 1, :instruction in2} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_add} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_if} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction integer_min} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_or})
Zero cases best program: (in1 integer_lte boolean_and print_integer integer_yankdup integer_sub boolean_stackdepth boolean_or exec_shove (exec_do*count (exec_eq) boolean_flush exec_do*count (integer_swap)) boolean_and integer_empty exec_flush exec_while () integer_add integer_stackdepth boolean_frominteger boolean_not integer_max print_exec (integer_swap exec_yank boolean_dup integer_dup_times exec_s () (exec_y (integer_eq) exec_dup_items) () integer_fromboolean integer_empty) boolean_xor exec_do*times () exec_do*while (integer_gt boolean_flush tag_exec_764 (boolean_dup_times exec_when (integer_div exec_y () in2) boolean_flush) boolean_flush exec_yankdup exec_dup (boolean_stackdepth integer_lte boolean_swap boolean_dup_items exec_shove (exec_flush integer_add) boolean_yankdup) boolean_stackdepth integer_mult) integer_dup_times exec_dup_items exec_if (exec_rot (integer_stackdepth integer_max integer_min integer_dec) (boolean_dup exec_dup_items integer_lt) (integer_mod integer_yank boolean_stackdepth exec_s_when_autoconstructing (integer_rot) (boolean_or) ())) ())
Zero cases best errors: [1 0 1 0 1 0 0 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 101
Percent parens: 0.248
--- Lexicase Population Statistics ---
Count of elite individuals by case: (201 528 159 529 3 530 531 528 528 3)
Population mean number of elite cases: 3.54
Count of perfect (error zero) individuals by case: (201 528 159 529 3 530 531 528 528 3)
Population mean number of perfect (error zero) cases: 3.54
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_mult} {:close 0, :instruction print_integer} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in4} {:close 0, :instruction exec_k} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_max} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_if} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_max} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_s} {:close 0, :instruction integer_add} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_div} {:close 0, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in2} {:close 1, :instruction integer_dec} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction print_newline} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction tagged_576} {:close 1, :instruction integer_shove})
Best program: (integer_mult print_integer exec_stackdepth boolean_frominteger integer_dup_times exec_dup (boolean_swap boolean_or) boolean_yankdup integer_yankdup in4 exec_k (in1 print_integer exec_flush integer_max exec_yank integer_mod) (exec_if (exec_yankdup integer_max) (exec_shove (in3 exec_yankdup print_integer boolean_flush integer_swap integer_gt) integer_gte exec_flush exec_s (integer_add exec_swap (integer_div) (exec_if (exec_shove (boolean_eq) exec_k_when_autoconstructing (exec_dup (integer_mult exec_k (integer_dec integer_dup_items) (in2 integer_dec) boolean_dup_times) print_newline in2 exec_k (exec_yankdup exec_s_when_autoconstructing (integer_dup_times exec_s_when_autoconstructing (exec_stackdepth exec_y_when_autoconstructing () integer_eq integer_dup_times exec_swap (tagged_576 integer_shove) ()) () ()) () ()) ()) ()) ())) () ())))
Errors: [1 0 1 0 1 0 0 0 0 1]
Total: 4
Mean: 0.4
Genome size: 60
Size: 91
Percent parens: 0.341
--- Population Statistics ---
Average total errors in population: 6.46
Median total errors in population: 4
Error averages by case: (0.799 0.472 0.841 0.471 0.997 0.47 0.469 0.472 0.472 0.997)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 56.336
Average program size in population (points): 75.834
Average percent parens in population: 0.261
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 2.963
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 68
Genome diversity (% unique genomes):	 0.739
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 69
Syntactic diversity (% unique Push programs):	 0.73
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.04
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1157203
--- Timings ---
Current time: 1559314646853 milliseconds
Total Time:           8.3 seconds
Initialization:       0.1 seconds,  1.2%
Reproduction:         4.7 seconds, 56.6%
Fitness Testing:      2.9 seconds, 34.9%
Report:               0.6 seconds,  7.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 653
Test mean error for best: 0.65300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -96                 | Program output: -96                
Correct output: 38                  | Program output: 38                 
Correct output: -79                 | Program output: -29                
Correct output: -57                 | Program output: -57                
Correct output: -24                 | Program output: -24                
Correct output: -27                 | Program output: -27                
Correct output: -92                 | Program output: -92                
Correct output: -53                 | Program output: 68                 
Correct output: -92                 | Program output: -92                
Correct output: -33                 | Program output: 24                 
Correct output: 1                   | Program output: 1                  
Correct output: -94                 | Program output: -94                
Correct output: -49                 | Program output: -49                
Correct output: 0                   | Program output: 0                  
Correct output: -23                 | Program output: -23                
Correct output: 12                  | Program output: 31                 
Correct output: 22                  | Program output: 41                 
Correct output: 15                  | Program output: 61                 
Correct output: 35                  | Program output: 35                 
Correct output: 25                  | Program output: 97                 
Correct output: 35                  | Program output: 62                 
Correct output: 5                   | Program output: 88                 
Correct output: 33                  | Program output: 82                 
Correct output: 25                  | Program output: 25                 
Correct output: 0                   | Program output: 0                  
Correct output: 19                  | Program output: 68                 
Correct output: 7                   | Program output: 11                 
Correct output: 1                   | Program output: 58                 
Correct output: 0                   | Program output: 39                 
Correct output: 18                  | Program output: 68                 
Correct output: 3                   | Program output: 93                 
Correct output: 19                  | Program output: 95                 
Correct output: 32                  | Program output: 46                 
Correct output: 23                  | Program output: 57                 
Correct output: 11                  | Program output: 76                 
Correct output: -91                 | Program output: 74                 
Correct output: -74                 | Program output: -74                
Correct output: -4                  | Program output: 13                 
Correct output: -81                 | Program output: -6                 
Correct output: -93                 | Program output: -25                
Correct output: -29                 | Program output: -23                
Correct output: -21                 | Program output: -21                
Correct output: -91                 | Program output: -91                
Correct output: -25                 | Program output: 18                 
Correct output: -64                 | Program output: -64                
Correct output: -81                 | Program output: -77                
Correct output: -40                 | Program output: 34                 
Correct output: -50                 | Program output: 85                 
Correct output: -95                 | Program output: -16                
Correct output: -66                 | Program output: -66                
Correct output: -35                 | Program output: 8                  
Correct output: -94                 | Program output: 52                 
Correct output: -59                 | Program output: -54                
Correct output: -27                 | Program output: 38                 
Correct output: -95                 | Program output: 13                 
Correct output: -72                 | Program output: 90                 
Correct output: -62                 | Program output: -29                
Correct output: -70                 | Program output: -16                
Correct output: -77                 | Program output: 65                 
Correct output: -63                 | Program output: -46                
Correct output: -97                 | Program output: -48                
Correct output: -62                 | Program output: -18                
Correct output: -29                 | Program output: 6                  
Correct output: -16                 | Program output: -16                
Correct output: -89                 | Program output: -42                
Correct output: 7                   | Program output: 79                 
Correct output: -87                 | Program output: -87                
Correct output: -89                 | Program output: -75                
Correct output: -68                 | Program output: 78                 
Correct output: -82                 | Program output: 98                 
Correct output: -88                 | Program output: -88                
Correct output: -83                 | Program output: -83                
Correct output: -38                 | Program output: 20                 
Correct output: -69                 | Program output: 87                 
Correct output: -56                 | Program output: -36                
Correct output: -59                 | Program output: 9                  
Correct output: -85                 | Program output: 91                 
Correct output: -57                 | Program output: 25                 
Correct output: -78                 | Program output: 2                  
Correct output: -75                 | Program output: -75                
Correct output: -32                 | Program output: 21                 
Correct output: -80                 | Program output: -80                
Correct output: -81                 | Program output: -63                
Correct output: -87                 | Program output: 67                 
Correct output: 27                  | Program output: 86                 
Correct output: -87                 | Program output: 7                  
Correct output: -55                 | Program output: -55                
Correct output: 18                  | Program output: 18                 
Correct output: 8                   | Program output: 70                 
Correct output: -84                 | Program output: 6                  
Correct output: -100                | Program output: 22                 
Correct output: -71                 | Program output: 64                 
Correct output: -59                 | Program output: -58                
Correct output: -82                 | Program output: -7                 
Correct output: -18                 | Program output: 9                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_shove} {:close 1, :instruction print_boolean} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction tagged_997} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_dec} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_and} {:close 1, :instruction print_integer} {:close 0, :instruction -51} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_do*times} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_do*times} {:close 1, :instruction tag_exec_495} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in3} {:close 0, :instruction exec_when} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_max})
Lexicase best program: (integer_shove print_boolean integer_dec integer_fromboolean in2 exec_if (boolean_yankdup boolean_and print_integer exec_flush) (boolean_dup_items tagged_997 print_integer boolean_rot integer_mult exec_dup_times (integer_dup_times integer_dec) boolean_yankdup) print_integer exec_do*times (integer_lte exec_dup_times (integer_lt) integer_swap boolean_and) print_integer -51 exec_do*while () boolean_swap exec_do*times () integer_flush boolean_shove exec_do*times () tag_exec_495 () exec_yankdup integer_eq print_integer boolean_stackdepth integer_yank integer_yank boolean_frominteger in3 exec_when (integer_pop exec_dup_items exec_shove (integer_pop integer_max)))
Lexicase best errors: [1 1 1 0 0 0 0 1 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 61
Percent parens: 0.197
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_shove} {:close 1, :instruction print_boolean} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction tagged_997} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_dec} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_and} {:close 1, :instruction print_integer} {:close 0, :instruction -51} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_do*times} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_do*times} {:close 1, :instruction tag_exec_495} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in3} {:close 0, :instruction exec_when} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_max})
Zero cases best program: (integer_shove print_boolean integer_dec integer_fromboolean in2 exec_if (boolean_yankdup boolean_and print_integer exec_flush) (boolean_dup_items tagged_997 print_integer boolean_rot integer_mult exec_dup_times (integer_dup_times integer_dec) boolean_yankdup) print_integer exec_do*times (integer_lte exec_dup_times (integer_lt) integer_swap boolean_and) print_integer -51 exec_do*while () boolean_swap exec_do*times () integer_flush boolean_shove exec_do*times () tag_exec_495 () exec_yankdup integer_eq print_integer boolean_stackdepth integer_yank integer_yank boolean_frominteger in3 exec_when (integer_pop exec_dup_items exec_shove (integer_pop integer_max)))
Zero cases best errors: [1 1 1 0 0 0 0 1 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 61
Percent parens: 0.197
--- Lexicase Population Statistics ---
Count of elite individuals by case: (170 99 170 896 75 75 75 550 99 550)
Population mean number of elite cases: 2.76
Count of perfect (error zero) individuals by case: (170 99 170 896 75 75 75 550 99 550)
Population mean number of perfect (error zero) cases: 2.76
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_shove} {:close 1, :instruction print_boolean} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction tagged_997} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_dec} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_and} {:close 1, :instruction boolean_swap} {:close 0, :instruction -51} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_do*times} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_do*times} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction print_exec} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction 52} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 0, :instruction in3} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction tagged_361} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_flush} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_rot} {:close 0, :instruction tag_boolean_497} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_add} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*count})
Best program: (integer_shove print_boolean integer_dec integer_fromboolean in2 exec_if (boolean_yankdup boolean_and print_integer exec_flush) (boolean_dup_items tagged_997 print_integer boolean_rot integer_mult exec_dup_times (integer_dup_times integer_dec) boolean_yankdup) print_integer exec_do*times (integer_lte exec_dup_times (integer_lt) integer_swap boolean_and) boolean_swap -51 exec_do*while () boolean_swap exec_do*times () integer_flush boolean_shove exec_do*times () boolean_dup integer_empty integer_shove print_exec (integer_dup boolean_yankdup exec_dup_times (52 exec_k_when_autoconstructing () (integer_flush in3 integer_eq integer_shove) boolean_rot tagged_361 exec_eq boolean_not integer_flush integer_fromboolean)) integer_swap integer_sub print_integer exec_shove (integer_pop exec_rot () (tag_boolean_497 integer_dup_items boolean_dup_times exec_flush integer_add) (exec_s_when_autoconstructing () () (exec_do*count ()))))
Errors: [1 1 1 0 0 0 0 1 1 1]
Total: 6
Mean: 0.6
Genome size: 66
Size: 87
Percent parens: 0.241
--- Population Statistics ---
Average total errors in population: 7.241
Median total errors in population: 7
Error averages by case: (0.83 0.901 0.83 0.104 0.925 0.925 0.925 0.45 0.901 0.45)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 51.02
Average program size in population (points): 68.486
Average percent parens in population: 0.263
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.4725
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 44
Genome diversity (% unique genomes):	 0.759
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 49
Syntactic diversity (% unique Push programs):	 0.747
Total error diversity:				 0.004
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.042
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 1405558
--- Timings ---
Current time: 1559314649525 milliseconds
Total Time:          11.0 seconds
Initialization:       0.1 seconds,  0.9%
Reproduction:         6.9 seconds, 62.3%
Fitness Testing:      3.2 seconds, 29.1%
Report:               0.8 seconds,  7.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 658
Test mean error for best: 0.65800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -96                 | Program output: -96                
Correct output: 38                  | Program output: 63                 
Correct output: -79                 | Program output: -79                
Correct output: -57                 | Program output: 42                 
Correct output: -24                 | Program output: 7                  
Correct output: -27                 | Program output: -27                
Correct output: -92                 | Program output: -92                
Correct output: -53                 | Program output: 68                 
Correct output: -92                 | Program output: 77                 
Correct output: -33                 | Program output: 24                 
Correct output: 1                   | Program output: 1                  
Correct output: -94                 | Program output: -94                
Correct output: -49                 | Program output: -49                
Correct output: 0                   | Program output: 0                  
Correct output: -23                 | Program output: -23                
Correct output: 12                  | Program output: 23                 
Correct output: 22                  | Program output: 31                 
Correct output: 15                  | Program output: 91                 
Correct output: 35                  | Program output: 48                 
Correct output: 25                  | Program output: 25                 
Correct output: 35                  | Program output: 65                 
Correct output: 5                   | Program output: 88                 
Correct output: 33                  | Program output: 74                 
Correct output: 25                  | Program output: 86                 
Correct output: 0                   | Program output: 6                  
Correct output: 19                  | Program output: 46                 
Correct output: 7                   | Program output: 7                  
Correct output: 1                   | Program output: 45                 
Correct output: 0                   | Program output: 54                 
Correct output: 18                  | Program output: 81                 
Correct output: 3                   | Program output: 3                  
Correct output: 19                  | Program output: 27                 
Correct output: 32                  | Program output: 41                 
Correct output: 23                  | Program output: 100                
Correct output: 11                  | Program output: 11                 
Correct output: -91                 | Program output: 95                 
Correct output: -74                 | Program output: 25                 
Correct output: -4                  | Program output: -4                 
Correct output: -81                 | Program output: 56                 
Correct output: -93                 | Program output: 74                 
Correct output: -29                 | Program output: -29                
Correct output: -21                 | Program output: -2                 
Correct output: -91                 | Program output: -86                
Correct output: -25                 | Program output: -2                 
Correct output: -64                 | Program output: -22                
Correct output: -81                 | Program output: 100                
Correct output: -40                 | Program output: -24                
Correct output: -50                 | Program output: -50                
Correct output: -95                 | Program output: -64                
Correct output: -66                 | Program output: 35                 
Correct output: -35                 | Program output: 57                 
Correct output: -94                 | Program output: -94                
Correct output: -59                 | Program output: -59                
Correct output: -27                 | Program output: 61                 
Correct output: -95                 | Program output: 72                 
Correct output: -72                 | Program output: 84                 
Correct output: -62                 | Program output: 57                 
Correct output: -70                 | Program output: -70                
Correct output: -77                 | Program output: 45                 
Correct output: -63                 | Program output: -58                
Correct output: -97                 | Program output: -97                
Correct output: -62                 | Program output: 99                 
Correct output: -29                 | Program output: -29                
Correct output: -16                 | Program output: 43                 
Correct output: -89                 | Program output: 64                 
Correct output: 7                   | Program output: 7                  
Correct output: -87                 | Program output: 51                 
Correct output: -89                 | Program output: -89                
Correct output: -68                 | Program output: 49                 
Correct output: -82                 | Program output: 34                 
Correct output: -88                 | Program output: 77                 
Correct output: -83                 | Program output: 50                 
Correct output: -38                 | Program output: -38                
Correct output: -69                 | Program output: -19                
Correct output: -56                 | Program output: 80                 
Correct output: -59                 | Program output: 73                 
Correct output: -85                 | Program output: -85                
Correct output: -57                 | Program output: -57                
Correct output: -78                 | Program output: -10                
Correct output: -75                 | Program output: -21                
Correct output: -32                 | Program output: 59                 
Correct output: -80                 | Program output: 25                 
Correct output: -81                 | Program output: -70                
Correct output: -87                 | Program output: -87                
Correct output: 27                  | Program output: 69                 
Correct output: -87                 | Program output: -87                
Correct output: -55                 | Program output: 36                 
Correct output: 18                  | Program output: 99                 
Correct output: 8                   | Program output: 8                  
Correct output: -84                 | Program output: -53                
Correct output: -100                | Program output: 100                
Correct output: -71                 | Program output: -71                
Correct output: -59                 | Program output: 54                 
Correct output: -82                 | Program output: 74                 
Correct output: -18                 | Program output: 40                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_yankdup} {:close 1, :instruction in2} {:close 1, :instruction integer_gte} {:close 1, :instruction exec_if} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_while} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_sub} {:close 1, :instruction in4} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 3, :instruction boolean_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_flush})
Lexicase best program: (integer_yankdup in2 integer_gte exec_if () (integer_lte exec_while () exec_stackdepth exec_pop (integer_sub) in4) exec_dup (exec_eq boolean_dup) print_integer exec_k (boolean_and) () boolean_dup exec_do*range (boolean_yankdup integer_flush exec_s_when_autoconstructing () (exec_empty exec_flush) ()))
Lexicase best errors: [1 0 1 1 1 0 0 1 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 35
Percent parens: 0.343
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_yankdup} {:close 1, :instruction in2} {:close 1, :instruction integer_gte} {:close 1, :instruction exec_if} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_while} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_sub} {:close 1, :instruction in4} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 3, :instruction boolean_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_flush})
Zero cases best program: (integer_yankdup in2 integer_gte exec_if () (integer_lte exec_while () exec_stackdepth exec_pop (integer_sub) in4) exec_dup (exec_eq boolean_dup) print_integer exec_k (boolean_and) () boolean_dup exec_do*range (boolean_yankdup integer_flush exec_s_when_autoconstructing () (exec_empty exec_flush) ()))
Zero cases best errors: [1 0 1 1 1 0 0 1 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 35
Percent parens: 0.343
--- Lexicase Population Statistics ---
Count of elite individuals by case: (189 202 188 260 190 202 692 260 201 189)
Population mean number of elite cases: 2.57
Count of perfect (error zero) individuals by case: (189 202 188 260 190 202 692 260 201 189)
Population mean number of perfect (error zero) cases: 2.57
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_when} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_while} {:close 1, :instruction integer_eq} {:close 1, :instruction in4} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 3, :instruction boolean_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dec} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_flush})
Best program: (exec_when (integer_inc boolean_shove in3 boolean_invert_second_then_and) exec_while (integer_eq) in4 exec_dup (exec_eq boolean_dup) print_integer exec_k (boolean_and) () boolean_dup boolean_yankdup boolean_yankdup integer_dec boolean_yankdup print_integer exec_do*times (integer_lte exec_dup_times (integer_lt) boolean_dup boolean_yankdup boolean_yankdup integer_flush exec_s_when_autoconstructing () (exec_empty exec_flush) ()))
Errors: [1 0 1 1 1 0 0 1 0 1]
Total: 6
Mean: 0.6
Genome size: 31
Size: 42
Percent parens: 0.262
--- Population Statistics ---
Average total errors in population: 7.427
Median total errors in population: 7
Error averages by case: (0.811 0.798 0.812 0.74 0.81 0.798 0.308 0.74 0.799 0.811)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 41.25
Average program size in population (points): 56.557
Average percent parens in population: 0.275
Minimum age in population: 4.0
Maximum age in population: 7.625
Average age in population: 5.929125
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 56
Genome diversity (% unique genomes):	 0.649
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 56
Syntactic diversity (% unique Push programs):	 0.63
Total error diversity:				 0.005
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.053
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 1760027
--- Timings ---
Current time: 1559314652227 milliseconds
Total Time:          13.6 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         8.9 seconds, 65.1%
Fitness Testing:      3.6 seconds, 26.5%
Report:               1.0 seconds,  7.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 619
Test mean error for best: 0.61900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -96                 | Program output: -96                
Correct output: 38                  | Program output: 63                 
Correct output: -79                 | Program output: -79                
Correct output: -57                 | Program output: -57                
Correct output: -24                 | Program output: 7                  
Correct output: -27                 | Program output: -27                
Correct output: -92                 | Program output: 73                 
Correct output: -53                 | Program output: -53                
Correct output: -92                 | Program output: -92                
Correct output: -33                 | Program output: 24                 
Correct output: 1                   | Program output: 1                  
Correct output: -94                 | Program output: -94                
Correct output: -49                 | Program output: -49                
Correct output: 0                   | Program output: 0                  
Correct output: -23                 | Program output: -23                
Correct output: 12                  | Program output: 12                 
Correct output: 22                  | Program output: 53                 
Correct output: 15                  | Program output: 15                 
Correct output: 35                  | Program output: 54                 
Correct output: 25                  | Program output: 32                 
Correct output: 35                  | Program output: 35                 
Correct output: 5                   | Program output: 32                 
Correct output: 33                  | Program output: 95                 
Correct output: 25                  | Program output: 42                 
Correct output: 0                   | Program output: 32                 
Correct output: 19                  | Program output: 21                 
Correct output: 7                   | Program output: 52                 
Correct output: 1                   | Program output: 26                 
Correct output: 0                   | Program output: 44                 
Correct output: 18                  | Program output: 18                 
Correct output: 3                   | Program output: 9                  
Correct output: 19                  | Program output: 91                 
Correct output: 32                  | Program output: 32                 
Correct output: 23                  | Program output: 23                 
Correct output: 11                  | Program output: 49                 
Correct output: -91                 | Program output: 68                 
Correct output: -74                 | Program output: -49                
Correct output: -4                  | Program output: 67                 
Correct output: -81                 | Program output: 25                 
Correct output: -93                 | Program output: -54                
Correct output: -29                 | Program output: 88                 
Correct output: -21                 | Program output: 0                  
Correct output: -91                 | Program output: 90                 
Correct output: -25                 | Program output: -25                
Correct output: -64                 | Program output: -9                 
Correct output: -81                 | Program output: 90                 
Correct output: -40                 | Program output: 68                 
Correct output: -50                 | Program output: 5                  
Correct output: -95                 | Program output: -34                
Correct output: -66                 | Program output: -54                
Correct output: -35                 | Program output: -8                 
Correct output: -94                 | Program output: -39                
Correct output: -59                 | Program output: -28                
Correct output: -27                 | Program output: -13                
Correct output: -95                 | Program output: -95                
Correct output: -72                 | Program output: -25                
Correct output: -62                 | Program output: 60                 
Correct output: -70                 | Program output: -54                
Correct output: -77                 | Program output: -77                
Correct output: -63                 | Program output: -63                
Correct output: -97                 | Program output: 84                 
Correct output: -62                 | Program output: -62                
Correct output: -29                 | Program output: -18                
Correct output: -16                 | Program output: 34                 
Correct output: -89                 | Program output: -89                
Correct output: 7                   | Program output: 42                 
Correct output: -87                 | Program output: 87                 
Correct output: -89                 | Program output: -29                
Correct output: -68                 | Program output: 96                 
Correct output: -82                 | Program output: 24                 
Correct output: -88                 | Program output: -22                
Correct output: -83                 | Program output: 3                  
Correct output: -38                 | Program output: -35                
Correct output: -69                 | Program output: -69                
Correct output: -56                 | Program output: -53                
Correct output: -59                 | Program output: -25                
Correct output: -85                 | Program output: -1                 
Correct output: -57                 | Program output: 29                 
Correct output: -78                 | Program output: 99                 
Correct output: -75                 | Program output: 97                 
Correct output: -32                 | Program output: 70                 
Correct output: -80                 | Program output: -30                
Correct output: -81                 | Program output: 67                 
Correct output: -87                 | Program output: 34                 
Correct output: 27                  | Program output: 27                 
Correct output: -87                 | Program output: -19                
Correct output: -55                 | Program output: 8                  
Correct output: 18                  | Program output: 28                 
Correct output: 8                   | Program output: 90                 
Correct output: -84                 | Program output: -84                
Correct output: -100                | Program output: -53                
Correct output: -71                 | Program output: 86                 
Correct output: -59                 | Program output: 100                
Correct output: -82                 | Program output: -37                
Correct output: -18                 | Program output: -18                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_eq} {:close 1, :instruction in4} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 3, :instruction boolean_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_flush})
Lexicase best program: (integer_swap integer_inc boolean_shove in3 boolean_invert_second_then_and exec_while (integer_eq in4) exec_dup (exec_eq boolean_dup) print_integer exec_k (boolean_and) () boolean_dup boolean_yankdup boolean_yankdup integer_flush exec_s_when_autoconstructing (exec_empty exec_flush) () ())
Lexicase best errors: [0 0 1 0 0 1 1 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 29
Percent parens: 0.276
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_eq} {:close 1, :instruction in4} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 3, :instruction boolean_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_flush})
Zero cases best program: (integer_swap integer_inc boolean_shove in3 boolean_invert_second_then_and exec_while (integer_eq in4) exec_dup (exec_eq boolean_dup) print_integer exec_k (boolean_and) () boolean_dup boolean_yankdup boolean_yankdup integer_flush exec_s_when_autoconstructing (exec_empty exec_flush) () ())
Zero cases best errors: [0 0 1 0 0 1 1 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 29
Percent parens: 0.276
--- Lexicase Population Statistics ---
Count of elite individuals by case: (4 4 202 897 4 323 367 323 4 368)
Population mean number of elite cases: 2.50
Count of perfect (error zero) individuals by case: (4 4 202 897 4 323 367 323 4 368)
Population mean number of perfect (error zero) cases: 2.50
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_when} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_eq} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 3, :instruction boolean_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_flush})
Best program: (exec_when (integer_inc boolean_shove in3 boolean_or) integer_lte integer_eq exec_s_when_autoconstructing () (exec_dup (exec_eq boolean_dup) print_integer exec_k (boolean_and) ()) (boolean_dup boolean_yankdup boolean_yankdup integer_flush exec_s_when_autoconstructing () (exec_empty exec_flush) ()))
Errors: [0 0 1 0 0 1 1 1 0 1]
Total: 5
Mean: 0.5
Genome size: 21
Size: 32
Percent parens: 0.344
--- Population Statistics ---
Average total errors in population: 7.504
Median total errors in population: 7
Error averages by case: (0.996 0.996 0.798 0.103 0.996 0.677 0.633 0.677 0.996 0.632)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 42.475
Average program size in population (points): 57.782
Average percent parens in population: 0.272
Minimum age in population: 5.0
Maximum age in population: 9.4375
Average age in population: 7.41925
Median age in population: 7.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 56
Genome diversity (% unique genomes):	 0.712
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 69
Syntactic diversity (% unique Push programs):	 0.693
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.04
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 1992452
--- Timings ---
Current time: 1559314655042 milliseconds
Total Time:          16.5 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:        11.2 seconds, 68.0%
Fitness Testing:      3.9 seconds, 23.5%
Report:               1.3 seconds,  7.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 658
Test mean error for best: 0.65800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -96                 | Program output: -96                
Correct output: 38                  | Program output: 63                 
Correct output: -79                 | Program output: -79                
Correct output: -57                 | Program output: 42                 
Correct output: -24                 | Program output: 7                  
Correct output: -27                 | Program output: -27                
Correct output: -92                 | Program output: -92                
Correct output: -53                 | Program output: 68                 
Correct output: -92                 | Program output: 77                 
Correct output: -33                 | Program output: 24                 
Correct output: 1                   | Program output: 1                  
Correct output: -94                 | Program output: -94                
Correct output: -49                 | Program output: -49                
Correct output: 0                   | Program output: 0                  
Correct output: -23                 | Program output: -23                
Correct output: 12                  | Program output: 23                 
Correct output: 22                  | Program output: 31                 
Correct output: 15                  | Program output: 91                 
Correct output: 35                  | Program output: 48                 
Correct output: 25                  | Program output: 25                 
Correct output: 35                  | Program output: 65                 
Correct output: 5                   | Program output: 88                 
Correct output: 33                  | Program output: 74                 
Correct output: 25                  | Program output: 86                 
Correct output: 0                   | Program output: 6                  
Correct output: 19                  | Program output: 46                 
Correct output: 7                   | Program output: 7                  
Correct output: 1                   | Program output: 45                 
Correct output: 0                   | Program output: 54                 
Correct output: 18                  | Program output: 81                 
Correct output: 3                   | Program output: 3                  
Correct output: 19                  | Program output: 27                 
Correct output: 32                  | Program output: 41                 
Correct output: 23                  | Program output: 100                
Correct output: 11                  | Program output: 11                 
Correct output: -91                 | Program output: 95                 
Correct output: -74                 | Program output: 25                 
Correct output: -4                  | Program output: -4                 
Correct output: -81                 | Program output: 56                 
Correct output: -93                 | Program output: 74                 
Correct output: -29                 | Program output: -29                
Correct output: -21                 | Program output: -2                 
Correct output: -91                 | Program output: -86                
Correct output: -25                 | Program output: -2                 
Correct output: -64                 | Program output: -22                
Correct output: -81                 | Program output: 100                
Correct output: -40                 | Program output: -24                
Correct output: -50                 | Program output: -50                
Correct output: -95                 | Program output: -64                
Correct output: -66                 | Program output: 35                 
Correct output: -35                 | Program output: 57                 
Correct output: -94                 | Program output: -94                
Correct output: -59                 | Program output: -59                
Correct output: -27                 | Program output: 61                 
Correct output: -95                 | Program output: 72                 
Correct output: -72                 | Program output: 84                 
Correct output: -62                 | Program output: 57                 
Correct output: -70                 | Program output: -70                
Correct output: -77                 | Program output: 45                 
Correct output: -63                 | Program output: -58                
Correct output: -97                 | Program output: -97                
Correct output: -62                 | Program output: 99                 
Correct output: -29                 | Program output: -29                
Correct output: -16                 | Program output: 43                 
Correct output: -89                 | Program output: 64                 
Correct output: 7                   | Program output: 7                  
Correct output: -87                 | Program output: 51                 
Correct output: -89                 | Program output: -89                
Correct output: -68                 | Program output: 49                 
Correct output: -82                 | Program output: 34                 
Correct output: -88                 | Program output: 77                 
Correct output: -83                 | Program output: 50                 
Correct output: -38                 | Program output: -38                
Correct output: -69                 | Program output: -19                
Correct output: -56                 | Program output: 80                 
Correct output: -59                 | Program output: 73                 
Correct output: -85                 | Program output: -85                
Correct output: -57                 | Program output: -57                
Correct output: -78                 | Program output: -10                
Correct output: -75                 | Program output: -21                
Correct output: -32                 | Program output: 59                 
Correct output: -80                 | Program output: 25                 
Correct output: -81                 | Program output: -70                
Correct output: -87                 | Program output: -87                
Correct output: 27                  | Program output: 69                 
Correct output: -87                 | Program output: -87                
Correct output: -55                 | Program output: 36                 
Correct output: 18                  | Program output: 99                 
Correct output: 8                   | Program output: 8                  
Correct output: -84                 | Program output: -53                
Correct output: -100                | Program output: 100                
Correct output: -71                 | Program output: -71                
Correct output: -59                 | Program output: 54                 
Correct output: -82                 | Program output: 74                 
Correct output: -18                 | Program output: 40                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_s} {:close 1, :instruction print_boolean} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction in2} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in4} {:close 0, :instruction exec_k} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_while} {:close 1, :instruction integer_eq} {:close 1, :instruction in4} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 3, :instruction boolean_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_flush})
Lexicase best program: (exec_s (print_boolean) (integer_dec) (integer_fromboolean in2) boolean_or boolean_yankdup integer_yankdup in4 exec_k (in1 boolean_shove in3 boolean_invert_second_then_and) (exec_while (integer_eq) in4) exec_dup (exec_eq boolean_dup) print_integer exec_k (boolean_and) () boolean_dup boolean_yankdup boolean_yankdup integer_flush exec_s_when_autoconstructing () (exec_empty exec_flush) ())
Lexicase best errors: [1 1 0 1 1 0 1 0 1 1]
Lexicase best number of elite cases: 3
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 43
Percent parens: 0.302
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_s} {:close 1, :instruction print_boolean} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction in2} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in4} {:close 0, :instruction exec_k} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_while} {:close 1, :instruction integer_eq} {:close 1, :instruction in4} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 3, :instruction boolean_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_flush})
Zero cases best program: (exec_s (print_boolean) (integer_dec) (integer_fromboolean in2) boolean_or boolean_yankdup integer_yankdup in4 exec_k (in1 boolean_shove in3 boolean_invert_second_then_and) (exec_while (integer_eq) in4) exec_dup (exec_eq boolean_dup) print_integer exec_k (boolean_and) () boolean_dup boolean_yankdup boolean_yankdup integer_flush exec_s_when_autoconstructing () (exec_empty exec_flush) ())
Zero cases best errors: [1 1 0 1 1 0 1 0 1 1]
Zero cases best number of elite cases: 3
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 43
Percent parens: 0.302
--- Lexicase Population Statistics ---
Count of elite individuals by case: (238 88 354 89 205 354 204 354 238 238)
Population mean number of elite cases: 2.36
Count of perfect (error zero) individuals by case: (238 88 354 89 205 354 204 354 238 238)
Population mean number of perfect (error zero) cases: 2.36
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_when} {:close 0, :instruction integer_inc} {:close 1, :instruction in4} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 3, :instruction boolean_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_flush})
Best program: (exec_when (integer_inc in4) exec_dup (exec_eq boolean_dup) print_integer exec_k (boolean_and) () boolean_dup boolean_yankdup boolean_yankdup integer_flush exec_s_when_autoconstructing () (exec_empty exec_flush) ())
Errors: [0 1 1 1 1 1 1 1 0 0]
Total: 7
Mean: 0.7
Genome size: 16
Size: 24
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 7.638
Median total errors in population: 7
Error averages by case: (0.762 0.912 0.646 0.911 0.795 0.646 0.796 0.646 0.762 0.762)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 33.996
Average program size in population (points): 47.373
Average percent parens in population: 0.287
Minimum age in population: 6.0
Maximum age in population: 10.78125
Average age in population: 9.01078125
Median age in population: 9.09375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 84
Genome diversity (% unique genomes):	 0.593
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 85
Syntactic diversity (% unique Push programs):	 0.57
Total error diversity:				 0.004
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.041
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 2208257
--- Timings ---
Current time: 1559314657817 milliseconds
Total Time:          19.3 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        13.6 seconds, 70.2%
Fitness Testing:      4.1 seconds, 21.3%
Report:               1.5 seconds,  8.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 661
Test mean error for best: 0.66100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -96                 | Program output: 77                 
Correct output: 38                  | Program output: 63                 
Correct output: -79                 | Program output: -79                
Correct output: -57                 | Program output: -57                
Correct output: -24                 | Program output: 7                  
Correct output: -27                 | Program output: 61                 
Correct output: -92                 | Program output: -92                
Correct output: -53                 | Program output: 68                 
Correct output: -92                 | Program output: -92                
Correct output: -33                 | Program output: -33                
Correct output: 1                   | Program output: 1                  
Correct output: -94                 | Program output: -94                
Correct output: -49                 | Program output: -49                
Correct output: 0                   | Program output: 0                  
Correct output: -23                 | Program output: -23                
Correct output: 12                  | Program output: 98                 
Correct output: 22                  | Program output: 22                 
Correct output: 15                  | Program output: 56                 
Correct output: 35                  | Program output: 97                 
Correct output: 25                  | Program output: 68                 
Correct output: 35                  | Program output: 59                 
Correct output: 5                   | Program output: 5                  
Correct output: 33                  | Program output: 33                 
Correct output: 25                  | Program output: 54                 
Correct output: 0                   | Program output: 45                 
Correct output: 19                  | Program output: 19                 
Correct output: 7                   | Program output: 94                 
Correct output: 1                   | Program output: 1                  
Correct output: 0                   | Program output: 0                  
Correct output: 18                  | Program output: 95                 
Correct output: 3                   | Program output: 7                  
Correct output: 19                  | Program output: 19                 
Correct output: 32                  | Program output: 77                 
Correct output: 23                  | Program output: 63                 
Correct output: 11                  | Program output: 97                 
Correct output: -91                 | Program output: -91                
Correct output: -74                 | Program output: -34                
Correct output: -4                  | Program output: 71                 
Correct output: -81                 | Program output: -81                
Correct output: -93                 | Program output: -93                
Correct output: -29                 | Program output: 62                 
Correct output: -21                 | Program output: 63                 
Correct output: -91                 | Program output: -8                 
Correct output: -25                 | Program output: 15                 
Correct output: -64                 | Program output: -38                
Correct output: -81                 | Program output: -81                
Correct output: -40                 | Program output: -40                
Correct output: -50                 | Program output: 17                 
Correct output: -95                 | Program output: -95                
Correct output: -66                 | Program output: -61                
Correct output: -35                 | Program output: -35                
Correct output: -94                 | Program output: -2                 
Correct output: -59                 | Program output: -49                
Correct output: -27                 | Program output: -27                
Correct output: -95                 | Program output: -21                
Correct output: -72                 | Program output: -72                
Correct output: -62                 | Program output: -62                
Correct output: -70                 | Program output: 44                 
Correct output: -77                 | Program output: -3                 
Correct output: -63                 | Program output: 94                 
Correct output: -97                 | Program output: 63                 
Correct output: -62                 | Program output: -32                
Correct output: -29                 | Program output: -11                
Correct output: -16                 | Program output: -11                
Correct output: -89                 | Program output: 69                 
Correct output: 7                   | Program output: 95                 
Correct output: -87                 | Program output: 36                 
Correct output: -89                 | Program output: 87                 
Correct output: -68                 | Program output: -68                
Correct output: -82                 | Program output: -82                
Correct output: -88                 | Program output: 57                 
Correct output: -83                 | Program output: -1                 
Correct output: -38                 | Program output: 64                 
Correct output: -69                 | Program output: -17                
Correct output: -56                 | Program output: -56                
Correct output: -59                 | Program output: -59                
Correct output: -85                 | Program output: 27                 
Correct output: -57                 | Program output: 79                 
Correct output: -78                 | Program output: -78                
Correct output: -75                 | Program output: -64                
Correct output: -32                 | Program output: -32                
Correct output: -80                 | Program output: 85                 
Correct output: -81                 | Program output: -81                
Correct output: -87                 | Program output: -72                
Correct output: 27                  | Program output: 56                 
Correct output: -87                 | Program output: 55                 
Correct output: -55                 | Program output: 64                 
Correct output: 18                  | Program output: 43                 
Correct output: 8                   | Program output: 13                 
Correct output: -84                 | Program output: -63                
Correct output: -100                | Program output: -100               
Correct output: -71                 | Program output: 73                 
Correct output: -59                 | Program output: -59                
Correct output: -82                 | Program output: -82                
Correct output: -18                 | Program output: 65                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_sub} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*count} {:close 2, :instruction integer_swap} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_max} {:close 0, :instruction print_exec} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_s} {:close 0, :instruction exec_y} {:close 1, :instruction integer_eq} {:close 2, :instruction exec_dup_items} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_flush} {:close 0, :instruction tag_exec_764} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_div} {:close 1, :instruction exec_y} {:close 1, :instruction in2} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_add} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_add} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_max})
Lexicase best program: (in1 integer_lte boolean_and print_integer integer_yankdup integer_sub boolean_stackdepth boolean_or exec_shove (exec_do*count (exec_eq) boolean_flush exec_do*count (integer_swap)) boolean_and integer_empty exec_flush exec_while () boolean_not integer_max print_exec (integer_swap exec_yank boolean_dup integer_dup_times exec_s () (exec_y (integer_eq) exec_dup_items) () boolean_rot integer_dup) boolean_xor exec_do*times () exec_do*while () integer_gt boolean_flush tag_exec_764 (boolean_dup_times exec_when (integer_div exec_y () in2) boolean_flush) boolean_empty exec_yankdup exec_dup (boolean_stackdepth exec_y_when_autoconstructing (boolean_swap boolean_dup_items exec_shove (exec_flush integer_add) boolean_yankdup) boolean_stackdepth integer_mult) integer_dup_times boolean_dup_items exec_shove (exec_flush integer_add) boolean_yankdup boolean_stackdepth integer_mult integer_dup_times exec_dup_items print_boolean exec_rot (integer_stackdepth integer_max) () ())
Lexicase best errors: [1 0 0 1 1 1 0 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 92
Percent parens: 0.239
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_sub} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*count} {:close 2, :instruction integer_swap} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_max} {:close 0, :instruction print_exec} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_s} {:close 0, :instruction exec_y} {:close 1, :instruction integer_eq} {:close 2, :instruction exec_dup_items} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_flush} {:close 0, :instruction tag_exec_764} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_div} {:close 1, :instruction exec_y} {:close 1, :instruction in2} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_add} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_add} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_max})
Zero cases best program: (in1 integer_lte boolean_and print_integer integer_yankdup integer_sub boolean_stackdepth boolean_or exec_shove (exec_do*count (exec_eq) boolean_flush exec_do*count (integer_swap)) boolean_and integer_empty exec_flush exec_while () boolean_not integer_max print_exec (integer_swap exec_yank boolean_dup integer_dup_times exec_s () (exec_y (integer_eq) exec_dup_items) () boolean_rot integer_dup) boolean_xor exec_do*times () exec_do*while () integer_gt boolean_flush tag_exec_764 (boolean_dup_times exec_when (integer_div exec_y () in2) boolean_flush) boolean_empty exec_yankdup exec_dup (boolean_stackdepth exec_y_when_autoconstructing (boolean_swap boolean_dup_items exec_shove (exec_flush integer_add) boolean_yankdup) boolean_stackdepth integer_mult) integer_dup_times boolean_dup_items exec_shove (exec_flush integer_add) boolean_yankdup boolean_stackdepth integer_mult integer_dup_times exec_dup_items print_boolean exec_rot (integer_stackdepth integer_max) () ())
Zero cases best errors: [1 0 0 1 1 1 0 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 92
Percent parens: 0.239
--- Lexicase Population Statistics ---
Count of elite individuals by case: (265 448 182 181 181 266 179 180 181 265)
Population mean number of elite cases: 2.33
Count of perfect (error zero) individuals by case: (265 448 182 181 181 266 179 180 181 265)
Population mean number of perfect (error zero) cases: 2.33
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*count} {:close 2, :instruction integer_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_flush} {:close 2, :instruction exec_while} {:close 0, :instruction integer_add} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_max} {:close 0, :instruction print_exec} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_s} {:close 0, :instruction exec_y} {:close 1, :instruction integer_eq} {:close 2, :instruction exec_dup_items} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_flush} {:close 0, :instruction tag_exec_764} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_div} {:close 1, :instruction exec_y} {:close 1, :instruction in2} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_stackdepth})
Best program: (in1 integer_lte boolean_and print_integer integer_yankdup integer_sub boolean_stackdepth boolean_or exec_shove (exec_do*count (exec_eq) boolean_flush exec_do*count (integer_swap)) boolean_and integer_empty exec_flush exec_while () integer_add integer_mod boolean_frominteger boolean_not integer_max print_exec (integer_swap exec_yank boolean_dup integer_dup_times exec_s () (exec_y (integer_eq) exec_dup_items) () integer_fromboolean exec_do*count (boolean_xor exec_do*times (exec_do*while (integer_gt boolean_flush tag_exec_764 (boolean_dup_times exec_when (integer_div exec_y () in2) boolean_flush boolean_flush exec_yankdup exec_dup (boolean_stackdepth)))))))
Errors: [1 0 0 1 1 1 0 0 0 1]
Total: 5
Mean: 0.5
Genome size: 50
Size: 67
Percent parens: 0.254
--- Population Statistics ---
Average total errors in population: 7.672
Median total errors in population: 8
Error averages by case: (0.735 0.552 0.818 0.819 0.819 0.734 0.821 0.82 0.819 0.735)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 33.949
Average program size in population (points): 46.856
Average percent parens in population: 0.280
Minimum age in population: 7.75
Maximum age in population: 12.46875
Average age in population: 10.473
Median age in population: 10.5625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 54
Genome diversity (% unique genomes):	 0.654
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 55
Syntactic diversity (% unique Push programs):	 0.628
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.044
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 2426013
--- Timings ---
Current time: 1559314660468 milliseconds
Total Time:          22.0 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        15.8 seconds, 71.8%
Fitness Testing:      4.4 seconds, 19.9%
Report:               1.7 seconds,  7.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 661
Test mean error for best: 0.66100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -96                 | Program output: 77                 
Correct output: 38                  | Program output: 63                 
Correct output: -79                 | Program output: -79                
Correct output: -57                 | Program output: -57                
Correct output: -24                 | Program output: 7                  
Correct output: -27                 | Program output: 61                 
Correct output: -92                 | Program output: -92                
Correct output: -53                 | Program output: 68                 
Correct output: -92                 | Program output: -92                
Correct output: -33                 | Program output: -33                
Correct output: 1                   | Program output: 1                  
Correct output: -94                 | Program output: -94                
Correct output: -49                 | Program output: -49                
Correct output: 0                   | Program output: 0                  
Correct output: -23                 | Program output: -23                
Correct output: 12                  | Program output: 98                 
Correct output: 22                  | Program output: 22                 
Correct output: 15                  | Program output: 56                 
Correct output: 35                  | Program output: 97                 
Correct output: 25                  | Program output: 68                 
Correct output: 35                  | Program output: 59                 
Correct output: 5                   | Program output: 5                  
Correct output: 33                  | Program output: 33                 
Correct output: 25                  | Program output: 54                 
Correct output: 0                   | Program output: 45                 
Correct output: 19                  | Program output: 19                 
Correct output: 7                   | Program output: 94                 
Correct output: 1                   | Program output: 1                  
Correct output: 0                   | Program output: 0                  
Correct output: 18                  | Program output: 95                 
Correct output: 3                   | Program output: 7                  
Correct output: 19                  | Program output: 19                 
Correct output: 32                  | Program output: 77                 
Correct output: 23                  | Program output: 63                 
Correct output: 11                  | Program output: 97                 
Correct output: -91                 | Program output: -91                
Correct output: -74                 | Program output: -34                
Correct output: -4                  | Program output: 71                 
Correct output: -81                 | Program output: -81                
Correct output: -93                 | Program output: -93                
Correct output: -29                 | Program output: 62                 
Correct output: -21                 | Program output: 63                 
Correct output: -91                 | Program output: -8                 
Correct output: -25                 | Program output: 15                 
Correct output: -64                 | Program output: -38                
Correct output: -81                 | Program output: -81                
Correct output: -40                 | Program output: -40                
Correct output: -50                 | Program output: 17                 
Correct output: -95                 | Program output: -95                
Correct output: -66                 | Program output: -61                
Correct output: -35                 | Program output: -35                
Correct output: -94                 | Program output: -2                 
Correct output: -59                 | Program output: -49                
Correct output: -27                 | Program output: -27                
Correct output: -95                 | Program output: -21                
Correct output: -72                 | Program output: -72                
Correct output: -62                 | Program output: -62                
Correct output: -70                 | Program output: 44                 
Correct output: -77                 | Program output: -3                 
Correct output: -63                 | Program output: 94                 
Correct output: -97                 | Program output: 63                 
Correct output: -62                 | Program output: -32                
Correct output: -29                 | Program output: -11                
Correct output: -16                 | Program output: -11                
Correct output: -89                 | Program output: 69                 
Correct output: 7                   | Program output: 95                 
Correct output: -87                 | Program output: 36                 
Correct output: -89                 | Program output: 87                 
Correct output: -68                 | Program output: -68                
Correct output: -82                 | Program output: -82                
Correct output: -88                 | Program output: 57                 
Correct output: -83                 | Program output: -1                 
Correct output: -38                 | Program output: 64                 
Correct output: -69                 | Program output: -17                
Correct output: -56                 | Program output: -56                
Correct output: -59                 | Program output: -59                
Correct output: -85                 | Program output: 27                 
Correct output: -57                 | Program output: 79                 
Correct output: -78                 | Program output: -78                
Correct output: -75                 | Program output: -64                
Correct output: -32                 | Program output: -32                
Correct output: -80                 | Program output: 85                 
Correct output: -81                 | Program output: -81                
Correct output: -87                 | Program output: -72                
Correct output: 27                  | Program output: 56                 
Correct output: -87                 | Program output: 55                 
Correct output: -55                 | Program output: 64                 
Correct output: 18                  | Program output: 43                 
Correct output: 8                   | Program output: 13                 
Correct output: -84                 | Program output: -63                
Correct output: -100                | Program output: -100               
Correct output: -71                 | Program output: 73                 
Correct output: -59                 | Program output: -59                
Correct output: -82                 | Program output: -82                
Correct output: -18                 | Program output: 65                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in4} {:close 0, :instruction exec_k} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_max} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_if} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_k} {:close 3, :instruction integer_fromboolean} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction -96} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_rot} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in3} {:close 0, :instruction exec_when} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_max})
Lexicase best program: (exec_dup_times () print_integer exec_stackdepth boolean_frominteger integer_dup_times exec_dup (boolean_swap boolean_or) boolean_yankdup integer_yankdup in4 exec_k (in1 print_integer exec_flush integer_max exec_yank integer_mod) (exec_if (exec_yankdup integer_max) (exec_dup (exec_yank integer_fromboolean boolean_or exec_s (boolean_dup exec_k (integer_fromboolean) ()) (boolean_yankdup integer_sub) (-96 boolean_pop integer_shove integer_rot) boolean_and) boolean_frominteger in3 exec_when (integer_pop exec_dup_items exec_shove (integer_pop integer_max)))))
Lexicase best errors: [1 1 1 1 1 1 0 0 0 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 59
Percent parens: 0.254
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in4} {:close 0, :instruction exec_k} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_max} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_if} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_k} {:close 3, :instruction integer_fromboolean} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction -96} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_rot} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in3} {:close 0, :instruction exec_when} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_max})
Zero cases best program: (exec_dup_times () print_integer exec_stackdepth boolean_frominteger integer_dup_times exec_dup (boolean_swap boolean_or) boolean_yankdup integer_yankdup in4 exec_k (in1 print_integer exec_flush integer_max exec_yank integer_mod) (exec_if (exec_yankdup integer_max) (exec_dup (exec_yank integer_fromboolean boolean_or exec_s (boolean_dup exec_k (integer_fromboolean) ()) (boolean_yankdup integer_sub) (-96 boolean_pop integer_shove integer_rot) boolean_and) boolean_frominteger in3 exec_when (integer_pop exec_dup_items exec_shove (integer_pop integer_max)))))
Zero cases best errors: [1 1 1 1 1 1 0 0 0 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 59
Percent parens: 0.254
--- Lexicase Population Statistics ---
Count of elite individuals by case: (310 13 13 183 183 13 402 909 402 402)
Population mean number of elite cases: 2.83
Count of perfect (error zero) individuals by case: (310 13 13 183 183 13 402 909 402 402)
Population mean number of perfect (error zero) cases: 2.83
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_mult} {:close 0, :instruction print_integer} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in4} {:close 0, :instruction exec_k} {:close 0, :instruction in1} {:close 0, :instruction print_integer})
Best program: (integer_mult print_integer exec_stackdepth boolean_frominteger integer_dup_times exec_dup (boolean_swap boolean_or) boolean_yankdup integer_yankdup in4 exec_k (in1 print_integer) ())
Errors: [1 1 1 1 1 1 0 0 0 0]
Total: 6
Mean: 0.6
Genome size: 14
Size: 18
Percent parens: 0.222
--- Population Statistics ---
Average total errors in population: 7.17
Median total errors in population: 7
Error averages by case: (0.69 0.987 0.987 0.817 0.817 0.987 0.598 0.091 0.598 0.598)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.478
Average program size in population (points): 51.912
Average percent parens in population: 0.259
Minimum age in population: 8.75
Maximum age in population: 14.3125
Average age in population: 11.958890625
Median age in population: 12.03125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 57
Genome diversity (% unique genomes):	 0.698
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 61
Syntactic diversity (% unique Push programs):	 0.673
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.03
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 2614596
--- Timings ---
Current time: 1559314663125 milliseconds
Total Time:          24.6 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        18.0 seconds, 73.2%
Fitness Testing:      4.6 seconds, 18.6%
Report:               1.9 seconds,  7.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 661
Test mean error for best: 0.66100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -96                 | Program output: 77                 
Correct output: 38                  | Program output: 63                 
Correct output: -79                 | Program output: -79                
Correct output: -57                 | Program output: -57                
Correct output: -24                 | Program output: 7                  
Correct output: -27                 | Program output: 61                 
Correct output: -92                 | Program output: -92                
Correct output: -53                 | Program output: 68                 
Correct output: -92                 | Program output: -92                
Correct output: -33                 | Program output: -33                
Correct output: 1                   | Program output: 1                  
Correct output: -94                 | Program output: -94                
Correct output: -49                 | Program output: -49                
Correct output: 0                   | Program output: 0                  
Correct output: -23                 | Program output: -23                
Correct output: 12                  | Program output: 98                 
Correct output: 22                  | Program output: 22                 
Correct output: 15                  | Program output: 56                 
Correct output: 35                  | Program output: 97                 
Correct output: 25                  | Program output: 68                 
Correct output: 35                  | Program output: 59                 
Correct output: 5                   | Program output: 5                  
Correct output: 33                  | Program output: 33                 
Correct output: 25                  | Program output: 54                 
Correct output: 0                   | Program output: 45                 
Correct output: 19                  | Program output: 19                 
Correct output: 7                   | Program output: 94                 
Correct output: 1                   | Program output: 1                  
Correct output: 0                   | Program output: 0                  
Correct output: 18                  | Program output: 95                 
Correct output: 3                   | Program output: 7                  
Correct output: 19                  | Program output: 19                 
Correct output: 32                  | Program output: 77                 
Correct output: 23                  | Program output: 63                 
Correct output: 11                  | Program output: 97                 
Correct output: -91                 | Program output: -91                
Correct output: -74                 | Program output: -34                
Correct output: -4                  | Program output: 71                 
Correct output: -81                 | Program output: -81                
Correct output: -93                 | Program output: -93                
Correct output: -29                 | Program output: 62                 
Correct output: -21                 | Program output: 63                 
Correct output: -91                 | Program output: -8                 
Correct output: -25                 | Program output: 15                 
Correct output: -64                 | Program output: -38                
Correct output: -81                 | Program output: -81                
Correct output: -40                 | Program output: -40                
Correct output: -50                 | Program output: 17                 
Correct output: -95                 | Program output: -95                
Correct output: -66                 | Program output: -61                
Correct output: -35                 | Program output: -35                
Correct output: -94                 | Program output: -2                 
Correct output: -59                 | Program output: -49                
Correct output: -27                 | Program output: -27                
Correct output: -95                 | Program output: -21                
Correct output: -72                 | Program output: -72                
Correct output: -62                 | Program output: -62                
Correct output: -70                 | Program output: 44                 
Correct output: -77                 | Program output: -3                 
Correct output: -63                 | Program output: 94                 
Correct output: -97                 | Program output: 63                 
Correct output: -62                 | Program output: -32                
Correct output: -29                 | Program output: -11                
Correct output: -16                 | Program output: -11                
Correct output: -89                 | Program output: 69                 
Correct output: 7                   | Program output: 95                 
Correct output: -87                 | Program output: 36                 
Correct output: -89                 | Program output: 87                 
Correct output: -68                 | Program output: -68                
Correct output: -82                 | Program output: -82                
Correct output: -88                 | Program output: 57                 
Correct output: -83                 | Program output: -1                 
Correct output: -38                 | Program output: 64                 
Correct output: -69                 | Program output: -17                
Correct output: -56                 | Program output: -56                
Correct output: -59                 | Program output: -59                
Correct output: -85                 | Program output: 27                 
Correct output: -57                 | Program output: 79                 
Correct output: -78                 | Program output: -78                
Correct output: -75                 | Program output: -64                
Correct output: -32                 | Program output: -32                
Correct output: -80                 | Program output: 85                 
Correct output: -81                 | Program output: -81                
Correct output: -87                 | Program output: -72                
Correct output: 27                  | Program output: 56                 
Correct output: -87                 | Program output: 55                 
Correct output: -55                 | Program output: 64                 
Correct output: 18                  | Program output: 43                 
Correct output: 8                   | Program output: 13                 
Correct output: -84                 | Program output: -63                
Correct output: -100                | Program output: -100               
Correct output: -71                 | Program output: 73                 
Correct output: -59                 | Program output: -59                
Correct output: -82                 | Program output: -82                
Correct output: -18                 | Program output: 65                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yank} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 3, :instruction boolean_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_flush})
Lexicase best program: (in1 integer_lte integer_lt print_integer integer_yankdup integer_yank boolean_stackdepth boolean_or exec_eq boolean_dup print_integer exec_k (boolean_and) () boolean_dup boolean_yankdup boolean_yankdup integer_flush exec_s_when_autoconstructing (exec_empty exec_flush) () ())
Lexicase best errors: [0 0 1 1 0 0 1 1 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 26
Percent parens: 0.231
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_yank} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 3, :instruction boolean_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_flush})
Zero cases best program: (in1 integer_lte integer_lt print_integer integer_yankdup integer_yank boolean_stackdepth boolean_or exec_eq boolean_dup print_integer exec_k (boolean_and) () boolean_dup boolean_yankdup boolean_yankdup integer_flush exec_s_when_autoconstructing (exec_empty exec_flush) () ())
Zero cases best errors: [0 0 1 1 0 0 1 1 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 26
Percent parens: 0.231
--- Lexicase Population Statistics ---
Count of elite individuals by case: (275 275 101 101 899 275 204 100 319 204)
Population mean number of elite cases: 2.75
Count of perfect (error zero) individuals by case: (275 275 101 101 899 275 204 100 319 204)
Population mean number of perfect (error zero) cases: 2.75
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in4} {:close 0, :instruction exec_k} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_max} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_if} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_max} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_k} {:close 3, :instruction integer_fromboolean} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction -96} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_dup_times} {:close 0, :instruction 52} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 0, :instruction in3} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction tagged_361} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_flush} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_y_when_autoconstructing})
Best program: (exec_swap () (print_integer exec_stackdepth boolean_frominteger integer_dup_times exec_dup (boolean_swap boolean_or) boolean_yankdup integer_yankdup in4 exec_k (in1 print_integer exec_flush integer_max exec_yank integer_mod) (exec_if (exec_yankdup integer_max) (exec_shove () exec_yank integer_fromboolean boolean_or exec_s (boolean_dup exec_k (integer_fromboolean) ()) (boolean_yankdup integer_sub) (-96 boolean_pop boolean_stackdepth integer_rot) exec_do*count (exec_noop exec_do*times () boolean_not boolean_dup_items exec_y_when_autoconstructing (integer_eq) exec_dup_times (52 exec_k_when_autoconstructing () (integer_flush in3 integer_eq integer_shove boolean_rot tagged_361 exec_eq boolean_not integer_flush integer_fromboolean)) integer_swap integer_sub integer_dup_times exec_s_when_autoconstructing (exec_stackdepth exec_y_when_autoconstructing ()) () ())))))
Errors: [0 0 1 1 0 0 1 1 1 1]
Total: 6
Mean: 0.6
Genome size: 61
Size: 85
Percent parens: 0.282
--- Population Statistics ---
Average total errors in population: 7.247
Median total errors in population: 7
Error averages by case: (0.725 0.725 0.899 0.899 0.101 0.725 0.796 0.9 0.681 0.796)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.446
Average program size in population (points): 51.505
Average percent parens in population: 0.254
Minimum age in population: 9.96875
Maximum age in population: 15.5
Average age in population: 13.6831328125
Median age in population: 13.728515625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 23
Genome diversity (% unique genomes):	 0.676
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 24
Syntactic diversity (% unique Push programs):	 0.665
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.033
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 2814136
--- Timings ---
Current time: 1559314665588 milliseconds
Total Time:          27.1 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        20.1 seconds, 74.1%
Fitness Testing:      4.8 seconds, 17.8%
Report:               2.1 seconds,  7.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 661
Test mean error for best: 0.66100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -96                 | Program output: 77                 
Correct output: 38                  | Program output: 63                 
Correct output: -79                 | Program output: -79                
Correct output: -57                 | Program output: -57                
Correct output: -24                 | Program output: 7                  
Correct output: -27                 | Program output: 61                 
Correct output: -92                 | Program output: -92                
Correct output: -53                 | Program output: 68                 
Correct output: -92                 | Program output: -92                
Correct output: -33                 | Program output: -33                
Correct output: 1                   | Program output: 1                  
Correct output: -94                 | Program output: -94                
Correct output: -49                 | Program output: -49                
Correct output: 0                   | Program output: 0                  
Correct output: -23                 | Program output: -23                
Correct output: 12                  | Program output: 98                 
Correct output: 22                  | Program output: 22                 
Correct output: 15                  | Program output: 56                 
Correct output: 35                  | Program output: 97                 
Correct output: 25                  | Program output: 68                 
Correct output: 35                  | Program output: 59                 
Correct output: 5                   | Program output: 5                  
Correct output: 33                  | Program output: 33                 
Correct output: 25                  | Program output: 54                 
Correct output: 0                   | Program output: 45                 
Correct output: 19                  | Program output: 19                 
Correct output: 7                   | Program output: 94                 
Correct output: 1                   | Program output: 1                  
Correct output: 0                   | Program output: 0                  
Correct output: 18                  | Program output: 95                 
Correct output: 3                   | Program output: 7                  
Correct output: 19                  | Program output: 19                 
Correct output: 32                  | Program output: 77                 
Correct output: 23                  | Program output: 63                 
Correct output: 11                  | Program output: 97                 
Correct output: -91                 | Program output: -91                
Correct output: -74                 | Program output: -34                
Correct output: -4                  | Program output: 71                 
Correct output: -81                 | Program output: -81                
Correct output: -93                 | Program output: -93                
Correct output: -29                 | Program output: 62                 
Correct output: -21                 | Program output: 63                 
Correct output: -91                 | Program output: -8                 
Correct output: -25                 | Program output: 15                 
Correct output: -64                 | Program output: -38                
Correct output: -81                 | Program output: -81                
Correct output: -40                 | Program output: -40                
Correct output: -50                 | Program output: 17                 
Correct output: -95                 | Program output: -95                
Correct output: -66                 | Program output: -61                
Correct output: -35                 | Program output: -35                
Correct output: -94                 | Program output: -2                 
Correct output: -59                 | Program output: -49                
Correct output: -27                 | Program output: -27                
Correct output: -95                 | Program output: -21                
Correct output: -72                 | Program output: -72                
Correct output: -62                 | Program output: -62                
Correct output: -70                 | Program output: 44                 
Correct output: -77                 | Program output: -3                 
Correct output: -63                 | Program output: 94                 
Correct output: -97                 | Program output: 63                 
Correct output: -62                 | Program output: -32                
Correct output: -29                 | Program output: -11                
Correct output: -16                 | Program output: -11                
Correct output: -89                 | Program output: 69                 
Correct output: 7                   | Program output: 95                 
Correct output: -87                 | Program output: 36                 
Correct output: -89                 | Program output: 87                 
Correct output: -68                 | Program output: -68                
Correct output: -82                 | Program output: -82                
Correct output: -88                 | Program output: 57                 
Correct output: -83                 | Program output: -1                 
Correct output: -38                 | Program output: 64                 
Correct output: -69                 | Program output: -17                
Correct output: -56                 | Program output: -56                
Correct output: -59                 | Program output: -59                
Correct output: -85                 | Program output: 27                 
Correct output: -57                 | Program output: 79                 
Correct output: -78                 | Program output: -78                
Correct output: -75                 | Program output: -64                
Correct output: -32                 | Program output: -32                
Correct output: -80                 | Program output: 85                 
Correct output: -81                 | Program output: -81                
Correct output: -87                 | Program output: -72                
Correct output: 27                  | Program output: 56                 
Correct output: -87                 | Program output: 55                 
Correct output: -55                 | Program output: 64                 
Correct output: 18                  | Program output: 43                 
Correct output: 8                   | Program output: 13                 
Correct output: -84                 | Program output: -63                
Correct output: -100                | Program output: -100               
Correct output: -71                 | Program output: 73                 
Correct output: -59                 | Program output: -59                
Correct output: -82                 | Program output: -82                
Correct output: -18                 | Program output: 65                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_mult} {:close 0, :instruction print_integer} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_swap} {:close 1, :instruction in4} {:close 0, :instruction exec_k} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_max} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_if} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_max} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_k} {:close 3, :instruction integer_fromboolean} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction -96} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_stackdepth})
Lexicase best program: (integer_mult print_integer exec_stackdepth boolean_frominteger integer_dup_times exec_dup (boolean_swap boolean_or) boolean_yankdup integer_swap in4 exec_k (in1 print_integer exec_flush integer_max exec_yank integer_mod) (exec_if (exec_yankdup integer_max) (exec_shove (exec_yank integer_fromboolean boolean_or exec_s (boolean_dup exec_k (integer_fromboolean) ()) (boolean_yankdup integer_sub) (-96 boolean_pop boolean_stackdepth)))))
Lexicase best errors: [0 1 1 0 1 1 0 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 46
Percent parens: 0.261
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_mult} {:close 0, :instruction print_integer} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_swap} {:close 1, :instruction in4} {:close 0, :instruction exec_k} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_max} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_if} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_max} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_k} {:close 3, :instruction integer_fromboolean} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction -96} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_stackdepth})
Zero cases best program: (integer_mult print_integer exec_stackdepth boolean_frominteger integer_dup_times exec_dup (boolean_swap boolean_or) boolean_yankdup integer_swap in4 exec_k (in1 print_integer exec_flush integer_max exec_yank integer_mod) (exec_if (exec_yankdup integer_max) (exec_shove (exec_yank integer_fromboolean boolean_or exec_s (boolean_dup exec_k (integer_fromboolean) ()) (boolean_yankdup integer_sub) (-96 boolean_pop boolean_stackdepth)))))
Zero cases best errors: [0 1 1 0 1 1 0 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 46
Percent parens: 0.261
--- Lexicase Population Statistics ---
Count of elite individuals by case: (318 299 201 317 300 299 318 318 317 96)
Population mean number of elite cases: 2.78
Count of perfect (error zero) individuals by case: (318 299 201 317 300 299 318 318 317 96)
Population mean number of perfect (error zero) cases: 2.78
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in4} {:close 0, :instruction exec_k} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_max} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_if} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_max} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_k} {:close 3, :instruction integer_fromboolean} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction -96} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_dup_times} {:close 0, :instruction 52} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 0, :instruction in3} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction tagged_361} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_flush} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_y_when_autoconstructing})
Best program: (exec_swap () (print_integer exec_stackdepth boolean_frominteger integer_dup_times exec_dup (boolean_swap boolean_or) boolean_yankdup integer_yankdup in4 exec_k (in1 print_integer exec_flush integer_max exec_yank integer_mod) (exec_if (exec_yankdup integer_max) (exec_shove () exec_yank integer_fromboolean boolean_or exec_s (boolean_dup exec_k (integer_fromboolean) ()) (boolean_yankdup integer_sub) (-96 boolean_pop boolean_stackdepth integer_rot) exec_do*count (exec_noop exec_do*times () boolean_not boolean_dup_items exec_y_when_autoconstructing (integer_eq) exec_dup_times (52 exec_k_when_autoconstructing () (integer_flush in3 integer_eq integer_shove boolean_rot tagged_361 exec_eq boolean_not integer_flush integer_fromboolean)) integer_swap integer_sub integer_dup_times exec_s_when_autoconstructing (exec_stackdepth exec_y_when_autoconstructing ()) () ())))))
Errors: [0 1 1 0 1 1 0 0 0 1]
Total: 5
Mean: 0.5
Genome size: 61
Size: 85
Percent parens: 0.282
--- Population Statistics ---
Average total errors in population: 7.217
Median total errors in population: 7
Error averages by case: (0.682 0.701 0.799 0.683 0.7 0.701 0.682 0.682 0.683 0.904)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.849
Average program size in population (points): 49.91
Average percent parens in population: 0.263
Minimum age in population: 12.2265625
Maximum age in population: 16.96484375
Average age in population: 15.12268359375
Median age in population: 15.21484375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 38
Genome diversity (% unique genomes):	 0.702
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 41
Syntactic diversity (% unique Push programs):	 0.679
Total error diversity:				 0.004
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.028
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 3009874
--- Timings ---
Current time: 1559314668270 milliseconds
Total Time:          29.8 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        22.4 seconds, 75.1%
Fitness Testing:      5.0 seconds, 16.9%
Report:               2.3 seconds,  7.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 661
Test mean error for best: 0.66100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -96                 | Program output: 77                 
Correct output: 38                  | Program output: 63                 
Correct output: -79                 | Program output: -79                
Correct output: -57                 | Program output: -57                
Correct output: -24                 | Program output: 7                  
Correct output: -27                 | Program output: 61                 
Correct output: -92                 | Program output: -92                
Correct output: -53                 | Program output: 68                 
Correct output: -92                 | Program output: -92                
Correct output: -33                 | Program output: -33                
Correct output: 1                   | Program output: 1                  
Correct output: -94                 | Program output: -94                
Correct output: -49                 | Program output: -49                
Correct output: 0                   | Program output: 0                  
Correct output: -23                 | Program output: -23                
Correct output: 12                  | Program output: 98                 
Correct output: 22                  | Program output: 22                 
Correct output: 15                  | Program output: 56                 
Correct output: 35                  | Program output: 97                 
Correct output: 25                  | Program output: 68                 
Correct output: 35                  | Program output: 59                 
Correct output: 5                   | Program output: 5                  
Correct output: 33                  | Program output: 33                 
Correct output: 25                  | Program output: 54                 
Correct output: 0                   | Program output: 45                 
Correct output: 19                  | Program output: 19                 
Correct output: 7                   | Program output: 94                 
Correct output: 1                   | Program output: 1                  
Correct output: 0                   | Program output: 0                  
Correct output: 18                  | Program output: 95                 
Correct output: 3                   | Program output: 7                  
Correct output: 19                  | Program output: 19                 
Correct output: 32                  | Program output: 77                 
Correct output: 23                  | Program output: 63                 
Correct output: 11                  | Program output: 97                 
Correct output: -91                 | Program output: -91                
Correct output: -74                 | Program output: -34                
Correct output: -4                  | Program output: 71                 
Correct output: -81                 | Program output: -81                
Correct output: -93                 | Program output: -93                
Correct output: -29                 | Program output: 62                 
Correct output: -21                 | Program output: 63                 
Correct output: -91                 | Program output: -8                 
Correct output: -25                 | Program output: 15                 
Correct output: -64                 | Program output: -38                
Correct output: -81                 | Program output: -81                
Correct output: -40                 | Program output: -40                
Correct output: -50                 | Program output: 17                 
Correct output: -95                 | Program output: -95                
Correct output: -66                 | Program output: -61                
Correct output: -35                 | Program output: -35                
Correct output: -94                 | Program output: -2                 
Correct output: -59                 | Program output: -49                
Correct output: -27                 | Program output: -27                
Correct output: -95                 | Program output: -21                
Correct output: -72                 | Program output: -72                
Correct output: -62                 | Program output: -62                
Correct output: -70                 | Program output: 44                 
Correct output: -77                 | Program output: -3                 
Correct output: -63                 | Program output: 94                 
Correct output: -97                 | Program output: 63                 
Correct output: -62                 | Program output: -32                
Correct output: -29                 | Program output: -11                
Correct output: -16                 | Program output: -11                
Correct output: -89                 | Program output: 69                 
Correct output: 7                   | Program output: 95                 
Correct output: -87                 | Program output: 36                 
Correct output: -89                 | Program output: 87                 
Correct output: -68                 | Program output: -68                
Correct output: -82                 | Program output: -82                
Correct output: -88                 | Program output: 57                 
Correct output: -83                 | Program output: -1                 
Correct output: -38                 | Program output: 64                 
Correct output: -69                 | Program output: -17                
Correct output: -56                 | Program output: -56                
Correct output: -59                 | Program output: -59                
Correct output: -85                 | Program output: 27                 
Correct output: -57                 | Program output: 79                 
Correct output: -78                 | Program output: -78                
Correct output: -75                 | Program output: -64                
Correct output: -32                 | Program output: -32                
Correct output: -80                 | Program output: 85                 
Correct output: -81                 | Program output: -81                
Correct output: -87                 | Program output: -72                
Correct output: 27                  | Program output: 56                 
Correct output: -87                 | Program output: 55                 
Correct output: -55                 | Program output: 64                 
Correct output: 18                  | Program output: 43                 
Correct output: 8                   | Program output: 13                 
Correct output: -84                 | Program output: -63                
Correct output: -100                | Program output: -100               
Correct output: -71                 | Program output: 73                 
Correct output: -59                 | Program output: -59                
Correct output: -82                 | Program output: -82                
Correct output: -18                 | Program output: 65                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_shove} {:close 1, :instruction print_boolean} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in4} {:close 0, :instruction exec_k} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_max} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_max} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_k} {:close 3, :instruction integer_fromboolean} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction -96} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_dup_times} {:close 0, :instruction 52} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 0, :instruction in3} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction tagged_361} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_flush} {:close 2, :instruction integer_fromboolean} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_gt})
Lexicase best program: (integer_shove print_boolean integer_dec integer_fromboolean in2 exec_if (boolean_yankdup boolean_and boolean_yankdup integer_yankdup in4 exec_k (in1 print_integer exec_flush integer_max exec_yank exec_dup_times () exec_if (exec_yankdup integer_max) (exec_shove () exec_yank integer_fromboolean boolean_or exec_s (boolean_dup exec_k (integer_fromboolean) ()) (boolean_yankdup integer_sub) (-96 boolean_pop boolean_stackdepth integer_rot) exec_do*count (exec_noop exec_do*times () boolean_not boolean_dup_items exec_y_when_autoconstructing (integer_eq) exec_dup_times (52 exec_k_when_autoconstructing () (integer_flush in3 integer_eq integer_shove) boolean_rot tagged_361 exec_eq boolean_not integer_flush integer_fromboolean)) integer_swap) integer_sub integer_dup_times exec_s_when_autoconstructing (exec_stackdepth integer_gt) () ()) ()) ())
Lexicase best errors: [1 0 1 1 0 0 0 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 84
Percent parens: 0.274
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_shove} {:close 1, :instruction print_boolean} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in4} {:close 0, :instruction exec_k} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_max} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_max} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_k} {:close 3, :instruction integer_fromboolean} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction -96} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_dup_times} {:close 0, :instruction 52} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 0, :instruction in3} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction tagged_361} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_flush} {:close 2, :instruction integer_fromboolean} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_gt})
Zero cases best program: (integer_shove print_boolean integer_dec integer_fromboolean in2 exec_if (boolean_yankdup boolean_and boolean_yankdup integer_yankdup in4 exec_k (in1 print_integer exec_flush integer_max exec_yank exec_dup_times () exec_if (exec_yankdup integer_max) (exec_shove () exec_yank integer_fromboolean boolean_or exec_s (boolean_dup exec_k (integer_fromboolean) ()) (boolean_yankdup integer_sub) (-96 boolean_pop boolean_stackdepth integer_rot) exec_do*count (exec_noop exec_do*times () boolean_not boolean_dup_items exec_y_when_autoconstructing (integer_eq) exec_dup_times (52 exec_k_when_autoconstructing () (integer_flush in3 integer_eq integer_shove) boolean_rot tagged_361 exec_eq boolean_not integer_flush integer_fromboolean)) integer_swap) integer_sub integer_dup_times exec_s_when_autoconstructing (exec_stackdepth integer_gt) () ()) ()) ())
Zero cases best errors: [1 0 1 1 0 0 0 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 84
Percent parens: 0.274
--- Lexicase Population Statistics ---
Count of elite individuals by case: (80 467 438 80 467 467 467 467 826 96)
Population mean number of elite cases: 3.86
Count of perfect (error zero) individuals by case: (80 467 438 80 467 467 467 467 826 96)
Population mean number of perfect (error zero) cases: 3.86
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_sub} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*count} {:close 2, :instruction integer_swap} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_while} {:close 0, :instruction integer_add} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_max} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_s} {:close 0, :instruction exec_y} {:close 1, :instruction integer_eq} {:close 2, :instruction exec_dup_items} {:close 0, :instruction integer_inc})
Best program: (in1 integer_lte boolean_and print_integer integer_yankdup integer_sub boolean_stackdepth boolean_or exec_shove (exec_do*count (exec_eq) boolean_flush exec_do*count (integer_swap)) boolean_and integer_empty exec_flush exec_while () integer_add integer_stackdepth boolean_frominteger boolean_not integer_max integer_gt integer_swap exec_yank boolean_dup integer_dup_times exec_s () (exec_y (integer_eq) exec_dup_items) () integer_inc)
Errors: [1 0 1 1 0 0 0 0 0 1]
Total: 4
Mean: 0.4
Genome size: 33
Size: 42
Percent parens: 0.214
--- Population Statistics ---
Average total errors in population: 6.145
Median total errors in population: 7
Error averages by case: (0.92 0.533 0.562 0.92 0.533 0.533 0.533 0.533 0.174 0.904)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.146
Average program size in population (points): 48.739
Average percent parens in population: 0.257
Minimum age in population: 13.9140625
Maximum age in population: 18.6767578125
Average age in population: 16.608173828125
Median age in population: 16.66455078125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 30
Genome diversity (% unique genomes):	 0.737
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 39
Syntactic diversity (% unique Push programs):	 0.719
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.03
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 3198020
--- Timings ---
Current time: 1559314671036 milliseconds
Total Time:          32.5 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        24.7 seconds, 76.0%
Fitness Testing:      5.2 seconds, 16.1%
Report:               2.5 seconds,  7.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 661
Test mean error for best: 0.66100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -96                 | Program output: 77                 
Correct output: 38                  | Program output: 63                 
Correct output: -79                 | Program output: -79                
Correct output: -57                 | Program output: -57                
Correct output: -24                 | Program output: 7                  
Correct output: -27                 | Program output: 61                 
Correct output: -92                 | Program output: -92                
Correct output: -53                 | Program output: 68                 
Correct output: -92                 | Program output: -92                
Correct output: -33                 | Program output: -33                
Correct output: 1                   | Program output: 1                  
Correct output: -94                 | Program output: -94                
Correct output: -49                 | Program output: -49                
Correct output: 0                   | Program output: 0                  
Correct output: -23                 | Program output: -23                
Correct output: 12                  | Program output: 98                 
Correct output: 22                  | Program output: 22                 
Correct output: 15                  | Program output: 56                 
Correct output: 35                  | Program output: 97                 
Correct output: 25                  | Program output: 68                 
Correct output: 35                  | Program output: 59                 
Correct output: 5                   | Program output: 5                  
Correct output: 33                  | Program output: 33                 
Correct output: 25                  | Program output: 54                 
Correct output: 0                   | Program output: 45                 
Correct output: 19                  | Program output: 19                 
Correct output: 7                   | Program output: 94                 
Correct output: 1                   | Program output: 1                  
Correct output: 0                   | Program output: 0                  
Correct output: 18                  | Program output: 95                 
Correct output: 3                   | Program output: 7                  
Correct output: 19                  | Program output: 19                 
Correct output: 32                  | Program output: 77                 
Correct output: 23                  | Program output: 63                 
Correct output: 11                  | Program output: 97                 
Correct output: -91                 | Program output: -91                
Correct output: -74                 | Program output: -34                
Correct output: -4                  | Program output: 71                 
Correct output: -81                 | Program output: -81                
Correct output: -93                 | Program output: -93                
Correct output: -29                 | Program output: 62                 
Correct output: -21                 | Program output: 63                 
Correct output: -91                 | Program output: -8                 
Correct output: -25                 | Program output: 15                 
Correct output: -64                 | Program output: -38                
Correct output: -81                 | Program output: -81                
Correct output: -40                 | Program output: -40                
Correct output: -50                 | Program output: 17                 
Correct output: -95                 | Program output: -95                
Correct output: -66                 | Program output: -61                
Correct output: -35                 | Program output: -35                
Correct output: -94                 | Program output: -2                 
Correct output: -59                 | Program output: -49                
Correct output: -27                 | Program output: -27                
Correct output: -95                 | Program output: -21                
Correct output: -72                 | Program output: -72                
Correct output: -62                 | Program output: -62                
Correct output: -70                 | Program output: 44                 
Correct output: -77                 | Program output: -3                 
Correct output: -63                 | Program output: 94                 
Correct output: -97                 | Program output: 63                 
Correct output: -62                 | Program output: -32                
Correct output: -29                 | Program output: -11                
Correct output: -16                 | Program output: -11                
Correct output: -89                 | Program output: 69                 
Correct output: 7                   | Program output: 95                 
Correct output: -87                 | Program output: 36                 
Correct output: -89                 | Program output: 87                 
Correct output: -68                 | Program output: -68                
Correct output: -82                 | Program output: -82                
Correct output: -88                 | Program output: 57                 
Correct output: -83                 | Program output: -1                 
Correct output: -38                 | Program output: 64                 
Correct output: -69                 | Program output: -17                
Correct output: -56                 | Program output: -56                
Correct output: -59                 | Program output: -59                
Correct output: -85                 | Program output: 27                 
Correct output: -57                 | Program output: 79                 
Correct output: -78                 | Program output: -78                
Correct output: -75                 | Program output: -64                
Correct output: -32                 | Program output: -32                
Correct output: -80                 | Program output: 85                 
Correct output: -81                 | Program output: -81                
Correct output: -87                 | Program output: -72                
Correct output: 27                  | Program output: 56                 
Correct output: -87                 | Program output: 55                 
Correct output: -55                 | Program output: 64                 
Correct output: 18                  | Program output: 43                 
Correct output: 8                   | Program output: 13                 
Correct output: -84                 | Program output: -63                
Correct output: -100                | Program output: -100               
Correct output: -71                 | Program output: 73                 
Correct output: -59                 | Program output: -59                
Correct output: -82                 | Program output: -82                
Correct output: -18                 | Program output: 65                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_sub} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*count} {:close 2, :instruction integer_swap} {:close 2, :instruction boolean_and} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_while} {:close 0, :instruction integer_add} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_max} {:close 0, :instruction print_exec} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_s} {:close 0, :instruction exec_y} {:close 1, :instruction integer_eq} {:close 2, :instruction boolean_dup_items} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_flush} {:close 0, :instruction tag_exec_764} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_pop})
Lexicase best program: (in1 integer_lte boolean_and print_integer integer_yankdup integer_sub boolean_stackdepth boolean_or exec_shove () exec_do*count (exec_eq) boolean_flush exec_do*count (integer_swap) boolean_and integer_empty exec_flush exec_while () integer_add integer_stackdepth boolean_frominteger boolean_not integer_max print_exec (integer_swap exec_yank boolean_dup integer_dup_times exec_s () (exec_y (integer_eq) boolean_dup_items) () integer_fromboolean integer_empty boolean_xor exec_do*times () exec_do*while (integer_gt boolean_flush tag_exec_764 (boolean_dup_times exec_pop ()))))
Lexicase best errors: [1 0 0 1 1 0 0 1 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 56
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_sub} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*count} {:close 2, :instruction integer_swap} {:close 2, :instruction boolean_and} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_while} {:close 0, :instruction integer_add} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_max} {:close 0, :instruction print_exec} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_s} {:close 0, :instruction exec_y} {:close 1, :instruction integer_eq} {:close 2, :instruction boolean_dup_items} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_flush} {:close 0, :instruction tag_exec_764} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_pop})
Zero cases best program: (in1 integer_lte boolean_and print_integer integer_yankdup integer_sub boolean_stackdepth boolean_or exec_shove () exec_do*count (exec_eq) boolean_flush exec_do*count (integer_swap) boolean_and integer_empty exec_flush exec_while () integer_add integer_stackdepth boolean_frominteger boolean_not integer_max print_exec (integer_swap exec_yank boolean_dup integer_dup_times exec_s () (exec_y (integer_eq) boolean_dup_items) () integer_fromboolean integer_empty boolean_xor exec_do*times () exec_do*while (integer_gt boolean_flush tag_exec_764 (boolean_dup_times exec_pop ()))))
Zero cases best errors: [1 0 0 1 1 0 0 1 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 56
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (171 541 541 3 199 915 541 171 3 171)
Population mean number of elite cases: 3.26
Count of perfect (error zero) individuals by case: (171 541 541 3 199 915 541 171 3 171)
Population mean number of perfect (error zero) cases: 3.26
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_sub} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 2, :instruction integer_swap} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_while} {:close 0, :instruction integer_add} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_max} {:close 0, :instruction print_exec} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup_times})
Best program: (in1 integer_lte boolean_and print_integer integer_yankdup integer_sub boolean_stackdepth boolean_or exec_do*count (integer_swap) boolean_and integer_empty exec_flush exec_while () integer_add integer_stackdepth boolean_frominteger boolean_not integer_max print_exec (integer_swap exec_yank boolean_dup integer_dup_times))
Errors: [1 0 0 1 1 0 0 1 1 1]
Total: 6
Mean: 0.6
Genome size: 24
Size: 28
Percent parens: 0.143
--- Population Statistics ---
Average total errors in population: 6.744
Median total errors in population: 6
Error averages by case: (0.829 0.459 0.459 0.997 0.801 0.085 0.459 0.829 0.997 0.829)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.601
Average program size in population (points): 48.824
Average percent parens in population: 0.248
Minimum age in population: 15.51171875
Maximum age in population: 20.12939453125
Average age in population: 18.1218076171875
Median age in population: 18.165771484375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 16
Genome diversity (% unique genomes):	 0.734
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 17
Syntactic diversity (% unique Push programs):	 0.718
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.03
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 3382664
--- Timings ---
Current time: 1559314673516 milliseconds
Total Time:          35.0 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        26.8 seconds, 76.6%
Fitness Testing:      5.5 seconds, 15.6%
Report:               2.7 seconds,  7.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 661
Test mean error for best: 0.66100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -96                 | Program output: 77                 
Correct output: 38                  | Program output: 63                 
Correct output: -79                 | Program output: -79                
Correct output: -57                 | Program output: -57                
Correct output: -24                 | Program output: 7                  
Correct output: -27                 | Program output: 61                 
Correct output: -92                 | Program output: -92                
Correct output: -53                 | Program output: 68                 
Correct output: -92                 | Program output: -92                
Correct output: -33                 | Program output: -33                
Correct output: 1                   | Program output: 1                  
Correct output: -94                 | Program output: -94                
Correct output: -49                 | Program output: -49                
Correct output: 0                   | Program output: 0                  
Correct output: -23                 | Program output: -23                
Correct output: 12                  | Program output: 98                 
Correct output: 22                  | Program output: 22                 
Correct output: 15                  | Program output: 56                 
Correct output: 35                  | Program output: 97                 
Correct output: 25                  | Program output: 68                 
Correct output: 35                  | Program output: 59                 
Correct output: 5                   | Program output: 5                  
Correct output: 33                  | Program output: 33                 
Correct output: 25                  | Program output: 54                 
Correct output: 0                   | Program output: 45                 
Correct output: 19                  | Program output: 19                 
Correct output: 7                   | Program output: 94                 
Correct output: 1                   | Program output: 1                  
Correct output: 0                   | Program output: 0                  
Correct output: 18                  | Program output: 95                 
Correct output: 3                   | Program output: 7                  
Correct output: 19                  | Program output: 19                 
Correct output: 32                  | Program output: 77                 
Correct output: 23                  | Program output: 63                 
Correct output: 11                  | Program output: 97                 
Correct output: -91                 | Program output: -91                
Correct output: -74                 | Program output: -34                
Correct output: -4                  | Program output: 71                 
Correct output: -81                 | Program output: -81                
Correct output: -93                 | Program output: -93                
Correct output: -29                 | Program output: 62                 
Correct output: -21                 | Program output: 63                 
Correct output: -91                 | Program output: -8                 
Correct output: -25                 | Program output: 15                 
Correct output: -64                 | Program output: -38                
Correct output: -81                 | Program output: -81                
Correct output: -40                 | Program output: -40                
Correct output: -50                 | Program output: 17                 
Correct output: -95                 | Program output: -95                
Correct output: -66                 | Program output: -61                
Correct output: -35                 | Program output: -35                
Correct output: -94                 | Program output: -2                 
Correct output: -59                 | Program output: -49                
Correct output: -27                 | Program output: -27                
Correct output: -95                 | Program output: -21                
Correct output: -72                 | Program output: -72                
Correct output: -62                 | Program output: -62                
Correct output: -70                 | Program output: 44                 
Correct output: -77                 | Program output: -3                 
Correct output: -63                 | Program output: 94                 
Correct output: -97                 | Program output: 63                 
Correct output: -62                 | Program output: -32                
Correct output: -29                 | Program output: -11                
Correct output: -16                 | Program output: -11                
Correct output: -89                 | Program output: 69                 
Correct output: 7                   | Program output: 95                 
Correct output: -87                 | Program output: 36                 
Correct output: -89                 | Program output: 87                 
Correct output: -68                 | Program output: -68                
Correct output: -82                 | Program output: -82                
Correct output: -88                 | Program output: 57                 
Correct output: -83                 | Program output: -1                 
Correct output: -38                 | Program output: 64                 
Correct output: -69                 | Program output: -17                
Correct output: -56                 | Program output: -56                
Correct output: -59                 | Program output: -59                
Correct output: -85                 | Program output: 27                 
Correct output: -57                 | Program output: 79                 
Correct output: -78                 | Program output: -78                
Correct output: -75                 | Program output: -64                
Correct output: -32                 | Program output: -32                
Correct output: -80                 | Program output: 85                 
Correct output: -81                 | Program output: -81                
Correct output: -87                 | Program output: -72                
Correct output: 27                  | Program output: 56                 
Correct output: -87                 | Program output: 55                 
Correct output: -55                 | Program output: 64                 
Correct output: 18                  | Program output: 43                 
Correct output: 8                   | Program output: 13                 
Correct output: -84                 | Program output: -63                
Correct output: -100                | Program output: -100               
Correct output: -71                 | Program output: 73                 
Correct output: -59                 | Program output: -59                
Correct output: -82                 | Program output: -82                
Correct output: -18                 | Program output: 65                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction print_integer} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_yankdup} {:close 1, :instruction in4} {:close 0, :instruction exec_k} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_max} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_if} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_max} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_k} {:close 3, :instruction integer_fromboolean} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction integer_gte} {:close 0, :instruction -96} {:close 0, :instruction boolean_pop} {:close 0, :instruction -51} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_swap})
Lexicase best program: (integer_mult print_integer exec_stackdepth boolean_frominteger integer_dup_times exec_dup (boolean_swap boolean_or) boolean_yankdup integer_yankdup in4 exec_k (in1 print_integer exec_flush integer_max exec_yank integer_mod) (exec_if (exec_yankdup integer_max) (exec_shove (exec_yank integer_fromboolean boolean_or exec_s (boolean_dup exec_k (integer_fromboolean) ()) (boolean_yankdup) (integer_gte) -96 boolean_pop -51 exec_do*while () boolean_swap))))
Lexicase best errors: [0 1 0 1 1 0 1 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 49
Percent parens: 0.265
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction print_integer} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_yankdup} {:close 1, :instruction in4} {:close 0, :instruction exec_k} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_max} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_if} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_max} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_k} {:close 3, :instruction integer_fromboolean} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction integer_gte} {:close 0, :instruction -96} {:close 0, :instruction boolean_pop} {:close 0, :instruction -51} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_swap})
Zero cases best program: (integer_mult print_integer exec_stackdepth boolean_frominteger integer_dup_times exec_dup (boolean_swap boolean_or) boolean_yankdup integer_yankdup in4 exec_k (in1 print_integer exec_flush integer_max exec_yank integer_mod) (exec_if (exec_yankdup integer_max) (exec_shove (exec_yank integer_fromboolean boolean_or exec_s (boolean_dup exec_k (integer_fromboolean) ()) (boolean_yankdup) (integer_gte) -96 boolean_pop -51 exec_do*while () boolean_swap))))
Zero cases best errors: [0 1 0 1 1 0 1 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 49
Percent parens: 0.265
--- Lexicase Population Statistics ---
Count of elite individuals by case: (294 110 293 184 184 292 323 294 293 294)
Population mean number of elite cases: 2.56
Count of perfect (error zero) individuals by case: (294 110 293 184 184 292 323 294 293 294)
Population mean number of perfect (error zero) cases: 2.56
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_sub} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*count} {:close 2, :instruction integer_swap} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_while} {:close 0, :instruction integer_add} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_max} {:close 0, :instruction print_exec} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_k} {:close 3, :instruction integer_fromboolean} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction -96} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_swap} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction tag_exec_495} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_flush})
Best program: (in1 integer_lte boolean_and print_integer integer_yankdup integer_sub boolean_stackdepth boolean_or exec_shove (boolean_not exec_eq) boolean_flush exec_do*count (integer_swap) boolean_and integer_empty exec_flush exec_while () integer_add integer_stackdepth boolean_frominteger boolean_not integer_max print_exec (integer_swap exec_yank boolean_dup integer_dup_times integer_fromboolean boolean_or exec_s (boolean_dup exec_k (integer_fromboolean) ()) (boolean_yankdup integer_sub) (-96 integer_sub boolean_stackdepth integer_rot) exec_do*count (exec_noop exec_do*times () boolean_not boolean_dup_items exec_y_when_autoconstructing (integer_swap) in3 boolean_dup_items tag_exec_495 () exec_yankdup boolean_stackdepth integer_lte boolean_swap boolean_dup_items exec_shove (exec_flush))))
Errors: [0 1 0 1 1 0 1 0 0 0]
Total: 4
Mean: 0.4
Genome size: 57
Size: 72
Percent parens: 0.208
--- Population Statistics ---
Average total errors in population: 7.439
Median total errors in population: 9
Error averages by case: (0.706 0.89 0.707 0.816 0.816 0.708 0.677 0.706 0.707 0.706)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 34.64
Average program size in population (points): 45.467
Average percent parens in population: 0.235
Minimum age in population: 16.78125
Maximum age in population: 21.32080078125
Average age in population: 19.66327026367188
Median age in population: 19.76953125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 50
Genome diversity (% unique genomes):	 0.686
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 50
Syntactic diversity (% unique Push programs):	 0.675
Total error diversity:				 0.006
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.031
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 3555910
--- Timings ---
Current time: 1559314675830 milliseconds
Total Time:          37.3 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        28.7 seconds, 77.0%
Fitness Testing:      5.7 seconds, 15.1%
Report:               2.8 seconds,  7.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 658
Test mean error for best: 0.65800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -96                 | Program output: -96                
Correct output: 38                  | Program output: 63                 
Correct output: -79                 | Program output: -79                
Correct output: -57                 | Program output: 42                 
Correct output: -24                 | Program output: 7                  
Correct output: -27                 | Program output: -27                
Correct output: -92                 | Program output: -92                
Correct output: -53                 | Program output: 68                 
Correct output: -92                 | Program output: 77                 
Correct output: -33                 | Program output: 24                 
Correct output: 1                   | Program output: 1                  
Correct output: -94                 | Program output: -94                
Correct output: -49                 | Program output: -49                
Correct output: 0                   | Program output: 0                  
Correct output: -23                 | Program output: -23                
Correct output: 12                  | Program output: 23                 
Correct output: 22                  | Program output: 31                 
Correct output: 15                  | Program output: 91                 
Correct output: 35                  | Program output: 48                 
Correct output: 25                  | Program output: 25                 
Correct output: 35                  | Program output: 65                 
Correct output: 5                   | Program output: 88                 
Correct output: 33                  | Program output: 74                 
Correct output: 25                  | Program output: 86                 
Correct output: 0                   | Program output: 6                  
Correct output: 19                  | Program output: 46                 
Correct output: 7                   | Program output: 7                  
Correct output: 1                   | Program output: 45                 
Correct output: 0                   | Program output: 54                 
Correct output: 18                  | Program output: 81                 
Correct output: 3                   | Program output: 3                  
Correct output: 19                  | Program output: 27                 
Correct output: 32                  | Program output: 41                 
Correct output: 23                  | Program output: 100                
Correct output: 11                  | Program output: 11                 
Correct output: -91                 | Program output: 95                 
Correct output: -74                 | Program output: 25                 
Correct output: -4                  | Program output: -4                 
Correct output: -81                 | Program output: 56                 
Correct output: -93                 | Program output: 74                 
Correct output: -29                 | Program output: -29                
Correct output: -21                 | Program output: -2                 
Correct output: -91                 | Program output: -86                
Correct output: -25                 | Program output: -2                 
Correct output: -64                 | Program output: -22                
Correct output: -81                 | Program output: 100                
Correct output: -40                 | Program output: -24                
Correct output: -50                 | Program output: -50                
Correct output: -95                 | Program output: -64                
Correct output: -66                 | Program output: 35                 
Correct output: -35                 | Program output: 57                 
Correct output: -94                 | Program output: -94                
Correct output: -59                 | Program output: -59                
Correct output: -27                 | Program output: 61                 
Correct output: -95                 | Program output: 72                 
Correct output: -72                 | Program output: 84                 
Correct output: -62                 | Program output: 57                 
Correct output: -70                 | Program output: -70                
Correct output: -77                 | Program output: 45                 
Correct output: -63                 | Program output: -58                
Correct output: -97                 | Program output: -97                
Correct output: -62                 | Program output: 99                 
Correct output: -29                 | Program output: -29                
Correct output: -16                 | Program output: 43                 
Correct output: -89                 | Program output: 64                 
Correct output: 7                   | Program output: 7                  
Correct output: -87                 | Program output: 51                 
Correct output: -89                 | Program output: -89                
Correct output: -68                 | Program output: 49                 
Correct output: -82                 | Program output: 34                 
Correct output: -88                 | Program output: 77                 
Correct output: -83                 | Program output: 50                 
Correct output: -38                 | Program output: -38                
Correct output: -69                 | Program output: -19                
Correct output: -56                 | Program output: 80                 
Correct output: -59                 | Program output: 73                 
Correct output: -85                 | Program output: -85                
Correct output: -57                 | Program output: -57                
Correct output: -78                 | Program output: -10                
Correct output: -75                 | Program output: -21                
Correct output: -32                 | Program output: 59                 
Correct output: -80                 | Program output: 25                 
Correct output: -81                 | Program output: -70                
Correct output: -87                 | Program output: -87                
Correct output: 27                  | Program output: 69                 
Correct output: -87                 | Program output: -87                
Correct output: -55                 | Program output: 36                 
Correct output: 18                  | Program output: 99                 
Correct output: 8                   | Program output: 8                  
Correct output: -84                 | Program output: -53                
Correct output: -100                | Program output: 100                
Correct output: -71                 | Program output: -71                
Correct output: -59                 | Program output: 54                 
Correct output: -82                 | Program output: 74                 
Correct output: -18                 | Program output: 40                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_max} {:close 0, :instruction in3} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_while} {:close 1, :instruction integer_eq} {:close 1, :instruction in4} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush})
Lexicase best program: (integer_yankdup integer_swap integer_inc boolean_shove in3 boolean_invert_second_then_and exec_while (exec_flush integer_max in3 boolean_invert_second_then_and) exec_while (integer_eq) in4 exec_dup (exec_eq boolean_dup) print_integer exec_flush)
Lexicase best errors: [0 1 0 0 0 0 1 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 23
Percent parens: 0.174
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_max} {:close 0, :instruction in3} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_while} {:close 1, :instruction integer_eq} {:close 1, :instruction in4} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush})
Zero cases best program: (integer_yankdup integer_swap integer_inc boolean_shove in3 boolean_invert_second_then_and exec_while (exec_flush integer_max in3 boolean_invert_second_then_and) exec_while (integer_eq) in4 exec_dup (exec_eq boolean_dup) print_integer exec_flush)
Zero cases best errors: [0 1 0 0 0 0 1 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 23
Percent parens: 0.174
--- Lexicase Population Statistics ---
Count of elite individuals by case: (92 87 92 92 92 906 87 92 87 905)
Population mean number of elite cases: 2.53
Count of perfect (error zero) individuals by case: (92 87 92 92 92 906 87 92 87 905)
Population mean number of perfect (error zero) cases: 2.53
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in4} {:close 0, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction integer_gte} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_div} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_while})
Best program: (exec_dup_times () print_integer exec_stackdepth boolean_frominteger integer_dup_times exec_dup (boolean_swap boolean_or) boolean_yankdup integer_yankdup in4 exec_k (exec_eq boolean_dup) (boolean_invert_second_then_and boolean_yankdup) integer_gte print_integer integer_mod integer_mod exec_noop integer_div integer_stackdepth exec_flush integer_flush exec_while ())
Errors: [0 1 0 0 0 0 1 0 1 0]
Total: 3
Mean: 0.3
Genome size: 26
Size: 32
Percent parens: 0.188
--- Population Statistics ---
Average total errors in population: 7.468
Median total errors in population: 8
Error averages by case: (0.908 0.913 0.908 0.908 0.908 0.094 0.913 0.908 0.913 0.095)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.558
Average program size in population (points): 46.747
Average percent parens in population: 0.234
Minimum age in population: 17.78125
Maximum age in population: 22.962158203125
Average age in population: 21.04792565917969
Median age in population: 21.1234130859375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 41
Genome diversity (% unique genomes):	 0.709
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 43
Syntactic diversity (% unique Push programs):	 0.682
Total error diversity:				 0.005
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.024
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 3737528
--- Timings ---
Current time: 1559314678368 milliseconds
Total Time:          39.8 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        30.9 seconds, 77.5%
Fitness Testing:      5.9 seconds, 14.7%
Report:               3.0 seconds,  7.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 658
Test mean error for best: 0.65800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -96                 | Program output: -96                
Correct output: 38                  | Program output: 63                 
Correct output: -79                 | Program output: -79                
Correct output: -57                 | Program output: 42                 
Correct output: -24                 | Program output: 7                  
Correct output: -27                 | Program output: -27                
Correct output: -92                 | Program output: -92                
Correct output: -53                 | Program output: 68                 
Correct output: -92                 | Program output: 77                 
Correct output: -33                 | Program output: 24                 
Correct output: 1                   | Program output: 1                  
Correct output: -94                 | Program output: -94                
Correct output: -49                 | Program output: -49                
Correct output: 0                   | Program output: 0                  
Correct output: -23                 | Program output: -23                
Correct output: 12                  | Program output: 23                 
Correct output: 22                  | Program output: 31                 
Correct output: 15                  | Program output: 91                 
Correct output: 35                  | Program output: 48                 
Correct output: 25                  | Program output: 25                 
Correct output: 35                  | Program output: 65                 
Correct output: 5                   | Program output: 88                 
Correct output: 33                  | Program output: 74                 
Correct output: 25                  | Program output: 86                 
Correct output: 0                   | Program output: 6                  
Correct output: 19                  | Program output: 46                 
Correct output: 7                   | Program output: 7                  
Correct output: 1                   | Program output: 45                 
Correct output: 0                   | Program output: 54                 
Correct output: 18                  | Program output: 81                 
Correct output: 3                   | Program output: 3                  
Correct output: 19                  | Program output: 27                 
Correct output: 32                  | Program output: 41                 
Correct output: 23                  | Program output: 100                
Correct output: 11                  | Program output: 11                 
Correct output: -91                 | Program output: 95                 
Correct output: -74                 | Program output: 25                 
Correct output: -4                  | Program output: -4                 
Correct output: -81                 | Program output: 56                 
Correct output: -93                 | Program output: 74                 
Correct output: -29                 | Program output: -29                
Correct output: -21                 | Program output: -2                 
Correct output: -91                 | Program output: -86                
Correct output: -25                 | Program output: -2                 
Correct output: -64                 | Program output: -22                
Correct output: -81                 | Program output: 100                
Correct output: -40                 | Program output: -24                
Correct output: -50                 | Program output: -50                
Correct output: -95                 | Program output: -64                
Correct output: -66                 | Program output: 35                 
Correct output: -35                 | Program output: 57                 
Correct output: -94                 | Program output: -94                
Correct output: -59                 | Program output: -59                
Correct output: -27                 | Program output: 61                 
Correct output: -95                 | Program output: 72                 
Correct output: -72                 | Program output: 84                 
Correct output: -62                 | Program output: 57                 
Correct output: -70                 | Program output: -70                
Correct output: -77                 | Program output: 45                 
Correct output: -63                 | Program output: -58                
Correct output: -97                 | Program output: -97                
Correct output: -62                 | Program output: 99                 
Correct output: -29                 | Program output: -29                
Correct output: -16                 | Program output: 43                 
Correct output: -89                 | Program output: 64                 
Correct output: 7                   | Program output: 7                  
Correct output: -87                 | Program output: 51                 
Correct output: -89                 | Program output: -89                
Correct output: -68                 | Program output: 49                 
Correct output: -82                 | Program output: 34                 
Correct output: -88                 | Program output: 77                 
Correct output: -83                 | Program output: 50                 
Correct output: -38                 | Program output: -38                
Correct output: -69                 | Program output: -19                
Correct output: -56                 | Program output: 80                 
Correct output: -59                 | Program output: 73                 
Correct output: -85                 | Program output: -85                
Correct output: -57                 | Program output: -57                
Correct output: -78                 | Program output: -10                
Correct output: -75                 | Program output: -21                
Correct output: -32                 | Program output: 59                 
Correct output: -80                 | Program output: 25                 
Correct output: -81                 | Program output: -70                
Correct output: -87                 | Program output: -87                
Correct output: 27                  | Program output: 69                 
Correct output: -87                 | Program output: -87                
Correct output: -55                 | Program output: 36                 
Correct output: 18                  | Program output: 99                 
Correct output: 8                   | Program output: 8                  
Correct output: -84                 | Program output: -53                
Correct output: -100                | Program output: 100                
Correct output: -71                 | Program output: -71                
Correct output: -59                 | Program output: 54                 
Correct output: -82                 | Program output: 74                 
Correct output: -18                 | Program output: 40                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_shove} {:close 1, :instruction print_boolean} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_eq} {:close 1, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction print_integer} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction tagged_997} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_add} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_max} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_empty})
Lexicase best program: (integer_shove print_boolean integer_dec integer_fromboolean integer_eq in4 integer_shove exec_eq boolean_dup boolean_invert_second_then_and print_integer exec_flush boolean_dup_items tagged_997 print_integer boolean_rot integer_mult exec_dup_times (integer_dup_times boolean_not) exec_flush print_integer integer_add exec_yankdup integer_max exec_shove (exec_yank boolean_invert_first_then_and boolean_or boolean_yankdup integer_flush exec_s_when_autoconstructing () (exec_empty) ()))
Lexicase best errors: [1 1 0 0 0 1 0 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 39
Percent parens: 0.154
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_shove} {:close 1, :instruction print_boolean} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_eq} {:close 1, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction print_integer} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction tagged_997} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_add} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_max} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_empty})
Zero cases best program: (integer_shove print_boolean integer_dec integer_fromboolean integer_eq in4 integer_shove exec_eq boolean_dup boolean_invert_second_then_and print_integer exec_flush boolean_dup_items tagged_997 print_integer boolean_rot integer_mult exec_dup_times (integer_dup_times boolean_not) exec_flush print_integer integer_add exec_yankdup integer_max exec_shove (exec_yank boolean_invert_first_then_and boolean_or boolean_yankdup integer_flush exec_s_when_autoconstructing () (exec_empty) ()))
Zero cases best errors: [1 1 0 0 0 1 0 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 39
Percent parens: 0.154
--- Lexicase Population Statistics ---
Count of elite individuals by case: (4 363 931 562 927 4 930 4 562 562)
Population mean number of elite cases: 4.85
Count of perfect (error zero) individuals by case: (4 363 931 562 927 4 930 4 562 562)
Population mean number of perfect (error zero) cases: 4.85
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_while} {:close 1, :instruction integer_eq} {:close 1, :instruction in4} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction print_integer} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction tagged_997} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_max} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction exec_while} {:close 0, :instruction exec_k} {:close 3, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction -96} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y_when_autoconstructing})
Best program: (integer_dup_items exec_when (integer_inc boolean_shove in3 boolean_invert_second_then_and) exec_while (integer_eq) in4 exec_dup (exec_eq boolean_dup) boolean_invert_second_then_and print_integer exec_flush boolean_dup_items tagged_997 print_integer boolean_rot integer_mult exec_dup_times (integer_dup_times integer_dec) boolean_yankdup print_integer integer_dec exec_yankdup integer_max exec_shove (exec_yank boolean_invert_first_then_and boolean_or exec_s (exec_while (exec_k (exec_k_when_autoconstructing () ()) (boolean_yankdup integer_sub -96 boolean_pop boolean_stackdepth integer_rot) exec_do*count (exec_noop exec_do*times () boolean_not integer_max exec_y_when_autoconstructing ()))) () ()))
Errors: [1 1 0 0 0 1 0 1 0 0]
Total: 4
Mean: 0.4
Genome size: 48
Size: 65
Percent parens: 0.262
--- Population Statistics ---
Average total errors in population: 5.151
Median total errors in population: 4
Error averages by case: (0.996 0.637 0.069 0.438 0.073 0.996 0.07 0.996 0.438 0.438)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 32.042
Average program size in population (points): 42.523
Average percent parens in population: 0.245
Minimum age in population: 18.953125
Maximum age in population: 24.68511962890625
Average age in population: 22.57882489013672
Median age in population: 22.6561279296875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 35
Genome diversity (% unique genomes):	 0.525
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 38
Syntactic diversity (% unique Push programs):	 0.511
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.022
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 3919343
--- Timings ---
Current time: 1559314680427 milliseconds
Total Time:          41.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        32.6 seconds, 77.7%
Fitness Testing:      6.1 seconds, 14.5%
Report:               3.2 seconds,  7.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 661
Test mean error for best: 0.66100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -96                 | Program output: 77                 
Correct output: 38                  | Program output: 63                 
Correct output: -79                 | Program output: -79                
Correct output: -57                 | Program output: -57                
Correct output: -24                 | Program output: 7                  
Correct output: -27                 | Program output: 61                 
Correct output: -92                 | Program output: -92                
Correct output: -53                 | Program output: 68                 
Correct output: -92                 | Program output: -92                
Correct output: -33                 | Program output: -33                
Correct output: 1                   | Program output: 1                  
Correct output: -94                 | Program output: -94                
Correct output: -49                 | Program output: -49                
Correct output: 0                   | Program output: 0                  
Correct output: -23                 | Program output: -23                
Correct output: 12                  | Program output: 98                 
Correct output: 22                  | Program output: 22                 
Correct output: 15                  | Program output: 56                 
Correct output: 35                  | Program output: 97                 
Correct output: 25                  | Program output: 68                 
Correct output: 35                  | Program output: 59                 
Correct output: 5                   | Program output: 5                  
Correct output: 33                  | Program output: 33                 
Correct output: 25                  | Program output: 54                 
Correct output: 0                   | Program output: 45                 
Correct output: 19                  | Program output: 19                 
Correct output: 7                   | Program output: 94                 
Correct output: 1                   | Program output: 1                  
Correct output: 0                   | Program output: 0                  
Correct output: 18                  | Program output: 95                 
Correct output: 3                   | Program output: 7                  
Correct output: 19                  | Program output: 19                 
Correct output: 32                  | Program output: 77                 
Correct output: 23                  | Program output: 63                 
Correct output: 11                  | Program output: 97                 
Correct output: -91                 | Program output: -91                
Correct output: -74                 | Program output: -34                
Correct output: -4                  | Program output: 71                 
Correct output: -81                 | Program output: -81                
Correct output: -93                 | Program output: -93                
Correct output: -29                 | Program output: 62                 
Correct output: -21                 | Program output: 63                 
Correct output: -91                 | Program output: -8                 
Correct output: -25                 | Program output: 15                 
Correct output: -64                 | Program output: -38                
Correct output: -81                 | Program output: -81                
Correct output: -40                 | Program output: -40                
Correct output: -50                 | Program output: 17                 
Correct output: -95                 | Program output: -95                
Correct output: -66                 | Program output: -61                
Correct output: -35                 | Program output: -35                
Correct output: -94                 | Program output: -2                 
Correct output: -59                 | Program output: -49                
Correct output: -27                 | Program output: -27                
Correct output: -95                 | Program output: -21                
Correct output: -72                 | Program output: -72                
Correct output: -62                 | Program output: -62                
Correct output: -70                 | Program output: 44                 
Correct output: -77                 | Program output: -3                 
Correct output: -63                 | Program output: 94                 
Correct output: -97                 | Program output: 63                 
Correct output: -62                 | Program output: -32                
Correct output: -29                 | Program output: -11                
Correct output: -16                 | Program output: -11                
Correct output: -89                 | Program output: 69                 
Correct output: 7                   | Program output: 95                 
Correct output: -87                 | Program output: 36                 
Correct output: -89                 | Program output: 87                 
Correct output: -68                 | Program output: -68                
Correct output: -82                 | Program output: -82                
Correct output: -88                 | Program output: 57                 
Correct output: -83                 | Program output: -1                 
Correct output: -38                 | Program output: 64                 
Correct output: -69                 | Program output: -17                
Correct output: -56                 | Program output: -56                
Correct output: -59                 | Program output: -59                
Correct output: -85                 | Program output: 27                 
Correct output: -57                 | Program output: 79                 
Correct output: -78                 | Program output: -78                
Correct output: -75                 | Program output: -64                
Correct output: -32                 | Program output: -32                
Correct output: -80                 | Program output: 85                 
Correct output: -81                 | Program output: -81                
Correct output: -87                 | Program output: -72                
Correct output: 27                  | Program output: 56                 
Correct output: -87                 | Program output: 55                 
Correct output: -55                 | Program output: 64                 
Correct output: 18                  | Program output: 43                 
Correct output: 8                   | Program output: 13                 
Correct output: -84                 | Program output: -63                
Correct output: -100                | Program output: -100               
Correct output: -71                 | Program output: 73                 
Correct output: -59                 | Program output: -59                
Correct output: -82                 | Program output: -82                
Correct output: -18                 | Program output: 65                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_mult} {:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_yankdup} {:close 1, :instruction in4} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_max} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_if} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_max} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_k})
Lexicase best program: (integer_mult integer_max exec_stackdepth boolean_frominteger integer_dup_times exec_dup (boolean_swap boolean_or) boolean_yankdup integer_yankdup in4 exec_k (boolean_eq in1 print_integer exec_flush integer_max exec_yank integer_mod) (exec_if (exec_yankdup integer_max) (exec_shove (integer_dup integer_fromboolean boolean_or exec_s (boolean_dup exec_k () ()) () ()))))
Lexicase best errors: [1 0 0 1 1 1 0 1 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 41
Percent parens: 0.293
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_mult} {:close 0, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_yankdup} {:close 1, :instruction in4} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_max} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_if} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_max} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_k})
Zero cases best program: (integer_mult integer_max exec_stackdepth boolean_frominteger integer_dup_times exec_dup (boolean_swap boolean_or) boolean_yankdup integer_yankdup in4 exec_k (boolean_eq in1 print_integer exec_flush integer_max exec_yank integer_mod) (exec_if (exec_yankdup integer_max) (exec_shove (integer_dup integer_fromboolean boolean_or exec_s (boolean_dup exec_k () ()) () ()))))
Zero cases best errors: [1 0 0 1 1 1 0 1 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 41
Percent parens: 0.293
--- Lexicase Population Statistics ---
Count of elite individuals by case: (414 338 493 415 151 4 338 151 338 4)
Population mean number of elite cases: 2.65
Count of perfect (error zero) individuals by case: (414 338 493 415 151 4 338 151 338 4)
Population mean number of perfect (error zero) cases: 2.65
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_if} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_while} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_pop} {:close 0, :instruction in2} {:close 2, :instruction exec_if} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_max} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_if} {:close 0, :instruction exec_yankdup})
Best program: (integer_dup_items exec_when (integer_inc exec_if (integer_lte exec_while (exec_stackdepth exec_pop (in2 exec_if () () boolean_yankdup boolean_and print_integer exec_flush) boolean_dup_items boolean_or) boolean_yankdup integer_yankdup in4 integer_dup in1 print_integer exec_flush integer_max exec_yank integer_mod) (exec_if (exec_yankdup) ())))
Errors: [1 0 0 1 1 1 0 1 0 1]
Total: 6
Mean: 0.6
Genome size: 28
Size: 38
Percent parens: 0.263
--- Population Statistics ---
Average total errors in population: 7.354
Median total errors in population: 8
Error averages by case: (0.586 0.662 0.507 0.585 0.849 0.996 0.662 0.849 0.662 0.996)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 32.512
Average program size in population (points): 43.918
Average percent parens in population: 0.256
Minimum age in population: 20.623046875
Maximum age in population: 25.72943115234375
Average age in population: 24.08054815673828
Median age in population: 24.16552734375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 54
Genome diversity (% unique genomes):	 0.627
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 57
Syntactic diversity (% unique Push programs):	 0.614
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.031
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 4104886
--- Timings ---
Current time: 1559314682487 milliseconds
Total Time:          44.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        34.3 seconds, 77.9%
Fitness Testing:      6.3 seconds, 14.2%
Report:               3.4 seconds,  7.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Smallest problem report - generation 17
Test total error for best: 661
Test mean error for best: 0.66100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -96                 | Program output: 77                 
Correct output: 38                  | Program output: 63                 
Correct output: -79                 | Program output: -79                
Correct output: -57                 | Program output: -57                
Correct output: -24                 | Program output: 7                  
Correct output: -27                 | Program output: 61                 
Correct output: -92                 | Program output: -92                
Correct output: -53                 | Program output: 68                 
Correct output: -92                 | Program output: -92                
Correct output: -33                 | Program output: -33                
Correct output: 1                   | Program output: 1                  
Correct output: -94                 | Program output: -94                
Correct output: -49                 | Program output: -49                
Correct output: 0                   | Program output: 0                  
Correct output: -23                 | Program output: -23                
Correct output: 12                  | Program output: 98                 
Correct output: 22                  | Program output: 22                 
Correct output: 15                  | Program output: 56                 
Correct output: 35                  | Program output: 97                 
Correct output: 25                  | Program output: 68                 
Correct output: 35                  | Program output: 59                 
Correct output: 5                   | Program output: 5                  
Correct output: 33                  | Program output: 33                 
Correct output: 25                  | Program output: 54                 
Correct output: 0                   | Program output: 45                 
Correct output: 19                  | Program output: 19                 
Correct output: 7                   | Program output: 94                 
Correct output: 1                   | Program output: 1                  
Correct output: 0                   | Program output: 0                  
Correct output: 18                  | Program output: 95                 
Correct output: 3                   | Program output: 7                  
Correct output: 19                  | Program output: 19                 
Correct output: 32                  | Program output: 77                 
Correct output: 23                  | Program output: 63                 
Correct output: 11                  | Program output: 97                 
Correct output: -91                 | Program output: -91                
Correct output: -74                 | Program output: -34                
Correct output: -4                  | Program output: 71                 
Correct output: -81                 | Program output: -81                
Correct output: -93                 | Program output: -93                
Correct output: -29                 | Program output: 62                 
Correct output: -21                 | Program output: 63                 
Correct output: -91                 | Program output: -8                 
Correct output: -25                 | Program output: 15                 
Correct output: -64                 | Program output: -38                
Correct output: -81                 | Program output: -81                
Correct output: -40                 | Program output: -40                
Correct output: -50                 | Program output: 17                 
Correct output: -95                 | Program output: -95                
Correct output: -66                 | Program output: -61                
Correct output: -35                 | Program output: -35                
Correct output: -94                 | Program output: -2                 
Correct output: -59                 | Program output: -49                
Correct output: -27                 | Program output: -27                
Correct output: -95                 | Program output: -21                
Correct output: -72                 | Program output: -72                
Correct output: -62                 | Program output: -62                
Correct output: -70                 | Program output: 44                 
Correct output: -77                 | Program output: -3                 
Correct output: -63                 | Program output: 94                 
Correct output: -97                 | Program output: 63                 
Correct output: -62                 | Program output: -32                
Correct output: -29                 | Program output: -11                
Correct output: -16                 | Program output: -11                
Correct output: -89                 | Program output: 69                 
Correct output: 7                   | Program output: 95                 
Correct output: -87                 | Program output: 36                 
Correct output: -89                 | Program output: 87                 
Correct output: -68                 | Program output: -68                
Correct output: -82                 | Program output: -82                
Correct output: -88                 | Program output: 57                 
Correct output: -83                 | Program output: -1                 
Correct output: -38                 | Program output: 64                 
Correct output: -69                 | Program output: -17                
Correct output: -56                 | Program output: -56                
Correct output: -59                 | Program output: -59                
Correct output: -85                 | Program output: 27                 
Correct output: -57                 | Program output: 79                 
Correct output: -78                 | Program output: -78                
Correct output: -75                 | Program output: -64                
Correct output: -32                 | Program output: -32                
Correct output: -80                 | Program output: 85                 
Correct output: -81                 | Program output: -81                
Correct output: -87                 | Program output: -72                
Correct output: 27                  | Program output: 56                 
Correct output: -87                 | Program output: 55                 
Correct output: -55                 | Program output: 64                 
Correct output: 18                  | Program output: 43                 
Correct output: 8                   | Program output: 13                 
Correct output: -84                 | Program output: -63                
Correct output: -100                | Program output: -100               
Correct output: -71                 | Program output: 73                 
Correct output: -59                 | Program output: -59                
Correct output: -82                 | Program output: -82                
Correct output: -18                 | Program output: 65                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_s} {:close 1, :instruction print_boolean} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_k} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_max} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_if} {:close 0, :instruction exec_yankdup} {:close 2, :instruction integer_max} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_s})
Lexicase best program: (exec_s (print_boolean) (integer_dec) (integer_fromboolean boolean_dup) boolean_yankdup integer_yankdup integer_flush exec_k (in1 print_integer exec_flush integer_max exec_yank integer_mod exec_if (exec_yankdup integer_max) () exec_shove (exec_yank integer_pop boolean_or boolean_empty boolean_dup boolean_and) exec_s () () ()) ())
Lexicase best errors: [0 0 1 1 0 1 1 0 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 38
Percent parens: 0.316
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_s} {:close 1, :instruction print_boolean} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_k} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_max} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_if} {:close 0, :instruction exec_yankdup} {:close 2, :instruction integer_max} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_s})
Zero cases best program: (exec_s (print_boolean) (integer_dec) (integer_fromboolean boolean_dup) boolean_yankdup integer_yankdup integer_flush exec_k (in1 print_integer exec_flush integer_max exec_yank integer_mod exec_if (exec_yankdup integer_max) () exec_shove (exec_yank integer_pop boolean_or boolean_empty boolean_dup boolean_and) exec_s () () ()) ())
Zero cases best errors: [0 0 1 1 0 1 1 0 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 38
Percent parens: 0.316
--- Lexicase Population Statistics ---
Count of elite individuals by case: (370 533 221 203 924 203 188 312 221 145)
Population mean number of elite cases: 3.32
Count of perfect (error zero) individuals by case: (370 533 221 203 924 203 188 312 221 145)
Population mean number of perfect (error zero) cases: 3.32
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_shove} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_while} {:close 1, :instruction integer_eq} {:close 1, :instruction in4} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_k} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_max} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_if} {:close 0, :instruction exec_yankdup} {:close 2, :instruction integer_max} {:close 0, :instruction -51} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_do*times} {:close 1, :instruction integer_flush} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction print_exec} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction 52})
Best program: (integer_shove exec_when (boolean_frominteger integer_dup_times exec_dup (boolean_shove in3 boolean_invert_second_then_and) exec_while (integer_eq) in4) exec_dup (exec_eq boolean_dup) boolean_yankdup integer_yankdup integer_flush exec_k (in1 print_integer exec_flush integer_max exec_yank integer_mod exec_if (exec_yankdup integer_max) () -51 exec_do*while () boolean_swap exec_do*times () boolean_shove exec_do*times () exec_do*times () integer_flush) (boolean_shove) exec_do*times (boolean_dup) integer_empty integer_shove print_exec (integer_dup boolean_yankdup exec_dup_times (52)))
Errors: [0 0 1 1 0 1 1 0 1 1]
Total: 6
Mean: 0.6
Genome size: 45
Size: 61
Percent parens: 0.262
--- Population Statistics ---
Average total errors in population: 6.68
Median total errors in population: 6
Error averages by case: (0.63 0.467 0.779 0.797 0.076 0.797 0.812 0.688 0.779 0.855)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 31.472
Average program size in population (points): 42.149
Average percent parens in population: 0.249
Minimum age in population: 23.12789916992188
Maximum age in population: 27.32087707519531
Average age in population: 25.62444010925293
Median age in population: 25.70362091064453
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 43
Genome diversity (% unique genomes):	 0.632
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 45
Syntactic diversity (% unique Push programs):	 0.613
Total error diversity:				 0.003
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.025
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 4310181
--- Timings ---
Current time: 1559314685405 milliseconds
Total Time:          46.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        36.8 seconds, 78.4%
Fitness Testing:      6.5 seconds, 13.8%
Report:               3.5 seconds,  7.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Smallest problem report - generation 18
Test total error for best: 661
Test mean error for best: 0.66100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -96                 | Program output: 77                 
Correct output: 38                  | Program output: 63                 
Correct output: -79                 | Program output: -79                
Correct output: -57                 | Program output: -57                
Correct output: -24                 | Program output: 7                  
Correct output: -27                 | Program output: 61                 
Correct output: -92                 | Program output: -92                
Correct output: -53                 | Program output: 68                 
Correct output: -92                 | Program output: -92                
Correct output: -33                 | Program output: -33                
Correct output: 1                   | Program output: 1                  
Correct output: -94                 | Program output: -94                
Correct output: -49                 | Program output: -49                
Correct output: 0                   | Program output: 0                  
Correct output: -23                 | Program output: -23                
Correct output: 12                  | Program output: 98                 
Correct output: 22                  | Program output: 22                 
Correct output: 15                  | Program output: 56                 
Correct output: 35                  | Program output: 97                 
Correct output: 25                  | Program output: 68                 
Correct output: 35                  | Program output: 59                 
Correct output: 5                   | Program output: 5                  
Correct output: 33                  | Program output: 33                 
Correct output: 25                  | Program output: 54                 
Correct output: 0                   | Program output: 45                 
Correct output: 19                  | Program output: 19                 
Correct output: 7                   | Program output: 94                 
Correct output: 1                   | Program output: 1                  
Correct output: 0                   | Program output: 0                  
Correct output: 18                  | Program output: 95                 
Correct output: 3                   | Program output: 7                  
Correct output: 19                  | Program output: 19                 
Correct output: 32                  | Program output: 77                 
Correct output: 23                  | Program output: 63                 
Correct output: 11                  | Program output: 97                 
Correct output: -91                 | Program output: -91                
Correct output: -74                 | Program output: -34                
Correct output: -4                  | Program output: 71                 
Correct output: -81                 | Program output: -81                
Correct output: -93                 | Program output: -93                
Correct output: -29                 | Program output: 62                 
Correct output: -21                 | Program output: 63                 
Correct output: -91                 | Program output: -8                 
Correct output: -25                 | Program output: 15                 
Correct output: -64                 | Program output: -38                
Correct output: -81                 | Program output: -81                
Correct output: -40                 | Program output: -40                
Correct output: -50                 | Program output: 17                 
Correct output: -95                 | Program output: -95                
Correct output: -66                 | Program output: -61                
Correct output: -35                 | Program output: -35                
Correct output: -94                 | Program output: -2                 
Correct output: -59                 | Program output: -49                
Correct output: -27                 | Program output: -27                
Correct output: -95                 | Program output: -21                
Correct output: -72                 | Program output: -72                
Correct output: -62                 | Program output: -62                
Correct output: -70                 | Program output: 44                 
Correct output: -77                 | Program output: -3                 
Correct output: -63                 | Program output: 94                 
Correct output: -97                 | Program output: 63                 
Correct output: -62                 | Program output: -32                
Correct output: -29                 | Program output: -11                
Correct output: -16                 | Program output: -11                
Correct output: -89                 | Program output: 69                 
Correct output: 7                   | Program output: 95                 
Correct output: -87                 | Program output: 36                 
Correct output: -89                 | Program output: 87                 
Correct output: -68                 | Program output: -68                
Correct output: -82                 | Program output: -82                
Correct output: -88                 | Program output: 57                 
Correct output: -83                 | Program output: -1                 
Correct output: -38                 | Program output: 64                 
Correct output: -69                 | Program output: -17                
Correct output: -56                 | Program output: -56                
Correct output: -59                 | Program output: -59                
Correct output: -85                 | Program output: 27                 
Correct output: -57                 | Program output: 79                 
Correct output: -78                 | Program output: -78                
Correct output: -75                 | Program output: -64                
Correct output: -32                 | Program output: -32                
Correct output: -80                 | Program output: 85                 
Correct output: -81                 | Program output: -81                
Correct output: -87                 | Program output: -72                
Correct output: 27                  | Program output: 56                 
Correct output: -87                 | Program output: 55                 
Correct output: -55                 | Program output: 64                 
Correct output: 18                  | Program output: 43                 
Correct output: 8                   | Program output: 13                 
Correct output: -84                 | Program output: -63                
Correct output: -100                | Program output: -100               
Correct output: -71                 | Program output: 73                 
Correct output: -59                 | Program output: -59                
Correct output: -82                 | Program output: -82                
Correct output: -18                 | Program output: 65                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_when} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_while} {:close 1, :instruction integer_eq} {:close 1, :instruction in4} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_k} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_max} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_if} {:close 0, :instruction exec_yankdup} {:close 2, :instruction integer_max} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_or})
Lexicase best program: (exec_when (boolean_frominteger integer_dup_times exec_dup (boolean_shove in3 boolean_invert_second_then_and) exec_while (integer_eq) in4) exec_dup (exec_eq boolean_dup) boolean_yankdup integer_yankdup integer_flush exec_k (in1 print_integer exec_flush integer_max exec_yank integer_mod exec_if (exec_yankdup integer_max) () exec_shove (exec_yank integer_pop boolean_or)) ())
Lexicase best errors: [0 1 1 1 0 0 0 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 40
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_when} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_while} {:close 1, :instruction integer_eq} {:close 1, :instruction in4} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_k} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_max} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_if} {:close 0, :instruction exec_yankdup} {:close 2, :instruction integer_max} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_or})
Zero cases best program: (exec_when (boolean_frominteger integer_dup_times exec_dup (boolean_shove in3 boolean_invert_second_then_and) exec_while (integer_eq) in4) exec_dup (exec_eq boolean_dup) boolean_yankdup integer_yankdup integer_flush exec_k (in1 print_integer exec_flush integer_max exec_yank integer_mod exec_if (exec_yankdup integer_max) () exec_shove (exec_yank integer_pop boolean_or)) ())
Zero cases best errors: [0 1 1 1 0 0 0 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 40
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (424 106 241 106 215 456 215 106 214 214)
Population mean number of elite cases: 2.30
Count of perfect (error zero) individuals by case: (424 106 241 106 215 456 215 106 214 214)
Population mean number of perfect (error zero) cases: 2.30
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_s} {:close 1, :instruction print_boolean} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction in2} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in1} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_k} {:close 0, :instruction print_integer} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_do*times} {:close 0, :instruction tagged_997} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup_times} {:close 3, :instruction integer_fromboolean} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_sub})
Best program: (exec_s (print_boolean) (integer_dec) (integer_fromboolean in2) boolean_or boolean_yankdup integer_yankdup in4 integer_fromboolean in1 boolean_yankdup exec_k (print_integer exec_flush) (exec_do*times (tagged_997 print_integer boolean_rot integer_mult exec_dup_times (integer_fromboolean))) boolean_yankdup integer_sub)
Errors: [0 1 1 1 0 0 0 1 0 0]
Total: 4
Mean: 0.4
Genome size: 24
Size: 32
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 7.703
Median total errors in population: 8
Error averages by case: (0.576 0.894 0.759 0.894 0.785 0.544 0.785 0.894 0.786 0.786)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 31.573
Average program size in population (points): 42.214
Average percent parens in population: 0.250
Minimum age in population: 24.26806640625
Maximum age in population: 28.82009887695312
Average age in population: 27.14389808654785
Median age in population: 27.22001647949219
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 78
Genome diversity (% unique genomes):	 0.629
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 78
Syntactic diversity (% unique Push programs):	 0.612
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.03
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 4551474
--- Timings ---
Current time: 1559314688164 milliseconds
Total Time:          49.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        39.1 seconds, 78.8%
Fitness Testing:      6.7 seconds, 13.6%
Report:               3.7 seconds,  7.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Smallest problem report - generation 19
Test total error for best: 538
Test mean error for best: 0.53800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -96                 | Program output: -96                
Correct output: 38                  | Program output: 63                 
Correct output: -79                 | Program output: -79                
Correct output: -57                 | Program output: -57                
Correct output: -24                 | Program output: 7                  
Correct output: -27                 | Program output: -27                
Correct output: -92                 | Program output: -92                
Correct output: -53                 | Program output: -53                
Correct output: -92                 | Program output: -92                
Correct output: -33                 | Program output: -33                
Correct output: 1                   | Program output: 1                  
Correct output: -94                 | Program output: -94                
Correct output: -49                 | Program output: -49                
Correct output: 0                   | Program output: 0                  
Correct output: -23                 | Program output: -23                
Correct output: 12                  | Program output: 98                 
Correct output: 22                  | Program output: 22                 
Correct output: 15                  | Program output: 56                 
Correct output: 35                  | Program output: 97                 
Correct output: 25                  | Program output: 68                 
Correct output: 35                  | Program output: 59                 
Correct output: 5                   | Program output: 5                  
Correct output: 33                  | Program output: 33                 
Correct output: 25                  | Program output: 54                 
Correct output: 0                   | Program output: 45                 
Correct output: 19                  | Program output: 19                 
Correct output: 7                   | Program output: 94                 
Correct output: 1                   | Program output: 1                  
Correct output: 0                   | Program output: 0                  
Correct output: 18                  | Program output: 95                 
Correct output: 3                   | Program output: 7                  
Correct output: 19                  | Program output: 19                 
Correct output: 32                  | Program output: 77                 
Correct output: 23                  | Program output: 63                 
Correct output: 11                  | Program output: 97                 
Correct output: -91                 | Program output: -91                
Correct output: -74                 | Program output: -49                
Correct output: -4                  | Program output: 71                 
Correct output: -81                 | Program output: -81                
Correct output: -93                 | Program output: -54                
Correct output: -29                 | Program output: 62                 
Correct output: -21                 | Program output: 0                  
Correct output: -91                 | Program output: -8                 
Correct output: -25                 | Program output: -25                
Correct output: -64                 | Program output: -9                 
Correct output: -81                 | Program output: -81                
Correct output: -40                 | Program output: -40                
Correct output: -50                 | Program output: 17                 
Correct output: -95                 | Program output: -34                
Correct output: -66                 | Program output: -54                
Correct output: -35                 | Program output: -8                 
Correct output: -94                 | Program output: -39                
Correct output: -59                 | Program output: -28                
Correct output: -27                 | Program output: -13                
Correct output: -95                 | Program output: -95                
Correct output: -72                 | Program output: -25                
Correct output: -62                 | Program output: -62                
Correct output: -70                 | Program output: -54                
Correct output: -77                 | Program output: -77                
Correct output: -63                 | Program output: -63                
Correct output: -97                 | Program output: 63                 
Correct output: -62                 | Program output: -62                
Correct output: -29                 | Program output: -18                
Correct output: -16                 | Program output: -11                
Correct output: -89                 | Program output: -89                
Correct output: 7                   | Program output: 95                 
Correct output: -87                 | Program output: 36                 
Correct output: -89                 | Program output: -29                
Correct output: -68                 | Program output: -68                
Correct output: -82                 | Program output: -82                
Correct output: -88                 | Program output: -22                
Correct output: -83                 | Program output: -1                 
Correct output: -38                 | Program output: -35                
Correct output: -69                 | Program output: -69                
Correct output: -56                 | Program output: -53                
Correct output: -59                 | Program output: -25                
Correct output: -85                 | Program output: -1                 
Correct output: -57                 | Program output: 79                 
Correct output: -78                 | Program output: -78                
Correct output: -75                 | Program output: -64                
Correct output: -32                 | Program output: -32                
Correct output: -80                 | Program output: -30                
Correct output: -81                 | Program output: -81                
Correct output: -87                 | Program output: -72                
Correct output: 27                  | Program output: 56                 
Correct output: -87                 | Program output: -19                
Correct output: -55                 | Program output: 64                 
Correct output: 18                  | Program output: 43                 
Correct output: 8                   | Program output: 13                 
Correct output: -84                 | Program output: -84                
Correct output: -100                | Program output: -53                
Correct output: -71                 | Program output: 73                 
Correct output: -59                 | Program output: -59                
Correct output: -82                 | Program output: -37                
Correct output: -18                 | Program output: -18                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_s} {:close 1, :instruction print_boolean} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction in2} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_max} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in4} {:close 0, :instruction exec_k} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_do*times} {:close 0, :instruction tagged_997} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup_times} {:close 3, :instruction integer_fromboolean} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_or} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_k} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_flush} {:close 0, :instruction tag_exec_825} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_div} {:close 1, :instruction exec_y} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_flush})
Lexicase best program: (exec_s (print_boolean) (boolean_frominteger) (integer_fromboolean in2) boolean_or integer_max integer_yankdup in4 exec_k (in1 boolean_shove in3 boolean_invert_second_then_and) (exec_flush) exec_do*times (tagged_997 print_integer boolean_rot integer_mult exec_dup_times (integer_fromboolean)) boolean_yankdup integer_sub integer_stackdepth boolean_or integer_fromboolean boolean_eq exec_k (integer_rot integer_inc boolean_yank) (exec_eq exec_pop (exec_rot (integer_empty) (boolean_xor exec_do*times () exec_do*while (integer_gt boolean_flush tag_exec_825 (boolean_dup_times exec_when (integer_div exec_y () exec_while () boolean_flush)))) ())))
Lexicase best errors: [1 0 0 0 0 0 0 1 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 68
Percent parens: 0.294
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_s} {:close 1, :instruction print_boolean} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction in2} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_max} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in4} {:close 0, :instruction exec_k} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_do*times} {:close 0, :instruction tagged_997} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup_times} {:close 3, :instruction integer_fromboolean} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_or} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_k} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_flush} {:close 0, :instruction tag_exec_825} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_div} {:close 1, :instruction exec_y} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_flush})
Zero cases best program: (exec_s (print_boolean) (boolean_frominteger) (integer_fromboolean in2) boolean_or integer_max integer_yankdup in4 exec_k (in1 boolean_shove in3 boolean_invert_second_then_and) (exec_flush) exec_do*times (tagged_997 print_integer boolean_rot integer_mult exec_dup_times (integer_fromboolean)) boolean_yankdup integer_sub integer_stackdepth boolean_or integer_fromboolean boolean_eq exec_k (integer_rot integer_inc boolean_yank) (exec_eq exec_pop (exec_rot (integer_empty) (boolean_xor exec_do*times () exec_do*while (integer_gt boolean_flush tag_exec_825 (boolean_dup_times exec_when (integer_div exec_y () exec_while () boolean_flush)))) ())))
Zero cases best errors: [1 0 0 0 0 0 0 1 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 68
Percent parens: 0.294
--- Lexicase Population Statistics ---
Count of elite individuals by case: (257 7 7 531 529 7 390 122 529 122)
Population mean number of elite cases: 2.50
Count of perfect (error zero) individuals by case: (257 7 7 531 529 7 390 122 529 122)
Population mean number of perfect (error zero) cases: 2.50
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_s} {:close 1, :instruction print_boolean} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction in2} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_max} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in4} {:close 0, :instruction exec_k} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_do*times} {:close 0, :instruction tagged_997} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup_times} {:close 3, :instruction integer_fromboolean} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_or} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_k} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_flush} {:close 0, :instruction tag_exec_825} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_div} {:close 1, :instruction exec_y} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_flush})
Best program: (exec_s (print_boolean) (boolean_frominteger) (integer_fromboolean in2) boolean_or integer_max integer_yankdup in4 exec_k (in1 boolean_shove in3 boolean_invert_second_then_and) (exec_flush) exec_do*times (tagged_997 print_integer boolean_rot integer_mult exec_dup_times (integer_fromboolean)) boolean_yankdup integer_sub integer_stackdepth boolean_or integer_fromboolean boolean_eq exec_k (integer_rot integer_inc boolean_yank) (exec_eq exec_pop (exec_rot (integer_empty) (boolean_xor exec_do*times () exec_do*while (integer_gt boolean_flush tag_exec_825 (boolean_dup_times exec_when (integer_div exec_y () exec_while () boolean_flush)))) ())))
Errors: [1 0 0 0 0 0 0 1 0 1]
Total: 3
Mean: 0.3
Genome size: 48
Size: 68
Percent parens: 0.294
--- Population Statistics ---
Average total errors in population: 7.499
Median total errors in population: 7
Error averages by case: (0.743 0.993 0.993 0.469 0.471 0.993 0.61 0.878 0.471 0.878)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 32.978
Average program size in population (points): 44.668
Average percent parens in population: 0.258
Minimum age in population: 25.26806640625
Maximum age in population: 30.42758941650391
Average age in population: 28.64819324874878
Median age in population: 28.71978378295898
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 31
Genome diversity (% unique genomes):	 0.663
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 34
Syntactic diversity (% unique Push programs):	 0.644
Total error diversity:				 0.006
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.037
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 4739263
--- Timings ---
Current time: 1559314691305 milliseconds
Total Time:          52.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        41.5 seconds, 79.1%
Fitness Testing:      7.0 seconds, 13.3%
Report:               3.9 seconds,  7.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Smallest problem report - generation 20
Test total error for best: 459
Test mean error for best: 0.45900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -96                 | Program output: -96                
Correct output: 38                  | Program output: 63                 
Correct output: -79                 | Program output: -79                
Correct output: -57                 | Program output: -57                
Correct output: -24                 | Program output: 77                 
Correct output: -27                 | Program output: -27                
Correct output: -92                 | Program output: -9273              
Correct output: -53                 | Program output: -53                
Correct output: -92                 | Program output: -92                
Correct output: -33                 | Program output: -33                
Correct output: 1                   | Program output: 1                  
Correct output: -94                 | Program output: -94                
Correct output: -49                 | Program output: -49                
Correct output: 0                   | Program output: 0                  
Correct output: -23                 | Program output: -23                
Correct output: 12                  | Program output: 23                 
Correct output: 22                  | Program output: 22                 
Correct output: 15                  | Program output: 56                 
Correct output: 35                  | Program output: 48                 
Correct output: 25                  | Program output: 25                 
Correct output: 35                  | Program output: 59                 
Correct output: 5                   | Program output: 5                  
Correct output: 33                  | Program output: 33                 
Correct output: 25                  | Program output: 54                 
Correct output: 0                   | Program output: 632                
Correct output: 19                  | Program output: 19                 
Correct output: 7                   | Program output: 7                  
Correct output: 1                   | Program output: 1                  
Correct output: 0                   | Program output: 0                  
Correct output: 18                  | Program output: 81                 
Correct output: 3                   | Program output: 3                  
Correct output: 19                  | Program output: 19                 
Correct output: 32                  | Program output: 41                 
Correct output: 23                  | Program output: 63                 
Correct output: 11                  | Program output: 11                 
Correct output: -91                 | Program output: -91                
Correct output: -74                 | Program output: -49                
Correct output: -4                  | Program output: -4                 
Correct output: -81                 | Program output: -8125              
Correct output: -93                 | Program output: -54                
Correct output: -29                 | Program output: -2988              
Correct output: -21                 | Program output: 0                  
Correct output: -91                 | Program output: -8690              
Correct output: -25                 | Program output: -25                
Correct output: -64                 | Program output: -9                 
Correct output: -81                 | Program output: -8190              
Correct output: -40                 | Program output: -40                
Correct output: -50                 | Program output: -50                
Correct output: -95                 | Program output: -34                
Correct output: -66                 | Program output: -54                
Correct output: -35                 | Program output: -8                 
Correct output: -94                 | Program output: -39                
Correct output: -59                 | Program output: -28                
Correct output: -27                 | Program output: -13                
Correct output: -95                 | Program output: -95                
Correct output: -72                 | Program output: -25                
Correct output: -62                 | Program output: -6260              
Correct output: -70                 | Program output: -54                
Correct output: -77                 | Program output: -77                
Correct output: -63                 | Program output: -63                
Correct output: -97                 | Program output: -9784              
Correct output: -62                 | Program output: -62                
Correct output: -29                 | Program output: -18                
Correct output: -16                 | Program output: -1134              
Correct output: -89                 | Program output: -89                
Correct output: 7                   | Program output: 7                  
Correct output: -87                 | Program output: 3687               
Correct output: -89                 | Program output: -29                
Correct output: -68                 | Program output: -68                
Correct output: -82                 | Program output: -82                
Correct output: -88                 | Program output: -22                
Correct output: -83                 | Program output: -13                
Correct output: -38                 | Program output: -35                
Correct output: -69                 | Program output: -69                
Correct output: -56                 | Program output: -53                
Correct output: -59                 | Program output: -25                
Correct output: -85                 | Program output: -1                 
Correct output: -57                 | Program output: -57                
Correct output: -78                 | Program output: -78                
Correct output: -75                 | Program output: -6497              
Correct output: -32                 | Program output: -32                
Correct output: -80                 | Program output: -30                
Correct output: -81                 | Program output: -8167              
Correct output: -87                 | Program output: -87                
Correct output: 27                  | Program output: 56                 
Correct output: -87                 | Program output: -19                
Correct output: -55                 | Program output: 368                
Correct output: 18                  | Program output: 43                 
Correct output: 8                   | Program output: 8                  
Correct output: -84                 | Program output: -84                
Correct output: -100                | Program output: -53                
Correct output: -71                 | Program output: -71                
Correct output: -59                 | Program output: -59100             
Correct output: -82                 | Program output: -37                
Correct output: -18                 | Program output: -18                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_when} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction in2} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_max} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in4} {:close 0, :instruction exec_k} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_do*times} {:close 0, :instruction tagged_997} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup_times} {:close 3, :instruction integer_fromboolean} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction in2} {:close 1, :instruction boolean_or} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_k} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_flush} {:close 0, :instruction tag_exec_825} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_div} {:close 1, :instruction exec_y} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_flush})
Lexicase best program: (exec_when () boolean_frominteger integer_dup_times exec_dup (boolean_shove in3 in2) boolean_or integer_max integer_yankdup in4 exec_k (in1 integer_min in3 boolean_invert_second_then_and) (exec_flush) exec_do*times (tagged_997 print_integer boolean_rot integer_mult exec_dup_times (integer_fromboolean)) boolean_yankdup integer_sub in2 boolean_or integer_fromboolean boolean_eq exec_k (integer_rot integer_inc boolean_yank) (exec_eq exec_pop (exec_rot (integer_empty) (boolean_xor exec_do*times () exec_do*while (integer_gt boolean_flush tag_exec_825 (boolean_dup_times exec_when (integer_div exec_y () exec_while () boolean_flush)))) ())))
Lexicase best errors: [0 1 0 1 0 0 1 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 69
Percent parens: 0.275
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_when} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction in2} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_max} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in4} {:close 0, :instruction exec_k} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_do*times} {:close 0, :instruction tagged_997} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup_times} {:close 3, :instruction integer_fromboolean} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction in2} {:close 1, :instruction boolean_or} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_k} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_flush} {:close 0, :instruction tag_exec_825} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_div} {:close 1, :instruction exec_y} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_flush})
Zero cases best program: (exec_when () boolean_frominteger integer_dup_times exec_dup (boolean_shove in3 in2) boolean_or integer_max integer_yankdup in4 exec_k (in1 integer_min in3 boolean_invert_second_then_and) (exec_flush) exec_do*times (tagged_997 print_integer boolean_rot integer_mult exec_dup_times (integer_fromboolean)) boolean_yankdup integer_sub in2 boolean_or integer_fromboolean boolean_eq exec_k (integer_rot integer_inc boolean_yank) (exec_eq exec_pop (exec_rot (integer_empty) (boolean_xor exec_do*times () exec_do*while (integer_gt boolean_flush tag_exec_825 (boolean_dup_times exec_when (integer_div exec_y () exec_while () boolean_flush)))) ())))
Zero cases best errors: [0 1 0 1 0 0 1 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 69
Percent parens: 0.275
--- Lexicase Population Statistics ---
Count of elite individuals by case: (564 207 106 207 554 590 6 588 5 103)
Population mean number of elite cases: 2.93
Count of perfect (error zero) individuals by case: (564 207 106 207 554 590 6 588 5 103)
Population mean number of perfect (error zero) cases: 2.93
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_when} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction in2} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_max} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in4} {:close 0, :instruction exec_k} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_do*times} {:close 0, :instruction tagged_997} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup_times} {:close 3, :instruction integer_fromboolean} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction in2} {:close 1, :instruction boolean_or} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_k} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_flush} {:close 0, :instruction tag_exec_825} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_div} {:close 1, :instruction exec_y} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_flush})
Best program: (exec_when () boolean_frominteger integer_dup_times exec_dup (boolean_shove in3 in2) boolean_or integer_max integer_yankdup in4 exec_k (in1 integer_min in3 boolean_invert_second_then_and) (exec_flush) exec_do*times (tagged_997 print_integer boolean_rot integer_mult exec_dup_times (integer_fromboolean)) boolean_yankdup integer_sub in2 boolean_or integer_fromboolean boolean_eq exec_k (integer_rot integer_inc boolean_yank) (exec_eq exec_pop (exec_rot (integer_empty) (boolean_xor exec_do*times () exec_do*while (integer_gt boolean_flush tag_exec_825 (boolean_dup_times exec_when (integer_div exec_y () exec_while () boolean_flush)))) ())))
Errors: [0 1 0 1 0 0 1 0 1 0]
Total: 4
Mean: 0.4
Genome size: 50
Size: 69
Percent parens: 0.275
--- Population Statistics ---
Average total errors in population: 7.07
Median total errors in population: 6
Error averages by case: (0.436 0.793 0.894 0.793 0.446 0.41 0.994 0.412 0.995 0.897)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 42.543
Average program size in population (points): 59.182
Average percent parens in population: 0.275
Minimum age in population: 27.73710632324219
Maximum age in population: 32.24019050598145
Average age in population: 31.08947132492065
Median age in population: 31.05279159545898
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 308
Genome diversity (% unique genomes):	 0.614
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 316
Syntactic diversity (% unique Push programs):	 0.588
Total error diversity:				 0.007
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.058
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 5389129
--- Timings ---
Current time: 1559314694597 milliseconds
Total Time:          55.6 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        43.5 seconds, 78.2%
Fitness Testing:      7.5 seconds, 13.6%
Report:               4.5 seconds,  8.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Smallest problem report - generation 21
Test total error for best: 571
Test mean error for best: 0.57100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -96                 | Program output: -96                
Correct output: 38                  | Program output: 63                 
Correct output: -79                 | Program output: -79                
Correct output: -57                 | Program output: -57                
Correct output: -24                 | Program output: 7                  
Correct output: -27                 | Program output: -27                
Correct output: -92                 | Program output: -92                
Correct output: -53                 | Program output: 68                 
Correct output: -92                 | Program output: -92                
Correct output: -33                 | Program output: -33                
Correct output: 1                   | Program output: 1                  
Correct output: -94                 | Program output: -94                
Correct output: -49                 | Program output: -49                
Correct output: 0                   | Program output: 0                  
Correct output: -23                 | Program output: -23                
Correct output: 12                  | Program output: 23                 
Correct output: 22                  | Program output: 31                 
Correct output: 15                  | Program output: 91                 
Correct output: 35                  | Program output: 48                 
Correct output: 25                  | Program output: 25                 
Correct output: 35                  | Program output: 65                 
Correct output: 5                   | Program output: 88                 
Correct output: 33                  | Program output: 74                 
Correct output: 25                  | Program output: 86                 
Correct output: 0                   | Program output: 6                  
Correct output: 19                  | Program output: 46                 
Correct output: 7                   | Program output: 7                  
Correct output: 1                   | Program output: 45                 
Correct output: 0                   | Program output: 0                  
Correct output: 18                  | Program output: 81                 
Correct output: 3                   | Program output: 3                  
Correct output: 19                  | Program output: 27                 
Correct output: 32                  | Program output: 41                 
Correct output: 23                  | Program output: 100                
Correct output: 11                  | Program output: 11                 
Correct output: -91                 | Program output: -91                
Correct output: -74                 | Program output: -34                
Correct output: -4                  | Program output: -4                 
Correct output: -81                 | Program output: -81                
Correct output: -93                 | Program output: -93                
Correct output: -29                 | Program output: -29                
Correct output: -21                 | Program output: -2                 
Correct output: -91                 | Program output: -8                 
Correct output: -25                 | Program output: -2                 
Correct output: -64                 | Program output: -38                
Correct output: -81                 | Program output: -81                
Correct output: -40                 | Program output: -40                
Correct output: -50                 | Program output: -50                
Correct output: -95                 | Program output: -95                
Correct output: -66                 | Program output: -61                
Correct output: -35                 | Program output: -35                
Correct output: -94                 | Program output: -2                 
Correct output: -59                 | Program output: -49                
Correct output: -27                 | Program output: -27                
Correct output: -95                 | Program output: -21                
Correct output: -72                 | Program output: -72                
Correct output: -62                 | Program output: -62                
Correct output: -70                 | Program output: -70                
Correct output: -77                 | Program output: -3                 
Correct output: -63                 | Program output: -58                
Correct output: -97                 | Program output: -97                
Correct output: -62                 | Program output: -32                
Correct output: -29                 | Program output: -11                
Correct output: -16                 | Program output: -11                
Correct output: -89                 | Program output: 64                 
Correct output: 7                   | Program output: 7                  
Correct output: -87                 | Program output: 51                 
Correct output: -89                 | Program output: -89                
Correct output: -68                 | Program output: -68                
Correct output: -82                 | Program output: -82                
Correct output: -88                 | Program output: 77                 
Correct output: -83                 | Program output: -1                 
Correct output: -38                 | Program output: -38                
Correct output: -69                 | Program output: -17                
Correct output: -56                 | Program output: -56                
Correct output: -59                 | Program output: -59                
Correct output: -85                 | Program output: -85                
Correct output: -57                 | Program output: -57                
Correct output: -78                 | Program output: -78                
Correct output: -75                 | Program output: -64                
Correct output: -32                 | Program output: -32                
Correct output: -80                 | Program output: 25                 
Correct output: -81                 | Program output: -81                
Correct output: -87                 | Program output: -72                
Correct output: 27                  | Program output: 69                 
Correct output: -87                 | Program output: -87                
Correct output: -55                 | Program output: 36                 
Correct output: 18                  | Program output: 99                 
Correct output: 8                   | Program output: 8                  
Correct output: -84                 | Program output: -63                
Correct output: -100                | Program output: -100               
Correct output: -71                 | Program output: -71                
Correct output: -59                 | Program output: -59                
Correct output: -82                 | Program output: -82                
Correct output: -18                 | Program output: 40                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_when} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction in2} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_max} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in4} {:close 0, :instruction exec_k} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_do*times} {:close 0, :instruction tagged_997} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup_times} {:close 3, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup_times} {:close 3, :instruction integer_fromboolean} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_or} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_k} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_flush} {:close 0, :instruction tag_exec_825} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_swap} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_flush})
Lexicase best program: (exec_when () boolean_frominteger integer_dup_times exec_dup (boolean_shove in3 in2) boolean_or integer_max integer_yankdup in4 exec_k (in1 integer_min in3 boolean_invert_second_then_and) (exec_flush) exec_do*times (tagged_997 print_integer boolean_rot integer_mult exec_dup_times (integer_fromboolean)) integer_mult exec_dup_times (integer_fromboolean) boolean_yankdup integer_sub integer_stackdepth boolean_or integer_fromboolean boolean_eq exec_k (integer_rot integer_inc boolean_yank) (exec_eq exec_pop (exec_rot (integer_empty) (integer_rot integer_inc exec_k (integer_rot integer_inc boolean_yank) (exec_eq exec_pop (exec_rot (integer_empty) (boolean_xor exec_do*times () exec_do*while (integer_gt boolean_flush tag_exec_825 (boolean_dup_times exec_when (integer_div boolean_swap) exec_while () boolean_flush))) ()))) ())))
Lexicase best errors: [1 0 1 0 0 0 1 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 88
Percent parens: 0.284
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_when} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction in2} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_max} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in4} {:close 0, :instruction exec_k} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_do*times} {:close 0, :instruction tagged_997} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup_times} {:close 3, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup_times} {:close 3, :instruction integer_fromboolean} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_or} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_k} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_flush} {:close 0, :instruction tag_exec_825} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_swap} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_flush})
Zero cases best program: (exec_when () boolean_frominteger integer_dup_times exec_dup (boolean_shove in3 in2) boolean_or integer_max integer_yankdup in4 exec_k (in1 integer_min in3 boolean_invert_second_then_and) (exec_flush) exec_do*times (tagged_997 print_integer boolean_rot integer_mult exec_dup_times (integer_fromboolean)) integer_mult exec_dup_times (integer_fromboolean) boolean_yankdup integer_sub integer_stackdepth boolean_or integer_fromboolean boolean_eq exec_k (integer_rot integer_inc boolean_yank) (exec_eq exec_pop (exec_rot (integer_empty) (integer_rot integer_inc exec_k (integer_rot integer_inc boolean_yank) (exec_eq exec_pop (exec_rot (integer_empty) (boolean_xor exec_do*times () exec_do*while (integer_gt boolean_flush tag_exec_825 (boolean_dup_times exec_when (integer_div boolean_swap) exec_while () boolean_flush))) ()))) ())))
Zero cases best errors: [1 0 1 0 0 0 1 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 88
Percent parens: 0.284
--- Lexicase Population Statistics ---
Count of elite individuals by case: (372 897 15 552 528 531 182 552 207 526)
Population mean number of elite cases: 4.36
Count of perfect (error zero) individuals by case: (372 897 15 552 528 531 182 552 207 526)
Population mean number of perfect (error zero) cases: 4.36
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_s} {:close 1, :instruction print_boolean} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction in2} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_max} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in4} {:close 0, :instruction exec_k} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 0, :instruction tagged_997} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup_times} {:close 3, :instruction integer_fromboolean} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_or} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_k} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_flush} {:close 0, :instruction tag_exec_825} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_div} {:close 1, :instruction exec_y} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_flush})
Best program: (exec_s (print_boolean) (boolean_frominteger) (integer_fromboolean in2) boolean_or integer_max integer_yankdup in4 exec_k (in1 exec_do*times (tagged_997 print_integer boolean_rot integer_mult exec_dup_times (integer_fromboolean))) (boolean_yankdup integer_sub) integer_stackdepth boolean_or integer_fromboolean boolean_eq exec_k (integer_rot integer_inc boolean_yank) (exec_eq exec_pop (exec_rot (integer_empty) (boolean_xor exec_do*times () exec_do*while (integer_gt boolean_flush tag_exec_825 (boolean_dup_times exec_when (integer_div exec_y () exec_while () boolean_flush)))) ())))
Errors: [0 0 1 1 0 0 0 1 1 0]
Total: 4
Mean: 0.4
Genome size: 44
Size: 64
Percent parens: 0.313
--- Population Statistics ---
Average total errors in population: 5.638
Median total errors in population: 4
Error averages by case: (0.628 0.103 0.985 0.448 0.472 0.469 0.818 0.448 0.793 0.474)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 48.561
Average program size in population (points): 67.828
Average percent parens in population: 0.283
Minimum age in population: 31.27247619628906
Maximum age in population: 34.05279159545898
Average age in population: 33.15531919574738
Median age in population: 33.05279159545898
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 186
Genome diversity (% unique genomes):	 0.559
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 194
Syntactic diversity (% unique Push programs):	 0.539
Total error diversity:				 0.007
Error (vector) diversity:			 0.033
Behavioral diversity:				 0.099
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 6353960
--- Timings ---
Current time: 1559314697829 milliseconds
Total Time:          59.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        45.3 seconds, 76.9%
Fitness Testing:      8.4 seconds, 14.3%
Report:               5.1 seconds,  8.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Smallest problem report - generation 22
Test total error for best: 670
Test mean error for best: 0.67000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -96                 | Program output: -961               
Correct output: 38                  | Program output: 63                 
Correct output: -79                 | Program output: -79                
Correct output: -57                 | Program output: -57                
Correct output: -24                 | Program output: 71                 
Correct output: -27                 | Program output: -271               
Correct output: -92                 | Program output: -92                
Correct output: -53                 | Program output: 68                 
Correct output: -92                 | Program output: -92                
Correct output: -33                 | Program output: -33                
Correct output: 1                   | Program output: 1                  
Correct output: -94                 | Program output: -94                
Correct output: -49                 | Program output: -49                
Correct output: 0                   | Program output: 0                  
Correct output: -23                 | Program output: -23                
Correct output: 12                  | Program output: 23                 
Correct output: 22                  | Program output: 31                 
Correct output: 15                  | Program output: 91                 
Correct output: 35                  | Program output: 48                 
Correct output: 25                  | Program output: 25                 
Correct output: 35                  | Program output: 65                 
Correct output: 5                   | Program output: 88                 
Correct output: 33                  | Program output: 74                 
Correct output: 25                  | Program output: 86                 
Correct output: 0                   | Program output: 60                 
Correct output: 19                  | Program output: 46                 
Correct output: 7                   | Program output: 7                  
Correct output: 1                   | Program output: 45                 
Correct output: 0                   | Program output: 0                  
Correct output: 18                  | Program output: 81                 
Correct output: 3                   | Program output: 3                  
Correct output: 19                  | Program output: 27                 
Correct output: 32                  | Program output: 41                 
Correct output: 23                  | Program output: 100                
Correct output: 11                  | Program output: 11                 
Correct output: -91                 | Program output: -91                
Correct output: -74                 | Program output: -34                
Correct output: -4                  | Program output: -413               
Correct output: -81                 | Program output: -81                
Correct output: -93                 | Program output: -93                
Correct output: -29                 | Program output: -291               
Correct output: -21                 | Program output: -21                
Correct output: -91                 | Program output: -8                 
Correct output: -25                 | Program output: -218               
Correct output: -64                 | Program output: -38                
Correct output: -81                 | Program output: -81                
Correct output: -40                 | Program output: -40                
Correct output: -50                 | Program output: -5085              
Correct output: -95                 | Program output: -95                
Correct output: -66                 | Program output: -61                
Correct output: -35                 | Program output: -35                
Correct output: -94                 | Program output: -2                 
Correct output: -59                 | Program output: -49                
Correct output: -27                 | Program output: -27                
Correct output: -95                 | Program output: -21                
Correct output: -72                 | Program output: -72                
Correct output: -62                 | Program output: -62                
Correct output: -70                 | Program output: -701               
Correct output: -77                 | Program output: -3                 
Correct output: -63                 | Program output: -581               
Correct output: -97                 | Program output: -971               
Correct output: -62                 | Program output: -32                
Correct output: -29                 | Program output: -11                
Correct output: -16                 | Program output: -11                
Correct output: -89                 | Program output: 641                
Correct output: 7                   | Program output: 7                  
Correct output: -87                 | Program output: 511                
Correct output: -89                 | Program output: -891               
Correct output: -68                 | Program output: -68                
Correct output: -82                 | Program output: -82                
Correct output: -88                 | Program output: 77                 
Correct output: -83                 | Program output: -1                 
Correct output: -38                 | Program output: -3820              
Correct output: -69                 | Program output: -17                
Correct output: -56                 | Program output: -56                
Correct output: -59                 | Program output: -59                
Correct output: -85                 | Program output: -8591              
Correct output: -57                 | Program output: -5725              
Correct output: -78                 | Program output: -78                
Correct output: -75                 | Program output: -64                
Correct output: -32                 | Program output: -32                
Correct output: -80                 | Program output: 251                
Correct output: -81                 | Program output: -81                
Correct output: -87                 | Program output: -72                
Correct output: 27                  | Program output: 69                 
Correct output: -87                 | Program output: -877               
Correct output: -55                 | Program output: 361                
Correct output: 18                  | Program output: 99                 
Correct output: 8                   | Program output: 8                  
Correct output: -84                 | Program output: -63                
Correct output: -100                | Program output: -100               
Correct output: -71                 | Program output: -7164              
Correct output: -59                 | Program output: -59                
Correct output: -82                 | Program output: -82                
Correct output: -18                 | Program output: 40                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_when} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction in2} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_max} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_do*times} {:close 0, :instruction tagged_997} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup_times} {:close 3, :instruction integer_fromboolean} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction in2} {:close 1, :instruction boolean_or} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_k} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_flush} {:close 0, :instruction tag_exec_825} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_div} {:close 1, :instruction exec_y} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_flush})
Lexicase best program: (exec_when () boolean_frominteger integer_dup_times exec_dup (boolean_shove in3 in2) boolean_or integer_max integer_yankdup integer_swap exec_k (in1 integer_min boolean_invert_first_then_and boolean_invert_second_then_and) (exec_flush) exec_do*times (tagged_997 print_integer boolean_rot integer_mult exec_dup_times (integer_fromboolean)) boolean_yankdup integer_sub in2 boolean_or integer_fromboolean boolean_eq exec_k (integer_rot integer_inc boolean_yank) (exec_eq exec_pop (exec_rot (integer_empty) (boolean_xor exec_do*times () exec_do*while (integer_gt boolean_flush tag_exec_825 (boolean_dup_times exec_when (integer_div exec_y () exec_while () boolean_flush)))) ())))
Lexicase best errors: [1 0 0 0 0 0 0 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 69
Percent parens: 0.275
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_when} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction in2} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_max} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_do*times} {:close 0, :instruction tagged_997} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup_times} {:close 3, :instruction integer_fromboolean} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction in2} {:close 1, :instruction boolean_or} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_k} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_flush} {:close 0, :instruction tag_exec_825} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_div} {:close 1, :instruction exec_y} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_flush})
Zero cases best program: (exec_when () boolean_frominteger integer_dup_times exec_dup (boolean_shove in3 in2) boolean_or integer_max integer_yankdup integer_swap exec_k (in1 integer_min boolean_invert_first_then_and boolean_invert_second_then_and) (exec_flush) exec_do*times (tagged_997 print_integer boolean_rot integer_mult exec_dup_times (integer_fromboolean)) boolean_yankdup integer_sub in2 boolean_or integer_fromboolean boolean_eq exec_k (integer_rot integer_inc boolean_yank) (exec_eq exec_pop (exec_rot (integer_empty) (boolean_xor exec_do*times () exec_do*while (integer_gt boolean_flush tag_exec_825 (boolean_dup_times exec_when (integer_div exec_y () exec_while () boolean_flush)))) ())))
Zero cases best errors: [1 0 0 0 0 0 0 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 69
Percent parens: 0.275
--- Lexicase Population Statistics ---
Count of elite individuals by case: (483 887 322 13 440 776 480 469 195 459)
Population mean number of elite cases: 4.52
Count of perfect (error zero) individuals by case: (483 887 322 13 440 776 480 469 195 459)
Population mean number of perfect (error zero) cases: 4.52
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_s} {:close 1, :instruction print_boolean} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction in2} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_max} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in4} {:close 0, :instruction exec_k} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in4} {:close 0, :instruction exec_k} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 0, :instruction in3} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_do*times} {:close 0, :instruction tagged_997} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup_times} {:close 3, :instruction integer_fromboolean} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_or} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_k} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_flush} {:close 0, :instruction tag_exec_825} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_flush} {:close 0, :instruction tag_exec_825} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_div} {:close 1, :instruction exec_y} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_flush})
Best program: (exec_s (print_boolean) (boolean_frominteger) (integer_fromboolean in2) boolean_or integer_max integer_yankdup in4 exec_k (in1 integer_yankdup in4 exec_k (in1 exec_rot (in3 boolean_invert_second_then_and) (exec_flush) (exec_do*times (tagged_997 print_integer boolean_rot integer_mult exec_dup_times (integer_fromboolean))) boolean_yankdup integer_sub) (integer_stackdepth boolean_or) integer_fromboolean) (boolean_eq) exec_k (integer_rot integer_inc boolean_yank) (exec_eq exec_pop (exec_rot (integer_empty) (boolean_xor exec_do*times () exec_do*while (integer_gt boolean_flush tag_exec_825 (boolean_dup_times exec_when (integer_gt boolean_flush tag_exec_825 (boolean_dup_times exec_when (integer_div exec_y () exec_while () boolean_flush)))))) ())))
Errors: [0 0 1 1 0 0 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 57
Size: 84
Percent parens: 0.321
--- Population Statistics ---
Average total errors in population: 5.476
Median total errors in population: 5
Error averages by case: (0.517 0.113 0.678 0.987 0.56 0.224 0.52 0.531 0.805 0.541)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 48.277
Average program size in population (points): 68.233
Average percent parens in population: 0.292
Minimum age in population: 33.02823448181152
Maximum age in population: 36.05279159545898
Average age in population: 34.86499163150787
Median age in population: 34.99202680587769
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 71
Genome diversity (% unique genomes):	 0.649
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 81
Syntactic diversity (% unique Push programs):	 0.631
Total error diversity:				 0.009
Error (vector) diversity:			 0.044
Behavioral diversity:				 0.098
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 7285191
--- Timings ---
Current time: 1559314701104 milliseconds
Total Time:          62.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        47.1 seconds, 75.9%
Fitness Testing:      9.2 seconds, 14.9%
Report:               5.6 seconds,  9.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
;;******************************
;; -*- Smallest problem report - generation 23
Test total error for best: 409
Test mean error for best: 0.40900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -96                 | Program output: -96                
Correct output: 38                  | Program output: 63                 
Correct output: -79                 | Program output: -79                
Correct output: -57                 | Program output: -57                
Correct output: -24                 | Program output: -24                
Correct output: -27                 | Program output: -27                
Correct output: -92                 | Program output: -92                
Correct output: -53                 | Program output: -53                
Correct output: -92                 | Program output: -92                
Correct output: -33                 | Program output: -33                
Correct output: 1                   | Program output: 1                  
Correct output: -94                 | Program output: -94                
Correct output: -49                 | Program output: -49                
Correct output: 0                   | Program output: 0                  
Correct output: -23                 | Program output: -23                
Correct output: 12                  | Program output: 12                 
Correct output: 22                  | Program output: 53                 
Correct output: 15                  | Program output: 15                 
Correct output: 35                  | Program output: 54                 
Correct output: 25                  | Program output: 32                 
Correct output: 35                  | Program output: 35                 
Correct output: 5                   | Program output: 32                 
Correct output: 33                  | Program output: 95                 
Correct output: 25                  | Program output: 42                 
Correct output: 0                   | Program output: 0                  
Correct output: 19                  | Program output: 21                 
Correct output: 7                   | Program output: 52                 
Correct output: 1                   | Program output: 26                 
Correct output: 0                   | Program output: 0                  
Correct output: 18                  | Program output: 18                 
Correct output: 3                   | Program output: 9                  
Correct output: 19                  | Program output: 91                 
Correct output: 32                  | Program output: 32                 
Correct output: 23                  | Program output: 23                 
Correct output: 11                  | Program output: 49                 
Correct output: -91                 | Program output: -91                
Correct output: -74                 | Program output: -74                
Correct output: -4                  | Program output: 67                 
Correct output: -81                 | Program output: -81                
Correct output: -93                 | Program output: -93                
Correct output: -29                 | Program output: -23                
Correct output: -21                 | Program output: -21                
Correct output: -91                 | Program output: -91                
Correct output: -25                 | Program output: -25                
Correct output: -64                 | Program output: -64                
Correct output: -81                 | Program output: -81                
Correct output: -40                 | Program output: -40                
Correct output: -50                 | Program output: 5                  
Correct output: -95                 | Program output: -95                
Correct output: -66                 | Program output: -66                
Correct output: -35                 | Program output: -35                
Correct output: -94                 | Program output: -2                 
Correct output: -59                 | Program output: -54                
Correct output: -27                 | Program output: -27                
Correct output: -95                 | Program output: -21                
Correct output: -72                 | Program output: -72                
Correct output: -62                 | Program output: -62                
Correct output: -70                 | Program output: -16                
Correct output: -77                 | Program output: -3                 
Correct output: -63                 | Program output: -46                
Correct output: -97                 | Program output: -48                
Correct output: -62                 | Program output: -32                
Correct output: -29                 | Program output: -11                
Correct output: -16                 | Program output: -16                
Correct output: -89                 | Program output: -42                
Correct output: 7                   | Program output: 42                 
Correct output: -87                 | Program output: -87                
Correct output: -89                 | Program output: -75                
Correct output: -68                 | Program output: -68                
Correct output: -82                 | Program output: -82                
Correct output: -88                 | Program output: -88                
Correct output: -83                 | Program output: -83                
Correct output: -38                 | Program output: -35                
Correct output: -69                 | Program output: -17                
Correct output: -56                 | Program output: -56                
Correct output: -59                 | Program output: -59                
Correct output: -85                 | Program output: -1                 
Correct output: -57                 | Program output: 29                 
Correct output: -78                 | Program output: -78                
Correct output: -75                 | Program output: -75                
Correct output: -32                 | Program output: -32                
Correct output: -80                 | Program output: -80                
Correct output: -81                 | Program output: -81                
Correct output: -87                 | Program output: -72                
Correct output: 27                  | Program output: 27                 
Correct output: -87                 | Program output: -19                
Correct output: -55                 | Program output: -55                
Correct output: 18                  | Program output: 28                 
Correct output: 8                   | Program output: 90                 
Correct output: -84                 | Program output: -63                
Correct output: -100                | Program output: -100               
Correct output: -71                 | Program output: 86                 
Correct output: -59                 | Program output: -59                
Correct output: -82                 | Program output: -82                
Correct output: -18                 | Program output: -18                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_when} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction in2} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_max} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_do*times} {:close 0, :instruction tagged_997} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup_times} {:close 3, :instruction integer_fromboolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_flush} {:close 0, :instruction tag_exec_825} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_div} {:close 1, :instruction exec_y} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_flush})
Lexicase best program: (exec_when () boolean_frominteger integer_dup_times exec_dup (boolean_shove in3 in2) boolean_or integer_max integer_yankdup integer_swap exec_k (in1 integer_min boolean_invert_first_then_and boolean_invert_second_then_and) (exec_flush) exec_do*times (tagged_997 print_integer boolean_rot integer_mult exec_dup_times (integer_fromboolean)) boolean_yankdup integer_rot integer_inc boolean_yank exec_eq boolean_stackdepth exec_rot (integer_empty) (boolean_xor exec_do*times () exec_do*while (integer_gt boolean_flush tag_exec_825 (boolean_dup_times exec_when (integer_div exec_y () exec_while () boolean_flush)))) ())
Lexicase best errors: [0 0 1 0 0 0 1 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 60
Percent parens: 0.267
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_when} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction in2} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_max} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_do*times} {:close 0, :instruction tagged_997} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup_times} {:close 3, :instruction integer_fromboolean} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_flush} {:close 0, :instruction tag_exec_825} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_div} {:close 1, :instruction exec_y} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_flush})
Zero cases best program: (exec_when () boolean_frominteger integer_dup_times exec_dup (boolean_shove in3 in2) boolean_or integer_max integer_yankdup integer_swap exec_k (in1 integer_min boolean_invert_first_then_and boolean_invert_second_then_and) (exec_flush) exec_do*times (tagged_997 print_integer boolean_rot integer_mult exec_dup_times (integer_fromboolean)) boolean_yankdup integer_rot integer_inc boolean_yank exec_eq boolean_stackdepth exec_rot (integer_empty) (boolean_xor exec_do*times () exec_do*while (integer_gt boolean_flush tag_exec_825 (boolean_dup_times exec_when (integer_div exec_y () exec_while () boolean_flush)))) ())
Zero cases best errors: [0 0 1 0 0 0 1 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 60
Percent parens: 0.267
--- Lexicase Population Statistics ---
Count of elite individuals by case: (380 904 47 893 187 187 108 200 784 116)
Population mean number of elite cases: 3.81
Count of perfect (error zero) individuals by case: (380 904 47 893 187 187 108 200 784 116)
Population mean number of perfect (error zero) cases: 3.81
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_when} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction in2} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_max} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_do*times} {:close 0, :instruction tagged_997} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup_times} {:close 3, :instruction integer_fromboolean} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction in2} {:close 1, :instruction boolean_or} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_k} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_flush} {:close 0, :instruction tag_exec_825} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_div} {:close 1, :instruction exec_y} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_flush})
Best program: (exec_when () boolean_frominteger integer_dup_times exec_dup (boolean_shove in3 in2) boolean_or integer_max integer_yankdup integer_swap exec_k (in1 integer_min boolean_invert_first_then_and boolean_invert_second_then_and) (exec_flush) exec_do*times (tagged_997 print_integer boolean_rot integer_mult exec_dup_times (integer_fromboolean)) boolean_yankdup integer_sub in2 boolean_or integer_fromboolean boolean_eq exec_k (integer_rot integer_inc boolean_yank) (exec_eq exec_pop (exec_rot (integer_empty) (boolean_xor exec_do*times () exec_do*while (integer_gt boolean_flush tag_exec_825 (boolean_dup_times exec_when (integer_div exec_y () exec_while () boolean_flush)))) ())))
Errors: [0 0 1 0 0 0 1 0 0 1]
Total: 3
Mean: 0.3
Genome size: 50
Size: 69
Percent parens: 0.275
--- Population Statistics ---
Average total errors in population: 6.194
Median total errors in population: 6
Error averages by case: (0.62 0.096 0.953 0.107 0.813 0.813 0.892 0.8 0.216 0.884)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 49.435
Average program size in population (points): 70.444
Average percent parens in population: 0.296
Minimum age in population: 34.30510520935059
Maximum age in population: 38.05279159545898
Average age in population: 36.86416025590897
Median age in population: 36.92894840240479
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 111
Genome diversity (% unique genomes):	 0.58
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 115
Syntactic diversity (% unique Push programs):	 0.569
Total error diversity:				 0.008
Error (vector) diversity:			 0.029
Behavioral diversity:				 0.093
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 8216743
--- Timings ---
Current time: 1559314704397 milliseconds
Total Time:          65.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        48.9 seconds, 74.8%
Fitness Testing:     10.1 seconds, 15.4%
Report:               6.3 seconds,  9.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
;;******************************
;; -*- Smallest problem report - generation 24
Test total error for best: 356
Test mean error for best: 0.35600
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 1
Test Case    9 | Error: 1
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 1
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 1
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 1
Test Case   29 | Error: 0
Test Case   30 | Error: 1
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 1
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 1
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 1
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 1
Test Case   48 | Error: 1
Test Case   49 | Error: 0
Test Case   50 | Error: 1
Test Case   51 | Error: 1
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 1
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 1
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 1
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 1
Test Case   98 | Error: 0
Test Case   99 | Error: 1
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 1
Test Case  201 | Error: 1
Test Case  202 | Error: 1
Test Case  203 | Error: 1
Test Case  204 | Error: 0
Test Case  205 | Error: 1
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 1
Test Case  209 | Error: 1
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 1
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 1
Test Case  220 | Error: 1
Test Case  221 | Error: 1
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 1
Test Case  225 | Error: 1
Test Case  226 | Error: 0
Test Case  227 | Error: 1
Test Case  228 | Error: 0
Test Case  229 | Error: 1
Test Case  230 | Error: 1
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 1
Test Case  234 | Error: 1
Test Case  235 | Error: 1
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 1
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 1
Test Case  247 | Error: 0
Test Case  248 | Error: 1
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 1
Test Case  252 | Error: 0
Test Case  253 | Error: 1
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 1
Test Case  259 | Error: 1
Test Case  260 | Error: 1
Test Case  261 | Error: 1
Test Case  262 | Error: 0
Test Case  263 | Error: 1
Test Case  264 | Error: 0
Test Case  265 | Error: 1
Test Case  266 | Error: 0
Test Case  267 | Error: 1
Test Case  268 | Error: 1
Test Case  269 | Error: 1
Test Case  270 | Error: 1
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 1
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 1
Test Case  281 | Error: 1
Test Case  282 | Error: 1
Test Case  283 | Error: 0
Test Case  284 | Error: 1
Test Case  285 | Error: 0
Test Case  286 | Error: 1
Test Case  287 | Error: 1
Test Case  288 | Error: 1
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 1
Test Case  293 | Error: 1
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 1
Test Case  297 | Error: 1
Test Case  298 | Error: 1
Test Case  299 | Error: 1
Test Case  300 | Error: 0
Test Case  301 | Error: 1
Test Case  302 | Error: 1
Test Case  303 | Error: 1
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 1
Test Case  307 | Error: 0
Test Case  308 | Error: 1
Test Case  309 | Error: 1
Test Case  310 | Error: 1
Test Case  311 | Error: 1
Test Case  312 | Error: 1
Test Case  313 | Error: 1
Test Case  314 | Error: 1
Test Case  315 | Error: 1
Test Case  316 | Error: 0
Test Case  317 | Error: 1
Test Case  318 | Error: 1
Test Case  319 | Error: 1
Test Case  320 | Error: 0
Test Case  321 | Error: 1
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 1
Test Case  325 | Error: 1
Test Case  326 | Error: 1
Test Case  327 | Error: 0
Test Case  328 | Error: 1
Test Case  329 | Error: 1
Test Case  330 | Error: 0
Test Case  331 | Error: 1
Test Case  332 | Error: 1
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 1
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 1
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 1
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 1
Test Case  350 | Error: 1
Test Case  351 | Error: 1
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 1
Test Case  355 | Error: 1
Test Case  356 | Error: 0
Test Case  357 | Error: 1
Test Case  358 | Error: 1
Test Case  359 | Error: 1
Test Case  360 | Error: 1
Test Case  361 | Error: 0
Test Case  362 | Error: 1
Test Case  363 | Error: 1
Test Case  364 | Error: 1
Test Case  365 | Error: 1
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 1
Test Case  369 | Error: 1
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 1
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 1
Test Case  380 | Error: 1
Test Case  381 | Error: 1
Test Case  382 | Error: 1
Test Case  383 | Error: 1
Test Case  384 | Error: 0
Test Case  385 | Error: 1
Test Case  386 | Error: 1
Test Case  387 | Error: 1
Test Case  388 | Error: 1
Test Case  389 | Error: 1
Test Case  390 | Error: 1
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 1
Test Case  397 | Error: 0
Test Case  398 | Error: 1
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 1
Test Case  404 | Error: 0
Test Case  405 | Error: 1
Test Case  406 | Error: 0
Test Case  407 | Error: 1
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 1
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 1
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 1
Test Case  422 | Error: 0
Test Case  423 | Error: 1
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 1
Test Case  431 | Error: 1
Test Case  432 | Error: 0
Test Case  433 | Error: 1
Test Case  434 | Error: 1
Test Case  435 | Error: 1
Test Case  436 | Error: 1
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 1
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 1
Test Case  446 | Error: 1
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 1
Test Case  453 | Error: 1
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 1
Test Case  461 | Error: 0
Test Case  462 | Error: 1
Test Case  463 | Error: 0
Test Case  464 | Error: 1
Test Case  465 | Error: 1
Test Case  466 | Error: 1
Test Case  467 | Error: 1
Test Case  468 | Error: 0
Test Case  469 | Error: 1
Test Case  470 | Error: 0
Test Case  471 | Error: 1
Test Case  472 | Error: 1
Test Case  473 | Error: 1
Test Case  474 | Error: 1
Test Case  475 | Error: 1
Test Case  476 | Error: 0
Test Case  477 | Error: 1
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 1
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 1
Test Case  485 | Error: 1
Test Case  486 | Error: 1
Test Case  487 | Error: 1
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 1
Test Case  491 | Error: 1
Test Case  492 | Error: 1
Test Case  493 | Error: 1
Test Case  494 | Error: 1
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 1
Test Case  500 | Error: 1
Test Case  501 | Error: 0
Test Case  502 | Error: 1
Test Case  503 | Error: 1
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 1
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 1
Test Case  513 | Error: 0
Test Case  514 | Error: 1
Test Case  515 | Error: 1
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 1
Test Case  521 | Error: 1
Test Case  522 | Error: 0
Test Case  523 | Error: 1
Test Case  524 | Error: 1
Test Case  525 | Error: 1
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 1
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 1
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 1
Test Case  543 | Error: 1
Test Case  544 | Error: 1
Test Case  545 | Error: 1
Test Case  546 | Error: 0
Test Case  547 | Error: 1
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 1
Test Case  552 | Error: 1
Test Case  553 | Error: 0
Test Case  554 | Error: 1
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 1
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 1
Test Case  563 | Error: 0
Test Case  564 | Error: 1
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 1
Test Case  568 | Error: 1
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 1
Test Case  572 | Error: 1
Test Case  573 | Error: 1
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 1
Test Case  577 | Error: 1
Test Case  578 | Error: 0
Test Case  579 | Error: 1
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 1
Test Case  586 | Error: 1
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 1
Test Case  593 | Error: 1
Test Case  594 | Error: 0
Test Case  595 | Error: 1
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 1
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 1
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 1
Test Case  611 | Error: 1
Test Case  612 | Error: 1
Test Case  613 | Error: 1
Test Case  614 | Error: 1
Test Case  615 | Error: 0
Test Case  616 | Error: 1
Test Case  617 | Error: 0
Test Case  618 | Error: 1
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 1
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 1
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 1
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 1
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 1
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 1
Test Case  642 | Error: 1
Test Case  643 | Error: 1
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 1
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 1
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 1
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 1
Test Case  663 | Error: 1
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 1
Test Case  670 | Error: 1
Test Case  671 | Error: 1
Test Case  672 | Error: 1
Test Case  673 | Error: 1
Test Case  674 | Error: 1
Test Case  675 | Error: 0
Test Case  676 | Error: 1
Test Case  677 | Error: 0
Test Case  678 | Error: 1
Test Case  679 | Error: 0
Test Case  680 | Error: 1
Test Case  681 | Error: 1
Test Case  682 | Error: 1
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 1
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 1
Test Case  689 | Error: 1
Test Case  690 | Error: 0
Test Case  691 | Error: 1
Test Case  692 | Error: 1
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 1
Test Case  696 | Error: 1
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 1
Test Case  708 | Error: 1
Test Case  709 | Error: 0
Test Case  710 | Error: 1
Test Case  711 | Error: 0
Test Case  712 | Error: 1
Test Case  713 | Error: 0
Test Case  714 | Error: 1
Test Case  715 | Error: 1
Test Case  716 | Error: 1
Test Case  717 | Error: 1
Test Case  718 | Error: 0
Test Case  719 | Error: 1
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 1
Test Case  723 | Error: 1
Test Case  724 | Error: 1
Test Case  725 | Error: 1
Test Case  726 | Error: 0
Test Case  727 | Error: 1
Test Case  728 | Error: 1
Test Case  729 | Error: 1
Test Case  730 | Error: 0
Test Case  731 | Error: 1
Test Case  732 | Error: 1
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 1
Test Case  736 | Error: 0
Test Case  737 | Error: 1
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 1
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 1
Test Case  746 | Error: 1
Test Case  747 | Error: 1
Test Case  748 | Error: 0
Test Case  749 | Error: 1
Test Case  750 | Error: 0
Test Case  751 | Error: 1
Test Case  752 | Error: 0
Test Case  753 | Error: 1
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 1
Test Case  758 | Error: 1
Test Case  759 | Error: 1
Test Case  760 | Error: 0
Test Case  761 | Error: 1
Test Case  762 | Error: 0
Test Case  763 | Error: 1
Test Case  764 | Error: 1
Test Case  765 | Error: 1
Test Case  766 | Error: 1
Test Case  767 | Error: 1
Test Case  768 | Error: 1
Test Case  769 | Error: 1
Test Case  770 | Error: 1
Test Case  771 | Error: 0
Test Case  772 | Error: 1
Test Case  773 | Error: 1
Test Case  774 | Error: 0
Test Case  775 | Error: 1
Test Case  776 | Error: 1
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 1
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 1
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 1
Test Case  793 | Error: 1
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 1
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 1
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 1
Test Case  805 | Error: 1
Test Case  806 | Error: 1
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 1
Test Case  813 | Error: 1
Test Case  814 | Error: 0
Test Case  815 | Error: 1
Test Case  816 | Error: 0
Test Case  817 | Error: 1
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 1
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 1
Test Case  833 | Error: 1
Test Case  834 | Error: 1
Test Case  835 | Error: 1
Test Case  836 | Error: 0
Test Case  837 | Error: 1
Test Case  838 | Error: 1
Test Case  839 | Error: 1
Test Case  840 | Error: 1
Test Case  841 | Error: 0
Test Case  842 | Error: 1
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 1
Test Case  855 | Error: 1
Test Case  856 | Error: 1
Test Case  857 | Error: 1
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 1
Test Case  862 | Error: 1
Test Case  863 | Error: 1
Test Case  864 | Error: 0
Test Case  865 | Error: 1
Test Case  866 | Error: 1
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 1
Test Case  874 | Error: 0
Test Case  875 | Error: 1
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 1
Test Case  884 | Error: 1
Test Case  885 | Error: 1
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 1
Test Case  894 | Error: 0
Test Case  895 | Error: 1
Test Case  896 | Error: 0
Test Case  897 | Error: 1
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 1
Test Case  904 | Error: 1
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 1
Test Case  910 | Error: 1
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 1
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 1
Test Case  929 | Error: 1
Test Case  930 | Error: 1
Test Case  931 | Error: 0
Test Case  932 | Error: 1
Test Case  933 | Error: 1
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 1
Test Case  939 | Error: 0
Test Case  940 | Error: 1
Test Case  941 | Error: 1
Test Case  942 | Error: 0
Test Case  943 | Error: 1
Test Case  944 | Error: 1
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 1
Test Case  948 | Error: 1
Test Case  949 | Error: 0
Test Case  950 | Error: 1
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 1
Test Case  954 | Error: 1
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 1
Test Case  962 | Error: 0
Test Case  963 | Error: 1
Test Case  964 | Error: 1
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 1
Test Case  970 | Error: 1
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 1
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 1
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 1
Test Case  990 | Error: 1
Test Case  991 | Error: 0
Test Case  992 | Error: 1
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 1
Test Case  996 | Error: 0
Test Case  997 | Error: 1
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -96                 | Program output: -96                
Correct output: 38                  | Program output: 38                 
Correct output: -79                 | Program output: -79                
Correct output: -57                 | Program output: -57                
Correct output: -24                 | Program output: -24                
Correct output: -27                 | Program output: -27                
Correct output: -92                 | Program output: -92                
Correct output: -53                 | Program output: -53                
Correct output: -92                 | Program output: -92                
Correct output: -33                 | Program output: -33                
Correct output: 1                   | Program output: 1                  
Correct output: -94                 | Program output: -94                
Correct output: -49                 | Program output: -49                
Correct output: 0                   | Program output: 0                  
Correct output: -23                 | Program output: -23                
Correct output: 12                  | Program output: 31                 
Correct output: 22                  | Program output: 22                 
Correct output: 15                  | Program output: 56                 
Correct output: 35                  | Program output: 35                 
Correct output: 25                  | Program output: 68                 
Correct output: 35                  | Program output: 59                 
Correct output: 5                   | Program output: 5                  
Correct output: 33                  | Program output: 33                 
Correct output: 25                  | Program output: 25                 
Correct output: 0                   | Program output: 0                  
Correct output: 19                  | Program output: 19                 
Correct output: 7                   | Program output: 11                 
Correct output: 1                   | Program output: 1                  
Correct output: 0                   | Program output: 0                  
Correct output: 18                  | Program output: 68                 
Correct output: 3                   | Program output: 7                  
Correct output: 19                  | Program output: 19                 
Correct output: 32                  | Program output: 46                 
Correct output: 23                  | Program output: 57                 
Correct output: 11                  | Program output: 76                 
Correct output: -91                 | Program output: -91                
Correct output: -74                 | Program output: -74                
Correct output: -4                  | Program output: 13                 
Correct output: -81                 | Program output: -81                
Correct output: -93                 | Program output: -93                
Correct output: -29                 | Program output: -23                
Correct output: -21                 | Program output: -21                
Correct output: -91                 | Program output: -8                 
Correct output: -25                 | Program output: -25                
Correct output: -64                 | Program output: -64                
Correct output: -81                 | Program output: -81                
Correct output: -40                 | Program output: -40                
Correct output: -50                 | Program output: 17                 
Correct output: -95                 | Program output: -95                
Correct output: -66                 | Program output: -66                
Correct output: -35                 | Program output: -35                
Correct output: -94                 | Program output: -39                
Correct output: -59                 | Program output: -54                
Correct output: -27                 | Program output: -27                
Correct output: -95                 | Program output: -95                
Correct output: -72                 | Program output: -72                
Correct output: -62                 | Program output: -62                
Correct output: -70                 | Program output: -16                
Correct output: -77                 | Program output: -77                
Correct output: -63                 | Program output: -46                
Correct output: -97                 | Program output: -48                
Correct output: -62                 | Program output: -32                
Correct output: -29                 | Program output: -18                
Correct output: -16                 | Program output: -11                
Correct output: -89                 | Program output: -42                
Correct output: 7                   | Program output: 79                 
Correct output: -87                 | Program output: -87                
Correct output: -89                 | Program output: -75                
Correct output: -68                 | Program output: -68                
Correct output: -82                 | Program output: -82                
Correct output: -88                 | Program output: -88                
Correct output: -83                 | Program output: -1                 
Correct output: -38                 | Program output: -35                
Correct output: -69                 | Program output: -69                
Correct output: -56                 | Program output: -56                
Correct output: -59                 | Program output: -59                
Correct output: -85                 | Program output: -1                 
Correct output: -57                 | Program output: 25                 
Correct output: -78                 | Program output: -78                
Correct output: -75                 | Program output: -64                
Correct output: -32                 | Program output: -32                
Correct output: -80                 | Program output: -80                
Correct output: -81                 | Program output: -81                
Correct output: -87                 | Program output: -72                
Correct output: 27                  | Program output: 56                 
Correct output: -87                 | Program output: -19                
Correct output: -55                 | Program output: -55                
Correct output: 18                  | Program output: 18                 
Correct output: 8                   | Program output: 13                 
Correct output: -84                 | Program output: -84                
Correct output: -100                | Program output: -100               
Correct output: -71                 | Program output: 64                 
Correct output: -59                 | Program output: -59                
Correct output: -82                 | Program output: -82                
Correct output: -18                 | Program output: -18                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_when} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction in2} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_max} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_do*times} {:close 0, :instruction tagged_997} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup_times} {:close 3, :instruction integer_fromboolean} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction in2} {:close 1, :instruction boolean_or} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_k} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_flush} {:close 0, :instruction tag_exec_825} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_div} {:close 1, :instruction exec_y} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_flush})
Lexicase best program: (exec_when () boolean_frominteger integer_dup_times exec_dup (boolean_shove in3 in2) boolean_or integer_max integer_yankdup integer_swap exec_k (in1 integer_min boolean_invert_first_then_and boolean_invert_second_then_and) (exec_flush) integer_swap exec_k (in1 integer_min boolean_invert_first_then_and boolean_invert_second_then_and) (exec_flush) exec_do*times (tagged_997 print_integer boolean_rot integer_mult exec_dup_times (integer_fromboolean)) boolean_yankdup integer_sub in2 boolean_or integer_fromboolean boolean_eq exec_k (integer_rot integer_inc boolean_yank) (exec_eq exec_pop (exec_rot (integer_empty) (boolean_xor exec_do*times () exec_do*while (integer_gt boolean_flush tag_exec_825 (boolean_dup_times exec_when (integer_div exec_y () exec_while () boolean_flush)))) ())))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 78
Percent parens: 0.269
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_when} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction in2} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_max} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_do*times} {:close 0, :instruction tagged_997} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup_times} {:close 3, :instruction integer_fromboolean} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction in2} {:close 1, :instruction boolean_or} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_k} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_flush} {:close 0, :instruction tag_exec_825} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_div} {:close 1, :instruction exec_y} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_flush})
Zero cases best program: (exec_when () boolean_frominteger integer_dup_times exec_dup (boolean_shove in3 in2) boolean_or integer_max integer_yankdup integer_swap exec_k (in1 integer_min boolean_invert_first_then_and boolean_invert_second_then_and) (exec_flush) integer_swap exec_k (in1 integer_min boolean_invert_first_then_and boolean_invert_second_then_and) (exec_flush) exec_do*times (tagged_997 print_integer boolean_rot integer_mult exec_dup_times (integer_fromboolean)) boolean_yankdup integer_sub in2 boolean_or integer_fromboolean boolean_eq exec_k (integer_rot integer_inc boolean_yank) (exec_eq exec_pop (exec_rot (integer_empty) (boolean_xor exec_do*times () exec_do*while (integer_gt boolean_flush tag_exec_825 (boolean_dup_times exec_when (integer_div exec_y () exec_while () boolean_flush)))) ())))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 78
Percent parens: 0.269
--- Lexicase Population Statistics ---
Count of elite individuals by case: (134 800 459 506 383 800 532 48 903 503)
Population mean number of elite cases: 5.07
Count of perfect (error zero) individuals by case: (134 800 459 506 383 800 532 48 903 503)
Population mean number of perfect (error zero) cases: 5.07
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_when} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction in2} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_max} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_do*times} {:close 0, :instruction tagged_997} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup_times} {:close 3, :instruction integer_fromboolean} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction in2} {:close 1, :instruction boolean_or} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_k} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_flush} {:close 0, :instruction tag_exec_825} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_div} {:close 1, :instruction exec_y} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_flush})
Best program: (exec_when () boolean_frominteger integer_dup_times exec_dup (boolean_shove in3 in2) boolean_or integer_max integer_yankdup integer_swap exec_k (in1 integer_min boolean_invert_first_then_and boolean_invert_second_then_and) (exec_flush) integer_swap exec_k (in1 integer_min boolean_invert_first_then_and boolean_invert_second_then_and) (exec_flush) exec_do*times (tagged_997 print_integer boolean_rot integer_mult exec_dup_times (integer_fromboolean)) boolean_yankdup integer_sub in2 boolean_or integer_fromboolean boolean_eq exec_k (integer_rot integer_inc boolean_yank) (exec_eq exec_pop (exec_rot (integer_empty) (boolean_xor exec_do*times () exec_do*while (integer_gt boolean_flush tag_exec_825 (boolean_dup_times exec_when (integer_div exec_y () exec_while () boolean_flush)))) ())))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 57
Size: 78
Percent parens: 0.269
--- Population Statistics ---
Average total errors in population: 4.932
Median total errors in population: 5
Error averages by case: (0.866 0.2 0.541 0.494 0.617 0.2 0.468 0.952 0.097 0.497)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 48.683
Average program size in population (points): 68.517
Average percent parens in population: 0.289
Minimum age in population: 35.30510520935059
Maximum age in population: 39.61586999893188
Average age in population: 38.33146900606155
Median age in population: 38.42894840240479
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 87
Genome diversity (% unique genomes):	 0.603
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 88
Syntactic diversity (% unique Push programs):	 0.59
Total error diversity:				 0.011
Error (vector) diversity:			 0.03
Behavioral diversity:				 0.1
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 9127274
--- Timings ---
Current time: 1559314707609 milliseconds
Total Time:          68.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        50.8 seconds, 73.9%
Fitness Testing:     10.9 seconds, 15.9%
Report:               7.0 seconds, 10.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 24
Successful program: (exec_when () boolean_frominteger integer_dup_times exec_dup (boolean_shove in3 in2) boolean_or integer_max integer_yankdup integer_swap exec_k (in1 integer_min boolean_invert_first_then_and boolean_invert_second_then_and) (exec_flush) integer_swap exec_k (in1 integer_min boolean_invert_first_then_and boolean_invert_second_then_and) (exec_flush) exec_do*times (tagged_997 print_integer boolean_rot integer_mult exec_dup_times (integer_fromboolean)) boolean_yankdup integer_sub in2 boolean_or integer_fromboolean boolean_eq exec_k (integer_rot integer_inc boolean_yank) (exec_eq exec_pop (exec_rot (integer_empty) (boolean_xor exec_do*times () exec_do*while (integer_gt boolean_flush tag_exec_825 (boolean_dup_times exec_when (integer_div exec_y () exec_while () boolean_flush)))) ())))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 78


Auto-simplifying with starting size: 78
step: 0
program: (exec_when () boolean_frominteger integer_dup_times exec_dup (boolean_shove in3 in2) boolean_or integer_max integer_yankdup integer_swap exec_k (in1 integer_min boolean_invert_first_then_and boolean_invert_second_then_and) (exec_flush) integer_swap exec_k (in1 integer_min boolean_invert_first_then_and boolean_invert_second_then_and) (exec_flush) exec_do*times (tagged_997 print_integer boolean_rot integer_mult exec_dup_times (integer_fromboolean)) boolean_yankdup integer_sub in2 boolean_or integer_fromboolean boolean_eq exec_k (integer_rot integer_inc boolean_yank) (exec_eq exec_pop (exec_rot (integer_empty) (boolean_xor exec_do*times () exec_do*while (integer_gt boolean_flush tag_exec_825 (boolean_dup_times exec_when (integer_div exec_y () exec_while () boolean_flush)))) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 78

step: 500
program: (exec_when () boolean_frominteger integer_dup_times exec_dup (boolean_shove in3 in2) boolean_or integer_max integer_yankdup integer_swap exec_k (in1 integer_min boolean_invert_first_then_and boolean_invert_second_then_and) (exec_flush) integer_swap exec_k (in1 integer_min boolean_invert_first_then_and boolean_invert_second_then_and) (exec_flush) exec_do*times (tagged_997 print_integer boolean_rot integer_mult exec_dup_times (integer_fromboolean)) boolean_yankdup integer_sub in2 boolean_or integer_fromboolean boolean_eq exec_k (integer_rot integer_inc boolean_yank) (exec_eq exec_pop (exec_rot (integer_empty) (boolean_xor exec_do*times () exec_do*while (integer_gt boolean_flush tag_exec_825 (boolean_dup_times exec_when (integer_div exec_y () exec_while () boolean_flush)))) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 78

step: 1000
program: (exec_when () boolean_frominteger integer_dup_times exec_dup (boolean_shove in3 in2) boolean_or integer_max integer_yankdup integer_swap exec_k (in1 integer_min boolean_invert_first_then_and boolean_invert_second_then_and) (exec_flush) integer_swap exec_k (in1 integer_min boolean_invert_first_then_and boolean_invert_second_then_and) (exec_flush) exec_do*times (tagged_997 print_integer boolean_rot integer_mult exec_dup_times (integer_fromboolean)) boolean_yankdup integer_sub in2 boolean_or integer_fromboolean boolean_eq exec_k (integer_rot integer_inc boolean_yank) (exec_eq exec_pop (exec_rot (integer_empty) (boolean_xor exec_do*times () exec_do*while (integer_gt boolean_flush tag_exec_825 (boolean_dup_times exec_when (integer_div exec_y () exec_while () boolean_flush)))) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 78

step: 1500
program: (exec_when () boolean_frominteger integer_dup_times exec_dup (boolean_shove in3 in2) boolean_or integer_max integer_yankdup integer_swap exec_k (in1 integer_min boolean_invert_first_then_and boolean_invert_second_then_and) (exec_flush) integer_swap exec_k (in1 integer_min boolean_invert_first_then_and boolean_invert_second_then_and) (exec_flush) exec_do*times (tagged_997 print_integer boolean_rot integer_mult exec_dup_times (integer_fromboolean)) boolean_yankdup integer_sub in2 boolean_or integer_fromboolean boolean_eq exec_k (integer_rot integer_inc boolean_yank) (exec_eq exec_pop (exec_rot (integer_empty) (boolean_xor exec_do*times () exec_do*while (integer_gt boolean_flush tag_exec_825 (boolean_dup_times exec_when (integer_div exec_y () exec_while () boolean_flush)))) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 78

step: 2000
program: (exec_when () boolean_frominteger integer_dup_times exec_dup (boolean_shove in3 in2) boolean_or integer_max integer_yankdup integer_swap exec_k (in1 integer_min boolean_invert_first_then_and boolean_invert_second_then_and) (exec_flush) integer_swap exec_k (in1 integer_min boolean_invert_first_then_and boolean_invert_second_then_and) (exec_flush) exec_do*times (tagged_997 print_integer boolean_rot integer_mult exec_dup_times (integer_fromboolean)) boolean_yankdup integer_sub in2 boolean_or integer_fromboolean boolean_eq exec_k (integer_rot integer_inc boolean_yank) (exec_eq exec_pop (exec_rot (integer_empty) (boolean_xor exec_do*times () exec_do*while (integer_gt boolean_flush tag_exec_825 (boolean_dup_times exec_when (integer_div exec_y () exec_while () boolean_flush)))) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 78

step: 2500
program: (exec_when () boolean_frominteger integer_dup_times exec_dup (boolean_shove in3 in2) boolean_or integer_max integer_yankdup integer_swap exec_k (in1 integer_min boolean_invert_first_then_and boolean_invert_second_then_and) (exec_flush) integer_swap exec_k (in1 integer_min boolean_invert_first_then_and boolean_invert_second_then_and) (exec_flush) exec_do*times (tagged_997 print_integer boolean_rot integer_mult exec_dup_times (integer_fromboolean)) boolean_yankdup integer_sub in2 boolean_or integer_fromboolean boolean_eq exec_k (integer_rot integer_inc boolean_yank) (exec_eq exec_pop (exec_rot (integer_empty) (boolean_xor exec_do*times () exec_do*while (integer_gt boolean_flush tag_exec_825 (boolean_dup_times exec_when (integer_div exec_y () exec_while () boolean_flush)))) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 78

step: 3000
program: (exec_when () boolean_frominteger integer_dup_times exec_dup (boolean_shove in3 in2) boolean_or integer_max integer_yankdup integer_swap exec_k (in1 integer_min boolean_invert_first_then_and boolean_invert_second_then_and) (exec_flush) integer_swap exec_k (in1 integer_min boolean_invert_first_then_and boolean_invert_second_then_and) (exec_flush) exec_do*times (tagged_997 print_integer boolean_rot integer_mult exec_dup_times (integer_fromboolean)) boolean_yankdup integer_sub in2 boolean_or integer_fromboolean boolean_eq exec_k (integer_rot integer_inc boolean_yank) (exec_eq exec_pop (exec_rot (integer_empty) (boolean_xor exec_do*times () exec_do*while (integer_gt boolean_flush tag_exec_825 (boolean_dup_times exec_when (integer_div exec_y () exec_while () boolean_flush)))) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 78

step: 3500
program: (exec_when () boolean_frominteger integer_dup_times exec_dup (boolean_shove in3 in2) boolean_or integer_max integer_yankdup integer_swap exec_k (in1 integer_min boolean_invert_first_then_and boolean_invert_second_then_and) (exec_flush) integer_swap exec_k (in1 integer_min boolean_invert_first_then_and boolean_invert_second_then_and) (exec_flush) exec_do*times (tagged_997 print_integer boolean_rot integer_mult exec_dup_times (integer_fromboolean)) boolean_yankdup integer_sub in2 boolean_or integer_fromboolean boolean_eq exec_k (integer_rot integer_inc boolean_yank) (exec_eq exec_pop (exec_rot (integer_empty) (boolean_xor exec_do*times () exec_do*while (integer_gt boolean_flush tag_exec_825 (boolean_dup_times exec_when (integer_div exec_y () exec_while () boolean_flush)))) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 78

step: 4000
program: (exec_when () boolean_frominteger integer_dup_times exec_dup (boolean_shove in3 in2) boolean_or integer_max integer_yankdup integer_swap exec_k (in1 integer_min boolean_invert_first_then_and boolean_invert_second_then_and) (exec_flush) integer_swap exec_k (in1 integer_min boolean_invert_first_then_and boolean_invert_second_then_and) (exec_flush) exec_do*times (tagged_997 print_integer boolean_rot integer_mult exec_dup_times (integer_fromboolean)) boolean_yankdup integer_sub in2 boolean_or integer_fromboolean boolean_eq exec_k (integer_rot integer_inc boolean_yank) (exec_eq exec_pop (exec_rot (integer_empty) (boolean_xor exec_do*times () exec_do*while (integer_gt boolean_flush tag_exec_825 (boolean_dup_times exec_when (integer_div exec_y () exec_while () boolean_flush)))) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 78

step: 4500
program: (exec_when () boolean_frominteger integer_dup_times exec_dup (boolean_shove in3 in2) boolean_or integer_max integer_yankdup integer_swap exec_k (in1 integer_min boolean_invert_first_then_and boolean_invert_second_then_and) (exec_flush) integer_swap exec_k (in1 integer_min boolean_invert_first_then_and boolean_invert_second_then_and) (exec_flush) exec_do*times (tagged_997 print_integer boolean_rot integer_mult exec_dup_times (integer_fromboolean)) boolean_yankdup integer_sub in2 boolean_or integer_fromboolean boolean_eq exec_k (integer_rot integer_inc boolean_yank) (exec_eq exec_pop (exec_rot (integer_empty) (boolean_xor exec_do*times () exec_do*while (integer_gt boolean_flush tag_exec_825 (boolean_dup_times exec_when (integer_div exec_y () exec_while () boolean_flush)))) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 78

step: 5000
program: (exec_when () boolean_frominteger integer_dup_times exec_dup (boolean_shove in3 in2) boolean_or integer_max integer_yankdup integer_swap exec_k (in1 integer_min boolean_invert_first_then_and boolean_invert_second_then_and) (exec_flush) integer_swap exec_k (in1 integer_min boolean_invert_first_then_and boolean_invert_second_then_and) (exec_flush) exec_do*times (tagged_997 print_integer boolean_rot integer_mult exec_dup_times (integer_fromboolean)) boolean_yankdup integer_sub in2 boolean_or integer_fromboolean boolean_eq exec_k (integer_rot integer_inc boolean_yank) (exec_eq exec_pop (exec_rot (integer_empty) (boolean_xor exec_do*times () exec_do*while (integer_gt boolean_flush tag_exec_825 (boolean_dup_times exec_when (integer_div exec_y () exec_while () boolean_flush)))) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 78

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 24
Test total error for best: 356
Test mean error for best: 0.35600
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 1
Test Case    9 | Error: 1
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 1
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 1
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 1
Test Case   29 | Error: 0
Test Case   30 | Error: 1
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 1
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 1
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 1
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 1
Test Case   48 | Error: 1
Test Case   49 | Error: 0
Test Case   50 | Error: 1
Test Case   51 | Error: 1
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 1
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 1
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 1
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 1
Test Case   98 | Error: 0
Test Case   99 | Error: 1
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 1
Test Case  201 | Error: 1
Test Case  202 | Error: 1
Test Case  203 | Error: 1
Test Case  204 | Error: 0
Test Case  205 | Error: 1
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 1
Test Case  209 | Error: 1
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 1
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 1
Test Case  220 | Error: 1
Test Case  221 | Error: 1
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 1
Test Case  225 | Error: 1
Test Case  226 | Error: 0
Test Case  227 | Error: 1
Test Case  228 | Error: 0
Test Case  229 | Error: 1
Test Case  230 | Error: 1
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 1
Test Case  234 | Error: 1
Test Case  235 | Error: 1
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 1
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 1
Test Case  247 | Error: 0
Test Case  248 | Error: 1
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 1
Test Case  252 | Error: 0
Test Case  253 | Error: 1
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 1
Test Case  259 | Error: 1
Test Case  260 | Error: 1
Test Case  261 | Error: 1
Test Case  262 | Error: 0
Test Case  263 | Error: 1
Test Case  264 | Error: 0
Test Case  265 | Error: 1
Test Case  266 | Error: 0
Test Case  267 | Error: 1
Test Case  268 | Error: 1
Test Case  269 | Error: 1
Test Case  270 | Error: 1
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 1
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 1
Test Case  281 | Error: 1
Test Case  282 | Error: 1
Test Case  283 | Error: 0
Test Case  284 | Error: 1
Test Case  285 | Error: 0
Test Case  286 | Error: 1
Test Case  287 | Error: 1
Test Case  288 | Error: 1
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 1
Test Case  293 | Error: 1
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 1
Test Case  297 | Error: 1
Test Case  298 | Error: 1
Test Case  299 | Error: 1
Test Case  300 | Error: 0
Test Case  301 | Error: 1
Test Case  302 | Error: 1
Test Case  303 | Error: 1
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 1
Test Case  307 | Error: 0
Test Case  308 | Error: 1
Test Case  309 | Error: 1
Test Case  310 | Error: 1
Test Case  311 | Error: 1
Test Case  312 | Error: 1
Test Case  313 | Error: 1
Test Case  314 | Error: 1
Test Case  315 | Error: 1
Test Case  316 | Error: 0
Test Case  317 | Error: 1
Test Case  318 | Error: 1
Test Case  319 | Error: 1
Test Case  320 | Error: 0
Test Case  321 | Error: 1
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 1
Test Case  325 | Error: 1
Test Case  326 | Error: 1
Test Case  327 | Error: 0
Test Case  328 | Error: 1
Test Case  329 | Error: 1
Test Case  330 | Error: 0
Test Case  331 | Error: 1
Test Case  332 | Error: 1
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 1
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 1
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 1
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 1
Test Case  350 | Error: 1
Test Case  351 | Error: 1
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 1
Test Case  355 | Error: 1
Test Case  356 | Error: 0
Test Case  357 | Error: 1
Test Case  358 | Error: 1
Test Case  359 | Error: 1
Test Case  360 | Error: 1
Test Case  361 | Error: 0
Test Case  362 | Error: 1
Test Case  363 | Error: 1
Test Case  364 | Error: 1
Test Case  365 | Error: 1
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 1
Test Case  369 | Error: 1
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 1
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 1
Test Case  380 | Error: 1
Test Case  381 | Error: 1
Test Case  382 | Error: 1
Test Case  383 | Error: 1
Test Case  384 | Error: 0
Test Case  385 | Error: 1
Test Case  386 | Error: 1
Test Case  387 | Error: 1
Test Case  388 | Error: 1
Test Case  389 | Error: 1
Test Case  390 | Error: 1
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 1
Test Case  397 | Error: 0
Test Case  398 | Error: 1
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 1
Test Case  404 | Error: 0
Test Case  405 | Error: 1
Test Case  406 | Error: 0
Test Case  407 | Error: 1
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 1
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 1
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 1
Test Case  422 | Error: 0
Test Case  423 | Error: 1
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 1
Test Case  431 | Error: 1
Test Case  432 | Error: 0
Test Case  433 | Error: 1
Test Case  434 | Error: 1
Test Case  435 | Error: 1
Test Case  436 | Error: 1
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 1
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 1
Test Case  446 | Error: 1
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 1
Test Case  453 | Error: 1
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 1
Test Case  461 | Error: 0
Test Case  462 | Error: 1
Test Case  463 | Error: 0
Test Case  464 | Error: 1
Test Case  465 | Error: 1
Test Case  466 | Error: 1
Test Case  467 | Error: 1
Test Case  468 | Error: 0
Test Case  469 | Error: 1
Test Case  470 | Error: 0
Test Case  471 | Error: 1
Test Case  472 | Error: 1
Test Case  473 | Error: 1
Test Case  474 | Error: 1
Test Case  475 | Error: 1
Test Case  476 | Error: 0
Test Case  477 | Error: 1
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 1
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 1
Test Case  485 | Error: 1
Test Case  486 | Error: 1
Test Case  487 | Error: 1
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 1
Test Case  491 | Error: 1
Test Case  492 | Error: 1
Test Case  493 | Error: 1
Test Case  494 | Error: 1
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 1
Test Case  500 | Error: 1
Test Case  501 | Error: 0
Test Case  502 | Error: 1
Test Case  503 | Error: 1
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 1
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 1
Test Case  513 | Error: 0
Test Case  514 | Error: 1
Test Case  515 | Error: 1
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 1
Test Case  521 | Error: 1
Test Case  522 | Error: 0
Test Case  523 | Error: 1
Test Case  524 | Error: 1
Test Case  525 | Error: 1
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 1
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 1
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 1
Test Case  543 | Error: 1
Test Case  544 | Error: 1
Test Case  545 | Error: 1
Test Case  546 | Error: 0
Test Case  547 | Error: 1
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 1
Test Case  552 | Error: 1
Test Case  553 | Error: 0
Test Case  554 | Error: 1
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 1
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 1
Test Case  563 | Error: 0
Test Case  564 | Error: 1
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 1
Test Case  568 | Error: 1
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 1
Test Case  572 | Error: 1
Test Case  573 | Error: 1
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 1
Test Case  577 | Error: 1
Test Case  578 | Error: 0
Test Case  579 | Error: 1
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 1
Test Case  586 | Error: 1
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 1
Test Case  593 | Error: 1
Test Case  594 | Error: 0
Test Case  595 | Error: 1
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 1
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 1
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 1
Test Case  611 | Error: 1
Test Case  612 | Error: 1
Test Case  613 | Error: 1
Test Case  614 | Error: 1
Test Case  615 | Error: 0
Test Case  616 | Error: 1
Test Case  617 | Error: 0
Test Case  618 | Error: 1
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 1
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 1
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 1
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 1
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 1
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 1
Test Case  642 | Error: 1
Test Case  643 | Error: 1
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 1
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 1
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 1
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 1
Test Case  663 | Error: 1
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 1
Test Case  670 | Error: 1
Test Case  671 | Error: 1
Test Case  672 | Error: 1
Test Case  673 | Error: 1
Test Case  674 | Error: 1
Test Case  675 | Error: 0
Test Case  676 | Error: 1
Test Case  677 | Error: 0
Test Case  678 | Error: 1
Test Case  679 | Error: 0
Test Case  680 | Error: 1
Test Case  681 | Error: 1
Test Case  682 | Error: 1
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 1
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 1
Test Case  689 | Error: 1
Test Case  690 | Error: 0
Test Case  691 | Error: 1
Test Case  692 | Error: 1
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 1
Test Case  696 | Error: 1
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 1
Test Case  708 | Error: 1
Test Case  709 | Error: 0
Test Case  710 | Error: 1
Test Case  711 | Error: 0
Test Case  712 | Error: 1
Test Case  713 | Error: 0
Test Case  714 | Error: 1
Test Case  715 | Error: 1
Test Case  716 | Error: 1
Test Case  717 | Error: 1
Test Case  718 | Error: 0
Test Case  719 | Error: 1
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 1
Test Case  723 | Error: 1
Test Case  724 | Error: 1
Test Case  725 | Error: 1
Test Case  726 | Error: 0
Test Case  727 | Error: 1
Test Case  728 | Error: 1
Test Case  729 | Error: 1
Test Case  730 | Error: 0
Test Case  731 | Error: 1
Test Case  732 | Error: 1
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 1
Test Case  736 | Error: 0
Test Case  737 | Error: 1
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 1
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 1
Test Case  746 | Error: 1
Test Case  747 | Error: 1
Test Case  748 | Error: 0
Test Case  749 | Error: 1
Test Case  750 | Error: 0
Test Case  751 | Error: 1
Test Case  752 | Error: 0
Test Case  753 | Error: 1
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 1
Test Case  758 | Error: 1
Test Case  759 | Error: 1
Test Case  760 | Error: 0
Test Case  761 | Error: 1
Test Case  762 | Error: 0
Test Case  763 | Error: 1
Test Case  764 | Error: 1
Test Case  765 | Error: 1
Test Case  766 | Error: 1
Test Case  767 | Error: 1
Test Case  768 | Error: 1
Test Case  769 | Error: 1
Test Case  770 | Error: 1
Test Case  771 | Error: 0
Test Case  772 | Error: 1
Test Case  773 | Error: 1
Test Case  774 | Error: 0
Test Case  775 | Error: 1
Test Case  776 | Error: 1
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 1
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 1
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 1
Test Case  793 | Error: 1
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 1
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 1
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 1
Test Case  805 | Error: 1
Test Case  806 | Error: 1
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 1
Test Case  813 | Error: 1
Test Case  814 | Error: 0
Test Case  815 | Error: 1
Test Case  816 | Error: 0
Test Case  817 | Error: 1
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 1
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 1
Test Case  833 | Error: 1
Test Case  834 | Error: 1
Test Case  835 | Error: 1
Test Case  836 | Error: 0
Test Case  837 | Error: 1
Test Case  838 | Error: 1
Test Case  839 | Error: 1
Test Case  840 | Error: 1
Test Case  841 | Error: 0
Test Case  842 | Error: 1
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 1
Test Case  855 | Error: 1
Test Case  856 | Error: 1
Test Case  857 | Error: 1
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 1
Test Case  862 | Error: 1
Test Case  863 | Error: 1
Test Case  864 | Error: 0
Test Case  865 | Error: 1
Test Case  866 | Error: 1
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 1
Test Case  874 | Error: 0
Test Case  875 | Error: 1
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 1
Test Case  884 | Error: 1
Test Case  885 | Error: 1
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 1
Test Case  894 | Error: 0
Test Case  895 | Error: 1
Test Case  896 | Error: 0
Test Case  897 | Error: 1
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 1
Test Case  904 | Error: 1
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 1
Test Case  910 | Error: 1
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 1
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 1
Test Case  929 | Error: 1
Test Case  930 | Error: 1
Test Case  931 | Error: 0
Test Case  932 | Error: 1
Test Case  933 | Error: 1
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 1
Test Case  939 | Error: 0
Test Case  940 | Error: 1
Test Case  941 | Error: 1
Test Case  942 | Error: 0
Test Case  943 | Error: 1
Test Case  944 | Error: 1
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 1
Test Case  948 | Error: 1
Test Case  949 | Error: 0
Test Case  950 | Error: 1
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 1
Test Case  954 | Error: 1
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 1
Test Case  962 | Error: 0
Test Case  963 | Error: 1
Test Case  964 | Error: 1
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 1
Test Case  970 | Error: 1
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 1
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 1
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 1
Test Case  990 | Error: 1
Test Case  991 | Error: 0
Test Case  992 | Error: 1
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 1
Test Case  996 | Error: 0
Test Case  997 | Error: 1
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -96                 | Program output: -96                
Correct output: 38                  | Program output: 38                 
Correct output: -79                 | Program output: -79                
Correct output: -57                 | Program output: -57                
Correct output: -24                 | Program output: -24                
Correct output: -27                 | Program output: -27                
Correct output: -92                 | Program output: -92                
Correct output: -53                 | Program output: -53                
Correct output: -92                 | Program output: -92                
Correct output: -33                 | Program output: -33                
Correct output: 1                   | Program output: 1                  
Correct output: -94                 | Program output: -94                
Correct output: -49                 | Program output: -49                
Correct output: 0                   | Program output: 0                  
Correct output: -23                 | Program output: -23                
Correct output: 12                  | Program output: 31                 
Correct output: 22                  | Program output: 22                 
Correct output: 15                  | Program output: 56                 
Correct output: 35                  | Program output: 35                 
Correct output: 25                  | Program output: 68                 
Correct output: 35                  | Program output: 59                 
Correct output: 5                   | Program output: 5                  
Correct output: 33                  | Program output: 33                 
Correct output: 25                  | Program output: 25                 
Correct output: 0                   | Program output: 0                  
Correct output: 19                  | Program output: 19                 
Correct output: 7                   | Program output: 11                 
Correct output: 1                   | Program output: 1                  
Correct output: 0                   | Program output: 0                  
Correct output: 18                  | Program output: 68                 
Correct output: 3                   | Program output: 7                  
Correct output: 19                  | Program output: 19                 
Correct output: 32                  | Program output: 46                 
Correct output: 23                  | Program output: 57                 
Correct output: 11                  | Program output: 76                 
Correct output: -91                 | Program output: -91                
Correct output: -74                 | Program output: -74                
Correct output: -4                  | Program output: 13                 
Correct output: -81                 | Program output: -81                
Correct output: -93                 | Program output: -93                
Correct output: -29                 | Program output: -23                
Correct output: -21                 | Program output: -21                
Correct output: -91                 | Program output: -8                 
Correct output: -25                 | Program output: -25                
Correct output: -64                 | Program output: -64                
Correct output: -81                 | Program output: -81                
Correct output: -40                 | Program output: -40                
Correct output: -50                 | Program output: 17                 
Correct output: -95                 | Program output: -95                
Correct output: -66                 | Program output: -66                
Correct output: -35                 | Program output: -35                
Correct output: -94                 | Program output: -39                
Correct output: -59                 | Program output: -54                
Correct output: -27                 | Program output: -27                
Correct output: -95                 | Program output: -95                
Correct output: -72                 | Program output: -72                
Correct output: -62                 | Program output: -62                
Correct output: -70                 | Program output: -16                
Correct output: -77                 | Program output: -77                
Correct output: -63                 | Program output: -46                
Correct output: -97                 | Program output: -48                
Correct output: -62                 | Program output: -32                
Correct output: -29                 | Program output: -18                
Correct output: -16                 | Program output: -11                
Correct output: -89                 | Program output: -42                
Correct output: 7                   | Program output: 79                 
Correct output: -87                 | Program output: -87                
Correct output: -89                 | Program output: -75                
Correct output: -68                 | Program output: -68                
Correct output: -82                 | Program output: -82                
Correct output: -88                 | Program output: -88                
Correct output: -83                 | Program output: -1                 
Correct output: -38                 | Program output: -35                
Correct output: -69                 | Program output: -69                
Correct output: -56                 | Program output: -56                
Correct output: -59                 | Program output: -59                
Correct output: -85                 | Program output: -1                 
Correct output: -57                 | Program output: 25                 
Correct output: -78                 | Program output: -78                
Correct output: -75                 | Program output: -64                
Correct output: -32                 | Program output: -32                
Correct output: -80                 | Program output: -80                
Correct output: -81                 | Program output: -81                
Correct output: -87                 | Program output: -72                
Correct output: 27                  | Program output: 56                 
Correct output: -87                 | Program output: -19                
Correct output: -55                 | Program output: -55                
Correct output: 18                  | Program output: 18                 
Correct output: 8                   | Program output: 13                 
Correct output: -84                 | Program output: -84                
Correct output: -100                | Program output: -100               
Correct output: -71                 | Program output: 64                 
Correct output: -59                 | Program output: -59                
Correct output: -82                 | Program output: -82                
Correct output: -18                 | Program output: -18                
;;******************************
